
PID_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058a8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08005a30  08005a30  00015a30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a78  08005a78  000200d4  2**0
                  CONTENTS
  4 .ARM          00000008  08005a78  08005a78  00015a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a80  08005a80  000200d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a80  08005a80  00015a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a84  08005a84  00015a84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d4  20000000  08005a88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  200000d4  08005b5c  000200d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f8  08005b5c  000202f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000162c1  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000028f2  00000000  00000000  000363c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001370  00000000  00000000  00038cb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001208  00000000  00000000  0003a028  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029afc  00000000  00000000  0003b230  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010f24  00000000  00000000  00064d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00108a2d  00000000  00000000  00075c50  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017e67d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051fc  00000000  00000000  0017e6f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000d4 	.word	0x200000d4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005a18 	.word	0x08005a18

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000d8 	.word	0x200000d8
 80001c4:	08005a18 	.word	0x08005a18

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b08a      	sub	sp, #40	; 0x28
 80004cc:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 80004ce:	f107 031c 	add.w	r3, r7, #28
 80004d2:	2200      	movs	r2, #0
 80004d4:	601a      	str	r2, [r3, #0]
 80004d6:	605a      	str	r2, [r3, #4]
 80004d8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80004da:	1d3b      	adds	r3, r7, #4
 80004dc:	2200      	movs	r2, #0
 80004de:	601a      	str	r2, [r3, #0]
 80004e0:	605a      	str	r2, [r3, #4]
 80004e2:	609a      	str	r2, [r3, #8]
 80004e4:	60da      	str	r2, [r3, #12]
 80004e6:	611a      	str	r2, [r3, #16]
 80004e8:	615a      	str	r2, [r3, #20]

  /** Common config
  */
  hadc1.Instance = ADC1;
 80004ea:	4b30      	ldr	r3, [pc, #192]	; (80005ac <MX_ADC1_Init+0xe4>)
 80004ec:	4a30      	ldr	r2, [pc, #192]	; (80005b0 <MX_ADC1_Init+0xe8>)
 80004ee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80004f0:	4b2e      	ldr	r3, [pc, #184]	; (80005ac <MX_ADC1_Init+0xe4>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004f6:	4b2d      	ldr	r3, [pc, #180]	; (80005ac <MX_ADC1_Init+0xe4>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004fc:	4b2b      	ldr	r3, [pc, #172]	; (80005ac <MX_ADC1_Init+0xe4>)
 80004fe:	2200      	movs	r2, #0
 8000500:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000502:	4b2a      	ldr	r3, [pc, #168]	; (80005ac <MX_ADC1_Init+0xe4>)
 8000504:	2200      	movs	r2, #0
 8000506:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000508:	4b28      	ldr	r3, [pc, #160]	; (80005ac <MX_ADC1_Init+0xe4>)
 800050a:	2204      	movs	r2, #4
 800050c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800050e:	4b27      	ldr	r3, [pc, #156]	; (80005ac <MX_ADC1_Init+0xe4>)
 8000510:	2200      	movs	r2, #0
 8000512:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000514:	4b25      	ldr	r3, [pc, #148]	; (80005ac <MX_ADC1_Init+0xe4>)
 8000516:	2200      	movs	r2, #0
 8000518:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800051a:	4b24      	ldr	r3, [pc, #144]	; (80005ac <MX_ADC1_Init+0xe4>)
 800051c:	2201      	movs	r2, #1
 800051e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000520:	4b22      	ldr	r3, [pc, #136]	; (80005ac <MX_ADC1_Init+0xe4>)
 8000522:	2200      	movs	r2, #0
 8000524:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000528:	4b20      	ldr	r3, [pc, #128]	; (80005ac <MX_ADC1_Init+0xe4>)
 800052a:	f44f 62e8 	mov.w	r2, #1856	; 0x740
 800052e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000530:	4b1e      	ldr	r3, [pc, #120]	; (80005ac <MX_ADC1_Init+0xe4>)
 8000532:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000536:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000538:	4b1c      	ldr	r3, [pc, #112]	; (80005ac <MX_ADC1_Init+0xe4>)
 800053a:	2200      	movs	r2, #0
 800053c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000540:	4b1a      	ldr	r3, [pc, #104]	; (80005ac <MX_ADC1_Init+0xe4>)
 8000542:	2200      	movs	r2, #0
 8000544:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000546:	4b19      	ldr	r3, [pc, #100]	; (80005ac <MX_ADC1_Init+0xe4>)
 8000548:	2200      	movs	r2, #0
 800054a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800054e:	4817      	ldr	r0, [pc, #92]	; (80005ac <MX_ADC1_Init+0xe4>)
 8000550:	f001 f8b8 	bl	80016c4 <HAL_ADC_Init>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 800055a:	f000 fadb 	bl	8000b14 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800055e:	2300      	movs	r3, #0
 8000560:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000562:	f107 031c 	add.w	r3, r7, #28
 8000566:	4619      	mov	r1, r3
 8000568:	4810      	ldr	r0, [pc, #64]	; (80005ac <MX_ADC1_Init+0xe4>)
 800056a:	f002 fa0d 	bl	8002988 <HAL_ADCEx_MultiModeConfigChannel>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000574:	f000 face 	bl	8000b14 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000578:	4b0e      	ldr	r3, [pc, #56]	; (80005b4 <MX_ADC1_Init+0xec>)
 800057a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800057c:	2306      	movs	r3, #6
 800057e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8000580:	2304      	movs	r3, #4
 8000582:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000584:	237f      	movs	r3, #127	; 0x7f
 8000586:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000588:	2304      	movs	r3, #4
 800058a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800058c:	2300      	movs	r3, #0
 800058e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000590:	1d3b      	adds	r3, r7, #4
 8000592:	4619      	mov	r1, r3
 8000594:	4805      	ldr	r0, [pc, #20]	; (80005ac <MX_ADC1_Init+0xe4>)
 8000596:	f001 fd57 	bl	8002048 <HAL_ADC_ConfigChannel>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 80005a0:	f000 fab8 	bl	8000b14 <Error_Handler>
  }

}
 80005a4:	bf00      	nop
 80005a6:	3728      	adds	r7, #40	; 0x28
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	200000f0 	.word	0x200000f0
 80005b0:	50040000 	.word	0x50040000
 80005b4:	3ef08000 	.word	0x3ef08000

080005b8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b08a      	sub	sp, #40	; 0x28
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c0:	f107 0314 	add.w	r3, r7, #20
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
 80005ca:	609a      	str	r2, [r3, #8]
 80005cc:	60da      	str	r2, [r3, #12]
 80005ce:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a19      	ldr	r2, [pc, #100]	; (800063c <HAL_ADC_MspInit+0x84>)
 80005d6:	4293      	cmp	r3, r2
 80005d8:	d12b      	bne.n	8000632 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80005da:	4b19      	ldr	r3, [pc, #100]	; (8000640 <HAL_ADC_MspInit+0x88>)
 80005dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005de:	4a18      	ldr	r2, [pc, #96]	; (8000640 <HAL_ADC_MspInit+0x88>)
 80005e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80005e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005e6:	4b16      	ldr	r3, [pc, #88]	; (8000640 <HAL_ADC_MspInit+0x88>)
 80005e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80005ee:	613b      	str	r3, [r7, #16]
 80005f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f2:	4b13      	ldr	r3, [pc, #76]	; (8000640 <HAL_ADC_MspInit+0x88>)
 80005f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005f6:	4a12      	ldr	r2, [pc, #72]	; (8000640 <HAL_ADC_MspInit+0x88>)
 80005f8:	f043 0302 	orr.w	r3, r3, #2
 80005fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005fe:	4b10      	ldr	r3, [pc, #64]	; (8000640 <HAL_ADC_MspInit+0x88>)
 8000600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000602:	f003 0302 	and.w	r3, r3, #2
 8000606:	60fb      	str	r3, [r7, #12]
 8000608:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800060a:	2301      	movs	r3, #1
 800060c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800060e:	230b      	movs	r3, #11
 8000610:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000612:	2300      	movs	r3, #0
 8000614:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000616:	f107 0314 	add.w	r3, r7, #20
 800061a:	4619      	mov	r1, r3
 800061c:	4809      	ldr	r0, [pc, #36]	; (8000644 <HAL_ADC_MspInit+0x8c>)
 800061e:	f002 fd1f 	bl	8003060 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000622:	2200      	movs	r2, #0
 8000624:	2100      	movs	r1, #0
 8000626:	2012      	movs	r0, #18
 8000628:	f002 fb35 	bl	8002c96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800062c:	2012      	movs	r0, #18
 800062e:	f002 fb4e 	bl	8002cce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000632:	bf00      	nop
 8000634:	3728      	adds	r7, #40	; 0x28
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	50040000 	.word	0x50040000
 8000640:	40021000 	.word	0x40021000
 8000644:	48000400 	.word	0x48000400

08000648 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b08a      	sub	sp, #40	; 0x28
 800064c:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 800064e:	1d3b      	adds	r3, r7, #4
 8000650:	2224      	movs	r2, #36	; 0x24
 8000652:	2100      	movs	r1, #0
 8000654:	4618      	mov	r0, r3
 8000656:	f005 f9d7 	bl	8005a08 <memset>

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800065a:	4b12      	ldr	r3, [pc, #72]	; (80006a4 <MX_DAC1_Init+0x5c>)
 800065c:	4a12      	ldr	r2, [pc, #72]	; (80006a8 <MX_DAC1_Init+0x60>)
 800065e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000660:	4810      	ldr	r0, [pc, #64]	; (80006a4 <MX_DAC1_Init+0x5c>)
 8000662:	f002 fb4e 	bl	8002d02 <HAL_DAC_Init>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800066c:	f000 fa52 	bl	8000b14 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000670:	2300      	movs	r3, #0
 8000672:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000674:	2300      	movs	r3, #0
 8000676:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000678:	2300      	movs	r3, #0
 800067a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800067c:	2300      	movs	r3, #0
 800067e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000680:	2300      	movs	r3, #0
 8000682:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000684:	1d3b      	adds	r3, r7, #4
 8000686:	2200      	movs	r2, #0
 8000688:	4619      	mov	r1, r3
 800068a:	4806      	ldr	r0, [pc, #24]	; (80006a4 <MX_DAC1_Init+0x5c>)
 800068c:	f002 fbcd 	bl	8002e2a <HAL_DAC_ConfigChannel>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000696:	f000 fa3d 	bl	8000b14 <Error_Handler>
  }

}
 800069a:	bf00      	nop
 800069c:	3728      	adds	r7, #40	; 0x28
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	20000154 	.word	0x20000154
 80006a8:	40007400 	.word	0x40007400

080006ac <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b08a      	sub	sp, #40	; 0x28
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b4:	f107 0314 	add.w	r3, r7, #20
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]
 80006c2:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a15      	ldr	r2, [pc, #84]	; (8000720 <HAL_DAC_MspInit+0x74>)
 80006ca:	4293      	cmp	r3, r2
 80006cc:	d124      	bne.n	8000718 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80006ce:	4b15      	ldr	r3, [pc, #84]	; (8000724 <HAL_DAC_MspInit+0x78>)
 80006d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006d2:	4a14      	ldr	r2, [pc, #80]	; (8000724 <HAL_DAC_MspInit+0x78>)
 80006d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80006d8:	6593      	str	r3, [r2, #88]	; 0x58
 80006da:	4b12      	ldr	r3, [pc, #72]	; (8000724 <HAL_DAC_MspInit+0x78>)
 80006dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80006e2:	613b      	str	r3, [r7, #16]
 80006e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e6:	4b0f      	ldr	r3, [pc, #60]	; (8000724 <HAL_DAC_MspInit+0x78>)
 80006e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ea:	4a0e      	ldr	r2, [pc, #56]	; (8000724 <HAL_DAC_MspInit+0x78>)
 80006ec:	f043 0301 	orr.w	r3, r3, #1
 80006f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006f2:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <HAL_DAC_MspInit+0x78>)
 80006f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f6:	f003 0301 	and.w	r3, r3, #1
 80006fa:	60fb      	str	r3, [r7, #12]
 80006fc:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80006fe:	2310      	movs	r3, #16
 8000700:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000702:	2303      	movs	r3, #3
 8000704:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000706:	2300      	movs	r3, #0
 8000708:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800070a:	f107 0314 	add.w	r3, r7, #20
 800070e:	4619      	mov	r1, r3
 8000710:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000714:	f002 fca4 	bl	8003060 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000718:	bf00      	nop
 800071a:	3728      	adds	r7, #40	; 0x28
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	40007400 	.word	0x40007400
 8000724:	40021000 	.word	0x40021000

08000728 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b08a      	sub	sp, #40	; 0x28
 800072c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072e:	f107 0314 	add.w	r3, r7, #20
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
 8000738:	609a      	str	r2, [r3, #8]
 800073a:	60da      	str	r2, [r3, #12]
 800073c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800073e:	4b2b      	ldr	r3, [pc, #172]	; (80007ec <MX_GPIO_Init+0xc4>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000742:	4a2a      	ldr	r2, [pc, #168]	; (80007ec <MX_GPIO_Init+0xc4>)
 8000744:	f043 0304 	orr.w	r3, r3, #4
 8000748:	64d3      	str	r3, [r2, #76]	; 0x4c
 800074a:	4b28      	ldr	r3, [pc, #160]	; (80007ec <MX_GPIO_Init+0xc4>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074e:	f003 0304 	and.w	r3, r3, #4
 8000752:	613b      	str	r3, [r7, #16]
 8000754:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000756:	4b25      	ldr	r3, [pc, #148]	; (80007ec <MX_GPIO_Init+0xc4>)
 8000758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075a:	4a24      	ldr	r2, [pc, #144]	; (80007ec <MX_GPIO_Init+0xc4>)
 800075c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000760:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000762:	4b22      	ldr	r3, [pc, #136]	; (80007ec <MX_GPIO_Init+0xc4>)
 8000764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800076e:	4b1f      	ldr	r3, [pc, #124]	; (80007ec <MX_GPIO_Init+0xc4>)
 8000770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000772:	4a1e      	ldr	r2, [pc, #120]	; (80007ec <MX_GPIO_Init+0xc4>)
 8000774:	f043 0301 	orr.w	r3, r3, #1
 8000778:	64d3      	str	r3, [r2, #76]	; 0x4c
 800077a:	4b1c      	ldr	r3, [pc, #112]	; (80007ec <MX_GPIO_Init+0xc4>)
 800077c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077e:	f003 0301 	and.w	r3, r3, #1
 8000782:	60bb      	str	r3, [r7, #8]
 8000784:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000786:	4b19      	ldr	r3, [pc, #100]	; (80007ec <MX_GPIO_Init+0xc4>)
 8000788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078a:	4a18      	ldr	r2, [pc, #96]	; (80007ec <MX_GPIO_Init+0xc4>)
 800078c:	f043 0302 	orr.w	r3, r3, #2
 8000790:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000792:	4b16      	ldr	r3, [pc, #88]	; (80007ec <MX_GPIO_Init+0xc4>)
 8000794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000796:	f003 0302 	and.w	r3, r3, #2
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800079e:	2200      	movs	r2, #0
 80007a0:	2120      	movs	r1, #32
 80007a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007a6:	f002 fe03 	bl	80033b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007b0:	4b0f      	ldr	r3, [pc, #60]	; (80007f0 <MX_GPIO_Init+0xc8>)
 80007b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b4:	2300      	movs	r3, #0
 80007b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007b8:	f107 0314 	add.w	r3, r7, #20
 80007bc:	4619      	mov	r1, r3
 80007be:	480d      	ldr	r0, [pc, #52]	; (80007f4 <MX_GPIO_Init+0xcc>)
 80007c0:	f002 fc4e 	bl	8003060 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007c4:	2320      	movs	r3, #32
 80007c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c8:	2301      	movs	r3, #1
 80007ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d0:	2300      	movs	r3, #0
 80007d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007d4:	f107 0314 	add.w	r3, r7, #20
 80007d8:	4619      	mov	r1, r3
 80007da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007de:	f002 fc3f 	bl	8003060 <HAL_GPIO_Init>

}
 80007e2:	bf00      	nop
 80007e4:	3728      	adds	r7, #40	; 0x28
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40021000 	.word	0x40021000
 80007f0:	10210000 	.word	0x10210000
 80007f4:	48000800 	.word	0x48000800

080007f8 <HAL_ADC_ConvCpltCallback>:
int _write(int file, char *ptr, int len) {
	HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, 50);
	return len;
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  if (hadc == &hadc1) {
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	4a08      	ldr	r2, [pc, #32]	; (8000824 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000804:	4293      	cmp	r3, r2
 8000806:	d109      	bne.n	800081c <HAL_ADC_ConvCpltCallback+0x24>
    adc_flag = 1;
 8000808:	4b07      	ldr	r3, [pc, #28]	; (8000828 <HAL_ADC_ConvCpltCallback+0x30>)
 800080a:	2201      	movs	r2, #1
 800080c:	601a      	str	r2, [r3, #0]
    adc_value = HAL_ADC_GetValue(hadc);
 800080e:	6878      	ldr	r0, [r7, #4]
 8000810:	f001 f9de 	bl	8001bd0 <HAL_ADC_GetValue>
 8000814:	4603      	mov	r3, r0
 8000816:	461a      	mov	r2, r3
 8000818:	4b04      	ldr	r3, [pc, #16]	; (800082c <HAL_ADC_ConvCpltCallback+0x34>)
 800081a:	601a      	str	r2, [r3, #0]
  }
}
 800081c:	bf00      	nop
 800081e:	3708      	adds	r7, #8
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	200000f0 	.word	0x200000f0
 8000828:	200001c8 	.word	0x200001c8
 800082c:	200001cc 	.word	0x200001cc

08000830 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
	if (htim == &htim7) {
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	4a18      	ldr	r2, [pc, #96]	; (800089c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800083c:	4293      	cmp	r3, r2
 800083e:	d127      	bne.n	8000890 <HAL_TIM_PeriodElapsedCallback+0x60>
		dac_value = sin_wave[dac_index];
 8000840:	4b17      	ldr	r3, [pc, #92]	; (80008a0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000842:	881b      	ldrh	r3, [r3, #0]
 8000844:	b29b      	uxth	r3, r3
 8000846:	461a      	mov	r2, r3
 8000848:	4b16      	ldr	r3, [pc, #88]	; (80008a4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800084a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800084e:	461a      	mov	r2, r3
 8000850:	4b15      	ldr	r3, [pc, #84]	; (80008a8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000852:	601a      	str	r2, [r3, #0]
		++dac_nperiod;
 8000854:	4b15      	ldr	r3, [pc, #84]	; (80008ac <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	b2db      	uxtb	r3, r3
 800085a:	3301      	adds	r3, #1
 800085c:	b2da      	uxtb	r2, r3
 800085e:	4b13      	ldr	r3, [pc, #76]	; (80008ac <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000860:	701a      	strb	r2, [r3, #0]
		if (dac_nperiod >= dac_nperiod_max) {
 8000862:	4b12      	ldr	r3, [pc, #72]	; (80008ac <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	b2db      	uxtb	r3, r3
 8000868:	2b63      	cmp	r3, #99	; 0x63
 800086a:	d911      	bls.n	8000890 <HAL_TIM_PeriodElapsedCallback+0x60>
			dac_nperiod = 0;
 800086c:	4b0f      	ldr	r3, [pc, #60]	; (80008ac <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800086e:	2200      	movs	r2, #0
 8000870:	701a      	strb	r2, [r3, #0]
			++dac_index;
 8000872:	4b0b      	ldr	r3, [pc, #44]	; (80008a0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000874:	881b      	ldrh	r3, [r3, #0]
 8000876:	b29b      	uxth	r3, r3
 8000878:	3301      	adds	r3, #1
 800087a:	b29a      	uxth	r2, r3
 800087c:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800087e:	801a      	strh	r2, [r3, #0]
			if (dac_index >= 100)
 8000880:	4b07      	ldr	r3, [pc, #28]	; (80008a0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000882:	881b      	ldrh	r3, [r3, #0]
 8000884:	b29b      	uxth	r3, r3
 8000886:	2b63      	cmp	r3, #99	; 0x63
 8000888:	d902      	bls.n	8000890 <HAL_TIM_PeriodElapsedCallback+0x60>
				dac_index = 0;
 800088a:	4b05      	ldr	r3, [pc, #20]	; (80008a0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800088c:	2200      	movs	r2, #0
 800088e:	801a      	strh	r2, [r3, #0]
		}
	}
}
 8000890:	bf00      	nop
 8000892:	370c      	adds	r7, #12
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr
 800089c:	20000228 	.word	0x20000228
 80008a0:	200001c4 	.word	0x200001c4
 80008a4:	20000000 	.word	0x20000000
 80008a8:	200001d8 	.word	0x200001d8
 80008ac:	200001d4 	.word	0x200001d4

080008b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008b4:	f000 fc72 	bl	800119c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008b8:	f000 f8a4 	bl	8000a04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008bc:	f7ff ff34 	bl	8000728 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80008c0:	f000 fbd0 	bl	8001064 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80008c4:	f7ff fe00 	bl	80004c8 <MX_ADC1_Init>
  MX_DAC1_Init();
 80008c8:	f7ff febe 	bl	8000648 <MX_DAC1_Init>
  MX_TIM6_Init();
 80008cc:	f000 fb24 	bl	8000f18 <MX_TIM6_Init>
  MX_TIM7_Init();
 80008d0:	f000 fb58 	bl	8000f84 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */


  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 80008d4:	2300      	movs	r3, #0
 80008d6:	2200      	movs	r2, #0
 80008d8:	2100      	movs	r1, #0
 80008da:	483e      	ldr	r0, [pc, #248]	; (80009d4 <main+0x124>)
 80008dc:	f002 fa80 	bl	8002de0 <HAL_DAC_SetValue>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80008e0:	2100      	movs	r1, #0
 80008e2:	483c      	ldr	r0, [pc, #240]	; (80009d4 <main+0x124>)
 80008e4:	f002 fa2f 	bl	8002d46 <HAL_DAC_Start>

  //PID LOOP
  HAL_TIM_Base_Start(&htim6);
 80008e8:	483b      	ldr	r0, [pc, #236]	; (80009d8 <main+0x128>)
 80008ea:	f004 f8cf 	bl	8004a8c <HAL_TIM_Base_Start>

  //DAC DESIRED VALUE
  HAL_TIM_Base_Start_IT(&htim7);
 80008ee:	483b      	ldr	r0, [pc, #236]	; (80009dc <main+0x12c>)
 80008f0:	f004 f934 	bl	8004b5c <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_IT(&hadc1);
 80008f4:	483a      	ldr	r0, [pc, #232]	; (80009e0 <main+0x130>)
 80008f6:	f001 f839 	bl	800196c <HAL_ADC_Start_IT>

  //DOBIERZ ODPOWIEDNIE WSPOLCZYNNIKI REGULATORA PID

  pid_init(&pid, 1.0f, 0.0f, 0.0f, 10, 1);
 80008fa:	2201      	movs	r2, #1
 80008fc:	210a      	movs	r1, #10
 80008fe:	ed9f 1a39 	vldr	s2, [pc, #228]	; 80009e4 <main+0x134>
 8000902:	eddf 0a38 	vldr	s1, [pc, #224]	; 80009e4 <main+0x134>
 8000906:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800090a:	4837      	ldr	r0, [pc, #220]	; (80009e8 <main+0x138>)
 800090c:	f000 f909 	bl	8000b22 <pid_init>

  pid.p_max = pid_scale(&pid, 4095);
 8000910:	ed9f 0a36 	vldr	s0, [pc, #216]	; 80009ec <main+0x13c>
 8000914:	4834      	ldr	r0, [pc, #208]	; (80009e8 <main+0x138>)
 8000916:	f000 fa49 	bl	8000dac <pid_scale>
 800091a:	4602      	mov	r2, r0
 800091c:	4b32      	ldr	r3, [pc, #200]	; (80009e8 <main+0x138>)
 800091e:	619a      	str	r2, [r3, #24]
  pid.p_min = pid_scale(&pid, -4095);
 8000920:	ed9f 0a33 	vldr	s0, [pc, #204]	; 80009f0 <main+0x140>
 8000924:	4830      	ldr	r0, [pc, #192]	; (80009e8 <main+0x138>)
 8000926:	f000 fa41 	bl	8000dac <pid_scale>
 800092a:	4602      	mov	r2, r0
 800092c:	4b2e      	ldr	r3, [pc, #184]	; (80009e8 <main+0x138>)
 800092e:	625a      	str	r2, [r3, #36]	; 0x24
  pid.i_max = pid_scale(&pid, 4095);
 8000930:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 80009ec <main+0x13c>
 8000934:	482c      	ldr	r0, [pc, #176]	; (80009e8 <main+0x138>)
 8000936:	f000 fa39 	bl	8000dac <pid_scale>
 800093a:	4602      	mov	r2, r0
 800093c:	4b2a      	ldr	r3, [pc, #168]	; (80009e8 <main+0x138>)
 800093e:	61da      	str	r2, [r3, #28]
  pid.i_min = pid_scale(&pid, -4095);
 8000940:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 80009f0 <main+0x140>
 8000944:	4828      	ldr	r0, [pc, #160]	; (80009e8 <main+0x138>)
 8000946:	f000 fa31 	bl	8000dac <pid_scale>
 800094a:	4602      	mov	r2, r0
 800094c:	4b26      	ldr	r3, [pc, #152]	; (80009e8 <main+0x138>)
 800094e:	629a      	str	r2, [r3, #40]	; 0x28
  pid.d_max = pid_scale(&pid, 4095);
 8000950:	ed9f 0a26 	vldr	s0, [pc, #152]	; 80009ec <main+0x13c>
 8000954:	4824      	ldr	r0, [pc, #144]	; (80009e8 <main+0x138>)
 8000956:	f000 fa29 	bl	8000dac <pid_scale>
 800095a:	4602      	mov	r2, r0
 800095c:	4b22      	ldr	r3, [pc, #136]	; (80009e8 <main+0x138>)
 800095e:	621a      	str	r2, [r3, #32]
  pid.d_min = pid_scale(&pid, -4095);
 8000960:	ed9f 0a23 	vldr	s0, [pc, #140]	; 80009f0 <main+0x140>
 8000964:	4820      	ldr	r0, [pc, #128]	; (80009e8 <main+0x138>)
 8000966:	f000 fa21 	bl	8000dac <pid_scale>
 800096a:	4602      	mov	r2, r0
 800096c:	4b1e      	ldr	r3, [pc, #120]	; (80009e8 <main+0x138>)
 800096e:	62da      	str	r2, [r3, #44]	; 0x2c
  pid.total_max = pid_scale(&pid, 4095);
 8000970:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 80009ec <main+0x13c>
 8000974:	481c      	ldr	r0, [pc, #112]	; (80009e8 <main+0x138>)
 8000976:	f000 fa19 	bl	8000dac <pid_scale>
 800097a:	4602      	mov	r2, r0
 800097c:	4b1a      	ldr	r3, [pc, #104]	; (80009e8 <main+0x138>)
 800097e:	649a      	str	r2, [r3, #72]	; 0x48
  pid.total_min = pid_scale(&pid, 0);
 8000980:	ed9f 0a18 	vldr	s0, [pc, #96]	; 80009e4 <main+0x134>
 8000984:	4818      	ldr	r0, [pc, #96]	; (80009e8 <main+0x138>)
 8000986:	f000 fa11 	bl	8000dac <pid_scale>
 800098a:	4602      	mov	r2, r0
 800098c:	4b16      	ldr	r3, [pc, #88]	; (80009e8 <main+0x138>)
 800098e:	64da      	str	r2, [r3, #76]	; 0x4c


  HAL_ADC_Start_IT(&hadc1);
 8000990:	4813      	ldr	r0, [pc, #76]	; (80009e0 <main+0x130>)
 8000992:	f000 ffeb 	bl	800196c <HAL_ADC_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (adc_flag == 1) {
 8000996:	4b17      	ldr	r3, [pc, #92]	; (80009f4 <main+0x144>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	2b01      	cmp	r3, #1
 800099c:	d114      	bne.n	80009c8 <main+0x118>
		  adc_flag = 0;
 800099e:	4b15      	ldr	r3, [pc, #84]	; (80009f4 <main+0x144>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
		  dac_control = pid_calc(&pid, adc_value, dac_value);
 80009a4:	4b14      	ldr	r3, [pc, #80]	; (80009f8 <main+0x148>)
 80009a6:	6819      	ldr	r1, [r3, #0]
 80009a8:	4b14      	ldr	r3, [pc, #80]	; (80009fc <main+0x14c>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	461a      	mov	r2, r3
 80009ae:	480e      	ldr	r0, [pc, #56]	; (80009e8 <main+0x138>)
 80009b0:	f000 f942 	bl	8000c38 <pid_calc>
 80009b4:	4602      	mov	r2, r0
 80009b6:	4b12      	ldr	r3, [pc, #72]	; (8000a00 <main+0x150>)
 80009b8:	601a      	str	r2, [r3, #0]
		  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,dac_control);
 80009ba:	4b11      	ldr	r3, [pc, #68]	; (8000a00 <main+0x150>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	2200      	movs	r2, #0
 80009c0:	2100      	movs	r1, #0
 80009c2:	4804      	ldr	r0, [pc, #16]	; (80009d4 <main+0x124>)
 80009c4:	f002 fa0c 	bl	8002de0 <HAL_DAC_SetValue>
	  }
	  HAL_Delay(1000);
 80009c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009cc:	f000 fc62 	bl	8001294 <HAL_Delay>
	  if (adc_flag == 1) {
 80009d0:	e7e1      	b.n	8000996 <main+0xe6>
 80009d2:	bf00      	nop
 80009d4:	20000154 	.word	0x20000154
 80009d8:	200001dc 	.word	0x200001dc
 80009dc:	20000228 	.word	0x20000228
 80009e0:	200000f0 	.word	0x200000f0
 80009e4:	00000000 	.word	0x00000000
 80009e8:	20000168 	.word	0x20000168
 80009ec:	457ff000 	.word	0x457ff000
 80009f0:	c57ff000 	.word	0xc57ff000
 80009f4:	200001c8 	.word	0x200001c8
 80009f8:	200001cc 	.word	0x200001cc
 80009fc:	200001d8 	.word	0x200001d8
 8000a00:	200001c0 	.word	0x200001c0

08000a04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b0b8      	sub	sp, #224	; 0xe0
 8000a08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a0a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a0e:	2244      	movs	r2, #68	; 0x44
 8000a10:	2100      	movs	r1, #0
 8000a12:	4618      	mov	r0, r3
 8000a14:	f004 fff8 	bl	8005a08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a18:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a28:	463b      	mov	r3, r7
 8000a2a:	2288      	movs	r2, #136	; 0x88
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f004 ffea 	bl	8005a08 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a34:	2302      	movs	r3, #2
 8000a36:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a3e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a42:	2310      	movs	r3, #16
 8000a44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a54:	2301      	movs	r3, #1
 8000a56:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000a5a:	230a      	movs	r3, #10
 8000a5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a60:	2307      	movs	r3, #7
 8000a62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a66:	2302      	movs	r3, #2
 8000a68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a72:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a76:	4618      	mov	r0, r3
 8000a78:	f002 fd16 	bl	80034a8 <HAL_RCC_OscConfig>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000a82:	f000 f847 	bl	8000b14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a86:	230f      	movs	r3, #15
 8000a88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a8c:	2303      	movs	r3, #3
 8000a8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a92:	2300      	movs	r3, #0
 8000a94:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000aa4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000aa8:	2104      	movs	r1, #4
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f003 f8e2 	bl	8003c74 <HAL_RCC_ClockConfig>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000ab6:	f000 f82d 	bl	8000b14 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 8000aba:	f244 0302 	movw	r3, #16386	; 0x4002
 8000abe:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000ac4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ac8:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000aca:	2302      	movs	r3, #2
 8000acc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000ad2:	2308      	movs	r3, #8
 8000ad4:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000ad6:	2307      	movs	r3, #7
 8000ad8:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000ada:	2302      	movs	r3, #2
 8000adc:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000ae2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ae6:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ae8:	463b      	mov	r3, r7
 8000aea:	4618      	mov	r0, r3
 8000aec:	f003 fac6 	bl	800407c <HAL_RCCEx_PeriphCLKConfig>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000af6:	f000 f80d 	bl	8000b14 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000afa:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000afe:	f002 fc7d 	bl	80033fc <HAL_PWREx_ControlVoltageScaling>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <SystemClock_Config+0x108>
  {
    Error_Handler();
 8000b08:	f000 f804 	bl	8000b14 <Error_Handler>
  }
}
 8000b0c:	bf00      	nop
 8000b0e:	37e0      	adds	r7, #224	; 0xe0
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}

08000b14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr

08000b22 <pid_init>:
*
* Created on: 09.03.2018
* Author: Wojciech Domski
*/
#include "pid.h"
void pid_init(cpid_t * pid, float p, float i, float d, uint8_t f, int32_t dt_ms) {
 8000b22:	b480      	push	{r7}
 8000b24:	b089      	sub	sp, #36	; 0x24
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	6178      	str	r0, [r7, #20]
 8000b2a:	ed87 0a04 	vstr	s0, [r7, #16]
 8000b2e:	edc7 0a03 	vstr	s1, [r7, #12]
 8000b32:	ed87 1a02 	vstr	s2, [r7, #8]
 8000b36:	460b      	mov	r3, r1
 8000b38:	603a      	str	r2, [r7, #0]
 8000b3a:	71fb      	strb	r3, [r7, #7]
    uint32_t k;
    pid->power = 1;
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	2201      	movs	r2, #1
 8000b40:	635a      	str	r2, [r3, #52]	; 0x34

    for (k = 0; k < f; ++k) pid->power = pid->power * 2;
 8000b42:	2300      	movs	r3, #0
 8000b44:	61fb      	str	r3, [r7, #28]
 8000b46:	e007      	b.n	8000b58 <pid_init+0x36>
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b4c:	005a      	lsls	r2, r3, #1
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	635a      	str	r2, [r3, #52]	; 0x34
 8000b52:	69fb      	ldr	r3, [r7, #28]
 8000b54:	3301      	adds	r3, #1
 8000b56:	61fb      	str	r3, [r7, #28]
 8000b58:	79fb      	ldrb	r3, [r7, #7]
 8000b5a:	69fa      	ldr	r2, [r7, #28]
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	d3f3      	bcc.n	8000b48 <pid_init+0x26>

    pid->f = f;
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	79fa      	ldrb	r2, [r7, #7]
 8000b64:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    pid->p = (int32_t) (p * pid->power);
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b6c:	ee07 3a90 	vmov	s15, r3
 8000b70:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000b74:	edd7 7a04 	vldr	s15, [r7, #16]
 8000b78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b80:	ee17 2a90 	vmov	r2, s15
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	601a      	str	r2, [r3, #0]
    pid->i = (int32_t) (i * pid->power);
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b8c:	ee07 3a90 	vmov	s15, r3
 8000b90:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000b94:	edd7 7a03 	vldr	s15, [r7, #12]
 8000b98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ba0:	ee17 2a90 	vmov	r2, s15
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	605a      	str	r2, [r3, #4]
    pid->d = (int32_t) (d * pid->power);
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bac:	ee07 3a90 	vmov	s15, r3
 8000bb0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000bb4:	edd7 7a02 	vldr	s15, [r7, #8]
 8000bb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000bc0:	ee17 2a90 	vmov	r2, s15
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	609a      	str	r2, [r3, #8]
    pid->p_val = 0;
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	2200      	movs	r2, #0
 8000bcc:	60da      	str	r2, [r3, #12]
    pid->i_val = 0;
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	611a      	str	r2, [r3, #16]
    pid->d_val = 0;
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	615a      	str	r2, [r3, #20]
    pid->p_max = INT32_MAX;
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8000be0:	619a      	str	r2, [r3, #24]
    pid->p_min = INT32_MIN;
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000be8:	625a      	str	r2, [r3, #36]	; 0x24
    pid->i_max = INT32_MAX;
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8000bf0:	61da      	str	r2, [r3, #28]
    pid->i_min = INT32_MIN;
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000bf8:	629a      	str	r2, [r3, #40]	; 0x28
    pid->d_max = INT32_MAX;
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8000c00:	621a      	str	r2, [r3, #32]
    pid->d_min = INT32_MIN;
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000c08:	62da      	str	r2, [r3, #44]	; 0x2c
    pid->e_last = 0;
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	641a      	str	r2, [r3, #64]	; 0x40
    pid->sum = 0;
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	2200      	movs	r2, #0
 8000c14:	645a      	str	r2, [r3, #68]	; 0x44
    pid->total_max = INT32_MAX;
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8000c1c:	649a      	str	r2, [r3, #72]	; 0x48
    pid->total_min = INT32_MIN;
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000c24:	64da      	str	r2, [r3, #76]	; 0x4c
    pid->dt_ms = dt_ms;
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	683a      	ldr	r2, [r7, #0]
 8000c2a:	655a      	str	r2, [r3, #84]	; 0x54
}
 8000c2c:	bf00      	nop
 8000c2e:	3724      	adds	r7, #36	; 0x24
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr

08000c38 <pid_calc>:

int32_t pid_calc(cpid_t * pid, int32_t mv, int32_t dv) {
 8000c38:	b480      	push	{r7}
 8000c3a:	b08b      	sub	sp, #44	; 0x2c
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	60f8      	str	r0, [r7, #12]
 8000c40:	60b9      	str	r1, [r7, #8]
 8000c42:	607a      	str	r2, [r7, #4]
    int32_t p, i, d, e, total;
    pid->mv = mv;
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	68ba      	ldr	r2, [r7, #8]
 8000c48:	63da      	str	r2, [r3, #60]	; 0x3c
    pid->dv = dv;
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	687a      	ldr	r2, [r7, #4]
 8000c4e:	639a      	str	r2, [r3, #56]	; 0x38

    //UZUPELNIJ WYLICZANIE BLEDU
    e = dv - mv;
 8000c50:	687a      	ldr	r2, [r7, #4]
 8000c52:	68bb      	ldr	r3, [r7, #8]
 8000c54:	1ad3      	subs	r3, r2, r3
 8000c56:	617b      	str	r3, [r7, #20]

    //UZUPELNIJ WYLICZANIE SYGNALU PRZEZ CZLON PROPORCJONALNY
    p = pid->p * e;
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	fb02 f303 	mul.w	r3, r2, r3
 8000c62:	627b      	str	r3, [r7, #36]	; 0x24

    if (p > pid->p_max) p = pid->p_max;
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	699b      	ldr	r3, [r3, #24]
 8000c68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c6a:	429a      	cmp	r2, r3
 8000c6c:	dd03      	ble.n	8000c76 <pid_calc+0x3e>
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	699b      	ldr	r3, [r3, #24]
 8000c72:	627b      	str	r3, [r7, #36]	; 0x24
 8000c74:	e007      	b.n	8000c86 <pid_calc+0x4e>
    else if (p < pid->p_min) p = pid->p_min;
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	da02      	bge.n	8000c86 <pid_calc+0x4e>
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c84:	627b      	str	r3, [r7, #36]	; 0x24

    pid->p_val = p >> pid->f;
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c90:	fa43 f202 	asr.w	r2, r3, r2
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	60da      	str	r2, [r3, #12]
    i = pid->sum;
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9c:	623b      	str	r3, [r7, #32]

    //UZUPELNIJ WYLICZANIE SYGNALU PRZEZ CZLON CALKUJACY
    //PAMIETAJ O SKALOWANIU CZASU WYKONYWANIA PETLI DO SEKUND
    i += pid->dt_ms * pid->i * e / 1000;
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ca2:	68fa      	ldr	r2, [r7, #12]
 8000ca4:	6852      	ldr	r2, [r2, #4]
 8000ca6:	fb02 f303 	mul.w	r3, r2, r3
 8000caa:	697a      	ldr	r2, [r7, #20]
 8000cac:	fb02 f303 	mul.w	r3, r2, r3
 8000cb0:	4a3d      	ldr	r2, [pc, #244]	; (8000da8 <pid_calc+0x170>)
 8000cb2:	fb82 1203 	smull	r1, r2, r2, r3
 8000cb6:	1192      	asrs	r2, r2, #6
 8000cb8:	17db      	asrs	r3, r3, #31
 8000cba:	1ad3      	subs	r3, r2, r3
 8000cbc:	6a3a      	ldr	r2, [r7, #32]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	623b      	str	r3, [r7, #32]

    if (i > pid->i_max) i = pid->i_max;
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	69db      	ldr	r3, [r3, #28]
 8000cc6:	6a3a      	ldr	r2, [r7, #32]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	dd03      	ble.n	8000cd4 <pid_calc+0x9c>
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	69db      	ldr	r3, [r3, #28]
 8000cd0:	623b      	str	r3, [r7, #32]
 8000cd2:	e007      	b.n	8000ce4 <pid_calc+0xac>
    else if (i < pid->i_min) i = pid->i_min;
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cd8:	6a3a      	ldr	r2, [r7, #32]
 8000cda:	429a      	cmp	r2, r3
 8000cdc:	da02      	bge.n	8000ce4 <pid_calc+0xac>
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ce2:	623b      	str	r3, [r7, #32]

    pid->sum = i;
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	6a3a      	ldr	r2, [r7, #32]
 8000ce8:	645a      	str	r2, [r3, #68]	; 0x44
    pid->i_val = i >> pid->f;
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	6a3b      	ldr	r3, [r7, #32]
 8000cf4:	fa43 f202 	asr.w	r2, r3, r2
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	611a      	str	r2, [r3, #16]

    //UZUPELNIJ WYLICZANIE SYGNALU PRZEZ CZLON ROZNICZKUJACEGO
    //PAMIETAJ O SKALOWANIU CZASU WYKONYWANIA PETLI DO SEKUND
    d = pid->d * (e - pid->e_last) * 1000 / pid->dt_ms;
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	689b      	ldr	r3, [r3, #8]
 8000d00:	68fa      	ldr	r2, [r7, #12]
 8000d02:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000d04:	6979      	ldr	r1, [r7, #20]
 8000d06:	1a8a      	subs	r2, r1, r2
 8000d08:	fb02 f303 	mul.w	r3, r2, r3
 8000d0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d10:	fb02 f203 	mul.w	r2, r2, r3
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d18:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d1c:	61fb      	str	r3, [r7, #28]

    if (d > pid->d_max) d = pid->d_max;
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	6a1b      	ldr	r3, [r3, #32]
 8000d22:	69fa      	ldr	r2, [r7, #28]
 8000d24:	429a      	cmp	r2, r3
 8000d26:	dd03      	ble.n	8000d30 <pid_calc+0xf8>
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	6a1b      	ldr	r3, [r3, #32]
 8000d2c:	61fb      	str	r3, [r7, #28]
 8000d2e:	e007      	b.n	8000d40 <pid_calc+0x108>
    else if (d < pid->d_min) d = pid->d_min;
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d34:	69fa      	ldr	r2, [r7, #28]
 8000d36:	429a      	cmp	r2, r3
 8000d38:	da02      	bge.n	8000d40 <pid_calc+0x108>
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d3e:	61fb      	str	r3, [r7, #28]

    pid->d_val = d >> pid->f;
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000d46:	461a      	mov	r2, r3
 8000d48:	69fb      	ldr	r3, [r7, #28]
 8000d4a:	fa43 f202 	asr.w	r2, r3, r2
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	615a      	str	r2, [r3, #20]
    total = p + i + d;
 8000d52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d54:	6a3b      	ldr	r3, [r7, #32]
 8000d56:	4413      	add	r3, r2
 8000d58:	69fa      	ldr	r2, [r7, #28]
 8000d5a:	4413      	add	r3, r2
 8000d5c:	61bb      	str	r3, [r7, #24]

    if (total > pid->total_max) total = pid->total_max;
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d62:	69ba      	ldr	r2, [r7, #24]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	dd03      	ble.n	8000d70 <pid_calc+0x138>
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d6c:	61bb      	str	r3, [r7, #24]
 8000d6e:	e007      	b.n	8000d80 <pid_calc+0x148>
    else if (total < pid->total_min) total = pid->total_min;
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d74:	69ba      	ldr	r2, [r7, #24]
 8000d76:	429a      	cmp	r2, r3
 8000d78:	da02      	bge.n	8000d80 <pid_calc+0x148>
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d7e:	61bb      	str	r3, [r7, #24]

    pid->control = total >> pid->f;
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000d86:	461a      	mov	r2, r3
 8000d88:	69bb      	ldr	r3, [r7, #24]
 8000d8a:	fa43 f202 	asr.w	r2, r3, r2
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	651a      	str	r2, [r3, #80]	; 0x50
    pid->e_last = e;
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	697a      	ldr	r2, [r7, #20]
 8000d96:	641a      	str	r2, [r3, #64]	; 0x40

    return pid->control;
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	372c      	adds	r7, #44	; 0x2c
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	10624dd3 	.word	0x10624dd3

08000dac <pid_scale>:

int32_t pid_scale(cpid_t * pid, float v) { return v * pid->power; }
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	ed87 0a00 	vstr	s0, [r7]
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dbc:	ee07 3a90 	vmov	s15, r3
 8000dc0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000dc4:	edd7 7a00 	vldr	s15, [r7]
 8000dc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000dcc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000dd0:	ee17 3a90 	vmov	r3, s15
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr

08000de0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000de6:	4b0f      	ldr	r3, [pc, #60]	; (8000e24 <HAL_MspInit+0x44>)
 8000de8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dea:	4a0e      	ldr	r2, [pc, #56]	; (8000e24 <HAL_MspInit+0x44>)
 8000dec:	f043 0301 	orr.w	r3, r3, #1
 8000df0:	6613      	str	r3, [r2, #96]	; 0x60
 8000df2:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <HAL_MspInit+0x44>)
 8000df4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000df6:	f003 0301 	and.w	r3, r3, #1
 8000dfa:	607b      	str	r3, [r7, #4]
 8000dfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dfe:	4b09      	ldr	r3, [pc, #36]	; (8000e24 <HAL_MspInit+0x44>)
 8000e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e02:	4a08      	ldr	r2, [pc, #32]	; (8000e24 <HAL_MspInit+0x44>)
 8000e04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e08:	6593      	str	r3, [r2, #88]	; 0x58
 8000e0a:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <HAL_MspInit+0x44>)
 8000e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e12:	603b      	str	r3, [r7, #0]
 8000e14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e16:	bf00      	nop
 8000e18:	370c      	adds	r7, #12
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	40021000 	.word	0x40021000

08000e28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr

08000e36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e36:	b480      	push	{r7}
 8000e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e3a:	e7fe      	b.n	8000e3a <HardFault_Handler+0x4>

08000e3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e40:	e7fe      	b.n	8000e40 <MemManage_Handler+0x4>

08000e42 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e42:	b480      	push	{r7}
 8000e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e46:	e7fe      	b.n	8000e46 <BusFault_Handler+0x4>

08000e48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e4c:	e7fe      	b.n	8000e4c <UsageFault_Handler+0x4>

08000e4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e52:	bf00      	nop
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr

08000e5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr

08000e6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr

08000e78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e7c:	f000 f9ea 	bl	8001254 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e80:	bf00      	nop
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000e88:	4802      	ldr	r0, [pc, #8]	; (8000e94 <ADC1_2_IRQHandler+0x10>)
 8000e8a:	f000 feaf 	bl	8001bec <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	200000f0 	.word	0x200000f0

08000e98 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000e9c:	4802      	ldr	r0, [pc, #8]	; (8000ea8 <TIM7_IRQHandler+0x10>)
 8000e9e:	f003 fecd 	bl	8004c3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	20000228 	.word	0x20000228

08000eac <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000eb0:	4b17      	ldr	r3, [pc, #92]	; (8000f10 <SystemInit+0x64>)
 8000eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eb6:	4a16      	ldr	r2, [pc, #88]	; (8000f10 <SystemInit+0x64>)
 8000eb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ebc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000ec0:	4b14      	ldr	r3, [pc, #80]	; (8000f14 <SystemInit+0x68>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a13      	ldr	r2, [pc, #76]	; (8000f14 <SystemInit+0x68>)
 8000ec6:	f043 0301 	orr.w	r3, r3, #1
 8000eca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000ecc:	4b11      	ldr	r3, [pc, #68]	; (8000f14 <SystemInit+0x68>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000ed2:	4b10      	ldr	r3, [pc, #64]	; (8000f14 <SystemInit+0x68>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a0f      	ldr	r2, [pc, #60]	; (8000f14 <SystemInit+0x68>)
 8000ed8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000edc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000ee0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000ee2:	4b0c      	ldr	r3, [pc, #48]	; (8000f14 <SystemInit+0x68>)
 8000ee4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ee8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000eea:	4b0a      	ldr	r3, [pc, #40]	; (8000f14 <SystemInit+0x68>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a09      	ldr	r2, [pc, #36]	; (8000f14 <SystemInit+0x68>)
 8000ef0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ef4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000ef6:	4b07      	ldr	r3, [pc, #28]	; (8000f14 <SystemInit+0x68>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000efc:	4b04      	ldr	r3, [pc, #16]	; (8000f10 <SystemInit+0x64>)
 8000efe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f02:	609a      	str	r2, [r3, #8]
#endif
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	e000ed00 	.word	0xe000ed00
 8000f14:	40021000 	.word	0x40021000

08000f18 <MX_TIM6_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f1e:	1d3b      	adds	r3, r7, #4
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 8000f28:	4b14      	ldr	r3, [pc, #80]	; (8000f7c <MX_TIM6_Init+0x64>)
 8000f2a:	4a15      	ldr	r2, [pc, #84]	; (8000f80 <MX_TIM6_Init+0x68>)
 8000f2c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = TIM_PID_LOOP_PRESCALER;
 8000f2e:	4b13      	ldr	r3, [pc, #76]	; (8000f7c <MX_TIM6_Init+0x64>)
 8000f30:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000f34:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f36:	4b11      	ldr	r3, [pc, #68]	; (8000f7c <MX_TIM6_Init+0x64>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = TIM_PID_LOOP_PERIOD;
 8000f3c:	4b0f      	ldr	r3, [pc, #60]	; (8000f7c <MX_TIM6_Init+0x64>)
 8000f3e:	229f      	movs	r2, #159	; 0x9f
 8000f40:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f42:	4b0e      	ldr	r3, [pc, #56]	; (8000f7c <MX_TIM6_Init+0x64>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000f48:	480c      	ldr	r0, [pc, #48]	; (8000f7c <MX_TIM6_Init+0x64>)
 8000f4a:	f003 fd47 	bl	80049dc <HAL_TIM_Base_Init>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000f54:	f7ff fdde 	bl	8000b14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000f58:	2320      	movs	r3, #32
 8000f5a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000f60:	1d3b      	adds	r3, r7, #4
 8000f62:	4619      	mov	r1, r3
 8000f64:	4805      	ldr	r0, [pc, #20]	; (8000f7c <MX_TIM6_Init+0x64>)
 8000f66:	f004 f84b 	bl	8005000 <HAL_TIMEx_MasterConfigSynchronization>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000f70:	f7ff fdd0 	bl	8000b14 <Error_Handler>
  }

}
 8000f74:	bf00      	nop
 8000f76:	3710      	adds	r7, #16
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	200001dc 	.word	0x200001dc
 8000f80:	40001000 	.word	0x40001000

08000f84 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f8a:	1d3b      	adds	r3, r7, #4
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]

  htim7.Instance = TIM7;
 8000f94:	4b14      	ldr	r3, [pc, #80]	; (8000fe8 <MX_TIM7_Init+0x64>)
 8000f96:	4a15      	ldr	r2, [pc, #84]	; (8000fec <MX_TIM7_Init+0x68>)
 8000f98:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = TIM_DAC_PRESCALER;
 8000f9a:	4b13      	ldr	r3, [pc, #76]	; (8000fe8 <MX_TIM7_Init+0x64>)
 8000f9c:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000fa0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fa2:	4b11      	ldr	r3, [pc, #68]	; (8000fe8 <MX_TIM7_Init+0x64>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = TIM_DAC_PERIOD;
 8000fa8:	4b0f      	ldr	r3, [pc, #60]	; (8000fe8 <MX_TIM7_Init+0x64>)
 8000faa:	229f      	movs	r2, #159	; 0x9f
 8000fac:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fae:	4b0e      	ldr	r3, [pc, #56]	; (8000fe8 <MX_TIM7_Init+0x64>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000fb4:	480c      	ldr	r0, [pc, #48]	; (8000fe8 <MX_TIM7_Init+0x64>)
 8000fb6:	f003 fd11 	bl	80049dc <HAL_TIM_Base_Init>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000fc0:	f7ff fda8 	bl	8000b14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000fcc:	1d3b      	adds	r3, r7, #4
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4805      	ldr	r0, [pc, #20]	; (8000fe8 <MX_TIM7_Init+0x64>)
 8000fd2:	f004 f815 	bl	8005000 <HAL_TIMEx_MasterConfigSynchronization>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000fdc:	f7ff fd9a 	bl	8000b14 <Error_Handler>
  }

}
 8000fe0:	bf00      	nop
 8000fe2:	3710      	adds	r7, #16
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	20000228 	.word	0x20000228
 8000fec:	40001400 	.word	0x40001400

08000ff0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a16      	ldr	r2, [pc, #88]	; (8001058 <HAL_TIM_Base_MspInit+0x68>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d10c      	bne.n	800101c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001002:	4b16      	ldr	r3, [pc, #88]	; (800105c <HAL_TIM_Base_MspInit+0x6c>)
 8001004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001006:	4a15      	ldr	r2, [pc, #84]	; (800105c <HAL_TIM_Base_MspInit+0x6c>)
 8001008:	f043 0310 	orr.w	r3, r3, #16
 800100c:	6593      	str	r3, [r2, #88]	; 0x58
 800100e:	4b13      	ldr	r3, [pc, #76]	; (800105c <HAL_TIM_Base_MspInit+0x6c>)
 8001010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001012:	f003 0310 	and.w	r3, r3, #16
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800101a:	e018      	b.n	800104e <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM7)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a0f      	ldr	r2, [pc, #60]	; (8001060 <HAL_TIM_Base_MspInit+0x70>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d113      	bne.n	800104e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001026:	4b0d      	ldr	r3, [pc, #52]	; (800105c <HAL_TIM_Base_MspInit+0x6c>)
 8001028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800102a:	4a0c      	ldr	r2, [pc, #48]	; (800105c <HAL_TIM_Base_MspInit+0x6c>)
 800102c:	f043 0320 	orr.w	r3, r3, #32
 8001030:	6593      	str	r3, [r2, #88]	; 0x58
 8001032:	4b0a      	ldr	r3, [pc, #40]	; (800105c <HAL_TIM_Base_MspInit+0x6c>)
 8001034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001036:	f003 0320 	and.w	r3, r3, #32
 800103a:	60bb      	str	r3, [r7, #8]
 800103c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800103e:	2200      	movs	r2, #0
 8001040:	2100      	movs	r1, #0
 8001042:	2037      	movs	r0, #55	; 0x37
 8001044:	f001 fe27 	bl	8002c96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001048:	2037      	movs	r0, #55	; 0x37
 800104a:	f001 fe40 	bl	8002cce <HAL_NVIC_EnableIRQ>
}
 800104e:	bf00      	nop
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40001000 	.word	0x40001000
 800105c:	40021000 	.word	0x40021000
 8001060:	40001400 	.word	0x40001400

08001064 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001068:	4b14      	ldr	r3, [pc, #80]	; (80010bc <MX_USART2_UART_Init+0x58>)
 800106a:	4a15      	ldr	r2, [pc, #84]	; (80010c0 <MX_USART2_UART_Init+0x5c>)
 800106c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800106e:	4b13      	ldr	r3, [pc, #76]	; (80010bc <MX_USART2_UART_Init+0x58>)
 8001070:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001074:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001076:	4b11      	ldr	r3, [pc, #68]	; (80010bc <MX_USART2_UART_Init+0x58>)
 8001078:	2200      	movs	r2, #0
 800107a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800107c:	4b0f      	ldr	r3, [pc, #60]	; (80010bc <MX_USART2_UART_Init+0x58>)
 800107e:	2200      	movs	r2, #0
 8001080:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001082:	4b0e      	ldr	r3, [pc, #56]	; (80010bc <MX_USART2_UART_Init+0x58>)
 8001084:	2200      	movs	r2, #0
 8001086:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001088:	4b0c      	ldr	r3, [pc, #48]	; (80010bc <MX_USART2_UART_Init+0x58>)
 800108a:	220c      	movs	r2, #12
 800108c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800108e:	4b0b      	ldr	r3, [pc, #44]	; (80010bc <MX_USART2_UART_Init+0x58>)
 8001090:	2200      	movs	r2, #0
 8001092:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001094:	4b09      	ldr	r3, [pc, #36]	; (80010bc <MX_USART2_UART_Init+0x58>)
 8001096:	2200      	movs	r2, #0
 8001098:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800109a:	4b08      	ldr	r3, [pc, #32]	; (80010bc <MX_USART2_UART_Init+0x58>)
 800109c:	2200      	movs	r2, #0
 800109e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010a0:	4b06      	ldr	r3, [pc, #24]	; (80010bc <MX_USART2_UART_Init+0x58>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010a6:	4805      	ldr	r0, [pc, #20]	; (80010bc <MX_USART2_UART_Init+0x58>)
 80010a8:	f004 f850 	bl	800514c <HAL_UART_Init>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80010b2:	f7ff fd2f 	bl	8000b14 <Error_Handler>
  }

}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20000274 	.word	0x20000274
 80010c0:	40004400 	.word	0x40004400

080010c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b08a      	sub	sp, #40	; 0x28
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010cc:	f107 0314 	add.w	r3, r7, #20
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	60da      	str	r2, [r3, #12]
 80010da:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a17      	ldr	r2, [pc, #92]	; (8001140 <HAL_UART_MspInit+0x7c>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d128      	bne.n	8001138 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010e6:	4b17      	ldr	r3, [pc, #92]	; (8001144 <HAL_UART_MspInit+0x80>)
 80010e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ea:	4a16      	ldr	r2, [pc, #88]	; (8001144 <HAL_UART_MspInit+0x80>)
 80010ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010f0:	6593      	str	r3, [r2, #88]	; 0x58
 80010f2:	4b14      	ldr	r3, [pc, #80]	; (8001144 <HAL_UART_MspInit+0x80>)
 80010f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010fa:	613b      	str	r3, [r7, #16]
 80010fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fe:	4b11      	ldr	r3, [pc, #68]	; (8001144 <HAL_UART_MspInit+0x80>)
 8001100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001102:	4a10      	ldr	r2, [pc, #64]	; (8001144 <HAL_UART_MspInit+0x80>)
 8001104:	f043 0301 	orr.w	r3, r3, #1
 8001108:	64d3      	str	r3, [r2, #76]	; 0x4c
 800110a:	4b0e      	ldr	r3, [pc, #56]	; (8001144 <HAL_UART_MspInit+0x80>)
 800110c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001116:	230c      	movs	r3, #12
 8001118:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111a:	2302      	movs	r3, #2
 800111c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001122:	2303      	movs	r3, #3
 8001124:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001126:	2307      	movs	r3, #7
 8001128:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112a:	f107 0314 	add.w	r3, r7, #20
 800112e:	4619      	mov	r1, r3
 8001130:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001134:	f001 ff94 	bl	8003060 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001138:	bf00      	nop
 800113a:	3728      	adds	r7, #40	; 0x28
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	40004400 	.word	0x40004400
 8001144:	40021000 	.word	0x40021000

08001148 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001148:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001180 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800114c:	f7ff feae 	bl	8000eac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001150:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001152:	e003      	b.n	800115c <LoopCopyDataInit>

08001154 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001154:	4b0b      	ldr	r3, [pc, #44]	; (8001184 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001156:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001158:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800115a:	3104      	adds	r1, #4

0800115c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800115c:	480a      	ldr	r0, [pc, #40]	; (8001188 <LoopForever+0xa>)
	ldr	r3, =_edata
 800115e:	4b0b      	ldr	r3, [pc, #44]	; (800118c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001160:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001162:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001164:	d3f6      	bcc.n	8001154 <CopyDataInit>
	ldr	r2, =_sbss
 8001166:	4a0a      	ldr	r2, [pc, #40]	; (8001190 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001168:	e002      	b.n	8001170 <LoopFillZerobss>

0800116a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800116a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800116c:	f842 3b04 	str.w	r3, [r2], #4

08001170 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001170:	4b08      	ldr	r3, [pc, #32]	; (8001194 <LoopForever+0x16>)
	cmp	r2, r3
 8001172:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001174:	d3f9      	bcc.n	800116a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001176:	f004 fc23 	bl	80059c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800117a:	f7ff fb99 	bl	80008b0 <main>

0800117e <LoopForever>:

LoopForever:
    b LoopForever
 800117e:	e7fe      	b.n	800117e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001180:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001184:	08005a88 	.word	0x08005a88
	ldr	r0, =_sdata
 8001188:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800118c:	200000d4 	.word	0x200000d4
	ldr	r2, =_sbss
 8001190:	200000d4 	.word	0x200000d4
	ldr	r3, = _ebss
 8001194:	200002f8 	.word	0x200002f8

08001198 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001198:	e7fe      	b.n	8001198 <ADC3_IRQHandler>
	...

0800119c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011a2:	2300      	movs	r3, #0
 80011a4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011a6:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <HAL_Init+0x3c>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a0b      	ldr	r2, [pc, #44]	; (80011d8 <HAL_Init+0x3c>)
 80011ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011b0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011b2:	2003      	movs	r0, #3
 80011b4:	f001 fd64 	bl	8002c80 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011b8:	2000      	movs	r0, #0
 80011ba:	f000 f80f 	bl	80011dc <HAL_InitTick>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d002      	beq.n	80011ca <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80011c4:	2301      	movs	r3, #1
 80011c6:	71fb      	strb	r3, [r7, #7]
 80011c8:	e001      	b.n	80011ce <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011ca:	f7ff fe09 	bl	8000de0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011ce:	79fb      	ldrb	r3, [r7, #7]
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	40022000 	.word	0x40022000

080011dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011e4:	2300      	movs	r3, #0
 80011e6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80011e8:	4b17      	ldr	r3, [pc, #92]	; (8001248 <HAL_InitTick+0x6c>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d023      	beq.n	8001238 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80011f0:	4b16      	ldr	r3, [pc, #88]	; (800124c <HAL_InitTick+0x70>)
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	4b14      	ldr	r3, [pc, #80]	; (8001248 <HAL_InitTick+0x6c>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	4619      	mov	r1, r3
 80011fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001202:	fbb2 f3f3 	udiv	r3, r2, r3
 8001206:	4618      	mov	r0, r3
 8001208:	f001 fd6f 	bl	8002cea <HAL_SYSTICK_Config>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d10f      	bne.n	8001232 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2b0f      	cmp	r3, #15
 8001216:	d809      	bhi.n	800122c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001218:	2200      	movs	r2, #0
 800121a:	6879      	ldr	r1, [r7, #4]
 800121c:	f04f 30ff 	mov.w	r0, #4294967295
 8001220:	f001 fd39 	bl	8002c96 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001224:	4a0a      	ldr	r2, [pc, #40]	; (8001250 <HAL_InitTick+0x74>)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6013      	str	r3, [r2, #0]
 800122a:	e007      	b.n	800123c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	73fb      	strb	r3, [r7, #15]
 8001230:	e004      	b.n	800123c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	73fb      	strb	r3, [r7, #15]
 8001236:	e001      	b.n	800123c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001238:	2301      	movs	r3, #1
 800123a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800123c:	7bfb      	ldrb	r3, [r7, #15]
}
 800123e:	4618      	mov	r0, r3
 8001240:	3710      	adds	r7, #16
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	200000d0 	.word	0x200000d0
 800124c:	200000c8 	.word	0x200000c8
 8001250:	200000cc 	.word	0x200000cc

08001254 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001258:	4b06      	ldr	r3, [pc, #24]	; (8001274 <HAL_IncTick+0x20>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	461a      	mov	r2, r3
 800125e:	4b06      	ldr	r3, [pc, #24]	; (8001278 <HAL_IncTick+0x24>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4413      	add	r3, r2
 8001264:	4a04      	ldr	r2, [pc, #16]	; (8001278 <HAL_IncTick+0x24>)
 8001266:	6013      	str	r3, [r2, #0]
}
 8001268:	bf00      	nop
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	200000d0 	.word	0x200000d0
 8001278:	200002f4 	.word	0x200002f4

0800127c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  return uwTick;
 8001280:	4b03      	ldr	r3, [pc, #12]	; (8001290 <HAL_GetTick+0x14>)
 8001282:	681b      	ldr	r3, [r3, #0]
}
 8001284:	4618      	mov	r0, r3
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	200002f4 	.word	0x200002f4

08001294 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800129c:	f7ff ffee 	bl	800127c <HAL_GetTick>
 80012a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012ac:	d005      	beq.n	80012ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80012ae:	4b09      	ldr	r3, [pc, #36]	; (80012d4 <HAL_Delay+0x40>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	461a      	mov	r2, r3
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	4413      	add	r3, r2
 80012b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012ba:	bf00      	nop
 80012bc:	f7ff ffde 	bl	800127c <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	68fa      	ldr	r2, [r7, #12]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d8f7      	bhi.n	80012bc <HAL_Delay+0x28>
  {
  }
}
 80012cc:	bf00      	nop
 80012ce:	3710      	adds	r7, #16
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	200000d0 	.word	0x200000d0

080012d8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	431a      	orrs	r2, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	609a      	str	r2, [r3, #8]
}
 80012f2:	bf00      	nop
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr

080012fe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80012fe:	b480      	push	{r7}
 8001300:	b083      	sub	sp, #12
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
 8001306:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	431a      	orrs	r2, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	609a      	str	r2, [r3, #8]
}
 8001318:	bf00      	nop
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001334:	4618      	mov	r0, r3
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001340:	b480      	push	{r7}
 8001342:	b087      	sub	sp, #28
 8001344:	af00      	add	r7, sp, #0
 8001346:	60f8      	str	r0, [r7, #12]
 8001348:	60b9      	str	r1, [r7, #8]
 800134a:	607a      	str	r2, [r7, #4]
 800134c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	3360      	adds	r3, #96	; 0x60
 8001352:	461a      	mov	r2, r3
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	4413      	add	r3, r2
 800135a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	4b08      	ldr	r3, [pc, #32]	; (8001384 <LL_ADC_SetOffset+0x44>)
 8001362:	4013      	ands	r3, r2
 8001364:	687a      	ldr	r2, [r7, #4]
 8001366:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800136a:	683a      	ldr	r2, [r7, #0]
 800136c:	430a      	orrs	r2, r1
 800136e:	4313      	orrs	r3, r2
 8001370:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001378:	bf00      	nop
 800137a:	371c      	adds	r7, #28
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	03fff000 	.word	0x03fff000

08001388 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	3360      	adds	r3, #96	; 0x60
 8001396:	461a      	mov	r2, r3
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	4413      	add	r3, r2
 800139e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3714      	adds	r7, #20
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr

080013b4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b087      	sub	sp, #28
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	3360      	adds	r3, #96	; 0x60
 80013c4:	461a      	mov	r2, r3
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	4413      	add	r3, r2
 80013cc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	431a      	orrs	r2, r3
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80013de:	bf00      	nop
 80013e0:	371c      	adds	r7, #28
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr

080013ea <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80013ea:	b480      	push	{r7}
 80013ec:	b083      	sub	sp, #12
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	68db      	ldr	r3, [r3, #12]
 80013f6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d101      	bne.n	8001402 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80013fe:	2301      	movs	r3, #1
 8001400:	e000      	b.n	8001404 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001402:	2300      	movs	r3, #0
}
 8001404:	4618      	mov	r0, r3
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001410:	b480      	push	{r7}
 8001412:	b087      	sub	sp, #28
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	60b9      	str	r1, [r7, #8]
 800141a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	3330      	adds	r3, #48	; 0x30
 8001420:	461a      	mov	r2, r3
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	0a1b      	lsrs	r3, r3, #8
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	f003 030c 	and.w	r3, r3, #12
 800142c:	4413      	add	r3, r2
 800142e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	f003 031f 	and.w	r3, r3, #31
 800143a:	211f      	movs	r1, #31
 800143c:	fa01 f303 	lsl.w	r3, r1, r3
 8001440:	43db      	mvns	r3, r3
 8001442:	401a      	ands	r2, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	0e9b      	lsrs	r3, r3, #26
 8001448:	f003 011f 	and.w	r1, r3, #31
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	f003 031f 	and.w	r3, r3, #31
 8001452:	fa01 f303 	lsl.w	r3, r1, r3
 8001456:	431a      	orrs	r2, r3
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800145c:	bf00      	nop
 800145e:	371c      	adds	r7, #28
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001474:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d101      	bne.n	8001480 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800147c:	2301      	movs	r3, #1
 800147e:	e000      	b.n	8001482 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001480:	2300      	movs	r3, #0
}
 8001482:	4618      	mov	r0, r3
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr

0800148e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800148e:	b480      	push	{r7}
 8001490:	b087      	sub	sp, #28
 8001492:	af00      	add	r7, sp, #0
 8001494:	60f8      	str	r0, [r7, #12]
 8001496:	60b9      	str	r1, [r7, #8]
 8001498:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	3314      	adds	r3, #20
 800149e:	461a      	mov	r2, r3
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	0e5b      	lsrs	r3, r3, #25
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	f003 0304 	and.w	r3, r3, #4
 80014aa:	4413      	add	r3, r2
 80014ac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	0d1b      	lsrs	r3, r3, #20
 80014b6:	f003 031f 	and.w	r3, r3, #31
 80014ba:	2107      	movs	r1, #7
 80014bc:	fa01 f303 	lsl.w	r3, r1, r3
 80014c0:	43db      	mvns	r3, r3
 80014c2:	401a      	ands	r2, r3
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	0d1b      	lsrs	r3, r3, #20
 80014c8:	f003 031f 	and.w	r3, r3, #31
 80014cc:	6879      	ldr	r1, [r7, #4]
 80014ce:	fa01 f303 	lsl.w	r3, r1, r3
 80014d2:	431a      	orrs	r2, r3
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80014d8:	bf00      	nop
 80014da:	371c      	adds	r7, #28
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	60f8      	str	r0, [r7, #12]
 80014ec:	60b9      	str	r1, [r7, #8]
 80014ee:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014fc:	43db      	mvns	r3, r3
 80014fe:	401a      	ands	r2, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	f003 0318 	and.w	r3, r3, #24
 8001506:	4908      	ldr	r1, [pc, #32]	; (8001528 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001508:	40d9      	lsrs	r1, r3
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	400b      	ands	r3, r1
 800150e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001512:	431a      	orrs	r2, r3
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800151a:	bf00      	nop
 800151c:	3714      	adds	r7, #20
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	0007ffff 	.word	0x0007ffff

0800152c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	f003 031f 	and.w	r3, r3, #31
}
 800153c:	4618      	mov	r0, r3
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001558:	4618      	mov	r0, r3
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr

08001564 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001574:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001578:	687a      	ldr	r2, [r7, #4]
 800157a:	6093      	str	r3, [r2, #8]
}
 800157c:	bf00      	nop
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001598:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800159c:	d101      	bne.n	80015a2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800159e:	2301      	movs	r3, #1
 80015a0:	e000      	b.n	80015a4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80015a2:	2300      	movs	r3, #0
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80015c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015c4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80015ec:	d101      	bne.n	80015f2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80015ee:	2301      	movs	r3, #1
 80015f0:	e000      	b.n	80015f4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80015f2:	2300      	movs	r3, #0
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001610:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001614:	f043 0201 	orr.w	r2, r3, #1
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800161c:	bf00      	nop
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	f003 0301 	and.w	r3, r3, #1
 8001638:	2b01      	cmp	r3, #1
 800163a:	d101      	bne.n	8001640 <LL_ADC_IsEnabled+0x18>
 800163c:	2301      	movs	r3, #1
 800163e:	e000      	b.n	8001642 <LL_ADC_IsEnabled+0x1a>
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr

0800164e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800164e:	b480      	push	{r7}
 8001650:	b083      	sub	sp, #12
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800165e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001662:	f043 0204 	orr.w	r2, r3, #4
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800166a:	bf00      	nop
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr

08001676 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001676:	b480      	push	{r7}
 8001678:	b083      	sub	sp, #12
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	f003 0304 	and.w	r3, r3, #4
 8001686:	2b04      	cmp	r3, #4
 8001688:	d101      	bne.n	800168e <LL_ADC_REG_IsConversionOngoing+0x18>
 800168a:	2301      	movs	r3, #1
 800168c:	e000      	b.n	8001690 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800168e:	2300      	movs	r3, #0
}
 8001690:	4618      	mov	r0, r3
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	f003 0308 	and.w	r3, r3, #8
 80016ac:	2b08      	cmp	r3, #8
 80016ae:	d101      	bne.n	80016b4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80016b0:	2301      	movs	r3, #1
 80016b2:	e000      	b.n	80016b6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
	...

080016c4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80016c4:	b590      	push	{r4, r7, lr}
 80016c6:	b089      	sub	sp, #36	; 0x24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016cc:	2300      	movs	r3, #0
 80016ce:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80016d0:	2300      	movs	r3, #0
 80016d2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d101      	bne.n	80016de <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e134      	b.n	8001948 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	691b      	ldr	r3, [r3, #16]
 80016e2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d109      	bne.n	8001700 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f7fe ff63 	bl	80005b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2200      	movs	r2, #0
 80016f6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2200      	movs	r2, #0
 80016fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff ff3f 	bl	8001588 <LL_ADC_IsDeepPowerDownEnabled>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d004      	beq.n	800171a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff ff25 	bl	8001564 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff ff5a 	bl	80015d8 <LL_ADC_IsInternalRegulatorEnabled>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d113      	bne.n	8001752 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff ff3e 	bl	80015b0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001734:	4b86      	ldr	r3, [pc, #536]	; (8001950 <HAL_ADC_Init+0x28c>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	099b      	lsrs	r3, r3, #6
 800173a:	4a86      	ldr	r2, [pc, #536]	; (8001954 <HAL_ADC_Init+0x290>)
 800173c:	fba2 2303 	umull	r2, r3, r2, r3
 8001740:	099b      	lsrs	r3, r3, #6
 8001742:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001744:	e002      	b.n	800174c <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	3b01      	subs	r3, #1
 800174a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d1f9      	bne.n	8001746 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff ff3e 	bl	80015d8 <LL_ADC_IsInternalRegulatorEnabled>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d10d      	bne.n	800177e <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001766:	f043 0210 	orr.w	r2, r3, #16
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001772:	f043 0201 	orr.w	r2, r3, #1
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4618      	mov	r0, r3
 8001784:	f7ff ff77 	bl	8001676 <LL_ADC_REG_IsConversionOngoing>
 8001788:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800178e:	f003 0310 	and.w	r3, r3, #16
 8001792:	2b00      	cmp	r3, #0
 8001794:	f040 80cf 	bne.w	8001936 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	2b00      	cmp	r3, #0
 800179c:	f040 80cb 	bne.w	8001936 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017a4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80017a8:	f043 0202 	orr.w	r2, r3, #2
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7ff ff37 	bl	8001628 <LL_ADC_IsEnabled>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d115      	bne.n	80017ec <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80017c0:	4865      	ldr	r0, [pc, #404]	; (8001958 <HAL_ADC_Init+0x294>)
 80017c2:	f7ff ff31 	bl	8001628 <LL_ADC_IsEnabled>
 80017c6:	4604      	mov	r4, r0
 80017c8:	4864      	ldr	r0, [pc, #400]	; (800195c <HAL_ADC_Init+0x298>)
 80017ca:	f7ff ff2d 	bl	8001628 <LL_ADC_IsEnabled>
 80017ce:	4603      	mov	r3, r0
 80017d0:	431c      	orrs	r4, r3
 80017d2:	4863      	ldr	r0, [pc, #396]	; (8001960 <HAL_ADC_Init+0x29c>)
 80017d4:	f7ff ff28 	bl	8001628 <LL_ADC_IsEnabled>
 80017d8:	4603      	mov	r3, r0
 80017da:	4323      	orrs	r3, r4
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d105      	bne.n	80017ec <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	4619      	mov	r1, r3
 80017e6:	485f      	ldr	r0, [pc, #380]	; (8001964 <HAL_ADC_Init+0x2a0>)
 80017e8:	f7ff fd76 	bl	80012d8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	7e5b      	ldrb	r3, [r3, #25]
 80017f0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80017f6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80017fc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001802:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f893 3020 	ldrb.w	r3, [r3, #32]
 800180a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800180c:	4313      	orrs	r3, r2
 800180e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001816:	2b01      	cmp	r3, #1
 8001818:	d106      	bne.n	8001828 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181e:	3b01      	subs	r3, #1
 8001820:	045b      	lsls	r3, r3, #17
 8001822:	69ba      	ldr	r2, [r7, #24]
 8001824:	4313      	orrs	r3, r2
 8001826:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800182c:	2b00      	cmp	r3, #0
 800182e:	d009      	beq.n	8001844 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001834:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800183c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800183e:	69ba      	ldr	r2, [r7, #24]
 8001840:	4313      	orrs	r3, r2
 8001842:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	68da      	ldr	r2, [r3, #12]
 800184a:	4b47      	ldr	r3, [pc, #284]	; (8001968 <HAL_ADC_Init+0x2a4>)
 800184c:	4013      	ands	r3, r2
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	6812      	ldr	r2, [r2, #0]
 8001852:	69b9      	ldr	r1, [r7, #24]
 8001854:	430b      	orrs	r3, r1
 8001856:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff ff0a 	bl	8001676 <LL_ADC_REG_IsConversionOngoing>
 8001862:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff ff17 	bl	800169c <LL_ADC_INJ_IsConversionOngoing>
 800186e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d13d      	bne.n	80018f2 <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d13a      	bne.n	80018f2 <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001880:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001888:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800188a:	4313      	orrs	r3, r2
 800188c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001898:	f023 0302 	bic.w	r3, r3, #2
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	6812      	ldr	r2, [r2, #0]
 80018a0:	69b9      	ldr	r1, [r7, #24]
 80018a2:	430b      	orrs	r3, r1
 80018a4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d118      	bne.n	80018e2 <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	691b      	ldr	r3, [r3, #16]
 80018b6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80018ba:	f023 0304 	bic.w	r3, r3, #4
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80018c6:	4311      	orrs	r1, r2
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80018cc:	4311      	orrs	r1, r2
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80018d2:	430a      	orrs	r2, r1
 80018d4:	431a      	orrs	r2, r3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f042 0201 	orr.w	r2, r2, #1
 80018de:	611a      	str	r2, [r3, #16]
 80018e0:	e007      	b.n	80018f2 <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	691a      	ldr	r2, [r3, #16]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f022 0201 	bic.w	r2, r2, #1
 80018f0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	691b      	ldr	r3, [r3, #16]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d10c      	bne.n	8001914 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001900:	f023 010f 	bic.w	r1, r3, #15
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	69db      	ldr	r3, [r3, #28]
 8001908:	1e5a      	subs	r2, r3, #1
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	430a      	orrs	r2, r1
 8001910:	631a      	str	r2, [r3, #48]	; 0x30
 8001912:	e007      	b.n	8001924 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f022 020f 	bic.w	r2, r2, #15
 8001922:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001928:	f023 0303 	bic.w	r3, r3, #3
 800192c:	f043 0201 	orr.w	r2, r3, #1
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	655a      	str	r2, [r3, #84]	; 0x54
 8001934:	e007      	b.n	8001946 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800193a:	f043 0210 	orr.w	r2, r3, #16
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001946:	7ffb      	ldrb	r3, [r7, #31]
}
 8001948:	4618      	mov	r0, r3
 800194a:	3724      	adds	r7, #36	; 0x24
 800194c:	46bd      	mov	sp, r7
 800194e:	bd90      	pop	{r4, r7, pc}
 8001950:	200000c8 	.word	0x200000c8
 8001954:	053e2d63 	.word	0x053e2d63
 8001958:	50040000 	.word	0x50040000
 800195c:	50040100 	.word	0x50040100
 8001960:	50040200 	.word	0x50040200
 8001964:	50040300 	.word	0x50040300
 8001968:	fff0c007 	.word	0xfff0c007

0800196c <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b086      	sub	sp, #24
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001974:	4893      	ldr	r0, [pc, #588]	; (8001bc4 <HAL_ADC_Start_IT+0x258>)
 8001976:	f7ff fdd9 	bl	800152c <LL_ADC_GetMultimode>
 800197a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff fe78 	bl	8001676 <LL_ADC_REG_IsConversionOngoing>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	f040 8112 	bne.w	8001bb2 <HAL_ADC_Start_IT+0x246>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001994:	2b01      	cmp	r3, #1
 8001996:	d101      	bne.n	800199c <HAL_ADC_Start_IT+0x30>
 8001998:	2302      	movs	r3, #2
 800199a:	e10f      	b.n	8001bbc <HAL_ADC_Start_IT+0x250>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2201      	movs	r2, #1
 80019a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f000 ff3d 	bl	8002824 <ADC_Enable>
 80019aa:	4603      	mov	r3, r0
 80019ac:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80019ae:	7dfb      	ldrb	r3, [r7, #23]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	f040 80f9 	bne.w	8001ba8 <HAL_ADC_Start_IT+0x23c>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019ba:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80019be:	f023 0301 	bic.w	r3, r3, #1
 80019c2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a7e      	ldr	r2, [pc, #504]	; (8001bc8 <HAL_ADC_Start_IT+0x25c>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d002      	beq.n	80019da <HAL_ADC_Start_IT+0x6e>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	e000      	b.n	80019dc <HAL_ADC_Start_IT+0x70>
 80019da:	4b7c      	ldr	r3, [pc, #496]	; (8001bcc <HAL_ADC_Start_IT+0x260>)
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	6812      	ldr	r2, [r2, #0]
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d002      	beq.n	80019ea <HAL_ADC_Start_IT+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d105      	bne.n	80019f6 <HAL_ADC_Start_IT+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019ee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d006      	beq.n	8001a10 <HAL_ADC_Start_IT+0xa4>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a06:	f023 0206 	bic.w	r2, r3, #6
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	659a      	str	r2, [r3, #88]	; 0x58
 8001a0e:	e002      	b.n	8001a16 <HAL_ADC_Start_IT+0xaa>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2200      	movs	r2, #0
 8001a14:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	221c      	movs	r2, #28
 8001a1c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	685a      	ldr	r2, [r3, #4]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f022 021c 	bic.w	r2, r2, #28
 8001a34:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	695b      	ldr	r3, [r3, #20]
 8001a3a:	2b08      	cmp	r3, #8
 8001a3c:	d108      	bne.n	8001a50 <HAL_ADC_Start_IT+0xe4>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	685a      	ldr	r2, [r3, #4]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f042 0208 	orr.w	r2, r2, #8
 8001a4c:	605a      	str	r2, [r3, #4]
          break;
 8001a4e:	e008      	b.n	8001a62 <HAL_ADC_Start_IT+0xf6>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	685a      	ldr	r2, [r3, #4]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f042 0204 	orr.w	r2, r2, #4
 8001a5e:	605a      	str	r2, [r3, #4]
          break;
 8001a60:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d107      	bne.n	8001a7a <HAL_ADC_Start_IT+0x10e>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	685a      	ldr	r2, [r3, #4]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f042 0210 	orr.w	r2, r2, #16
 8001a78:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a52      	ldr	r2, [pc, #328]	; (8001bc8 <HAL_ADC_Start_IT+0x25c>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d002      	beq.n	8001a8a <HAL_ADC_Start_IT+0x11e>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	e000      	b.n	8001a8c <HAL_ADC_Start_IT+0x120>
 8001a8a:	4b50      	ldr	r3, [pc, #320]	; (8001bcc <HAL_ADC_Start_IT+0x260>)
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	6812      	ldr	r2, [r2, #0]
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d008      	beq.n	8001aa6 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d005      	beq.n	8001aa6 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	2b05      	cmp	r3, #5
 8001a9e:	d002      	beq.n	8001aa6 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	2b09      	cmp	r3, #9
 8001aa4:	d13b      	bne.n	8001b1e <HAL_ADC_Start_IT+0x1b2>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d02d      	beq.n	8001b10 <HAL_ADC_Start_IT+0x1a4>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ab8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001abc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	655a      	str	r2, [r3, #84]	; 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	695b      	ldr	r3, [r3, #20]
 8001ac8:	2b08      	cmp	r3, #8
 8001aca:	d110      	bne.n	8001aee <HAL_ADC_Start_IT+0x182>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	685a      	ldr	r2, [r3, #4]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f022 0220 	bic.w	r2, r2, #32
 8001ada:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	685a      	ldr	r2, [r3, #4]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001aea:	605a      	str	r2, [r3, #4]
              break;
 8001aec:	e011      	b.n	8001b12 <HAL_ADC_Start_IT+0x1a6>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	685a      	ldr	r2, [r3, #4]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001afc:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	685a      	ldr	r2, [r3, #4]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f042 0220 	orr.w	r2, r2, #32
 8001b0c:	605a      	str	r2, [r3, #4]
              break;
 8001b0e:	e000      	b.n	8001b12 <HAL_ADC_Start_IT+0x1a6>
          }
        }
 8001b10:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7ff fd99 	bl	800164e <LL_ADC_REG_StartConversion>
 8001b1c:	e04d      	b.n	8001bba <HAL_ADC_Start_IT+0x24e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b22:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a26      	ldr	r2, [pc, #152]	; (8001bc8 <HAL_ADC_Start_IT+0x25c>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d002      	beq.n	8001b3a <HAL_ADC_Start_IT+0x1ce>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	e000      	b.n	8001b3c <HAL_ADC_Start_IT+0x1d0>
 8001b3a:	4b24      	ldr	r3, [pc, #144]	; (8001bcc <HAL_ADC_Start_IT+0x260>)
 8001b3c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d036      	beq.n	8001bb8 <HAL_ADC_Start_IT+0x24c>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b4e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b52:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	655a      	str	r2, [r3, #84]	; 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	695b      	ldr	r3, [r3, #20]
 8001b5e:	2b08      	cmp	r3, #8
 8001b60:	d110      	bne.n	8001b84 <HAL_ADC_Start_IT+0x218>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	685a      	ldr	r2, [r3, #4]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f022 0220 	bic.w	r2, r2, #32
 8001b70:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	685a      	ldr	r2, [r3, #4]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b80:	605a      	str	r2, [r3, #4]
              break;
 8001b82:	e01a      	b.n	8001bba <HAL_ADC_Start_IT+0x24e>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	685a      	ldr	r2, [r3, #4]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b92:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	685a      	ldr	r2, [r3, #4]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f042 0220 	orr.w	r2, r2, #32
 8001ba2:	605a      	str	r2, [r3, #4]
              break;
 8001ba4:	bf00      	nop
 8001ba6:	e008      	b.n	8001bba <HAL_ADC_Start_IT+0x24e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2200      	movs	r2, #0
 8001bac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001bb0:	e003      	b.n	8001bba <HAL_ADC_Start_IT+0x24e>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	75fb      	strb	r3, [r7, #23]
 8001bb6:	e000      	b.n	8001bba <HAL_ADC_Start_IT+0x24e>
        }
 8001bb8:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 8001bba:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3718      	adds	r7, #24
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	50040300 	.word	0x50040300
 8001bc8:	50040100 	.word	0x50040100
 8001bcc:	50040000 	.word	0x50040000

08001bd0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
	...

08001bec <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b08a      	sub	sp, #40	; 0x28
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c08:	4882      	ldr	r0, [pc, #520]	; (8001e14 <HAL_ADC_IRQHandler+0x228>)
 8001c0a:	f7ff fc8f 	bl	800152c <LL_ADC_GetMultimode>
 8001c0e:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d017      	beq.n	8001c4a <HAL_ADC_IRQHandler+0x5e>
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	f003 0302 	and.w	r3, r3, #2
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d012      	beq.n	8001c4a <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c28:	f003 0310 	and.w	r3, r3, #16
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d105      	bne.n	8001c3c <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c34:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f000 fe99 	bl	8002974 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	2202      	movs	r2, #2
 8001c48:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	f003 0304 	and.w	r3, r3, #4
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d004      	beq.n	8001c5e <HAL_ADC_IRQHandler+0x72>
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	f003 0304 	and.w	r3, r3, #4
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d10a      	bne.n	8001c74 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	f000 8083 	beq.w	8001d70 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	f003 0308 	and.w	r3, r3, #8
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d07d      	beq.n	8001d70 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c78:	f003 0310 	and.w	r3, r3, #16
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d105      	bne.n	8001c8c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c84:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff fbaa 	bl	80013ea <LL_ADC_REG_IsTriggerSourceSWStart>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d062      	beq.n	8001d62 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a5d      	ldr	r2, [pc, #372]	; (8001e18 <HAL_ADC_IRQHandler+0x22c>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d002      	beq.n	8001cac <HAL_ADC_IRQHandler+0xc0>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	e000      	b.n	8001cae <HAL_ADC_IRQHandler+0xc2>
 8001cac:	4b5b      	ldr	r3, [pc, #364]	; (8001e1c <HAL_ADC_IRQHandler+0x230>)
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	6812      	ldr	r2, [r2, #0]
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d008      	beq.n	8001cc8 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d005      	beq.n	8001cc8 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	2b05      	cmp	r3, #5
 8001cc0:	d002      	beq.n	8001cc8 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	2b09      	cmp	r3, #9
 8001cc6:	d104      	bne.n	8001cd2 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	623b      	str	r3, [r7, #32]
 8001cd0:	e00c      	b.n	8001cec <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a50      	ldr	r2, [pc, #320]	; (8001e18 <HAL_ADC_IRQHandler+0x22c>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d002      	beq.n	8001ce2 <HAL_ADC_IRQHandler+0xf6>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	e000      	b.n	8001ce4 <HAL_ADC_IRQHandler+0xf8>
 8001ce2:	4b4e      	ldr	r3, [pc, #312]	; (8001e1c <HAL_ADC_IRQHandler+0x230>)
 8001ce4:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001cec:	6a3b      	ldr	r3, [r7, #32]
 8001cee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d135      	bne.n	8001d62 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0308 	and.w	r3, r3, #8
 8001d00:	2b08      	cmp	r3, #8
 8001d02:	d12e      	bne.n	8001d62 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff fcb4 	bl	8001676 <LL_ADC_REG_IsConversionOngoing>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d11a      	bne.n	8001d4a <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	685a      	ldr	r2, [r3, #4]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f022 020c 	bic.w	r2, r2, #12
 8001d22:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d28:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d112      	bne.n	8001d62 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d40:	f043 0201 	orr.w	r2, r3, #1
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	655a      	str	r2, [r3, #84]	; 0x54
 8001d48:	e00b      	b.n	8001d62 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d4e:	f043 0210 	orr.w	r2, r3, #16
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d5a:	f043 0201 	orr.w	r2, r3, #1
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f7fe fd48 	bl	80007f8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	220c      	movs	r2, #12
 8001d6e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	f003 0320 	and.w	r3, r3, #32
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d004      	beq.n	8001d84 <HAL_ADC_IRQHandler+0x198>
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	f003 0320 	and.w	r3, r3, #32
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d10b      	bne.n	8001d9c <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	f000 809f 	beq.w	8001ece <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	f000 8099 	beq.w	8001ece <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001da0:	f003 0310 	and.w	r3, r3, #16
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d105      	bne.n	8001db4 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dac:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7ff fb55 	bl	8001468 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001dbe:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff fb10 	bl	80013ea <LL_ADC_REG_IsTriggerSourceSWStart>
 8001dca:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a11      	ldr	r2, [pc, #68]	; (8001e18 <HAL_ADC_IRQHandler+0x22c>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d002      	beq.n	8001ddc <HAL_ADC_IRQHandler+0x1f0>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	e000      	b.n	8001dde <HAL_ADC_IRQHandler+0x1f2>
 8001ddc:	4b0f      	ldr	r3, [pc, #60]	; (8001e1c <HAL_ADC_IRQHandler+0x230>)
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	6812      	ldr	r2, [r2, #0]
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d008      	beq.n	8001df8 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d005      	beq.n	8001df8 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	2b06      	cmp	r3, #6
 8001df0:	d002      	beq.n	8001df8 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	2b07      	cmp	r3, #7
 8001df6:	d104      	bne.n	8001e02 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	623b      	str	r3, [r7, #32]
 8001e00:	e013      	b.n	8001e2a <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a04      	ldr	r2, [pc, #16]	; (8001e18 <HAL_ADC_IRQHandler+0x22c>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d009      	beq.n	8001e20 <HAL_ADC_IRQHandler+0x234>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	e007      	b.n	8001e22 <HAL_ADC_IRQHandler+0x236>
 8001e12:	bf00      	nop
 8001e14:	50040300 	.word	0x50040300
 8001e18:	50040100 	.word	0x50040100
 8001e1c:	50040000 	.word	0x50040000
 8001e20:	4b7d      	ldr	r3, [pc, #500]	; (8002018 <HAL_ADC_IRQHandler+0x42c>)
 8001e22:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d10c      	bne.n	8001e4a <HAL_ADC_IRQHandler+0x25e>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8001e30:	6a3b      	ldr	r3, [r7, #32]
 8001e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d142      	bne.n	8001ec0 <HAL_ADC_IRQHandler+0x2d4>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d03f      	beq.n	8001ec0 <HAL_ADC_IRQHandler+0x2d4>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 8001e40:	6a3b      	ldr	r3, [r7, #32]
 8001e42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d13a      	bne.n	8001ec0 <HAL_ADC_IRQHandler+0x2d4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e54:	2b40      	cmp	r3, #64	; 0x40
 8001e56:	d133      	bne.n	8001ec0 <HAL_ADC_IRQHandler+0x2d4>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001e58:	6a3b      	ldr	r3, [r7, #32]
 8001e5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d12e      	bne.n	8001ec0 <HAL_ADC_IRQHandler+0x2d4>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7ff fc18 	bl	800169c <LL_ADC_INJ_IsConversionOngoing>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d11a      	bne.n	8001ea8 <HAL_ADC_IRQHandler+0x2bc>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	685a      	ldr	r2, [r3, #4]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001e80:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d112      	bne.n	8001ec0 <HAL_ADC_IRQHandler+0x2d4>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e9e:	f043 0201 	orr.w	r2, r3, #1
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	655a      	str	r2, [r3, #84]	; 0x54
 8001ea6:	e00b      	b.n	8001ec0 <HAL_ADC_IRQHandler+0x2d4>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eac:	f043 0210 	orr.w	r2, r3, #16
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb8:	f043 0201 	orr.w	r2, r3, #1
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f000 fd2f 	bl	8002924 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	2260      	movs	r2, #96	; 0x60
 8001ecc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d011      	beq.n	8001efc <HAL_ADC_IRQHandler+0x310>
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d00c      	beq.n	8001efc <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ee6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f000 f896 	bl	8002020 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2280      	movs	r2, #128	; 0x80
 8001efa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d012      	beq.n	8001f2c <HAL_ADC_IRQHandler+0x340>
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d00d      	beq.n	8001f2c <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f14:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f000 fd15 	bl	800294c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f2a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d012      	beq.n	8001f5c <HAL_ADC_IRQHandler+0x370>
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d00d      	beq.n	8001f5c <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f44:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f000 fd07 	bl	8002960 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f5a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	f003 0310 	and.w	r3, r3, #16
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d036      	beq.n	8001fd4 <HAL_ADC_IRQHandler+0x3e8>
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	f003 0310 	and.w	r3, r3, #16
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d031      	beq.n	8001fd4 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d102      	bne.n	8001f7e <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	627b      	str	r3, [r7, #36]	; 0x24
 8001f7c:	e014      	b.n	8001fa8 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d008      	beq.n	8001f96 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001f84:	4825      	ldr	r0, [pc, #148]	; (800201c <HAL_ADC_IRQHandler+0x430>)
 8001f86:	f7ff fadf 	bl	8001548 <LL_ADC_GetMultiDMATransfer>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d00b      	beq.n	8001fa8 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8001f90:	2301      	movs	r3, #1
 8001f92:	627b      	str	r3, [r7, #36]	; 0x24
 8001f94:	e008      	b.n	8001fa8 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	f003 0301 	and.w	r3, r3, #1
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8001fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d10e      	bne.n	8001fcc <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fb2:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fbe:	f043 0202 	orr.w	r2, r3, #2
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f000 f834 	bl	8002034 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2210      	movs	r2, #16
 8001fd2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d018      	beq.n	8002010 <HAL_ADC_IRQHandler+0x424>
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d013      	beq.n	8002010 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fec:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff8:	f043 0208 	orr.w	r2, r3, #8
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002008:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f000 fc94 	bl	8002938 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002010:	bf00      	nop
 8002012:	3728      	adds	r7, #40	; 0x28
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	50040000 	.word	0x50040000
 800201c:	50040300 	.word	0x50040300

08002020 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002028:	bf00      	nop
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800203c:	bf00      	nop
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b0b6      	sub	sp, #216	; 0xd8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002052:	2300      	movs	r3, #0
 8002054:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002058:	2300      	movs	r3, #0
 800205a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002062:	2b01      	cmp	r3, #1
 8002064:	d101      	bne.n	800206a <HAL_ADC_ConfigChannel+0x22>
 8002066:	2302      	movs	r3, #2
 8002068:	e3c6      	b.n	80027f8 <HAL_ADC_ConfigChannel+0x7b0>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2201      	movs	r2, #1
 800206e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4618      	mov	r0, r3
 8002078:	f7ff fafd 	bl	8001676 <LL_ADC_REG_IsConversionOngoing>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	f040 83a7 	bne.w	80027d2 <HAL_ADC_ConfigChannel+0x78a>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	2b05      	cmp	r3, #5
 800208a:	d824      	bhi.n	80020d6 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	3b02      	subs	r3, #2
 8002092:	2b03      	cmp	r3, #3
 8002094:	d81b      	bhi.n	80020ce <HAL_ADC_ConfigChannel+0x86>
 8002096:	a201      	add	r2, pc, #4	; (adr r2, 800209c <HAL_ADC_ConfigChannel+0x54>)
 8002098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800209c:	080020ad 	.word	0x080020ad
 80020a0:	080020b5 	.word	0x080020b5
 80020a4:	080020bd 	.word	0x080020bd
 80020a8:	080020c5 	.word	0x080020c5
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	220c      	movs	r2, #12
 80020b0:	605a      	str	r2, [r3, #4]
          break;
 80020b2:	e011      	b.n	80020d8 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	2212      	movs	r2, #18
 80020b8:	605a      	str	r2, [r3, #4]
          break;
 80020ba:	e00d      	b.n	80020d8 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	2218      	movs	r2, #24
 80020c0:	605a      	str	r2, [r3, #4]
          break;
 80020c2:	e009      	b.n	80020d8 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020ca:	605a      	str	r2, [r3, #4]
          break;
 80020cc:	e004      	b.n	80020d8 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	2206      	movs	r2, #6
 80020d2:	605a      	str	r2, [r3, #4]
          break;
 80020d4:	e000      	b.n	80020d8 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80020d6:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6818      	ldr	r0, [r3, #0]
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	6859      	ldr	r1, [r3, #4]
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	461a      	mov	r2, r3
 80020e6:	f7ff f993 	bl	8001410 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7ff fac1 	bl	8001676 <LL_ADC_REG_IsConversionOngoing>
 80020f4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7ff facd 	bl	800169c <LL_ADC_INJ_IsConversionOngoing>
 8002102:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002106:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800210a:	2b00      	cmp	r3, #0
 800210c:	f040 81a6 	bne.w	800245c <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002110:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002114:	2b00      	cmp	r3, #0
 8002116:	f040 81a1 	bne.w	800245c <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6818      	ldr	r0, [r3, #0]
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	6819      	ldr	r1, [r3, #0]
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	461a      	mov	r2, r3
 8002128:	f7ff f9b1 	bl	800148e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	695a      	ldr	r2, [r3, #20]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	08db      	lsrs	r3, r3, #3
 8002138:	f003 0303 	and.w	r3, r3, #3
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	fa02 f303 	lsl.w	r3, r2, r3
 8002142:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	691b      	ldr	r3, [r3, #16]
 800214a:	2b04      	cmp	r3, #4
 800214c:	d00a      	beq.n	8002164 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6818      	ldr	r0, [r3, #0]
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	6919      	ldr	r1, [r3, #16]
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800215e:	f7ff f8ef 	bl	8001340 <LL_ADC_SetOffset>
 8002162:	e17b      	b.n	800245c <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2100      	movs	r1, #0
 800216a:	4618      	mov	r0, r3
 800216c:	f7ff f90c 	bl	8001388 <LL_ADC_GetOffsetChannel>
 8002170:	4603      	mov	r3, r0
 8002172:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002176:	2b00      	cmp	r3, #0
 8002178:	d10a      	bne.n	8002190 <HAL_ADC_ConfigChannel+0x148>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	2100      	movs	r1, #0
 8002180:	4618      	mov	r0, r3
 8002182:	f7ff f901 	bl	8001388 <LL_ADC_GetOffsetChannel>
 8002186:	4603      	mov	r3, r0
 8002188:	0e9b      	lsrs	r3, r3, #26
 800218a:	f003 021f 	and.w	r2, r3, #31
 800218e:	e01e      	b.n	80021ce <HAL_ADC_ConfigChannel+0x186>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2100      	movs	r1, #0
 8002196:	4618      	mov	r0, r3
 8002198:	f7ff f8f6 	bl	8001388 <LL_ADC_GetOffsetChannel>
 800219c:	4603      	mov	r3, r0
 800219e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80021a6:	fa93 f3a3 	rbit	r3, r3
 80021aa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80021ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80021b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80021b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d101      	bne.n	80021c2 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80021be:	2320      	movs	r3, #32
 80021c0:	e004      	b.n	80021cc <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80021c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80021c6:	fab3 f383 	clz	r3, r3
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d105      	bne.n	80021e6 <HAL_ADC_ConfigChannel+0x19e>
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	0e9b      	lsrs	r3, r3, #26
 80021e0:	f003 031f 	and.w	r3, r3, #31
 80021e4:	e018      	b.n	8002218 <HAL_ADC_ConfigChannel+0x1d0>
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80021f2:	fa93 f3a3 	rbit	r3, r3
 80021f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80021fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80021fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002202:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002206:	2b00      	cmp	r3, #0
 8002208:	d101      	bne.n	800220e <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800220a:	2320      	movs	r3, #32
 800220c:	e004      	b.n	8002218 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800220e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002212:	fab3 f383 	clz	r3, r3
 8002216:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002218:	429a      	cmp	r2, r3
 800221a:	d106      	bne.n	800222a <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2200      	movs	r2, #0
 8002222:	2100      	movs	r1, #0
 8002224:	4618      	mov	r0, r3
 8002226:	f7ff f8c5 	bl	80013b4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2101      	movs	r1, #1
 8002230:	4618      	mov	r0, r3
 8002232:	f7ff f8a9 	bl	8001388 <LL_ADC_GetOffsetChannel>
 8002236:	4603      	mov	r3, r0
 8002238:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800223c:	2b00      	cmp	r3, #0
 800223e:	d10a      	bne.n	8002256 <HAL_ADC_ConfigChannel+0x20e>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2101      	movs	r1, #1
 8002246:	4618      	mov	r0, r3
 8002248:	f7ff f89e 	bl	8001388 <LL_ADC_GetOffsetChannel>
 800224c:	4603      	mov	r3, r0
 800224e:	0e9b      	lsrs	r3, r3, #26
 8002250:	f003 021f 	and.w	r2, r3, #31
 8002254:	e01e      	b.n	8002294 <HAL_ADC_ConfigChannel+0x24c>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2101      	movs	r1, #1
 800225c:	4618      	mov	r0, r3
 800225e:	f7ff f893 	bl	8001388 <LL_ADC_GetOffsetChannel>
 8002262:	4603      	mov	r3, r0
 8002264:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002268:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800226c:	fa93 f3a3 	rbit	r3, r3
 8002270:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002274:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002278:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800227c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002280:	2b00      	cmp	r3, #0
 8002282:	d101      	bne.n	8002288 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002284:	2320      	movs	r3, #32
 8002286:	e004      	b.n	8002292 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002288:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800228c:	fab3 f383 	clz	r3, r3
 8002290:	b2db      	uxtb	r3, r3
 8002292:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800229c:	2b00      	cmp	r3, #0
 800229e:	d105      	bne.n	80022ac <HAL_ADC_ConfigChannel+0x264>
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	0e9b      	lsrs	r3, r3, #26
 80022a6:	f003 031f 	and.w	r3, r3, #31
 80022aa:	e018      	b.n	80022de <HAL_ADC_ConfigChannel+0x296>
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80022b8:	fa93 f3a3 	rbit	r3, r3
 80022bc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80022c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80022c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80022c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d101      	bne.n	80022d4 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80022d0:	2320      	movs	r3, #32
 80022d2:	e004      	b.n	80022de <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80022d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80022d8:	fab3 f383 	clz	r3, r3
 80022dc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80022de:	429a      	cmp	r2, r3
 80022e0:	d106      	bne.n	80022f0 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	2200      	movs	r2, #0
 80022e8:	2101      	movs	r1, #1
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7ff f862 	bl	80013b4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2102      	movs	r1, #2
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7ff f846 	bl	8001388 <LL_ADC_GetOffsetChannel>
 80022fc:	4603      	mov	r3, r0
 80022fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002302:	2b00      	cmp	r3, #0
 8002304:	d10a      	bne.n	800231c <HAL_ADC_ConfigChannel+0x2d4>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	2102      	movs	r1, #2
 800230c:	4618      	mov	r0, r3
 800230e:	f7ff f83b 	bl	8001388 <LL_ADC_GetOffsetChannel>
 8002312:	4603      	mov	r3, r0
 8002314:	0e9b      	lsrs	r3, r3, #26
 8002316:	f003 021f 	and.w	r2, r3, #31
 800231a:	e01e      	b.n	800235a <HAL_ADC_ConfigChannel+0x312>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2102      	movs	r1, #2
 8002322:	4618      	mov	r0, r3
 8002324:	f7ff f830 	bl	8001388 <LL_ADC_GetOffsetChannel>
 8002328:	4603      	mov	r3, r0
 800232a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002332:	fa93 f3a3 	rbit	r3, r3
 8002336:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800233a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800233e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002342:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002346:	2b00      	cmp	r3, #0
 8002348:	d101      	bne.n	800234e <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800234a:	2320      	movs	r3, #32
 800234c:	e004      	b.n	8002358 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800234e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002352:	fab3 f383 	clz	r3, r3
 8002356:	b2db      	uxtb	r3, r3
 8002358:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002362:	2b00      	cmp	r3, #0
 8002364:	d105      	bne.n	8002372 <HAL_ADC_ConfigChannel+0x32a>
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	0e9b      	lsrs	r3, r3, #26
 800236c:	f003 031f 	and.w	r3, r3, #31
 8002370:	e016      	b.n	80023a0 <HAL_ADC_ConfigChannel+0x358>
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800237e:	fa93 f3a3 	rbit	r3, r3
 8002382:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002384:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002386:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800238a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800238e:	2b00      	cmp	r3, #0
 8002390:	d101      	bne.n	8002396 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002392:	2320      	movs	r3, #32
 8002394:	e004      	b.n	80023a0 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002396:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800239a:	fab3 f383 	clz	r3, r3
 800239e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d106      	bne.n	80023b2 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2200      	movs	r2, #0
 80023aa:	2102      	movs	r1, #2
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7ff f801 	bl	80013b4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2103      	movs	r1, #3
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7fe ffe5 	bl	8001388 <LL_ADC_GetOffsetChannel>
 80023be:	4603      	mov	r3, r0
 80023c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d10a      	bne.n	80023de <HAL_ADC_ConfigChannel+0x396>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2103      	movs	r1, #3
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7fe ffda 	bl	8001388 <LL_ADC_GetOffsetChannel>
 80023d4:	4603      	mov	r3, r0
 80023d6:	0e9b      	lsrs	r3, r3, #26
 80023d8:	f003 021f 	and.w	r2, r3, #31
 80023dc:	e017      	b.n	800240e <HAL_ADC_ConfigChannel+0x3c6>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2103      	movs	r1, #3
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7fe ffcf 	bl	8001388 <LL_ADC_GetOffsetChannel>
 80023ea:	4603      	mov	r3, r0
 80023ec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023f0:	fa93 f3a3 	rbit	r3, r3
 80023f4:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80023f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023f8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80023fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d101      	bne.n	8002404 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002400:	2320      	movs	r3, #32
 8002402:	e003      	b.n	800240c <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002404:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002406:	fab3 f383 	clz	r3, r3
 800240a:	b2db      	uxtb	r3, r3
 800240c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002416:	2b00      	cmp	r3, #0
 8002418:	d105      	bne.n	8002426 <HAL_ADC_ConfigChannel+0x3de>
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	0e9b      	lsrs	r3, r3, #26
 8002420:	f003 031f 	and.w	r3, r3, #31
 8002424:	e011      	b.n	800244a <HAL_ADC_ConfigChannel+0x402>
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800242e:	fa93 f3a3 	rbit	r3, r3
 8002432:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002434:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002436:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002438:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800243a:	2b00      	cmp	r3, #0
 800243c:	d101      	bne.n	8002442 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800243e:	2320      	movs	r3, #32
 8002440:	e003      	b.n	800244a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002442:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002444:	fab3 f383 	clz	r3, r3
 8002448:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800244a:	429a      	cmp	r2, r3
 800244c:	d106      	bne.n	800245c <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2200      	movs	r2, #0
 8002454:	2103      	movs	r1, #3
 8002456:	4618      	mov	r0, r3
 8002458:	f7fe ffac 	bl	80013b4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4618      	mov	r0, r3
 8002462:	f7ff f8e1 	bl	8001628 <LL_ADC_IsEnabled>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	f040 813f 	bne.w	80026ec <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6818      	ldr	r0, [r3, #0]
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	6819      	ldr	r1, [r3, #0]
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	461a      	mov	r2, r3
 800247c:	f7ff f832 	bl	80014e4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	4a8e      	ldr	r2, [pc, #568]	; (80026c0 <HAL_ADC_ConfigChannel+0x678>)
 8002486:	4293      	cmp	r3, r2
 8002488:	f040 8130 	bne.w	80026ec <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002498:	2b00      	cmp	r3, #0
 800249a:	d10b      	bne.n	80024b4 <HAL_ADC_ConfigChannel+0x46c>
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	0e9b      	lsrs	r3, r3, #26
 80024a2:	3301      	adds	r3, #1
 80024a4:	f003 031f 	and.w	r3, r3, #31
 80024a8:	2b09      	cmp	r3, #9
 80024aa:	bf94      	ite	ls
 80024ac:	2301      	movls	r3, #1
 80024ae:	2300      	movhi	r3, #0
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	e019      	b.n	80024e8 <HAL_ADC_ConfigChannel+0x4a0>
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024bc:	fa93 f3a3 	rbit	r3, r3
 80024c0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80024c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024c4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80024c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d101      	bne.n	80024d0 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80024cc:	2320      	movs	r3, #32
 80024ce:	e003      	b.n	80024d8 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80024d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024d2:	fab3 f383 	clz	r3, r3
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	3301      	adds	r3, #1
 80024da:	f003 031f 	and.w	r3, r3, #31
 80024de:	2b09      	cmp	r3, #9
 80024e0:	bf94      	ite	ls
 80024e2:	2301      	movls	r3, #1
 80024e4:	2300      	movhi	r3, #0
 80024e6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d079      	beq.n	80025e0 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d107      	bne.n	8002508 <HAL_ADC_ConfigChannel+0x4c0>
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	0e9b      	lsrs	r3, r3, #26
 80024fe:	3301      	adds	r3, #1
 8002500:	069b      	lsls	r3, r3, #26
 8002502:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002506:	e015      	b.n	8002534 <HAL_ADC_ConfigChannel+0x4ec>
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002510:	fa93 f3a3 	rbit	r3, r3
 8002514:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002516:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002518:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800251a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800251c:	2b00      	cmp	r3, #0
 800251e:	d101      	bne.n	8002524 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002520:	2320      	movs	r3, #32
 8002522:	e003      	b.n	800252c <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002524:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002526:	fab3 f383 	clz	r3, r3
 800252a:	b2db      	uxtb	r3, r3
 800252c:	3301      	adds	r3, #1
 800252e:	069b      	lsls	r3, r3, #26
 8002530:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800253c:	2b00      	cmp	r3, #0
 800253e:	d109      	bne.n	8002554 <HAL_ADC_ConfigChannel+0x50c>
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	0e9b      	lsrs	r3, r3, #26
 8002546:	3301      	adds	r3, #1
 8002548:	f003 031f 	and.w	r3, r3, #31
 800254c:	2101      	movs	r1, #1
 800254e:	fa01 f303 	lsl.w	r3, r1, r3
 8002552:	e017      	b.n	8002584 <HAL_ADC_ConfigChannel+0x53c>
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800255c:	fa93 f3a3 	rbit	r3, r3
 8002560:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002562:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002564:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002566:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002568:	2b00      	cmp	r3, #0
 800256a:	d101      	bne.n	8002570 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 800256c:	2320      	movs	r3, #32
 800256e:	e003      	b.n	8002578 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002570:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002572:	fab3 f383 	clz	r3, r3
 8002576:	b2db      	uxtb	r3, r3
 8002578:	3301      	adds	r3, #1
 800257a:	f003 031f 	and.w	r3, r3, #31
 800257e:	2101      	movs	r1, #1
 8002580:	fa01 f303 	lsl.w	r3, r1, r3
 8002584:	ea42 0103 	orr.w	r1, r2, r3
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002590:	2b00      	cmp	r3, #0
 8002592:	d10a      	bne.n	80025aa <HAL_ADC_ConfigChannel+0x562>
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	0e9b      	lsrs	r3, r3, #26
 800259a:	3301      	adds	r3, #1
 800259c:	f003 021f 	and.w	r2, r3, #31
 80025a0:	4613      	mov	r3, r2
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	4413      	add	r3, r2
 80025a6:	051b      	lsls	r3, r3, #20
 80025a8:	e018      	b.n	80025dc <HAL_ADC_ConfigChannel+0x594>
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025b2:	fa93 f3a3 	rbit	r3, r3
 80025b6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80025b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80025bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d101      	bne.n	80025c6 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80025c2:	2320      	movs	r3, #32
 80025c4:	e003      	b.n	80025ce <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80025c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025c8:	fab3 f383 	clz	r3, r3
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	3301      	adds	r3, #1
 80025d0:	f003 021f 	and.w	r2, r3, #31
 80025d4:	4613      	mov	r3, r2
 80025d6:	005b      	lsls	r3, r3, #1
 80025d8:	4413      	add	r3, r2
 80025da:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025dc:	430b      	orrs	r3, r1
 80025de:	e080      	b.n	80026e2 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d107      	bne.n	80025fc <HAL_ADC_ConfigChannel+0x5b4>
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	0e9b      	lsrs	r3, r3, #26
 80025f2:	3301      	adds	r3, #1
 80025f4:	069b      	lsls	r3, r3, #26
 80025f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025fa:	e015      	b.n	8002628 <HAL_ADC_ConfigChannel+0x5e0>
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002604:	fa93 f3a3 	rbit	r3, r3
 8002608:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800260a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800260c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800260e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002610:	2b00      	cmp	r3, #0
 8002612:	d101      	bne.n	8002618 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002614:	2320      	movs	r3, #32
 8002616:	e003      	b.n	8002620 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800261a:	fab3 f383 	clz	r3, r3
 800261e:	b2db      	uxtb	r3, r3
 8002620:	3301      	adds	r3, #1
 8002622:	069b      	lsls	r3, r3, #26
 8002624:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002630:	2b00      	cmp	r3, #0
 8002632:	d109      	bne.n	8002648 <HAL_ADC_ConfigChannel+0x600>
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	0e9b      	lsrs	r3, r3, #26
 800263a:	3301      	adds	r3, #1
 800263c:	f003 031f 	and.w	r3, r3, #31
 8002640:	2101      	movs	r1, #1
 8002642:	fa01 f303 	lsl.w	r3, r1, r3
 8002646:	e017      	b.n	8002678 <HAL_ADC_ConfigChannel+0x630>
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800264e:	6a3b      	ldr	r3, [r7, #32]
 8002650:	fa93 f3a3 	rbit	r3, r3
 8002654:	61fb      	str	r3, [r7, #28]
  return result;
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800265a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265c:	2b00      	cmp	r3, #0
 800265e:	d101      	bne.n	8002664 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002660:	2320      	movs	r3, #32
 8002662:	e003      	b.n	800266c <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002666:	fab3 f383 	clz	r3, r3
 800266a:	b2db      	uxtb	r3, r3
 800266c:	3301      	adds	r3, #1
 800266e:	f003 031f 	and.w	r3, r3, #31
 8002672:	2101      	movs	r1, #1
 8002674:	fa01 f303 	lsl.w	r3, r1, r3
 8002678:	ea42 0103 	orr.w	r1, r2, r3
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002684:	2b00      	cmp	r3, #0
 8002686:	d10d      	bne.n	80026a4 <HAL_ADC_ConfigChannel+0x65c>
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	0e9b      	lsrs	r3, r3, #26
 800268e:	3301      	adds	r3, #1
 8002690:	f003 021f 	and.w	r2, r3, #31
 8002694:	4613      	mov	r3, r2
 8002696:	005b      	lsls	r3, r3, #1
 8002698:	4413      	add	r3, r2
 800269a:	3b1e      	subs	r3, #30
 800269c:	051b      	lsls	r3, r3, #20
 800269e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026a2:	e01d      	b.n	80026e0 <HAL_ADC_ConfigChannel+0x698>
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	fa93 f3a3 	rbit	r3, r3
 80026b0:	613b      	str	r3, [r7, #16]
  return result;
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d103      	bne.n	80026c4 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80026bc:	2320      	movs	r3, #32
 80026be:	e005      	b.n	80026cc <HAL_ADC_ConfigChannel+0x684>
 80026c0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	fab3 f383 	clz	r3, r3
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	3301      	adds	r3, #1
 80026ce:	f003 021f 	and.w	r2, r3, #31
 80026d2:	4613      	mov	r3, r2
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	4413      	add	r3, r2
 80026d8:	3b1e      	subs	r3, #30
 80026da:	051b      	lsls	r3, r3, #20
 80026dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026e0:	430b      	orrs	r3, r1
 80026e2:	683a      	ldr	r2, [r7, #0]
 80026e4:	6892      	ldr	r2, [r2, #8]
 80026e6:	4619      	mov	r1, r3
 80026e8:	f7fe fed1 	bl	800148e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	4b43      	ldr	r3, [pc, #268]	; (8002800 <HAL_ADC_ConfigChannel+0x7b8>)
 80026f2:	4013      	ands	r3, r2
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d079      	beq.n	80027ec <HAL_ADC_ConfigChannel+0x7a4>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026f8:	4842      	ldr	r0, [pc, #264]	; (8002804 <HAL_ADC_ConfigChannel+0x7bc>)
 80026fa:	f7fe fe13 	bl	8001324 <LL_ADC_GetCommonPathInternalCh>
 80026fe:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a40      	ldr	r2, [pc, #256]	; (8002808 <HAL_ADC_ConfigChannel+0x7c0>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d12b      	bne.n	8002764 <HAL_ADC_ConfigChannel+0x71c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800270c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002710:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d125      	bne.n	8002764 <HAL_ADC_ConfigChannel+0x71c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a3b      	ldr	r2, [pc, #236]	; (800280c <HAL_ADC_ConfigChannel+0x7c4>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d004      	beq.n	800272c <HAL_ADC_ConfigChannel+0x6e4>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a3a      	ldr	r2, [pc, #232]	; (8002810 <HAL_ADC_ConfigChannel+0x7c8>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d15c      	bne.n	80027e6 <HAL_ADC_ConfigChannel+0x79e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800272c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002730:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002734:	4619      	mov	r1, r3
 8002736:	4833      	ldr	r0, [pc, #204]	; (8002804 <HAL_ADC_ConfigChannel+0x7bc>)
 8002738:	f7fe fde1 	bl	80012fe <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800273c:	4b35      	ldr	r3, [pc, #212]	; (8002814 <HAL_ADC_ConfigChannel+0x7cc>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	099b      	lsrs	r3, r3, #6
 8002742:	4a35      	ldr	r2, [pc, #212]	; (8002818 <HAL_ADC_ConfigChannel+0x7d0>)
 8002744:	fba2 2303 	umull	r2, r3, r2, r3
 8002748:	099a      	lsrs	r2, r3, #6
 800274a:	4613      	mov	r3, r2
 800274c:	005b      	lsls	r3, r3, #1
 800274e:	4413      	add	r3, r2
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002754:	e002      	b.n	800275c <HAL_ADC_ConfigChannel+0x714>
          {
            wait_loop_index--;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	3b01      	subs	r3, #1
 800275a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d1f9      	bne.n	8002756 <HAL_ADC_ConfigChannel+0x70e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002762:	e040      	b.n	80027e6 <HAL_ADC_ConfigChannel+0x79e>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a2c      	ldr	r2, [pc, #176]	; (800281c <HAL_ADC_ConfigChannel+0x7d4>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d118      	bne.n	80027a0 <HAL_ADC_ConfigChannel+0x758>
 800276e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002772:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d112      	bne.n	80027a0 <HAL_ADC_ConfigChannel+0x758>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a23      	ldr	r2, [pc, #140]	; (800280c <HAL_ADC_ConfigChannel+0x7c4>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d004      	beq.n	800278e <HAL_ADC_ConfigChannel+0x746>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a21      	ldr	r2, [pc, #132]	; (8002810 <HAL_ADC_ConfigChannel+0x7c8>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d12d      	bne.n	80027ea <HAL_ADC_ConfigChannel+0x7a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800278e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002792:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002796:	4619      	mov	r1, r3
 8002798:	481a      	ldr	r0, [pc, #104]	; (8002804 <HAL_ADC_ConfigChannel+0x7bc>)
 800279a:	f7fe fdb0 	bl	80012fe <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800279e:	e024      	b.n	80027ea <HAL_ADC_ConfigChannel+0x7a2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a1e      	ldr	r2, [pc, #120]	; (8002820 <HAL_ADC_ConfigChannel+0x7d8>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d120      	bne.n	80027ec <HAL_ADC_ConfigChannel+0x7a4>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80027aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d11a      	bne.n	80027ec <HAL_ADC_ConfigChannel+0x7a4>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a14      	ldr	r2, [pc, #80]	; (800280c <HAL_ADC_ConfigChannel+0x7c4>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d115      	bne.n	80027ec <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80027c8:	4619      	mov	r1, r3
 80027ca:	480e      	ldr	r0, [pc, #56]	; (8002804 <HAL_ADC_ConfigChannel+0x7bc>)
 80027cc:	f7fe fd97 	bl	80012fe <LL_ADC_SetCommonPathInternalCh>
 80027d0:	e00c      	b.n	80027ec <HAL_ADC_ConfigChannel+0x7a4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027d6:	f043 0220 	orr.w	r2, r3, #32
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80027e4:	e002      	b.n	80027ec <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027e6:	bf00      	nop
 80027e8:	e000      	b.n	80027ec <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027ea:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80027f4:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	37d8      	adds	r7, #216	; 0xd8
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	80080000 	.word	0x80080000
 8002804:	50040300 	.word	0x50040300
 8002808:	c7520000 	.word	0xc7520000
 800280c:	50040000 	.word	0x50040000
 8002810:	50040200 	.word	0x50040200
 8002814:	200000c8 	.word	0x200000c8
 8002818:	053e2d63 	.word	0x053e2d63
 800281c:	cb840000 	.word	0xcb840000
 8002820:	80000001 	.word	0x80000001

08002824 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4618      	mov	r0, r3
 8002832:	f7fe fef9 	bl	8001628 <LL_ADC_IsEnabled>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d146      	bne.n	80028ca <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	689a      	ldr	r2, [r3, #8]
 8002842:	4b24      	ldr	r3, [pc, #144]	; (80028d4 <ADC_Enable+0xb0>)
 8002844:	4013      	ands	r3, r2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d00d      	beq.n	8002866 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800284e:	f043 0210 	orr.w	r2, r3, #16
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800285a:	f043 0201 	orr.w	r2, r3, #1
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e032      	b.n	80028cc <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4618      	mov	r0, r3
 800286c:	f7fe fec8 	bl	8001600 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002870:	f7fe fd04 	bl	800127c <HAL_GetTick>
 8002874:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002876:	e021      	b.n	80028bc <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4618      	mov	r0, r3
 800287e:	f7fe fed3 	bl	8001628 <LL_ADC_IsEnabled>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d104      	bne.n	8002892 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4618      	mov	r0, r3
 800288e:	f7fe feb7 	bl	8001600 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002892:	f7fe fcf3 	bl	800127c <HAL_GetTick>
 8002896:	4602      	mov	r2, r0
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	2b02      	cmp	r3, #2
 800289e:	d90d      	bls.n	80028bc <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028a4:	f043 0210 	orr.w	r2, r3, #16
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b0:	f043 0201 	orr.w	r2, r3, #1
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e007      	b.n	80028cc <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0301 	and.w	r3, r3, #1
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d1d6      	bne.n	8002878 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80028ca:	2300      	movs	r3, #0
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3710      	adds	r7, #16
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	8000003f 	.word	0x8000003f

080028d8 <LL_ADC_IsEnabled>:
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f003 0301 	and.w	r3, r3, #1
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d101      	bne.n	80028f0 <LL_ADC_IsEnabled+0x18>
 80028ec:	2301      	movs	r3, #1
 80028ee:	e000      	b.n	80028f2 <LL_ADC_IsEnabled+0x1a>
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr

080028fe <LL_ADC_REG_IsConversionOngoing>:
{
 80028fe:	b480      	push	{r7}
 8002900:	b083      	sub	sp, #12
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f003 0304 	and.w	r3, r3, #4
 800290e:	2b04      	cmp	r3, #4
 8002910:	d101      	bne.n	8002916 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002912:	2301      	movs	r3, #1
 8002914:	e000      	b.n	8002918 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002916:	2300      	movs	r3, #0
}
 8002918:	4618      	mov	r0, r3
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr

08002924 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800292c:	bf00      	nop
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002940:	bf00      	nop
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002954:	bf00      	nop
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr

08002960 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002968:	bf00      	nop
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800297c:	bf00      	nop
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr

08002988 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002988:	b590      	push	{r4, r7, lr}
 800298a:	b09f      	sub	sp, #124	; 0x7c
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002992:	2300      	movs	r3, #0
 8002994:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d101      	bne.n	80029a6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80029a2:	2302      	movs	r3, #2
 80029a4:	e08f      	b.n	8002ac6 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2201      	movs	r2, #1
 80029aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a47      	ldr	r2, [pc, #284]	; (8002ad0 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d102      	bne.n	80029be <HAL_ADCEx_MultiModeConfigChannel+0x36>
 80029b8:	4b46      	ldr	r3, [pc, #280]	; (8002ad4 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80029ba:	60bb      	str	r3, [r7, #8]
 80029bc:	e001      	b.n	80029c2 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 80029be:	2300      	movs	r3, #0
 80029c0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d10b      	bne.n	80029e0 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029cc:	f043 0220 	orr.w	r2, r3, #32
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e072      	b.n	8002ac6 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7ff ff8b 	bl	80028fe <LL_ADC_REG_IsConversionOngoing>
 80029e8:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7ff ff85 	bl	80028fe <LL_ADC_REG_IsConversionOngoing>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d154      	bne.n	8002aa4 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80029fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d151      	bne.n	8002aa4 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002a00:	4b35      	ldr	r3, [pc, #212]	; (8002ad8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002a02:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d02c      	beq.n	8002a66 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002a0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	6859      	ldr	r1, [r3, #4]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a1e:	035b      	lsls	r3, r3, #13
 8002a20:	430b      	orrs	r3, r1
 8002a22:	431a      	orrs	r2, r3
 8002a24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a26:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a28:	4829      	ldr	r0, [pc, #164]	; (8002ad0 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002a2a:	f7ff ff55 	bl	80028d8 <LL_ADC_IsEnabled>
 8002a2e:	4604      	mov	r4, r0
 8002a30:	4828      	ldr	r0, [pc, #160]	; (8002ad4 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002a32:	f7ff ff51 	bl	80028d8 <LL_ADC_IsEnabled>
 8002a36:	4603      	mov	r3, r0
 8002a38:	431c      	orrs	r4, r3
 8002a3a:	4828      	ldr	r0, [pc, #160]	; (8002adc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002a3c:	f7ff ff4c 	bl	80028d8 <LL_ADC_IsEnabled>
 8002a40:	4603      	mov	r3, r0
 8002a42:	4323      	orrs	r3, r4
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d137      	bne.n	8002ab8 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002a48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002a50:	f023 030f 	bic.w	r3, r3, #15
 8002a54:	683a      	ldr	r2, [r7, #0]
 8002a56:	6811      	ldr	r1, [r2, #0]
 8002a58:	683a      	ldr	r2, [r7, #0]
 8002a5a:	6892      	ldr	r2, [r2, #8]
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	431a      	orrs	r2, r3
 8002a60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a62:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a64:	e028      	b.n	8002ab8 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002a66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a70:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a72:	4817      	ldr	r0, [pc, #92]	; (8002ad0 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002a74:	f7ff ff30 	bl	80028d8 <LL_ADC_IsEnabled>
 8002a78:	4604      	mov	r4, r0
 8002a7a:	4816      	ldr	r0, [pc, #88]	; (8002ad4 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002a7c:	f7ff ff2c 	bl	80028d8 <LL_ADC_IsEnabled>
 8002a80:	4603      	mov	r3, r0
 8002a82:	431c      	orrs	r4, r3
 8002a84:	4815      	ldr	r0, [pc, #84]	; (8002adc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002a86:	f7ff ff27 	bl	80028d8 <LL_ADC_IsEnabled>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	4323      	orrs	r3, r4
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d112      	bne.n	8002ab8 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002a92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002a9a:	f023 030f 	bic.w	r3, r3, #15
 8002a9e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002aa0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002aa2:	e009      	b.n	8002ab8 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aa8:	f043 0220 	orr.w	r2, r3, #32
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002ab6:	e000      	b.n	8002aba <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ab8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002ac2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	377c      	adds	r7, #124	; 0x7c
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd90      	pop	{r4, r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	50040000 	.word	0x50040000
 8002ad4:	50040100 	.word	0x50040100
 8002ad8:	50040300 	.word	0x50040300
 8002adc:	50040200 	.word	0x50040200

08002ae0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b085      	sub	sp, #20
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f003 0307 	and.w	r3, r3, #7
 8002aee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002af0:	4b0c      	ldr	r3, [pc, #48]	; (8002b24 <__NVIC_SetPriorityGrouping+0x44>)
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002af6:	68ba      	ldr	r2, [r7, #8]
 8002af8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002afc:	4013      	ands	r3, r2
 8002afe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b12:	4a04      	ldr	r2, [pc, #16]	; (8002b24 <__NVIC_SetPriorityGrouping+0x44>)
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	60d3      	str	r3, [r2, #12]
}
 8002b18:	bf00      	nop
 8002b1a:	3714      	adds	r7, #20
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr
 8002b24:	e000ed00 	.word	0xe000ed00

08002b28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b2c:	4b04      	ldr	r3, [pc, #16]	; (8002b40 <__NVIC_GetPriorityGrouping+0x18>)
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	0a1b      	lsrs	r3, r3, #8
 8002b32:	f003 0307 	and.w	r3, r3, #7
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr
 8002b40:	e000ed00 	.word	0xe000ed00

08002b44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	db0b      	blt.n	8002b6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b56:	79fb      	ldrb	r3, [r7, #7]
 8002b58:	f003 021f 	and.w	r2, r3, #31
 8002b5c:	4907      	ldr	r1, [pc, #28]	; (8002b7c <__NVIC_EnableIRQ+0x38>)
 8002b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b62:	095b      	lsrs	r3, r3, #5
 8002b64:	2001      	movs	r0, #1
 8002b66:	fa00 f202 	lsl.w	r2, r0, r2
 8002b6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b6e:	bf00      	nop
 8002b70:	370c      	adds	r7, #12
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	e000e100 	.word	0xe000e100

08002b80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	4603      	mov	r3, r0
 8002b88:	6039      	str	r1, [r7, #0]
 8002b8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	db0a      	blt.n	8002baa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	b2da      	uxtb	r2, r3
 8002b98:	490c      	ldr	r1, [pc, #48]	; (8002bcc <__NVIC_SetPriority+0x4c>)
 8002b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b9e:	0112      	lsls	r2, r2, #4
 8002ba0:	b2d2      	uxtb	r2, r2
 8002ba2:	440b      	add	r3, r1
 8002ba4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ba8:	e00a      	b.n	8002bc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	b2da      	uxtb	r2, r3
 8002bae:	4908      	ldr	r1, [pc, #32]	; (8002bd0 <__NVIC_SetPriority+0x50>)
 8002bb0:	79fb      	ldrb	r3, [r7, #7]
 8002bb2:	f003 030f 	and.w	r3, r3, #15
 8002bb6:	3b04      	subs	r3, #4
 8002bb8:	0112      	lsls	r2, r2, #4
 8002bba:	b2d2      	uxtb	r2, r2
 8002bbc:	440b      	add	r3, r1
 8002bbe:	761a      	strb	r2, [r3, #24]
}
 8002bc0:	bf00      	nop
 8002bc2:	370c      	adds	r7, #12
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr
 8002bcc:	e000e100 	.word	0xe000e100
 8002bd0:	e000ed00 	.word	0xe000ed00

08002bd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b089      	sub	sp, #36	; 0x24
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	60b9      	str	r1, [r7, #8]
 8002bde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f003 0307 	and.w	r3, r3, #7
 8002be6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	f1c3 0307 	rsb	r3, r3, #7
 8002bee:	2b04      	cmp	r3, #4
 8002bf0:	bf28      	it	cs
 8002bf2:	2304      	movcs	r3, #4
 8002bf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	3304      	adds	r3, #4
 8002bfa:	2b06      	cmp	r3, #6
 8002bfc:	d902      	bls.n	8002c04 <NVIC_EncodePriority+0x30>
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	3b03      	subs	r3, #3
 8002c02:	e000      	b.n	8002c06 <NVIC_EncodePriority+0x32>
 8002c04:	2300      	movs	r3, #0
 8002c06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c08:	f04f 32ff 	mov.w	r2, #4294967295
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c12:	43da      	mvns	r2, r3
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	401a      	ands	r2, r3
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c1c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	fa01 f303 	lsl.w	r3, r1, r3
 8002c26:	43d9      	mvns	r1, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c2c:	4313      	orrs	r3, r2
         );
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3724      	adds	r7, #36	; 0x24
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
	...

08002c3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	3b01      	subs	r3, #1
 8002c48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c4c:	d301      	bcc.n	8002c52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e00f      	b.n	8002c72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c52:	4a0a      	ldr	r2, [pc, #40]	; (8002c7c <SysTick_Config+0x40>)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	3b01      	subs	r3, #1
 8002c58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c5a:	210f      	movs	r1, #15
 8002c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c60:	f7ff ff8e 	bl	8002b80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c64:	4b05      	ldr	r3, [pc, #20]	; (8002c7c <SysTick_Config+0x40>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c6a:	4b04      	ldr	r3, [pc, #16]	; (8002c7c <SysTick_Config+0x40>)
 8002c6c:	2207      	movs	r2, #7
 8002c6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3708      	adds	r7, #8
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	e000e010 	.word	0xe000e010

08002c80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f7ff ff29 	bl	8002ae0 <__NVIC_SetPriorityGrouping>
}
 8002c8e:	bf00      	nop
 8002c90:	3708      	adds	r7, #8
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}

08002c96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c96:	b580      	push	{r7, lr}
 8002c98:	b086      	sub	sp, #24
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	60b9      	str	r1, [r7, #8]
 8002ca0:	607a      	str	r2, [r7, #4]
 8002ca2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ca8:	f7ff ff3e 	bl	8002b28 <__NVIC_GetPriorityGrouping>
 8002cac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	68b9      	ldr	r1, [r7, #8]
 8002cb2:	6978      	ldr	r0, [r7, #20]
 8002cb4:	f7ff ff8e 	bl	8002bd4 <NVIC_EncodePriority>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cbe:	4611      	mov	r1, r2
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7ff ff5d 	bl	8002b80 <__NVIC_SetPriority>
}
 8002cc6:	bf00      	nop
 8002cc8:	3718      	adds	r7, #24
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b082      	sub	sp, #8
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f7ff ff31 	bl	8002b44 <__NVIC_EnableIRQ>
}
 8002ce2:	bf00      	nop
 8002ce4:	3708      	adds	r7, #8
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}

08002cea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cea:	b580      	push	{r7, lr}
 8002cec:	b082      	sub	sp, #8
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f7ff ffa2 	bl	8002c3c <SysTick_Config>
 8002cf8:	4603      	mov	r3, r0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3708      	adds	r7, #8
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}

08002d02 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002d02:	b580      	push	{r7, lr}
 8002d04:	b082      	sub	sp, #8
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d101      	bne.n	8002d14 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e014      	b.n	8002d3e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	791b      	ldrb	r3, [r3, #4]
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d105      	bne.n	8002d2a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f7fd fcc1 	bl	80006ac <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2202      	movs	r2, #2
 8002d2e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3708      	adds	r7, #8
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}

08002d46 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002d46:	b480      	push	{r7}
 8002d48:	b083      	sub	sp, #12
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
 8002d4e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	795b      	ldrb	r3, [r3, #5]
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d101      	bne.n	8002d5c <HAL_DAC_Start+0x16>
 8002d58:	2302      	movs	r3, #2
 8002d5a:	e03b      	b.n	8002dd4 <HAL_DAC_Start+0x8e>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2202      	movs	r2, #2
 8002d66:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	6819      	ldr	r1, [r3, #0]
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	f003 0310 	and.w	r3, r3, #16
 8002d74:	2201      	movs	r2, #1
 8002d76:	409a      	lsls	r2, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	430a      	orrs	r2, r1
 8002d7e:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d10f      	bne.n	8002da6 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8002d90:	2b04      	cmp	r3, #4
 8002d92:	d118      	bne.n	8002dc6 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	685a      	ldr	r2, [r3, #4]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f042 0201 	orr.w	r2, r2, #1
 8002da2:	605a      	str	r2, [r3, #4]
 8002da4:	e00f      	b.n	8002dc6 <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002db0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002db4:	d107      	bne.n	8002dc6 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	685a      	ldr	r2, [r3, #4]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f042 0202 	orr.w	r2, r2, #2
 8002dc4:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2201      	movs	r2, #1
 8002dca:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002dd2:	2300      	movs	r3, #0
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b087      	sub	sp, #28
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	60b9      	str	r1, [r7, #8]
 8002dea:	607a      	str	r2, [r7, #4]
 8002dec:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8002dee:	2300      	movs	r3, #0
 8002df0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d105      	bne.n	8002e0a <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002dfe:	697a      	ldr	r2, [r7, #20]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4413      	add	r3, r2
 8002e04:	3308      	adds	r3, #8
 8002e06:	617b      	str	r3, [r7, #20]
 8002e08:	e004      	b.n	8002e14 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002e0a:	697a      	ldr	r2, [r7, #20]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	4413      	add	r3, r2
 8002e10:	3314      	adds	r3, #20
 8002e12:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	461a      	mov	r2, r3
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	371c      	adds	r7, #28
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr

08002e2a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002e2a:	b580      	push	{r7, lr}
 8002e2c:	b088      	sub	sp, #32
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	60f8      	str	r0, [r7, #12]
 8002e32:	60b9      	str	r1, [r7, #8]
 8002e34:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002e36:	2300      	movs	r3, #0
 8002e38:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	795b      	ldrb	r3, [r3, #5]
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d101      	bne.n	8002e46 <HAL_DAC_ConfigChannel+0x1c>
 8002e42:	2302      	movs	r3, #2
 8002e44:	e107      	b.n	8003056 <HAL_DAC_ConfigChannel+0x22c>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2202      	movs	r2, #2
 8002e50:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2b04      	cmp	r3, #4
 8002e58:	d174      	bne.n	8002f44 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002e5a:	f7fe fa0f 	bl	800127c <HAL_GetTick>
 8002e5e:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d134      	bne.n	8002ed0 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002e66:	e011      	b.n	8002e8c <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002e68:	f7fe fa08 	bl	800127c <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d90a      	bls.n	8002e8c <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	f043 0208 	orr.w	r2, r3, #8
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2203      	movs	r2, #3
 8002e86:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e0e4      	b.n	8003056 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d1e6      	bne.n	8002e68 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8002e9a:	2001      	movs	r0, #1
 8002e9c:	f7fe f9fa 	bl	8001294 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	68ba      	ldr	r2, [r7, #8]
 8002ea6:	6992      	ldr	r2, [r2, #24]
 8002ea8:	641a      	str	r2, [r3, #64]	; 0x40
 8002eaa:	e01e      	b.n	8002eea <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002eac:	f7fe f9e6 	bl	800127c <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d90a      	bls.n	8002ed0 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	f043 0208 	orr.w	r2, r3, #8
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2203      	movs	r2, #3
 8002eca:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e0c2      	b.n	8003056 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	dbe8      	blt.n	8002eac <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8002eda:	2001      	movs	r0, #1
 8002edc:	f7fe f9da 	bl	8001294 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	68ba      	ldr	r2, [r7, #8]
 8002ee6:	6992      	ldr	r2, [r2, #24]
 8002ee8:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f003 0310 	and.w	r3, r3, #16
 8002ef6:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002efa:	fa01 f303 	lsl.w	r3, r1, r3
 8002efe:	43db      	mvns	r3, r3
 8002f00:	ea02 0103 	and.w	r1, r2, r3
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	69da      	ldr	r2, [r3, #28]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f003 0310 	and.w	r3, r3, #16
 8002f0e:	409a      	lsls	r2, r3
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	430a      	orrs	r2, r1
 8002f16:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f003 0310 	and.w	r3, r3, #16
 8002f24:	21ff      	movs	r1, #255	; 0xff
 8002f26:	fa01 f303 	lsl.w	r3, r1, r3
 8002f2a:	43db      	mvns	r3, r3
 8002f2c:	ea02 0103 	and.w	r1, r2, r3
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	6a1a      	ldr	r2, [r3, #32]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f003 0310 	and.w	r3, r3, #16
 8002f3a:	409a      	lsls	r2, r3
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	430a      	orrs	r2, r1
 8002f42:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	691b      	ldr	r3, [r3, #16]
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d11d      	bne.n	8002f88 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f52:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f003 0310 	and.w	r3, r3, #16
 8002f5a:	221f      	movs	r2, #31
 8002f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f60:	43db      	mvns	r3, r3
 8002f62:	69ba      	ldr	r2, [r7, #24]
 8002f64:	4013      	ands	r3, r2
 8002f66:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	695b      	ldr	r3, [r3, #20]
 8002f6c:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f003 0310 	and.w	r3, r3, #16
 8002f74:	697a      	ldr	r2, [r7, #20]
 8002f76:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7a:	69ba      	ldr	r2, [r7, #24]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	69ba      	ldr	r2, [r7, #24]
 8002f86:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f8e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f003 0310 	and.w	r3, r3, #16
 8002f96:	2207      	movs	r2, #7
 8002f98:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9c:	43db      	mvns	r3, r3
 8002f9e:	69ba      	ldr	r2, [r7, #24]
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	431a      	orrs	r2, r3
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f003 0310 	and.w	r3, r3, #16
 8002fbc:	697a      	ldr	r2, [r7, #20]
 8002fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc2:	69ba      	ldr	r2, [r7, #24]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	6819      	ldr	r1, [r3, #0]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f003 0310 	and.w	r3, r3, #16
 8002fdc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe4:	43da      	mvns	r2, r3
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	400a      	ands	r2, r1
 8002fec:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f003 0310 	and.w	r3, r3, #16
 8002ffc:	f640 72fc 	movw	r2, #4092	; 0xffc
 8003000:	fa02 f303 	lsl.w	r3, r2, r3
 8003004:	43db      	mvns	r3, r3
 8003006:	69ba      	ldr	r2, [r7, #24]
 8003008:	4013      	ands	r3, r2
 800300a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f003 0310 	and.w	r3, r3, #16
 8003018:	697a      	ldr	r2, [r7, #20]
 800301a:	fa02 f303 	lsl.w	r3, r2, r3
 800301e:	69ba      	ldr	r2, [r7, #24]
 8003020:	4313      	orrs	r3, r2
 8003022:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	69ba      	ldr	r2, [r7, #24]
 800302a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	6819      	ldr	r1, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f003 0310 	and.w	r3, r3, #16
 8003038:	22c0      	movs	r2, #192	; 0xc0
 800303a:	fa02 f303 	lsl.w	r3, r2, r3
 800303e:	43da      	mvns	r2, r3
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	400a      	ands	r2, r1
 8003046:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2201      	movs	r2, #1
 800304c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2200      	movs	r2, #0
 8003052:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	3720      	adds	r7, #32
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
	...

08003060 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003060:	b480      	push	{r7}
 8003062:	b087      	sub	sp, #28
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800306a:	2300      	movs	r3, #0
 800306c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800306e:	e17f      	b.n	8003370 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	2101      	movs	r1, #1
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	fa01 f303 	lsl.w	r3, r1, r3
 800307c:	4013      	ands	r3, r2
 800307e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2b00      	cmp	r3, #0
 8003084:	f000 8171 	beq.w	800336a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	2b01      	cmp	r3, #1
 800308e:	d00b      	beq.n	80030a8 <HAL_GPIO_Init+0x48>
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	2b02      	cmp	r3, #2
 8003096:	d007      	beq.n	80030a8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800309c:	2b11      	cmp	r3, #17
 800309e:	d003      	beq.n	80030a8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	2b12      	cmp	r3, #18
 80030a6:	d130      	bne.n	800310a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	005b      	lsls	r3, r3, #1
 80030b2:	2203      	movs	r2, #3
 80030b4:	fa02 f303 	lsl.w	r3, r2, r3
 80030b8:	43db      	mvns	r3, r3
 80030ba:	693a      	ldr	r2, [r7, #16]
 80030bc:	4013      	ands	r3, r2
 80030be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	68da      	ldr	r2, [r3, #12]
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	005b      	lsls	r3, r3, #1
 80030c8:	fa02 f303 	lsl.w	r3, r2, r3
 80030cc:	693a      	ldr	r2, [r7, #16]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	693a      	ldr	r2, [r7, #16]
 80030d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80030de:	2201      	movs	r2, #1
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	fa02 f303 	lsl.w	r3, r2, r3
 80030e6:	43db      	mvns	r3, r3
 80030e8:	693a      	ldr	r2, [r7, #16]
 80030ea:	4013      	ands	r3, r2
 80030ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	091b      	lsrs	r3, r3, #4
 80030f4:	f003 0201 	and.w	r2, r3, #1
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	fa02 f303 	lsl.w	r3, r2, r3
 80030fe:	693a      	ldr	r2, [r7, #16]
 8003100:	4313      	orrs	r3, r2
 8003102:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	693a      	ldr	r2, [r7, #16]
 8003108:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f003 0303 	and.w	r3, r3, #3
 8003112:	2b03      	cmp	r3, #3
 8003114:	d118      	bne.n	8003148 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800311a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800311c:	2201      	movs	r2, #1
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	fa02 f303 	lsl.w	r3, r2, r3
 8003124:	43db      	mvns	r3, r3
 8003126:	693a      	ldr	r2, [r7, #16]
 8003128:	4013      	ands	r3, r2
 800312a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	08db      	lsrs	r3, r3, #3
 8003132:	f003 0201 	and.w	r2, r3, #1
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	fa02 f303 	lsl.w	r3, r2, r3
 800313c:	693a      	ldr	r2, [r7, #16]
 800313e:	4313      	orrs	r3, r2
 8003140:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	693a      	ldr	r2, [r7, #16]
 8003146:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	2203      	movs	r2, #3
 8003154:	fa02 f303 	lsl.w	r3, r2, r3
 8003158:	43db      	mvns	r3, r3
 800315a:	693a      	ldr	r2, [r7, #16]
 800315c:	4013      	ands	r3, r2
 800315e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	689a      	ldr	r2, [r3, #8]
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	005b      	lsls	r3, r3, #1
 8003168:	fa02 f303 	lsl.w	r3, r2, r3
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	4313      	orrs	r3, r2
 8003170:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	693a      	ldr	r2, [r7, #16]
 8003176:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	2b02      	cmp	r3, #2
 800317e:	d003      	beq.n	8003188 <HAL_GPIO_Init+0x128>
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	2b12      	cmp	r3, #18
 8003186:	d123      	bne.n	80031d0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	08da      	lsrs	r2, r3, #3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	3208      	adds	r2, #8
 8003190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003194:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	f003 0307 	and.w	r3, r3, #7
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	220f      	movs	r2, #15
 80031a0:	fa02 f303 	lsl.w	r3, r2, r3
 80031a4:	43db      	mvns	r3, r3
 80031a6:	693a      	ldr	r2, [r7, #16]
 80031a8:	4013      	ands	r3, r2
 80031aa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	691a      	ldr	r2, [r3, #16]
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	f003 0307 	and.w	r3, r3, #7
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	fa02 f303 	lsl.w	r3, r2, r3
 80031bc:	693a      	ldr	r2, [r7, #16]
 80031be:	4313      	orrs	r3, r2
 80031c0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	08da      	lsrs	r2, r3, #3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	3208      	adds	r2, #8
 80031ca:	6939      	ldr	r1, [r7, #16]
 80031cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	005b      	lsls	r3, r3, #1
 80031da:	2203      	movs	r2, #3
 80031dc:	fa02 f303 	lsl.w	r3, r2, r3
 80031e0:	43db      	mvns	r3, r3
 80031e2:	693a      	ldr	r2, [r7, #16]
 80031e4:	4013      	ands	r3, r2
 80031e6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f003 0203 	and.w	r2, r3, #3
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	005b      	lsls	r3, r3, #1
 80031f4:	fa02 f303 	lsl.w	r3, r2, r3
 80031f8:	693a      	ldr	r2, [r7, #16]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	693a      	ldr	r2, [r7, #16]
 8003202:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800320c:	2b00      	cmp	r3, #0
 800320e:	f000 80ac 	beq.w	800336a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003212:	4b5e      	ldr	r3, [pc, #376]	; (800338c <HAL_GPIO_Init+0x32c>)
 8003214:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003216:	4a5d      	ldr	r2, [pc, #372]	; (800338c <HAL_GPIO_Init+0x32c>)
 8003218:	f043 0301 	orr.w	r3, r3, #1
 800321c:	6613      	str	r3, [r2, #96]	; 0x60
 800321e:	4b5b      	ldr	r3, [pc, #364]	; (800338c <HAL_GPIO_Init+0x32c>)
 8003220:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003222:	f003 0301 	and.w	r3, r3, #1
 8003226:	60bb      	str	r3, [r7, #8]
 8003228:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800322a:	4a59      	ldr	r2, [pc, #356]	; (8003390 <HAL_GPIO_Init+0x330>)
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	089b      	lsrs	r3, r3, #2
 8003230:	3302      	adds	r3, #2
 8003232:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003236:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	f003 0303 	and.w	r3, r3, #3
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	220f      	movs	r2, #15
 8003242:	fa02 f303 	lsl.w	r3, r2, r3
 8003246:	43db      	mvns	r3, r3
 8003248:	693a      	ldr	r2, [r7, #16]
 800324a:	4013      	ands	r3, r2
 800324c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003254:	d025      	beq.n	80032a2 <HAL_GPIO_Init+0x242>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a4e      	ldr	r2, [pc, #312]	; (8003394 <HAL_GPIO_Init+0x334>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d01f      	beq.n	800329e <HAL_GPIO_Init+0x23e>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a4d      	ldr	r2, [pc, #308]	; (8003398 <HAL_GPIO_Init+0x338>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d019      	beq.n	800329a <HAL_GPIO_Init+0x23a>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a4c      	ldr	r2, [pc, #304]	; (800339c <HAL_GPIO_Init+0x33c>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d013      	beq.n	8003296 <HAL_GPIO_Init+0x236>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a4b      	ldr	r2, [pc, #300]	; (80033a0 <HAL_GPIO_Init+0x340>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d00d      	beq.n	8003292 <HAL_GPIO_Init+0x232>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a4a      	ldr	r2, [pc, #296]	; (80033a4 <HAL_GPIO_Init+0x344>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d007      	beq.n	800328e <HAL_GPIO_Init+0x22e>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a49      	ldr	r2, [pc, #292]	; (80033a8 <HAL_GPIO_Init+0x348>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d101      	bne.n	800328a <HAL_GPIO_Init+0x22a>
 8003286:	2306      	movs	r3, #6
 8003288:	e00c      	b.n	80032a4 <HAL_GPIO_Init+0x244>
 800328a:	2307      	movs	r3, #7
 800328c:	e00a      	b.n	80032a4 <HAL_GPIO_Init+0x244>
 800328e:	2305      	movs	r3, #5
 8003290:	e008      	b.n	80032a4 <HAL_GPIO_Init+0x244>
 8003292:	2304      	movs	r3, #4
 8003294:	e006      	b.n	80032a4 <HAL_GPIO_Init+0x244>
 8003296:	2303      	movs	r3, #3
 8003298:	e004      	b.n	80032a4 <HAL_GPIO_Init+0x244>
 800329a:	2302      	movs	r3, #2
 800329c:	e002      	b.n	80032a4 <HAL_GPIO_Init+0x244>
 800329e:	2301      	movs	r3, #1
 80032a0:	e000      	b.n	80032a4 <HAL_GPIO_Init+0x244>
 80032a2:	2300      	movs	r3, #0
 80032a4:	697a      	ldr	r2, [r7, #20]
 80032a6:	f002 0203 	and.w	r2, r2, #3
 80032aa:	0092      	lsls	r2, r2, #2
 80032ac:	4093      	lsls	r3, r2
 80032ae:	693a      	ldr	r2, [r7, #16]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80032b4:	4936      	ldr	r1, [pc, #216]	; (8003390 <HAL_GPIO_Init+0x330>)
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	089b      	lsrs	r3, r3, #2
 80032ba:	3302      	adds	r3, #2
 80032bc:	693a      	ldr	r2, [r7, #16]
 80032be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80032c2:	4b3a      	ldr	r3, [pc, #232]	; (80033ac <HAL_GPIO_Init+0x34c>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	43db      	mvns	r3, r3
 80032cc:	693a      	ldr	r2, [r7, #16]
 80032ce:	4013      	ands	r3, r2
 80032d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d003      	beq.n	80032e6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80032de:	693a      	ldr	r2, [r7, #16]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80032e6:	4a31      	ldr	r2, [pc, #196]	; (80033ac <HAL_GPIO_Init+0x34c>)
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80032ec:	4b2f      	ldr	r3, [pc, #188]	; (80033ac <HAL_GPIO_Init+0x34c>)
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	43db      	mvns	r3, r3
 80032f6:	693a      	ldr	r2, [r7, #16]
 80032f8:	4013      	ands	r3, r2
 80032fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003304:	2b00      	cmp	r3, #0
 8003306:	d003      	beq.n	8003310 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003308:	693a      	ldr	r2, [r7, #16]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	4313      	orrs	r3, r2
 800330e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003310:	4a26      	ldr	r2, [pc, #152]	; (80033ac <HAL_GPIO_Init+0x34c>)
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003316:	4b25      	ldr	r3, [pc, #148]	; (80033ac <HAL_GPIO_Init+0x34c>)
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	43db      	mvns	r3, r3
 8003320:	693a      	ldr	r2, [r7, #16]
 8003322:	4013      	ands	r3, r2
 8003324:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d003      	beq.n	800333a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003332:	693a      	ldr	r2, [r7, #16]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	4313      	orrs	r3, r2
 8003338:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800333a:	4a1c      	ldr	r2, [pc, #112]	; (80033ac <HAL_GPIO_Init+0x34c>)
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003340:	4b1a      	ldr	r3, [pc, #104]	; (80033ac <HAL_GPIO_Init+0x34c>)
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	43db      	mvns	r3, r3
 800334a:	693a      	ldr	r2, [r7, #16]
 800334c:	4013      	ands	r3, r2
 800334e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d003      	beq.n	8003364 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800335c:	693a      	ldr	r2, [r7, #16]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	4313      	orrs	r3, r2
 8003362:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003364:	4a11      	ldr	r2, [pc, #68]	; (80033ac <HAL_GPIO_Init+0x34c>)
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	3301      	adds	r3, #1
 800336e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	fa22 f303 	lsr.w	r3, r2, r3
 800337a:	2b00      	cmp	r3, #0
 800337c:	f47f ae78 	bne.w	8003070 <HAL_GPIO_Init+0x10>
  }
}
 8003380:	bf00      	nop
 8003382:	371c      	adds	r7, #28
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr
 800338c:	40021000 	.word	0x40021000
 8003390:	40010000 	.word	0x40010000
 8003394:	48000400 	.word	0x48000400
 8003398:	48000800 	.word	0x48000800
 800339c:	48000c00 	.word	0x48000c00
 80033a0:	48001000 	.word	0x48001000
 80033a4:	48001400 	.word	0x48001400
 80033a8:	48001800 	.word	0x48001800
 80033ac:	40010400 	.word	0x40010400

080033b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	460b      	mov	r3, r1
 80033ba:	807b      	strh	r3, [r7, #2]
 80033bc:	4613      	mov	r3, r2
 80033be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033c0:	787b      	ldrb	r3, [r7, #1]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d003      	beq.n	80033ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80033c6:	887a      	ldrh	r2, [r7, #2]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80033cc:	e002      	b.n	80033d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80033ce:	887a      	ldrh	r2, [r7, #2]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80033d4:	bf00      	nop
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80033e0:	b480      	push	{r7}
 80033e2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80033e4:	4b04      	ldr	r3, [pc, #16]	; (80033f8 <HAL_PWREx_GetVoltageRange+0x18>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop
 80033f8:	40007000 	.word	0x40007000

080033fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b085      	sub	sp, #20
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800340a:	d130      	bne.n	800346e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800340c:	4b23      	ldr	r3, [pc, #140]	; (800349c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003414:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003418:	d038      	beq.n	800348c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800341a:	4b20      	ldr	r3, [pc, #128]	; (800349c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003422:	4a1e      	ldr	r2, [pc, #120]	; (800349c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003424:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003428:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800342a:	4b1d      	ldr	r3, [pc, #116]	; (80034a0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2232      	movs	r2, #50	; 0x32
 8003430:	fb02 f303 	mul.w	r3, r2, r3
 8003434:	4a1b      	ldr	r2, [pc, #108]	; (80034a4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003436:	fba2 2303 	umull	r2, r3, r2, r3
 800343a:	0c9b      	lsrs	r3, r3, #18
 800343c:	3301      	adds	r3, #1
 800343e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003440:	e002      	b.n	8003448 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	3b01      	subs	r3, #1
 8003446:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003448:	4b14      	ldr	r3, [pc, #80]	; (800349c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800344a:	695b      	ldr	r3, [r3, #20]
 800344c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003450:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003454:	d102      	bne.n	800345c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d1f2      	bne.n	8003442 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800345c:	4b0f      	ldr	r3, [pc, #60]	; (800349c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800345e:	695b      	ldr	r3, [r3, #20]
 8003460:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003464:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003468:	d110      	bne.n	800348c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e00f      	b.n	800348e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800346e:	4b0b      	ldr	r3, [pc, #44]	; (800349c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003476:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800347a:	d007      	beq.n	800348c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800347c:	4b07      	ldr	r3, [pc, #28]	; (800349c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003484:	4a05      	ldr	r2, [pc, #20]	; (800349c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003486:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800348a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3714      	adds	r7, #20
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	40007000 	.word	0x40007000
 80034a0:	200000c8 	.word	0x200000c8
 80034a4:	431bde83 	.word	0x431bde83

080034a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b088      	sub	sp, #32
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d101      	bne.n	80034ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e3d4      	b.n	8003c64 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034ba:	4ba1      	ldr	r3, [pc, #644]	; (8003740 <HAL_RCC_OscConfig+0x298>)
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f003 030c 	and.w	r3, r3, #12
 80034c2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034c4:	4b9e      	ldr	r3, [pc, #632]	; (8003740 <HAL_RCC_OscConfig+0x298>)
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	f003 0303 	and.w	r3, r3, #3
 80034cc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0310 	and.w	r3, r3, #16
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	f000 80e4 	beq.w	80036a4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80034dc:	69bb      	ldr	r3, [r7, #24]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d007      	beq.n	80034f2 <HAL_RCC_OscConfig+0x4a>
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	2b0c      	cmp	r3, #12
 80034e6:	f040 808b 	bne.w	8003600 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	f040 8087 	bne.w	8003600 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80034f2:	4b93      	ldr	r3, [pc, #588]	; (8003740 <HAL_RCC_OscConfig+0x298>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0302 	and.w	r3, r3, #2
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d005      	beq.n	800350a <HAL_RCC_OscConfig+0x62>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	699b      	ldr	r3, [r3, #24]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d101      	bne.n	800350a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e3ac      	b.n	8003c64 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a1a      	ldr	r2, [r3, #32]
 800350e:	4b8c      	ldr	r3, [pc, #560]	; (8003740 <HAL_RCC_OscConfig+0x298>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0308 	and.w	r3, r3, #8
 8003516:	2b00      	cmp	r3, #0
 8003518:	d004      	beq.n	8003524 <HAL_RCC_OscConfig+0x7c>
 800351a:	4b89      	ldr	r3, [pc, #548]	; (8003740 <HAL_RCC_OscConfig+0x298>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003522:	e005      	b.n	8003530 <HAL_RCC_OscConfig+0x88>
 8003524:	4b86      	ldr	r3, [pc, #536]	; (8003740 <HAL_RCC_OscConfig+0x298>)
 8003526:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800352a:	091b      	lsrs	r3, r3, #4
 800352c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003530:	4293      	cmp	r3, r2
 8003532:	d223      	bcs.n	800357c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a1b      	ldr	r3, [r3, #32]
 8003538:	4618      	mov	r0, r3
 800353a:	f000 fd3f 	bl	8003fbc <RCC_SetFlashLatencyFromMSIRange>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d001      	beq.n	8003548 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e38d      	b.n	8003c64 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003548:	4b7d      	ldr	r3, [pc, #500]	; (8003740 <HAL_RCC_OscConfig+0x298>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a7c      	ldr	r2, [pc, #496]	; (8003740 <HAL_RCC_OscConfig+0x298>)
 800354e:	f043 0308 	orr.w	r3, r3, #8
 8003552:	6013      	str	r3, [r2, #0]
 8003554:	4b7a      	ldr	r3, [pc, #488]	; (8003740 <HAL_RCC_OscConfig+0x298>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a1b      	ldr	r3, [r3, #32]
 8003560:	4977      	ldr	r1, [pc, #476]	; (8003740 <HAL_RCC_OscConfig+0x298>)
 8003562:	4313      	orrs	r3, r2
 8003564:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003566:	4b76      	ldr	r3, [pc, #472]	; (8003740 <HAL_RCC_OscConfig+0x298>)
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	69db      	ldr	r3, [r3, #28]
 8003572:	021b      	lsls	r3, r3, #8
 8003574:	4972      	ldr	r1, [pc, #456]	; (8003740 <HAL_RCC_OscConfig+0x298>)
 8003576:	4313      	orrs	r3, r2
 8003578:	604b      	str	r3, [r1, #4]
 800357a:	e025      	b.n	80035c8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800357c:	4b70      	ldr	r3, [pc, #448]	; (8003740 <HAL_RCC_OscConfig+0x298>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a6f      	ldr	r2, [pc, #444]	; (8003740 <HAL_RCC_OscConfig+0x298>)
 8003582:	f043 0308 	orr.w	r3, r3, #8
 8003586:	6013      	str	r3, [r2, #0]
 8003588:	4b6d      	ldr	r3, [pc, #436]	; (8003740 <HAL_RCC_OscConfig+0x298>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a1b      	ldr	r3, [r3, #32]
 8003594:	496a      	ldr	r1, [pc, #424]	; (8003740 <HAL_RCC_OscConfig+0x298>)
 8003596:	4313      	orrs	r3, r2
 8003598:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800359a:	4b69      	ldr	r3, [pc, #420]	; (8003740 <HAL_RCC_OscConfig+0x298>)
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	69db      	ldr	r3, [r3, #28]
 80035a6:	021b      	lsls	r3, r3, #8
 80035a8:	4965      	ldr	r1, [pc, #404]	; (8003740 <HAL_RCC_OscConfig+0x298>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d109      	bne.n	80035c8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a1b      	ldr	r3, [r3, #32]
 80035b8:	4618      	mov	r0, r3
 80035ba:	f000 fcff 	bl	8003fbc <RCC_SetFlashLatencyFromMSIRange>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d001      	beq.n	80035c8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e34d      	b.n	8003c64 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80035c8:	f000 fc36 	bl	8003e38 <HAL_RCC_GetSysClockFreq>
 80035cc:	4601      	mov	r1, r0
 80035ce:	4b5c      	ldr	r3, [pc, #368]	; (8003740 <HAL_RCC_OscConfig+0x298>)
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	091b      	lsrs	r3, r3, #4
 80035d4:	f003 030f 	and.w	r3, r3, #15
 80035d8:	4a5a      	ldr	r2, [pc, #360]	; (8003744 <HAL_RCC_OscConfig+0x29c>)
 80035da:	5cd3      	ldrb	r3, [r2, r3]
 80035dc:	f003 031f 	and.w	r3, r3, #31
 80035e0:	fa21 f303 	lsr.w	r3, r1, r3
 80035e4:	4a58      	ldr	r2, [pc, #352]	; (8003748 <HAL_RCC_OscConfig+0x2a0>)
 80035e6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80035e8:	4b58      	ldr	r3, [pc, #352]	; (800374c <HAL_RCC_OscConfig+0x2a4>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4618      	mov	r0, r3
 80035ee:	f7fd fdf5 	bl	80011dc <HAL_InitTick>
 80035f2:	4603      	mov	r3, r0
 80035f4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80035f6:	7bfb      	ldrb	r3, [r7, #15]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d052      	beq.n	80036a2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80035fc:	7bfb      	ldrb	r3, [r7, #15]
 80035fe:	e331      	b.n	8003c64 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	699b      	ldr	r3, [r3, #24]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d032      	beq.n	800366e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003608:	4b4d      	ldr	r3, [pc, #308]	; (8003740 <HAL_RCC_OscConfig+0x298>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a4c      	ldr	r2, [pc, #304]	; (8003740 <HAL_RCC_OscConfig+0x298>)
 800360e:	f043 0301 	orr.w	r3, r3, #1
 8003612:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003614:	f7fd fe32 	bl	800127c <HAL_GetTick>
 8003618:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800361a:	e008      	b.n	800362e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800361c:	f7fd fe2e 	bl	800127c <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	2b02      	cmp	r3, #2
 8003628:	d901      	bls.n	800362e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e31a      	b.n	8003c64 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800362e:	4b44      	ldr	r3, [pc, #272]	; (8003740 <HAL_RCC_OscConfig+0x298>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	2b00      	cmp	r3, #0
 8003638:	d0f0      	beq.n	800361c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800363a:	4b41      	ldr	r3, [pc, #260]	; (8003740 <HAL_RCC_OscConfig+0x298>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a40      	ldr	r2, [pc, #256]	; (8003740 <HAL_RCC_OscConfig+0x298>)
 8003640:	f043 0308 	orr.w	r3, r3, #8
 8003644:	6013      	str	r3, [r2, #0]
 8003646:	4b3e      	ldr	r3, [pc, #248]	; (8003740 <HAL_RCC_OscConfig+0x298>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a1b      	ldr	r3, [r3, #32]
 8003652:	493b      	ldr	r1, [pc, #236]	; (8003740 <HAL_RCC_OscConfig+0x298>)
 8003654:	4313      	orrs	r3, r2
 8003656:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003658:	4b39      	ldr	r3, [pc, #228]	; (8003740 <HAL_RCC_OscConfig+0x298>)
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	69db      	ldr	r3, [r3, #28]
 8003664:	021b      	lsls	r3, r3, #8
 8003666:	4936      	ldr	r1, [pc, #216]	; (8003740 <HAL_RCC_OscConfig+0x298>)
 8003668:	4313      	orrs	r3, r2
 800366a:	604b      	str	r3, [r1, #4]
 800366c:	e01a      	b.n	80036a4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800366e:	4b34      	ldr	r3, [pc, #208]	; (8003740 <HAL_RCC_OscConfig+0x298>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a33      	ldr	r2, [pc, #204]	; (8003740 <HAL_RCC_OscConfig+0x298>)
 8003674:	f023 0301 	bic.w	r3, r3, #1
 8003678:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800367a:	f7fd fdff 	bl	800127c <HAL_GetTick>
 800367e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003680:	e008      	b.n	8003694 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003682:	f7fd fdfb 	bl	800127c <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	2b02      	cmp	r3, #2
 800368e:	d901      	bls.n	8003694 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003690:	2303      	movs	r3, #3
 8003692:	e2e7      	b.n	8003c64 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003694:	4b2a      	ldr	r3, [pc, #168]	; (8003740 <HAL_RCC_OscConfig+0x298>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0302 	and.w	r3, r3, #2
 800369c:	2b00      	cmp	r3, #0
 800369e:	d1f0      	bne.n	8003682 <HAL_RCC_OscConfig+0x1da>
 80036a0:	e000      	b.n	80036a4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80036a2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0301 	and.w	r3, r3, #1
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d074      	beq.n	800379a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	2b08      	cmp	r3, #8
 80036b4:	d005      	beq.n	80036c2 <HAL_RCC_OscConfig+0x21a>
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	2b0c      	cmp	r3, #12
 80036ba:	d10e      	bne.n	80036da <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	2b03      	cmp	r3, #3
 80036c0:	d10b      	bne.n	80036da <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036c2:	4b1f      	ldr	r3, [pc, #124]	; (8003740 <HAL_RCC_OscConfig+0x298>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d064      	beq.n	8003798 <HAL_RCC_OscConfig+0x2f0>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d160      	bne.n	8003798 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e2c4      	b.n	8003c64 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036e2:	d106      	bne.n	80036f2 <HAL_RCC_OscConfig+0x24a>
 80036e4:	4b16      	ldr	r3, [pc, #88]	; (8003740 <HAL_RCC_OscConfig+0x298>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a15      	ldr	r2, [pc, #84]	; (8003740 <HAL_RCC_OscConfig+0x298>)
 80036ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036ee:	6013      	str	r3, [r2, #0]
 80036f0:	e01d      	b.n	800372e <HAL_RCC_OscConfig+0x286>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036fa:	d10c      	bne.n	8003716 <HAL_RCC_OscConfig+0x26e>
 80036fc:	4b10      	ldr	r3, [pc, #64]	; (8003740 <HAL_RCC_OscConfig+0x298>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a0f      	ldr	r2, [pc, #60]	; (8003740 <HAL_RCC_OscConfig+0x298>)
 8003702:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003706:	6013      	str	r3, [r2, #0]
 8003708:	4b0d      	ldr	r3, [pc, #52]	; (8003740 <HAL_RCC_OscConfig+0x298>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a0c      	ldr	r2, [pc, #48]	; (8003740 <HAL_RCC_OscConfig+0x298>)
 800370e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003712:	6013      	str	r3, [r2, #0]
 8003714:	e00b      	b.n	800372e <HAL_RCC_OscConfig+0x286>
 8003716:	4b0a      	ldr	r3, [pc, #40]	; (8003740 <HAL_RCC_OscConfig+0x298>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a09      	ldr	r2, [pc, #36]	; (8003740 <HAL_RCC_OscConfig+0x298>)
 800371c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003720:	6013      	str	r3, [r2, #0]
 8003722:	4b07      	ldr	r3, [pc, #28]	; (8003740 <HAL_RCC_OscConfig+0x298>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a06      	ldr	r2, [pc, #24]	; (8003740 <HAL_RCC_OscConfig+0x298>)
 8003728:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800372c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d01c      	beq.n	8003770 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003736:	f7fd fda1 	bl	800127c <HAL_GetTick>
 800373a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800373c:	e011      	b.n	8003762 <HAL_RCC_OscConfig+0x2ba>
 800373e:	bf00      	nop
 8003740:	40021000 	.word	0x40021000
 8003744:	08005a30 	.word	0x08005a30
 8003748:	200000c8 	.word	0x200000c8
 800374c:	200000cc 	.word	0x200000cc
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003750:	f7fd fd94 	bl	800127c <HAL_GetTick>
 8003754:	4602      	mov	r2, r0
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	2b64      	cmp	r3, #100	; 0x64
 800375c:	d901      	bls.n	8003762 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e280      	b.n	8003c64 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003762:	4baf      	ldr	r3, [pc, #700]	; (8003a20 <HAL_RCC_OscConfig+0x578>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d0f0      	beq.n	8003750 <HAL_RCC_OscConfig+0x2a8>
 800376e:	e014      	b.n	800379a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003770:	f7fd fd84 	bl	800127c <HAL_GetTick>
 8003774:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003776:	e008      	b.n	800378a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003778:	f7fd fd80 	bl	800127c <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	2b64      	cmp	r3, #100	; 0x64
 8003784:	d901      	bls.n	800378a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e26c      	b.n	8003c64 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800378a:	4ba5      	ldr	r3, [pc, #660]	; (8003a20 <HAL_RCC_OscConfig+0x578>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d1f0      	bne.n	8003778 <HAL_RCC_OscConfig+0x2d0>
 8003796:	e000      	b.n	800379a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003798:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0302 	and.w	r3, r3, #2
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d060      	beq.n	8003868 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	2b04      	cmp	r3, #4
 80037aa:	d005      	beq.n	80037b8 <HAL_RCC_OscConfig+0x310>
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	2b0c      	cmp	r3, #12
 80037b0:	d119      	bne.n	80037e6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d116      	bne.n	80037e6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037b8:	4b99      	ldr	r3, [pc, #612]	; (8003a20 <HAL_RCC_OscConfig+0x578>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d005      	beq.n	80037d0 <HAL_RCC_OscConfig+0x328>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d101      	bne.n	80037d0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e249      	b.n	8003c64 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037d0:	4b93      	ldr	r3, [pc, #588]	; (8003a20 <HAL_RCC_OscConfig+0x578>)
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	691b      	ldr	r3, [r3, #16]
 80037dc:	061b      	lsls	r3, r3, #24
 80037de:	4990      	ldr	r1, [pc, #576]	; (8003a20 <HAL_RCC_OscConfig+0x578>)
 80037e0:	4313      	orrs	r3, r2
 80037e2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037e4:	e040      	b.n	8003868 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d023      	beq.n	8003836 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037ee:	4b8c      	ldr	r3, [pc, #560]	; (8003a20 <HAL_RCC_OscConfig+0x578>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a8b      	ldr	r2, [pc, #556]	; (8003a20 <HAL_RCC_OscConfig+0x578>)
 80037f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037fa:	f7fd fd3f 	bl	800127c <HAL_GetTick>
 80037fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003800:	e008      	b.n	8003814 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003802:	f7fd fd3b 	bl	800127c <HAL_GetTick>
 8003806:	4602      	mov	r2, r0
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	2b02      	cmp	r3, #2
 800380e:	d901      	bls.n	8003814 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	e227      	b.n	8003c64 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003814:	4b82      	ldr	r3, [pc, #520]	; (8003a20 <HAL_RCC_OscConfig+0x578>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800381c:	2b00      	cmp	r3, #0
 800381e:	d0f0      	beq.n	8003802 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003820:	4b7f      	ldr	r3, [pc, #508]	; (8003a20 <HAL_RCC_OscConfig+0x578>)
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	691b      	ldr	r3, [r3, #16]
 800382c:	061b      	lsls	r3, r3, #24
 800382e:	497c      	ldr	r1, [pc, #496]	; (8003a20 <HAL_RCC_OscConfig+0x578>)
 8003830:	4313      	orrs	r3, r2
 8003832:	604b      	str	r3, [r1, #4]
 8003834:	e018      	b.n	8003868 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003836:	4b7a      	ldr	r3, [pc, #488]	; (8003a20 <HAL_RCC_OscConfig+0x578>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a79      	ldr	r2, [pc, #484]	; (8003a20 <HAL_RCC_OscConfig+0x578>)
 800383c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003840:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003842:	f7fd fd1b 	bl	800127c <HAL_GetTick>
 8003846:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003848:	e008      	b.n	800385c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800384a:	f7fd fd17 	bl	800127c <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	2b02      	cmp	r3, #2
 8003856:	d901      	bls.n	800385c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	e203      	b.n	8003c64 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800385c:	4b70      	ldr	r3, [pc, #448]	; (8003a20 <HAL_RCC_OscConfig+0x578>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003864:	2b00      	cmp	r3, #0
 8003866:	d1f0      	bne.n	800384a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0308 	and.w	r3, r3, #8
 8003870:	2b00      	cmp	r3, #0
 8003872:	d03c      	beq.n	80038ee <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	695b      	ldr	r3, [r3, #20]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d01c      	beq.n	80038b6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800387c:	4b68      	ldr	r3, [pc, #416]	; (8003a20 <HAL_RCC_OscConfig+0x578>)
 800387e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003882:	4a67      	ldr	r2, [pc, #412]	; (8003a20 <HAL_RCC_OscConfig+0x578>)
 8003884:	f043 0301 	orr.w	r3, r3, #1
 8003888:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800388c:	f7fd fcf6 	bl	800127c <HAL_GetTick>
 8003890:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003892:	e008      	b.n	80038a6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003894:	f7fd fcf2 	bl	800127c <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d901      	bls.n	80038a6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e1de      	b.n	8003c64 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80038a6:	4b5e      	ldr	r3, [pc, #376]	; (8003a20 <HAL_RCC_OscConfig+0x578>)
 80038a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038ac:	f003 0302 	and.w	r3, r3, #2
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d0ef      	beq.n	8003894 <HAL_RCC_OscConfig+0x3ec>
 80038b4:	e01b      	b.n	80038ee <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038b6:	4b5a      	ldr	r3, [pc, #360]	; (8003a20 <HAL_RCC_OscConfig+0x578>)
 80038b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038bc:	4a58      	ldr	r2, [pc, #352]	; (8003a20 <HAL_RCC_OscConfig+0x578>)
 80038be:	f023 0301 	bic.w	r3, r3, #1
 80038c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038c6:	f7fd fcd9 	bl	800127c <HAL_GetTick>
 80038ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80038cc:	e008      	b.n	80038e0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038ce:	f7fd fcd5 	bl	800127c <HAL_GetTick>
 80038d2:	4602      	mov	r2, r0
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d901      	bls.n	80038e0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	e1c1      	b.n	8003c64 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80038e0:	4b4f      	ldr	r3, [pc, #316]	; (8003a20 <HAL_RCC_OscConfig+0x578>)
 80038e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038e6:	f003 0302 	and.w	r3, r3, #2
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d1ef      	bne.n	80038ce <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0304 	and.w	r3, r3, #4
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	f000 80a6 	beq.w	8003a48 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038fc:	2300      	movs	r3, #0
 80038fe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003900:	4b47      	ldr	r3, [pc, #284]	; (8003a20 <HAL_RCC_OscConfig+0x578>)
 8003902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003904:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d10d      	bne.n	8003928 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800390c:	4b44      	ldr	r3, [pc, #272]	; (8003a20 <HAL_RCC_OscConfig+0x578>)
 800390e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003910:	4a43      	ldr	r2, [pc, #268]	; (8003a20 <HAL_RCC_OscConfig+0x578>)
 8003912:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003916:	6593      	str	r3, [r2, #88]	; 0x58
 8003918:	4b41      	ldr	r3, [pc, #260]	; (8003a20 <HAL_RCC_OscConfig+0x578>)
 800391a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800391c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003920:	60bb      	str	r3, [r7, #8]
 8003922:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003924:	2301      	movs	r3, #1
 8003926:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003928:	4b3e      	ldr	r3, [pc, #248]	; (8003a24 <HAL_RCC_OscConfig+0x57c>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003930:	2b00      	cmp	r3, #0
 8003932:	d118      	bne.n	8003966 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003934:	4b3b      	ldr	r3, [pc, #236]	; (8003a24 <HAL_RCC_OscConfig+0x57c>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a3a      	ldr	r2, [pc, #232]	; (8003a24 <HAL_RCC_OscConfig+0x57c>)
 800393a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800393e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003940:	f7fd fc9c 	bl	800127c <HAL_GetTick>
 8003944:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003946:	e008      	b.n	800395a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003948:	f7fd fc98 	bl	800127c <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	2b02      	cmp	r3, #2
 8003954:	d901      	bls.n	800395a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e184      	b.n	8003c64 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800395a:	4b32      	ldr	r3, [pc, #200]	; (8003a24 <HAL_RCC_OscConfig+0x57c>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003962:	2b00      	cmp	r3, #0
 8003964:	d0f0      	beq.n	8003948 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	2b01      	cmp	r3, #1
 800396c:	d108      	bne.n	8003980 <HAL_RCC_OscConfig+0x4d8>
 800396e:	4b2c      	ldr	r3, [pc, #176]	; (8003a20 <HAL_RCC_OscConfig+0x578>)
 8003970:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003974:	4a2a      	ldr	r2, [pc, #168]	; (8003a20 <HAL_RCC_OscConfig+0x578>)
 8003976:	f043 0301 	orr.w	r3, r3, #1
 800397a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800397e:	e024      	b.n	80039ca <HAL_RCC_OscConfig+0x522>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	2b05      	cmp	r3, #5
 8003986:	d110      	bne.n	80039aa <HAL_RCC_OscConfig+0x502>
 8003988:	4b25      	ldr	r3, [pc, #148]	; (8003a20 <HAL_RCC_OscConfig+0x578>)
 800398a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800398e:	4a24      	ldr	r2, [pc, #144]	; (8003a20 <HAL_RCC_OscConfig+0x578>)
 8003990:	f043 0304 	orr.w	r3, r3, #4
 8003994:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003998:	4b21      	ldr	r3, [pc, #132]	; (8003a20 <HAL_RCC_OscConfig+0x578>)
 800399a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800399e:	4a20      	ldr	r2, [pc, #128]	; (8003a20 <HAL_RCC_OscConfig+0x578>)
 80039a0:	f043 0301 	orr.w	r3, r3, #1
 80039a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80039a8:	e00f      	b.n	80039ca <HAL_RCC_OscConfig+0x522>
 80039aa:	4b1d      	ldr	r3, [pc, #116]	; (8003a20 <HAL_RCC_OscConfig+0x578>)
 80039ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039b0:	4a1b      	ldr	r2, [pc, #108]	; (8003a20 <HAL_RCC_OscConfig+0x578>)
 80039b2:	f023 0301 	bic.w	r3, r3, #1
 80039b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80039ba:	4b19      	ldr	r3, [pc, #100]	; (8003a20 <HAL_RCC_OscConfig+0x578>)
 80039bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039c0:	4a17      	ldr	r2, [pc, #92]	; (8003a20 <HAL_RCC_OscConfig+0x578>)
 80039c2:	f023 0304 	bic.w	r3, r3, #4
 80039c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d016      	beq.n	8003a00 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039d2:	f7fd fc53 	bl	800127c <HAL_GetTick>
 80039d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039d8:	e00a      	b.n	80039f0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039da:	f7fd fc4f 	bl	800127c <HAL_GetTick>
 80039de:	4602      	mov	r2, r0
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d901      	bls.n	80039f0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	e139      	b.n	8003c64 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039f0:	4b0b      	ldr	r3, [pc, #44]	; (8003a20 <HAL_RCC_OscConfig+0x578>)
 80039f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039f6:	f003 0302 	and.w	r3, r3, #2
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d0ed      	beq.n	80039da <HAL_RCC_OscConfig+0x532>
 80039fe:	e01a      	b.n	8003a36 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a00:	f7fd fc3c 	bl	800127c <HAL_GetTick>
 8003a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a06:	e00f      	b.n	8003a28 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a08:	f7fd fc38 	bl	800127c <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d906      	bls.n	8003a28 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e122      	b.n	8003c64 <HAL_RCC_OscConfig+0x7bc>
 8003a1e:	bf00      	nop
 8003a20:	40021000 	.word	0x40021000
 8003a24:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a28:	4b90      	ldr	r3, [pc, #576]	; (8003c6c <HAL_RCC_OscConfig+0x7c4>)
 8003a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a2e:	f003 0302 	and.w	r3, r3, #2
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d1e8      	bne.n	8003a08 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a36:	7ffb      	ldrb	r3, [r7, #31]
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d105      	bne.n	8003a48 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a3c:	4b8b      	ldr	r3, [pc, #556]	; (8003c6c <HAL_RCC_OscConfig+0x7c4>)
 8003a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a40:	4a8a      	ldr	r2, [pc, #552]	; (8003c6c <HAL_RCC_OscConfig+0x7c4>)
 8003a42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a46:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	f000 8108 	beq.w	8003c62 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	f040 80d0 	bne.w	8003bfc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003a5c:	4b83      	ldr	r3, [pc, #524]	; (8003c6c <HAL_RCC_OscConfig+0x7c4>)
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	f003 0203 	and.w	r2, r3, #3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d130      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d127      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a8c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d11f      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a9c:	2a07      	cmp	r2, #7
 8003a9e:	bf14      	ite	ne
 8003aa0:	2201      	movne	r2, #1
 8003aa2:	2200      	moveq	r2, #0
 8003aa4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d113      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ab4:	085b      	lsrs	r3, r3, #1
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d109      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac8:	085b      	lsrs	r3, r3, #1
 8003aca:	3b01      	subs	r3, #1
 8003acc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d06e      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	2b0c      	cmp	r3, #12
 8003ad6:	d069      	beq.n	8003bac <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003ad8:	4b64      	ldr	r3, [pc, #400]	; (8003c6c <HAL_RCC_OscConfig+0x7c4>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d105      	bne.n	8003af0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003ae4:	4b61      	ldr	r3, [pc, #388]	; (8003c6c <HAL_RCC_OscConfig+0x7c4>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d001      	beq.n	8003af4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e0b7      	b.n	8003c64 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003af4:	4b5d      	ldr	r3, [pc, #372]	; (8003c6c <HAL_RCC_OscConfig+0x7c4>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a5c      	ldr	r2, [pc, #368]	; (8003c6c <HAL_RCC_OscConfig+0x7c4>)
 8003afa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003afe:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b00:	f7fd fbbc 	bl	800127c <HAL_GetTick>
 8003b04:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b06:	e008      	b.n	8003b1a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b08:	f7fd fbb8 	bl	800127c <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d901      	bls.n	8003b1a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e0a4      	b.n	8003c64 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b1a:	4b54      	ldr	r3, [pc, #336]	; (8003c6c <HAL_RCC_OscConfig+0x7c4>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d1f0      	bne.n	8003b08 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b26:	4b51      	ldr	r3, [pc, #324]	; (8003c6c <HAL_RCC_OscConfig+0x7c4>)
 8003b28:	68da      	ldr	r2, [r3, #12]
 8003b2a:	4b51      	ldr	r3, [pc, #324]	; (8003c70 <HAL_RCC_OscConfig+0x7c8>)
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003b36:	3a01      	subs	r2, #1
 8003b38:	0112      	lsls	r2, r2, #4
 8003b3a:	4311      	orrs	r1, r2
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003b40:	0212      	lsls	r2, r2, #8
 8003b42:	4311      	orrs	r1, r2
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003b48:	0852      	lsrs	r2, r2, #1
 8003b4a:	3a01      	subs	r2, #1
 8003b4c:	0552      	lsls	r2, r2, #21
 8003b4e:	4311      	orrs	r1, r2
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003b54:	0852      	lsrs	r2, r2, #1
 8003b56:	3a01      	subs	r2, #1
 8003b58:	0652      	lsls	r2, r2, #25
 8003b5a:	4311      	orrs	r1, r2
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b60:	0912      	lsrs	r2, r2, #4
 8003b62:	0452      	lsls	r2, r2, #17
 8003b64:	430a      	orrs	r2, r1
 8003b66:	4941      	ldr	r1, [pc, #260]	; (8003c6c <HAL_RCC_OscConfig+0x7c4>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003b6c:	4b3f      	ldr	r3, [pc, #252]	; (8003c6c <HAL_RCC_OscConfig+0x7c4>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a3e      	ldr	r2, [pc, #248]	; (8003c6c <HAL_RCC_OscConfig+0x7c4>)
 8003b72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b76:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b78:	4b3c      	ldr	r3, [pc, #240]	; (8003c6c <HAL_RCC_OscConfig+0x7c4>)
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	4a3b      	ldr	r2, [pc, #236]	; (8003c6c <HAL_RCC_OscConfig+0x7c4>)
 8003b7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b82:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b84:	f7fd fb7a 	bl	800127c <HAL_GetTick>
 8003b88:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b8a:	e008      	b.n	8003b9e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b8c:	f7fd fb76 	bl	800127c <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d901      	bls.n	8003b9e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e062      	b.n	8003c64 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b9e:	4b33      	ldr	r3, [pc, #204]	; (8003c6c <HAL_RCC_OscConfig+0x7c4>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d0f0      	beq.n	8003b8c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003baa:	e05a      	b.n	8003c62 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e059      	b.n	8003c64 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bb0:	4b2e      	ldr	r3, [pc, #184]	; (8003c6c <HAL_RCC_OscConfig+0x7c4>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d152      	bne.n	8003c62 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003bbc:	4b2b      	ldr	r3, [pc, #172]	; (8003c6c <HAL_RCC_OscConfig+0x7c4>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a2a      	ldr	r2, [pc, #168]	; (8003c6c <HAL_RCC_OscConfig+0x7c4>)
 8003bc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bc6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003bc8:	4b28      	ldr	r3, [pc, #160]	; (8003c6c <HAL_RCC_OscConfig+0x7c4>)
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	4a27      	ldr	r2, [pc, #156]	; (8003c6c <HAL_RCC_OscConfig+0x7c4>)
 8003bce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bd2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003bd4:	f7fd fb52 	bl	800127c <HAL_GetTick>
 8003bd8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bda:	e008      	b.n	8003bee <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bdc:	f7fd fb4e 	bl	800127c <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d901      	bls.n	8003bee <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e03a      	b.n	8003c64 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bee:	4b1f      	ldr	r3, [pc, #124]	; (8003c6c <HAL_RCC_OscConfig+0x7c4>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d0f0      	beq.n	8003bdc <HAL_RCC_OscConfig+0x734>
 8003bfa:	e032      	b.n	8003c62 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003bfc:	69bb      	ldr	r3, [r7, #24]
 8003bfe:	2b0c      	cmp	r3, #12
 8003c00:	d02d      	beq.n	8003c5e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c02:	4b1a      	ldr	r3, [pc, #104]	; (8003c6c <HAL_RCC_OscConfig+0x7c4>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a19      	ldr	r2, [pc, #100]	; (8003c6c <HAL_RCC_OscConfig+0x7c4>)
 8003c08:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c0c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003c0e:	4b17      	ldr	r3, [pc, #92]	; (8003c6c <HAL_RCC_OscConfig+0x7c4>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d105      	bne.n	8003c26 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003c1a:	4b14      	ldr	r3, [pc, #80]	; (8003c6c <HAL_RCC_OscConfig+0x7c4>)
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	4a13      	ldr	r2, [pc, #76]	; (8003c6c <HAL_RCC_OscConfig+0x7c4>)
 8003c20:	f023 0303 	bic.w	r3, r3, #3
 8003c24:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003c26:	4b11      	ldr	r3, [pc, #68]	; (8003c6c <HAL_RCC_OscConfig+0x7c4>)
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	4a10      	ldr	r2, [pc, #64]	; (8003c6c <HAL_RCC_OscConfig+0x7c4>)
 8003c2c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003c30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c34:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c36:	f7fd fb21 	bl	800127c <HAL_GetTick>
 8003c3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c3c:	e008      	b.n	8003c50 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c3e:	f7fd fb1d 	bl	800127c <HAL_GetTick>
 8003c42:	4602      	mov	r2, r0
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	d901      	bls.n	8003c50 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	e009      	b.n	8003c64 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c50:	4b06      	ldr	r3, [pc, #24]	; (8003c6c <HAL_RCC_OscConfig+0x7c4>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d1f0      	bne.n	8003c3e <HAL_RCC_OscConfig+0x796>
 8003c5c:	e001      	b.n	8003c62 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e000      	b.n	8003c64 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003c62:	2300      	movs	r3, #0
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3720      	adds	r7, #32
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	40021000 	.word	0x40021000
 8003c70:	f99d808c 	.word	0xf99d808c

08003c74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d101      	bne.n	8003c88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e0c8      	b.n	8003e1a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c88:	4b66      	ldr	r3, [pc, #408]	; (8003e24 <HAL_RCC_ClockConfig+0x1b0>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0307 	and.w	r3, r3, #7
 8003c90:	683a      	ldr	r2, [r7, #0]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d910      	bls.n	8003cb8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c96:	4b63      	ldr	r3, [pc, #396]	; (8003e24 <HAL_RCC_ClockConfig+0x1b0>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f023 0207 	bic.w	r2, r3, #7
 8003c9e:	4961      	ldr	r1, [pc, #388]	; (8003e24 <HAL_RCC_ClockConfig+0x1b0>)
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ca6:	4b5f      	ldr	r3, [pc, #380]	; (8003e24 <HAL_RCC_ClockConfig+0x1b0>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0307 	and.w	r3, r3, #7
 8003cae:	683a      	ldr	r2, [r7, #0]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d001      	beq.n	8003cb8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e0b0      	b.n	8003e1a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0301 	and.w	r3, r3, #1
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d04c      	beq.n	8003d5e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	2b03      	cmp	r3, #3
 8003cca:	d107      	bne.n	8003cdc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ccc:	4b56      	ldr	r3, [pc, #344]	; (8003e28 <HAL_RCC_ClockConfig+0x1b4>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d121      	bne.n	8003d1c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e09e      	b.n	8003e1a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	d107      	bne.n	8003cf4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ce4:	4b50      	ldr	r3, [pc, #320]	; (8003e28 <HAL_RCC_ClockConfig+0x1b4>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d115      	bne.n	8003d1c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e092      	b.n	8003e1a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d107      	bne.n	8003d0c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003cfc:	4b4a      	ldr	r3, [pc, #296]	; (8003e28 <HAL_RCC_ClockConfig+0x1b4>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0302 	and.w	r3, r3, #2
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d109      	bne.n	8003d1c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e086      	b.n	8003e1a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d0c:	4b46      	ldr	r3, [pc, #280]	; (8003e28 <HAL_RCC_ClockConfig+0x1b4>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d101      	bne.n	8003d1c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e07e      	b.n	8003e1a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d1c:	4b42      	ldr	r3, [pc, #264]	; (8003e28 <HAL_RCC_ClockConfig+0x1b4>)
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f023 0203 	bic.w	r2, r3, #3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	493f      	ldr	r1, [pc, #252]	; (8003e28 <HAL_RCC_ClockConfig+0x1b4>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d2e:	f7fd faa5 	bl	800127c <HAL_GetTick>
 8003d32:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d34:	e00a      	b.n	8003d4c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d36:	f7fd faa1 	bl	800127c <HAL_GetTick>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d901      	bls.n	8003d4c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003d48:	2303      	movs	r3, #3
 8003d4a:	e066      	b.n	8003e1a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d4c:	4b36      	ldr	r3, [pc, #216]	; (8003e28 <HAL_RCC_ClockConfig+0x1b4>)
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	f003 020c 	and.w	r2, r3, #12
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d1eb      	bne.n	8003d36 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0302 	and.w	r3, r3, #2
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d008      	beq.n	8003d7c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d6a:	4b2f      	ldr	r3, [pc, #188]	; (8003e28 <HAL_RCC_ClockConfig+0x1b4>)
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	492c      	ldr	r1, [pc, #176]	; (8003e28 <HAL_RCC_ClockConfig+0x1b4>)
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d7c:	4b29      	ldr	r3, [pc, #164]	; (8003e24 <HAL_RCC_ClockConfig+0x1b0>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0307 	and.w	r3, r3, #7
 8003d84:	683a      	ldr	r2, [r7, #0]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d210      	bcs.n	8003dac <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d8a:	4b26      	ldr	r3, [pc, #152]	; (8003e24 <HAL_RCC_ClockConfig+0x1b0>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f023 0207 	bic.w	r2, r3, #7
 8003d92:	4924      	ldr	r1, [pc, #144]	; (8003e24 <HAL_RCC_ClockConfig+0x1b0>)
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d9a:	4b22      	ldr	r3, [pc, #136]	; (8003e24 <HAL_RCC_ClockConfig+0x1b0>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0307 	and.w	r3, r3, #7
 8003da2:	683a      	ldr	r2, [r7, #0]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d001      	beq.n	8003dac <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e036      	b.n	8003e1a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0304 	and.w	r3, r3, #4
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d008      	beq.n	8003dca <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003db8:	4b1b      	ldr	r3, [pc, #108]	; (8003e28 <HAL_RCC_ClockConfig+0x1b4>)
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	4918      	ldr	r1, [pc, #96]	; (8003e28 <HAL_RCC_ClockConfig+0x1b4>)
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0308 	and.w	r3, r3, #8
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d009      	beq.n	8003dea <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dd6:	4b14      	ldr	r3, [pc, #80]	; (8003e28 <HAL_RCC_ClockConfig+0x1b4>)
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	00db      	lsls	r3, r3, #3
 8003de4:	4910      	ldr	r1, [pc, #64]	; (8003e28 <HAL_RCC_ClockConfig+0x1b4>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003dea:	f000 f825 	bl	8003e38 <HAL_RCC_GetSysClockFreq>
 8003dee:	4601      	mov	r1, r0
 8003df0:	4b0d      	ldr	r3, [pc, #52]	; (8003e28 <HAL_RCC_ClockConfig+0x1b4>)
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	091b      	lsrs	r3, r3, #4
 8003df6:	f003 030f 	and.w	r3, r3, #15
 8003dfa:	4a0c      	ldr	r2, [pc, #48]	; (8003e2c <HAL_RCC_ClockConfig+0x1b8>)
 8003dfc:	5cd3      	ldrb	r3, [r2, r3]
 8003dfe:	f003 031f 	and.w	r3, r3, #31
 8003e02:	fa21 f303 	lsr.w	r3, r1, r3
 8003e06:	4a0a      	ldr	r2, [pc, #40]	; (8003e30 <HAL_RCC_ClockConfig+0x1bc>)
 8003e08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003e0a:	4b0a      	ldr	r3, [pc, #40]	; (8003e34 <HAL_RCC_ClockConfig+0x1c0>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f7fd f9e4 	bl	80011dc <HAL_InitTick>
 8003e14:	4603      	mov	r3, r0
 8003e16:	72fb      	strb	r3, [r7, #11]

  return status;
 8003e18:	7afb      	ldrb	r3, [r7, #11]
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3710      	adds	r7, #16
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	40022000 	.word	0x40022000
 8003e28:	40021000 	.word	0x40021000
 8003e2c:	08005a30 	.word	0x08005a30
 8003e30:	200000c8 	.word	0x200000c8
 8003e34:	200000cc 	.word	0x200000cc

08003e38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b089      	sub	sp, #36	; 0x24
 8003e3c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	61fb      	str	r3, [r7, #28]
 8003e42:	2300      	movs	r3, #0
 8003e44:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e46:	4b3d      	ldr	r3, [pc, #244]	; (8003f3c <HAL_RCC_GetSysClockFreq+0x104>)
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	f003 030c 	and.w	r3, r3, #12
 8003e4e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e50:	4b3a      	ldr	r3, [pc, #232]	; (8003f3c <HAL_RCC_GetSysClockFreq+0x104>)
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	f003 0303 	and.w	r3, r3, #3
 8003e58:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d005      	beq.n	8003e6c <HAL_RCC_GetSysClockFreq+0x34>
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	2b0c      	cmp	r3, #12
 8003e64:	d121      	bne.n	8003eaa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d11e      	bne.n	8003eaa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003e6c:	4b33      	ldr	r3, [pc, #204]	; (8003f3c <HAL_RCC_GetSysClockFreq+0x104>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0308 	and.w	r3, r3, #8
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d107      	bne.n	8003e88 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003e78:	4b30      	ldr	r3, [pc, #192]	; (8003f3c <HAL_RCC_GetSysClockFreq+0x104>)
 8003e7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e7e:	0a1b      	lsrs	r3, r3, #8
 8003e80:	f003 030f 	and.w	r3, r3, #15
 8003e84:	61fb      	str	r3, [r7, #28]
 8003e86:	e005      	b.n	8003e94 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003e88:	4b2c      	ldr	r3, [pc, #176]	; (8003f3c <HAL_RCC_GetSysClockFreq+0x104>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	091b      	lsrs	r3, r3, #4
 8003e8e:	f003 030f 	and.w	r3, r3, #15
 8003e92:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003e94:	4a2a      	ldr	r2, [pc, #168]	; (8003f40 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e9c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d10d      	bne.n	8003ec0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ea8:	e00a      	b.n	8003ec0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	2b04      	cmp	r3, #4
 8003eae:	d102      	bne.n	8003eb6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003eb0:	4b24      	ldr	r3, [pc, #144]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003eb2:	61bb      	str	r3, [r7, #24]
 8003eb4:	e004      	b.n	8003ec0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	2b08      	cmp	r3, #8
 8003eba:	d101      	bne.n	8003ec0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003ebc:	4b22      	ldr	r3, [pc, #136]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x110>)
 8003ebe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	2b0c      	cmp	r3, #12
 8003ec4:	d133      	bne.n	8003f2e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003ec6:	4b1d      	ldr	r3, [pc, #116]	; (8003f3c <HAL_RCC_GetSysClockFreq+0x104>)
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	f003 0303 	and.w	r3, r3, #3
 8003ece:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d002      	beq.n	8003edc <HAL_RCC_GetSysClockFreq+0xa4>
 8003ed6:	2b03      	cmp	r3, #3
 8003ed8:	d003      	beq.n	8003ee2 <HAL_RCC_GetSysClockFreq+0xaa>
 8003eda:	e005      	b.n	8003ee8 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003edc:	4b19      	ldr	r3, [pc, #100]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003ede:	617b      	str	r3, [r7, #20]
      break;
 8003ee0:	e005      	b.n	8003eee <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003ee2:	4b19      	ldr	r3, [pc, #100]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x110>)
 8003ee4:	617b      	str	r3, [r7, #20]
      break;
 8003ee6:	e002      	b.n	8003eee <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003ee8:	69fb      	ldr	r3, [r7, #28]
 8003eea:	617b      	str	r3, [r7, #20]
      break;
 8003eec:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003eee:	4b13      	ldr	r3, [pc, #76]	; (8003f3c <HAL_RCC_GetSysClockFreq+0x104>)
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	091b      	lsrs	r3, r3, #4
 8003ef4:	f003 0307 	and.w	r3, r3, #7
 8003ef8:	3301      	adds	r3, #1
 8003efa:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003efc:	4b0f      	ldr	r3, [pc, #60]	; (8003f3c <HAL_RCC_GetSysClockFreq+0x104>)
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	0a1b      	lsrs	r3, r3, #8
 8003f02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f06:	697a      	ldr	r2, [r7, #20]
 8003f08:	fb02 f203 	mul.w	r2, r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f12:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f14:	4b09      	ldr	r3, [pc, #36]	; (8003f3c <HAL_RCC_GetSysClockFreq+0x104>)
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	0e5b      	lsrs	r3, r3, #25
 8003f1a:	f003 0303 	and.w	r3, r3, #3
 8003f1e:	3301      	adds	r3, #1
 8003f20:	005b      	lsls	r3, r3, #1
 8003f22:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003f24:	697a      	ldr	r2, [r7, #20]
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f2c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003f2e:	69bb      	ldr	r3, [r7, #24]
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3724      	adds	r7, #36	; 0x24
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr
 8003f3c:	40021000 	.word	0x40021000
 8003f40:	08005a48 	.word	0x08005a48
 8003f44:	00f42400 	.word	0x00f42400
 8003f48:	007a1200 	.word	0x007a1200

08003f4c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f50:	4b03      	ldr	r3, [pc, #12]	; (8003f60 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f52:	681b      	ldr	r3, [r3, #0]
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr
 8003f5e:	bf00      	nop
 8003f60:	200000c8 	.word	0x200000c8

08003f64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003f68:	f7ff fff0 	bl	8003f4c <HAL_RCC_GetHCLKFreq>
 8003f6c:	4601      	mov	r1, r0
 8003f6e:	4b06      	ldr	r3, [pc, #24]	; (8003f88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	0a1b      	lsrs	r3, r3, #8
 8003f74:	f003 0307 	and.w	r3, r3, #7
 8003f78:	4a04      	ldr	r2, [pc, #16]	; (8003f8c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003f7a:	5cd3      	ldrb	r3, [r2, r3]
 8003f7c:	f003 031f 	and.w	r3, r3, #31
 8003f80:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	40021000 	.word	0x40021000
 8003f8c:	08005a40 	.word	0x08005a40

08003f90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003f94:	f7ff ffda 	bl	8003f4c <HAL_RCC_GetHCLKFreq>
 8003f98:	4601      	mov	r1, r0
 8003f9a:	4b06      	ldr	r3, [pc, #24]	; (8003fb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	0adb      	lsrs	r3, r3, #11
 8003fa0:	f003 0307 	and.w	r3, r3, #7
 8003fa4:	4a04      	ldr	r2, [pc, #16]	; (8003fb8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003fa6:	5cd3      	ldrb	r3, [r2, r3]
 8003fa8:	f003 031f 	and.w	r3, r3, #31
 8003fac:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	40021000 	.word	0x40021000
 8003fb8:	08005a40 	.word	0x08005a40

08003fbc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b086      	sub	sp, #24
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003fc8:	4b2a      	ldr	r3, [pc, #168]	; (8004074 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d003      	beq.n	8003fdc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003fd4:	f7ff fa04 	bl	80033e0 <HAL_PWREx_GetVoltageRange>
 8003fd8:	6178      	str	r0, [r7, #20]
 8003fda:	e014      	b.n	8004006 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003fdc:	4b25      	ldr	r3, [pc, #148]	; (8004074 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fe0:	4a24      	ldr	r2, [pc, #144]	; (8004074 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fe2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fe6:	6593      	str	r3, [r2, #88]	; 0x58
 8003fe8:	4b22      	ldr	r3, [pc, #136]	; (8004074 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ff0:	60fb      	str	r3, [r7, #12]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003ff4:	f7ff f9f4 	bl	80033e0 <HAL_PWREx_GetVoltageRange>
 8003ff8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003ffa:	4b1e      	ldr	r3, [pc, #120]	; (8004074 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ffe:	4a1d      	ldr	r2, [pc, #116]	; (8004074 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004000:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004004:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800400c:	d10b      	bne.n	8004026 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2b80      	cmp	r3, #128	; 0x80
 8004012:	d919      	bls.n	8004048 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2ba0      	cmp	r3, #160	; 0xa0
 8004018:	d902      	bls.n	8004020 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800401a:	2302      	movs	r3, #2
 800401c:	613b      	str	r3, [r7, #16]
 800401e:	e013      	b.n	8004048 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004020:	2301      	movs	r3, #1
 8004022:	613b      	str	r3, [r7, #16]
 8004024:	e010      	b.n	8004048 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2b80      	cmp	r3, #128	; 0x80
 800402a:	d902      	bls.n	8004032 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800402c:	2303      	movs	r3, #3
 800402e:	613b      	str	r3, [r7, #16]
 8004030:	e00a      	b.n	8004048 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2b80      	cmp	r3, #128	; 0x80
 8004036:	d102      	bne.n	800403e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004038:	2302      	movs	r3, #2
 800403a:	613b      	str	r3, [r7, #16]
 800403c:	e004      	b.n	8004048 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2b70      	cmp	r3, #112	; 0x70
 8004042:	d101      	bne.n	8004048 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004044:	2301      	movs	r3, #1
 8004046:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004048:	4b0b      	ldr	r3, [pc, #44]	; (8004078 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f023 0207 	bic.w	r2, r3, #7
 8004050:	4909      	ldr	r1, [pc, #36]	; (8004078 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	4313      	orrs	r3, r2
 8004056:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004058:	4b07      	ldr	r3, [pc, #28]	; (8004078 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0307 	and.w	r3, r3, #7
 8004060:	693a      	ldr	r2, [r7, #16]
 8004062:	429a      	cmp	r2, r3
 8004064:	d001      	beq.n	800406a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e000      	b.n	800406c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800406a:	2300      	movs	r3, #0
}
 800406c:	4618      	mov	r0, r3
 800406e:	3718      	adds	r7, #24
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}
 8004074:	40021000 	.word	0x40021000
 8004078:	40022000 	.word	0x40022000

0800407c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b086      	sub	sp, #24
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004084:	2300      	movs	r3, #0
 8004086:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004088:	2300      	movs	r3, #0
 800408a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004094:	2b00      	cmp	r3, #0
 8004096:	d03f      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800409c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040a0:	d01c      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x60>
 80040a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040a6:	d802      	bhi.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x32>
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d00e      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80040ac:	e01f      	b.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x72>
 80040ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80040b2:	d003      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x40>
 80040b4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80040b8:	d01c      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80040ba:	e018      	b.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80040bc:	4b85      	ldr	r3, [pc, #532]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	4a84      	ldr	r2, [pc, #528]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80040c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040c6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80040c8:	e015      	b.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	3304      	adds	r3, #4
 80040ce:	2100      	movs	r1, #0
 80040d0:	4618      	mov	r0, r3
 80040d2:	f000 fab9 	bl	8004648 <RCCEx_PLLSAI1_Config>
 80040d6:	4603      	mov	r3, r0
 80040d8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80040da:	e00c      	b.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	3320      	adds	r3, #32
 80040e0:	2100      	movs	r1, #0
 80040e2:	4618      	mov	r0, r3
 80040e4:	f000 fba0 	bl	8004828 <RCCEx_PLLSAI2_Config>
 80040e8:	4603      	mov	r3, r0
 80040ea:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80040ec:	e003      	b.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	74fb      	strb	r3, [r7, #19]
      break;
 80040f2:	e000      	b.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80040f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040f6:	7cfb      	ldrb	r3, [r7, #19]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d10b      	bne.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80040fc:	4b75      	ldr	r3, [pc, #468]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80040fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004102:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800410a:	4972      	ldr	r1, [pc, #456]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800410c:	4313      	orrs	r3, r2
 800410e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004112:	e001      	b.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004114:	7cfb      	ldrb	r3, [r7, #19]
 8004116:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004120:	2b00      	cmp	r3, #0
 8004122:	d03f      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004128:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800412c:	d01c      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800412e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004132:	d802      	bhi.n	800413a <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8004134:	2b00      	cmp	r3, #0
 8004136:	d00e      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8004138:	e01f      	b.n	800417a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800413a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800413e:	d003      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8004140:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004144:	d01c      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8004146:	e018      	b.n	800417a <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004148:	4b62      	ldr	r3, [pc, #392]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	4a61      	ldr	r2, [pc, #388]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800414e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004152:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004154:	e015      	b.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	3304      	adds	r3, #4
 800415a:	2100      	movs	r1, #0
 800415c:	4618      	mov	r0, r3
 800415e:	f000 fa73 	bl	8004648 <RCCEx_PLLSAI1_Config>
 8004162:	4603      	mov	r3, r0
 8004164:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004166:	e00c      	b.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	3320      	adds	r3, #32
 800416c:	2100      	movs	r1, #0
 800416e:	4618      	mov	r0, r3
 8004170:	f000 fb5a 	bl	8004828 <RCCEx_PLLSAI2_Config>
 8004174:	4603      	mov	r3, r0
 8004176:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004178:	e003      	b.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	74fb      	strb	r3, [r7, #19]
      break;
 800417e:	e000      	b.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004180:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004182:	7cfb      	ldrb	r3, [r7, #19]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d10b      	bne.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004188:	4b52      	ldr	r3, [pc, #328]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800418a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800418e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004196:	494f      	ldr	r1, [pc, #316]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004198:	4313      	orrs	r3, r2
 800419a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800419e:	e001      	b.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041a0:	7cfb      	ldrb	r3, [r7, #19]
 80041a2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	f000 80a0 	beq.w	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041b2:	2300      	movs	r3, #0
 80041b4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80041b6:	4b47      	ldr	r3, [pc, #284]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80041b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d101      	bne.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80041c2:	2301      	movs	r3, #1
 80041c4:	e000      	b.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80041c6:	2300      	movs	r3, #0
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d00d      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041cc:	4b41      	ldr	r3, [pc, #260]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80041ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041d0:	4a40      	ldr	r2, [pc, #256]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80041d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041d6:	6593      	str	r3, [r2, #88]	; 0x58
 80041d8:	4b3e      	ldr	r3, [pc, #248]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80041da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041e0:	60bb      	str	r3, [r7, #8]
 80041e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041e4:	2301      	movs	r3, #1
 80041e6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041e8:	4b3b      	ldr	r3, [pc, #236]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a3a      	ldr	r2, [pc, #232]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80041ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041f2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80041f4:	f7fd f842 	bl	800127c <HAL_GetTick>
 80041f8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80041fa:	e009      	b.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041fc:	f7fd f83e 	bl	800127c <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	2b02      	cmp	r3, #2
 8004208:	d902      	bls.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	74fb      	strb	r3, [r7, #19]
        break;
 800420e:	e005      	b.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004210:	4b31      	ldr	r3, [pc, #196]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004218:	2b00      	cmp	r3, #0
 800421a:	d0ef      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 800421c:	7cfb      	ldrb	r3, [r7, #19]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d15c      	bne.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004222:	4b2c      	ldr	r3, [pc, #176]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004224:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004228:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800422c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d01f      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800423a:	697a      	ldr	r2, [r7, #20]
 800423c:	429a      	cmp	r2, r3
 800423e:	d019      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004240:	4b24      	ldr	r3, [pc, #144]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004246:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800424a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800424c:	4b21      	ldr	r3, [pc, #132]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800424e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004252:	4a20      	ldr	r2, [pc, #128]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004254:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004258:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800425c:	4b1d      	ldr	r3, [pc, #116]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800425e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004262:	4a1c      	ldr	r2, [pc, #112]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004264:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004268:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800426c:	4a19      	ldr	r2, [pc, #100]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	f003 0301 	and.w	r3, r3, #1
 800427a:	2b00      	cmp	r3, #0
 800427c:	d016      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800427e:	f7fc fffd 	bl	800127c <HAL_GetTick>
 8004282:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004284:	e00b      	b.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004286:	f7fc fff9 	bl	800127c <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	f241 3288 	movw	r2, #5000	; 0x1388
 8004294:	4293      	cmp	r3, r2
 8004296:	d902      	bls.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8004298:	2303      	movs	r3, #3
 800429a:	74fb      	strb	r3, [r7, #19]
            break;
 800429c:	e006      	b.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800429e:	4b0d      	ldr	r3, [pc, #52]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80042a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042a4:	f003 0302 	and.w	r3, r3, #2
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d0ec      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80042ac:	7cfb      	ldrb	r3, [r7, #19]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d10c      	bne.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042b2:	4b08      	ldr	r3, [pc, #32]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80042b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042c2:	4904      	ldr	r1, [pc, #16]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80042c4:	4313      	orrs	r3, r2
 80042c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80042ca:	e009      	b.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80042cc:	7cfb      	ldrb	r3, [r7, #19]
 80042ce:	74bb      	strb	r3, [r7, #18]
 80042d0:	e006      	b.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80042d2:	bf00      	nop
 80042d4:	40021000 	.word	0x40021000
 80042d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042dc:	7cfb      	ldrb	r3, [r7, #19]
 80042de:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042e0:	7c7b      	ldrb	r3, [r7, #17]
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d105      	bne.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042e6:	4b9e      	ldr	r3, [pc, #632]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80042e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ea:	4a9d      	ldr	r2, [pc, #628]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80042ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042f0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0301 	and.w	r3, r3, #1
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d00a      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80042fe:	4b98      	ldr	r3, [pc, #608]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004304:	f023 0203 	bic.w	r2, r3, #3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800430c:	4994      	ldr	r1, [pc, #592]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800430e:	4313      	orrs	r3, r2
 8004310:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0302 	and.w	r3, r3, #2
 800431c:	2b00      	cmp	r3, #0
 800431e:	d00a      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004320:	4b8f      	ldr	r3, [pc, #572]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004326:	f023 020c 	bic.w	r2, r3, #12
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800432e:	498c      	ldr	r1, [pc, #560]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004330:	4313      	orrs	r3, r2
 8004332:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0304 	and.w	r3, r3, #4
 800433e:	2b00      	cmp	r3, #0
 8004340:	d00a      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004342:	4b87      	ldr	r3, [pc, #540]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004348:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004350:	4983      	ldr	r1, [pc, #524]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004352:	4313      	orrs	r3, r2
 8004354:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 0308 	and.w	r3, r3, #8
 8004360:	2b00      	cmp	r3, #0
 8004362:	d00a      	beq.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004364:	4b7e      	ldr	r3, [pc, #504]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800436a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004372:	497b      	ldr	r1, [pc, #492]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004374:	4313      	orrs	r3, r2
 8004376:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0310 	and.w	r3, r3, #16
 8004382:	2b00      	cmp	r3, #0
 8004384:	d00a      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004386:	4b76      	ldr	r3, [pc, #472]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800438c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004394:	4972      	ldr	r1, [pc, #456]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004396:	4313      	orrs	r3, r2
 8004398:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0320 	and.w	r3, r3, #32
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d00a      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80043a8:	4b6d      	ldr	r3, [pc, #436]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80043aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043b6:	496a      	ldr	r1, [pc, #424]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80043b8:	4313      	orrs	r3, r2
 80043ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d00a      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80043ca:	4b65      	ldr	r3, [pc, #404]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80043cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043d0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043d8:	4961      	ldr	r1, [pc, #388]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80043da:	4313      	orrs	r3, r2
 80043dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d00a      	beq.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80043ec:	4b5c      	ldr	r3, [pc, #368]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80043ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043fa:	4959      	ldr	r1, [pc, #356]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80043fc:	4313      	orrs	r3, r2
 80043fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800440a:	2b00      	cmp	r3, #0
 800440c:	d00a      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800440e:	4b54      	ldr	r3, [pc, #336]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004410:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004414:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800441c:	4950      	ldr	r1, [pc, #320]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800441e:	4313      	orrs	r3, r2
 8004420:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800442c:	2b00      	cmp	r3, #0
 800442e:	d00a      	beq.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004430:	4b4b      	ldr	r3, [pc, #300]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004436:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800443e:	4948      	ldr	r1, [pc, #288]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004440:	4313      	orrs	r3, r2
 8004442:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800444e:	2b00      	cmp	r3, #0
 8004450:	d00a      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004452:	4b43      	ldr	r3, [pc, #268]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004458:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004460:	493f      	ldr	r1, [pc, #252]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004462:	4313      	orrs	r3, r2
 8004464:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d028      	beq.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004474:	4b3a      	ldr	r3, [pc, #232]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800447a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004482:	4937      	ldr	r1, [pc, #220]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004484:	4313      	orrs	r3, r2
 8004486:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800448e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004492:	d106      	bne.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004494:	4b32      	ldr	r3, [pc, #200]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	4a31      	ldr	r2, [pc, #196]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800449a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800449e:	60d3      	str	r3, [r2, #12]
 80044a0:	e011      	b.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80044aa:	d10c      	bne.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	3304      	adds	r3, #4
 80044b0:	2101      	movs	r1, #1
 80044b2:	4618      	mov	r0, r3
 80044b4:	f000 f8c8 	bl	8004648 <RCCEx_PLLSAI1_Config>
 80044b8:	4603      	mov	r3, r0
 80044ba:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80044bc:	7cfb      	ldrb	r3, [r7, #19]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d001      	beq.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 80044c2:	7cfb      	ldrb	r3, [r7, #19]
 80044c4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d028      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80044d2:	4b23      	ldr	r3, [pc, #140]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80044d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044d8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e0:	491f      	ldr	r1, [pc, #124]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80044e2:	4313      	orrs	r3, r2
 80044e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044f0:	d106      	bne.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044f2:	4b1b      	ldr	r3, [pc, #108]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	4a1a      	ldr	r2, [pc, #104]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80044f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044fc:	60d3      	str	r3, [r2, #12]
 80044fe:	e011      	b.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004504:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004508:	d10c      	bne.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	3304      	adds	r3, #4
 800450e:	2101      	movs	r1, #1
 8004510:	4618      	mov	r0, r3
 8004512:	f000 f899 	bl	8004648 <RCCEx_PLLSAI1_Config>
 8004516:	4603      	mov	r3, r0
 8004518:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800451a:	7cfb      	ldrb	r3, [r7, #19]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d001      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8004520:	7cfb      	ldrb	r3, [r7, #19]
 8004522:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d02b      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004530:	4b0b      	ldr	r3, [pc, #44]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004536:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800453e:	4908      	ldr	r1, [pc, #32]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004540:	4313      	orrs	r3, r2
 8004542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800454a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800454e:	d109      	bne.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004550:	4b03      	ldr	r3, [pc, #12]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	4a02      	ldr	r2, [pc, #8]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004556:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800455a:	60d3      	str	r3, [r2, #12]
 800455c:	e014      	b.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800455e:	bf00      	nop
 8004560:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004568:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800456c:	d10c      	bne.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	3304      	adds	r3, #4
 8004572:	2101      	movs	r1, #1
 8004574:	4618      	mov	r0, r3
 8004576:	f000 f867 	bl	8004648 <RCCEx_PLLSAI1_Config>
 800457a:	4603      	mov	r3, r0
 800457c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800457e:	7cfb      	ldrb	r3, [r7, #19]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d001      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8004584:	7cfb      	ldrb	r3, [r7, #19]
 8004586:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004590:	2b00      	cmp	r3, #0
 8004592:	d02f      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004594:	4b2b      	ldr	r3, [pc, #172]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800459a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045a2:	4928      	ldr	r1, [pc, #160]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80045a4:	4313      	orrs	r3, r2
 80045a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045b2:	d10d      	bne.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	3304      	adds	r3, #4
 80045b8:	2102      	movs	r1, #2
 80045ba:	4618      	mov	r0, r3
 80045bc:	f000 f844 	bl	8004648 <RCCEx_PLLSAI1_Config>
 80045c0:	4603      	mov	r3, r0
 80045c2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80045c4:	7cfb      	ldrb	r3, [r7, #19]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d014      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80045ca:	7cfb      	ldrb	r3, [r7, #19]
 80045cc:	74bb      	strb	r3, [r7, #18]
 80045ce:	e011      	b.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045d8:	d10c      	bne.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	3320      	adds	r3, #32
 80045de:	2102      	movs	r1, #2
 80045e0:	4618      	mov	r0, r3
 80045e2:	f000 f921 	bl	8004828 <RCCEx_PLLSAI2_Config>
 80045e6:	4603      	mov	r3, r0
 80045e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80045ea:	7cfb      	ldrb	r3, [r7, #19]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d001      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80045f0:	7cfb      	ldrb	r3, [r7, #19]
 80045f2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d00a      	beq.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004600:	4b10      	ldr	r3, [pc, #64]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004606:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800460e:	490d      	ldr	r1, [pc, #52]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004610:	4313      	orrs	r3, r2
 8004612:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800461e:	2b00      	cmp	r3, #0
 8004620:	d00b      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004622:	4b08      	ldr	r3, [pc, #32]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004624:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004628:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004632:	4904      	ldr	r1, [pc, #16]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004634:	4313      	orrs	r3, r2
 8004636:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800463a:	7cbb      	ldrb	r3, [r7, #18]
}
 800463c:	4618      	mov	r0, r3
 800463e:	3718      	adds	r7, #24
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}
 8004644:	40021000 	.word	0x40021000

08004648 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004652:	2300      	movs	r3, #0
 8004654:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004656:	4b73      	ldr	r3, [pc, #460]	; (8004824 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	f003 0303 	and.w	r3, r3, #3
 800465e:	2b00      	cmp	r3, #0
 8004660:	d018      	beq.n	8004694 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004662:	4b70      	ldr	r3, [pc, #448]	; (8004824 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	f003 0203 	and.w	r2, r3, #3
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	429a      	cmp	r2, r3
 8004670:	d10d      	bne.n	800468e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
       ||
 8004676:	2b00      	cmp	r3, #0
 8004678:	d009      	beq.n	800468e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800467a:	4b6a      	ldr	r3, [pc, #424]	; (8004824 <RCCEx_PLLSAI1_Config+0x1dc>)
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	091b      	lsrs	r3, r3, #4
 8004680:	f003 0307 	and.w	r3, r3, #7
 8004684:	1c5a      	adds	r2, r3, #1
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	685b      	ldr	r3, [r3, #4]
       ||
 800468a:	429a      	cmp	r2, r3
 800468c:	d044      	beq.n	8004718 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	73fb      	strb	r3, [r7, #15]
 8004692:	e041      	b.n	8004718 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	2b02      	cmp	r3, #2
 800469a:	d00c      	beq.n	80046b6 <RCCEx_PLLSAI1_Config+0x6e>
 800469c:	2b03      	cmp	r3, #3
 800469e:	d013      	beq.n	80046c8 <RCCEx_PLLSAI1_Config+0x80>
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d120      	bne.n	80046e6 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80046a4:	4b5f      	ldr	r3, [pc, #380]	; (8004824 <RCCEx_PLLSAI1_Config+0x1dc>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0302 	and.w	r3, r3, #2
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d11d      	bne.n	80046ec <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046b4:	e01a      	b.n	80046ec <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80046b6:	4b5b      	ldr	r3, [pc, #364]	; (8004824 <RCCEx_PLLSAI1_Config+0x1dc>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d116      	bne.n	80046f0 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046c6:	e013      	b.n	80046f0 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80046c8:	4b56      	ldr	r3, [pc, #344]	; (8004824 <RCCEx_PLLSAI1_Config+0x1dc>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d10f      	bne.n	80046f4 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80046d4:	4b53      	ldr	r3, [pc, #332]	; (8004824 <RCCEx_PLLSAI1_Config+0x1dc>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d109      	bne.n	80046f4 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80046e4:	e006      	b.n	80046f4 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	73fb      	strb	r3, [r7, #15]
      break;
 80046ea:	e004      	b.n	80046f6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80046ec:	bf00      	nop
 80046ee:	e002      	b.n	80046f6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80046f0:	bf00      	nop
 80046f2:	e000      	b.n	80046f6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80046f4:	bf00      	nop
    }

    if(status == HAL_OK)
 80046f6:	7bfb      	ldrb	r3, [r7, #15]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d10d      	bne.n	8004718 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80046fc:	4b49      	ldr	r3, [pc, #292]	; (8004824 <RCCEx_PLLSAI1_Config+0x1dc>)
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6819      	ldr	r1, [r3, #0]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	3b01      	subs	r3, #1
 800470e:	011b      	lsls	r3, r3, #4
 8004710:	430b      	orrs	r3, r1
 8004712:	4944      	ldr	r1, [pc, #272]	; (8004824 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004714:	4313      	orrs	r3, r2
 8004716:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004718:	7bfb      	ldrb	r3, [r7, #15]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d17d      	bne.n	800481a <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800471e:	4b41      	ldr	r3, [pc, #260]	; (8004824 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a40      	ldr	r2, [pc, #256]	; (8004824 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004724:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004728:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800472a:	f7fc fda7 	bl	800127c <HAL_GetTick>
 800472e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004730:	e009      	b.n	8004746 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004732:	f7fc fda3 	bl	800127c <HAL_GetTick>
 8004736:	4602      	mov	r2, r0
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	1ad3      	subs	r3, r2, r3
 800473c:	2b02      	cmp	r3, #2
 800473e:	d902      	bls.n	8004746 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004740:	2303      	movs	r3, #3
 8004742:	73fb      	strb	r3, [r7, #15]
        break;
 8004744:	e005      	b.n	8004752 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004746:	4b37      	ldr	r3, [pc, #220]	; (8004824 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d1ef      	bne.n	8004732 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004752:	7bfb      	ldrb	r3, [r7, #15]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d160      	bne.n	800481a <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d111      	bne.n	8004782 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800475e:	4b31      	ldr	r3, [pc, #196]	; (8004824 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004760:	691b      	ldr	r3, [r3, #16]
 8004762:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004766:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	6892      	ldr	r2, [r2, #8]
 800476e:	0211      	lsls	r1, r2, #8
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	68d2      	ldr	r2, [r2, #12]
 8004774:	0912      	lsrs	r2, r2, #4
 8004776:	0452      	lsls	r2, r2, #17
 8004778:	430a      	orrs	r2, r1
 800477a:	492a      	ldr	r1, [pc, #168]	; (8004824 <RCCEx_PLLSAI1_Config+0x1dc>)
 800477c:	4313      	orrs	r3, r2
 800477e:	610b      	str	r3, [r1, #16]
 8004780:	e027      	b.n	80047d2 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	2b01      	cmp	r3, #1
 8004786:	d112      	bne.n	80047ae <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004788:	4b26      	ldr	r3, [pc, #152]	; (8004824 <RCCEx_PLLSAI1_Config+0x1dc>)
 800478a:	691b      	ldr	r3, [r3, #16]
 800478c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004790:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	6892      	ldr	r2, [r2, #8]
 8004798:	0211      	lsls	r1, r2, #8
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	6912      	ldr	r2, [r2, #16]
 800479e:	0852      	lsrs	r2, r2, #1
 80047a0:	3a01      	subs	r2, #1
 80047a2:	0552      	lsls	r2, r2, #21
 80047a4:	430a      	orrs	r2, r1
 80047a6:	491f      	ldr	r1, [pc, #124]	; (8004824 <RCCEx_PLLSAI1_Config+0x1dc>)
 80047a8:	4313      	orrs	r3, r2
 80047aa:	610b      	str	r3, [r1, #16]
 80047ac:	e011      	b.n	80047d2 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80047ae:	4b1d      	ldr	r3, [pc, #116]	; (8004824 <RCCEx_PLLSAI1_Config+0x1dc>)
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80047b6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	6892      	ldr	r2, [r2, #8]
 80047be:	0211      	lsls	r1, r2, #8
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	6952      	ldr	r2, [r2, #20]
 80047c4:	0852      	lsrs	r2, r2, #1
 80047c6:	3a01      	subs	r2, #1
 80047c8:	0652      	lsls	r2, r2, #25
 80047ca:	430a      	orrs	r2, r1
 80047cc:	4915      	ldr	r1, [pc, #84]	; (8004824 <RCCEx_PLLSAI1_Config+0x1dc>)
 80047ce:	4313      	orrs	r3, r2
 80047d0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80047d2:	4b14      	ldr	r3, [pc, #80]	; (8004824 <RCCEx_PLLSAI1_Config+0x1dc>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a13      	ldr	r2, [pc, #76]	; (8004824 <RCCEx_PLLSAI1_Config+0x1dc>)
 80047d8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80047dc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047de:	f7fc fd4d 	bl	800127c <HAL_GetTick>
 80047e2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80047e4:	e009      	b.n	80047fa <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80047e6:	f7fc fd49 	bl	800127c <HAL_GetTick>
 80047ea:	4602      	mov	r2, r0
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d902      	bls.n	80047fa <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80047f4:	2303      	movs	r3, #3
 80047f6:	73fb      	strb	r3, [r7, #15]
          break;
 80047f8:	e005      	b.n	8004806 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80047fa:	4b0a      	ldr	r3, [pc, #40]	; (8004824 <RCCEx_PLLSAI1_Config+0x1dc>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d0ef      	beq.n	80047e6 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8004806:	7bfb      	ldrb	r3, [r7, #15]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d106      	bne.n	800481a <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800480c:	4b05      	ldr	r3, [pc, #20]	; (8004824 <RCCEx_PLLSAI1_Config+0x1dc>)
 800480e:	691a      	ldr	r2, [r3, #16]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	699b      	ldr	r3, [r3, #24]
 8004814:	4903      	ldr	r1, [pc, #12]	; (8004824 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004816:	4313      	orrs	r3, r2
 8004818:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800481a:	7bfb      	ldrb	r3, [r7, #15]
}
 800481c:	4618      	mov	r0, r3
 800481e:	3710      	adds	r7, #16
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}
 8004824:	40021000 	.word	0x40021000

08004828 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004832:	2300      	movs	r3, #0
 8004834:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004836:	4b68      	ldr	r3, [pc, #416]	; (80049d8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	f003 0303 	and.w	r3, r3, #3
 800483e:	2b00      	cmp	r3, #0
 8004840:	d018      	beq.n	8004874 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004842:	4b65      	ldr	r3, [pc, #404]	; (80049d8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	f003 0203 	and.w	r2, r3, #3
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	429a      	cmp	r2, r3
 8004850:	d10d      	bne.n	800486e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
       ||
 8004856:	2b00      	cmp	r3, #0
 8004858:	d009      	beq.n	800486e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800485a:	4b5f      	ldr	r3, [pc, #380]	; (80049d8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	091b      	lsrs	r3, r3, #4
 8004860:	f003 0307 	and.w	r3, r3, #7
 8004864:	1c5a      	adds	r2, r3, #1
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	685b      	ldr	r3, [r3, #4]
       ||
 800486a:	429a      	cmp	r2, r3
 800486c:	d044      	beq.n	80048f8 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	73fb      	strb	r3, [r7, #15]
 8004872:	e041      	b.n	80048f8 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2b02      	cmp	r3, #2
 800487a:	d00c      	beq.n	8004896 <RCCEx_PLLSAI2_Config+0x6e>
 800487c:	2b03      	cmp	r3, #3
 800487e:	d013      	beq.n	80048a8 <RCCEx_PLLSAI2_Config+0x80>
 8004880:	2b01      	cmp	r3, #1
 8004882:	d120      	bne.n	80048c6 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004884:	4b54      	ldr	r3, [pc, #336]	; (80049d8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0302 	and.w	r3, r3, #2
 800488c:	2b00      	cmp	r3, #0
 800488e:	d11d      	bne.n	80048cc <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004894:	e01a      	b.n	80048cc <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004896:	4b50      	ldr	r3, [pc, #320]	; (80049d8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d116      	bne.n	80048d0 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048a6:	e013      	b.n	80048d0 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80048a8:	4b4b      	ldr	r3, [pc, #300]	; (80049d8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d10f      	bne.n	80048d4 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80048b4:	4b48      	ldr	r3, [pc, #288]	; (80049d8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d109      	bne.n	80048d4 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80048c4:	e006      	b.n	80048d4 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	73fb      	strb	r3, [r7, #15]
      break;
 80048ca:	e004      	b.n	80048d6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80048cc:	bf00      	nop
 80048ce:	e002      	b.n	80048d6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80048d0:	bf00      	nop
 80048d2:	e000      	b.n	80048d6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80048d4:	bf00      	nop
    }

    if(status == HAL_OK)
 80048d6:	7bfb      	ldrb	r3, [r7, #15]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d10d      	bne.n	80048f8 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80048dc:	4b3e      	ldr	r3, [pc, #248]	; (80049d8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6819      	ldr	r1, [r3, #0]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	3b01      	subs	r3, #1
 80048ee:	011b      	lsls	r3, r3, #4
 80048f0:	430b      	orrs	r3, r1
 80048f2:	4939      	ldr	r1, [pc, #228]	; (80049d8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80048f4:	4313      	orrs	r3, r2
 80048f6:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80048f8:	7bfb      	ldrb	r3, [r7, #15]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d167      	bne.n	80049ce <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80048fe:	4b36      	ldr	r3, [pc, #216]	; (80049d8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a35      	ldr	r2, [pc, #212]	; (80049d8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004904:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004908:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800490a:	f7fc fcb7 	bl	800127c <HAL_GetTick>
 800490e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004910:	e009      	b.n	8004926 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004912:	f7fc fcb3 	bl	800127c <HAL_GetTick>
 8004916:	4602      	mov	r2, r0
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	1ad3      	subs	r3, r2, r3
 800491c:	2b02      	cmp	r3, #2
 800491e:	d902      	bls.n	8004926 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004920:	2303      	movs	r3, #3
 8004922:	73fb      	strb	r3, [r7, #15]
        break;
 8004924:	e005      	b.n	8004932 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004926:	4b2c      	ldr	r3, [pc, #176]	; (80049d8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d1ef      	bne.n	8004912 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004932:	7bfb      	ldrb	r3, [r7, #15]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d14a      	bne.n	80049ce <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d111      	bne.n	8004962 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800493e:	4b26      	ldr	r3, [pc, #152]	; (80049d8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004940:	695b      	ldr	r3, [r3, #20]
 8004942:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004946:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	6892      	ldr	r2, [r2, #8]
 800494e:	0211      	lsls	r1, r2, #8
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	68d2      	ldr	r2, [r2, #12]
 8004954:	0912      	lsrs	r2, r2, #4
 8004956:	0452      	lsls	r2, r2, #17
 8004958:	430a      	orrs	r2, r1
 800495a:	491f      	ldr	r1, [pc, #124]	; (80049d8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800495c:	4313      	orrs	r3, r2
 800495e:	614b      	str	r3, [r1, #20]
 8004960:	e011      	b.n	8004986 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004962:	4b1d      	ldr	r3, [pc, #116]	; (80049d8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004964:	695b      	ldr	r3, [r3, #20]
 8004966:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800496a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	6892      	ldr	r2, [r2, #8]
 8004972:	0211      	lsls	r1, r2, #8
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	6912      	ldr	r2, [r2, #16]
 8004978:	0852      	lsrs	r2, r2, #1
 800497a:	3a01      	subs	r2, #1
 800497c:	0652      	lsls	r2, r2, #25
 800497e:	430a      	orrs	r2, r1
 8004980:	4915      	ldr	r1, [pc, #84]	; (80049d8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004982:	4313      	orrs	r3, r2
 8004984:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004986:	4b14      	ldr	r3, [pc, #80]	; (80049d8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a13      	ldr	r2, [pc, #76]	; (80049d8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800498c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004990:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004992:	f7fc fc73 	bl	800127c <HAL_GetTick>
 8004996:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004998:	e009      	b.n	80049ae <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800499a:	f7fc fc6f 	bl	800127c <HAL_GetTick>
 800499e:	4602      	mov	r2, r0
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	d902      	bls.n	80049ae <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 80049a8:	2303      	movs	r3, #3
 80049aa:	73fb      	strb	r3, [r7, #15]
          break;
 80049ac:	e005      	b.n	80049ba <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80049ae:	4b0a      	ldr	r3, [pc, #40]	; (80049d8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d0ef      	beq.n	800499a <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 80049ba:	7bfb      	ldrb	r3, [r7, #15]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d106      	bne.n	80049ce <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80049c0:	4b05      	ldr	r3, [pc, #20]	; (80049d8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80049c2:	695a      	ldr	r2, [r3, #20]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	695b      	ldr	r3, [r3, #20]
 80049c8:	4903      	ldr	r1, [pc, #12]	; (80049d8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80049ca:	4313      	orrs	r3, r2
 80049cc:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80049ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3710      	adds	r7, #16
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}
 80049d8:	40021000 	.word	0x40021000

080049dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b082      	sub	sp, #8
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d101      	bne.n	80049ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e049      	b.n	8004a82 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d106      	bne.n	8004a08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f7fc faf4 	bl	8000ff0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2202      	movs	r2, #2
 8004a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	3304      	adds	r3, #4
 8004a18:	4619      	mov	r1, r3
 8004a1a:	4610      	mov	r0, r2
 8004a1c:	f000 fa56 	bl	8004ecc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a80:	2300      	movs	r3, #0
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3708      	adds	r7, #8
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
	...

08004a8c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b085      	sub	sp, #20
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d001      	beq.n	8004aa4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e047      	b.n	8004b34 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2202      	movs	r2, #2
 8004aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a23      	ldr	r2, [pc, #140]	; (8004b40 <HAL_TIM_Base_Start+0xb4>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d01d      	beq.n	8004af2 <HAL_TIM_Base_Start+0x66>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004abe:	d018      	beq.n	8004af2 <HAL_TIM_Base_Start+0x66>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a1f      	ldr	r2, [pc, #124]	; (8004b44 <HAL_TIM_Base_Start+0xb8>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d013      	beq.n	8004af2 <HAL_TIM_Base_Start+0x66>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a1e      	ldr	r2, [pc, #120]	; (8004b48 <HAL_TIM_Base_Start+0xbc>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d00e      	beq.n	8004af2 <HAL_TIM_Base_Start+0x66>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a1c      	ldr	r2, [pc, #112]	; (8004b4c <HAL_TIM_Base_Start+0xc0>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d009      	beq.n	8004af2 <HAL_TIM_Base_Start+0x66>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a1b      	ldr	r2, [pc, #108]	; (8004b50 <HAL_TIM_Base_Start+0xc4>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d004      	beq.n	8004af2 <HAL_TIM_Base_Start+0x66>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a19      	ldr	r2, [pc, #100]	; (8004b54 <HAL_TIM_Base_Start+0xc8>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d115      	bne.n	8004b1e <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	689a      	ldr	r2, [r3, #8]
 8004af8:	4b17      	ldr	r3, [pc, #92]	; (8004b58 <HAL_TIM_Base_Start+0xcc>)
 8004afa:	4013      	ands	r3, r2
 8004afc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2b06      	cmp	r3, #6
 8004b02:	d015      	beq.n	8004b30 <HAL_TIM_Base_Start+0xa4>
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b0a:	d011      	beq.n	8004b30 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f042 0201 	orr.w	r2, r2, #1
 8004b1a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b1c:	e008      	b.n	8004b30 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f042 0201 	orr.w	r2, r2, #1
 8004b2c:	601a      	str	r2, [r3, #0]
 8004b2e:	e000      	b.n	8004b32 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b30:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004b32:	2300      	movs	r3, #0
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3714      	adds	r7, #20
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr
 8004b40:	40012c00 	.word	0x40012c00
 8004b44:	40000400 	.word	0x40000400
 8004b48:	40000800 	.word	0x40000800
 8004b4c:	40000c00 	.word	0x40000c00
 8004b50:	40013400 	.word	0x40013400
 8004b54:	40014000 	.word	0x40014000
 8004b58:	00010007 	.word	0x00010007

08004b5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b085      	sub	sp, #20
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d001      	beq.n	8004b74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	e04f      	b.n	8004c14 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2202      	movs	r2, #2
 8004b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	68da      	ldr	r2, [r3, #12]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f042 0201 	orr.w	r2, r2, #1
 8004b8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a23      	ldr	r2, [pc, #140]	; (8004c20 <HAL_TIM_Base_Start_IT+0xc4>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d01d      	beq.n	8004bd2 <HAL_TIM_Base_Start_IT+0x76>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b9e:	d018      	beq.n	8004bd2 <HAL_TIM_Base_Start_IT+0x76>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a1f      	ldr	r2, [pc, #124]	; (8004c24 <HAL_TIM_Base_Start_IT+0xc8>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d013      	beq.n	8004bd2 <HAL_TIM_Base_Start_IT+0x76>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a1e      	ldr	r2, [pc, #120]	; (8004c28 <HAL_TIM_Base_Start_IT+0xcc>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d00e      	beq.n	8004bd2 <HAL_TIM_Base_Start_IT+0x76>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a1c      	ldr	r2, [pc, #112]	; (8004c2c <HAL_TIM_Base_Start_IT+0xd0>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d009      	beq.n	8004bd2 <HAL_TIM_Base_Start_IT+0x76>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a1b      	ldr	r2, [pc, #108]	; (8004c30 <HAL_TIM_Base_Start_IT+0xd4>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d004      	beq.n	8004bd2 <HAL_TIM_Base_Start_IT+0x76>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a19      	ldr	r2, [pc, #100]	; (8004c34 <HAL_TIM_Base_Start_IT+0xd8>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d115      	bne.n	8004bfe <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	689a      	ldr	r2, [r3, #8]
 8004bd8:	4b17      	ldr	r3, [pc, #92]	; (8004c38 <HAL_TIM_Base_Start_IT+0xdc>)
 8004bda:	4013      	ands	r3, r2
 8004bdc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2b06      	cmp	r3, #6
 8004be2:	d015      	beq.n	8004c10 <HAL_TIM_Base_Start_IT+0xb4>
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bea:	d011      	beq.n	8004c10 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f042 0201 	orr.w	r2, r2, #1
 8004bfa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bfc:	e008      	b.n	8004c10 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f042 0201 	orr.w	r2, r2, #1
 8004c0c:	601a      	str	r2, [r3, #0]
 8004c0e:	e000      	b.n	8004c12 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c10:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004c12:	2300      	movs	r3, #0
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3714      	adds	r7, #20
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr
 8004c20:	40012c00 	.word	0x40012c00
 8004c24:	40000400 	.word	0x40000400
 8004c28:	40000800 	.word	0x40000800
 8004c2c:	40000c00 	.word	0x40000c00
 8004c30:	40013400 	.word	0x40013400
 8004c34:	40014000 	.word	0x40014000
 8004c38:	00010007 	.word	0x00010007

08004c3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b082      	sub	sp, #8
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	f003 0302 	and.w	r3, r3, #2
 8004c4e:	2b02      	cmp	r3, #2
 8004c50:	d122      	bne.n	8004c98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	f003 0302 	and.w	r3, r3, #2
 8004c5c:	2b02      	cmp	r3, #2
 8004c5e:	d11b      	bne.n	8004c98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f06f 0202 	mvn.w	r2, #2
 8004c68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	699b      	ldr	r3, [r3, #24]
 8004c76:	f003 0303 	and.w	r3, r3, #3
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d003      	beq.n	8004c86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f000 f905 	bl	8004e8e <HAL_TIM_IC_CaptureCallback>
 8004c84:	e005      	b.n	8004c92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 f8f7 	bl	8004e7a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f000 f908 	bl	8004ea2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	691b      	ldr	r3, [r3, #16]
 8004c9e:	f003 0304 	and.w	r3, r3, #4
 8004ca2:	2b04      	cmp	r3, #4
 8004ca4:	d122      	bne.n	8004cec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	f003 0304 	and.w	r3, r3, #4
 8004cb0:	2b04      	cmp	r3, #4
 8004cb2:	d11b      	bne.n	8004cec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f06f 0204 	mvn.w	r2, #4
 8004cbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2202      	movs	r2, #2
 8004cc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	699b      	ldr	r3, [r3, #24]
 8004cca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d003      	beq.n	8004cda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f000 f8db 	bl	8004e8e <HAL_TIM_IC_CaptureCallback>
 8004cd8:	e005      	b.n	8004ce6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 f8cd 	bl	8004e7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f000 f8de 	bl	8004ea2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	691b      	ldr	r3, [r3, #16]
 8004cf2:	f003 0308 	and.w	r3, r3, #8
 8004cf6:	2b08      	cmp	r3, #8
 8004cf8:	d122      	bne.n	8004d40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	f003 0308 	and.w	r3, r3, #8
 8004d04:	2b08      	cmp	r3, #8
 8004d06:	d11b      	bne.n	8004d40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f06f 0208 	mvn.w	r2, #8
 8004d10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2204      	movs	r2, #4
 8004d16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	69db      	ldr	r3, [r3, #28]
 8004d1e:	f003 0303 	and.w	r3, r3, #3
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d003      	beq.n	8004d2e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 f8b1 	bl	8004e8e <HAL_TIM_IC_CaptureCallback>
 8004d2c:	e005      	b.n	8004d3a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 f8a3 	bl	8004e7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f000 f8b4 	bl	8004ea2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	f003 0310 	and.w	r3, r3, #16
 8004d4a:	2b10      	cmp	r3, #16
 8004d4c:	d122      	bne.n	8004d94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	f003 0310 	and.w	r3, r3, #16
 8004d58:	2b10      	cmp	r3, #16
 8004d5a:	d11b      	bne.n	8004d94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f06f 0210 	mvn.w	r2, #16
 8004d64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2208      	movs	r2, #8
 8004d6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	69db      	ldr	r3, [r3, #28]
 8004d72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d003      	beq.n	8004d82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f000 f887 	bl	8004e8e <HAL_TIM_IC_CaptureCallback>
 8004d80:	e005      	b.n	8004d8e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f000 f879 	bl	8004e7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f000 f88a 	bl	8004ea2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	f003 0301 	and.w	r3, r3, #1
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d10e      	bne.n	8004dc0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	f003 0301 	and.w	r3, r3, #1
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d107      	bne.n	8004dc0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f06f 0201 	mvn.w	r2, #1
 8004db8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f7fb fd38 	bl	8000830 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	691b      	ldr	r3, [r3, #16]
 8004dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dca:	2b80      	cmp	r3, #128	; 0x80
 8004dcc:	d10e      	bne.n	8004dec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dd8:	2b80      	cmp	r3, #128	; 0x80
 8004dda:	d107      	bne.n	8004dec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f000 f99c 	bl	8005124 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004df6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dfa:	d10e      	bne.n	8004e1a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e06:	2b80      	cmp	r3, #128	; 0x80
 8004e08:	d107      	bne.n	8004e1a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004e12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f000 f98f 	bl	8005138 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e24:	2b40      	cmp	r3, #64	; 0x40
 8004e26:	d10e      	bne.n	8004e46 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e32:	2b40      	cmp	r3, #64	; 0x40
 8004e34:	d107      	bne.n	8004e46 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f000 f838 	bl	8004eb6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	691b      	ldr	r3, [r3, #16]
 8004e4c:	f003 0320 	and.w	r3, r3, #32
 8004e50:	2b20      	cmp	r3, #32
 8004e52:	d10e      	bne.n	8004e72 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	f003 0320 	and.w	r3, r3, #32
 8004e5e:	2b20      	cmp	r3, #32
 8004e60:	d107      	bne.n	8004e72 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f06f 0220 	mvn.w	r2, #32
 8004e6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f000 f94f 	bl	8005110 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e72:	bf00      	nop
 8004e74:	3708      	adds	r7, #8
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}

08004e7a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e7a:	b480      	push	{r7}
 8004e7c:	b083      	sub	sp, #12
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e82:	bf00      	nop
 8004e84:	370c      	adds	r7, #12
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr

08004e8e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e8e:	b480      	push	{r7}
 8004e90:	b083      	sub	sp, #12
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e96:	bf00      	nop
 8004e98:	370c      	adds	r7, #12
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr

08004ea2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ea2:	b480      	push	{r7}
 8004ea4:	b083      	sub	sp, #12
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004eaa:	bf00      	nop
 8004eac:	370c      	adds	r7, #12
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr

08004eb6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004eb6:	b480      	push	{r7}
 8004eb8:	b083      	sub	sp, #12
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ebe:	bf00      	nop
 8004ec0:	370c      	adds	r7, #12
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr
	...

08004ecc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b085      	sub	sp, #20
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	4a40      	ldr	r2, [pc, #256]	; (8004fe0 <TIM_Base_SetConfig+0x114>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d013      	beq.n	8004f0c <TIM_Base_SetConfig+0x40>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eea:	d00f      	beq.n	8004f0c <TIM_Base_SetConfig+0x40>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	4a3d      	ldr	r2, [pc, #244]	; (8004fe4 <TIM_Base_SetConfig+0x118>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d00b      	beq.n	8004f0c <TIM_Base_SetConfig+0x40>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	4a3c      	ldr	r2, [pc, #240]	; (8004fe8 <TIM_Base_SetConfig+0x11c>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d007      	beq.n	8004f0c <TIM_Base_SetConfig+0x40>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	4a3b      	ldr	r2, [pc, #236]	; (8004fec <TIM_Base_SetConfig+0x120>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d003      	beq.n	8004f0c <TIM_Base_SetConfig+0x40>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	4a3a      	ldr	r2, [pc, #232]	; (8004ff0 <TIM_Base_SetConfig+0x124>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d108      	bne.n	8004f1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	68fa      	ldr	r2, [r7, #12]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a2f      	ldr	r2, [pc, #188]	; (8004fe0 <TIM_Base_SetConfig+0x114>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d01f      	beq.n	8004f66 <TIM_Base_SetConfig+0x9a>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f2c:	d01b      	beq.n	8004f66 <TIM_Base_SetConfig+0x9a>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4a2c      	ldr	r2, [pc, #176]	; (8004fe4 <TIM_Base_SetConfig+0x118>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d017      	beq.n	8004f66 <TIM_Base_SetConfig+0x9a>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4a2b      	ldr	r2, [pc, #172]	; (8004fe8 <TIM_Base_SetConfig+0x11c>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d013      	beq.n	8004f66 <TIM_Base_SetConfig+0x9a>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	4a2a      	ldr	r2, [pc, #168]	; (8004fec <TIM_Base_SetConfig+0x120>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d00f      	beq.n	8004f66 <TIM_Base_SetConfig+0x9a>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4a29      	ldr	r2, [pc, #164]	; (8004ff0 <TIM_Base_SetConfig+0x124>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d00b      	beq.n	8004f66 <TIM_Base_SetConfig+0x9a>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	4a28      	ldr	r2, [pc, #160]	; (8004ff4 <TIM_Base_SetConfig+0x128>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d007      	beq.n	8004f66 <TIM_Base_SetConfig+0x9a>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4a27      	ldr	r2, [pc, #156]	; (8004ff8 <TIM_Base_SetConfig+0x12c>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d003      	beq.n	8004f66 <TIM_Base_SetConfig+0x9a>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	4a26      	ldr	r2, [pc, #152]	; (8004ffc <TIM_Base_SetConfig+0x130>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d108      	bne.n	8004f78 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	68db      	ldr	r3, [r3, #12]
 8004f72:	68fa      	ldr	r2, [r7, #12]
 8004f74:	4313      	orrs	r3, r2
 8004f76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	695b      	ldr	r3, [r3, #20]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	68fa      	ldr	r2, [r7, #12]
 8004f8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	689a      	ldr	r2, [r3, #8]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	4a10      	ldr	r2, [pc, #64]	; (8004fe0 <TIM_Base_SetConfig+0x114>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d00f      	beq.n	8004fc4 <TIM_Base_SetConfig+0xf8>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	4a12      	ldr	r2, [pc, #72]	; (8004ff0 <TIM_Base_SetConfig+0x124>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d00b      	beq.n	8004fc4 <TIM_Base_SetConfig+0xf8>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	4a11      	ldr	r2, [pc, #68]	; (8004ff4 <TIM_Base_SetConfig+0x128>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d007      	beq.n	8004fc4 <TIM_Base_SetConfig+0xf8>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	4a10      	ldr	r2, [pc, #64]	; (8004ff8 <TIM_Base_SetConfig+0x12c>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d003      	beq.n	8004fc4 <TIM_Base_SetConfig+0xf8>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	4a0f      	ldr	r2, [pc, #60]	; (8004ffc <TIM_Base_SetConfig+0x130>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d103      	bne.n	8004fcc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	691a      	ldr	r2, [r3, #16]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	615a      	str	r2, [r3, #20]
}
 8004fd2:	bf00      	nop
 8004fd4:	3714      	adds	r7, #20
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr
 8004fde:	bf00      	nop
 8004fe0:	40012c00 	.word	0x40012c00
 8004fe4:	40000400 	.word	0x40000400
 8004fe8:	40000800 	.word	0x40000800
 8004fec:	40000c00 	.word	0x40000c00
 8004ff0:	40013400 	.word	0x40013400
 8004ff4:	40014000 	.word	0x40014000
 8004ff8:	40014400 	.word	0x40014400
 8004ffc:	40014800 	.word	0x40014800

08005000 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005000:	b480      	push	{r7}
 8005002:	b085      	sub	sp, #20
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005010:	2b01      	cmp	r3, #1
 8005012:	d101      	bne.n	8005018 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005014:	2302      	movs	r3, #2
 8005016:	e068      	b.n	80050ea <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2202      	movs	r2, #2
 8005024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a2e      	ldr	r2, [pc, #184]	; (80050f8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d004      	beq.n	800504c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a2d      	ldr	r2, [pc, #180]	; (80050fc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d108      	bne.n	800505e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005052:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	68fa      	ldr	r2, [r7, #12]
 800505a:	4313      	orrs	r3, r2
 800505c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005064:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	68fa      	ldr	r2, [r7, #12]
 800506c:	4313      	orrs	r3, r2
 800506e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	68fa      	ldr	r2, [r7, #12]
 8005076:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a1e      	ldr	r2, [pc, #120]	; (80050f8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d01d      	beq.n	80050be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800508a:	d018      	beq.n	80050be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a1b      	ldr	r2, [pc, #108]	; (8005100 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d013      	beq.n	80050be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a1a      	ldr	r2, [pc, #104]	; (8005104 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d00e      	beq.n	80050be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a18      	ldr	r2, [pc, #96]	; (8005108 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d009      	beq.n	80050be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a13      	ldr	r2, [pc, #76]	; (80050fc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d004      	beq.n	80050be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a14      	ldr	r2, [pc, #80]	; (800510c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d10c      	bne.n	80050d8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	68ba      	ldr	r2, [r7, #8]
 80050cc:	4313      	orrs	r3, r2
 80050ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	68ba      	ldr	r2, [r7, #8]
 80050d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2200      	movs	r2, #0
 80050e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050e8:	2300      	movs	r3, #0
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3714      	adds	r7, #20
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr
 80050f6:	bf00      	nop
 80050f8:	40012c00 	.word	0x40012c00
 80050fc:	40013400 	.word	0x40013400
 8005100:	40000400 	.word	0x40000400
 8005104:	40000800 	.word	0x40000800
 8005108:	40000c00 	.word	0x40000c00
 800510c:	40014000 	.word	0x40014000

08005110 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005110:	b480      	push	{r7}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005118:	bf00      	nop
 800511a:	370c      	adds	r7, #12
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr

08005124 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005124:	b480      	push	{r7}
 8005126:	b083      	sub	sp, #12
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800512c:	bf00      	nop
 800512e:	370c      	adds	r7, #12
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr

08005138 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005138:	b480      	push	{r7}
 800513a:	b083      	sub	sp, #12
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005140:	bf00      	nop
 8005142:	370c      	adds	r7, #12
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr

0800514c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b082      	sub	sp, #8
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d101      	bne.n	800515e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e040      	b.n	80051e0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005162:	2b00      	cmp	r3, #0
 8005164:	d106      	bne.n	8005174 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f7fb ffa8 	bl	80010c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2224      	movs	r2, #36	; 0x24
 8005178:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f022 0201 	bic.w	r2, r2, #1
 8005188:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f000 f82c 	bl	80051e8 <UART_SetConfig>
 8005190:	4603      	mov	r3, r0
 8005192:	2b01      	cmp	r3, #1
 8005194:	d101      	bne.n	800519a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	e022      	b.n	80051e0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d002      	beq.n	80051a8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f000 faaa 	bl	80056fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	685a      	ldr	r2, [r3, #4]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	689a      	ldr	r2, [r3, #8]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80051c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f042 0201 	orr.w	r2, r2, #1
 80051d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f000 fb31 	bl	8005840 <UART_CheckIdleState>
 80051de:	4603      	mov	r3, r0
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3708      	adds	r7, #8
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051e8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80051ec:	b088      	sub	sp, #32
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80051f2:	2300      	movs	r3, #0
 80051f4:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	689a      	ldr	r2, [r3, #8]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	431a      	orrs	r2, r3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	695b      	ldr	r3, [r3, #20]
 8005204:	431a      	orrs	r2, r3
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	69db      	ldr	r3, [r3, #28]
 800520a:	4313      	orrs	r3, r2
 800520c:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	4bac      	ldr	r3, [pc, #688]	; (80054c8 <UART_SetConfig+0x2e0>)
 8005216:	4013      	ands	r3, r2
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	6812      	ldr	r2, [r2, #0]
 800521c:	69f9      	ldr	r1, [r7, #28]
 800521e:	430b      	orrs	r3, r1
 8005220:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	68da      	ldr	r2, [r3, #12]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	430a      	orrs	r2, r1
 8005236:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	699b      	ldr	r3, [r3, #24]
 800523c:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4aa2      	ldr	r2, [pc, #648]	; (80054cc <UART_SetConfig+0x2e4>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d004      	beq.n	8005252 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6a1b      	ldr	r3, [r3, #32]
 800524c:	69fa      	ldr	r2, [r7, #28]
 800524e:	4313      	orrs	r3, r2
 8005250:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	69fa      	ldr	r2, [r7, #28]
 8005262:	430a      	orrs	r2, r1
 8005264:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a99      	ldr	r2, [pc, #612]	; (80054d0 <UART_SetConfig+0x2e8>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d121      	bne.n	80052b4 <UART_SetConfig+0xcc>
 8005270:	4b98      	ldr	r3, [pc, #608]	; (80054d4 <UART_SetConfig+0x2ec>)
 8005272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005276:	f003 0303 	and.w	r3, r3, #3
 800527a:	2b03      	cmp	r3, #3
 800527c:	d816      	bhi.n	80052ac <UART_SetConfig+0xc4>
 800527e:	a201      	add	r2, pc, #4	; (adr r2, 8005284 <UART_SetConfig+0x9c>)
 8005280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005284:	08005295 	.word	0x08005295
 8005288:	080052a1 	.word	0x080052a1
 800528c:	0800529b 	.word	0x0800529b
 8005290:	080052a7 	.word	0x080052a7
 8005294:	2301      	movs	r3, #1
 8005296:	76fb      	strb	r3, [r7, #27]
 8005298:	e0e8      	b.n	800546c <UART_SetConfig+0x284>
 800529a:	2302      	movs	r3, #2
 800529c:	76fb      	strb	r3, [r7, #27]
 800529e:	e0e5      	b.n	800546c <UART_SetConfig+0x284>
 80052a0:	2304      	movs	r3, #4
 80052a2:	76fb      	strb	r3, [r7, #27]
 80052a4:	e0e2      	b.n	800546c <UART_SetConfig+0x284>
 80052a6:	2308      	movs	r3, #8
 80052a8:	76fb      	strb	r3, [r7, #27]
 80052aa:	e0df      	b.n	800546c <UART_SetConfig+0x284>
 80052ac:	2310      	movs	r3, #16
 80052ae:	76fb      	strb	r3, [r7, #27]
 80052b0:	bf00      	nop
 80052b2:	e0db      	b.n	800546c <UART_SetConfig+0x284>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a87      	ldr	r2, [pc, #540]	; (80054d8 <UART_SetConfig+0x2f0>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d134      	bne.n	8005328 <UART_SetConfig+0x140>
 80052be:	4b85      	ldr	r3, [pc, #532]	; (80054d4 <UART_SetConfig+0x2ec>)
 80052c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052c4:	f003 030c 	and.w	r3, r3, #12
 80052c8:	2b0c      	cmp	r3, #12
 80052ca:	d829      	bhi.n	8005320 <UART_SetConfig+0x138>
 80052cc:	a201      	add	r2, pc, #4	; (adr r2, 80052d4 <UART_SetConfig+0xec>)
 80052ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052d2:	bf00      	nop
 80052d4:	08005309 	.word	0x08005309
 80052d8:	08005321 	.word	0x08005321
 80052dc:	08005321 	.word	0x08005321
 80052e0:	08005321 	.word	0x08005321
 80052e4:	08005315 	.word	0x08005315
 80052e8:	08005321 	.word	0x08005321
 80052ec:	08005321 	.word	0x08005321
 80052f0:	08005321 	.word	0x08005321
 80052f4:	0800530f 	.word	0x0800530f
 80052f8:	08005321 	.word	0x08005321
 80052fc:	08005321 	.word	0x08005321
 8005300:	08005321 	.word	0x08005321
 8005304:	0800531b 	.word	0x0800531b
 8005308:	2300      	movs	r3, #0
 800530a:	76fb      	strb	r3, [r7, #27]
 800530c:	e0ae      	b.n	800546c <UART_SetConfig+0x284>
 800530e:	2302      	movs	r3, #2
 8005310:	76fb      	strb	r3, [r7, #27]
 8005312:	e0ab      	b.n	800546c <UART_SetConfig+0x284>
 8005314:	2304      	movs	r3, #4
 8005316:	76fb      	strb	r3, [r7, #27]
 8005318:	e0a8      	b.n	800546c <UART_SetConfig+0x284>
 800531a:	2308      	movs	r3, #8
 800531c:	76fb      	strb	r3, [r7, #27]
 800531e:	e0a5      	b.n	800546c <UART_SetConfig+0x284>
 8005320:	2310      	movs	r3, #16
 8005322:	76fb      	strb	r3, [r7, #27]
 8005324:	bf00      	nop
 8005326:	e0a1      	b.n	800546c <UART_SetConfig+0x284>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a6b      	ldr	r2, [pc, #428]	; (80054dc <UART_SetConfig+0x2f4>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d120      	bne.n	8005374 <UART_SetConfig+0x18c>
 8005332:	4b68      	ldr	r3, [pc, #416]	; (80054d4 <UART_SetConfig+0x2ec>)
 8005334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005338:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800533c:	2b10      	cmp	r3, #16
 800533e:	d00f      	beq.n	8005360 <UART_SetConfig+0x178>
 8005340:	2b10      	cmp	r3, #16
 8005342:	d802      	bhi.n	800534a <UART_SetConfig+0x162>
 8005344:	2b00      	cmp	r3, #0
 8005346:	d005      	beq.n	8005354 <UART_SetConfig+0x16c>
 8005348:	e010      	b.n	800536c <UART_SetConfig+0x184>
 800534a:	2b20      	cmp	r3, #32
 800534c:	d005      	beq.n	800535a <UART_SetConfig+0x172>
 800534e:	2b30      	cmp	r3, #48	; 0x30
 8005350:	d009      	beq.n	8005366 <UART_SetConfig+0x17e>
 8005352:	e00b      	b.n	800536c <UART_SetConfig+0x184>
 8005354:	2300      	movs	r3, #0
 8005356:	76fb      	strb	r3, [r7, #27]
 8005358:	e088      	b.n	800546c <UART_SetConfig+0x284>
 800535a:	2302      	movs	r3, #2
 800535c:	76fb      	strb	r3, [r7, #27]
 800535e:	e085      	b.n	800546c <UART_SetConfig+0x284>
 8005360:	2304      	movs	r3, #4
 8005362:	76fb      	strb	r3, [r7, #27]
 8005364:	e082      	b.n	800546c <UART_SetConfig+0x284>
 8005366:	2308      	movs	r3, #8
 8005368:	76fb      	strb	r3, [r7, #27]
 800536a:	e07f      	b.n	800546c <UART_SetConfig+0x284>
 800536c:	2310      	movs	r3, #16
 800536e:	76fb      	strb	r3, [r7, #27]
 8005370:	bf00      	nop
 8005372:	e07b      	b.n	800546c <UART_SetConfig+0x284>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a59      	ldr	r2, [pc, #356]	; (80054e0 <UART_SetConfig+0x2f8>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d120      	bne.n	80053c0 <UART_SetConfig+0x1d8>
 800537e:	4b55      	ldr	r3, [pc, #340]	; (80054d4 <UART_SetConfig+0x2ec>)
 8005380:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005384:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005388:	2b40      	cmp	r3, #64	; 0x40
 800538a:	d00f      	beq.n	80053ac <UART_SetConfig+0x1c4>
 800538c:	2b40      	cmp	r3, #64	; 0x40
 800538e:	d802      	bhi.n	8005396 <UART_SetConfig+0x1ae>
 8005390:	2b00      	cmp	r3, #0
 8005392:	d005      	beq.n	80053a0 <UART_SetConfig+0x1b8>
 8005394:	e010      	b.n	80053b8 <UART_SetConfig+0x1d0>
 8005396:	2b80      	cmp	r3, #128	; 0x80
 8005398:	d005      	beq.n	80053a6 <UART_SetConfig+0x1be>
 800539a:	2bc0      	cmp	r3, #192	; 0xc0
 800539c:	d009      	beq.n	80053b2 <UART_SetConfig+0x1ca>
 800539e:	e00b      	b.n	80053b8 <UART_SetConfig+0x1d0>
 80053a0:	2300      	movs	r3, #0
 80053a2:	76fb      	strb	r3, [r7, #27]
 80053a4:	e062      	b.n	800546c <UART_SetConfig+0x284>
 80053a6:	2302      	movs	r3, #2
 80053a8:	76fb      	strb	r3, [r7, #27]
 80053aa:	e05f      	b.n	800546c <UART_SetConfig+0x284>
 80053ac:	2304      	movs	r3, #4
 80053ae:	76fb      	strb	r3, [r7, #27]
 80053b0:	e05c      	b.n	800546c <UART_SetConfig+0x284>
 80053b2:	2308      	movs	r3, #8
 80053b4:	76fb      	strb	r3, [r7, #27]
 80053b6:	e059      	b.n	800546c <UART_SetConfig+0x284>
 80053b8:	2310      	movs	r3, #16
 80053ba:	76fb      	strb	r3, [r7, #27]
 80053bc:	bf00      	nop
 80053be:	e055      	b.n	800546c <UART_SetConfig+0x284>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a47      	ldr	r2, [pc, #284]	; (80054e4 <UART_SetConfig+0x2fc>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d124      	bne.n	8005414 <UART_SetConfig+0x22c>
 80053ca:	4b42      	ldr	r3, [pc, #264]	; (80054d4 <UART_SetConfig+0x2ec>)
 80053cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053d8:	d012      	beq.n	8005400 <UART_SetConfig+0x218>
 80053da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053de:	d802      	bhi.n	80053e6 <UART_SetConfig+0x1fe>
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d007      	beq.n	80053f4 <UART_SetConfig+0x20c>
 80053e4:	e012      	b.n	800540c <UART_SetConfig+0x224>
 80053e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053ea:	d006      	beq.n	80053fa <UART_SetConfig+0x212>
 80053ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053f0:	d009      	beq.n	8005406 <UART_SetConfig+0x21e>
 80053f2:	e00b      	b.n	800540c <UART_SetConfig+0x224>
 80053f4:	2300      	movs	r3, #0
 80053f6:	76fb      	strb	r3, [r7, #27]
 80053f8:	e038      	b.n	800546c <UART_SetConfig+0x284>
 80053fa:	2302      	movs	r3, #2
 80053fc:	76fb      	strb	r3, [r7, #27]
 80053fe:	e035      	b.n	800546c <UART_SetConfig+0x284>
 8005400:	2304      	movs	r3, #4
 8005402:	76fb      	strb	r3, [r7, #27]
 8005404:	e032      	b.n	800546c <UART_SetConfig+0x284>
 8005406:	2308      	movs	r3, #8
 8005408:	76fb      	strb	r3, [r7, #27]
 800540a:	e02f      	b.n	800546c <UART_SetConfig+0x284>
 800540c:	2310      	movs	r3, #16
 800540e:	76fb      	strb	r3, [r7, #27]
 8005410:	bf00      	nop
 8005412:	e02b      	b.n	800546c <UART_SetConfig+0x284>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a2c      	ldr	r2, [pc, #176]	; (80054cc <UART_SetConfig+0x2e4>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d124      	bne.n	8005468 <UART_SetConfig+0x280>
 800541e:	4b2d      	ldr	r3, [pc, #180]	; (80054d4 <UART_SetConfig+0x2ec>)
 8005420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005424:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005428:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800542c:	d012      	beq.n	8005454 <UART_SetConfig+0x26c>
 800542e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005432:	d802      	bhi.n	800543a <UART_SetConfig+0x252>
 8005434:	2b00      	cmp	r3, #0
 8005436:	d007      	beq.n	8005448 <UART_SetConfig+0x260>
 8005438:	e012      	b.n	8005460 <UART_SetConfig+0x278>
 800543a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800543e:	d006      	beq.n	800544e <UART_SetConfig+0x266>
 8005440:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005444:	d009      	beq.n	800545a <UART_SetConfig+0x272>
 8005446:	e00b      	b.n	8005460 <UART_SetConfig+0x278>
 8005448:	2300      	movs	r3, #0
 800544a:	76fb      	strb	r3, [r7, #27]
 800544c:	e00e      	b.n	800546c <UART_SetConfig+0x284>
 800544e:	2302      	movs	r3, #2
 8005450:	76fb      	strb	r3, [r7, #27]
 8005452:	e00b      	b.n	800546c <UART_SetConfig+0x284>
 8005454:	2304      	movs	r3, #4
 8005456:	76fb      	strb	r3, [r7, #27]
 8005458:	e008      	b.n	800546c <UART_SetConfig+0x284>
 800545a:	2308      	movs	r3, #8
 800545c:	76fb      	strb	r3, [r7, #27]
 800545e:	e005      	b.n	800546c <UART_SetConfig+0x284>
 8005460:	2310      	movs	r3, #16
 8005462:	76fb      	strb	r3, [r7, #27]
 8005464:	bf00      	nop
 8005466:	e001      	b.n	800546c <UART_SetConfig+0x284>
 8005468:	2310      	movs	r3, #16
 800546a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a16      	ldr	r2, [pc, #88]	; (80054cc <UART_SetConfig+0x2e4>)
 8005472:	4293      	cmp	r3, r2
 8005474:	f040 8087 	bne.w	8005586 <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005478:	7efb      	ldrb	r3, [r7, #27]
 800547a:	2b08      	cmp	r3, #8
 800547c:	d836      	bhi.n	80054ec <UART_SetConfig+0x304>
 800547e:	a201      	add	r2, pc, #4	; (adr r2, 8005484 <UART_SetConfig+0x29c>)
 8005480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005484:	080054a9 	.word	0x080054a9
 8005488:	080054ed 	.word	0x080054ed
 800548c:	080054b1 	.word	0x080054b1
 8005490:	080054ed 	.word	0x080054ed
 8005494:	080054b7 	.word	0x080054b7
 8005498:	080054ed 	.word	0x080054ed
 800549c:	080054ed 	.word	0x080054ed
 80054a0:	080054ed 	.word	0x080054ed
 80054a4:	080054bf 	.word	0x080054bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054a8:	f7fe fd5c 	bl	8003f64 <HAL_RCC_GetPCLK1Freq>
 80054ac:	6178      	str	r0, [r7, #20]
        break;
 80054ae:	e022      	b.n	80054f6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054b0:	4b0d      	ldr	r3, [pc, #52]	; (80054e8 <UART_SetConfig+0x300>)
 80054b2:	617b      	str	r3, [r7, #20]
        break;
 80054b4:	e01f      	b.n	80054f6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054b6:	f7fe fcbf 	bl	8003e38 <HAL_RCC_GetSysClockFreq>
 80054ba:	6178      	str	r0, [r7, #20]
        break;
 80054bc:	e01b      	b.n	80054f6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054c2:	617b      	str	r3, [r7, #20]
        break;
 80054c4:	e017      	b.n	80054f6 <UART_SetConfig+0x30e>
 80054c6:	bf00      	nop
 80054c8:	efff69f3 	.word	0xefff69f3
 80054cc:	40008000 	.word	0x40008000
 80054d0:	40013800 	.word	0x40013800
 80054d4:	40021000 	.word	0x40021000
 80054d8:	40004400 	.word	0x40004400
 80054dc:	40004800 	.word	0x40004800
 80054e0:	40004c00 	.word	0x40004c00
 80054e4:	40005000 	.word	0x40005000
 80054e8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80054ec:	2300      	movs	r3, #0
 80054ee:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	76bb      	strb	r3, [r7, #26]
        break;
 80054f4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	f000 80f1 	beq.w	80056e0 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	685a      	ldr	r2, [r3, #4]
 8005502:	4613      	mov	r3, r2
 8005504:	005b      	lsls	r3, r3, #1
 8005506:	4413      	add	r3, r2
 8005508:	697a      	ldr	r2, [r7, #20]
 800550a:	429a      	cmp	r2, r3
 800550c:	d305      	bcc.n	800551a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005514:	697a      	ldr	r2, [r7, #20]
 8005516:	429a      	cmp	r2, r3
 8005518:	d902      	bls.n	8005520 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	76bb      	strb	r3, [r7, #26]
 800551e:	e0df      	b.n	80056e0 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	4619      	mov	r1, r3
 8005524:	f04f 0200 	mov.w	r2, #0
 8005528:	f04f 0300 	mov.w	r3, #0
 800552c:	f04f 0400 	mov.w	r4, #0
 8005530:	0214      	lsls	r4, r2, #8
 8005532:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005536:	020b      	lsls	r3, r1, #8
 8005538:	687a      	ldr	r2, [r7, #4]
 800553a:	6852      	ldr	r2, [r2, #4]
 800553c:	0852      	lsrs	r2, r2, #1
 800553e:	4611      	mov	r1, r2
 8005540:	f04f 0200 	mov.w	r2, #0
 8005544:	eb13 0b01 	adds.w	fp, r3, r1
 8005548:	eb44 0c02 	adc.w	ip, r4, r2
 800554c:	4658      	mov	r0, fp
 800554e:	4661      	mov	r1, ip
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	f04f 0400 	mov.w	r4, #0
 8005558:	461a      	mov	r2, r3
 800555a:	4623      	mov	r3, r4
 800555c:	f7fa fe34 	bl	80001c8 <__aeabi_uldivmod>
 8005560:	4603      	mov	r3, r0
 8005562:	460c      	mov	r4, r1
 8005564:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800556c:	d308      	bcc.n	8005580 <UART_SetConfig+0x398>
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005574:	d204      	bcs.n	8005580 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	693a      	ldr	r2, [r7, #16]
 800557c:	60da      	str	r2, [r3, #12]
 800557e:	e0af      	b.n	80056e0 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	76bb      	strb	r3, [r7, #26]
 8005584:	e0ac      	b.n	80056e0 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	69db      	ldr	r3, [r3, #28]
 800558a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800558e:	d15b      	bne.n	8005648 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8005590:	7efb      	ldrb	r3, [r7, #27]
 8005592:	2b08      	cmp	r3, #8
 8005594:	d827      	bhi.n	80055e6 <UART_SetConfig+0x3fe>
 8005596:	a201      	add	r2, pc, #4	; (adr r2, 800559c <UART_SetConfig+0x3b4>)
 8005598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800559c:	080055c1 	.word	0x080055c1
 80055a0:	080055c9 	.word	0x080055c9
 80055a4:	080055d1 	.word	0x080055d1
 80055a8:	080055e7 	.word	0x080055e7
 80055ac:	080055d7 	.word	0x080055d7
 80055b0:	080055e7 	.word	0x080055e7
 80055b4:	080055e7 	.word	0x080055e7
 80055b8:	080055e7 	.word	0x080055e7
 80055bc:	080055df 	.word	0x080055df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055c0:	f7fe fcd0 	bl	8003f64 <HAL_RCC_GetPCLK1Freq>
 80055c4:	6178      	str	r0, [r7, #20]
        break;
 80055c6:	e013      	b.n	80055f0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055c8:	f7fe fce2 	bl	8003f90 <HAL_RCC_GetPCLK2Freq>
 80055cc:	6178      	str	r0, [r7, #20]
        break;
 80055ce:	e00f      	b.n	80055f0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055d0:	4b49      	ldr	r3, [pc, #292]	; (80056f8 <UART_SetConfig+0x510>)
 80055d2:	617b      	str	r3, [r7, #20]
        break;
 80055d4:	e00c      	b.n	80055f0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055d6:	f7fe fc2f 	bl	8003e38 <HAL_RCC_GetSysClockFreq>
 80055da:	6178      	str	r0, [r7, #20]
        break;
 80055dc:	e008      	b.n	80055f0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055e2:	617b      	str	r3, [r7, #20]
        break;
 80055e4:	e004      	b.n	80055f0 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80055e6:	2300      	movs	r3, #0
 80055e8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	76bb      	strb	r3, [r7, #26]
        break;
 80055ee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d074      	beq.n	80056e0 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	005a      	lsls	r2, r3, #1
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	085b      	lsrs	r3, r3, #1
 8005600:	441a      	add	r2, r3
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	fbb2 f3f3 	udiv	r3, r2, r3
 800560a:	b29b      	uxth	r3, r3
 800560c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	2b0f      	cmp	r3, #15
 8005612:	d916      	bls.n	8005642 <UART_SetConfig+0x45a>
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800561a:	d212      	bcs.n	8005642 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	b29b      	uxth	r3, r3
 8005620:	f023 030f 	bic.w	r3, r3, #15
 8005624:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	085b      	lsrs	r3, r3, #1
 800562a:	b29b      	uxth	r3, r3
 800562c:	f003 0307 	and.w	r3, r3, #7
 8005630:	b29a      	uxth	r2, r3
 8005632:	89fb      	ldrh	r3, [r7, #14]
 8005634:	4313      	orrs	r3, r2
 8005636:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	89fa      	ldrh	r2, [r7, #14]
 800563e:	60da      	str	r2, [r3, #12]
 8005640:	e04e      	b.n	80056e0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	76bb      	strb	r3, [r7, #26]
 8005646:	e04b      	b.n	80056e0 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005648:	7efb      	ldrb	r3, [r7, #27]
 800564a:	2b08      	cmp	r3, #8
 800564c:	d827      	bhi.n	800569e <UART_SetConfig+0x4b6>
 800564e:	a201      	add	r2, pc, #4	; (adr r2, 8005654 <UART_SetConfig+0x46c>)
 8005650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005654:	08005679 	.word	0x08005679
 8005658:	08005681 	.word	0x08005681
 800565c:	08005689 	.word	0x08005689
 8005660:	0800569f 	.word	0x0800569f
 8005664:	0800568f 	.word	0x0800568f
 8005668:	0800569f 	.word	0x0800569f
 800566c:	0800569f 	.word	0x0800569f
 8005670:	0800569f 	.word	0x0800569f
 8005674:	08005697 	.word	0x08005697
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005678:	f7fe fc74 	bl	8003f64 <HAL_RCC_GetPCLK1Freq>
 800567c:	6178      	str	r0, [r7, #20]
        break;
 800567e:	e013      	b.n	80056a8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005680:	f7fe fc86 	bl	8003f90 <HAL_RCC_GetPCLK2Freq>
 8005684:	6178      	str	r0, [r7, #20]
        break;
 8005686:	e00f      	b.n	80056a8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005688:	4b1b      	ldr	r3, [pc, #108]	; (80056f8 <UART_SetConfig+0x510>)
 800568a:	617b      	str	r3, [r7, #20]
        break;
 800568c:	e00c      	b.n	80056a8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800568e:	f7fe fbd3 	bl	8003e38 <HAL_RCC_GetSysClockFreq>
 8005692:	6178      	str	r0, [r7, #20]
        break;
 8005694:	e008      	b.n	80056a8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005696:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800569a:	617b      	str	r3, [r7, #20]
        break;
 800569c:	e004      	b.n	80056a8 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800569e:	2300      	movs	r3, #0
 80056a0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	76bb      	strb	r3, [r7, #26]
        break;
 80056a6:	bf00      	nop
    }

    if (pclk != 0U)
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d018      	beq.n	80056e0 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	085a      	lsrs	r2, r3, #1
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	441a      	add	r2, r3
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	2b0f      	cmp	r3, #15
 80056c8:	d908      	bls.n	80056dc <UART_SetConfig+0x4f4>
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056d0:	d204      	bcs.n	80056dc <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	693a      	ldr	r2, [r7, #16]
 80056d8:	60da      	str	r2, [r3, #12]
 80056da:	e001      	b.n	80056e0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2200      	movs	r2, #0
 80056e4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80056ec:	7ebb      	ldrb	r3, [r7, #26]
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3720      	adds	r7, #32
 80056f2:	46bd      	mov	sp, r7
 80056f4:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80056f8:	00f42400 	.word	0x00f42400

080056fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b083      	sub	sp, #12
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005708:	f003 0301 	and.w	r3, r3, #1
 800570c:	2b00      	cmp	r3, #0
 800570e:	d00a      	beq.n	8005726 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	430a      	orrs	r2, r1
 8005724:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572a:	f003 0302 	and.w	r3, r3, #2
 800572e:	2b00      	cmp	r3, #0
 8005730:	d00a      	beq.n	8005748 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	430a      	orrs	r2, r1
 8005746:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574c:	f003 0304 	and.w	r3, r3, #4
 8005750:	2b00      	cmp	r3, #0
 8005752:	d00a      	beq.n	800576a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	430a      	orrs	r2, r1
 8005768:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576e:	f003 0308 	and.w	r3, r3, #8
 8005772:	2b00      	cmp	r3, #0
 8005774:	d00a      	beq.n	800578c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	430a      	orrs	r2, r1
 800578a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005790:	f003 0310 	and.w	r3, r3, #16
 8005794:	2b00      	cmp	r3, #0
 8005796:	d00a      	beq.n	80057ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	430a      	orrs	r2, r1
 80057ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b2:	f003 0320 	and.w	r3, r3, #32
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d00a      	beq.n	80057d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	430a      	orrs	r2, r1
 80057ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d01a      	beq.n	8005812 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	430a      	orrs	r2, r1
 80057f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057fa:	d10a      	bne.n	8005812 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	430a      	orrs	r2, r1
 8005810:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800581a:	2b00      	cmp	r3, #0
 800581c:	d00a      	beq.n	8005834 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	430a      	orrs	r2, r1
 8005832:	605a      	str	r2, [r3, #4]
  }
}
 8005834:	bf00      	nop
 8005836:	370c      	adds	r7, #12
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr

08005840 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b086      	sub	sp, #24
 8005844:	af02      	add	r7, sp, #8
 8005846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800584e:	f7fb fd15 	bl	800127c <HAL_GetTick>
 8005852:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f003 0308 	and.w	r3, r3, #8
 800585e:	2b08      	cmp	r3, #8
 8005860:	d10e      	bne.n	8005880 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005862:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005866:	9300      	str	r3, [sp, #0]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2200      	movs	r2, #0
 800586c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f000 f82a 	bl	80058ca <UART_WaitOnFlagUntilTimeout>
 8005876:	4603      	mov	r3, r0
 8005878:	2b00      	cmp	r3, #0
 800587a:	d001      	beq.n	8005880 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800587c:	2303      	movs	r3, #3
 800587e:	e020      	b.n	80058c2 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 0304 	and.w	r3, r3, #4
 800588a:	2b04      	cmp	r3, #4
 800588c:	d10e      	bne.n	80058ac <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800588e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005892:	9300      	str	r3, [sp, #0]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2200      	movs	r2, #0
 8005898:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f000 f814 	bl	80058ca <UART_WaitOnFlagUntilTimeout>
 80058a2:	4603      	mov	r3, r0
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d001      	beq.n	80058ac <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058a8:	2303      	movs	r3, #3
 80058aa:	e00a      	b.n	80058c2 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2220      	movs	r2, #32
 80058b0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2220      	movs	r2, #32
 80058b6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80058c0:	2300      	movs	r3, #0
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3710      	adds	r7, #16
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}

080058ca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80058ca:	b580      	push	{r7, lr}
 80058cc:	b084      	sub	sp, #16
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	60f8      	str	r0, [r7, #12]
 80058d2:	60b9      	str	r1, [r7, #8]
 80058d4:	603b      	str	r3, [r7, #0]
 80058d6:	4613      	mov	r3, r2
 80058d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058da:	e05d      	b.n	8005998 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058dc:	69bb      	ldr	r3, [r7, #24]
 80058de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058e2:	d059      	beq.n	8005998 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058e4:	f7fb fcca 	bl	800127c <HAL_GetTick>
 80058e8:	4602      	mov	r2, r0
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	1ad3      	subs	r3, r2, r3
 80058ee:	69ba      	ldr	r2, [r7, #24]
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d302      	bcc.n	80058fa <UART_WaitOnFlagUntilTimeout+0x30>
 80058f4:	69bb      	ldr	r3, [r7, #24]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d11b      	bne.n	8005932 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005908:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	689a      	ldr	r2, [r3, #8]
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f022 0201 	bic.w	r2, r2, #1
 8005918:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2220      	movs	r2, #32
 800591e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2220      	movs	r2, #32
 8005924:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2200      	movs	r2, #0
 800592a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800592e:	2303      	movs	r3, #3
 8005930:	e042      	b.n	80059b8 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f003 0304 	and.w	r3, r3, #4
 800593c:	2b00      	cmp	r3, #0
 800593e:	d02b      	beq.n	8005998 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	69db      	ldr	r3, [r3, #28]
 8005946:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800594a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800594e:	d123      	bne.n	8005998 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005958:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005968:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	689a      	ldr	r2, [r3, #8]
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f022 0201 	bic.w	r2, r2, #1
 8005978:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2220      	movs	r2, #32
 800597e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2220      	movs	r2, #32
 8005984:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2220      	movs	r2, #32
 800598a:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2200      	movs	r2, #0
 8005990:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8005994:	2303      	movs	r3, #3
 8005996:	e00f      	b.n	80059b8 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	69da      	ldr	r2, [r3, #28]
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	4013      	ands	r3, r2
 80059a2:	68ba      	ldr	r2, [r7, #8]
 80059a4:	429a      	cmp	r2, r3
 80059a6:	bf0c      	ite	eq
 80059a8:	2301      	moveq	r3, #1
 80059aa:	2300      	movne	r3, #0
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	461a      	mov	r2, r3
 80059b0:	79fb      	ldrb	r3, [r7, #7]
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d092      	beq.n	80058dc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80059b6:	2300      	movs	r3, #0
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3710      	adds	r7, #16
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}

080059c0 <__libc_init_array>:
 80059c0:	b570      	push	{r4, r5, r6, lr}
 80059c2:	4e0d      	ldr	r6, [pc, #52]	; (80059f8 <__libc_init_array+0x38>)
 80059c4:	4c0d      	ldr	r4, [pc, #52]	; (80059fc <__libc_init_array+0x3c>)
 80059c6:	1ba4      	subs	r4, r4, r6
 80059c8:	10a4      	asrs	r4, r4, #2
 80059ca:	2500      	movs	r5, #0
 80059cc:	42a5      	cmp	r5, r4
 80059ce:	d109      	bne.n	80059e4 <__libc_init_array+0x24>
 80059d0:	4e0b      	ldr	r6, [pc, #44]	; (8005a00 <__libc_init_array+0x40>)
 80059d2:	4c0c      	ldr	r4, [pc, #48]	; (8005a04 <__libc_init_array+0x44>)
 80059d4:	f000 f820 	bl	8005a18 <_init>
 80059d8:	1ba4      	subs	r4, r4, r6
 80059da:	10a4      	asrs	r4, r4, #2
 80059dc:	2500      	movs	r5, #0
 80059de:	42a5      	cmp	r5, r4
 80059e0:	d105      	bne.n	80059ee <__libc_init_array+0x2e>
 80059e2:	bd70      	pop	{r4, r5, r6, pc}
 80059e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80059e8:	4798      	blx	r3
 80059ea:	3501      	adds	r5, #1
 80059ec:	e7ee      	b.n	80059cc <__libc_init_array+0xc>
 80059ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80059f2:	4798      	blx	r3
 80059f4:	3501      	adds	r5, #1
 80059f6:	e7f2      	b.n	80059de <__libc_init_array+0x1e>
 80059f8:	08005a80 	.word	0x08005a80
 80059fc:	08005a80 	.word	0x08005a80
 8005a00:	08005a80 	.word	0x08005a80
 8005a04:	08005a84 	.word	0x08005a84

08005a08 <memset>:
 8005a08:	4402      	add	r2, r0
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d100      	bne.n	8005a12 <memset+0xa>
 8005a10:	4770      	bx	lr
 8005a12:	f803 1b01 	strb.w	r1, [r3], #1
 8005a16:	e7f9      	b.n	8005a0c <memset+0x4>

08005a18 <_init>:
 8005a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a1a:	bf00      	nop
 8005a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a1e:	bc08      	pop	{r3}
 8005a20:	469e      	mov	lr, r3
 8005a22:	4770      	bx	lr

08005a24 <_fini>:
 8005a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a26:	bf00      	nop
 8005a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a2a:	bc08      	pop	{r3}
 8005a2c:	469e      	mov	lr, r3
 8005a2e:	4770      	bx	lr
