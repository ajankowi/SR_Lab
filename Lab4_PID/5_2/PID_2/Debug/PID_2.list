
PID_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059b0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08005b38  08005b38  00015b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b80  08005b80  000200d4  2**0
                  CONTENTS
  4 .ARM          00000008  08005b80  08005b80  00015b80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b88  08005b88  000200d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b88  08005b88  00015b88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b8c  08005b8c  00015b8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d4  20000000  08005b90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  200000d4  08005c64  000200d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f8  08005c64  000202f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017133  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002b01  00000000  00000000  00037237  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013f8  00000000  00000000  00039d38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001280  00000000  00000000  0003b130  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029d0c  00000000  00000000  0003c3b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011831  00000000  00000000  000660bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00108c0d  00000000  00000000  000778ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001804fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005428  00000000  00000000  00180578  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000d4 	.word	0x200000d4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005b20 	.word	0x08005b20

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000d8 	.word	0x200000d8
 80001c4:	08005b20 	.word	0x08005b20

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b08a      	sub	sp, #40	; 0x28
 80004cc:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 80004ce:	f107 031c 	add.w	r3, r7, #28
 80004d2:	2200      	movs	r2, #0
 80004d4:	601a      	str	r2, [r3, #0]
 80004d6:	605a      	str	r2, [r3, #4]
 80004d8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80004da:	1d3b      	adds	r3, r7, #4
 80004dc:	2200      	movs	r2, #0
 80004de:	601a      	str	r2, [r3, #0]
 80004e0:	605a      	str	r2, [r3, #4]
 80004e2:	609a      	str	r2, [r3, #8]
 80004e4:	60da      	str	r2, [r3, #12]
 80004e6:	611a      	str	r2, [r3, #16]
 80004e8:	615a      	str	r2, [r3, #20]

  /** Common config
  */
  hadc1.Instance = ADC1;
 80004ea:	4b30      	ldr	r3, [pc, #192]	; (80005ac <MX_ADC1_Init+0xe4>)
 80004ec:	4a30      	ldr	r2, [pc, #192]	; (80005b0 <MX_ADC1_Init+0xe8>)
 80004ee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80004f0:	4b2e      	ldr	r3, [pc, #184]	; (80005ac <MX_ADC1_Init+0xe4>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004f6:	4b2d      	ldr	r3, [pc, #180]	; (80005ac <MX_ADC1_Init+0xe4>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004fc:	4b2b      	ldr	r3, [pc, #172]	; (80005ac <MX_ADC1_Init+0xe4>)
 80004fe:	2200      	movs	r2, #0
 8000500:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000502:	4b2a      	ldr	r3, [pc, #168]	; (80005ac <MX_ADC1_Init+0xe4>)
 8000504:	2200      	movs	r2, #0
 8000506:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000508:	4b28      	ldr	r3, [pc, #160]	; (80005ac <MX_ADC1_Init+0xe4>)
 800050a:	2204      	movs	r2, #4
 800050c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800050e:	4b27      	ldr	r3, [pc, #156]	; (80005ac <MX_ADC1_Init+0xe4>)
 8000510:	2200      	movs	r2, #0
 8000512:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000514:	4b25      	ldr	r3, [pc, #148]	; (80005ac <MX_ADC1_Init+0xe4>)
 8000516:	2200      	movs	r2, #0
 8000518:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800051a:	4b24      	ldr	r3, [pc, #144]	; (80005ac <MX_ADC1_Init+0xe4>)
 800051c:	2201      	movs	r2, #1
 800051e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000520:	4b22      	ldr	r3, [pc, #136]	; (80005ac <MX_ADC1_Init+0xe4>)
 8000522:	2200      	movs	r2, #0
 8000524:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000528:	4b20      	ldr	r3, [pc, #128]	; (80005ac <MX_ADC1_Init+0xe4>)
 800052a:	f44f 62e8 	mov.w	r2, #1856	; 0x740
 800052e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000530:	4b1e      	ldr	r3, [pc, #120]	; (80005ac <MX_ADC1_Init+0xe4>)
 8000532:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000536:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000538:	4b1c      	ldr	r3, [pc, #112]	; (80005ac <MX_ADC1_Init+0xe4>)
 800053a:	2200      	movs	r2, #0
 800053c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000540:	4b1a      	ldr	r3, [pc, #104]	; (80005ac <MX_ADC1_Init+0xe4>)
 8000542:	2200      	movs	r2, #0
 8000544:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000546:	4b19      	ldr	r3, [pc, #100]	; (80005ac <MX_ADC1_Init+0xe4>)
 8000548:	2200      	movs	r2, #0
 800054a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800054e:	4817      	ldr	r0, [pc, #92]	; (80005ac <MX_ADC1_Init+0xe4>)
 8000550:	f001 f8ce 	bl	80016f0 <HAL_ADC_Init>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 800055a:	f000 fadb 	bl	8000b14 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800055e:	2300      	movs	r3, #0
 8000560:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000562:	f107 031c 	add.w	r3, r7, #28
 8000566:	4619      	mov	r1, r3
 8000568:	4810      	ldr	r0, [pc, #64]	; (80005ac <MX_ADC1_Init+0xe4>)
 800056a:	f002 fa23 	bl	80029b4 <HAL_ADCEx_MultiModeConfigChannel>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000574:	f000 face 	bl	8000b14 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000578:	4b0e      	ldr	r3, [pc, #56]	; (80005b4 <MX_ADC1_Init+0xec>)
 800057a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800057c:	2306      	movs	r3, #6
 800057e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8000580:	2304      	movs	r3, #4
 8000582:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000584:	237f      	movs	r3, #127	; 0x7f
 8000586:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000588:	2304      	movs	r3, #4
 800058a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800058c:	2300      	movs	r3, #0
 800058e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000590:	1d3b      	adds	r3, r7, #4
 8000592:	4619      	mov	r1, r3
 8000594:	4805      	ldr	r0, [pc, #20]	; (80005ac <MX_ADC1_Init+0xe4>)
 8000596:	f001 fd6d 	bl	8002074 <HAL_ADC_ConfigChannel>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 80005a0:	f000 fab8 	bl	8000b14 <Error_Handler>
  }

}
 80005a4:	bf00      	nop
 80005a6:	3728      	adds	r7, #40	; 0x28
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	200000f0 	.word	0x200000f0
 80005b0:	50040000 	.word	0x50040000
 80005b4:	3ef08000 	.word	0x3ef08000

080005b8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b08a      	sub	sp, #40	; 0x28
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c0:	f107 0314 	add.w	r3, r7, #20
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
 80005ca:	609a      	str	r2, [r3, #8]
 80005cc:	60da      	str	r2, [r3, #12]
 80005ce:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a19      	ldr	r2, [pc, #100]	; (800063c <HAL_ADC_MspInit+0x84>)
 80005d6:	4293      	cmp	r3, r2
 80005d8:	d12b      	bne.n	8000632 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80005da:	4b19      	ldr	r3, [pc, #100]	; (8000640 <HAL_ADC_MspInit+0x88>)
 80005dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005de:	4a18      	ldr	r2, [pc, #96]	; (8000640 <HAL_ADC_MspInit+0x88>)
 80005e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80005e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005e6:	4b16      	ldr	r3, [pc, #88]	; (8000640 <HAL_ADC_MspInit+0x88>)
 80005e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80005ee:	613b      	str	r3, [r7, #16]
 80005f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f2:	4b13      	ldr	r3, [pc, #76]	; (8000640 <HAL_ADC_MspInit+0x88>)
 80005f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005f6:	4a12      	ldr	r2, [pc, #72]	; (8000640 <HAL_ADC_MspInit+0x88>)
 80005f8:	f043 0302 	orr.w	r3, r3, #2
 80005fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005fe:	4b10      	ldr	r3, [pc, #64]	; (8000640 <HAL_ADC_MspInit+0x88>)
 8000600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000602:	f003 0302 	and.w	r3, r3, #2
 8000606:	60fb      	str	r3, [r7, #12]
 8000608:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800060a:	2301      	movs	r3, #1
 800060c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800060e:	230b      	movs	r3, #11
 8000610:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000612:	2300      	movs	r3, #0
 8000614:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000616:	f107 0314 	add.w	r3, r7, #20
 800061a:	4619      	mov	r1, r3
 800061c:	4809      	ldr	r0, [pc, #36]	; (8000644 <HAL_ADC_MspInit+0x8c>)
 800061e:	f002 fda3 	bl	8003168 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000622:	2200      	movs	r2, #0
 8000624:	2100      	movs	r1, #0
 8000626:	2012      	movs	r0, #18
 8000628:	f002 fb4b 	bl	8002cc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800062c:	2012      	movs	r0, #18
 800062e:	f002 fb64 	bl	8002cfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000632:	bf00      	nop
 8000634:	3728      	adds	r7, #40	; 0x28
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	50040000 	.word	0x50040000
 8000640:	40021000 	.word	0x40021000
 8000644:	48000400 	.word	0x48000400

08000648 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b08a      	sub	sp, #40	; 0x28
 800064c:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 800064e:	1d3b      	adds	r3, r7, #4
 8000650:	2224      	movs	r2, #36	; 0x24
 8000652:	2100      	movs	r1, #0
 8000654:	4618      	mov	r0, r3
 8000656:	f005 fa5b 	bl	8005b10 <memset>

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800065a:	4b12      	ldr	r3, [pc, #72]	; (80006a4 <MX_DAC1_Init+0x5c>)
 800065c:	4a12      	ldr	r2, [pc, #72]	; (80006a8 <MX_DAC1_Init+0x60>)
 800065e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000660:	4810      	ldr	r0, [pc, #64]	; (80006a4 <MX_DAC1_Init+0x5c>)
 8000662:	f002 fb64 	bl	8002d2e <HAL_DAC_Init>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800066c:	f000 fa52 	bl	8000b14 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000670:	2300      	movs	r3, #0
 8000672:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000674:	2300      	movs	r3, #0
 8000676:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000678:	2300      	movs	r3, #0
 800067a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800067c:	2300      	movs	r3, #0
 800067e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000680:	2300      	movs	r3, #0
 8000682:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000684:	1d3b      	adds	r3, r7, #4
 8000686:	2200      	movs	r2, #0
 8000688:	4619      	mov	r1, r3
 800068a:	4806      	ldr	r0, [pc, #24]	; (80006a4 <MX_DAC1_Init+0x5c>)
 800068c:	f002 fc47 	bl	8002f1e <HAL_DAC_ConfigChannel>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000696:	f000 fa3d 	bl	8000b14 <Error_Handler>
  }

}
 800069a:	bf00      	nop
 800069c:	3728      	adds	r7, #40	; 0x28
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	20000154 	.word	0x20000154
 80006a8:	40007400 	.word	0x40007400

080006ac <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b08a      	sub	sp, #40	; 0x28
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b4:	f107 0314 	add.w	r3, r7, #20
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]
 80006c2:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a19      	ldr	r2, [pc, #100]	; (8000730 <HAL_DAC_MspInit+0x84>)
 80006ca:	4293      	cmp	r3, r2
 80006cc:	d12c      	bne.n	8000728 <HAL_DAC_MspInit+0x7c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80006ce:	4b19      	ldr	r3, [pc, #100]	; (8000734 <HAL_DAC_MspInit+0x88>)
 80006d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006d2:	4a18      	ldr	r2, [pc, #96]	; (8000734 <HAL_DAC_MspInit+0x88>)
 80006d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80006d8:	6593      	str	r3, [r2, #88]	; 0x58
 80006da:	4b16      	ldr	r3, [pc, #88]	; (8000734 <HAL_DAC_MspInit+0x88>)
 80006dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80006e2:	613b      	str	r3, [r7, #16]
 80006e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e6:	4b13      	ldr	r3, [pc, #76]	; (8000734 <HAL_DAC_MspInit+0x88>)
 80006e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ea:	4a12      	ldr	r2, [pc, #72]	; (8000734 <HAL_DAC_MspInit+0x88>)
 80006ec:	f043 0301 	orr.w	r3, r3, #1
 80006f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006f2:	4b10      	ldr	r3, [pc, #64]	; (8000734 <HAL_DAC_MspInit+0x88>)
 80006f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f6:	f003 0301 	and.w	r3, r3, #1
 80006fa:	60fb      	str	r3, [r7, #12]
 80006fc:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80006fe:	2310      	movs	r3, #16
 8000700:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000702:	2303      	movs	r3, #3
 8000704:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000706:	2300      	movs	r3, #0
 8000708:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800070a:	f107 0314 	add.w	r3, r7, #20
 800070e:	4619      	mov	r1, r3
 8000710:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000714:	f002 fd28 	bl	8003168 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000718:	2200      	movs	r2, #0
 800071a:	2100      	movs	r1, #0
 800071c:	2036      	movs	r0, #54	; 0x36
 800071e:	f002 fad0 	bl	8002cc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000722:	2036      	movs	r0, #54	; 0x36
 8000724:	f002 fae9 	bl	8002cfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000728:	bf00      	nop
 800072a:	3728      	adds	r7, #40	; 0x28
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	40007400 	.word	0x40007400
 8000734:	40021000 	.word	0x40021000

08000738 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b08a      	sub	sp, #40	; 0x28
 800073c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073e:	f107 0314 	add.w	r3, r7, #20
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
 8000746:	605a      	str	r2, [r3, #4]
 8000748:	609a      	str	r2, [r3, #8]
 800074a:	60da      	str	r2, [r3, #12]
 800074c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074e:	4b2b      	ldr	r3, [pc, #172]	; (80007fc <MX_GPIO_Init+0xc4>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000752:	4a2a      	ldr	r2, [pc, #168]	; (80007fc <MX_GPIO_Init+0xc4>)
 8000754:	f043 0304 	orr.w	r3, r3, #4
 8000758:	64d3      	str	r3, [r2, #76]	; 0x4c
 800075a:	4b28      	ldr	r3, [pc, #160]	; (80007fc <MX_GPIO_Init+0xc4>)
 800075c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075e:	f003 0304 	and.w	r3, r3, #4
 8000762:	613b      	str	r3, [r7, #16]
 8000764:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000766:	4b25      	ldr	r3, [pc, #148]	; (80007fc <MX_GPIO_Init+0xc4>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076a:	4a24      	ldr	r2, [pc, #144]	; (80007fc <MX_GPIO_Init+0xc4>)
 800076c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000770:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000772:	4b22      	ldr	r3, [pc, #136]	; (80007fc <MX_GPIO_Init+0xc4>)
 8000774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077e:	4b1f      	ldr	r3, [pc, #124]	; (80007fc <MX_GPIO_Init+0xc4>)
 8000780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000782:	4a1e      	ldr	r2, [pc, #120]	; (80007fc <MX_GPIO_Init+0xc4>)
 8000784:	f043 0301 	orr.w	r3, r3, #1
 8000788:	64d3      	str	r3, [r2, #76]	; 0x4c
 800078a:	4b1c      	ldr	r3, [pc, #112]	; (80007fc <MX_GPIO_Init+0xc4>)
 800078c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078e:	f003 0301 	and.w	r3, r3, #1
 8000792:	60bb      	str	r3, [r7, #8]
 8000794:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000796:	4b19      	ldr	r3, [pc, #100]	; (80007fc <MX_GPIO_Init+0xc4>)
 8000798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079a:	4a18      	ldr	r2, [pc, #96]	; (80007fc <MX_GPIO_Init+0xc4>)
 800079c:	f043 0302 	orr.w	r3, r3, #2
 80007a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007a2:	4b16      	ldr	r3, [pc, #88]	; (80007fc <MX_GPIO_Init+0xc4>)
 80007a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a6:	f003 0302 	and.w	r3, r3, #2
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007ae:	2200      	movs	r2, #0
 80007b0:	2120      	movs	r1, #32
 80007b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007b6:	f002 fe7f 	bl	80034b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007c0:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <MX_GPIO_Init+0xc8>)
 80007c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007c8:	f107 0314 	add.w	r3, r7, #20
 80007cc:	4619      	mov	r1, r3
 80007ce:	480d      	ldr	r0, [pc, #52]	; (8000804 <MX_GPIO_Init+0xcc>)
 80007d0:	f002 fcca 	bl	8003168 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007d4:	2320      	movs	r3, #32
 80007d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d8:	2301      	movs	r3, #1
 80007da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007dc:	2300      	movs	r3, #0
 80007de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e0:	2300      	movs	r3, #0
 80007e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007e4:	f107 0314 	add.w	r3, r7, #20
 80007e8:	4619      	mov	r1, r3
 80007ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ee:	f002 fcbb 	bl	8003168 <HAL_GPIO_Init>

}
 80007f2:	bf00      	nop
 80007f4:	3728      	adds	r7, #40	; 0x28
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40021000 	.word	0x40021000
 8000800:	10210000 	.word	0x10210000
 8000804:	48000800 	.word	0x48000800

08000808 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1) {
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	4a08      	ldr	r2, [pc, #32]	; (8000834 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000814:	4293      	cmp	r3, r2
 8000816:	d109      	bne.n	800082c <HAL_ADC_ConvCpltCallback+0x24>
		adc_flag = 1;
 8000818:	4b07      	ldr	r3, [pc, #28]	; (8000838 <HAL_ADC_ConvCpltCallback+0x30>)
 800081a:	2201      	movs	r2, #1
 800081c:	601a      	str	r2, [r3, #0]
		adc_value = HAL_ADC_GetValue(&hadc1);
 800081e:	4805      	ldr	r0, [pc, #20]	; (8000834 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000820:	f001 f9ec 	bl	8001bfc <HAL_ADC_GetValue>
 8000824:	4603      	mov	r3, r0
 8000826:	461a      	mov	r2, r3
 8000828:	4b04      	ldr	r3, [pc, #16]	; (800083c <HAL_ADC_ConvCpltCallback+0x34>)
 800082a:	601a      	str	r2, [r3, #0]
	}
}
 800082c:	bf00      	nop
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	200000f0 	.word	0x200000f0
 8000838:	200001c8 	.word	0x200001c8
 800083c:	200001cc 	.word	0x200001cc

08000840 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
	if (htim == &htim7) {
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	4a18      	ldr	r2, [pc, #96]	; (80008ac <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800084c:	4293      	cmp	r3, r2
 800084e:	d127      	bne.n	80008a0 <HAL_TIM_PeriodElapsedCallback+0x60>
		dac_value = sin_wave[dac_index];
 8000850:	4b17      	ldr	r3, [pc, #92]	; (80008b0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000852:	881b      	ldrh	r3, [r3, #0]
 8000854:	b29b      	uxth	r3, r3
 8000856:	461a      	mov	r2, r3
 8000858:	4b16      	ldr	r3, [pc, #88]	; (80008b4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800085a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800085e:	461a      	mov	r2, r3
 8000860:	4b15      	ldr	r3, [pc, #84]	; (80008b8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000862:	601a      	str	r2, [r3, #0]
		++dac_nperiod;
 8000864:	4b15      	ldr	r3, [pc, #84]	; (80008bc <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	b2db      	uxtb	r3, r3
 800086a:	3301      	adds	r3, #1
 800086c:	b2da      	uxtb	r2, r3
 800086e:	4b13      	ldr	r3, [pc, #76]	; (80008bc <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000870:	701a      	strb	r2, [r3, #0]
		if (dac_nperiod >= dac_nperiod_max) {
 8000872:	4b12      	ldr	r3, [pc, #72]	; (80008bc <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	b2db      	uxtb	r3, r3
 8000878:	2b63      	cmp	r3, #99	; 0x63
 800087a:	d911      	bls.n	80008a0 <HAL_TIM_PeriodElapsedCallback+0x60>
			dac_nperiod = 0;
 800087c:	4b0f      	ldr	r3, [pc, #60]	; (80008bc <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800087e:	2200      	movs	r2, #0
 8000880:	701a      	strb	r2, [r3, #0]
			++dac_index;
 8000882:	4b0b      	ldr	r3, [pc, #44]	; (80008b0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000884:	881b      	ldrh	r3, [r3, #0]
 8000886:	b29b      	uxth	r3, r3
 8000888:	3301      	adds	r3, #1
 800088a:	b29a      	uxth	r2, r3
 800088c:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800088e:	801a      	strh	r2, [r3, #0]
			if (dac_index >= 100)
 8000890:	4b07      	ldr	r3, [pc, #28]	; (80008b0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000892:	881b      	ldrh	r3, [r3, #0]
 8000894:	b29b      	uxth	r3, r3
 8000896:	2b63      	cmp	r3, #99	; 0x63
 8000898:	d902      	bls.n	80008a0 <HAL_TIM_PeriodElapsedCallback+0x60>
				dac_index = 0;
 800089a:	4b05      	ldr	r3, [pc, #20]	; (80008b0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800089c:	2200      	movs	r2, #0
 800089e:	801a      	strh	r2, [r3, #0]
		}
	}
}
 80008a0:	bf00      	nop
 80008a2:	370c      	adds	r7, #12
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr
 80008ac:	20000228 	.word	0x20000228
 80008b0:	200001c4 	.word	0x200001c4
 80008b4:	20000000 	.word	0x20000000
 80008b8:	200001d8 	.word	0x200001d8
 80008bc:	200001d4 	.word	0x200001d4

080008c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008c4:	f000 fc80 	bl	80011c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008c8:	f000 f89c 	bl	8000a04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008cc:	f7ff ff34 	bl	8000738 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80008d0:	f000 fbde 	bl	8001090 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80008d4:	f7ff fdf8 	bl	80004c8 <MX_ADC1_Init>
  MX_DAC1_Init();
 80008d8:	f7ff feb6 	bl	8000648 <MX_DAC1_Init>
  MX_TIM6_Init();
 80008dc:	f000 fb2a 	bl	8000f34 <MX_TIM6_Init>
  MX_TIM7_Init();
 80008e0:	f000 fb5e 	bl	8000fa0 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */


  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 80008e4:	2300      	movs	r3, #0
 80008e6:	2200      	movs	r2, #0
 80008e8:	2100      	movs	r1, #0
 80008ea:	483a      	ldr	r0, [pc, #232]	; (80009d4 <main+0x114>)
 80008ec:	f002 fae8 	bl	8002ec0 <HAL_DAC_SetValue>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80008f0:	2100      	movs	r1, #0
 80008f2:	4838      	ldr	r0, [pc, #224]	; (80009d4 <main+0x114>)
 80008f4:	f002 fa3d 	bl	8002d72 <HAL_DAC_Start>
  //PID LOOP
  HAL_TIM_Base_Start(&htim6);
 80008f8:	4837      	ldr	r0, [pc, #220]	; (80009d8 <main+0x118>)
 80008fa:	f004 f94b 	bl	8004b94 <HAL_TIM_Base_Start>
  //DAC DESIRED VALUE
  HAL_TIM_Base_Start_IT(&htim7);
 80008fe:	4837      	ldr	r0, [pc, #220]	; (80009dc <main+0x11c>)
 8000900:	f004 f9b0 	bl	8004c64 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_IT(&hadc1);
 8000904:	4836      	ldr	r0, [pc, #216]	; (80009e0 <main+0x120>)
 8000906:	f001 f847 	bl	8001998 <HAL_ADC_Start_IT>
  //DOBIERZ ODPOWIEDNIE WSPOLCZYNNIKI REGULATORA PID
  pid_init(&pid, 1.0f, 0.0f, 0.0f, 10, 1);
 800090a:	2201      	movs	r2, #1
 800090c:	210a      	movs	r1, #10
 800090e:	ed9f 1a35 	vldr	s2, [pc, #212]	; 80009e4 <main+0x124>
 8000912:	eddf 0a34 	vldr	s1, [pc, #208]	; 80009e4 <main+0x124>
 8000916:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800091a:	4833      	ldr	r0, [pc, #204]	; (80009e8 <main+0x128>)
 800091c:	f000 f901 	bl	8000b22 <pid_init>
  pid.p_max = pid_scale(&pid, 4095);
 8000920:	ed9f 0a32 	vldr	s0, [pc, #200]	; 80009ec <main+0x12c>
 8000924:	4830      	ldr	r0, [pc, #192]	; (80009e8 <main+0x128>)
 8000926:	f000 fa41 	bl	8000dac <pid_scale>
 800092a:	4602      	mov	r2, r0
 800092c:	4b2e      	ldr	r3, [pc, #184]	; (80009e8 <main+0x128>)
 800092e:	619a      	str	r2, [r3, #24]
  pid.p_min = pid_scale(&pid, -4095);
 8000930:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 80009f0 <main+0x130>
 8000934:	482c      	ldr	r0, [pc, #176]	; (80009e8 <main+0x128>)
 8000936:	f000 fa39 	bl	8000dac <pid_scale>
 800093a:	4602      	mov	r2, r0
 800093c:	4b2a      	ldr	r3, [pc, #168]	; (80009e8 <main+0x128>)
 800093e:	625a      	str	r2, [r3, #36]	; 0x24
  pid.i_max = pid_scale(&pid, 4095);
 8000940:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 80009ec <main+0x12c>
 8000944:	4828      	ldr	r0, [pc, #160]	; (80009e8 <main+0x128>)
 8000946:	f000 fa31 	bl	8000dac <pid_scale>
 800094a:	4602      	mov	r2, r0
 800094c:	4b26      	ldr	r3, [pc, #152]	; (80009e8 <main+0x128>)
 800094e:	61da      	str	r2, [r3, #28]
  pid.i_min = pid_scale(&pid, -4095);
 8000950:	ed9f 0a27 	vldr	s0, [pc, #156]	; 80009f0 <main+0x130>
 8000954:	4824      	ldr	r0, [pc, #144]	; (80009e8 <main+0x128>)
 8000956:	f000 fa29 	bl	8000dac <pid_scale>
 800095a:	4602      	mov	r2, r0
 800095c:	4b22      	ldr	r3, [pc, #136]	; (80009e8 <main+0x128>)
 800095e:	629a      	str	r2, [r3, #40]	; 0x28
  pid.d_max = pid_scale(&pid, 4095);
 8000960:	ed9f 0a22 	vldr	s0, [pc, #136]	; 80009ec <main+0x12c>
 8000964:	4820      	ldr	r0, [pc, #128]	; (80009e8 <main+0x128>)
 8000966:	f000 fa21 	bl	8000dac <pid_scale>
 800096a:	4602      	mov	r2, r0
 800096c:	4b1e      	ldr	r3, [pc, #120]	; (80009e8 <main+0x128>)
 800096e:	621a      	str	r2, [r3, #32]
  pid.d_min = pid_scale(&pid, -4095);
 8000970:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 80009f0 <main+0x130>
 8000974:	481c      	ldr	r0, [pc, #112]	; (80009e8 <main+0x128>)
 8000976:	f000 fa19 	bl	8000dac <pid_scale>
 800097a:	4602      	mov	r2, r0
 800097c:	4b1a      	ldr	r3, [pc, #104]	; (80009e8 <main+0x128>)
 800097e:	62da      	str	r2, [r3, #44]	; 0x2c
  pid.total_max = pid_scale(&pid, 4095);
 8000980:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 80009ec <main+0x12c>
 8000984:	4818      	ldr	r0, [pc, #96]	; (80009e8 <main+0x128>)
 8000986:	f000 fa11 	bl	8000dac <pid_scale>
 800098a:	4602      	mov	r2, r0
 800098c:	4b16      	ldr	r3, [pc, #88]	; (80009e8 <main+0x128>)
 800098e:	649a      	str	r2, [r3, #72]	; 0x48
  pid.total_min = pid_scale(&pid, 0);
 8000990:	ed9f 0a14 	vldr	s0, [pc, #80]	; 80009e4 <main+0x124>
 8000994:	4814      	ldr	r0, [pc, #80]	; (80009e8 <main+0x128>)
 8000996:	f000 fa09 	bl	8000dac <pid_scale>
 800099a:	4602      	mov	r2, r0
 800099c:	4b12      	ldr	r3, [pc, #72]	; (80009e8 <main+0x128>)
 800099e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (adc_flag == 1) {
 80009a0:	4b14      	ldr	r3, [pc, #80]	; (80009f4 <main+0x134>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	2b01      	cmp	r3, #1
 80009a6:	d1fb      	bne.n	80009a0 <main+0xe0>
		  adc_flag = 0;
 80009a8:	4b12      	ldr	r3, [pc, #72]	; (80009f4 <main+0x134>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
		  dac_control = pid_calc(&pid, adc_value, dac_value);
 80009ae:	4b12      	ldr	r3, [pc, #72]	; (80009f8 <main+0x138>)
 80009b0:	6819      	ldr	r1, [r3, #0]
 80009b2:	4b12      	ldr	r3, [pc, #72]	; (80009fc <main+0x13c>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	461a      	mov	r2, r3
 80009b8:	480b      	ldr	r0, [pc, #44]	; (80009e8 <main+0x128>)
 80009ba:	f000 f93d 	bl	8000c38 <pid_calc>
 80009be:	4602      	mov	r2, r0
 80009c0:	4b0f      	ldr	r3, [pc, #60]	; (8000a00 <main+0x140>)
 80009c2:	601a      	str	r2, [r3, #0]
		  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,dac_control);
 80009c4:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <main+0x140>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	2200      	movs	r2, #0
 80009ca:	2100      	movs	r1, #0
 80009cc:	4801      	ldr	r0, [pc, #4]	; (80009d4 <main+0x114>)
 80009ce:	f002 fa77 	bl	8002ec0 <HAL_DAC_SetValue>
	  if (adc_flag == 1) {
 80009d2:	e7e5      	b.n	80009a0 <main+0xe0>
 80009d4:	20000154 	.word	0x20000154
 80009d8:	200001dc 	.word	0x200001dc
 80009dc:	20000228 	.word	0x20000228
 80009e0:	200000f0 	.word	0x200000f0
 80009e4:	00000000 	.word	0x00000000
 80009e8:	20000168 	.word	0x20000168
 80009ec:	457ff000 	.word	0x457ff000
 80009f0:	c57ff000 	.word	0xc57ff000
 80009f4:	200001c8 	.word	0x200001c8
 80009f8:	200001cc 	.word	0x200001cc
 80009fc:	200001d8 	.word	0x200001d8
 8000a00:	200001c0 	.word	0x200001c0

08000a04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b0b8      	sub	sp, #224	; 0xe0
 8000a08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a0a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a0e:	2244      	movs	r2, #68	; 0x44
 8000a10:	2100      	movs	r1, #0
 8000a12:	4618      	mov	r0, r3
 8000a14:	f005 f87c 	bl	8005b10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a18:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a28:	463b      	mov	r3, r7
 8000a2a:	2288      	movs	r2, #136	; 0x88
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f005 f86e 	bl	8005b10 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a34:	2302      	movs	r3, #2
 8000a36:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a3e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a42:	2310      	movs	r3, #16
 8000a44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a54:	2301      	movs	r3, #1
 8000a56:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000a5a:	230a      	movs	r3, #10
 8000a5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a60:	2307      	movs	r3, #7
 8000a62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a66:	2302      	movs	r3, #2
 8000a68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a72:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a76:	4618      	mov	r0, r3
 8000a78:	f002 fd9a 	bl	80035b0 <HAL_RCC_OscConfig>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000a82:	f000 f847 	bl	8000b14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a86:	230f      	movs	r3, #15
 8000a88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a8c:	2303      	movs	r3, #3
 8000a8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a92:	2300      	movs	r3, #0
 8000a94:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000aa4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000aa8:	2104      	movs	r1, #4
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f003 f966 	bl	8003d7c <HAL_RCC_ClockConfig>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000ab6:	f000 f82d 	bl	8000b14 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 8000aba:	f244 0302 	movw	r3, #16386	; 0x4002
 8000abe:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000ac4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ac8:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000aca:	2302      	movs	r3, #2
 8000acc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000ad2:	2308      	movs	r3, #8
 8000ad4:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000ad6:	2307      	movs	r3, #7
 8000ad8:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000ada:	2302      	movs	r3, #2
 8000adc:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000ae2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ae6:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ae8:	463b      	mov	r3, r7
 8000aea:	4618      	mov	r0, r3
 8000aec:	f003 fb4a 	bl	8004184 <HAL_RCCEx_PeriphCLKConfig>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000af6:	f000 f80d 	bl	8000b14 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000afa:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000afe:	f002 fd01 	bl	8003504 <HAL_PWREx_ControlVoltageScaling>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <SystemClock_Config+0x108>
  {
    Error_Handler();
 8000b08:	f000 f804 	bl	8000b14 <Error_Handler>
  }
}
 8000b0c:	bf00      	nop
 8000b0e:	37e0      	adds	r7, #224	; 0xe0
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}

08000b14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr

08000b22 <pid_init>:
* Created on: 09.03.2018
* Author: Wojciech Domski
*/
#include "pid.h"

void pid_init(cpid_t * pid, float p, float i, float d, uint8_t f, int32_t dt_ms) {
 8000b22:	b480      	push	{r7}
 8000b24:	b089      	sub	sp, #36	; 0x24
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	6178      	str	r0, [r7, #20]
 8000b2a:	ed87 0a04 	vstr	s0, [r7, #16]
 8000b2e:	edc7 0a03 	vstr	s1, [r7, #12]
 8000b32:	ed87 1a02 	vstr	s2, [r7, #8]
 8000b36:	460b      	mov	r3, r1
 8000b38:	603a      	str	r2, [r7, #0]
 8000b3a:	71fb      	strb	r3, [r7, #7]
	uint32_t k;
	pid->power = 1;
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	2201      	movs	r2, #1
 8000b40:	635a      	str	r2, [r3, #52]	; 0x34
	for (k = 0; k < f; ++k) {
 8000b42:	2300      	movs	r3, #0
 8000b44:	61fb      	str	r3, [r7, #28]
 8000b46:	e007      	b.n	8000b58 <pid_init+0x36>
		pid->power = pid->power * 2;
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b4c:	005a      	lsls	r2, r3, #1
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	635a      	str	r2, [r3, #52]	; 0x34
	for (k = 0; k < f; ++k) {
 8000b52:	69fb      	ldr	r3, [r7, #28]
 8000b54:	3301      	adds	r3, #1
 8000b56:	61fb      	str	r3, [r7, #28]
 8000b58:	79fb      	ldrb	r3, [r7, #7]
 8000b5a:	69fa      	ldr	r2, [r7, #28]
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	d3f3      	bcc.n	8000b48 <pid_init+0x26>
	}
	pid->f = f;
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	79fa      	ldrb	r2, [r7, #7]
 8000b64:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	pid->p = (int32_t) (p * pid->power);
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b6c:	ee07 3a90 	vmov	s15, r3
 8000b70:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000b74:	edd7 7a04 	vldr	s15, [r7, #16]
 8000b78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b80:	ee17 2a90 	vmov	r2, s15
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	601a      	str	r2, [r3, #0]
	pid->i = (int32_t) (i * pid->power);
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b8c:	ee07 3a90 	vmov	s15, r3
 8000b90:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000b94:	edd7 7a03 	vldr	s15, [r7, #12]
 8000b98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ba0:	ee17 2a90 	vmov	r2, s15
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	605a      	str	r2, [r3, #4]
	pid->d = (int32_t) (d * pid->power);
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bac:	ee07 3a90 	vmov	s15, r3
 8000bb0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000bb4:	edd7 7a02 	vldr	s15, [r7, #8]
 8000bb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000bc0:	ee17 2a90 	vmov	r2, s15
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	609a      	str	r2, [r3, #8]
	pid->p_val = 0;
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	2200      	movs	r2, #0
 8000bcc:	60da      	str	r2, [r3, #12]
	pid->i_val = 0;
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	611a      	str	r2, [r3, #16]
	pid->d_val = 0;
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	615a      	str	r2, [r3, #20]
	pid->p_max = INT32_MAX;
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8000be0:	619a      	str	r2, [r3, #24]
	pid->p_min = INT32_MIN;
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000be8:	625a      	str	r2, [r3, #36]	; 0x24
	pid->i_max = INT32_MAX;
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8000bf0:	61da      	str	r2, [r3, #28]
	pid->i_min = INT32_MIN;
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000bf8:	629a      	str	r2, [r3, #40]	; 0x28
	pid->d_max = INT32_MAX;
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8000c00:	621a      	str	r2, [r3, #32]
	pid->d_min = INT32_MIN;
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000c08:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->e_last = 0;
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	641a      	str	r2, [r3, #64]	; 0x40
	pid->sum = 0;
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	2200      	movs	r2, #0
 8000c14:	645a      	str	r2, [r3, #68]	; 0x44
	pid->total_max = INT32_MAX;
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8000c1c:	649a      	str	r2, [r3, #72]	; 0x48
	pid->total_min = INT32_MIN;
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000c24:	64da      	str	r2, [r3, #76]	; 0x4c
	pid->dt_ms = dt_ms;
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	683a      	ldr	r2, [r7, #0]
 8000c2a:	655a      	str	r2, [r3, #84]	; 0x54
}
 8000c2c:	bf00      	nop
 8000c2e:	3724      	adds	r7, #36	; 0x24
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr

08000c38 <pid_calc>:

int32_t pid_calc(cpid_t * pid, int32_t mv, int32_t dv) {
 8000c38:	b480      	push	{r7}
 8000c3a:	b08b      	sub	sp, #44	; 0x2c
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	60f8      	str	r0, [r7, #12]
 8000c40:	60b9      	str	r1, [r7, #8]
 8000c42:	607a      	str	r2, [r7, #4]

	int32_t p, i, d, e, total;
	pid->mv = mv;
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	68ba      	ldr	r2, [r7, #8]
 8000c48:	63da      	str	r2, [r3, #60]	; 0x3c
	pid->dv = dv;
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	687a      	ldr	r2, [r7, #4]
 8000c4e:	639a      	str	r2, [r3, #56]	; 0x38

	//UZUPELNIJ WYLICZANIE BLEDU
	e = dv - mv;
 8000c50:	687a      	ldr	r2, [r7, #4]
 8000c52:	68bb      	ldr	r3, [r7, #8]
 8000c54:	1ad3      	subs	r3, r2, r3
 8000c56:	617b      	str	r3, [r7, #20]

	//UZUPELNIJ WYLICZANIE SYGNALU PRZEZ CZLON PROPORCJONALNY
	p = pid->p * e;
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	fb02 f303 	mul.w	r3, r2, r3
 8000c62:	627b      	str	r3, [r7, #36]	; 0x24

	if (p > pid->p_max)
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	699b      	ldr	r3, [r3, #24]
 8000c68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c6a:	429a      	cmp	r2, r3
 8000c6c:	dd03      	ble.n	8000c76 <pid_calc+0x3e>
		p = pid->p_max;
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	699b      	ldr	r3, [r3, #24]
 8000c72:	627b      	str	r3, [r7, #36]	; 0x24
 8000c74:	e007      	b.n	8000c86 <pid_calc+0x4e>
	else if (p < pid->p_min)
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	da02      	bge.n	8000c86 <pid_calc+0x4e>
		p = pid->p_min;
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c84:	627b      	str	r3, [r7, #36]	; 0x24
	pid->p_val = p >> pid->f;
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c90:	fa43 f202 	asr.w	r2, r3, r2
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	60da      	str	r2, [r3, #12]
	i = pid->sum;
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9c:	623b      	str	r3, [r7, #32]

	//UZUPELNIJ WYLICZANIE SYGNALU PRZEZ CZLON CALKUJACY
	//PAMIETAJ O SKALOWANIU CZASU WYKONYWANIA PETLI DO SEKUND
	i += pid->dt_ms * pid->i * e / 1000;;
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ca2:	68fa      	ldr	r2, [r7, #12]
 8000ca4:	6852      	ldr	r2, [r2, #4]
 8000ca6:	fb02 f303 	mul.w	r3, r2, r3
 8000caa:	697a      	ldr	r2, [r7, #20]
 8000cac:	fb02 f303 	mul.w	r3, r2, r3
 8000cb0:	4a3d      	ldr	r2, [pc, #244]	; (8000da8 <pid_calc+0x170>)
 8000cb2:	fb82 1203 	smull	r1, r2, r2, r3
 8000cb6:	1192      	asrs	r2, r2, #6
 8000cb8:	17db      	asrs	r3, r3, #31
 8000cba:	1ad3      	subs	r3, r2, r3
 8000cbc:	6a3a      	ldr	r2, [r7, #32]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	623b      	str	r3, [r7, #32]

	if (i > pid->i_max)
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	69db      	ldr	r3, [r3, #28]
 8000cc6:	6a3a      	ldr	r2, [r7, #32]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	dd03      	ble.n	8000cd4 <pid_calc+0x9c>
		i = pid->i_max;
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	69db      	ldr	r3, [r3, #28]
 8000cd0:	623b      	str	r3, [r7, #32]
 8000cd2:	e007      	b.n	8000ce4 <pid_calc+0xac>
	else if (i < pid->i_min)
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cd8:	6a3a      	ldr	r2, [r7, #32]
 8000cda:	429a      	cmp	r2, r3
 8000cdc:	da02      	bge.n	8000ce4 <pid_calc+0xac>
		i = pid->i_min;
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ce2:	623b      	str	r3, [r7, #32]

	pid->sum = i;
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	6a3a      	ldr	r2, [r7, #32]
 8000ce8:	645a      	str	r2, [r3, #68]	; 0x44
	pid->i_val = i >> pid->f;
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	6a3b      	ldr	r3, [r7, #32]
 8000cf4:	fa43 f202 	asr.w	r2, r3, r2
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	611a      	str	r2, [r3, #16]

	//UZUPELNIJ WYLICZANIE SYGNALU PRZEZ CZLON ROZNICZKUJACEGO
	//PAMIETAJ O SKALOWANIU CZASU WYKONYWANIA PETLI DO SEKUND
	d = pid->d * (e - pid->e_last) * 1000 / pid->dt_ms;;
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	689b      	ldr	r3, [r3, #8]
 8000d00:	68fa      	ldr	r2, [r7, #12]
 8000d02:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000d04:	6979      	ldr	r1, [r7, #20]
 8000d06:	1a8a      	subs	r2, r1, r2
 8000d08:	fb02 f303 	mul.w	r3, r2, r3
 8000d0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d10:	fb02 f203 	mul.w	r2, r2, r3
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d18:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d1c:	61fb      	str	r3, [r7, #28]

	if (d > pid->d_max)
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	6a1b      	ldr	r3, [r3, #32]
 8000d22:	69fa      	ldr	r2, [r7, #28]
 8000d24:	429a      	cmp	r2, r3
 8000d26:	dd03      	ble.n	8000d30 <pid_calc+0xf8>
		d = pid->d_max;
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	6a1b      	ldr	r3, [r3, #32]
 8000d2c:	61fb      	str	r3, [r7, #28]
 8000d2e:	e007      	b.n	8000d40 <pid_calc+0x108>
	else if (d < pid->d_min)
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d34:	69fa      	ldr	r2, [r7, #28]
 8000d36:	429a      	cmp	r2, r3
 8000d38:	da02      	bge.n	8000d40 <pid_calc+0x108>
		d = pid->d_min;
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d3e:	61fb      	str	r3, [r7, #28]

	pid->d_val = d >> pid->f;
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000d46:	461a      	mov	r2, r3
 8000d48:	69fb      	ldr	r3, [r7, #28]
 8000d4a:	fa43 f202 	asr.w	r2, r3, r2
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	615a      	str	r2, [r3, #20]
	total = p + i + d;
 8000d52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d54:	6a3b      	ldr	r3, [r7, #32]
 8000d56:	4413      	add	r3, r2
 8000d58:	69fa      	ldr	r2, [r7, #28]
 8000d5a:	4413      	add	r3, r2
 8000d5c:	61bb      	str	r3, [r7, #24]
	if (total > pid->total_max)
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d62:	69ba      	ldr	r2, [r7, #24]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	dd03      	ble.n	8000d70 <pid_calc+0x138>
		total = pid->total_max;
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d6c:	61bb      	str	r3, [r7, #24]
 8000d6e:	e007      	b.n	8000d80 <pid_calc+0x148>
	else if (total < pid->total_min)
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d74:	69ba      	ldr	r2, [r7, #24]
 8000d76:	429a      	cmp	r2, r3
 8000d78:	da02      	bge.n	8000d80 <pid_calc+0x148>
		total = pid->total_min;
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d7e:	61bb      	str	r3, [r7, #24]

	pid->control = total >> pid->f;
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000d86:	461a      	mov	r2, r3
 8000d88:	69bb      	ldr	r3, [r7, #24]
 8000d8a:	fa43 f202 	asr.w	r2, r3, r2
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	651a      	str	r2, [r3, #80]	; 0x50
	pid->e_last = e;
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	697a      	ldr	r2, [r7, #20]
 8000d96:	641a      	str	r2, [r3, #64]	; 0x40
	return pid->control;
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	372c      	adds	r7, #44	; 0x2c
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	10624dd3 	.word	0x10624dd3

08000dac <pid_scale>:

int32_t pid_scale(cpid_t * pid, float v) {
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	ed87 0a00 	vstr	s0, [r7]
	return v * pid->power;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dbc:	ee07 3a90 	vmov	s15, r3
 8000dc0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000dc4:	edd7 7a00 	vldr	s15, [r7]
 8000dc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000dcc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000dd0:	ee17 3a90 	vmov	r3, s15
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr

08000de0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000de6:	4b0f      	ldr	r3, [pc, #60]	; (8000e24 <HAL_MspInit+0x44>)
 8000de8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dea:	4a0e      	ldr	r2, [pc, #56]	; (8000e24 <HAL_MspInit+0x44>)
 8000dec:	f043 0301 	orr.w	r3, r3, #1
 8000df0:	6613      	str	r3, [r2, #96]	; 0x60
 8000df2:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <HAL_MspInit+0x44>)
 8000df4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000df6:	f003 0301 	and.w	r3, r3, #1
 8000dfa:	607b      	str	r3, [r7, #4]
 8000dfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dfe:	4b09      	ldr	r3, [pc, #36]	; (8000e24 <HAL_MspInit+0x44>)
 8000e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e02:	4a08      	ldr	r2, [pc, #32]	; (8000e24 <HAL_MspInit+0x44>)
 8000e04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e08:	6593      	str	r3, [r2, #88]	; 0x58
 8000e0a:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <HAL_MspInit+0x44>)
 8000e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e12:	603b      	str	r3, [r7, #0]
 8000e14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e16:	bf00      	nop
 8000e18:	370c      	adds	r7, #12
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	40021000 	.word	0x40021000

08000e28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr

08000e36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e36:	b480      	push	{r7}
 8000e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e3a:	e7fe      	b.n	8000e3a <HardFault_Handler+0x4>

08000e3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e40:	e7fe      	b.n	8000e40 <MemManage_Handler+0x4>

08000e42 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e42:	b480      	push	{r7}
 8000e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e46:	e7fe      	b.n	8000e46 <BusFault_Handler+0x4>

08000e48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e4c:	e7fe      	b.n	8000e4c <UsageFault_Handler+0x4>

08000e4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e52:	bf00      	nop
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr

08000e5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr

08000e6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr

08000e78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e7c:	f000 fa00 	bl	8001280 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e80:	bf00      	nop
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000e88:	4802      	ldr	r0, [pc, #8]	; (8000e94 <ADC1_2_IRQHandler+0x10>)
 8000e8a:	f000 fec5 	bl	8001c18 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	200000f0 	.word	0x200000f0

08000e98 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e9c:	4803      	ldr	r0, [pc, #12]	; (8000eac <TIM6_DAC_IRQHandler+0x14>)
 8000e9e:	f003 ff51 	bl	8004d44 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8000ea2:	4803      	ldr	r0, [pc, #12]	; (8000eb0 <TIM6_DAC_IRQHandler+0x18>)
 8000ea4:	f001 ffb2 	bl	8002e0c <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ea8:	bf00      	nop
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	200001dc 	.word	0x200001dc
 8000eb0:	20000154 	.word	0x20000154

08000eb4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000eb8:	4802      	ldr	r0, [pc, #8]	; (8000ec4 <TIM7_IRQHandler+0x10>)
 8000eba:	f003 ff43 	bl	8004d44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	20000228 	.word	0x20000228

08000ec8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ecc:	4b17      	ldr	r3, [pc, #92]	; (8000f2c <SystemInit+0x64>)
 8000ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ed2:	4a16      	ldr	r2, [pc, #88]	; (8000f2c <SystemInit+0x64>)
 8000ed4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ed8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000edc:	4b14      	ldr	r3, [pc, #80]	; (8000f30 <SystemInit+0x68>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a13      	ldr	r2, [pc, #76]	; (8000f30 <SystemInit+0x68>)
 8000ee2:	f043 0301 	orr.w	r3, r3, #1
 8000ee6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000ee8:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <SystemInit+0x68>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000eee:	4b10      	ldr	r3, [pc, #64]	; (8000f30 <SystemInit+0x68>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a0f      	ldr	r2, [pc, #60]	; (8000f30 <SystemInit+0x68>)
 8000ef4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000ef8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000efc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000efe:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <SystemInit+0x68>)
 8000f00:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f04:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f06:	4b0a      	ldr	r3, [pc, #40]	; (8000f30 <SystemInit+0x68>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a09      	ldr	r2, [pc, #36]	; (8000f30 <SystemInit+0x68>)
 8000f0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f10:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000f12:	4b07      	ldr	r3, [pc, #28]	; (8000f30 <SystemInit+0x68>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f18:	4b04      	ldr	r3, [pc, #16]	; (8000f2c <SystemInit+0x64>)
 8000f1a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f1e:	609a      	str	r2, [r3, #8]
#endif
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	e000ed00 	.word	0xe000ed00
 8000f30:	40021000 	.word	0x40021000

08000f34 <MX_TIM6_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f3a:	1d3b      	adds	r3, r7, #4
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 8000f44:	4b14      	ldr	r3, [pc, #80]	; (8000f98 <MX_TIM6_Init+0x64>)
 8000f46:	4a15      	ldr	r2, [pc, #84]	; (8000f9c <MX_TIM6_Init+0x68>)
 8000f48:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = TIM_PID_LOOP_PRESCALER;
 8000f4a:	4b13      	ldr	r3, [pc, #76]	; (8000f98 <MX_TIM6_Init+0x64>)
 8000f4c:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000f50:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f52:	4b11      	ldr	r3, [pc, #68]	; (8000f98 <MX_TIM6_Init+0x64>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = TIM_PID_LOOP_PERIOD;
 8000f58:	4b0f      	ldr	r3, [pc, #60]	; (8000f98 <MX_TIM6_Init+0x64>)
 8000f5a:	229f      	movs	r2, #159	; 0x9f
 8000f5c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f5e:	4b0e      	ldr	r3, [pc, #56]	; (8000f98 <MX_TIM6_Init+0x64>)
 8000f60:	2280      	movs	r2, #128	; 0x80
 8000f62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000f64:	480c      	ldr	r0, [pc, #48]	; (8000f98 <MX_TIM6_Init+0x64>)
 8000f66:	f003 fdbd 	bl	8004ae4 <HAL_TIM_Base_Init>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000f70:	f7ff fdd0 	bl	8000b14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000f74:	2320      	movs	r3, #32
 8000f76:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000f7c:	1d3b      	adds	r3, r7, #4
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4805      	ldr	r0, [pc, #20]	; (8000f98 <MX_TIM6_Init+0x64>)
 8000f82:	f004 f8c1 	bl	8005108 <HAL_TIMEx_MasterConfigSynchronization>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000f8c:	f7ff fdc2 	bl	8000b14 <Error_Handler>
  }

}
 8000f90:	bf00      	nop
 8000f92:	3710      	adds	r7, #16
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	200001dc 	.word	0x200001dc
 8000f9c:	40001000 	.word	0x40001000

08000fa0 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fa6:	1d3b      	adds	r3, r7, #4
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]

  htim7.Instance = TIM7;
 8000fb0:	4b14      	ldr	r3, [pc, #80]	; (8001004 <MX_TIM7_Init+0x64>)
 8000fb2:	4a15      	ldr	r2, [pc, #84]	; (8001008 <MX_TIM7_Init+0x68>)
 8000fb4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = TIM_DAC_PRESCALER;
 8000fb6:	4b13      	ldr	r3, [pc, #76]	; (8001004 <MX_TIM7_Init+0x64>)
 8000fb8:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000fbc:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fbe:	4b11      	ldr	r3, [pc, #68]	; (8001004 <MX_TIM7_Init+0x64>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = TIM_DAC_PERIOD;
 8000fc4:	4b0f      	ldr	r3, [pc, #60]	; (8001004 <MX_TIM7_Init+0x64>)
 8000fc6:	229f      	movs	r2, #159	; 0x9f
 8000fc8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fca:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <MX_TIM7_Init+0x64>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000fd0:	480c      	ldr	r0, [pc, #48]	; (8001004 <MX_TIM7_Init+0x64>)
 8000fd2:	f003 fd87 	bl	8004ae4 <HAL_TIM_Base_Init>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000fdc:	f7ff fd9a 	bl	8000b14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000fe8:	1d3b      	adds	r3, r7, #4
 8000fea:	4619      	mov	r1, r3
 8000fec:	4805      	ldr	r0, [pc, #20]	; (8001004 <MX_TIM7_Init+0x64>)
 8000fee:	f004 f88b 	bl	8005108 <HAL_TIMEx_MasterConfigSynchronization>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000ff8:	f7ff fd8c 	bl	8000b14 <Error_Handler>
  }

}
 8000ffc:	bf00      	nop
 8000ffe:	3710      	adds	r7, #16
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20000228 	.word	0x20000228
 8001008:	40001400 	.word	0x40001400

0800100c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a1a      	ldr	r2, [pc, #104]	; (8001084 <HAL_TIM_Base_MspInit+0x78>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d114      	bne.n	8001048 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800101e:	4b1a      	ldr	r3, [pc, #104]	; (8001088 <HAL_TIM_Base_MspInit+0x7c>)
 8001020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001022:	4a19      	ldr	r2, [pc, #100]	; (8001088 <HAL_TIM_Base_MspInit+0x7c>)
 8001024:	f043 0310 	orr.w	r3, r3, #16
 8001028:	6593      	str	r3, [r2, #88]	; 0x58
 800102a:	4b17      	ldr	r3, [pc, #92]	; (8001088 <HAL_TIM_Base_MspInit+0x7c>)
 800102c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800102e:	f003 0310 	and.w	r3, r3, #16
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001036:	2200      	movs	r2, #0
 8001038:	2100      	movs	r1, #0
 800103a:	2036      	movs	r0, #54	; 0x36
 800103c:	f001 fe41 	bl	8002cc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001040:	2036      	movs	r0, #54	; 0x36
 8001042:	f001 fe5a 	bl	8002cfa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8001046:	e018      	b.n	800107a <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM7)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a0f      	ldr	r2, [pc, #60]	; (800108c <HAL_TIM_Base_MspInit+0x80>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d113      	bne.n	800107a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001052:	4b0d      	ldr	r3, [pc, #52]	; (8001088 <HAL_TIM_Base_MspInit+0x7c>)
 8001054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001056:	4a0c      	ldr	r2, [pc, #48]	; (8001088 <HAL_TIM_Base_MspInit+0x7c>)
 8001058:	f043 0320 	orr.w	r3, r3, #32
 800105c:	6593      	str	r3, [r2, #88]	; 0x58
 800105e:	4b0a      	ldr	r3, [pc, #40]	; (8001088 <HAL_TIM_Base_MspInit+0x7c>)
 8001060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001062:	f003 0320 	and.w	r3, r3, #32
 8001066:	60bb      	str	r3, [r7, #8]
 8001068:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800106a:	2200      	movs	r2, #0
 800106c:	2100      	movs	r1, #0
 800106e:	2037      	movs	r0, #55	; 0x37
 8001070:	f001 fe27 	bl	8002cc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001074:	2037      	movs	r0, #55	; 0x37
 8001076:	f001 fe40 	bl	8002cfa <HAL_NVIC_EnableIRQ>
}
 800107a:	bf00      	nop
 800107c:	3710      	adds	r7, #16
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	40001000 	.word	0x40001000
 8001088:	40021000 	.word	0x40021000
 800108c:	40001400 	.word	0x40001400

08001090 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001094:	4b14      	ldr	r3, [pc, #80]	; (80010e8 <MX_USART2_UART_Init+0x58>)
 8001096:	4a15      	ldr	r2, [pc, #84]	; (80010ec <MX_USART2_UART_Init+0x5c>)
 8001098:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800109a:	4b13      	ldr	r3, [pc, #76]	; (80010e8 <MX_USART2_UART_Init+0x58>)
 800109c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010a2:	4b11      	ldr	r3, [pc, #68]	; (80010e8 <MX_USART2_UART_Init+0x58>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010a8:	4b0f      	ldr	r3, [pc, #60]	; (80010e8 <MX_USART2_UART_Init+0x58>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010ae:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <MX_USART2_UART_Init+0x58>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010b4:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <MX_USART2_UART_Init+0x58>)
 80010b6:	220c      	movs	r2, #12
 80010b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ba:	4b0b      	ldr	r3, [pc, #44]	; (80010e8 <MX_USART2_UART_Init+0x58>)
 80010bc:	2200      	movs	r2, #0
 80010be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010c0:	4b09      	ldr	r3, [pc, #36]	; (80010e8 <MX_USART2_UART_Init+0x58>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010c6:	4b08      	ldr	r3, [pc, #32]	; (80010e8 <MX_USART2_UART_Init+0x58>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010cc:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <MX_USART2_UART_Init+0x58>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010d2:	4805      	ldr	r0, [pc, #20]	; (80010e8 <MX_USART2_UART_Init+0x58>)
 80010d4:	f004 f8be 	bl	8005254 <HAL_UART_Init>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80010de:	f7ff fd19 	bl	8000b14 <Error_Handler>
  }

}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	20000274 	.word	0x20000274
 80010ec:	40004400 	.word	0x40004400

080010f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b08a      	sub	sp, #40	; 0x28
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f8:	f107 0314 	add.w	r3, r7, #20
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]
 8001106:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a17      	ldr	r2, [pc, #92]	; (800116c <HAL_UART_MspInit+0x7c>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d128      	bne.n	8001164 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001112:	4b17      	ldr	r3, [pc, #92]	; (8001170 <HAL_UART_MspInit+0x80>)
 8001114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001116:	4a16      	ldr	r2, [pc, #88]	; (8001170 <HAL_UART_MspInit+0x80>)
 8001118:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800111c:	6593      	str	r3, [r2, #88]	; 0x58
 800111e:	4b14      	ldr	r3, [pc, #80]	; (8001170 <HAL_UART_MspInit+0x80>)
 8001120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001126:	613b      	str	r3, [r7, #16]
 8001128:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800112a:	4b11      	ldr	r3, [pc, #68]	; (8001170 <HAL_UART_MspInit+0x80>)
 800112c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800112e:	4a10      	ldr	r2, [pc, #64]	; (8001170 <HAL_UART_MspInit+0x80>)
 8001130:	f043 0301 	orr.w	r3, r3, #1
 8001134:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001136:	4b0e      	ldr	r3, [pc, #56]	; (8001170 <HAL_UART_MspInit+0x80>)
 8001138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113a:	f003 0301 	and.w	r3, r3, #1
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001142:	230c      	movs	r3, #12
 8001144:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001146:	2302      	movs	r3, #2
 8001148:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800114e:	2303      	movs	r3, #3
 8001150:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001152:	2307      	movs	r3, #7
 8001154:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001156:	f107 0314 	add.w	r3, r7, #20
 800115a:	4619      	mov	r1, r3
 800115c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001160:	f002 f802 	bl	8003168 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001164:	bf00      	nop
 8001166:	3728      	adds	r7, #40	; 0x28
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	40004400 	.word	0x40004400
 8001170:	40021000 	.word	0x40021000

08001174 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001174:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011ac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001178:	f7ff fea6 	bl	8000ec8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800117c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800117e:	e003      	b.n	8001188 <LoopCopyDataInit>

08001180 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001180:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001182:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001184:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001186:	3104      	adds	r1, #4

08001188 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001188:	480a      	ldr	r0, [pc, #40]	; (80011b4 <LoopForever+0xa>)
	ldr	r3, =_edata
 800118a:	4b0b      	ldr	r3, [pc, #44]	; (80011b8 <LoopForever+0xe>)
	adds	r2, r0, r1
 800118c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800118e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001190:	d3f6      	bcc.n	8001180 <CopyDataInit>
	ldr	r2, =_sbss
 8001192:	4a0a      	ldr	r2, [pc, #40]	; (80011bc <LoopForever+0x12>)
	b	LoopFillZerobss
 8001194:	e002      	b.n	800119c <LoopFillZerobss>

08001196 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001196:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001198:	f842 3b04 	str.w	r3, [r2], #4

0800119c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800119c:	4b08      	ldr	r3, [pc, #32]	; (80011c0 <LoopForever+0x16>)
	cmp	r2, r3
 800119e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80011a0:	d3f9      	bcc.n	8001196 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011a2:	f004 fc91 	bl	8005ac8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011a6:	f7ff fb8b 	bl	80008c0 <main>

080011aa <LoopForever>:

LoopForever:
    b LoopForever
 80011aa:	e7fe      	b.n	80011aa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80011ac:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80011b0:	08005b90 	.word	0x08005b90
	ldr	r0, =_sdata
 80011b4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80011b8:	200000d4 	.word	0x200000d4
	ldr	r2, =_sbss
 80011bc:	200000d4 	.word	0x200000d4
	ldr	r3, = _ebss
 80011c0:	200002f8 	.word	0x200002f8

080011c4 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011c4:	e7fe      	b.n	80011c4 <ADC3_IRQHandler>
	...

080011c8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011ce:	2300      	movs	r3, #0
 80011d0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011d2:	4b0c      	ldr	r3, [pc, #48]	; (8001204 <HAL_Init+0x3c>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a0b      	ldr	r2, [pc, #44]	; (8001204 <HAL_Init+0x3c>)
 80011d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011dc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011de:	2003      	movs	r0, #3
 80011e0:	f001 fd64 	bl	8002cac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011e4:	2000      	movs	r0, #0
 80011e6:	f000 f80f 	bl	8001208 <HAL_InitTick>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d002      	beq.n	80011f6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80011f0:	2301      	movs	r3, #1
 80011f2:	71fb      	strb	r3, [r7, #7]
 80011f4:	e001      	b.n	80011fa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011f6:	f7ff fdf3 	bl	8000de0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011fa:	79fb      	ldrb	r3, [r7, #7]
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40022000 	.word	0x40022000

08001208 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001210:	2300      	movs	r3, #0
 8001212:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001214:	4b17      	ldr	r3, [pc, #92]	; (8001274 <HAL_InitTick+0x6c>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d023      	beq.n	8001264 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800121c:	4b16      	ldr	r3, [pc, #88]	; (8001278 <HAL_InitTick+0x70>)
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	4b14      	ldr	r3, [pc, #80]	; (8001274 <HAL_InitTick+0x6c>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	4619      	mov	r1, r3
 8001226:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800122a:	fbb3 f3f1 	udiv	r3, r3, r1
 800122e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001232:	4618      	mov	r0, r3
 8001234:	f001 fd6f 	bl	8002d16 <HAL_SYSTICK_Config>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d10f      	bne.n	800125e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2b0f      	cmp	r3, #15
 8001242:	d809      	bhi.n	8001258 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001244:	2200      	movs	r2, #0
 8001246:	6879      	ldr	r1, [r7, #4]
 8001248:	f04f 30ff 	mov.w	r0, #4294967295
 800124c:	f001 fd39 	bl	8002cc2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001250:	4a0a      	ldr	r2, [pc, #40]	; (800127c <HAL_InitTick+0x74>)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6013      	str	r3, [r2, #0]
 8001256:	e007      	b.n	8001268 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	73fb      	strb	r3, [r7, #15]
 800125c:	e004      	b.n	8001268 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	73fb      	strb	r3, [r7, #15]
 8001262:	e001      	b.n	8001268 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001264:	2301      	movs	r3, #1
 8001266:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001268:	7bfb      	ldrb	r3, [r7, #15]
}
 800126a:	4618      	mov	r0, r3
 800126c:	3710      	adds	r7, #16
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	200000d0 	.word	0x200000d0
 8001278:	200000c8 	.word	0x200000c8
 800127c:	200000cc 	.word	0x200000cc

08001280 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001284:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <HAL_IncTick+0x20>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	461a      	mov	r2, r3
 800128a:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <HAL_IncTick+0x24>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4413      	add	r3, r2
 8001290:	4a04      	ldr	r2, [pc, #16]	; (80012a4 <HAL_IncTick+0x24>)
 8001292:	6013      	str	r3, [r2, #0]
}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	200000d0 	.word	0x200000d0
 80012a4:	200002f4 	.word	0x200002f4

080012a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  return uwTick;
 80012ac:	4b03      	ldr	r3, [pc, #12]	; (80012bc <HAL_GetTick+0x14>)
 80012ae:	681b      	ldr	r3, [r3, #0]
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	200002f4 	.word	0x200002f4

080012c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012c8:	f7ff ffee 	bl	80012a8 <HAL_GetTick>
 80012cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012d8:	d005      	beq.n	80012e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80012da:	4b09      	ldr	r3, [pc, #36]	; (8001300 <HAL_Delay+0x40>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	461a      	mov	r2, r3
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	4413      	add	r3, r2
 80012e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012e6:	bf00      	nop
 80012e8:	f7ff ffde 	bl	80012a8 <HAL_GetTick>
 80012ec:	4602      	mov	r2, r0
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	68fa      	ldr	r2, [r7, #12]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d8f7      	bhi.n	80012e8 <HAL_Delay+0x28>
  {
  }
}
 80012f8:	bf00      	nop
 80012fa:	3710      	adds	r7, #16
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	200000d0 	.word	0x200000d0

08001304 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	431a      	orrs	r2, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	609a      	str	r2, [r3, #8]
}
 800131e:	bf00      	nop
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr

0800132a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800132a:	b480      	push	{r7}
 800132c:	b083      	sub	sp, #12
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
 8001332:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	431a      	orrs	r2, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	609a      	str	r2, [r3, #8]
}
 8001344:	bf00      	nop
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr

08001350 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001360:	4618      	mov	r0, r3
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800136c:	b480      	push	{r7}
 800136e:	b087      	sub	sp, #28
 8001370:	af00      	add	r7, sp, #0
 8001372:	60f8      	str	r0, [r7, #12]
 8001374:	60b9      	str	r1, [r7, #8]
 8001376:	607a      	str	r2, [r7, #4]
 8001378:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	3360      	adds	r3, #96	; 0x60
 800137e:	461a      	mov	r2, r3
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	4413      	add	r3, r2
 8001386:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	4b08      	ldr	r3, [pc, #32]	; (80013b0 <LL_ADC_SetOffset+0x44>)
 800138e:	4013      	ands	r3, r2
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001396:	683a      	ldr	r2, [r7, #0]
 8001398:	430a      	orrs	r2, r1
 800139a:	4313      	orrs	r3, r2
 800139c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80013a4:	bf00      	nop
 80013a6:	371c      	adds	r7, #28
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr
 80013b0:	03fff000 	.word	0x03fff000

080013b4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	3360      	adds	r3, #96	; 0x60
 80013c2:	461a      	mov	r2, r3
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	4413      	add	r3, r2
 80013ca:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3714      	adds	r7, #20
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b087      	sub	sp, #28
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	3360      	adds	r3, #96	; 0x60
 80013f0:	461a      	mov	r2, r3
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	4413      	add	r3, r2
 80013f8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	431a      	orrs	r2, r3
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800140a:	bf00      	nop
 800140c:	371c      	adds	r7, #28
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr

08001416 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001416:	b480      	push	{r7}
 8001418:	b083      	sub	sp, #12
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001426:	2b00      	cmp	r3, #0
 8001428:	d101      	bne.n	800142e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800142a:	2301      	movs	r3, #1
 800142c:	e000      	b.n	8001430 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800142e:	2300      	movs	r3, #0
}
 8001430:	4618      	mov	r0, r3
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr

0800143c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800143c:	b480      	push	{r7}
 800143e:	b087      	sub	sp, #28
 8001440:	af00      	add	r7, sp, #0
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	60b9      	str	r1, [r7, #8]
 8001446:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	3330      	adds	r3, #48	; 0x30
 800144c:	461a      	mov	r2, r3
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	0a1b      	lsrs	r3, r3, #8
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	f003 030c 	and.w	r3, r3, #12
 8001458:	4413      	add	r3, r2
 800145a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	f003 031f 	and.w	r3, r3, #31
 8001466:	211f      	movs	r1, #31
 8001468:	fa01 f303 	lsl.w	r3, r1, r3
 800146c:	43db      	mvns	r3, r3
 800146e:	401a      	ands	r2, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	0e9b      	lsrs	r3, r3, #26
 8001474:	f003 011f 	and.w	r1, r3, #31
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	f003 031f 	and.w	r3, r3, #31
 800147e:	fa01 f303 	lsl.w	r3, r1, r3
 8001482:	431a      	orrs	r2, r3
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001488:	bf00      	nop
 800148a:	371c      	adds	r7, #28
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d101      	bne.n	80014ac <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80014a8:	2301      	movs	r3, #1
 80014aa:	e000      	b.n	80014ae <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr

080014ba <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80014ba:	b480      	push	{r7}
 80014bc:	b087      	sub	sp, #28
 80014be:	af00      	add	r7, sp, #0
 80014c0:	60f8      	str	r0, [r7, #12]
 80014c2:	60b9      	str	r1, [r7, #8]
 80014c4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	3314      	adds	r3, #20
 80014ca:	461a      	mov	r2, r3
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	0e5b      	lsrs	r3, r3, #25
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	f003 0304 	and.w	r3, r3, #4
 80014d6:	4413      	add	r3, r2
 80014d8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	0d1b      	lsrs	r3, r3, #20
 80014e2:	f003 031f 	and.w	r3, r3, #31
 80014e6:	2107      	movs	r1, #7
 80014e8:	fa01 f303 	lsl.w	r3, r1, r3
 80014ec:	43db      	mvns	r3, r3
 80014ee:	401a      	ands	r2, r3
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	0d1b      	lsrs	r3, r3, #20
 80014f4:	f003 031f 	and.w	r3, r3, #31
 80014f8:	6879      	ldr	r1, [r7, #4]
 80014fa:	fa01 f303 	lsl.w	r3, r1, r3
 80014fe:	431a      	orrs	r2, r3
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001504:	bf00      	nop
 8001506:	371c      	adds	r7, #28
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001528:	43db      	mvns	r3, r3
 800152a:	401a      	ands	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f003 0318 	and.w	r3, r3, #24
 8001532:	4908      	ldr	r1, [pc, #32]	; (8001554 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001534:	40d9      	lsrs	r1, r3
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	400b      	ands	r3, r1
 800153a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800153e:	431a      	orrs	r2, r3
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001546:	bf00      	nop
 8001548:	3714      	adds	r7, #20
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	0007ffff 	.word	0x0007ffff

08001558 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	f003 031f 	and.w	r3, r3, #31
}
 8001568:	4618      	mov	r0, r3
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001584:	4618      	mov	r0, r3
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80015a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	6093      	str	r3, [r2, #8]
}
 80015a8:	bf00      	nop
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80015c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80015c8:	d101      	bne.n	80015ce <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80015ca:	2301      	movs	r3, #1
 80015cc:	e000      	b.n	80015d0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80015ce:	2300      	movs	r3, #0
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80015ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015f0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80015f8:	bf00      	nop
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001614:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001618:	d101      	bne.n	800161e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800161a:	2301      	movs	r3, #1
 800161c:	e000      	b.n	8001620 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800161e:	2300      	movs	r3, #0
}
 8001620:	4618      	mov	r0, r3
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800163c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001640:	f043 0201 	orr.w	r2, r3, #1
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001648:	bf00      	nop
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	f003 0301 	and.w	r3, r3, #1
 8001664:	2b01      	cmp	r3, #1
 8001666:	d101      	bne.n	800166c <LL_ADC_IsEnabled+0x18>
 8001668:	2301      	movs	r3, #1
 800166a:	e000      	b.n	800166e <LL_ADC_IsEnabled+0x1a>
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr

0800167a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800167a:	b480      	push	{r7}
 800167c:	b083      	sub	sp, #12
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800168a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800168e:	f043 0204 	orr.w	r2, r3, #4
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001696:	bf00      	nop
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr

080016a2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80016a2:	b480      	push	{r7}
 80016a4:	b083      	sub	sp, #12
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	f003 0304 	and.w	r3, r3, #4
 80016b2:	2b04      	cmp	r3, #4
 80016b4:	d101      	bne.n	80016ba <LL_ADC_REG_IsConversionOngoing+0x18>
 80016b6:	2301      	movs	r3, #1
 80016b8:	e000      	b.n	80016bc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80016ba:	2300      	movs	r3, #0
}
 80016bc:	4618      	mov	r0, r3
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	f003 0308 	and.w	r3, r3, #8
 80016d8:	2b08      	cmp	r3, #8
 80016da:	d101      	bne.n	80016e0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80016dc:	2301      	movs	r3, #1
 80016de:	e000      	b.n	80016e2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
	...

080016f0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80016f0:	b590      	push	{r4, r7, lr}
 80016f2:	b089      	sub	sp, #36	; 0x24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016f8:	2300      	movs	r3, #0
 80016fa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80016fc:	2300      	movs	r3, #0
 80016fe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d101      	bne.n	800170a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e134      	b.n	8001974 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	691b      	ldr	r3, [r3, #16]
 800170e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001714:	2b00      	cmp	r3, #0
 8001716:	d109      	bne.n	800172c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f7fe ff4d 	bl	80005b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2200      	movs	r2, #0
 8001722:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2200      	movs	r2, #0
 8001728:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff ff3f 	bl	80015b4 <LL_ADC_IsDeepPowerDownEnabled>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d004      	beq.n	8001746 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff ff25 	bl	8001590 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4618      	mov	r0, r3
 800174c:	f7ff ff5a 	bl	8001604 <LL_ADC_IsInternalRegulatorEnabled>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d113      	bne.n	800177e <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff ff3e 	bl	80015dc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001760:	4b86      	ldr	r3, [pc, #536]	; (800197c <HAL_ADC_Init+0x28c>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	099b      	lsrs	r3, r3, #6
 8001766:	4a86      	ldr	r2, [pc, #536]	; (8001980 <HAL_ADC_Init+0x290>)
 8001768:	fba2 2303 	umull	r2, r3, r2, r3
 800176c:	099b      	lsrs	r3, r3, #6
 800176e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001770:	e002      	b.n	8001778 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	3b01      	subs	r3, #1
 8001776:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d1f9      	bne.n	8001772 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4618      	mov	r0, r3
 8001784:	f7ff ff3e 	bl	8001604 <LL_ADC_IsInternalRegulatorEnabled>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d10d      	bne.n	80017aa <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001792:	f043 0210 	orr.w	r2, r3, #16
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800179e:	f043 0201 	orr.w	r2, r3, #1
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7ff ff77 	bl	80016a2 <LL_ADC_REG_IsConversionOngoing>
 80017b4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ba:	f003 0310 	and.w	r3, r3, #16
 80017be:	2b00      	cmp	r3, #0
 80017c0:	f040 80cf 	bne.w	8001962 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	f040 80cb 	bne.w	8001962 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017d0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80017d4:	f043 0202 	orr.w	r2, r3, #2
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff ff37 	bl	8001654 <LL_ADC_IsEnabled>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d115      	bne.n	8001818 <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80017ec:	4865      	ldr	r0, [pc, #404]	; (8001984 <HAL_ADC_Init+0x294>)
 80017ee:	f7ff ff31 	bl	8001654 <LL_ADC_IsEnabled>
 80017f2:	4604      	mov	r4, r0
 80017f4:	4864      	ldr	r0, [pc, #400]	; (8001988 <HAL_ADC_Init+0x298>)
 80017f6:	f7ff ff2d 	bl	8001654 <LL_ADC_IsEnabled>
 80017fa:	4603      	mov	r3, r0
 80017fc:	431c      	orrs	r4, r3
 80017fe:	4863      	ldr	r0, [pc, #396]	; (800198c <HAL_ADC_Init+0x29c>)
 8001800:	f7ff ff28 	bl	8001654 <LL_ADC_IsEnabled>
 8001804:	4603      	mov	r3, r0
 8001806:	4323      	orrs	r3, r4
 8001808:	2b00      	cmp	r3, #0
 800180a:	d105      	bne.n	8001818 <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	4619      	mov	r1, r3
 8001812:	485f      	ldr	r0, [pc, #380]	; (8001990 <HAL_ADC_Init+0x2a0>)
 8001814:	f7ff fd76 	bl	8001304 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	7e5b      	ldrb	r3, [r3, #25]
 800181c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001822:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001828:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800182e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001836:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001838:	4313      	orrs	r3, r2
 800183a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001842:	2b01      	cmp	r3, #1
 8001844:	d106      	bne.n	8001854 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800184a:	3b01      	subs	r3, #1
 800184c:	045b      	lsls	r3, r3, #17
 800184e:	69ba      	ldr	r2, [r7, #24]
 8001850:	4313      	orrs	r3, r2
 8001852:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001858:	2b00      	cmp	r3, #0
 800185a:	d009      	beq.n	8001870 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001860:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001868:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	4313      	orrs	r3, r2
 800186e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	68da      	ldr	r2, [r3, #12]
 8001876:	4b47      	ldr	r3, [pc, #284]	; (8001994 <HAL_ADC_Init+0x2a4>)
 8001878:	4013      	ands	r3, r2
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	6812      	ldr	r2, [r2, #0]
 800187e:	69b9      	ldr	r1, [r7, #24]
 8001880:	430b      	orrs	r3, r1
 8001882:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff ff0a 	bl	80016a2 <LL_ADC_REG_IsConversionOngoing>
 800188e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff ff17 	bl	80016c8 <LL_ADC_INJ_IsConversionOngoing>
 800189a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d13d      	bne.n	800191e <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d13a      	bne.n	800191e <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80018ac:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80018b4:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80018b6:	4313      	orrs	r3, r2
 80018b8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80018c4:	f023 0302 	bic.w	r3, r3, #2
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	6812      	ldr	r2, [r2, #0]
 80018cc:	69b9      	ldr	r1, [r7, #24]
 80018ce:	430b      	orrs	r3, r1
 80018d0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d118      	bne.n	800190e <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	691b      	ldr	r3, [r3, #16]
 80018e2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80018e6:	f023 0304 	bic.w	r3, r3, #4
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80018f2:	4311      	orrs	r1, r2
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80018f8:	4311      	orrs	r1, r2
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80018fe:	430a      	orrs	r2, r1
 8001900:	431a      	orrs	r2, r3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f042 0201 	orr.w	r2, r2, #1
 800190a:	611a      	str	r2, [r3, #16]
 800190c:	e007      	b.n	800191e <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	691a      	ldr	r2, [r3, #16]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f022 0201 	bic.w	r2, r2, #1
 800191c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	691b      	ldr	r3, [r3, #16]
 8001922:	2b01      	cmp	r3, #1
 8001924:	d10c      	bne.n	8001940 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192c:	f023 010f 	bic.w	r1, r3, #15
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	69db      	ldr	r3, [r3, #28]
 8001934:	1e5a      	subs	r2, r3, #1
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	430a      	orrs	r2, r1
 800193c:	631a      	str	r2, [r3, #48]	; 0x30
 800193e:	e007      	b.n	8001950 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f022 020f 	bic.w	r2, r2, #15
 800194e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001954:	f023 0303 	bic.w	r3, r3, #3
 8001958:	f043 0201 	orr.w	r2, r3, #1
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	655a      	str	r2, [r3, #84]	; 0x54
 8001960:	e007      	b.n	8001972 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001966:	f043 0210 	orr.w	r2, r3, #16
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001972:	7ffb      	ldrb	r3, [r7, #31]
}
 8001974:	4618      	mov	r0, r3
 8001976:	3724      	adds	r7, #36	; 0x24
 8001978:	46bd      	mov	sp, r7
 800197a:	bd90      	pop	{r4, r7, pc}
 800197c:	200000c8 	.word	0x200000c8
 8001980:	053e2d63 	.word	0x053e2d63
 8001984:	50040000 	.word	0x50040000
 8001988:	50040100 	.word	0x50040100
 800198c:	50040200 	.word	0x50040200
 8001990:	50040300 	.word	0x50040300
 8001994:	fff0c007 	.word	0xfff0c007

08001998 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80019a0:	4893      	ldr	r0, [pc, #588]	; (8001bf0 <HAL_ADC_Start_IT+0x258>)
 80019a2:	f7ff fdd9 	bl	8001558 <LL_ADC_GetMultimode>
 80019a6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff fe78 	bl	80016a2 <LL_ADC_REG_IsConversionOngoing>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	f040 8112 	bne.w	8001bde <HAL_ADC_Start_IT+0x246>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d101      	bne.n	80019c8 <HAL_ADC_Start_IT+0x30>
 80019c4:	2302      	movs	r3, #2
 80019c6:	e10f      	b.n	8001be8 <HAL_ADC_Start_IT+0x250>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2201      	movs	r2, #1
 80019cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f000 ff3d 	bl	8002850 <ADC_Enable>
 80019d6:	4603      	mov	r3, r0
 80019d8:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80019da:	7dfb      	ldrb	r3, [r7, #23]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	f040 80f9 	bne.w	8001bd4 <HAL_ADC_Start_IT+0x23c>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019e6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80019ea:	f023 0301 	bic.w	r3, r3, #1
 80019ee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a7e      	ldr	r2, [pc, #504]	; (8001bf4 <HAL_ADC_Start_IT+0x25c>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d002      	beq.n	8001a06 <HAL_ADC_Start_IT+0x6e>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	e000      	b.n	8001a08 <HAL_ADC_Start_IT+0x70>
 8001a06:	4b7c      	ldr	r3, [pc, #496]	; (8001bf8 <HAL_ADC_Start_IT+0x260>)
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	6812      	ldr	r2, [r2, #0]
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d002      	beq.n	8001a16 <HAL_ADC_Start_IT+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d105      	bne.n	8001a22 <HAL_ADC_Start_IT+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a1a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d006      	beq.n	8001a3c <HAL_ADC_Start_IT+0xa4>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a32:	f023 0206 	bic.w	r2, r3, #6
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	659a      	str	r2, [r3, #88]	; 0x58
 8001a3a:	e002      	b.n	8001a42 <HAL_ADC_Start_IT+0xaa>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	221c      	movs	r2, #28
 8001a48:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	685a      	ldr	r2, [r3, #4]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f022 021c 	bic.w	r2, r2, #28
 8001a60:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	695b      	ldr	r3, [r3, #20]
 8001a66:	2b08      	cmp	r3, #8
 8001a68:	d108      	bne.n	8001a7c <HAL_ADC_Start_IT+0xe4>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	685a      	ldr	r2, [r3, #4]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f042 0208 	orr.w	r2, r2, #8
 8001a78:	605a      	str	r2, [r3, #4]
          break;
 8001a7a:	e008      	b.n	8001a8e <HAL_ADC_Start_IT+0xf6>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	685a      	ldr	r2, [r3, #4]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f042 0204 	orr.w	r2, r2, #4
 8001a8a:	605a      	str	r2, [r3, #4]
          break;
 8001a8c:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d107      	bne.n	8001aa6 <HAL_ADC_Start_IT+0x10e>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	685a      	ldr	r2, [r3, #4]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f042 0210 	orr.w	r2, r2, #16
 8001aa4:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a52      	ldr	r2, [pc, #328]	; (8001bf4 <HAL_ADC_Start_IT+0x25c>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d002      	beq.n	8001ab6 <HAL_ADC_Start_IT+0x11e>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	e000      	b.n	8001ab8 <HAL_ADC_Start_IT+0x120>
 8001ab6:	4b50      	ldr	r3, [pc, #320]	; (8001bf8 <HAL_ADC_Start_IT+0x260>)
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	6812      	ldr	r2, [r2, #0]
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d008      	beq.n	8001ad2 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d005      	beq.n	8001ad2 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	2b05      	cmp	r3, #5
 8001aca:	d002      	beq.n	8001ad2 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	2b09      	cmp	r3, #9
 8001ad0:	d13b      	bne.n	8001b4a <HAL_ADC_Start_IT+0x1b2>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d02d      	beq.n	8001b3c <HAL_ADC_Start_IT+0x1a4>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ae4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ae8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	655a      	str	r2, [r3, #84]	; 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	695b      	ldr	r3, [r3, #20]
 8001af4:	2b08      	cmp	r3, #8
 8001af6:	d110      	bne.n	8001b1a <HAL_ADC_Start_IT+0x182>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	685a      	ldr	r2, [r3, #4]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f022 0220 	bic.w	r2, r2, #32
 8001b06:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	685a      	ldr	r2, [r3, #4]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b16:	605a      	str	r2, [r3, #4]
              break;
 8001b18:	e011      	b.n	8001b3e <HAL_ADC_Start_IT+0x1a6>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	685a      	ldr	r2, [r3, #4]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b28:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	685a      	ldr	r2, [r3, #4]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f042 0220 	orr.w	r2, r2, #32
 8001b38:	605a      	str	r2, [r3, #4]
              break;
 8001b3a:	e000      	b.n	8001b3e <HAL_ADC_Start_IT+0x1a6>
          }
        }
 8001b3c:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7ff fd99 	bl	800167a <LL_ADC_REG_StartConversion>
 8001b48:	e04d      	b.n	8001be6 <HAL_ADC_Start_IT+0x24e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b4e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a26      	ldr	r2, [pc, #152]	; (8001bf4 <HAL_ADC_Start_IT+0x25c>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d002      	beq.n	8001b66 <HAL_ADC_Start_IT+0x1ce>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	e000      	b.n	8001b68 <HAL_ADC_Start_IT+0x1d0>
 8001b66:	4b24      	ldr	r3, [pc, #144]	; (8001bf8 <HAL_ADC_Start_IT+0x260>)
 8001b68:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	68db      	ldr	r3, [r3, #12]
 8001b6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d036      	beq.n	8001be4 <HAL_ADC_Start_IT+0x24c>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b7a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b7e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	655a      	str	r2, [r3, #84]	; 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	695b      	ldr	r3, [r3, #20]
 8001b8a:	2b08      	cmp	r3, #8
 8001b8c:	d110      	bne.n	8001bb0 <HAL_ADC_Start_IT+0x218>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	685a      	ldr	r2, [r3, #4]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f022 0220 	bic.w	r2, r2, #32
 8001b9c:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	685a      	ldr	r2, [r3, #4]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001bac:	605a      	str	r2, [r3, #4]
              break;
 8001bae:	e01a      	b.n	8001be6 <HAL_ADC_Start_IT+0x24e>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	685a      	ldr	r2, [r3, #4]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001bbe:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	685a      	ldr	r2, [r3, #4]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f042 0220 	orr.w	r2, r2, #32
 8001bce:	605a      	str	r2, [r3, #4]
              break;
 8001bd0:	bf00      	nop
 8001bd2:	e008      	b.n	8001be6 <HAL_ADC_Start_IT+0x24e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001bdc:	e003      	b.n	8001be6 <HAL_ADC_Start_IT+0x24e>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001bde:	2302      	movs	r3, #2
 8001be0:	75fb      	strb	r3, [r7, #23]
 8001be2:	e000      	b.n	8001be6 <HAL_ADC_Start_IT+0x24e>
        }
 8001be4:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 8001be6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3718      	adds	r7, #24
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	50040300 	.word	0x50040300
 8001bf4:	50040100 	.word	0x50040100
 8001bf8:	50040000 	.word	0x50040000

08001bfc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
	...

08001c18 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b08a      	sub	sp, #40	; 0x28
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001c20:	2300      	movs	r3, #0
 8001c22:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c34:	4882      	ldr	r0, [pc, #520]	; (8001e40 <HAL_ADC_IRQHandler+0x228>)
 8001c36:	f7ff fc8f 	bl	8001558 <LL_ADC_GetMultimode>
 8001c3a:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d017      	beq.n	8001c76 <HAL_ADC_IRQHandler+0x5e>
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	f003 0302 	and.w	r3, r3, #2
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d012      	beq.n	8001c76 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c54:	f003 0310 	and.w	r3, r3, #16
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d105      	bne.n	8001c68 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c60:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f000 fe99 	bl	80029a0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2202      	movs	r2, #2
 8001c74:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	f003 0304 	and.w	r3, r3, #4
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d004      	beq.n	8001c8a <HAL_ADC_IRQHandler+0x72>
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	f003 0304 	and.w	r3, r3, #4
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d10a      	bne.n	8001ca0 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	f000 8083 	beq.w	8001d9c <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	f003 0308 	and.w	r3, r3, #8
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d07d      	beq.n	8001d9c <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ca4:	f003 0310 	and.w	r3, r3, #16
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d105      	bne.n	8001cb8 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cb0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff fbaa 	bl	8001416 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d062      	beq.n	8001d8e <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a5d      	ldr	r2, [pc, #372]	; (8001e44 <HAL_ADC_IRQHandler+0x22c>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d002      	beq.n	8001cd8 <HAL_ADC_IRQHandler+0xc0>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	e000      	b.n	8001cda <HAL_ADC_IRQHandler+0xc2>
 8001cd8:	4b5b      	ldr	r3, [pc, #364]	; (8001e48 <HAL_ADC_IRQHandler+0x230>)
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	6812      	ldr	r2, [r2, #0]
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d008      	beq.n	8001cf4 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d005      	beq.n	8001cf4 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	2b05      	cmp	r3, #5
 8001cec:	d002      	beq.n	8001cf4 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	2b09      	cmp	r3, #9
 8001cf2:	d104      	bne.n	8001cfe <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	623b      	str	r3, [r7, #32]
 8001cfc:	e00c      	b.n	8001d18 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a50      	ldr	r2, [pc, #320]	; (8001e44 <HAL_ADC_IRQHandler+0x22c>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d002      	beq.n	8001d0e <HAL_ADC_IRQHandler+0xf6>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	e000      	b.n	8001d10 <HAL_ADC_IRQHandler+0xf8>
 8001d0e:	4b4e      	ldr	r3, [pc, #312]	; (8001e48 <HAL_ADC_IRQHandler+0x230>)
 8001d10:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001d18:	6a3b      	ldr	r3, [r7, #32]
 8001d1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d135      	bne.n	8001d8e <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0308 	and.w	r3, r3, #8
 8001d2c:	2b08      	cmp	r3, #8
 8001d2e:	d12e      	bne.n	8001d8e <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7ff fcb4 	bl	80016a2 <LL_ADC_REG_IsConversionOngoing>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d11a      	bne.n	8001d76 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	685a      	ldr	r2, [r3, #4]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f022 020c 	bic.w	r2, r2, #12
 8001d4e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d54:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d112      	bne.n	8001d8e <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d6c:	f043 0201 	orr.w	r2, r3, #1
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	655a      	str	r2, [r3, #84]	; 0x54
 8001d74:	e00b      	b.n	8001d8e <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d7a:	f043 0210 	orr.w	r2, r3, #16
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d86:	f043 0201 	orr.w	r2, r3, #1
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f7fe fd3a 	bl	8000808 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	220c      	movs	r2, #12
 8001d9a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	f003 0320 	and.w	r3, r3, #32
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d004      	beq.n	8001db0 <HAL_ADC_IRQHandler+0x198>
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	f003 0320 	and.w	r3, r3, #32
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d10b      	bne.n	8001dc8 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	f000 809f 	beq.w	8001efa <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f000 8099 	beq.w	8001efa <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dcc:	f003 0310 	and.w	r3, r3, #16
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d105      	bne.n	8001de0 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dd8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff fb55 	bl	8001494 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001dea:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff fb10 	bl	8001416 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001df6:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a11      	ldr	r2, [pc, #68]	; (8001e44 <HAL_ADC_IRQHandler+0x22c>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d002      	beq.n	8001e08 <HAL_ADC_IRQHandler+0x1f0>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	e000      	b.n	8001e0a <HAL_ADC_IRQHandler+0x1f2>
 8001e08:	4b0f      	ldr	r3, [pc, #60]	; (8001e48 <HAL_ADC_IRQHandler+0x230>)
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	6812      	ldr	r2, [r2, #0]
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d008      	beq.n	8001e24 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d005      	beq.n	8001e24 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	2b06      	cmp	r3, #6
 8001e1c:	d002      	beq.n	8001e24 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	2b07      	cmp	r3, #7
 8001e22:	d104      	bne.n	8001e2e <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	623b      	str	r3, [r7, #32]
 8001e2c:	e013      	b.n	8001e56 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a04      	ldr	r2, [pc, #16]	; (8001e44 <HAL_ADC_IRQHandler+0x22c>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d009      	beq.n	8001e4c <HAL_ADC_IRQHandler+0x234>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	e007      	b.n	8001e4e <HAL_ADC_IRQHandler+0x236>
 8001e3e:	bf00      	nop
 8001e40:	50040300 	.word	0x50040300
 8001e44:	50040100 	.word	0x50040100
 8001e48:	50040000 	.word	0x50040000
 8001e4c:	4b7d      	ldr	r3, [pc, #500]	; (8002044 <HAL_ADC_IRQHandler+0x42c>)
 8001e4e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d10c      	bne.n	8001e76 <HAL_ADC_IRQHandler+0x25e>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8001e5c:	6a3b      	ldr	r3, [r7, #32]
 8001e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d142      	bne.n	8001eec <HAL_ADC_IRQHandler+0x2d4>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d03f      	beq.n	8001eec <HAL_ADC_IRQHandler+0x2d4>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 8001e6c:	6a3b      	ldr	r3, [r7, #32]
 8001e6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d13a      	bne.n	8001eec <HAL_ADC_IRQHandler+0x2d4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e80:	2b40      	cmp	r3, #64	; 0x40
 8001e82:	d133      	bne.n	8001eec <HAL_ADC_IRQHandler+0x2d4>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001e84:	6a3b      	ldr	r3, [r7, #32]
 8001e86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d12e      	bne.n	8001eec <HAL_ADC_IRQHandler+0x2d4>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff fc18 	bl	80016c8 <LL_ADC_INJ_IsConversionOngoing>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d11a      	bne.n	8001ed4 <HAL_ADC_IRQHandler+0x2bc>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	685a      	ldr	r2, [r3, #4]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001eac:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eb2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d112      	bne.n	8001eec <HAL_ADC_IRQHandler+0x2d4>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eca:	f043 0201 	orr.w	r2, r3, #1
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	655a      	str	r2, [r3, #84]	; 0x54
 8001ed2:	e00b      	b.n	8001eec <HAL_ADC_IRQHandler+0x2d4>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ed8:	f043 0210 	orr.w	r2, r3, #16
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee4:	f043 0201 	orr.w	r2, r3, #1
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f000 fd2f 	bl	8002950 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	2260      	movs	r2, #96	; 0x60
 8001ef8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d011      	beq.n	8001f28 <HAL_ADC_IRQHandler+0x310>
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d00c      	beq.n	8001f28 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f12:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 f896 	bl	800204c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2280      	movs	r2, #128	; 0x80
 8001f26:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d012      	beq.n	8001f58 <HAL_ADC_IRQHandler+0x340>
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d00d      	beq.n	8001f58 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f40:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f000 fd15 	bl	8002978 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f56:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d012      	beq.n	8001f88 <HAL_ADC_IRQHandler+0x370>
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d00d      	beq.n	8001f88 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f70:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f000 fd07 	bl	800298c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f86:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	f003 0310 	and.w	r3, r3, #16
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d036      	beq.n	8002000 <HAL_ADC_IRQHandler+0x3e8>
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	f003 0310 	and.w	r3, r3, #16
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d031      	beq.n	8002000 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d102      	bne.n	8001faa <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	627b      	str	r3, [r7, #36]	; 0x24
 8001fa8:	e014      	b.n	8001fd4 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d008      	beq.n	8001fc2 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001fb0:	4825      	ldr	r0, [pc, #148]	; (8002048 <HAL_ADC_IRQHandler+0x430>)
 8001fb2:	f7ff fadf 	bl	8001574 <LL_ADC_GetMultiDMATransfer>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d00b      	beq.n	8001fd4 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	627b      	str	r3, [r7, #36]	; 0x24
 8001fc0:	e008      	b.n	8001fd4 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	f003 0301 	and.w	r3, r3, #1
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8001fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d10e      	bne.n	8001ff8 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fde:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fea:	f043 0202 	orr.w	r2, r3, #2
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f000 f834 	bl	8002060 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2210      	movs	r2, #16
 8001ffe:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002006:	2b00      	cmp	r3, #0
 8002008:	d018      	beq.n	800203c <HAL_ADC_IRQHandler+0x424>
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002010:	2b00      	cmp	r3, #0
 8002012:	d013      	beq.n	800203c <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002018:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002024:	f043 0208 	orr.w	r2, r3, #8
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002034:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 fc94 	bl	8002964 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800203c:	bf00      	nop
 800203e:	3728      	adds	r7, #40	; 0x28
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	50040000 	.word	0x50040000
 8002048:	50040300 	.word	0x50040300

0800204c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002054:	bf00      	nop
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002068:	bf00      	nop
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b0b6      	sub	sp, #216	; 0xd8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800207e:	2300      	movs	r3, #0
 8002080:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002084:	2300      	movs	r3, #0
 8002086:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800208e:	2b01      	cmp	r3, #1
 8002090:	d101      	bne.n	8002096 <HAL_ADC_ConfigChannel+0x22>
 8002092:	2302      	movs	r3, #2
 8002094:	e3c6      	b.n	8002824 <HAL_ADC_ConfigChannel+0x7b0>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2201      	movs	r2, #1
 800209a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7ff fafd 	bl	80016a2 <LL_ADC_REG_IsConversionOngoing>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	f040 83a7 	bne.w	80027fe <HAL_ADC_ConfigChannel+0x78a>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	2b05      	cmp	r3, #5
 80020b6:	d824      	bhi.n	8002102 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	3b02      	subs	r3, #2
 80020be:	2b03      	cmp	r3, #3
 80020c0:	d81b      	bhi.n	80020fa <HAL_ADC_ConfigChannel+0x86>
 80020c2:	a201      	add	r2, pc, #4	; (adr r2, 80020c8 <HAL_ADC_ConfigChannel+0x54>)
 80020c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020c8:	080020d9 	.word	0x080020d9
 80020cc:	080020e1 	.word	0x080020e1
 80020d0:	080020e9 	.word	0x080020e9
 80020d4:	080020f1 	.word	0x080020f1
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	220c      	movs	r2, #12
 80020dc:	605a      	str	r2, [r3, #4]
          break;
 80020de:	e011      	b.n	8002104 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	2212      	movs	r2, #18
 80020e4:	605a      	str	r2, [r3, #4]
          break;
 80020e6:	e00d      	b.n	8002104 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	2218      	movs	r2, #24
 80020ec:	605a      	str	r2, [r3, #4]
          break;
 80020ee:	e009      	b.n	8002104 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020f6:	605a      	str	r2, [r3, #4]
          break;
 80020f8:	e004      	b.n	8002104 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	2206      	movs	r2, #6
 80020fe:	605a      	str	r2, [r3, #4]
          break;
 8002100:	e000      	b.n	8002104 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002102:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6818      	ldr	r0, [r3, #0]
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	6859      	ldr	r1, [r3, #4]
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	461a      	mov	r2, r3
 8002112:	f7ff f993 	bl	800143c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4618      	mov	r0, r3
 800211c:	f7ff fac1 	bl	80016a2 <LL_ADC_REG_IsConversionOngoing>
 8002120:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4618      	mov	r0, r3
 800212a:	f7ff facd 	bl	80016c8 <LL_ADC_INJ_IsConversionOngoing>
 800212e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002132:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002136:	2b00      	cmp	r3, #0
 8002138:	f040 81a6 	bne.w	8002488 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800213c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002140:	2b00      	cmp	r3, #0
 8002142:	f040 81a1 	bne.w	8002488 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6818      	ldr	r0, [r3, #0]
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	6819      	ldr	r1, [r3, #0]
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	461a      	mov	r2, r3
 8002154:	f7ff f9b1 	bl	80014ba <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	695a      	ldr	r2, [r3, #20]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	08db      	lsrs	r3, r3, #3
 8002164:	f003 0303 	and.w	r3, r3, #3
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	fa02 f303 	lsl.w	r3, r2, r3
 800216e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	691b      	ldr	r3, [r3, #16]
 8002176:	2b04      	cmp	r3, #4
 8002178:	d00a      	beq.n	8002190 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6818      	ldr	r0, [r3, #0]
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	6919      	ldr	r1, [r3, #16]
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800218a:	f7ff f8ef 	bl	800136c <LL_ADC_SetOffset>
 800218e:	e17b      	b.n	8002488 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2100      	movs	r1, #0
 8002196:	4618      	mov	r0, r3
 8002198:	f7ff f90c 	bl	80013b4 <LL_ADC_GetOffsetChannel>
 800219c:	4603      	mov	r3, r0
 800219e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d10a      	bne.n	80021bc <HAL_ADC_ConfigChannel+0x148>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2100      	movs	r1, #0
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff f901 	bl	80013b4 <LL_ADC_GetOffsetChannel>
 80021b2:	4603      	mov	r3, r0
 80021b4:	0e9b      	lsrs	r3, r3, #26
 80021b6:	f003 021f 	and.w	r2, r3, #31
 80021ba:	e01e      	b.n	80021fa <HAL_ADC_ConfigChannel+0x186>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2100      	movs	r1, #0
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7ff f8f6 	bl	80013b4 <LL_ADC_GetOffsetChannel>
 80021c8:	4603      	mov	r3, r0
 80021ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80021d2:	fa93 f3a3 	rbit	r3, r3
 80021d6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80021da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80021de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80021e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d101      	bne.n	80021ee <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80021ea:	2320      	movs	r3, #32
 80021ec:	e004      	b.n	80021f8 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80021ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80021f2:	fab3 f383 	clz	r3, r3
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002202:	2b00      	cmp	r3, #0
 8002204:	d105      	bne.n	8002212 <HAL_ADC_ConfigChannel+0x19e>
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	0e9b      	lsrs	r3, r3, #26
 800220c:	f003 031f 	and.w	r3, r3, #31
 8002210:	e018      	b.n	8002244 <HAL_ADC_ConfigChannel+0x1d0>
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800221a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800221e:	fa93 f3a3 	rbit	r3, r3
 8002222:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002226:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800222a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800222e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002232:	2b00      	cmp	r3, #0
 8002234:	d101      	bne.n	800223a <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8002236:	2320      	movs	r3, #32
 8002238:	e004      	b.n	8002244 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800223a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800223e:	fab3 f383 	clz	r3, r3
 8002242:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002244:	429a      	cmp	r2, r3
 8002246:	d106      	bne.n	8002256 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2200      	movs	r2, #0
 800224e:	2100      	movs	r1, #0
 8002250:	4618      	mov	r0, r3
 8002252:	f7ff f8c5 	bl	80013e0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2101      	movs	r1, #1
 800225c:	4618      	mov	r0, r3
 800225e:	f7ff f8a9 	bl	80013b4 <LL_ADC_GetOffsetChannel>
 8002262:	4603      	mov	r3, r0
 8002264:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002268:	2b00      	cmp	r3, #0
 800226a:	d10a      	bne.n	8002282 <HAL_ADC_ConfigChannel+0x20e>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2101      	movs	r1, #1
 8002272:	4618      	mov	r0, r3
 8002274:	f7ff f89e 	bl	80013b4 <LL_ADC_GetOffsetChannel>
 8002278:	4603      	mov	r3, r0
 800227a:	0e9b      	lsrs	r3, r3, #26
 800227c:	f003 021f 	and.w	r2, r3, #31
 8002280:	e01e      	b.n	80022c0 <HAL_ADC_ConfigChannel+0x24c>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2101      	movs	r1, #1
 8002288:	4618      	mov	r0, r3
 800228a:	f7ff f893 	bl	80013b4 <LL_ADC_GetOffsetChannel>
 800228e:	4603      	mov	r3, r0
 8002290:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002294:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002298:	fa93 f3a3 	rbit	r3, r3
 800229c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80022a0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80022a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80022a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d101      	bne.n	80022b4 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80022b0:	2320      	movs	r3, #32
 80022b2:	e004      	b.n	80022be <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80022b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80022b8:	fab3 f383 	clz	r3, r3
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d105      	bne.n	80022d8 <HAL_ADC_ConfigChannel+0x264>
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	0e9b      	lsrs	r3, r3, #26
 80022d2:	f003 031f 	and.w	r3, r3, #31
 80022d6:	e018      	b.n	800230a <HAL_ADC_ConfigChannel+0x296>
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80022e4:	fa93 f3a3 	rbit	r3, r3
 80022e8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80022ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80022f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80022f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d101      	bne.n	8002300 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80022fc:	2320      	movs	r3, #32
 80022fe:	e004      	b.n	800230a <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002300:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002304:	fab3 f383 	clz	r3, r3
 8002308:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800230a:	429a      	cmp	r2, r3
 800230c:	d106      	bne.n	800231c <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2200      	movs	r2, #0
 8002314:	2101      	movs	r1, #1
 8002316:	4618      	mov	r0, r3
 8002318:	f7ff f862 	bl	80013e0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2102      	movs	r1, #2
 8002322:	4618      	mov	r0, r3
 8002324:	f7ff f846 	bl	80013b4 <LL_ADC_GetOffsetChannel>
 8002328:	4603      	mov	r3, r0
 800232a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800232e:	2b00      	cmp	r3, #0
 8002330:	d10a      	bne.n	8002348 <HAL_ADC_ConfigChannel+0x2d4>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2102      	movs	r1, #2
 8002338:	4618      	mov	r0, r3
 800233a:	f7ff f83b 	bl	80013b4 <LL_ADC_GetOffsetChannel>
 800233e:	4603      	mov	r3, r0
 8002340:	0e9b      	lsrs	r3, r3, #26
 8002342:	f003 021f 	and.w	r2, r3, #31
 8002346:	e01e      	b.n	8002386 <HAL_ADC_ConfigChannel+0x312>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2102      	movs	r1, #2
 800234e:	4618      	mov	r0, r3
 8002350:	f7ff f830 	bl	80013b4 <LL_ADC_GetOffsetChannel>
 8002354:	4603      	mov	r3, r0
 8002356:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800235e:	fa93 f3a3 	rbit	r3, r3
 8002362:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002366:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800236a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800236e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002372:	2b00      	cmp	r3, #0
 8002374:	d101      	bne.n	800237a <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002376:	2320      	movs	r3, #32
 8002378:	e004      	b.n	8002384 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800237a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800237e:	fab3 f383 	clz	r3, r3
 8002382:	b2db      	uxtb	r3, r3
 8002384:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800238e:	2b00      	cmp	r3, #0
 8002390:	d105      	bne.n	800239e <HAL_ADC_ConfigChannel+0x32a>
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	0e9b      	lsrs	r3, r3, #26
 8002398:	f003 031f 	and.w	r3, r3, #31
 800239c:	e016      	b.n	80023cc <HAL_ADC_ConfigChannel+0x358>
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80023aa:	fa93 f3a3 	rbit	r3, r3
 80023ae:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80023b0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80023b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80023b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d101      	bne.n	80023c2 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80023be:	2320      	movs	r3, #32
 80023c0:	e004      	b.n	80023cc <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80023c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023c6:	fab3 f383 	clz	r3, r3
 80023ca:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d106      	bne.n	80023de <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2200      	movs	r2, #0
 80023d6:	2102      	movs	r1, #2
 80023d8:	4618      	mov	r0, r3
 80023da:	f7ff f801 	bl	80013e0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2103      	movs	r1, #3
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7fe ffe5 	bl	80013b4 <LL_ADC_GetOffsetChannel>
 80023ea:	4603      	mov	r3, r0
 80023ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d10a      	bne.n	800240a <HAL_ADC_ConfigChannel+0x396>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2103      	movs	r1, #3
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7fe ffda 	bl	80013b4 <LL_ADC_GetOffsetChannel>
 8002400:	4603      	mov	r3, r0
 8002402:	0e9b      	lsrs	r3, r3, #26
 8002404:	f003 021f 	and.w	r2, r3, #31
 8002408:	e017      	b.n	800243a <HAL_ADC_ConfigChannel+0x3c6>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2103      	movs	r1, #3
 8002410:	4618      	mov	r0, r3
 8002412:	f7fe ffcf 	bl	80013b4 <LL_ADC_GetOffsetChannel>
 8002416:	4603      	mov	r3, r0
 8002418:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800241c:	fa93 f3a3 	rbit	r3, r3
 8002420:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002422:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002424:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002426:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002428:	2b00      	cmp	r3, #0
 800242a:	d101      	bne.n	8002430 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 800242c:	2320      	movs	r3, #32
 800242e:	e003      	b.n	8002438 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002430:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002432:	fab3 f383 	clz	r3, r3
 8002436:	b2db      	uxtb	r3, r3
 8002438:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002442:	2b00      	cmp	r3, #0
 8002444:	d105      	bne.n	8002452 <HAL_ADC_ConfigChannel+0x3de>
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	0e9b      	lsrs	r3, r3, #26
 800244c:	f003 031f 	and.w	r3, r3, #31
 8002450:	e011      	b.n	8002476 <HAL_ADC_ConfigChannel+0x402>
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002458:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800245a:	fa93 f3a3 	rbit	r3, r3
 800245e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002460:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002462:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002464:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002466:	2b00      	cmp	r3, #0
 8002468:	d101      	bne.n	800246e <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800246a:	2320      	movs	r3, #32
 800246c:	e003      	b.n	8002476 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800246e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002470:	fab3 f383 	clz	r3, r3
 8002474:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002476:	429a      	cmp	r2, r3
 8002478:	d106      	bne.n	8002488 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2200      	movs	r2, #0
 8002480:	2103      	movs	r1, #3
 8002482:	4618      	mov	r0, r3
 8002484:	f7fe ffac 	bl	80013e0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4618      	mov	r0, r3
 800248e:	f7ff f8e1 	bl	8001654 <LL_ADC_IsEnabled>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	f040 813f 	bne.w	8002718 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6818      	ldr	r0, [r3, #0]
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	6819      	ldr	r1, [r3, #0]
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	461a      	mov	r2, r3
 80024a8:	f7ff f832 	bl	8001510 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	4a8e      	ldr	r2, [pc, #568]	; (80026ec <HAL_ADC_ConfigChannel+0x678>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	f040 8130 	bne.w	8002718 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d10b      	bne.n	80024e0 <HAL_ADC_ConfigChannel+0x46c>
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	0e9b      	lsrs	r3, r3, #26
 80024ce:	3301      	adds	r3, #1
 80024d0:	f003 031f 	and.w	r3, r3, #31
 80024d4:	2b09      	cmp	r3, #9
 80024d6:	bf94      	ite	ls
 80024d8:	2301      	movls	r3, #1
 80024da:	2300      	movhi	r3, #0
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	e019      	b.n	8002514 <HAL_ADC_ConfigChannel+0x4a0>
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024e8:	fa93 f3a3 	rbit	r3, r3
 80024ec:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80024ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024f0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80024f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d101      	bne.n	80024fc <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80024f8:	2320      	movs	r3, #32
 80024fa:	e003      	b.n	8002504 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80024fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024fe:	fab3 f383 	clz	r3, r3
 8002502:	b2db      	uxtb	r3, r3
 8002504:	3301      	adds	r3, #1
 8002506:	f003 031f 	and.w	r3, r3, #31
 800250a:	2b09      	cmp	r3, #9
 800250c:	bf94      	ite	ls
 800250e:	2301      	movls	r3, #1
 8002510:	2300      	movhi	r3, #0
 8002512:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002514:	2b00      	cmp	r3, #0
 8002516:	d079      	beq.n	800260c <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002520:	2b00      	cmp	r3, #0
 8002522:	d107      	bne.n	8002534 <HAL_ADC_ConfigChannel+0x4c0>
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	0e9b      	lsrs	r3, r3, #26
 800252a:	3301      	adds	r3, #1
 800252c:	069b      	lsls	r3, r3, #26
 800252e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002532:	e015      	b.n	8002560 <HAL_ADC_ConfigChannel+0x4ec>
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800253a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800253c:	fa93 f3a3 	rbit	r3, r3
 8002540:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002542:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002544:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002546:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002548:	2b00      	cmp	r3, #0
 800254a:	d101      	bne.n	8002550 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 800254c:	2320      	movs	r3, #32
 800254e:	e003      	b.n	8002558 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002550:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002552:	fab3 f383 	clz	r3, r3
 8002556:	b2db      	uxtb	r3, r3
 8002558:	3301      	adds	r3, #1
 800255a:	069b      	lsls	r3, r3, #26
 800255c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002568:	2b00      	cmp	r3, #0
 800256a:	d109      	bne.n	8002580 <HAL_ADC_ConfigChannel+0x50c>
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	0e9b      	lsrs	r3, r3, #26
 8002572:	3301      	adds	r3, #1
 8002574:	f003 031f 	and.w	r3, r3, #31
 8002578:	2101      	movs	r1, #1
 800257a:	fa01 f303 	lsl.w	r3, r1, r3
 800257e:	e017      	b.n	80025b0 <HAL_ADC_ConfigChannel+0x53c>
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002586:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002588:	fa93 f3a3 	rbit	r3, r3
 800258c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800258e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002590:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002592:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002594:	2b00      	cmp	r3, #0
 8002596:	d101      	bne.n	800259c <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002598:	2320      	movs	r3, #32
 800259a:	e003      	b.n	80025a4 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 800259c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800259e:	fab3 f383 	clz	r3, r3
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	3301      	adds	r3, #1
 80025a6:	f003 031f 	and.w	r3, r3, #31
 80025aa:	2101      	movs	r1, #1
 80025ac:	fa01 f303 	lsl.w	r3, r1, r3
 80025b0:	ea42 0103 	orr.w	r1, r2, r3
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d10a      	bne.n	80025d6 <HAL_ADC_ConfigChannel+0x562>
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	0e9b      	lsrs	r3, r3, #26
 80025c6:	3301      	adds	r3, #1
 80025c8:	f003 021f 	and.w	r2, r3, #31
 80025cc:	4613      	mov	r3, r2
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	4413      	add	r3, r2
 80025d2:	051b      	lsls	r3, r3, #20
 80025d4:	e018      	b.n	8002608 <HAL_ADC_ConfigChannel+0x594>
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025de:	fa93 f3a3 	rbit	r3, r3
 80025e2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80025e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80025e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d101      	bne.n	80025f2 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80025ee:	2320      	movs	r3, #32
 80025f0:	e003      	b.n	80025fa <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80025f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025f4:	fab3 f383 	clz	r3, r3
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	3301      	adds	r3, #1
 80025fc:	f003 021f 	and.w	r2, r3, #31
 8002600:	4613      	mov	r3, r2
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	4413      	add	r3, r2
 8002606:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002608:	430b      	orrs	r3, r1
 800260a:	e080      	b.n	800270e <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002614:	2b00      	cmp	r3, #0
 8002616:	d107      	bne.n	8002628 <HAL_ADC_ConfigChannel+0x5b4>
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	0e9b      	lsrs	r3, r3, #26
 800261e:	3301      	adds	r3, #1
 8002620:	069b      	lsls	r3, r3, #26
 8002622:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002626:	e015      	b.n	8002654 <HAL_ADC_ConfigChannel+0x5e0>
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002630:	fa93 f3a3 	rbit	r3, r3
 8002634:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002638:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800263a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800263c:	2b00      	cmp	r3, #0
 800263e:	d101      	bne.n	8002644 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002640:	2320      	movs	r3, #32
 8002642:	e003      	b.n	800264c <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002646:	fab3 f383 	clz	r3, r3
 800264a:	b2db      	uxtb	r3, r3
 800264c:	3301      	adds	r3, #1
 800264e:	069b      	lsls	r3, r3, #26
 8002650:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800265c:	2b00      	cmp	r3, #0
 800265e:	d109      	bne.n	8002674 <HAL_ADC_ConfigChannel+0x600>
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	0e9b      	lsrs	r3, r3, #26
 8002666:	3301      	adds	r3, #1
 8002668:	f003 031f 	and.w	r3, r3, #31
 800266c:	2101      	movs	r1, #1
 800266e:	fa01 f303 	lsl.w	r3, r1, r3
 8002672:	e017      	b.n	80026a4 <HAL_ADC_ConfigChannel+0x630>
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267a:	6a3b      	ldr	r3, [r7, #32]
 800267c:	fa93 f3a3 	rbit	r3, r3
 8002680:	61fb      	str	r3, [r7, #28]
  return result;
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002688:	2b00      	cmp	r3, #0
 800268a:	d101      	bne.n	8002690 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 800268c:	2320      	movs	r3, #32
 800268e:	e003      	b.n	8002698 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002692:	fab3 f383 	clz	r3, r3
 8002696:	b2db      	uxtb	r3, r3
 8002698:	3301      	adds	r3, #1
 800269a:	f003 031f 	and.w	r3, r3, #31
 800269e:	2101      	movs	r1, #1
 80026a0:	fa01 f303 	lsl.w	r3, r1, r3
 80026a4:	ea42 0103 	orr.w	r1, r2, r3
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d10d      	bne.n	80026d0 <HAL_ADC_ConfigChannel+0x65c>
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	0e9b      	lsrs	r3, r3, #26
 80026ba:	3301      	adds	r3, #1
 80026bc:	f003 021f 	and.w	r2, r3, #31
 80026c0:	4613      	mov	r3, r2
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	4413      	add	r3, r2
 80026c6:	3b1e      	subs	r3, #30
 80026c8:	051b      	lsls	r3, r3, #20
 80026ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026ce:	e01d      	b.n	800270c <HAL_ADC_ConfigChannel+0x698>
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	fa93 f3a3 	rbit	r3, r3
 80026dc:	613b      	str	r3, [r7, #16]
  return result;
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d103      	bne.n	80026f0 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80026e8:	2320      	movs	r3, #32
 80026ea:	e005      	b.n	80026f8 <HAL_ADC_ConfigChannel+0x684>
 80026ec:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	fab3 f383 	clz	r3, r3
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	3301      	adds	r3, #1
 80026fa:	f003 021f 	and.w	r2, r3, #31
 80026fe:	4613      	mov	r3, r2
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	4413      	add	r3, r2
 8002704:	3b1e      	subs	r3, #30
 8002706:	051b      	lsls	r3, r3, #20
 8002708:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800270c:	430b      	orrs	r3, r1
 800270e:	683a      	ldr	r2, [r7, #0]
 8002710:	6892      	ldr	r2, [r2, #8]
 8002712:	4619      	mov	r1, r3
 8002714:	f7fe fed1 	bl	80014ba <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	4b43      	ldr	r3, [pc, #268]	; (800282c <HAL_ADC_ConfigChannel+0x7b8>)
 800271e:	4013      	ands	r3, r2
 8002720:	2b00      	cmp	r3, #0
 8002722:	d079      	beq.n	8002818 <HAL_ADC_ConfigChannel+0x7a4>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002724:	4842      	ldr	r0, [pc, #264]	; (8002830 <HAL_ADC_ConfigChannel+0x7bc>)
 8002726:	f7fe fe13 	bl	8001350 <LL_ADC_GetCommonPathInternalCh>
 800272a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a40      	ldr	r2, [pc, #256]	; (8002834 <HAL_ADC_ConfigChannel+0x7c0>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d12b      	bne.n	8002790 <HAL_ADC_ConfigChannel+0x71c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002738:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800273c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d125      	bne.n	8002790 <HAL_ADC_ConfigChannel+0x71c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a3b      	ldr	r2, [pc, #236]	; (8002838 <HAL_ADC_ConfigChannel+0x7c4>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d004      	beq.n	8002758 <HAL_ADC_ConfigChannel+0x6e4>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a3a      	ldr	r2, [pc, #232]	; (800283c <HAL_ADC_ConfigChannel+0x7c8>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d15c      	bne.n	8002812 <HAL_ADC_ConfigChannel+0x79e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002758:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800275c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002760:	4619      	mov	r1, r3
 8002762:	4833      	ldr	r0, [pc, #204]	; (8002830 <HAL_ADC_ConfigChannel+0x7bc>)
 8002764:	f7fe fde1 	bl	800132a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002768:	4b35      	ldr	r3, [pc, #212]	; (8002840 <HAL_ADC_ConfigChannel+0x7cc>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	099b      	lsrs	r3, r3, #6
 800276e:	4a35      	ldr	r2, [pc, #212]	; (8002844 <HAL_ADC_ConfigChannel+0x7d0>)
 8002770:	fba2 2303 	umull	r2, r3, r2, r3
 8002774:	099a      	lsrs	r2, r3, #6
 8002776:	4613      	mov	r3, r2
 8002778:	005b      	lsls	r3, r3, #1
 800277a:	4413      	add	r3, r2
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002780:	e002      	b.n	8002788 <HAL_ADC_ConfigChannel+0x714>
          {
            wait_loop_index--;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	3b01      	subs	r3, #1
 8002786:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d1f9      	bne.n	8002782 <HAL_ADC_ConfigChannel+0x70e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800278e:	e040      	b.n	8002812 <HAL_ADC_ConfigChannel+0x79e>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a2c      	ldr	r2, [pc, #176]	; (8002848 <HAL_ADC_ConfigChannel+0x7d4>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d118      	bne.n	80027cc <HAL_ADC_ConfigChannel+0x758>
 800279a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800279e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d112      	bne.n	80027cc <HAL_ADC_ConfigChannel+0x758>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a23      	ldr	r2, [pc, #140]	; (8002838 <HAL_ADC_ConfigChannel+0x7c4>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d004      	beq.n	80027ba <HAL_ADC_ConfigChannel+0x746>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a21      	ldr	r2, [pc, #132]	; (800283c <HAL_ADC_ConfigChannel+0x7c8>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d12d      	bne.n	8002816 <HAL_ADC_ConfigChannel+0x7a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027c2:	4619      	mov	r1, r3
 80027c4:	481a      	ldr	r0, [pc, #104]	; (8002830 <HAL_ADC_ConfigChannel+0x7bc>)
 80027c6:	f7fe fdb0 	bl	800132a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027ca:	e024      	b.n	8002816 <HAL_ADC_ConfigChannel+0x7a2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a1e      	ldr	r2, [pc, #120]	; (800284c <HAL_ADC_ConfigChannel+0x7d8>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d120      	bne.n	8002818 <HAL_ADC_ConfigChannel+0x7a4>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80027d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d11a      	bne.n	8002818 <HAL_ADC_ConfigChannel+0x7a4>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a14      	ldr	r2, [pc, #80]	; (8002838 <HAL_ADC_ConfigChannel+0x7c4>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d115      	bne.n	8002818 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80027f4:	4619      	mov	r1, r3
 80027f6:	480e      	ldr	r0, [pc, #56]	; (8002830 <HAL_ADC_ConfigChannel+0x7bc>)
 80027f8:	f7fe fd97 	bl	800132a <LL_ADC_SetCommonPathInternalCh>
 80027fc:	e00c      	b.n	8002818 <HAL_ADC_ConfigChannel+0x7a4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002802:	f043 0220 	orr.w	r2, r3, #32
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002810:	e002      	b.n	8002818 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002812:	bf00      	nop
 8002814:	e000      	b.n	8002818 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002816:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002820:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002824:	4618      	mov	r0, r3
 8002826:	37d8      	adds	r7, #216	; 0xd8
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	80080000 	.word	0x80080000
 8002830:	50040300 	.word	0x50040300
 8002834:	c7520000 	.word	0xc7520000
 8002838:	50040000 	.word	0x50040000
 800283c:	50040200 	.word	0x50040200
 8002840:	200000c8 	.word	0x200000c8
 8002844:	053e2d63 	.word	0x053e2d63
 8002848:	cb840000 	.word	0xcb840000
 800284c:	80000001 	.word	0x80000001

08002850 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4618      	mov	r0, r3
 800285e:	f7fe fef9 	bl	8001654 <LL_ADC_IsEnabled>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d146      	bne.n	80028f6 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	689a      	ldr	r2, [r3, #8]
 800286e:	4b24      	ldr	r3, [pc, #144]	; (8002900 <ADC_Enable+0xb0>)
 8002870:	4013      	ands	r3, r2
 8002872:	2b00      	cmp	r3, #0
 8002874:	d00d      	beq.n	8002892 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800287a:	f043 0210 	orr.w	r2, r3, #16
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002886:	f043 0201 	orr.w	r2, r3, #1
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e032      	b.n	80028f8 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4618      	mov	r0, r3
 8002898:	f7fe fec8 	bl	800162c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800289c:	f7fe fd04 	bl	80012a8 <HAL_GetTick>
 80028a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80028a2:	e021      	b.n	80028e8 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7fe fed3 	bl	8001654 <LL_ADC_IsEnabled>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d104      	bne.n	80028be <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7fe feb7 	bl	800162c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80028be:	f7fe fcf3 	bl	80012a8 <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d90d      	bls.n	80028e8 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028d0:	f043 0210 	orr.w	r2, r3, #16
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028dc:	f043 0201 	orr.w	r2, r3, #1
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e007      	b.n	80028f8 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d1d6      	bne.n	80028a4 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80028f6:	2300      	movs	r3, #0
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3710      	adds	r7, #16
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	8000003f 	.word	0x8000003f

08002904 <LL_ADC_IsEnabled>:
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f003 0301 	and.w	r3, r3, #1
 8002914:	2b01      	cmp	r3, #1
 8002916:	d101      	bne.n	800291c <LL_ADC_IsEnabled+0x18>
 8002918:	2301      	movs	r3, #1
 800291a:	e000      	b.n	800291e <LL_ADC_IsEnabled+0x1a>
 800291c:	2300      	movs	r3, #0
}
 800291e:	4618      	mov	r0, r3
 8002920:	370c      	adds	r7, #12
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr

0800292a <LL_ADC_REG_IsConversionOngoing>:
{
 800292a:	b480      	push	{r7}
 800292c:	b083      	sub	sp, #12
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	f003 0304 	and.w	r3, r3, #4
 800293a:	2b04      	cmp	r3, #4
 800293c:	d101      	bne.n	8002942 <LL_ADC_REG_IsConversionOngoing+0x18>
 800293e:	2301      	movs	r3, #1
 8002940:	e000      	b.n	8002944 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002942:	2300      	movs	r3, #0
}
 8002944:	4618      	mov	r0, r3
 8002946:	370c      	adds	r7, #12
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr

08002950 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002958:	bf00      	nop
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800296c:	bf00      	nop
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002980:	bf00      	nop
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002994:	bf00      	nop
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80029a8:	bf00      	nop
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80029b4:	b590      	push	{r4, r7, lr}
 80029b6:	b09f      	sub	sp, #124	; 0x7c
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029be:	2300      	movs	r3, #0
 80029c0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d101      	bne.n	80029d2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80029ce:	2302      	movs	r3, #2
 80029d0:	e08f      	b.n	8002af2 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2201      	movs	r2, #1
 80029d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a47      	ldr	r2, [pc, #284]	; (8002afc <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d102      	bne.n	80029ea <HAL_ADCEx_MultiModeConfigChannel+0x36>
 80029e4:	4b46      	ldr	r3, [pc, #280]	; (8002b00 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80029e6:	60bb      	str	r3, [r7, #8]
 80029e8:	e001      	b.n	80029ee <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 80029ea:	2300      	movs	r3, #0
 80029ec:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d10b      	bne.n	8002a0c <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029f8:	f043 0220 	orr.w	r2, r3, #32
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e072      	b.n	8002af2 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7ff ff8b 	bl	800292a <LL_ADC_REG_IsConversionOngoing>
 8002a14:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7ff ff85 	bl	800292a <LL_ADC_REG_IsConversionOngoing>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d154      	bne.n	8002ad0 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002a26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d151      	bne.n	8002ad0 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002a2c:	4b35      	ldr	r3, [pc, #212]	; (8002b04 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002a2e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d02c      	beq.n	8002a92 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002a38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	6859      	ldr	r1, [r3, #4]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a4a:	035b      	lsls	r3, r3, #13
 8002a4c:	430b      	orrs	r3, r1
 8002a4e:	431a      	orrs	r2, r3
 8002a50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a52:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a54:	4829      	ldr	r0, [pc, #164]	; (8002afc <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002a56:	f7ff ff55 	bl	8002904 <LL_ADC_IsEnabled>
 8002a5a:	4604      	mov	r4, r0
 8002a5c:	4828      	ldr	r0, [pc, #160]	; (8002b00 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002a5e:	f7ff ff51 	bl	8002904 <LL_ADC_IsEnabled>
 8002a62:	4603      	mov	r3, r0
 8002a64:	431c      	orrs	r4, r3
 8002a66:	4828      	ldr	r0, [pc, #160]	; (8002b08 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002a68:	f7ff ff4c 	bl	8002904 <LL_ADC_IsEnabled>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	4323      	orrs	r3, r4
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d137      	bne.n	8002ae4 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002a74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002a7c:	f023 030f 	bic.w	r3, r3, #15
 8002a80:	683a      	ldr	r2, [r7, #0]
 8002a82:	6811      	ldr	r1, [r2, #0]
 8002a84:	683a      	ldr	r2, [r7, #0]
 8002a86:	6892      	ldr	r2, [r2, #8]
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	431a      	orrs	r2, r3
 8002a8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a8e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a90:	e028      	b.n	8002ae4 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002a92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a9c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a9e:	4817      	ldr	r0, [pc, #92]	; (8002afc <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002aa0:	f7ff ff30 	bl	8002904 <LL_ADC_IsEnabled>
 8002aa4:	4604      	mov	r4, r0
 8002aa6:	4816      	ldr	r0, [pc, #88]	; (8002b00 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002aa8:	f7ff ff2c 	bl	8002904 <LL_ADC_IsEnabled>
 8002aac:	4603      	mov	r3, r0
 8002aae:	431c      	orrs	r4, r3
 8002ab0:	4815      	ldr	r0, [pc, #84]	; (8002b08 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002ab2:	f7ff ff27 	bl	8002904 <LL_ADC_IsEnabled>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	4323      	orrs	r3, r4
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d112      	bne.n	8002ae4 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002abe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002ac6:	f023 030f 	bic.w	r3, r3, #15
 8002aca:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002acc:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ace:	e009      	b.n	8002ae4 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ad4:	f043 0220 	orr.w	r2, r3, #32
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002ae2:	e000      	b.n	8002ae6 <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ae4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002aee:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	377c      	adds	r7, #124	; 0x7c
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd90      	pop	{r4, r7, pc}
 8002afa:	bf00      	nop
 8002afc:	50040000 	.word	0x50040000
 8002b00:	50040100 	.word	0x50040100
 8002b04:	50040300 	.word	0x50040300
 8002b08:	50040200 	.word	0x50040200

08002b0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b085      	sub	sp, #20
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f003 0307 	and.w	r3, r3, #7
 8002b1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b1c:	4b0c      	ldr	r3, [pc, #48]	; (8002b50 <__NVIC_SetPriorityGrouping+0x44>)
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b22:	68ba      	ldr	r2, [r7, #8]
 8002b24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b28:	4013      	ands	r3, r2
 8002b2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b3e:	4a04      	ldr	r2, [pc, #16]	; (8002b50 <__NVIC_SetPriorityGrouping+0x44>)
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	60d3      	str	r3, [r2, #12]
}
 8002b44:	bf00      	nop
 8002b46:	3714      	adds	r7, #20
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr
 8002b50:	e000ed00 	.word	0xe000ed00

08002b54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b58:	4b04      	ldr	r3, [pc, #16]	; (8002b6c <__NVIC_GetPriorityGrouping+0x18>)
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	0a1b      	lsrs	r3, r3, #8
 8002b5e:	f003 0307 	and.w	r3, r3, #7
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr
 8002b6c:	e000ed00 	.word	0xe000ed00

08002b70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	4603      	mov	r3, r0
 8002b78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	db0b      	blt.n	8002b9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b82:	79fb      	ldrb	r3, [r7, #7]
 8002b84:	f003 021f 	and.w	r2, r3, #31
 8002b88:	4907      	ldr	r1, [pc, #28]	; (8002ba8 <__NVIC_EnableIRQ+0x38>)
 8002b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b8e:	095b      	lsrs	r3, r3, #5
 8002b90:	2001      	movs	r0, #1
 8002b92:	fa00 f202 	lsl.w	r2, r0, r2
 8002b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b9a:	bf00      	nop
 8002b9c:	370c      	adds	r7, #12
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	e000e100 	.word	0xe000e100

08002bac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	6039      	str	r1, [r7, #0]
 8002bb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	db0a      	blt.n	8002bd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	b2da      	uxtb	r2, r3
 8002bc4:	490c      	ldr	r1, [pc, #48]	; (8002bf8 <__NVIC_SetPriority+0x4c>)
 8002bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bca:	0112      	lsls	r2, r2, #4
 8002bcc:	b2d2      	uxtb	r2, r2
 8002bce:	440b      	add	r3, r1
 8002bd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bd4:	e00a      	b.n	8002bec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	b2da      	uxtb	r2, r3
 8002bda:	4908      	ldr	r1, [pc, #32]	; (8002bfc <__NVIC_SetPriority+0x50>)
 8002bdc:	79fb      	ldrb	r3, [r7, #7]
 8002bde:	f003 030f 	and.w	r3, r3, #15
 8002be2:	3b04      	subs	r3, #4
 8002be4:	0112      	lsls	r2, r2, #4
 8002be6:	b2d2      	uxtb	r2, r2
 8002be8:	440b      	add	r3, r1
 8002bea:	761a      	strb	r2, [r3, #24]
}
 8002bec:	bf00      	nop
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr
 8002bf8:	e000e100 	.word	0xe000e100
 8002bfc:	e000ed00 	.word	0xe000ed00

08002c00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b089      	sub	sp, #36	; 0x24
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f003 0307 	and.w	r3, r3, #7
 8002c12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	f1c3 0307 	rsb	r3, r3, #7
 8002c1a:	2b04      	cmp	r3, #4
 8002c1c:	bf28      	it	cs
 8002c1e:	2304      	movcs	r3, #4
 8002c20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	3304      	adds	r3, #4
 8002c26:	2b06      	cmp	r3, #6
 8002c28:	d902      	bls.n	8002c30 <NVIC_EncodePriority+0x30>
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	3b03      	subs	r3, #3
 8002c2e:	e000      	b.n	8002c32 <NVIC_EncodePriority+0x32>
 8002c30:	2300      	movs	r3, #0
 8002c32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c34:	f04f 32ff 	mov.w	r2, #4294967295
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3e:	43da      	mvns	r2, r3
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	401a      	ands	r2, r3
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c48:	f04f 31ff 	mov.w	r1, #4294967295
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c52:	43d9      	mvns	r1, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c58:	4313      	orrs	r3, r2
         );
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3724      	adds	r7, #36	; 0x24
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
	...

08002c68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	3b01      	subs	r3, #1
 8002c74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c78:	d301      	bcc.n	8002c7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e00f      	b.n	8002c9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c7e:	4a0a      	ldr	r2, [pc, #40]	; (8002ca8 <SysTick_Config+0x40>)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	3b01      	subs	r3, #1
 8002c84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c86:	210f      	movs	r1, #15
 8002c88:	f04f 30ff 	mov.w	r0, #4294967295
 8002c8c:	f7ff ff8e 	bl	8002bac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c90:	4b05      	ldr	r3, [pc, #20]	; (8002ca8 <SysTick_Config+0x40>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c96:	4b04      	ldr	r3, [pc, #16]	; (8002ca8 <SysTick_Config+0x40>)
 8002c98:	2207      	movs	r2, #7
 8002c9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3708      	adds	r7, #8
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	e000e010 	.word	0xe000e010

08002cac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f7ff ff29 	bl	8002b0c <__NVIC_SetPriorityGrouping>
}
 8002cba:	bf00      	nop
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b086      	sub	sp, #24
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	4603      	mov	r3, r0
 8002cca:	60b9      	str	r1, [r7, #8]
 8002ccc:	607a      	str	r2, [r7, #4]
 8002cce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002cd4:	f7ff ff3e 	bl	8002b54 <__NVIC_GetPriorityGrouping>
 8002cd8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	68b9      	ldr	r1, [r7, #8]
 8002cde:	6978      	ldr	r0, [r7, #20]
 8002ce0:	f7ff ff8e 	bl	8002c00 <NVIC_EncodePriority>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cea:	4611      	mov	r1, r2
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7ff ff5d 	bl	8002bac <__NVIC_SetPriority>
}
 8002cf2:	bf00      	nop
 8002cf4:	3718      	adds	r7, #24
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b082      	sub	sp, #8
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	4603      	mov	r3, r0
 8002d02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7ff ff31 	bl	8002b70 <__NVIC_EnableIRQ>
}
 8002d0e:	bf00      	nop
 8002d10:	3708      	adds	r7, #8
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}

08002d16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b082      	sub	sp, #8
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f7ff ffa2 	bl	8002c68 <SysTick_Config>
 8002d24:	4603      	mov	r3, r0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3708      	adds	r7, #8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b082      	sub	sp, #8
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d101      	bne.n	8002d40 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e014      	b.n	8002d6a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	791b      	ldrb	r3, [r3, #4]
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d105      	bne.n	8002d56 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f7fd fcab 	bl	80006ac <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2202      	movs	r2, #2
 8002d5a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2201      	movs	r2, #1
 8002d66:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3708      	adds	r7, #8
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002d72:	b480      	push	{r7}
 8002d74:	b083      	sub	sp, #12
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
 8002d7a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	795b      	ldrb	r3, [r3, #5]
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d101      	bne.n	8002d88 <HAL_DAC_Start+0x16>
 8002d84:	2302      	movs	r3, #2
 8002d86:	e03b      	b.n	8002e00 <HAL_DAC_Start+0x8e>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2202      	movs	r2, #2
 8002d92:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	6819      	ldr	r1, [r3, #0]
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	f003 0310 	and.w	r3, r3, #16
 8002da0:	2201      	movs	r2, #1
 8002da2:	409a      	lsls	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	430a      	orrs	r2, r1
 8002daa:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d10f      	bne.n	8002dd2 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8002dbc:	2b04      	cmp	r3, #4
 8002dbe:	d118      	bne.n	8002df2 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	685a      	ldr	r2, [r3, #4]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f042 0201 	orr.w	r2, r2, #1
 8002dce:	605a      	str	r2, [r3, #4]
 8002dd0:	e00f      	b.n	8002df2 <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002ddc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002de0:	d107      	bne.n	8002df2 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	685a      	ldr	r2, [r3, #4]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f042 0202 	orr.w	r2, r2, #2
 8002df0:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2201      	movs	r2, #1
 8002df6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002dfe:	2300      	movs	r3, #0
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e22:	d120      	bne.n	8002e66 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e32:	d118      	bne.n	8002e66 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2204      	movs	r2, #4
 8002e38:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	691b      	ldr	r3, [r3, #16]
 8002e3e:	f043 0201 	orr.w	r2, r3, #1
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e4e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e5e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f000 f852 	bl	8002f0a <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e74:	d120      	bne.n	8002eb8 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e84:	d118      	bne.n	8002eb8 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2204      	movs	r2, #4
 8002e8a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	691b      	ldr	r3, [r3, #16]
 8002e90:	f043 0202 	orr.w	r2, r3, #2
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002ea0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002eb0:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f000 f94d 	bl	8003152 <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 8002eb8:	bf00      	nop
 8002eba:	3708      	adds	r7, #8
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b087      	sub	sp, #28
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	607a      	str	r2, [r7, #4]
 8002ecc:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d105      	bne.n	8002eea <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002ede:	697a      	ldr	r2, [r7, #20]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	4413      	add	r3, r2
 8002ee4:	3308      	adds	r3, #8
 8002ee6:	617b      	str	r3, [r7, #20]
 8002ee8:	e004      	b.n	8002ef4 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002eea:	697a      	ldr	r2, [r7, #20]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	4413      	add	r3, r2
 8002ef0:	3314      	adds	r3, #20
 8002ef2:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	371c      	adds	r7, #28
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr

08002f0a <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002f0a:	b480      	push	{r7}
 8002f0c:	b083      	sub	sp, #12
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8002f12:	bf00      	nop
 8002f14:	370c      	adds	r7, #12
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr

08002f1e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002f1e:	b580      	push	{r7, lr}
 8002f20:	b088      	sub	sp, #32
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	60f8      	str	r0, [r7, #12]
 8002f26:	60b9      	str	r1, [r7, #8]
 8002f28:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	795b      	ldrb	r3, [r3, #5]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d101      	bne.n	8002f3a <HAL_DAC_ConfigChannel+0x1c>
 8002f36:	2302      	movs	r3, #2
 8002f38:	e107      	b.n	800314a <HAL_DAC_ConfigChannel+0x22c>
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2202      	movs	r2, #2
 8002f44:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2b04      	cmp	r3, #4
 8002f4c:	d174      	bne.n	8003038 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002f4e:	f7fe f9ab 	bl	80012a8 <HAL_GetTick>
 8002f52:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d134      	bne.n	8002fc4 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002f5a:	e011      	b.n	8002f80 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002f5c:	f7fe f9a4 	bl	80012a8 <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d90a      	bls.n	8002f80 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	f043 0208 	orr.w	r2, r3, #8
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2203      	movs	r2, #3
 8002f7a:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e0e4      	b.n	800314a <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d1e6      	bne.n	8002f5c <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8002f8e:	2001      	movs	r0, #1
 8002f90:	f7fe f996 	bl	80012c0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68ba      	ldr	r2, [r7, #8]
 8002f9a:	6992      	ldr	r2, [r2, #24]
 8002f9c:	641a      	str	r2, [r3, #64]	; 0x40
 8002f9e:	e01e      	b.n	8002fde <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002fa0:	f7fe f982 	bl	80012a8 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d90a      	bls.n	8002fc4 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	f043 0208 	orr.w	r2, r3, #8
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2203      	movs	r2, #3
 8002fbe:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e0c2      	b.n	800314a <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	dbe8      	blt.n	8002fa0 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8002fce:	2001      	movs	r0, #1
 8002fd0:	f7fe f976 	bl	80012c0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	68ba      	ldr	r2, [r7, #8]
 8002fda:	6992      	ldr	r2, [r2, #24]
 8002fdc:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f003 0310 	and.w	r3, r3, #16
 8002fea:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002fee:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff2:	43db      	mvns	r3, r3
 8002ff4:	ea02 0103 	and.w	r1, r2, r3
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	69da      	ldr	r2, [r3, #28]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f003 0310 	and.w	r3, r3, #16
 8003002:	409a      	lsls	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	430a      	orrs	r2, r1
 800300a:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f003 0310 	and.w	r3, r3, #16
 8003018:	21ff      	movs	r1, #255	; 0xff
 800301a:	fa01 f303 	lsl.w	r3, r1, r3
 800301e:	43db      	mvns	r3, r3
 8003020:	ea02 0103 	and.w	r1, r2, r3
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	6a1a      	ldr	r2, [r3, #32]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f003 0310 	and.w	r3, r3, #16
 800302e:	409a      	lsls	r2, r3
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	430a      	orrs	r2, r1
 8003036:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	691b      	ldr	r3, [r3, #16]
 800303c:	2b01      	cmp	r3, #1
 800303e:	d11d      	bne.n	800307c <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003046:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f003 0310 	and.w	r3, r3, #16
 800304e:	221f      	movs	r2, #31
 8003050:	fa02 f303 	lsl.w	r3, r2, r3
 8003054:	43db      	mvns	r3, r3
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	4013      	ands	r3, r2
 800305a:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	695b      	ldr	r3, [r3, #20]
 8003060:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f003 0310 	and.w	r3, r3, #16
 8003068:	697a      	ldr	r2, [r7, #20]
 800306a:	fa02 f303 	lsl.w	r3, r2, r3
 800306e:	69ba      	ldr	r2, [r7, #24]
 8003070:	4313      	orrs	r3, r2
 8003072:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	69ba      	ldr	r2, [r7, #24]
 800307a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003082:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f003 0310 	and.w	r3, r3, #16
 800308a:	2207      	movs	r2, #7
 800308c:	fa02 f303 	lsl.w	r3, r2, r3
 8003090:	43db      	mvns	r3, r3
 8003092:	69ba      	ldr	r2, [r7, #24]
 8003094:	4013      	ands	r3, r2
 8003096:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	431a      	orrs	r2, r3
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f003 0310 	and.w	r3, r3, #16
 80030b0:	697a      	ldr	r2, [r7, #20]
 80030b2:	fa02 f303 	lsl.w	r3, r2, r3
 80030b6:	69ba      	ldr	r2, [r7, #24]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	69ba      	ldr	r2, [r7, #24]
 80030c2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	6819      	ldr	r1, [r3, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f003 0310 	and.w	r3, r3, #16
 80030d0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80030d4:	fa02 f303 	lsl.w	r3, r2, r3
 80030d8:	43da      	mvns	r2, r3
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	400a      	ands	r2, r1
 80030e0:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f003 0310 	and.w	r3, r3, #16
 80030f0:	f640 72fc 	movw	r2, #4092	; 0xffc
 80030f4:	fa02 f303 	lsl.w	r3, r2, r3
 80030f8:	43db      	mvns	r3, r3
 80030fa:	69ba      	ldr	r2, [r7, #24]
 80030fc:	4013      	ands	r3, r2
 80030fe:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f003 0310 	and.w	r3, r3, #16
 800310c:	697a      	ldr	r2, [r7, #20]
 800310e:	fa02 f303 	lsl.w	r3, r2, r3
 8003112:	69ba      	ldr	r2, [r7, #24]
 8003114:	4313      	orrs	r3, r2
 8003116:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	69ba      	ldr	r2, [r7, #24]
 800311e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	6819      	ldr	r1, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f003 0310 	and.w	r3, r3, #16
 800312c:	22c0      	movs	r2, #192	; 0xc0
 800312e:	fa02 f303 	lsl.w	r3, r2, r3
 8003132:	43da      	mvns	r2, r3
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	400a      	ands	r2, r1
 800313a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2201      	movs	r2, #1
 8003140:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2200      	movs	r2, #0
 8003146:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	3720      	adds	r7, #32
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}

08003152 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003152:	b480      	push	{r7}
 8003154:	b083      	sub	sp, #12
 8003156:	af00      	add	r7, sp, #0
 8003158:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800315a:	bf00      	nop
 800315c:	370c      	adds	r7, #12
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
	...

08003168 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003168:	b480      	push	{r7}
 800316a:	b087      	sub	sp, #28
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003172:	2300      	movs	r3, #0
 8003174:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003176:	e17f      	b.n	8003478 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	2101      	movs	r1, #1
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	fa01 f303 	lsl.w	r3, r1, r3
 8003184:	4013      	ands	r3, r2
 8003186:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2b00      	cmp	r3, #0
 800318c:	f000 8171 	beq.w	8003472 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	2b01      	cmp	r3, #1
 8003196:	d00b      	beq.n	80031b0 <HAL_GPIO_Init+0x48>
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	2b02      	cmp	r3, #2
 800319e:	d007      	beq.n	80031b0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80031a4:	2b11      	cmp	r3, #17
 80031a6:	d003      	beq.n	80031b0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	2b12      	cmp	r3, #18
 80031ae:	d130      	bne.n	8003212 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	005b      	lsls	r3, r3, #1
 80031ba:	2203      	movs	r2, #3
 80031bc:	fa02 f303 	lsl.w	r3, r2, r3
 80031c0:	43db      	mvns	r3, r3
 80031c2:	693a      	ldr	r2, [r7, #16]
 80031c4:	4013      	ands	r3, r2
 80031c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	68da      	ldr	r2, [r3, #12]
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	005b      	lsls	r3, r3, #1
 80031d0:	fa02 f303 	lsl.w	r3, r2, r3
 80031d4:	693a      	ldr	r2, [r7, #16]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	693a      	ldr	r2, [r7, #16]
 80031de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80031e6:	2201      	movs	r2, #1
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	fa02 f303 	lsl.w	r3, r2, r3
 80031ee:	43db      	mvns	r3, r3
 80031f0:	693a      	ldr	r2, [r7, #16]
 80031f2:	4013      	ands	r3, r2
 80031f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	091b      	lsrs	r3, r3, #4
 80031fc:	f003 0201 	and.w	r2, r3, #1
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	fa02 f303 	lsl.w	r3, r2, r3
 8003206:	693a      	ldr	r2, [r7, #16]
 8003208:	4313      	orrs	r3, r2
 800320a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	693a      	ldr	r2, [r7, #16]
 8003210:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f003 0303 	and.w	r3, r3, #3
 800321a:	2b03      	cmp	r3, #3
 800321c:	d118      	bne.n	8003250 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003222:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003224:	2201      	movs	r2, #1
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	fa02 f303 	lsl.w	r3, r2, r3
 800322c:	43db      	mvns	r3, r3
 800322e:	693a      	ldr	r2, [r7, #16]
 8003230:	4013      	ands	r3, r2
 8003232:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	08db      	lsrs	r3, r3, #3
 800323a:	f003 0201 	and.w	r2, r3, #1
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	fa02 f303 	lsl.w	r3, r2, r3
 8003244:	693a      	ldr	r2, [r7, #16]
 8003246:	4313      	orrs	r3, r2
 8003248:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	693a      	ldr	r2, [r7, #16]
 800324e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	005b      	lsls	r3, r3, #1
 800325a:	2203      	movs	r2, #3
 800325c:	fa02 f303 	lsl.w	r3, r2, r3
 8003260:	43db      	mvns	r3, r3
 8003262:	693a      	ldr	r2, [r7, #16]
 8003264:	4013      	ands	r3, r2
 8003266:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	689a      	ldr	r2, [r3, #8]
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	005b      	lsls	r3, r3, #1
 8003270:	fa02 f303 	lsl.w	r3, r2, r3
 8003274:	693a      	ldr	r2, [r7, #16]
 8003276:	4313      	orrs	r3, r2
 8003278:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	693a      	ldr	r2, [r7, #16]
 800327e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	2b02      	cmp	r3, #2
 8003286:	d003      	beq.n	8003290 <HAL_GPIO_Init+0x128>
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	2b12      	cmp	r3, #18
 800328e:	d123      	bne.n	80032d8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	08da      	lsrs	r2, r3, #3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	3208      	adds	r2, #8
 8003298:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800329c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	f003 0307 	and.w	r3, r3, #7
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	220f      	movs	r2, #15
 80032a8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ac:	43db      	mvns	r3, r3
 80032ae:	693a      	ldr	r2, [r7, #16]
 80032b0:	4013      	ands	r3, r2
 80032b2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	691a      	ldr	r2, [r3, #16]
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	f003 0307 	and.w	r3, r3, #7
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	fa02 f303 	lsl.w	r3, r2, r3
 80032c4:	693a      	ldr	r2, [r7, #16]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	08da      	lsrs	r2, r3, #3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	3208      	adds	r2, #8
 80032d2:	6939      	ldr	r1, [r7, #16]
 80032d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	005b      	lsls	r3, r3, #1
 80032e2:	2203      	movs	r2, #3
 80032e4:	fa02 f303 	lsl.w	r3, r2, r3
 80032e8:	43db      	mvns	r3, r3
 80032ea:	693a      	ldr	r2, [r7, #16]
 80032ec:	4013      	ands	r3, r2
 80032ee:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f003 0203 	and.w	r2, r3, #3
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	005b      	lsls	r3, r3, #1
 80032fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003300:	693a      	ldr	r2, [r7, #16]
 8003302:	4313      	orrs	r3, r2
 8003304:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	693a      	ldr	r2, [r7, #16]
 800330a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003314:	2b00      	cmp	r3, #0
 8003316:	f000 80ac 	beq.w	8003472 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800331a:	4b5e      	ldr	r3, [pc, #376]	; (8003494 <HAL_GPIO_Init+0x32c>)
 800331c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800331e:	4a5d      	ldr	r2, [pc, #372]	; (8003494 <HAL_GPIO_Init+0x32c>)
 8003320:	f043 0301 	orr.w	r3, r3, #1
 8003324:	6613      	str	r3, [r2, #96]	; 0x60
 8003326:	4b5b      	ldr	r3, [pc, #364]	; (8003494 <HAL_GPIO_Init+0x32c>)
 8003328:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800332a:	f003 0301 	and.w	r3, r3, #1
 800332e:	60bb      	str	r3, [r7, #8]
 8003330:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003332:	4a59      	ldr	r2, [pc, #356]	; (8003498 <HAL_GPIO_Init+0x330>)
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	089b      	lsrs	r3, r3, #2
 8003338:	3302      	adds	r3, #2
 800333a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800333e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	f003 0303 	and.w	r3, r3, #3
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	220f      	movs	r2, #15
 800334a:	fa02 f303 	lsl.w	r3, r2, r3
 800334e:	43db      	mvns	r3, r3
 8003350:	693a      	ldr	r2, [r7, #16]
 8003352:	4013      	ands	r3, r2
 8003354:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800335c:	d025      	beq.n	80033aa <HAL_GPIO_Init+0x242>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a4e      	ldr	r2, [pc, #312]	; (800349c <HAL_GPIO_Init+0x334>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d01f      	beq.n	80033a6 <HAL_GPIO_Init+0x23e>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a4d      	ldr	r2, [pc, #308]	; (80034a0 <HAL_GPIO_Init+0x338>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d019      	beq.n	80033a2 <HAL_GPIO_Init+0x23a>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a4c      	ldr	r2, [pc, #304]	; (80034a4 <HAL_GPIO_Init+0x33c>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d013      	beq.n	800339e <HAL_GPIO_Init+0x236>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a4b      	ldr	r2, [pc, #300]	; (80034a8 <HAL_GPIO_Init+0x340>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d00d      	beq.n	800339a <HAL_GPIO_Init+0x232>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a4a      	ldr	r2, [pc, #296]	; (80034ac <HAL_GPIO_Init+0x344>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d007      	beq.n	8003396 <HAL_GPIO_Init+0x22e>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a49      	ldr	r2, [pc, #292]	; (80034b0 <HAL_GPIO_Init+0x348>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d101      	bne.n	8003392 <HAL_GPIO_Init+0x22a>
 800338e:	2306      	movs	r3, #6
 8003390:	e00c      	b.n	80033ac <HAL_GPIO_Init+0x244>
 8003392:	2307      	movs	r3, #7
 8003394:	e00a      	b.n	80033ac <HAL_GPIO_Init+0x244>
 8003396:	2305      	movs	r3, #5
 8003398:	e008      	b.n	80033ac <HAL_GPIO_Init+0x244>
 800339a:	2304      	movs	r3, #4
 800339c:	e006      	b.n	80033ac <HAL_GPIO_Init+0x244>
 800339e:	2303      	movs	r3, #3
 80033a0:	e004      	b.n	80033ac <HAL_GPIO_Init+0x244>
 80033a2:	2302      	movs	r3, #2
 80033a4:	e002      	b.n	80033ac <HAL_GPIO_Init+0x244>
 80033a6:	2301      	movs	r3, #1
 80033a8:	e000      	b.n	80033ac <HAL_GPIO_Init+0x244>
 80033aa:	2300      	movs	r3, #0
 80033ac:	697a      	ldr	r2, [r7, #20]
 80033ae:	f002 0203 	and.w	r2, r2, #3
 80033b2:	0092      	lsls	r2, r2, #2
 80033b4:	4093      	lsls	r3, r2
 80033b6:	693a      	ldr	r2, [r7, #16]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80033bc:	4936      	ldr	r1, [pc, #216]	; (8003498 <HAL_GPIO_Init+0x330>)
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	089b      	lsrs	r3, r3, #2
 80033c2:	3302      	adds	r3, #2
 80033c4:	693a      	ldr	r2, [r7, #16]
 80033c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80033ca:	4b3a      	ldr	r3, [pc, #232]	; (80034b4 <HAL_GPIO_Init+0x34c>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	43db      	mvns	r3, r3
 80033d4:	693a      	ldr	r2, [r7, #16]
 80033d6:	4013      	ands	r3, r2
 80033d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d003      	beq.n	80033ee <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80033e6:	693a      	ldr	r2, [r7, #16]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80033ee:	4a31      	ldr	r2, [pc, #196]	; (80034b4 <HAL_GPIO_Init+0x34c>)
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80033f4:	4b2f      	ldr	r3, [pc, #188]	; (80034b4 <HAL_GPIO_Init+0x34c>)
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	43db      	mvns	r3, r3
 80033fe:	693a      	ldr	r2, [r7, #16]
 8003400:	4013      	ands	r3, r2
 8003402:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d003      	beq.n	8003418 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003410:	693a      	ldr	r2, [r7, #16]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	4313      	orrs	r3, r2
 8003416:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003418:	4a26      	ldr	r2, [pc, #152]	; (80034b4 <HAL_GPIO_Init+0x34c>)
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800341e:	4b25      	ldr	r3, [pc, #148]	; (80034b4 <HAL_GPIO_Init+0x34c>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	43db      	mvns	r3, r3
 8003428:	693a      	ldr	r2, [r7, #16]
 800342a:	4013      	ands	r3, r2
 800342c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d003      	beq.n	8003442 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800343a:	693a      	ldr	r2, [r7, #16]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	4313      	orrs	r3, r2
 8003440:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003442:	4a1c      	ldr	r2, [pc, #112]	; (80034b4 <HAL_GPIO_Init+0x34c>)
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003448:	4b1a      	ldr	r3, [pc, #104]	; (80034b4 <HAL_GPIO_Init+0x34c>)
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	43db      	mvns	r3, r3
 8003452:	693a      	ldr	r2, [r7, #16]
 8003454:	4013      	ands	r3, r2
 8003456:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d003      	beq.n	800346c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003464:	693a      	ldr	r2, [r7, #16]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	4313      	orrs	r3, r2
 800346a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800346c:	4a11      	ldr	r2, [pc, #68]	; (80034b4 <HAL_GPIO_Init+0x34c>)
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	3301      	adds	r3, #1
 8003476:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	fa22 f303 	lsr.w	r3, r2, r3
 8003482:	2b00      	cmp	r3, #0
 8003484:	f47f ae78 	bne.w	8003178 <HAL_GPIO_Init+0x10>
  }
}
 8003488:	bf00      	nop
 800348a:	371c      	adds	r7, #28
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr
 8003494:	40021000 	.word	0x40021000
 8003498:	40010000 	.word	0x40010000
 800349c:	48000400 	.word	0x48000400
 80034a0:	48000800 	.word	0x48000800
 80034a4:	48000c00 	.word	0x48000c00
 80034a8:	48001000 	.word	0x48001000
 80034ac:	48001400 	.word	0x48001400
 80034b0:	48001800 	.word	0x48001800
 80034b4:	40010400 	.word	0x40010400

080034b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	460b      	mov	r3, r1
 80034c2:	807b      	strh	r3, [r7, #2]
 80034c4:	4613      	mov	r3, r2
 80034c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034c8:	787b      	ldrb	r3, [r7, #1]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d003      	beq.n	80034d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80034ce:	887a      	ldrh	r2, [r7, #2]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80034d4:	e002      	b.n	80034dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80034d6:	887a      	ldrh	r2, [r7, #2]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80034dc:	bf00      	nop
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80034e8:	b480      	push	{r7}
 80034ea:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80034ec:	4b04      	ldr	r3, [pc, #16]	; (8003500 <HAL_PWREx_GetVoltageRange+0x18>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	40007000 	.word	0x40007000

08003504 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003504:	b480      	push	{r7}
 8003506:	b085      	sub	sp, #20
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003512:	d130      	bne.n	8003576 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003514:	4b23      	ldr	r3, [pc, #140]	; (80035a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800351c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003520:	d038      	beq.n	8003594 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003522:	4b20      	ldr	r3, [pc, #128]	; (80035a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800352a:	4a1e      	ldr	r2, [pc, #120]	; (80035a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800352c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003530:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003532:	4b1d      	ldr	r3, [pc, #116]	; (80035a8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	2232      	movs	r2, #50	; 0x32
 8003538:	fb02 f303 	mul.w	r3, r2, r3
 800353c:	4a1b      	ldr	r2, [pc, #108]	; (80035ac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800353e:	fba2 2303 	umull	r2, r3, r2, r3
 8003542:	0c9b      	lsrs	r3, r3, #18
 8003544:	3301      	adds	r3, #1
 8003546:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003548:	e002      	b.n	8003550 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	3b01      	subs	r3, #1
 800354e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003550:	4b14      	ldr	r3, [pc, #80]	; (80035a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003552:	695b      	ldr	r3, [r3, #20]
 8003554:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003558:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800355c:	d102      	bne.n	8003564 <HAL_PWREx_ControlVoltageScaling+0x60>
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d1f2      	bne.n	800354a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003564:	4b0f      	ldr	r3, [pc, #60]	; (80035a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003566:	695b      	ldr	r3, [r3, #20]
 8003568:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800356c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003570:	d110      	bne.n	8003594 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e00f      	b.n	8003596 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003576:	4b0b      	ldr	r3, [pc, #44]	; (80035a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800357e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003582:	d007      	beq.n	8003594 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003584:	4b07      	ldr	r3, [pc, #28]	; (80035a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800358c:	4a05      	ldr	r2, [pc, #20]	; (80035a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800358e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003592:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	3714      	adds	r7, #20
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop
 80035a4:	40007000 	.word	0x40007000
 80035a8:	200000c8 	.word	0x200000c8
 80035ac:	431bde83 	.word	0x431bde83

080035b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b088      	sub	sp, #32
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d101      	bne.n	80035c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e3d4      	b.n	8003d6c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035c2:	4ba1      	ldr	r3, [pc, #644]	; (8003848 <HAL_RCC_OscConfig+0x298>)
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	f003 030c 	and.w	r3, r3, #12
 80035ca:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035cc:	4b9e      	ldr	r3, [pc, #632]	; (8003848 <HAL_RCC_OscConfig+0x298>)
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	f003 0303 	and.w	r3, r3, #3
 80035d4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0310 	and.w	r3, r3, #16
 80035de:	2b00      	cmp	r3, #0
 80035e0:	f000 80e4 	beq.w	80037ac <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d007      	beq.n	80035fa <HAL_RCC_OscConfig+0x4a>
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	2b0c      	cmp	r3, #12
 80035ee:	f040 808b 	bne.w	8003708 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	f040 8087 	bne.w	8003708 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80035fa:	4b93      	ldr	r3, [pc, #588]	; (8003848 <HAL_RCC_OscConfig+0x298>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	2b00      	cmp	r3, #0
 8003604:	d005      	beq.n	8003612 <HAL_RCC_OscConfig+0x62>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	699b      	ldr	r3, [r3, #24]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d101      	bne.n	8003612 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e3ac      	b.n	8003d6c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a1a      	ldr	r2, [r3, #32]
 8003616:	4b8c      	ldr	r3, [pc, #560]	; (8003848 <HAL_RCC_OscConfig+0x298>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0308 	and.w	r3, r3, #8
 800361e:	2b00      	cmp	r3, #0
 8003620:	d004      	beq.n	800362c <HAL_RCC_OscConfig+0x7c>
 8003622:	4b89      	ldr	r3, [pc, #548]	; (8003848 <HAL_RCC_OscConfig+0x298>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800362a:	e005      	b.n	8003638 <HAL_RCC_OscConfig+0x88>
 800362c:	4b86      	ldr	r3, [pc, #536]	; (8003848 <HAL_RCC_OscConfig+0x298>)
 800362e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003632:	091b      	lsrs	r3, r3, #4
 8003634:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003638:	4293      	cmp	r3, r2
 800363a:	d223      	bcs.n	8003684 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6a1b      	ldr	r3, [r3, #32]
 8003640:	4618      	mov	r0, r3
 8003642:	f000 fd3f 	bl	80040c4 <RCC_SetFlashLatencyFromMSIRange>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d001      	beq.n	8003650 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e38d      	b.n	8003d6c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003650:	4b7d      	ldr	r3, [pc, #500]	; (8003848 <HAL_RCC_OscConfig+0x298>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a7c      	ldr	r2, [pc, #496]	; (8003848 <HAL_RCC_OscConfig+0x298>)
 8003656:	f043 0308 	orr.w	r3, r3, #8
 800365a:	6013      	str	r3, [r2, #0]
 800365c:	4b7a      	ldr	r3, [pc, #488]	; (8003848 <HAL_RCC_OscConfig+0x298>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6a1b      	ldr	r3, [r3, #32]
 8003668:	4977      	ldr	r1, [pc, #476]	; (8003848 <HAL_RCC_OscConfig+0x298>)
 800366a:	4313      	orrs	r3, r2
 800366c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800366e:	4b76      	ldr	r3, [pc, #472]	; (8003848 <HAL_RCC_OscConfig+0x298>)
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	69db      	ldr	r3, [r3, #28]
 800367a:	021b      	lsls	r3, r3, #8
 800367c:	4972      	ldr	r1, [pc, #456]	; (8003848 <HAL_RCC_OscConfig+0x298>)
 800367e:	4313      	orrs	r3, r2
 8003680:	604b      	str	r3, [r1, #4]
 8003682:	e025      	b.n	80036d0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003684:	4b70      	ldr	r3, [pc, #448]	; (8003848 <HAL_RCC_OscConfig+0x298>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a6f      	ldr	r2, [pc, #444]	; (8003848 <HAL_RCC_OscConfig+0x298>)
 800368a:	f043 0308 	orr.w	r3, r3, #8
 800368e:	6013      	str	r3, [r2, #0]
 8003690:	4b6d      	ldr	r3, [pc, #436]	; (8003848 <HAL_RCC_OscConfig+0x298>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6a1b      	ldr	r3, [r3, #32]
 800369c:	496a      	ldr	r1, [pc, #424]	; (8003848 <HAL_RCC_OscConfig+0x298>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036a2:	4b69      	ldr	r3, [pc, #420]	; (8003848 <HAL_RCC_OscConfig+0x298>)
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	69db      	ldr	r3, [r3, #28]
 80036ae:	021b      	lsls	r3, r3, #8
 80036b0:	4965      	ldr	r1, [pc, #404]	; (8003848 <HAL_RCC_OscConfig+0x298>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d109      	bne.n	80036d0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a1b      	ldr	r3, [r3, #32]
 80036c0:	4618      	mov	r0, r3
 80036c2:	f000 fcff 	bl	80040c4 <RCC_SetFlashLatencyFromMSIRange>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d001      	beq.n	80036d0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e34d      	b.n	8003d6c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80036d0:	f000 fc36 	bl	8003f40 <HAL_RCC_GetSysClockFreq>
 80036d4:	4601      	mov	r1, r0
 80036d6:	4b5c      	ldr	r3, [pc, #368]	; (8003848 <HAL_RCC_OscConfig+0x298>)
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	091b      	lsrs	r3, r3, #4
 80036dc:	f003 030f 	and.w	r3, r3, #15
 80036e0:	4a5a      	ldr	r2, [pc, #360]	; (800384c <HAL_RCC_OscConfig+0x29c>)
 80036e2:	5cd3      	ldrb	r3, [r2, r3]
 80036e4:	f003 031f 	and.w	r3, r3, #31
 80036e8:	fa21 f303 	lsr.w	r3, r1, r3
 80036ec:	4a58      	ldr	r2, [pc, #352]	; (8003850 <HAL_RCC_OscConfig+0x2a0>)
 80036ee:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80036f0:	4b58      	ldr	r3, [pc, #352]	; (8003854 <HAL_RCC_OscConfig+0x2a4>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4618      	mov	r0, r3
 80036f6:	f7fd fd87 	bl	8001208 <HAL_InitTick>
 80036fa:	4603      	mov	r3, r0
 80036fc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80036fe:	7bfb      	ldrb	r3, [r7, #15]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d052      	beq.n	80037aa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003704:	7bfb      	ldrb	r3, [r7, #15]
 8003706:	e331      	b.n	8003d6c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	699b      	ldr	r3, [r3, #24]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d032      	beq.n	8003776 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003710:	4b4d      	ldr	r3, [pc, #308]	; (8003848 <HAL_RCC_OscConfig+0x298>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a4c      	ldr	r2, [pc, #304]	; (8003848 <HAL_RCC_OscConfig+0x298>)
 8003716:	f043 0301 	orr.w	r3, r3, #1
 800371a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800371c:	f7fd fdc4 	bl	80012a8 <HAL_GetTick>
 8003720:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003722:	e008      	b.n	8003736 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003724:	f7fd fdc0 	bl	80012a8 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b02      	cmp	r3, #2
 8003730:	d901      	bls.n	8003736 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e31a      	b.n	8003d6c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003736:	4b44      	ldr	r3, [pc, #272]	; (8003848 <HAL_RCC_OscConfig+0x298>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0302 	and.w	r3, r3, #2
 800373e:	2b00      	cmp	r3, #0
 8003740:	d0f0      	beq.n	8003724 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003742:	4b41      	ldr	r3, [pc, #260]	; (8003848 <HAL_RCC_OscConfig+0x298>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a40      	ldr	r2, [pc, #256]	; (8003848 <HAL_RCC_OscConfig+0x298>)
 8003748:	f043 0308 	orr.w	r3, r3, #8
 800374c:	6013      	str	r3, [r2, #0]
 800374e:	4b3e      	ldr	r3, [pc, #248]	; (8003848 <HAL_RCC_OscConfig+0x298>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a1b      	ldr	r3, [r3, #32]
 800375a:	493b      	ldr	r1, [pc, #236]	; (8003848 <HAL_RCC_OscConfig+0x298>)
 800375c:	4313      	orrs	r3, r2
 800375e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003760:	4b39      	ldr	r3, [pc, #228]	; (8003848 <HAL_RCC_OscConfig+0x298>)
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	69db      	ldr	r3, [r3, #28]
 800376c:	021b      	lsls	r3, r3, #8
 800376e:	4936      	ldr	r1, [pc, #216]	; (8003848 <HAL_RCC_OscConfig+0x298>)
 8003770:	4313      	orrs	r3, r2
 8003772:	604b      	str	r3, [r1, #4]
 8003774:	e01a      	b.n	80037ac <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003776:	4b34      	ldr	r3, [pc, #208]	; (8003848 <HAL_RCC_OscConfig+0x298>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a33      	ldr	r2, [pc, #204]	; (8003848 <HAL_RCC_OscConfig+0x298>)
 800377c:	f023 0301 	bic.w	r3, r3, #1
 8003780:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003782:	f7fd fd91 	bl	80012a8 <HAL_GetTick>
 8003786:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003788:	e008      	b.n	800379c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800378a:	f7fd fd8d 	bl	80012a8 <HAL_GetTick>
 800378e:	4602      	mov	r2, r0
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	2b02      	cmp	r3, #2
 8003796:	d901      	bls.n	800379c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003798:	2303      	movs	r3, #3
 800379a:	e2e7      	b.n	8003d6c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800379c:	4b2a      	ldr	r3, [pc, #168]	; (8003848 <HAL_RCC_OscConfig+0x298>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0302 	and.w	r3, r3, #2
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d1f0      	bne.n	800378a <HAL_RCC_OscConfig+0x1da>
 80037a8:	e000      	b.n	80037ac <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80037aa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0301 	and.w	r3, r3, #1
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d074      	beq.n	80038a2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	2b08      	cmp	r3, #8
 80037bc:	d005      	beq.n	80037ca <HAL_RCC_OscConfig+0x21a>
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	2b0c      	cmp	r3, #12
 80037c2:	d10e      	bne.n	80037e2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	2b03      	cmp	r3, #3
 80037c8:	d10b      	bne.n	80037e2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037ca:	4b1f      	ldr	r3, [pc, #124]	; (8003848 <HAL_RCC_OscConfig+0x298>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d064      	beq.n	80038a0 <HAL_RCC_OscConfig+0x2f0>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d160      	bne.n	80038a0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e2c4      	b.n	8003d6c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037ea:	d106      	bne.n	80037fa <HAL_RCC_OscConfig+0x24a>
 80037ec:	4b16      	ldr	r3, [pc, #88]	; (8003848 <HAL_RCC_OscConfig+0x298>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a15      	ldr	r2, [pc, #84]	; (8003848 <HAL_RCC_OscConfig+0x298>)
 80037f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037f6:	6013      	str	r3, [r2, #0]
 80037f8:	e01d      	b.n	8003836 <HAL_RCC_OscConfig+0x286>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003802:	d10c      	bne.n	800381e <HAL_RCC_OscConfig+0x26e>
 8003804:	4b10      	ldr	r3, [pc, #64]	; (8003848 <HAL_RCC_OscConfig+0x298>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a0f      	ldr	r2, [pc, #60]	; (8003848 <HAL_RCC_OscConfig+0x298>)
 800380a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800380e:	6013      	str	r3, [r2, #0]
 8003810:	4b0d      	ldr	r3, [pc, #52]	; (8003848 <HAL_RCC_OscConfig+0x298>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a0c      	ldr	r2, [pc, #48]	; (8003848 <HAL_RCC_OscConfig+0x298>)
 8003816:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800381a:	6013      	str	r3, [r2, #0]
 800381c:	e00b      	b.n	8003836 <HAL_RCC_OscConfig+0x286>
 800381e:	4b0a      	ldr	r3, [pc, #40]	; (8003848 <HAL_RCC_OscConfig+0x298>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a09      	ldr	r2, [pc, #36]	; (8003848 <HAL_RCC_OscConfig+0x298>)
 8003824:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003828:	6013      	str	r3, [r2, #0]
 800382a:	4b07      	ldr	r3, [pc, #28]	; (8003848 <HAL_RCC_OscConfig+0x298>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a06      	ldr	r2, [pc, #24]	; (8003848 <HAL_RCC_OscConfig+0x298>)
 8003830:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003834:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d01c      	beq.n	8003878 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800383e:	f7fd fd33 	bl	80012a8 <HAL_GetTick>
 8003842:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003844:	e011      	b.n	800386a <HAL_RCC_OscConfig+0x2ba>
 8003846:	bf00      	nop
 8003848:	40021000 	.word	0x40021000
 800384c:	08005b38 	.word	0x08005b38
 8003850:	200000c8 	.word	0x200000c8
 8003854:	200000cc 	.word	0x200000cc
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003858:	f7fd fd26 	bl	80012a8 <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	2b64      	cmp	r3, #100	; 0x64
 8003864:	d901      	bls.n	800386a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e280      	b.n	8003d6c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800386a:	4baf      	ldr	r3, [pc, #700]	; (8003b28 <HAL_RCC_OscConfig+0x578>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d0f0      	beq.n	8003858 <HAL_RCC_OscConfig+0x2a8>
 8003876:	e014      	b.n	80038a2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003878:	f7fd fd16 	bl	80012a8 <HAL_GetTick>
 800387c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800387e:	e008      	b.n	8003892 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003880:	f7fd fd12 	bl	80012a8 <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	2b64      	cmp	r3, #100	; 0x64
 800388c:	d901      	bls.n	8003892 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e26c      	b.n	8003d6c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003892:	4ba5      	ldr	r3, [pc, #660]	; (8003b28 <HAL_RCC_OscConfig+0x578>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d1f0      	bne.n	8003880 <HAL_RCC_OscConfig+0x2d0>
 800389e:	e000      	b.n	80038a2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0302 	and.w	r3, r3, #2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d060      	beq.n	8003970 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80038ae:	69bb      	ldr	r3, [r7, #24]
 80038b0:	2b04      	cmp	r3, #4
 80038b2:	d005      	beq.n	80038c0 <HAL_RCC_OscConfig+0x310>
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	2b0c      	cmp	r3, #12
 80038b8:	d119      	bne.n	80038ee <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d116      	bne.n	80038ee <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038c0:	4b99      	ldr	r3, [pc, #612]	; (8003b28 <HAL_RCC_OscConfig+0x578>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d005      	beq.n	80038d8 <HAL_RCC_OscConfig+0x328>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d101      	bne.n	80038d8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e249      	b.n	8003d6c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038d8:	4b93      	ldr	r3, [pc, #588]	; (8003b28 <HAL_RCC_OscConfig+0x578>)
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	691b      	ldr	r3, [r3, #16]
 80038e4:	061b      	lsls	r3, r3, #24
 80038e6:	4990      	ldr	r1, [pc, #576]	; (8003b28 <HAL_RCC_OscConfig+0x578>)
 80038e8:	4313      	orrs	r3, r2
 80038ea:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038ec:	e040      	b.n	8003970 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d023      	beq.n	800393e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038f6:	4b8c      	ldr	r3, [pc, #560]	; (8003b28 <HAL_RCC_OscConfig+0x578>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a8b      	ldr	r2, [pc, #556]	; (8003b28 <HAL_RCC_OscConfig+0x578>)
 80038fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003900:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003902:	f7fd fcd1 	bl	80012a8 <HAL_GetTick>
 8003906:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003908:	e008      	b.n	800391c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800390a:	f7fd fccd 	bl	80012a8 <HAL_GetTick>
 800390e:	4602      	mov	r2, r0
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	2b02      	cmp	r3, #2
 8003916:	d901      	bls.n	800391c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003918:	2303      	movs	r3, #3
 800391a:	e227      	b.n	8003d6c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800391c:	4b82      	ldr	r3, [pc, #520]	; (8003b28 <HAL_RCC_OscConfig+0x578>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003924:	2b00      	cmp	r3, #0
 8003926:	d0f0      	beq.n	800390a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003928:	4b7f      	ldr	r3, [pc, #508]	; (8003b28 <HAL_RCC_OscConfig+0x578>)
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	691b      	ldr	r3, [r3, #16]
 8003934:	061b      	lsls	r3, r3, #24
 8003936:	497c      	ldr	r1, [pc, #496]	; (8003b28 <HAL_RCC_OscConfig+0x578>)
 8003938:	4313      	orrs	r3, r2
 800393a:	604b      	str	r3, [r1, #4]
 800393c:	e018      	b.n	8003970 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800393e:	4b7a      	ldr	r3, [pc, #488]	; (8003b28 <HAL_RCC_OscConfig+0x578>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a79      	ldr	r2, [pc, #484]	; (8003b28 <HAL_RCC_OscConfig+0x578>)
 8003944:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003948:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800394a:	f7fd fcad 	bl	80012a8 <HAL_GetTick>
 800394e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003950:	e008      	b.n	8003964 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003952:	f7fd fca9 	bl	80012a8 <HAL_GetTick>
 8003956:	4602      	mov	r2, r0
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	2b02      	cmp	r3, #2
 800395e:	d901      	bls.n	8003964 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003960:	2303      	movs	r3, #3
 8003962:	e203      	b.n	8003d6c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003964:	4b70      	ldr	r3, [pc, #448]	; (8003b28 <HAL_RCC_OscConfig+0x578>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800396c:	2b00      	cmp	r3, #0
 800396e:	d1f0      	bne.n	8003952 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0308 	and.w	r3, r3, #8
 8003978:	2b00      	cmp	r3, #0
 800397a:	d03c      	beq.n	80039f6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	695b      	ldr	r3, [r3, #20]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d01c      	beq.n	80039be <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003984:	4b68      	ldr	r3, [pc, #416]	; (8003b28 <HAL_RCC_OscConfig+0x578>)
 8003986:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800398a:	4a67      	ldr	r2, [pc, #412]	; (8003b28 <HAL_RCC_OscConfig+0x578>)
 800398c:	f043 0301 	orr.w	r3, r3, #1
 8003990:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003994:	f7fd fc88 	bl	80012a8 <HAL_GetTick>
 8003998:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800399a:	e008      	b.n	80039ae <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800399c:	f7fd fc84 	bl	80012a8 <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d901      	bls.n	80039ae <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e1de      	b.n	8003d6c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039ae:	4b5e      	ldr	r3, [pc, #376]	; (8003b28 <HAL_RCC_OscConfig+0x578>)
 80039b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039b4:	f003 0302 	and.w	r3, r3, #2
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d0ef      	beq.n	800399c <HAL_RCC_OscConfig+0x3ec>
 80039bc:	e01b      	b.n	80039f6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039be:	4b5a      	ldr	r3, [pc, #360]	; (8003b28 <HAL_RCC_OscConfig+0x578>)
 80039c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039c4:	4a58      	ldr	r2, [pc, #352]	; (8003b28 <HAL_RCC_OscConfig+0x578>)
 80039c6:	f023 0301 	bic.w	r3, r3, #1
 80039ca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ce:	f7fd fc6b 	bl	80012a8 <HAL_GetTick>
 80039d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039d4:	e008      	b.n	80039e8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039d6:	f7fd fc67 	bl	80012a8 <HAL_GetTick>
 80039da:	4602      	mov	r2, r0
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d901      	bls.n	80039e8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e1c1      	b.n	8003d6c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039e8:	4b4f      	ldr	r3, [pc, #316]	; (8003b28 <HAL_RCC_OscConfig+0x578>)
 80039ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039ee:	f003 0302 	and.w	r3, r3, #2
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d1ef      	bne.n	80039d6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0304 	and.w	r3, r3, #4
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	f000 80a6 	beq.w	8003b50 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a04:	2300      	movs	r3, #0
 8003a06:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003a08:	4b47      	ldr	r3, [pc, #284]	; (8003b28 <HAL_RCC_OscConfig+0x578>)
 8003a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d10d      	bne.n	8003a30 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a14:	4b44      	ldr	r3, [pc, #272]	; (8003b28 <HAL_RCC_OscConfig+0x578>)
 8003a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a18:	4a43      	ldr	r2, [pc, #268]	; (8003b28 <HAL_RCC_OscConfig+0x578>)
 8003a1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a1e:	6593      	str	r3, [r2, #88]	; 0x58
 8003a20:	4b41      	ldr	r3, [pc, #260]	; (8003b28 <HAL_RCC_OscConfig+0x578>)
 8003a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a28:	60bb      	str	r3, [r7, #8]
 8003a2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a30:	4b3e      	ldr	r3, [pc, #248]	; (8003b2c <HAL_RCC_OscConfig+0x57c>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d118      	bne.n	8003a6e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a3c:	4b3b      	ldr	r3, [pc, #236]	; (8003b2c <HAL_RCC_OscConfig+0x57c>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a3a      	ldr	r2, [pc, #232]	; (8003b2c <HAL_RCC_OscConfig+0x57c>)
 8003a42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a46:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a48:	f7fd fc2e 	bl	80012a8 <HAL_GetTick>
 8003a4c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a4e:	e008      	b.n	8003a62 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a50:	f7fd fc2a 	bl	80012a8 <HAL_GetTick>
 8003a54:	4602      	mov	r2, r0
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	d901      	bls.n	8003a62 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e184      	b.n	8003d6c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a62:	4b32      	ldr	r3, [pc, #200]	; (8003b2c <HAL_RCC_OscConfig+0x57c>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d0f0      	beq.n	8003a50 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d108      	bne.n	8003a88 <HAL_RCC_OscConfig+0x4d8>
 8003a76:	4b2c      	ldr	r3, [pc, #176]	; (8003b28 <HAL_RCC_OscConfig+0x578>)
 8003a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a7c:	4a2a      	ldr	r2, [pc, #168]	; (8003b28 <HAL_RCC_OscConfig+0x578>)
 8003a7e:	f043 0301 	orr.w	r3, r3, #1
 8003a82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a86:	e024      	b.n	8003ad2 <HAL_RCC_OscConfig+0x522>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	2b05      	cmp	r3, #5
 8003a8e:	d110      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x502>
 8003a90:	4b25      	ldr	r3, [pc, #148]	; (8003b28 <HAL_RCC_OscConfig+0x578>)
 8003a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a96:	4a24      	ldr	r2, [pc, #144]	; (8003b28 <HAL_RCC_OscConfig+0x578>)
 8003a98:	f043 0304 	orr.w	r3, r3, #4
 8003a9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003aa0:	4b21      	ldr	r3, [pc, #132]	; (8003b28 <HAL_RCC_OscConfig+0x578>)
 8003aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aa6:	4a20      	ldr	r2, [pc, #128]	; (8003b28 <HAL_RCC_OscConfig+0x578>)
 8003aa8:	f043 0301 	orr.w	r3, r3, #1
 8003aac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ab0:	e00f      	b.n	8003ad2 <HAL_RCC_OscConfig+0x522>
 8003ab2:	4b1d      	ldr	r3, [pc, #116]	; (8003b28 <HAL_RCC_OscConfig+0x578>)
 8003ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab8:	4a1b      	ldr	r2, [pc, #108]	; (8003b28 <HAL_RCC_OscConfig+0x578>)
 8003aba:	f023 0301 	bic.w	r3, r3, #1
 8003abe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ac2:	4b19      	ldr	r3, [pc, #100]	; (8003b28 <HAL_RCC_OscConfig+0x578>)
 8003ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ac8:	4a17      	ldr	r2, [pc, #92]	; (8003b28 <HAL_RCC_OscConfig+0x578>)
 8003aca:	f023 0304 	bic.w	r3, r3, #4
 8003ace:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d016      	beq.n	8003b08 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ada:	f7fd fbe5 	bl	80012a8 <HAL_GetTick>
 8003ade:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ae0:	e00a      	b.n	8003af8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ae2:	f7fd fbe1 	bl	80012a8 <HAL_GetTick>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	f241 3288 	movw	r2, #5000	; 0x1388
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d901      	bls.n	8003af8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e139      	b.n	8003d6c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003af8:	4b0b      	ldr	r3, [pc, #44]	; (8003b28 <HAL_RCC_OscConfig+0x578>)
 8003afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003afe:	f003 0302 	and.w	r3, r3, #2
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d0ed      	beq.n	8003ae2 <HAL_RCC_OscConfig+0x532>
 8003b06:	e01a      	b.n	8003b3e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b08:	f7fd fbce 	bl	80012a8 <HAL_GetTick>
 8003b0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b0e:	e00f      	b.n	8003b30 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b10:	f7fd fbca 	bl	80012a8 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d906      	bls.n	8003b30 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e122      	b.n	8003d6c <HAL_RCC_OscConfig+0x7bc>
 8003b26:	bf00      	nop
 8003b28:	40021000 	.word	0x40021000
 8003b2c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b30:	4b90      	ldr	r3, [pc, #576]	; (8003d74 <HAL_RCC_OscConfig+0x7c4>)
 8003b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b36:	f003 0302 	and.w	r3, r3, #2
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d1e8      	bne.n	8003b10 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b3e:	7ffb      	ldrb	r3, [r7, #31]
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d105      	bne.n	8003b50 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b44:	4b8b      	ldr	r3, [pc, #556]	; (8003d74 <HAL_RCC_OscConfig+0x7c4>)
 8003b46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b48:	4a8a      	ldr	r2, [pc, #552]	; (8003d74 <HAL_RCC_OscConfig+0x7c4>)
 8003b4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b4e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	f000 8108 	beq.w	8003d6a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	f040 80d0 	bne.w	8003d04 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003b64:	4b83      	ldr	r3, [pc, #524]	; (8003d74 <HAL_RCC_OscConfig+0x7c4>)
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	f003 0203 	and.w	r2, r3, #3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d130      	bne.n	8003bda <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b82:	3b01      	subs	r3, #1
 8003b84:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d127      	bne.n	8003bda <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b94:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d11f      	bne.n	8003bda <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ba4:	2a07      	cmp	r2, #7
 8003ba6:	bf14      	ite	ne
 8003ba8:	2201      	movne	r2, #1
 8003baa:	2200      	moveq	r2, #0
 8003bac:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d113      	bne.n	8003bda <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bbc:	085b      	lsrs	r3, r3, #1
 8003bbe:	3b01      	subs	r3, #1
 8003bc0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d109      	bne.n	8003bda <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd0:	085b      	lsrs	r3, r3, #1
 8003bd2:	3b01      	subs	r3, #1
 8003bd4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d06e      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003bda:	69bb      	ldr	r3, [r7, #24]
 8003bdc:	2b0c      	cmp	r3, #12
 8003bde:	d069      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003be0:	4b64      	ldr	r3, [pc, #400]	; (8003d74 <HAL_RCC_OscConfig+0x7c4>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d105      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003bec:	4b61      	ldr	r3, [pc, #388]	; (8003d74 <HAL_RCC_OscConfig+0x7c4>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d001      	beq.n	8003bfc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e0b7      	b.n	8003d6c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003bfc:	4b5d      	ldr	r3, [pc, #372]	; (8003d74 <HAL_RCC_OscConfig+0x7c4>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a5c      	ldr	r2, [pc, #368]	; (8003d74 <HAL_RCC_OscConfig+0x7c4>)
 8003c02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c06:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c08:	f7fd fb4e 	bl	80012a8 <HAL_GetTick>
 8003c0c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c0e:	e008      	b.n	8003c22 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c10:	f7fd fb4a 	bl	80012a8 <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d901      	bls.n	8003c22 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e0a4      	b.n	8003d6c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c22:	4b54      	ldr	r3, [pc, #336]	; (8003d74 <HAL_RCC_OscConfig+0x7c4>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d1f0      	bne.n	8003c10 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c2e:	4b51      	ldr	r3, [pc, #324]	; (8003d74 <HAL_RCC_OscConfig+0x7c4>)
 8003c30:	68da      	ldr	r2, [r3, #12]
 8003c32:	4b51      	ldr	r3, [pc, #324]	; (8003d78 <HAL_RCC_OscConfig+0x7c8>)
 8003c34:	4013      	ands	r3, r2
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003c3e:	3a01      	subs	r2, #1
 8003c40:	0112      	lsls	r2, r2, #4
 8003c42:	4311      	orrs	r1, r2
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c48:	0212      	lsls	r2, r2, #8
 8003c4a:	4311      	orrs	r1, r2
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003c50:	0852      	lsrs	r2, r2, #1
 8003c52:	3a01      	subs	r2, #1
 8003c54:	0552      	lsls	r2, r2, #21
 8003c56:	4311      	orrs	r1, r2
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003c5c:	0852      	lsrs	r2, r2, #1
 8003c5e:	3a01      	subs	r2, #1
 8003c60:	0652      	lsls	r2, r2, #25
 8003c62:	4311      	orrs	r1, r2
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c68:	0912      	lsrs	r2, r2, #4
 8003c6a:	0452      	lsls	r2, r2, #17
 8003c6c:	430a      	orrs	r2, r1
 8003c6e:	4941      	ldr	r1, [pc, #260]	; (8003d74 <HAL_RCC_OscConfig+0x7c4>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003c74:	4b3f      	ldr	r3, [pc, #252]	; (8003d74 <HAL_RCC_OscConfig+0x7c4>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a3e      	ldr	r2, [pc, #248]	; (8003d74 <HAL_RCC_OscConfig+0x7c4>)
 8003c7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c7e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c80:	4b3c      	ldr	r3, [pc, #240]	; (8003d74 <HAL_RCC_OscConfig+0x7c4>)
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	4a3b      	ldr	r2, [pc, #236]	; (8003d74 <HAL_RCC_OscConfig+0x7c4>)
 8003c86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c8a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c8c:	f7fd fb0c 	bl	80012a8 <HAL_GetTick>
 8003c90:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c92:	e008      	b.n	8003ca6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c94:	f7fd fb08 	bl	80012a8 <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d901      	bls.n	8003ca6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e062      	b.n	8003d6c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ca6:	4b33      	ldr	r3, [pc, #204]	; (8003d74 <HAL_RCC_OscConfig+0x7c4>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d0f0      	beq.n	8003c94 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003cb2:	e05a      	b.n	8003d6a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e059      	b.n	8003d6c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cb8:	4b2e      	ldr	r3, [pc, #184]	; (8003d74 <HAL_RCC_OscConfig+0x7c4>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d152      	bne.n	8003d6a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003cc4:	4b2b      	ldr	r3, [pc, #172]	; (8003d74 <HAL_RCC_OscConfig+0x7c4>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a2a      	ldr	r2, [pc, #168]	; (8003d74 <HAL_RCC_OscConfig+0x7c4>)
 8003cca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cce:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003cd0:	4b28      	ldr	r3, [pc, #160]	; (8003d74 <HAL_RCC_OscConfig+0x7c4>)
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	4a27      	ldr	r2, [pc, #156]	; (8003d74 <HAL_RCC_OscConfig+0x7c4>)
 8003cd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cda:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003cdc:	f7fd fae4 	bl	80012a8 <HAL_GetTick>
 8003ce0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ce2:	e008      	b.n	8003cf6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ce4:	f7fd fae0 	bl	80012a8 <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d901      	bls.n	8003cf6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e03a      	b.n	8003d6c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cf6:	4b1f      	ldr	r3, [pc, #124]	; (8003d74 <HAL_RCC_OscConfig+0x7c4>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d0f0      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x734>
 8003d02:	e032      	b.n	8003d6a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	2b0c      	cmp	r3, #12
 8003d08:	d02d      	beq.n	8003d66 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d0a:	4b1a      	ldr	r3, [pc, #104]	; (8003d74 <HAL_RCC_OscConfig+0x7c4>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a19      	ldr	r2, [pc, #100]	; (8003d74 <HAL_RCC_OscConfig+0x7c4>)
 8003d10:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d14:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003d16:	4b17      	ldr	r3, [pc, #92]	; (8003d74 <HAL_RCC_OscConfig+0x7c4>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d105      	bne.n	8003d2e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003d22:	4b14      	ldr	r3, [pc, #80]	; (8003d74 <HAL_RCC_OscConfig+0x7c4>)
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	4a13      	ldr	r2, [pc, #76]	; (8003d74 <HAL_RCC_OscConfig+0x7c4>)
 8003d28:	f023 0303 	bic.w	r3, r3, #3
 8003d2c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003d2e:	4b11      	ldr	r3, [pc, #68]	; (8003d74 <HAL_RCC_OscConfig+0x7c4>)
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	4a10      	ldr	r2, [pc, #64]	; (8003d74 <HAL_RCC_OscConfig+0x7c4>)
 8003d34:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003d38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d3c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d3e:	f7fd fab3 	bl	80012a8 <HAL_GetTick>
 8003d42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d44:	e008      	b.n	8003d58 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d46:	f7fd faaf 	bl	80012a8 <HAL_GetTick>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d901      	bls.n	8003d58 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	e009      	b.n	8003d6c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d58:	4b06      	ldr	r3, [pc, #24]	; (8003d74 <HAL_RCC_OscConfig+0x7c4>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d1f0      	bne.n	8003d46 <HAL_RCC_OscConfig+0x796>
 8003d64:	e001      	b.n	8003d6a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e000      	b.n	8003d6c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003d6a:	2300      	movs	r3, #0
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3720      	adds	r7, #32
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	40021000 	.word	0x40021000
 8003d78:	f99d808c 	.word	0xf99d808c

08003d7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d101      	bne.n	8003d90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e0c8      	b.n	8003f22 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d90:	4b66      	ldr	r3, [pc, #408]	; (8003f2c <HAL_RCC_ClockConfig+0x1b0>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0307 	and.w	r3, r3, #7
 8003d98:	683a      	ldr	r2, [r7, #0]
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d910      	bls.n	8003dc0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d9e:	4b63      	ldr	r3, [pc, #396]	; (8003f2c <HAL_RCC_ClockConfig+0x1b0>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f023 0207 	bic.w	r2, r3, #7
 8003da6:	4961      	ldr	r1, [pc, #388]	; (8003f2c <HAL_RCC_ClockConfig+0x1b0>)
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dae:	4b5f      	ldr	r3, [pc, #380]	; (8003f2c <HAL_RCC_ClockConfig+0x1b0>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0307 	and.w	r3, r3, #7
 8003db6:	683a      	ldr	r2, [r7, #0]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d001      	beq.n	8003dc0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e0b0      	b.n	8003f22 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0301 	and.w	r3, r3, #1
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d04c      	beq.n	8003e66 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	2b03      	cmp	r3, #3
 8003dd2:	d107      	bne.n	8003de4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dd4:	4b56      	ldr	r3, [pc, #344]	; (8003f30 <HAL_RCC_ClockConfig+0x1b4>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d121      	bne.n	8003e24 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e09e      	b.n	8003f22 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d107      	bne.n	8003dfc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003dec:	4b50      	ldr	r3, [pc, #320]	; (8003f30 <HAL_RCC_ClockConfig+0x1b4>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d115      	bne.n	8003e24 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e092      	b.n	8003f22 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d107      	bne.n	8003e14 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e04:	4b4a      	ldr	r3, [pc, #296]	; (8003f30 <HAL_RCC_ClockConfig+0x1b4>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0302 	and.w	r3, r3, #2
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d109      	bne.n	8003e24 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e086      	b.n	8003f22 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e14:	4b46      	ldr	r3, [pc, #280]	; (8003f30 <HAL_RCC_ClockConfig+0x1b4>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d101      	bne.n	8003e24 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e07e      	b.n	8003f22 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e24:	4b42      	ldr	r3, [pc, #264]	; (8003f30 <HAL_RCC_ClockConfig+0x1b4>)
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	f023 0203 	bic.w	r2, r3, #3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	493f      	ldr	r1, [pc, #252]	; (8003f30 <HAL_RCC_ClockConfig+0x1b4>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e36:	f7fd fa37 	bl	80012a8 <HAL_GetTick>
 8003e3a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e3c:	e00a      	b.n	8003e54 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e3e:	f7fd fa33 	bl	80012a8 <HAL_GetTick>
 8003e42:	4602      	mov	r2, r0
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d901      	bls.n	8003e54 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	e066      	b.n	8003f22 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e54:	4b36      	ldr	r3, [pc, #216]	; (8003f30 <HAL_RCC_ClockConfig+0x1b4>)
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	f003 020c 	and.w	r2, r3, #12
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d1eb      	bne.n	8003e3e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0302 	and.w	r3, r3, #2
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d008      	beq.n	8003e84 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e72:	4b2f      	ldr	r3, [pc, #188]	; (8003f30 <HAL_RCC_ClockConfig+0x1b4>)
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	492c      	ldr	r1, [pc, #176]	; (8003f30 <HAL_RCC_ClockConfig+0x1b4>)
 8003e80:	4313      	orrs	r3, r2
 8003e82:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e84:	4b29      	ldr	r3, [pc, #164]	; (8003f2c <HAL_RCC_ClockConfig+0x1b0>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 0307 	and.w	r3, r3, #7
 8003e8c:	683a      	ldr	r2, [r7, #0]
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d210      	bcs.n	8003eb4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e92:	4b26      	ldr	r3, [pc, #152]	; (8003f2c <HAL_RCC_ClockConfig+0x1b0>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f023 0207 	bic.w	r2, r3, #7
 8003e9a:	4924      	ldr	r1, [pc, #144]	; (8003f2c <HAL_RCC_ClockConfig+0x1b0>)
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ea2:	4b22      	ldr	r3, [pc, #136]	; (8003f2c <HAL_RCC_ClockConfig+0x1b0>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0307 	and.w	r3, r3, #7
 8003eaa:	683a      	ldr	r2, [r7, #0]
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d001      	beq.n	8003eb4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e036      	b.n	8003f22 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0304 	and.w	r3, r3, #4
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d008      	beq.n	8003ed2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ec0:	4b1b      	ldr	r3, [pc, #108]	; (8003f30 <HAL_RCC_ClockConfig+0x1b4>)
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	4918      	ldr	r1, [pc, #96]	; (8003f30 <HAL_RCC_ClockConfig+0x1b4>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0308 	and.w	r3, r3, #8
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d009      	beq.n	8003ef2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ede:	4b14      	ldr	r3, [pc, #80]	; (8003f30 <HAL_RCC_ClockConfig+0x1b4>)
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	00db      	lsls	r3, r3, #3
 8003eec:	4910      	ldr	r1, [pc, #64]	; (8003f30 <HAL_RCC_ClockConfig+0x1b4>)
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ef2:	f000 f825 	bl	8003f40 <HAL_RCC_GetSysClockFreq>
 8003ef6:	4601      	mov	r1, r0
 8003ef8:	4b0d      	ldr	r3, [pc, #52]	; (8003f30 <HAL_RCC_ClockConfig+0x1b4>)
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	091b      	lsrs	r3, r3, #4
 8003efe:	f003 030f 	and.w	r3, r3, #15
 8003f02:	4a0c      	ldr	r2, [pc, #48]	; (8003f34 <HAL_RCC_ClockConfig+0x1b8>)
 8003f04:	5cd3      	ldrb	r3, [r2, r3]
 8003f06:	f003 031f 	and.w	r3, r3, #31
 8003f0a:	fa21 f303 	lsr.w	r3, r1, r3
 8003f0e:	4a0a      	ldr	r2, [pc, #40]	; (8003f38 <HAL_RCC_ClockConfig+0x1bc>)
 8003f10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003f12:	4b0a      	ldr	r3, [pc, #40]	; (8003f3c <HAL_RCC_ClockConfig+0x1c0>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4618      	mov	r0, r3
 8003f18:	f7fd f976 	bl	8001208 <HAL_InitTick>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	72fb      	strb	r3, [r7, #11]

  return status;
 8003f20:	7afb      	ldrb	r3, [r7, #11]
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3710      	adds	r7, #16
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	40022000 	.word	0x40022000
 8003f30:	40021000 	.word	0x40021000
 8003f34:	08005b38 	.word	0x08005b38
 8003f38:	200000c8 	.word	0x200000c8
 8003f3c:	200000cc 	.word	0x200000cc

08003f40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b089      	sub	sp, #36	; 0x24
 8003f44:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003f46:	2300      	movs	r3, #0
 8003f48:	61fb      	str	r3, [r7, #28]
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f4e:	4b3d      	ldr	r3, [pc, #244]	; (8004044 <HAL_RCC_GetSysClockFreq+0x104>)
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	f003 030c 	and.w	r3, r3, #12
 8003f56:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f58:	4b3a      	ldr	r3, [pc, #232]	; (8004044 <HAL_RCC_GetSysClockFreq+0x104>)
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	f003 0303 	and.w	r3, r3, #3
 8003f60:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d005      	beq.n	8003f74 <HAL_RCC_GetSysClockFreq+0x34>
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	2b0c      	cmp	r3, #12
 8003f6c:	d121      	bne.n	8003fb2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d11e      	bne.n	8003fb2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003f74:	4b33      	ldr	r3, [pc, #204]	; (8004044 <HAL_RCC_GetSysClockFreq+0x104>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0308 	and.w	r3, r3, #8
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d107      	bne.n	8003f90 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003f80:	4b30      	ldr	r3, [pc, #192]	; (8004044 <HAL_RCC_GetSysClockFreq+0x104>)
 8003f82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f86:	0a1b      	lsrs	r3, r3, #8
 8003f88:	f003 030f 	and.w	r3, r3, #15
 8003f8c:	61fb      	str	r3, [r7, #28]
 8003f8e:	e005      	b.n	8003f9c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003f90:	4b2c      	ldr	r3, [pc, #176]	; (8004044 <HAL_RCC_GetSysClockFreq+0x104>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	091b      	lsrs	r3, r3, #4
 8003f96:	f003 030f 	and.w	r3, r3, #15
 8003f9a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003f9c:	4a2a      	ldr	r2, [pc, #168]	; (8004048 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fa4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d10d      	bne.n	8003fc8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003fb0:	e00a      	b.n	8003fc8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	2b04      	cmp	r3, #4
 8003fb6:	d102      	bne.n	8003fbe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003fb8:	4b24      	ldr	r3, [pc, #144]	; (800404c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003fba:	61bb      	str	r3, [r7, #24]
 8003fbc:	e004      	b.n	8003fc8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	2b08      	cmp	r3, #8
 8003fc2:	d101      	bne.n	8003fc8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003fc4:	4b22      	ldr	r3, [pc, #136]	; (8004050 <HAL_RCC_GetSysClockFreq+0x110>)
 8003fc6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	2b0c      	cmp	r3, #12
 8003fcc:	d133      	bne.n	8004036 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003fce:	4b1d      	ldr	r3, [pc, #116]	; (8004044 <HAL_RCC_GetSysClockFreq+0x104>)
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	f003 0303 	and.w	r3, r3, #3
 8003fd6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d002      	beq.n	8003fe4 <HAL_RCC_GetSysClockFreq+0xa4>
 8003fde:	2b03      	cmp	r3, #3
 8003fe0:	d003      	beq.n	8003fea <HAL_RCC_GetSysClockFreq+0xaa>
 8003fe2:	e005      	b.n	8003ff0 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003fe4:	4b19      	ldr	r3, [pc, #100]	; (800404c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003fe6:	617b      	str	r3, [r7, #20]
      break;
 8003fe8:	e005      	b.n	8003ff6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003fea:	4b19      	ldr	r3, [pc, #100]	; (8004050 <HAL_RCC_GetSysClockFreq+0x110>)
 8003fec:	617b      	str	r3, [r7, #20]
      break;
 8003fee:	e002      	b.n	8003ff6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	617b      	str	r3, [r7, #20]
      break;
 8003ff4:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ff6:	4b13      	ldr	r3, [pc, #76]	; (8004044 <HAL_RCC_GetSysClockFreq+0x104>)
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	091b      	lsrs	r3, r3, #4
 8003ffc:	f003 0307 	and.w	r3, r3, #7
 8004000:	3301      	adds	r3, #1
 8004002:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004004:	4b0f      	ldr	r3, [pc, #60]	; (8004044 <HAL_RCC_GetSysClockFreq+0x104>)
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	0a1b      	lsrs	r3, r3, #8
 800400a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800400e:	697a      	ldr	r2, [r7, #20]
 8004010:	fb02 f203 	mul.w	r2, r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	fbb2 f3f3 	udiv	r3, r2, r3
 800401a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800401c:	4b09      	ldr	r3, [pc, #36]	; (8004044 <HAL_RCC_GetSysClockFreq+0x104>)
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	0e5b      	lsrs	r3, r3, #25
 8004022:	f003 0303 	and.w	r3, r3, #3
 8004026:	3301      	adds	r3, #1
 8004028:	005b      	lsls	r3, r3, #1
 800402a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800402c:	697a      	ldr	r2, [r7, #20]
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	fbb2 f3f3 	udiv	r3, r2, r3
 8004034:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004036:	69bb      	ldr	r3, [r7, #24]
}
 8004038:	4618      	mov	r0, r3
 800403a:	3724      	adds	r7, #36	; 0x24
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr
 8004044:	40021000 	.word	0x40021000
 8004048:	08005b50 	.word	0x08005b50
 800404c:	00f42400 	.word	0x00f42400
 8004050:	007a1200 	.word	0x007a1200

08004054 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004054:	b480      	push	{r7}
 8004056:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004058:	4b03      	ldr	r3, [pc, #12]	; (8004068 <HAL_RCC_GetHCLKFreq+0x14>)
 800405a:	681b      	ldr	r3, [r3, #0]
}
 800405c:	4618      	mov	r0, r3
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop
 8004068:	200000c8 	.word	0x200000c8

0800406c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004070:	f7ff fff0 	bl	8004054 <HAL_RCC_GetHCLKFreq>
 8004074:	4601      	mov	r1, r0
 8004076:	4b06      	ldr	r3, [pc, #24]	; (8004090 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	0a1b      	lsrs	r3, r3, #8
 800407c:	f003 0307 	and.w	r3, r3, #7
 8004080:	4a04      	ldr	r2, [pc, #16]	; (8004094 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004082:	5cd3      	ldrb	r3, [r2, r3]
 8004084:	f003 031f 	and.w	r3, r3, #31
 8004088:	fa21 f303 	lsr.w	r3, r1, r3
}
 800408c:	4618      	mov	r0, r3
 800408e:	bd80      	pop	{r7, pc}
 8004090:	40021000 	.word	0x40021000
 8004094:	08005b48 	.word	0x08005b48

08004098 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800409c:	f7ff ffda 	bl	8004054 <HAL_RCC_GetHCLKFreq>
 80040a0:	4601      	mov	r1, r0
 80040a2:	4b06      	ldr	r3, [pc, #24]	; (80040bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	0adb      	lsrs	r3, r3, #11
 80040a8:	f003 0307 	and.w	r3, r3, #7
 80040ac:	4a04      	ldr	r2, [pc, #16]	; (80040c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80040ae:	5cd3      	ldrb	r3, [r2, r3]
 80040b0:	f003 031f 	and.w	r3, r3, #31
 80040b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	40021000 	.word	0x40021000
 80040c0:	08005b48 	.word	0x08005b48

080040c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b086      	sub	sp, #24
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80040cc:	2300      	movs	r3, #0
 80040ce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80040d0:	4b2a      	ldr	r3, [pc, #168]	; (800417c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d003      	beq.n	80040e4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80040dc:	f7ff fa04 	bl	80034e8 <HAL_PWREx_GetVoltageRange>
 80040e0:	6178      	str	r0, [r7, #20]
 80040e2:	e014      	b.n	800410e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80040e4:	4b25      	ldr	r3, [pc, #148]	; (800417c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040e8:	4a24      	ldr	r2, [pc, #144]	; (800417c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040ee:	6593      	str	r3, [r2, #88]	; 0x58
 80040f0:	4b22      	ldr	r3, [pc, #136]	; (800417c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040f8:	60fb      	str	r3, [r7, #12]
 80040fa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80040fc:	f7ff f9f4 	bl	80034e8 <HAL_PWREx_GetVoltageRange>
 8004100:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004102:	4b1e      	ldr	r3, [pc, #120]	; (800417c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004106:	4a1d      	ldr	r2, [pc, #116]	; (800417c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004108:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800410c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004114:	d10b      	bne.n	800412e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2b80      	cmp	r3, #128	; 0x80
 800411a:	d919      	bls.n	8004150 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2ba0      	cmp	r3, #160	; 0xa0
 8004120:	d902      	bls.n	8004128 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004122:	2302      	movs	r3, #2
 8004124:	613b      	str	r3, [r7, #16]
 8004126:	e013      	b.n	8004150 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004128:	2301      	movs	r3, #1
 800412a:	613b      	str	r3, [r7, #16]
 800412c:	e010      	b.n	8004150 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2b80      	cmp	r3, #128	; 0x80
 8004132:	d902      	bls.n	800413a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004134:	2303      	movs	r3, #3
 8004136:	613b      	str	r3, [r7, #16]
 8004138:	e00a      	b.n	8004150 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2b80      	cmp	r3, #128	; 0x80
 800413e:	d102      	bne.n	8004146 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004140:	2302      	movs	r3, #2
 8004142:	613b      	str	r3, [r7, #16]
 8004144:	e004      	b.n	8004150 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2b70      	cmp	r3, #112	; 0x70
 800414a:	d101      	bne.n	8004150 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800414c:	2301      	movs	r3, #1
 800414e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004150:	4b0b      	ldr	r3, [pc, #44]	; (8004180 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f023 0207 	bic.w	r2, r3, #7
 8004158:	4909      	ldr	r1, [pc, #36]	; (8004180 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	4313      	orrs	r3, r2
 800415e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004160:	4b07      	ldr	r3, [pc, #28]	; (8004180 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0307 	and.w	r3, r3, #7
 8004168:	693a      	ldr	r2, [r7, #16]
 800416a:	429a      	cmp	r2, r3
 800416c:	d001      	beq.n	8004172 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e000      	b.n	8004174 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004172:	2300      	movs	r3, #0
}
 8004174:	4618      	mov	r0, r3
 8004176:	3718      	adds	r7, #24
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}
 800417c:	40021000 	.word	0x40021000
 8004180:	40022000 	.word	0x40022000

08004184 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b086      	sub	sp, #24
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800418c:	2300      	movs	r3, #0
 800418e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004190:	2300      	movs	r3, #0
 8004192:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800419c:	2b00      	cmp	r3, #0
 800419e:	d03f      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041a8:	d01c      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80041aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041ae:	d802      	bhi.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d00e      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80041b4:	e01f      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x72>
 80041b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80041ba:	d003      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80041bc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80041c0:	d01c      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x78>
 80041c2:	e018      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80041c4:	4b85      	ldr	r3, [pc, #532]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	4a84      	ldr	r2, [pc, #528]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80041ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041ce:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80041d0:	e015      	b.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	3304      	adds	r3, #4
 80041d6:	2100      	movs	r1, #0
 80041d8:	4618      	mov	r0, r3
 80041da:	f000 fab9 	bl	8004750 <RCCEx_PLLSAI1_Config>
 80041de:	4603      	mov	r3, r0
 80041e0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80041e2:	e00c      	b.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	3320      	adds	r3, #32
 80041e8:	2100      	movs	r1, #0
 80041ea:	4618      	mov	r0, r3
 80041ec:	f000 fba0 	bl	8004930 <RCCEx_PLLSAI2_Config>
 80041f0:	4603      	mov	r3, r0
 80041f2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80041f4:	e003      	b.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	74fb      	strb	r3, [r7, #19]
      break;
 80041fa:	e000      	b.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80041fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041fe:	7cfb      	ldrb	r3, [r7, #19]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d10b      	bne.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004204:	4b75      	ldr	r3, [pc, #468]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800420a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004212:	4972      	ldr	r1, [pc, #456]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004214:	4313      	orrs	r3, r2
 8004216:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800421a:	e001      	b.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800421c:	7cfb      	ldrb	r3, [r7, #19]
 800421e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004228:	2b00      	cmp	r3, #0
 800422a:	d03f      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004230:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004234:	d01c      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004236:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800423a:	d802      	bhi.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 800423c:	2b00      	cmp	r3, #0
 800423e:	d00e      	beq.n	800425e <HAL_RCCEx_PeriphCLKConfig+0xda>
 8004240:	e01f      	b.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004242:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004246:	d003      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8004248:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800424c:	d01c      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800424e:	e018      	b.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004250:	4b62      	ldr	r3, [pc, #392]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	4a61      	ldr	r2, [pc, #388]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004256:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800425a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800425c:	e015      	b.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	3304      	adds	r3, #4
 8004262:	2100      	movs	r1, #0
 8004264:	4618      	mov	r0, r3
 8004266:	f000 fa73 	bl	8004750 <RCCEx_PLLSAI1_Config>
 800426a:	4603      	mov	r3, r0
 800426c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800426e:	e00c      	b.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	3320      	adds	r3, #32
 8004274:	2100      	movs	r1, #0
 8004276:	4618      	mov	r0, r3
 8004278:	f000 fb5a 	bl	8004930 <RCCEx_PLLSAI2_Config>
 800427c:	4603      	mov	r3, r0
 800427e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004280:	e003      	b.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	74fb      	strb	r3, [r7, #19]
      break;
 8004286:	e000      	b.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004288:	bf00      	nop
    }

    if(ret == HAL_OK)
 800428a:	7cfb      	ldrb	r3, [r7, #19]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d10b      	bne.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004290:	4b52      	ldr	r3, [pc, #328]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004296:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800429e:	494f      	ldr	r1, [pc, #316]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80042a0:	4313      	orrs	r3, r2
 80042a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80042a6:	e001      	b.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042a8:	7cfb      	ldrb	r3, [r7, #19]
 80042aa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	f000 80a0 	beq.w	80043fa <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042ba:	2300      	movs	r3, #0
 80042bc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80042be:	4b47      	ldr	r3, [pc, #284]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80042c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d101      	bne.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80042ca:	2301      	movs	r3, #1
 80042cc:	e000      	b.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80042ce:	2300      	movs	r3, #0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d00d      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042d4:	4b41      	ldr	r3, [pc, #260]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80042d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042d8:	4a40      	ldr	r2, [pc, #256]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80042da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042de:	6593      	str	r3, [r2, #88]	; 0x58
 80042e0:	4b3e      	ldr	r3, [pc, #248]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80042e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042e8:	60bb      	str	r3, [r7, #8]
 80042ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042ec:	2301      	movs	r3, #1
 80042ee:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042f0:	4b3b      	ldr	r3, [pc, #236]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a3a      	ldr	r2, [pc, #232]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80042f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80042fc:	f7fc ffd4 	bl	80012a8 <HAL_GetTick>
 8004300:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004302:	e009      	b.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004304:	f7fc ffd0 	bl	80012a8 <HAL_GetTick>
 8004308:	4602      	mov	r2, r0
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	2b02      	cmp	r3, #2
 8004310:	d902      	bls.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	74fb      	strb	r3, [r7, #19]
        break;
 8004316:	e005      	b.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004318:	4b31      	ldr	r3, [pc, #196]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004320:	2b00      	cmp	r3, #0
 8004322:	d0ef      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8004324:	7cfb      	ldrb	r3, [r7, #19]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d15c      	bne.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800432a:	4b2c      	ldr	r3, [pc, #176]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800432c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004330:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004334:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d01f      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004342:	697a      	ldr	r2, [r7, #20]
 8004344:	429a      	cmp	r2, r3
 8004346:	d019      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004348:	4b24      	ldr	r3, [pc, #144]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800434a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800434e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004352:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004354:	4b21      	ldr	r3, [pc, #132]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800435a:	4a20      	ldr	r2, [pc, #128]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800435c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004360:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004364:	4b1d      	ldr	r3, [pc, #116]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800436a:	4a1c      	ldr	r2, [pc, #112]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800436c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004370:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004374:	4a19      	ldr	r2, [pc, #100]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	f003 0301 	and.w	r3, r3, #1
 8004382:	2b00      	cmp	r3, #0
 8004384:	d016      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004386:	f7fc ff8f 	bl	80012a8 <HAL_GetTick>
 800438a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800438c:	e00b      	b.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800438e:	f7fc ff8b 	bl	80012a8 <HAL_GetTick>
 8004392:	4602      	mov	r2, r0
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	1ad3      	subs	r3, r2, r3
 8004398:	f241 3288 	movw	r2, #5000	; 0x1388
 800439c:	4293      	cmp	r3, r2
 800439e:	d902      	bls.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80043a0:	2303      	movs	r3, #3
 80043a2:	74fb      	strb	r3, [r7, #19]
            break;
 80043a4:	e006      	b.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043a6:	4b0d      	ldr	r3, [pc, #52]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80043a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ac:	f003 0302 	and.w	r3, r3, #2
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d0ec      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80043b4:	7cfb      	ldrb	r3, [r7, #19]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d10c      	bne.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043ba:	4b08      	ldr	r3, [pc, #32]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80043bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043ca:	4904      	ldr	r1, [pc, #16]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80043cc:	4313      	orrs	r3, r2
 80043ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80043d2:	e009      	b.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80043d4:	7cfb      	ldrb	r3, [r7, #19]
 80043d6:	74bb      	strb	r3, [r7, #18]
 80043d8:	e006      	b.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80043da:	bf00      	nop
 80043dc:	40021000 	.word	0x40021000
 80043e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043e4:	7cfb      	ldrb	r3, [r7, #19]
 80043e6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043e8:	7c7b      	ldrb	r3, [r7, #17]
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d105      	bne.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043ee:	4b9e      	ldr	r3, [pc, #632]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80043f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043f2:	4a9d      	ldr	r2, [pc, #628]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80043f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043f8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 0301 	and.w	r3, r3, #1
 8004402:	2b00      	cmp	r3, #0
 8004404:	d00a      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004406:	4b98      	ldr	r3, [pc, #608]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004408:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800440c:	f023 0203 	bic.w	r2, r3, #3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004414:	4994      	ldr	r1, [pc, #592]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004416:	4313      	orrs	r3, r2
 8004418:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 0302 	and.w	r3, r3, #2
 8004424:	2b00      	cmp	r3, #0
 8004426:	d00a      	beq.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004428:	4b8f      	ldr	r3, [pc, #572]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800442a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800442e:	f023 020c 	bic.w	r2, r3, #12
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004436:	498c      	ldr	r1, [pc, #560]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004438:	4313      	orrs	r3, r2
 800443a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0304 	and.w	r3, r3, #4
 8004446:	2b00      	cmp	r3, #0
 8004448:	d00a      	beq.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800444a:	4b87      	ldr	r3, [pc, #540]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800444c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004450:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004458:	4983      	ldr	r1, [pc, #524]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800445a:	4313      	orrs	r3, r2
 800445c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 0308 	and.w	r3, r3, #8
 8004468:	2b00      	cmp	r3, #0
 800446a:	d00a      	beq.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800446c:	4b7e      	ldr	r3, [pc, #504]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800446e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004472:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800447a:	497b      	ldr	r1, [pc, #492]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800447c:	4313      	orrs	r3, r2
 800447e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 0310 	and.w	r3, r3, #16
 800448a:	2b00      	cmp	r3, #0
 800448c:	d00a      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800448e:	4b76      	ldr	r3, [pc, #472]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004494:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800449c:	4972      	ldr	r1, [pc, #456]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0320 	and.w	r3, r3, #32
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d00a      	beq.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80044b0:	4b6d      	ldr	r3, [pc, #436]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80044b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044be:	496a      	ldr	r1, [pc, #424]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d00a      	beq.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80044d2:	4b65      	ldr	r3, [pc, #404]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80044d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044e0:	4961      	ldr	r1, [pc, #388]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80044e2:	4313      	orrs	r3, r2
 80044e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d00a      	beq.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80044f4:	4b5c      	ldr	r3, [pc, #368]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80044f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004502:	4959      	ldr	r1, [pc, #356]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004504:	4313      	orrs	r3, r2
 8004506:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004512:	2b00      	cmp	r3, #0
 8004514:	d00a      	beq.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004516:	4b54      	ldr	r3, [pc, #336]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800451c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004524:	4950      	ldr	r1, [pc, #320]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004526:	4313      	orrs	r3, r2
 8004528:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004534:	2b00      	cmp	r3, #0
 8004536:	d00a      	beq.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004538:	4b4b      	ldr	r3, [pc, #300]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800453a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800453e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004546:	4948      	ldr	r1, [pc, #288]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004548:	4313      	orrs	r3, r2
 800454a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004556:	2b00      	cmp	r3, #0
 8004558:	d00a      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800455a:	4b43      	ldr	r3, [pc, #268]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800455c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004560:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004568:	493f      	ldr	r1, [pc, #252]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800456a:	4313      	orrs	r3, r2
 800456c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004578:	2b00      	cmp	r3, #0
 800457a:	d028      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800457c:	4b3a      	ldr	r3, [pc, #232]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800457e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004582:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800458a:	4937      	ldr	r1, [pc, #220]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800458c:	4313      	orrs	r3, r2
 800458e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004596:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800459a:	d106      	bne.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800459c:	4b32      	ldr	r3, [pc, #200]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	4a31      	ldr	r2, [pc, #196]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80045a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045a6:	60d3      	str	r3, [r2, #12]
 80045a8:	e011      	b.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80045b2:	d10c      	bne.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	3304      	adds	r3, #4
 80045b8:	2101      	movs	r1, #1
 80045ba:	4618      	mov	r0, r3
 80045bc:	f000 f8c8 	bl	8004750 <RCCEx_PLLSAI1_Config>
 80045c0:	4603      	mov	r3, r0
 80045c2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80045c4:	7cfb      	ldrb	r3, [r7, #19]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d001      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 80045ca:	7cfb      	ldrb	r3, [r7, #19]
 80045cc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d028      	beq.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80045da:	4b23      	ldr	r3, [pc, #140]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80045dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045e0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045e8:	491f      	ldr	r1, [pc, #124]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80045ea:	4313      	orrs	r3, r2
 80045ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045f8:	d106      	bne.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045fa:	4b1b      	ldr	r3, [pc, #108]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	4a1a      	ldr	r2, [pc, #104]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004600:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004604:	60d3      	str	r3, [r2, #12]
 8004606:	e011      	b.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800460c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004610:	d10c      	bne.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	3304      	adds	r3, #4
 8004616:	2101      	movs	r1, #1
 8004618:	4618      	mov	r0, r3
 800461a:	f000 f899 	bl	8004750 <RCCEx_PLLSAI1_Config>
 800461e:	4603      	mov	r3, r0
 8004620:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004622:	7cfb      	ldrb	r3, [r7, #19]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d001      	beq.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8004628:	7cfb      	ldrb	r3, [r7, #19]
 800462a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004634:	2b00      	cmp	r3, #0
 8004636:	d02b      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004638:	4b0b      	ldr	r3, [pc, #44]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800463a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800463e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004646:	4908      	ldr	r1, [pc, #32]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004648:	4313      	orrs	r3, r2
 800464a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004652:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004656:	d109      	bne.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004658:	4b03      	ldr	r3, [pc, #12]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	4a02      	ldr	r2, [pc, #8]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800465e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004662:	60d3      	str	r3, [r2, #12]
 8004664:	e014      	b.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8004666:	bf00      	nop
 8004668:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004670:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004674:	d10c      	bne.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	3304      	adds	r3, #4
 800467a:	2101      	movs	r1, #1
 800467c:	4618      	mov	r0, r3
 800467e:	f000 f867 	bl	8004750 <RCCEx_PLLSAI1_Config>
 8004682:	4603      	mov	r3, r0
 8004684:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004686:	7cfb      	ldrb	r3, [r7, #19]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d001      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 800468c:	7cfb      	ldrb	r3, [r7, #19]
 800468e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004698:	2b00      	cmp	r3, #0
 800469a:	d02f      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800469c:	4b2b      	ldr	r3, [pc, #172]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800469e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046a2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046aa:	4928      	ldr	r1, [pc, #160]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80046ac:	4313      	orrs	r3, r2
 80046ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80046ba:	d10d      	bne.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	3304      	adds	r3, #4
 80046c0:	2102      	movs	r1, #2
 80046c2:	4618      	mov	r0, r3
 80046c4:	f000 f844 	bl	8004750 <RCCEx_PLLSAI1_Config>
 80046c8:	4603      	mov	r3, r0
 80046ca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046cc:	7cfb      	ldrb	r3, [r7, #19]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d014      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80046d2:	7cfb      	ldrb	r3, [r7, #19]
 80046d4:	74bb      	strb	r3, [r7, #18]
 80046d6:	e011      	b.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046e0:	d10c      	bne.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	3320      	adds	r3, #32
 80046e6:	2102      	movs	r1, #2
 80046e8:	4618      	mov	r0, r3
 80046ea:	f000 f921 	bl	8004930 <RCCEx_PLLSAI2_Config>
 80046ee:	4603      	mov	r3, r0
 80046f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046f2:	7cfb      	ldrb	r3, [r7, #19]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d001      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80046f8:	7cfb      	ldrb	r3, [r7, #19]
 80046fa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004704:	2b00      	cmp	r3, #0
 8004706:	d00a      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004708:	4b10      	ldr	r3, [pc, #64]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800470a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800470e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004716:	490d      	ldr	r1, [pc, #52]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004718:	4313      	orrs	r3, r2
 800471a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d00b      	beq.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800472a:	4b08      	ldr	r3, [pc, #32]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800472c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004730:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800473a:	4904      	ldr	r1, [pc, #16]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800473c:	4313      	orrs	r3, r2
 800473e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004742:	7cbb      	ldrb	r3, [r7, #18]
}
 8004744:	4618      	mov	r0, r3
 8004746:	3718      	adds	r7, #24
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}
 800474c:	40021000 	.word	0x40021000

08004750 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800475a:	2300      	movs	r3, #0
 800475c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800475e:	4b73      	ldr	r3, [pc, #460]	; (800492c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	f003 0303 	and.w	r3, r3, #3
 8004766:	2b00      	cmp	r3, #0
 8004768:	d018      	beq.n	800479c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800476a:	4b70      	ldr	r3, [pc, #448]	; (800492c <RCCEx_PLLSAI1_Config+0x1dc>)
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	f003 0203 	and.w	r2, r3, #3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	429a      	cmp	r2, r3
 8004778:	d10d      	bne.n	8004796 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
       ||
 800477e:	2b00      	cmp	r3, #0
 8004780:	d009      	beq.n	8004796 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004782:	4b6a      	ldr	r3, [pc, #424]	; (800492c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	091b      	lsrs	r3, r3, #4
 8004788:	f003 0307 	and.w	r3, r3, #7
 800478c:	1c5a      	adds	r2, r3, #1
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	685b      	ldr	r3, [r3, #4]
       ||
 8004792:	429a      	cmp	r2, r3
 8004794:	d044      	beq.n	8004820 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	73fb      	strb	r3, [r7, #15]
 800479a:	e041      	b.n	8004820 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	d00c      	beq.n	80047be <RCCEx_PLLSAI1_Config+0x6e>
 80047a4:	2b03      	cmp	r3, #3
 80047a6:	d013      	beq.n	80047d0 <RCCEx_PLLSAI1_Config+0x80>
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d120      	bne.n	80047ee <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80047ac:	4b5f      	ldr	r3, [pc, #380]	; (800492c <RCCEx_PLLSAI1_Config+0x1dc>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0302 	and.w	r3, r3, #2
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d11d      	bne.n	80047f4 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047bc:	e01a      	b.n	80047f4 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80047be:	4b5b      	ldr	r3, [pc, #364]	; (800492c <RCCEx_PLLSAI1_Config+0x1dc>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d116      	bne.n	80047f8 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047ce:	e013      	b.n	80047f8 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80047d0:	4b56      	ldr	r3, [pc, #344]	; (800492c <RCCEx_PLLSAI1_Config+0x1dc>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d10f      	bne.n	80047fc <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80047dc:	4b53      	ldr	r3, [pc, #332]	; (800492c <RCCEx_PLLSAI1_Config+0x1dc>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d109      	bne.n	80047fc <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80047ec:	e006      	b.n	80047fc <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	73fb      	strb	r3, [r7, #15]
      break;
 80047f2:	e004      	b.n	80047fe <RCCEx_PLLSAI1_Config+0xae>
      break;
 80047f4:	bf00      	nop
 80047f6:	e002      	b.n	80047fe <RCCEx_PLLSAI1_Config+0xae>
      break;
 80047f8:	bf00      	nop
 80047fa:	e000      	b.n	80047fe <RCCEx_PLLSAI1_Config+0xae>
      break;
 80047fc:	bf00      	nop
    }

    if(status == HAL_OK)
 80047fe:	7bfb      	ldrb	r3, [r7, #15]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d10d      	bne.n	8004820 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004804:	4b49      	ldr	r3, [pc, #292]	; (800492c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6819      	ldr	r1, [r3, #0]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	3b01      	subs	r3, #1
 8004816:	011b      	lsls	r3, r3, #4
 8004818:	430b      	orrs	r3, r1
 800481a:	4944      	ldr	r1, [pc, #272]	; (800492c <RCCEx_PLLSAI1_Config+0x1dc>)
 800481c:	4313      	orrs	r3, r2
 800481e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004820:	7bfb      	ldrb	r3, [r7, #15]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d17d      	bne.n	8004922 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004826:	4b41      	ldr	r3, [pc, #260]	; (800492c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a40      	ldr	r2, [pc, #256]	; (800492c <RCCEx_PLLSAI1_Config+0x1dc>)
 800482c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004830:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004832:	f7fc fd39 	bl	80012a8 <HAL_GetTick>
 8004836:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004838:	e009      	b.n	800484e <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800483a:	f7fc fd35 	bl	80012a8 <HAL_GetTick>
 800483e:	4602      	mov	r2, r0
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	1ad3      	subs	r3, r2, r3
 8004844:	2b02      	cmp	r3, #2
 8004846:	d902      	bls.n	800484e <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004848:	2303      	movs	r3, #3
 800484a:	73fb      	strb	r3, [r7, #15]
        break;
 800484c:	e005      	b.n	800485a <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800484e:	4b37      	ldr	r3, [pc, #220]	; (800492c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004856:	2b00      	cmp	r3, #0
 8004858:	d1ef      	bne.n	800483a <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800485a:	7bfb      	ldrb	r3, [r7, #15]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d160      	bne.n	8004922 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d111      	bne.n	800488a <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004866:	4b31      	ldr	r3, [pc, #196]	; (800492c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800486e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	6892      	ldr	r2, [r2, #8]
 8004876:	0211      	lsls	r1, r2, #8
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	68d2      	ldr	r2, [r2, #12]
 800487c:	0912      	lsrs	r2, r2, #4
 800487e:	0452      	lsls	r2, r2, #17
 8004880:	430a      	orrs	r2, r1
 8004882:	492a      	ldr	r1, [pc, #168]	; (800492c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004884:	4313      	orrs	r3, r2
 8004886:	610b      	str	r3, [r1, #16]
 8004888:	e027      	b.n	80048da <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	2b01      	cmp	r3, #1
 800488e:	d112      	bne.n	80048b6 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004890:	4b26      	ldr	r3, [pc, #152]	; (800492c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004892:	691b      	ldr	r3, [r3, #16]
 8004894:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004898:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	6892      	ldr	r2, [r2, #8]
 80048a0:	0211      	lsls	r1, r2, #8
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	6912      	ldr	r2, [r2, #16]
 80048a6:	0852      	lsrs	r2, r2, #1
 80048a8:	3a01      	subs	r2, #1
 80048aa:	0552      	lsls	r2, r2, #21
 80048ac:	430a      	orrs	r2, r1
 80048ae:	491f      	ldr	r1, [pc, #124]	; (800492c <RCCEx_PLLSAI1_Config+0x1dc>)
 80048b0:	4313      	orrs	r3, r2
 80048b2:	610b      	str	r3, [r1, #16]
 80048b4:	e011      	b.n	80048da <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048b6:	4b1d      	ldr	r3, [pc, #116]	; (800492c <RCCEx_PLLSAI1_Config+0x1dc>)
 80048b8:	691b      	ldr	r3, [r3, #16]
 80048ba:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80048be:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	6892      	ldr	r2, [r2, #8]
 80048c6:	0211      	lsls	r1, r2, #8
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	6952      	ldr	r2, [r2, #20]
 80048cc:	0852      	lsrs	r2, r2, #1
 80048ce:	3a01      	subs	r2, #1
 80048d0:	0652      	lsls	r2, r2, #25
 80048d2:	430a      	orrs	r2, r1
 80048d4:	4915      	ldr	r1, [pc, #84]	; (800492c <RCCEx_PLLSAI1_Config+0x1dc>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80048da:	4b14      	ldr	r3, [pc, #80]	; (800492c <RCCEx_PLLSAI1_Config+0x1dc>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a13      	ldr	r2, [pc, #76]	; (800492c <RCCEx_PLLSAI1_Config+0x1dc>)
 80048e0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80048e4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048e6:	f7fc fcdf 	bl	80012a8 <HAL_GetTick>
 80048ea:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80048ec:	e009      	b.n	8004902 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80048ee:	f7fc fcdb 	bl	80012a8 <HAL_GetTick>
 80048f2:	4602      	mov	r2, r0
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	1ad3      	subs	r3, r2, r3
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	d902      	bls.n	8004902 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80048fc:	2303      	movs	r3, #3
 80048fe:	73fb      	strb	r3, [r7, #15]
          break;
 8004900:	e005      	b.n	800490e <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004902:	4b0a      	ldr	r3, [pc, #40]	; (800492c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d0ef      	beq.n	80048ee <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 800490e:	7bfb      	ldrb	r3, [r7, #15]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d106      	bne.n	8004922 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004914:	4b05      	ldr	r3, [pc, #20]	; (800492c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004916:	691a      	ldr	r2, [r3, #16]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	699b      	ldr	r3, [r3, #24]
 800491c:	4903      	ldr	r1, [pc, #12]	; (800492c <RCCEx_PLLSAI1_Config+0x1dc>)
 800491e:	4313      	orrs	r3, r2
 8004920:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004922:	7bfb      	ldrb	r3, [r7, #15]
}
 8004924:	4618      	mov	r0, r3
 8004926:	3710      	adds	r7, #16
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}
 800492c:	40021000 	.word	0x40021000

08004930 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b084      	sub	sp, #16
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800493a:	2300      	movs	r3, #0
 800493c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800493e:	4b68      	ldr	r3, [pc, #416]	; (8004ae0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	f003 0303 	and.w	r3, r3, #3
 8004946:	2b00      	cmp	r3, #0
 8004948:	d018      	beq.n	800497c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800494a:	4b65      	ldr	r3, [pc, #404]	; (8004ae0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	f003 0203 	and.w	r2, r3, #3
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	429a      	cmp	r2, r3
 8004958:	d10d      	bne.n	8004976 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
       ||
 800495e:	2b00      	cmp	r3, #0
 8004960:	d009      	beq.n	8004976 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004962:	4b5f      	ldr	r3, [pc, #380]	; (8004ae0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	091b      	lsrs	r3, r3, #4
 8004968:	f003 0307 	and.w	r3, r3, #7
 800496c:	1c5a      	adds	r2, r3, #1
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	685b      	ldr	r3, [r3, #4]
       ||
 8004972:	429a      	cmp	r2, r3
 8004974:	d044      	beq.n	8004a00 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	73fb      	strb	r3, [r7, #15]
 800497a:	e041      	b.n	8004a00 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2b02      	cmp	r3, #2
 8004982:	d00c      	beq.n	800499e <RCCEx_PLLSAI2_Config+0x6e>
 8004984:	2b03      	cmp	r3, #3
 8004986:	d013      	beq.n	80049b0 <RCCEx_PLLSAI2_Config+0x80>
 8004988:	2b01      	cmp	r3, #1
 800498a:	d120      	bne.n	80049ce <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800498c:	4b54      	ldr	r3, [pc, #336]	; (8004ae0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 0302 	and.w	r3, r3, #2
 8004994:	2b00      	cmp	r3, #0
 8004996:	d11d      	bne.n	80049d4 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800499c:	e01a      	b.n	80049d4 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800499e:	4b50      	ldr	r3, [pc, #320]	; (8004ae0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d116      	bne.n	80049d8 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049ae:	e013      	b.n	80049d8 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80049b0:	4b4b      	ldr	r3, [pc, #300]	; (8004ae0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d10f      	bne.n	80049dc <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80049bc:	4b48      	ldr	r3, [pc, #288]	; (8004ae0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d109      	bne.n	80049dc <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80049cc:	e006      	b.n	80049dc <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	73fb      	strb	r3, [r7, #15]
      break;
 80049d2:	e004      	b.n	80049de <RCCEx_PLLSAI2_Config+0xae>
      break;
 80049d4:	bf00      	nop
 80049d6:	e002      	b.n	80049de <RCCEx_PLLSAI2_Config+0xae>
      break;
 80049d8:	bf00      	nop
 80049da:	e000      	b.n	80049de <RCCEx_PLLSAI2_Config+0xae>
      break;
 80049dc:	bf00      	nop
    }

    if(status == HAL_OK)
 80049de:	7bfb      	ldrb	r3, [r7, #15]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d10d      	bne.n	8004a00 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80049e4:	4b3e      	ldr	r3, [pc, #248]	; (8004ae0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6819      	ldr	r1, [r3, #0]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	3b01      	subs	r3, #1
 80049f6:	011b      	lsls	r3, r3, #4
 80049f8:	430b      	orrs	r3, r1
 80049fa:	4939      	ldr	r1, [pc, #228]	; (8004ae0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80049fc:	4313      	orrs	r3, r2
 80049fe:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004a00:	7bfb      	ldrb	r3, [r7, #15]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d167      	bne.n	8004ad6 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004a06:	4b36      	ldr	r3, [pc, #216]	; (8004ae0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a35      	ldr	r2, [pc, #212]	; (8004ae0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004a0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a12:	f7fc fc49 	bl	80012a8 <HAL_GetTick>
 8004a16:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004a18:	e009      	b.n	8004a2e <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004a1a:	f7fc fc45 	bl	80012a8 <HAL_GetTick>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	1ad3      	subs	r3, r2, r3
 8004a24:	2b02      	cmp	r3, #2
 8004a26:	d902      	bls.n	8004a2e <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004a28:	2303      	movs	r3, #3
 8004a2a:	73fb      	strb	r3, [r7, #15]
        break;
 8004a2c:	e005      	b.n	8004a3a <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004a2e:	4b2c      	ldr	r3, [pc, #176]	; (8004ae0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d1ef      	bne.n	8004a1a <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004a3a:	7bfb      	ldrb	r3, [r7, #15]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d14a      	bne.n	8004ad6 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d111      	bne.n	8004a6a <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a46:	4b26      	ldr	r3, [pc, #152]	; (8004ae0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004a48:	695b      	ldr	r3, [r3, #20]
 8004a4a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004a4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	6892      	ldr	r2, [r2, #8]
 8004a56:	0211      	lsls	r1, r2, #8
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	68d2      	ldr	r2, [r2, #12]
 8004a5c:	0912      	lsrs	r2, r2, #4
 8004a5e:	0452      	lsls	r2, r2, #17
 8004a60:	430a      	orrs	r2, r1
 8004a62:	491f      	ldr	r1, [pc, #124]	; (8004ae0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004a64:	4313      	orrs	r3, r2
 8004a66:	614b      	str	r3, [r1, #20]
 8004a68:	e011      	b.n	8004a8e <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a6a:	4b1d      	ldr	r3, [pc, #116]	; (8004ae0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004a6c:	695b      	ldr	r3, [r3, #20]
 8004a6e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004a72:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	6892      	ldr	r2, [r2, #8]
 8004a7a:	0211      	lsls	r1, r2, #8
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	6912      	ldr	r2, [r2, #16]
 8004a80:	0852      	lsrs	r2, r2, #1
 8004a82:	3a01      	subs	r2, #1
 8004a84:	0652      	lsls	r2, r2, #25
 8004a86:	430a      	orrs	r2, r1
 8004a88:	4915      	ldr	r1, [pc, #84]	; (8004ae0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004a8e:	4b14      	ldr	r3, [pc, #80]	; (8004ae0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a13      	ldr	r2, [pc, #76]	; (8004ae0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004a94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a98:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a9a:	f7fc fc05 	bl	80012a8 <HAL_GetTick>
 8004a9e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004aa0:	e009      	b.n	8004ab6 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004aa2:	f7fc fc01 	bl	80012a8 <HAL_GetTick>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	2b02      	cmp	r3, #2
 8004aae:	d902      	bls.n	8004ab6 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	73fb      	strb	r3, [r7, #15]
          break;
 8004ab4:	e005      	b.n	8004ac2 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004ab6:	4b0a      	ldr	r3, [pc, #40]	; (8004ae0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d0ef      	beq.n	8004aa2 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8004ac2:	7bfb      	ldrb	r3, [r7, #15]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d106      	bne.n	8004ad6 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004ac8:	4b05      	ldr	r3, [pc, #20]	; (8004ae0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004aca:	695a      	ldr	r2, [r3, #20]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	695b      	ldr	r3, [r3, #20]
 8004ad0:	4903      	ldr	r1, [pc, #12]	; (8004ae0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3710      	adds	r7, #16
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	40021000 	.word	0x40021000

08004ae4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b082      	sub	sp, #8
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d101      	bne.n	8004af6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e049      	b.n	8004b8a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d106      	bne.n	8004b10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f7fc fa7e 	bl	800100c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2202      	movs	r2, #2
 8004b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	3304      	adds	r3, #4
 8004b20:	4619      	mov	r1, r3
 8004b22:	4610      	mov	r0, r2
 8004b24:	f000 fa56 	bl	8004fd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2201      	movs	r2, #1
 8004b44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b88:	2300      	movs	r3, #0
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3708      	adds	r7, #8
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
	...

08004b94 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b085      	sub	sp, #20
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d001      	beq.n	8004bac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e047      	b.n	8004c3c <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2202      	movs	r2, #2
 8004bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a23      	ldr	r2, [pc, #140]	; (8004c48 <HAL_TIM_Base_Start+0xb4>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d01d      	beq.n	8004bfa <HAL_TIM_Base_Start+0x66>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bc6:	d018      	beq.n	8004bfa <HAL_TIM_Base_Start+0x66>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a1f      	ldr	r2, [pc, #124]	; (8004c4c <HAL_TIM_Base_Start+0xb8>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d013      	beq.n	8004bfa <HAL_TIM_Base_Start+0x66>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a1e      	ldr	r2, [pc, #120]	; (8004c50 <HAL_TIM_Base_Start+0xbc>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d00e      	beq.n	8004bfa <HAL_TIM_Base_Start+0x66>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a1c      	ldr	r2, [pc, #112]	; (8004c54 <HAL_TIM_Base_Start+0xc0>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d009      	beq.n	8004bfa <HAL_TIM_Base_Start+0x66>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a1b      	ldr	r2, [pc, #108]	; (8004c58 <HAL_TIM_Base_Start+0xc4>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d004      	beq.n	8004bfa <HAL_TIM_Base_Start+0x66>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a19      	ldr	r2, [pc, #100]	; (8004c5c <HAL_TIM_Base_Start+0xc8>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d115      	bne.n	8004c26 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	689a      	ldr	r2, [r3, #8]
 8004c00:	4b17      	ldr	r3, [pc, #92]	; (8004c60 <HAL_TIM_Base_Start+0xcc>)
 8004c02:	4013      	ands	r3, r2
 8004c04:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2b06      	cmp	r3, #6
 8004c0a:	d015      	beq.n	8004c38 <HAL_TIM_Base_Start+0xa4>
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c12:	d011      	beq.n	8004c38 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f042 0201 	orr.w	r2, r2, #1
 8004c22:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c24:	e008      	b.n	8004c38 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f042 0201 	orr.w	r2, r2, #1
 8004c34:	601a      	str	r2, [r3, #0]
 8004c36:	e000      	b.n	8004c3a <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c38:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004c3a:	2300      	movs	r3, #0
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3714      	adds	r7, #20
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr
 8004c48:	40012c00 	.word	0x40012c00
 8004c4c:	40000400 	.word	0x40000400
 8004c50:	40000800 	.word	0x40000800
 8004c54:	40000c00 	.word	0x40000c00
 8004c58:	40013400 	.word	0x40013400
 8004c5c:	40014000 	.word	0x40014000
 8004c60:	00010007 	.word	0x00010007

08004c64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b085      	sub	sp, #20
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d001      	beq.n	8004c7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e04f      	b.n	8004d1c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2202      	movs	r2, #2
 8004c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	68da      	ldr	r2, [r3, #12]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f042 0201 	orr.w	r2, r2, #1
 8004c92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a23      	ldr	r2, [pc, #140]	; (8004d28 <HAL_TIM_Base_Start_IT+0xc4>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d01d      	beq.n	8004cda <HAL_TIM_Base_Start_IT+0x76>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ca6:	d018      	beq.n	8004cda <HAL_TIM_Base_Start_IT+0x76>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a1f      	ldr	r2, [pc, #124]	; (8004d2c <HAL_TIM_Base_Start_IT+0xc8>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d013      	beq.n	8004cda <HAL_TIM_Base_Start_IT+0x76>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a1e      	ldr	r2, [pc, #120]	; (8004d30 <HAL_TIM_Base_Start_IT+0xcc>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d00e      	beq.n	8004cda <HAL_TIM_Base_Start_IT+0x76>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a1c      	ldr	r2, [pc, #112]	; (8004d34 <HAL_TIM_Base_Start_IT+0xd0>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d009      	beq.n	8004cda <HAL_TIM_Base_Start_IT+0x76>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a1b      	ldr	r2, [pc, #108]	; (8004d38 <HAL_TIM_Base_Start_IT+0xd4>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d004      	beq.n	8004cda <HAL_TIM_Base_Start_IT+0x76>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a19      	ldr	r2, [pc, #100]	; (8004d3c <HAL_TIM_Base_Start_IT+0xd8>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d115      	bne.n	8004d06 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	689a      	ldr	r2, [r3, #8]
 8004ce0:	4b17      	ldr	r3, [pc, #92]	; (8004d40 <HAL_TIM_Base_Start_IT+0xdc>)
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2b06      	cmp	r3, #6
 8004cea:	d015      	beq.n	8004d18 <HAL_TIM_Base_Start_IT+0xb4>
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cf2:	d011      	beq.n	8004d18 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f042 0201 	orr.w	r2, r2, #1
 8004d02:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d04:	e008      	b.n	8004d18 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f042 0201 	orr.w	r2, r2, #1
 8004d14:	601a      	str	r2, [r3, #0]
 8004d16:	e000      	b.n	8004d1a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d18:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004d1a:	2300      	movs	r3, #0
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3714      	adds	r7, #20
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr
 8004d28:	40012c00 	.word	0x40012c00
 8004d2c:	40000400 	.word	0x40000400
 8004d30:	40000800 	.word	0x40000800
 8004d34:	40000c00 	.word	0x40000c00
 8004d38:	40013400 	.word	0x40013400
 8004d3c:	40014000 	.word	0x40014000
 8004d40:	00010007 	.word	0x00010007

08004d44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b082      	sub	sp, #8
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	691b      	ldr	r3, [r3, #16]
 8004d52:	f003 0302 	and.w	r3, r3, #2
 8004d56:	2b02      	cmp	r3, #2
 8004d58:	d122      	bne.n	8004da0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	f003 0302 	and.w	r3, r3, #2
 8004d64:	2b02      	cmp	r3, #2
 8004d66:	d11b      	bne.n	8004da0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f06f 0202 	mvn.w	r2, #2
 8004d70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2201      	movs	r2, #1
 8004d76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	699b      	ldr	r3, [r3, #24]
 8004d7e:	f003 0303 	and.w	r3, r3, #3
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d003      	beq.n	8004d8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f000 f905 	bl	8004f96 <HAL_TIM_IC_CaptureCallback>
 8004d8c:	e005      	b.n	8004d9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 f8f7 	bl	8004f82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f000 f908 	bl	8004faa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	691b      	ldr	r3, [r3, #16]
 8004da6:	f003 0304 	and.w	r3, r3, #4
 8004daa:	2b04      	cmp	r3, #4
 8004dac:	d122      	bne.n	8004df4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	f003 0304 	and.w	r3, r3, #4
 8004db8:	2b04      	cmp	r3, #4
 8004dba:	d11b      	bne.n	8004df4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f06f 0204 	mvn.w	r2, #4
 8004dc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2202      	movs	r2, #2
 8004dca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	699b      	ldr	r3, [r3, #24]
 8004dd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d003      	beq.n	8004de2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f000 f8db 	bl	8004f96 <HAL_TIM_IC_CaptureCallback>
 8004de0:	e005      	b.n	8004dee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f000 f8cd 	bl	8004f82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f000 f8de 	bl	8004faa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	691b      	ldr	r3, [r3, #16]
 8004dfa:	f003 0308 	and.w	r3, r3, #8
 8004dfe:	2b08      	cmp	r3, #8
 8004e00:	d122      	bne.n	8004e48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	f003 0308 	and.w	r3, r3, #8
 8004e0c:	2b08      	cmp	r3, #8
 8004e0e:	d11b      	bne.n	8004e48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f06f 0208 	mvn.w	r2, #8
 8004e18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2204      	movs	r2, #4
 8004e1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	69db      	ldr	r3, [r3, #28]
 8004e26:	f003 0303 	and.w	r3, r3, #3
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d003      	beq.n	8004e36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f000 f8b1 	bl	8004f96 <HAL_TIM_IC_CaptureCallback>
 8004e34:	e005      	b.n	8004e42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f000 f8a3 	bl	8004f82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f000 f8b4 	bl	8004faa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	691b      	ldr	r3, [r3, #16]
 8004e4e:	f003 0310 	and.w	r3, r3, #16
 8004e52:	2b10      	cmp	r3, #16
 8004e54:	d122      	bne.n	8004e9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	f003 0310 	and.w	r3, r3, #16
 8004e60:	2b10      	cmp	r3, #16
 8004e62:	d11b      	bne.n	8004e9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f06f 0210 	mvn.w	r2, #16
 8004e6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2208      	movs	r2, #8
 8004e72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	69db      	ldr	r3, [r3, #28]
 8004e7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d003      	beq.n	8004e8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f000 f887 	bl	8004f96 <HAL_TIM_IC_CaptureCallback>
 8004e88:	e005      	b.n	8004e96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f000 f879 	bl	8004f82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f000 f88a 	bl	8004faa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	f003 0301 	and.w	r3, r3, #1
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d10e      	bne.n	8004ec8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	f003 0301 	and.w	r3, r3, #1
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d107      	bne.n	8004ec8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f06f 0201 	mvn.w	r2, #1
 8004ec0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f7fb fcbc 	bl	8000840 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	691b      	ldr	r3, [r3, #16]
 8004ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ed2:	2b80      	cmp	r3, #128	; 0x80
 8004ed4:	d10e      	bne.n	8004ef4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ee0:	2b80      	cmp	r3, #128	; 0x80
 8004ee2:	d107      	bne.n	8004ef4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004eec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f000 f99c 	bl	800522c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	691b      	ldr	r3, [r3, #16]
 8004efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004efe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f02:	d10e      	bne.n	8004f22 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	68db      	ldr	r3, [r3, #12]
 8004f0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f0e:	2b80      	cmp	r3, #128	; 0x80
 8004f10:	d107      	bne.n	8004f22 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004f1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f000 f98f 	bl	8005240 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	691b      	ldr	r3, [r3, #16]
 8004f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f2c:	2b40      	cmp	r3, #64	; 0x40
 8004f2e:	d10e      	bne.n	8004f4e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f3a:	2b40      	cmp	r3, #64	; 0x40
 8004f3c:	d107      	bne.n	8004f4e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f000 f838 	bl	8004fbe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	691b      	ldr	r3, [r3, #16]
 8004f54:	f003 0320 	and.w	r3, r3, #32
 8004f58:	2b20      	cmp	r3, #32
 8004f5a:	d10e      	bne.n	8004f7a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	68db      	ldr	r3, [r3, #12]
 8004f62:	f003 0320 	and.w	r3, r3, #32
 8004f66:	2b20      	cmp	r3, #32
 8004f68:	d107      	bne.n	8004f7a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f06f 0220 	mvn.w	r2, #32
 8004f72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f000 f94f 	bl	8005218 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f7a:	bf00      	nop
 8004f7c:	3708      	adds	r7, #8
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}

08004f82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f82:	b480      	push	{r7}
 8004f84:	b083      	sub	sp, #12
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f8a:	bf00      	nop
 8004f8c:	370c      	adds	r7, #12
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr

08004f96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f96:	b480      	push	{r7}
 8004f98:	b083      	sub	sp, #12
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f9e:	bf00      	nop
 8004fa0:	370c      	adds	r7, #12
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr

08004faa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004faa:	b480      	push	{r7}
 8004fac:	b083      	sub	sp, #12
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004fb2:	bf00      	nop
 8004fb4:	370c      	adds	r7, #12
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr

08004fbe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004fbe:	b480      	push	{r7}
 8004fc0:	b083      	sub	sp, #12
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004fc6:	bf00      	nop
 8004fc8:	370c      	adds	r7, #12
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr
	...

08004fd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b085      	sub	sp, #20
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4a40      	ldr	r2, [pc, #256]	; (80050e8 <TIM_Base_SetConfig+0x114>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d013      	beq.n	8005014 <TIM_Base_SetConfig+0x40>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ff2:	d00f      	beq.n	8005014 <TIM_Base_SetConfig+0x40>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	4a3d      	ldr	r2, [pc, #244]	; (80050ec <TIM_Base_SetConfig+0x118>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d00b      	beq.n	8005014 <TIM_Base_SetConfig+0x40>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	4a3c      	ldr	r2, [pc, #240]	; (80050f0 <TIM_Base_SetConfig+0x11c>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d007      	beq.n	8005014 <TIM_Base_SetConfig+0x40>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	4a3b      	ldr	r2, [pc, #236]	; (80050f4 <TIM_Base_SetConfig+0x120>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d003      	beq.n	8005014 <TIM_Base_SetConfig+0x40>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	4a3a      	ldr	r2, [pc, #232]	; (80050f8 <TIM_Base_SetConfig+0x124>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d108      	bne.n	8005026 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800501a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	68fa      	ldr	r2, [r7, #12]
 8005022:	4313      	orrs	r3, r2
 8005024:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4a2f      	ldr	r2, [pc, #188]	; (80050e8 <TIM_Base_SetConfig+0x114>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d01f      	beq.n	800506e <TIM_Base_SetConfig+0x9a>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005034:	d01b      	beq.n	800506e <TIM_Base_SetConfig+0x9a>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a2c      	ldr	r2, [pc, #176]	; (80050ec <TIM_Base_SetConfig+0x118>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d017      	beq.n	800506e <TIM_Base_SetConfig+0x9a>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a2b      	ldr	r2, [pc, #172]	; (80050f0 <TIM_Base_SetConfig+0x11c>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d013      	beq.n	800506e <TIM_Base_SetConfig+0x9a>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a2a      	ldr	r2, [pc, #168]	; (80050f4 <TIM_Base_SetConfig+0x120>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d00f      	beq.n	800506e <TIM_Base_SetConfig+0x9a>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a29      	ldr	r2, [pc, #164]	; (80050f8 <TIM_Base_SetConfig+0x124>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d00b      	beq.n	800506e <TIM_Base_SetConfig+0x9a>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a28      	ldr	r2, [pc, #160]	; (80050fc <TIM_Base_SetConfig+0x128>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d007      	beq.n	800506e <TIM_Base_SetConfig+0x9a>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a27      	ldr	r2, [pc, #156]	; (8005100 <TIM_Base_SetConfig+0x12c>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d003      	beq.n	800506e <TIM_Base_SetConfig+0x9a>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a26      	ldr	r2, [pc, #152]	; (8005104 <TIM_Base_SetConfig+0x130>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d108      	bne.n	8005080 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005074:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	68db      	ldr	r3, [r3, #12]
 800507a:	68fa      	ldr	r2, [r7, #12]
 800507c:	4313      	orrs	r3, r2
 800507e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	695b      	ldr	r3, [r3, #20]
 800508a:	4313      	orrs	r3, r2
 800508c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	68fa      	ldr	r2, [r7, #12]
 8005092:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	689a      	ldr	r2, [r3, #8]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	4a10      	ldr	r2, [pc, #64]	; (80050e8 <TIM_Base_SetConfig+0x114>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d00f      	beq.n	80050cc <TIM_Base_SetConfig+0xf8>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4a12      	ldr	r2, [pc, #72]	; (80050f8 <TIM_Base_SetConfig+0x124>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d00b      	beq.n	80050cc <TIM_Base_SetConfig+0xf8>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	4a11      	ldr	r2, [pc, #68]	; (80050fc <TIM_Base_SetConfig+0x128>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d007      	beq.n	80050cc <TIM_Base_SetConfig+0xf8>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	4a10      	ldr	r2, [pc, #64]	; (8005100 <TIM_Base_SetConfig+0x12c>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d003      	beq.n	80050cc <TIM_Base_SetConfig+0xf8>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	4a0f      	ldr	r2, [pc, #60]	; (8005104 <TIM_Base_SetConfig+0x130>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d103      	bne.n	80050d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	691a      	ldr	r2, [r3, #16]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	615a      	str	r2, [r3, #20]
}
 80050da:	bf00      	nop
 80050dc:	3714      	adds	r7, #20
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr
 80050e6:	bf00      	nop
 80050e8:	40012c00 	.word	0x40012c00
 80050ec:	40000400 	.word	0x40000400
 80050f0:	40000800 	.word	0x40000800
 80050f4:	40000c00 	.word	0x40000c00
 80050f8:	40013400 	.word	0x40013400
 80050fc:	40014000 	.word	0x40014000
 8005100:	40014400 	.word	0x40014400
 8005104:	40014800 	.word	0x40014800

08005108 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005108:	b480      	push	{r7}
 800510a:	b085      	sub	sp, #20
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005118:	2b01      	cmp	r3, #1
 800511a:	d101      	bne.n	8005120 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800511c:	2302      	movs	r3, #2
 800511e:	e068      	b.n	80051f2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2202      	movs	r2, #2
 800512c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a2e      	ldr	r2, [pc, #184]	; (8005200 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d004      	beq.n	8005154 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a2d      	ldr	r2, [pc, #180]	; (8005204 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d108      	bne.n	8005166 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800515a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	68fa      	ldr	r2, [r7, #12]
 8005162:	4313      	orrs	r3, r2
 8005164:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800516c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	68fa      	ldr	r2, [r7, #12]
 8005174:	4313      	orrs	r3, r2
 8005176:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	68fa      	ldr	r2, [r7, #12]
 800517e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a1e      	ldr	r2, [pc, #120]	; (8005200 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d01d      	beq.n	80051c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005192:	d018      	beq.n	80051c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a1b      	ldr	r2, [pc, #108]	; (8005208 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d013      	beq.n	80051c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a1a      	ldr	r2, [pc, #104]	; (800520c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d00e      	beq.n	80051c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a18      	ldr	r2, [pc, #96]	; (8005210 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d009      	beq.n	80051c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a13      	ldr	r2, [pc, #76]	; (8005204 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d004      	beq.n	80051c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a14      	ldr	r2, [pc, #80]	; (8005214 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d10c      	bne.n	80051e0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	68ba      	ldr	r2, [r7, #8]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	68ba      	ldr	r2, [r7, #8]
 80051de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3714      	adds	r7, #20
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr
 80051fe:	bf00      	nop
 8005200:	40012c00 	.word	0x40012c00
 8005204:	40013400 	.word	0x40013400
 8005208:	40000400 	.word	0x40000400
 800520c:	40000800 	.word	0x40000800
 8005210:	40000c00 	.word	0x40000c00
 8005214:	40014000 	.word	0x40014000

08005218 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005218:	b480      	push	{r7}
 800521a:	b083      	sub	sp, #12
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005220:	bf00      	nop
 8005222:	370c      	adds	r7, #12
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr

0800522c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800522c:	b480      	push	{r7}
 800522e:	b083      	sub	sp, #12
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005234:	bf00      	nop
 8005236:	370c      	adds	r7, #12
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr

08005240 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005240:	b480      	push	{r7}
 8005242:	b083      	sub	sp, #12
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005248:	bf00      	nop
 800524a:	370c      	adds	r7, #12
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr

08005254 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b082      	sub	sp, #8
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d101      	bne.n	8005266 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e040      	b.n	80052e8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800526a:	2b00      	cmp	r3, #0
 800526c:	d106      	bne.n	800527c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f7fb ff3a 	bl	80010f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2224      	movs	r2, #36	; 0x24
 8005280:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f022 0201 	bic.w	r2, r2, #1
 8005290:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f000 f82c 	bl	80052f0 <UART_SetConfig>
 8005298:	4603      	mov	r3, r0
 800529a:	2b01      	cmp	r3, #1
 800529c:	d101      	bne.n	80052a2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	e022      	b.n	80052e8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d002      	beq.n	80052b0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f000 faaa 	bl	8005804 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	685a      	ldr	r2, [r3, #4]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80052be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	689a      	ldr	r2, [r3, #8]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80052ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f042 0201 	orr.w	r2, r2, #1
 80052de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f000 fb31 	bl	8005948 <UART_CheckIdleState>
 80052e6:	4603      	mov	r3, r0
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3708      	adds	r7, #8
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}

080052f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052f0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80052f4:	b088      	sub	sp, #32
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80052fa:	2300      	movs	r3, #0
 80052fc:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	689a      	ldr	r2, [r3, #8]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	431a      	orrs	r2, r3
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	695b      	ldr	r3, [r3, #20]
 800530c:	431a      	orrs	r2, r3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	69db      	ldr	r3, [r3, #28]
 8005312:	4313      	orrs	r3, r2
 8005314:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	4bac      	ldr	r3, [pc, #688]	; (80055d0 <UART_SetConfig+0x2e0>)
 800531e:	4013      	ands	r3, r2
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	6812      	ldr	r2, [r2, #0]
 8005324:	69f9      	ldr	r1, [r7, #28]
 8005326:	430b      	orrs	r3, r1
 8005328:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	68da      	ldr	r2, [r3, #12]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	430a      	orrs	r2, r1
 800533e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	699b      	ldr	r3, [r3, #24]
 8005344:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4aa2      	ldr	r2, [pc, #648]	; (80055d4 <UART_SetConfig+0x2e4>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d004      	beq.n	800535a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6a1b      	ldr	r3, [r3, #32]
 8005354:	69fa      	ldr	r2, [r7, #28]
 8005356:	4313      	orrs	r3, r2
 8005358:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	69fa      	ldr	r2, [r7, #28]
 800536a:	430a      	orrs	r2, r1
 800536c:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a99      	ldr	r2, [pc, #612]	; (80055d8 <UART_SetConfig+0x2e8>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d121      	bne.n	80053bc <UART_SetConfig+0xcc>
 8005378:	4b98      	ldr	r3, [pc, #608]	; (80055dc <UART_SetConfig+0x2ec>)
 800537a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800537e:	f003 0303 	and.w	r3, r3, #3
 8005382:	2b03      	cmp	r3, #3
 8005384:	d816      	bhi.n	80053b4 <UART_SetConfig+0xc4>
 8005386:	a201      	add	r2, pc, #4	; (adr r2, 800538c <UART_SetConfig+0x9c>)
 8005388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800538c:	0800539d 	.word	0x0800539d
 8005390:	080053a9 	.word	0x080053a9
 8005394:	080053a3 	.word	0x080053a3
 8005398:	080053af 	.word	0x080053af
 800539c:	2301      	movs	r3, #1
 800539e:	76fb      	strb	r3, [r7, #27]
 80053a0:	e0e8      	b.n	8005574 <UART_SetConfig+0x284>
 80053a2:	2302      	movs	r3, #2
 80053a4:	76fb      	strb	r3, [r7, #27]
 80053a6:	e0e5      	b.n	8005574 <UART_SetConfig+0x284>
 80053a8:	2304      	movs	r3, #4
 80053aa:	76fb      	strb	r3, [r7, #27]
 80053ac:	e0e2      	b.n	8005574 <UART_SetConfig+0x284>
 80053ae:	2308      	movs	r3, #8
 80053b0:	76fb      	strb	r3, [r7, #27]
 80053b2:	e0df      	b.n	8005574 <UART_SetConfig+0x284>
 80053b4:	2310      	movs	r3, #16
 80053b6:	76fb      	strb	r3, [r7, #27]
 80053b8:	bf00      	nop
 80053ba:	e0db      	b.n	8005574 <UART_SetConfig+0x284>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a87      	ldr	r2, [pc, #540]	; (80055e0 <UART_SetConfig+0x2f0>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d134      	bne.n	8005430 <UART_SetConfig+0x140>
 80053c6:	4b85      	ldr	r3, [pc, #532]	; (80055dc <UART_SetConfig+0x2ec>)
 80053c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053cc:	f003 030c 	and.w	r3, r3, #12
 80053d0:	2b0c      	cmp	r3, #12
 80053d2:	d829      	bhi.n	8005428 <UART_SetConfig+0x138>
 80053d4:	a201      	add	r2, pc, #4	; (adr r2, 80053dc <UART_SetConfig+0xec>)
 80053d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053da:	bf00      	nop
 80053dc:	08005411 	.word	0x08005411
 80053e0:	08005429 	.word	0x08005429
 80053e4:	08005429 	.word	0x08005429
 80053e8:	08005429 	.word	0x08005429
 80053ec:	0800541d 	.word	0x0800541d
 80053f0:	08005429 	.word	0x08005429
 80053f4:	08005429 	.word	0x08005429
 80053f8:	08005429 	.word	0x08005429
 80053fc:	08005417 	.word	0x08005417
 8005400:	08005429 	.word	0x08005429
 8005404:	08005429 	.word	0x08005429
 8005408:	08005429 	.word	0x08005429
 800540c:	08005423 	.word	0x08005423
 8005410:	2300      	movs	r3, #0
 8005412:	76fb      	strb	r3, [r7, #27]
 8005414:	e0ae      	b.n	8005574 <UART_SetConfig+0x284>
 8005416:	2302      	movs	r3, #2
 8005418:	76fb      	strb	r3, [r7, #27]
 800541a:	e0ab      	b.n	8005574 <UART_SetConfig+0x284>
 800541c:	2304      	movs	r3, #4
 800541e:	76fb      	strb	r3, [r7, #27]
 8005420:	e0a8      	b.n	8005574 <UART_SetConfig+0x284>
 8005422:	2308      	movs	r3, #8
 8005424:	76fb      	strb	r3, [r7, #27]
 8005426:	e0a5      	b.n	8005574 <UART_SetConfig+0x284>
 8005428:	2310      	movs	r3, #16
 800542a:	76fb      	strb	r3, [r7, #27]
 800542c:	bf00      	nop
 800542e:	e0a1      	b.n	8005574 <UART_SetConfig+0x284>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a6b      	ldr	r2, [pc, #428]	; (80055e4 <UART_SetConfig+0x2f4>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d120      	bne.n	800547c <UART_SetConfig+0x18c>
 800543a:	4b68      	ldr	r3, [pc, #416]	; (80055dc <UART_SetConfig+0x2ec>)
 800543c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005440:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005444:	2b10      	cmp	r3, #16
 8005446:	d00f      	beq.n	8005468 <UART_SetConfig+0x178>
 8005448:	2b10      	cmp	r3, #16
 800544a:	d802      	bhi.n	8005452 <UART_SetConfig+0x162>
 800544c:	2b00      	cmp	r3, #0
 800544e:	d005      	beq.n	800545c <UART_SetConfig+0x16c>
 8005450:	e010      	b.n	8005474 <UART_SetConfig+0x184>
 8005452:	2b20      	cmp	r3, #32
 8005454:	d005      	beq.n	8005462 <UART_SetConfig+0x172>
 8005456:	2b30      	cmp	r3, #48	; 0x30
 8005458:	d009      	beq.n	800546e <UART_SetConfig+0x17e>
 800545a:	e00b      	b.n	8005474 <UART_SetConfig+0x184>
 800545c:	2300      	movs	r3, #0
 800545e:	76fb      	strb	r3, [r7, #27]
 8005460:	e088      	b.n	8005574 <UART_SetConfig+0x284>
 8005462:	2302      	movs	r3, #2
 8005464:	76fb      	strb	r3, [r7, #27]
 8005466:	e085      	b.n	8005574 <UART_SetConfig+0x284>
 8005468:	2304      	movs	r3, #4
 800546a:	76fb      	strb	r3, [r7, #27]
 800546c:	e082      	b.n	8005574 <UART_SetConfig+0x284>
 800546e:	2308      	movs	r3, #8
 8005470:	76fb      	strb	r3, [r7, #27]
 8005472:	e07f      	b.n	8005574 <UART_SetConfig+0x284>
 8005474:	2310      	movs	r3, #16
 8005476:	76fb      	strb	r3, [r7, #27]
 8005478:	bf00      	nop
 800547a:	e07b      	b.n	8005574 <UART_SetConfig+0x284>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a59      	ldr	r2, [pc, #356]	; (80055e8 <UART_SetConfig+0x2f8>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d120      	bne.n	80054c8 <UART_SetConfig+0x1d8>
 8005486:	4b55      	ldr	r3, [pc, #340]	; (80055dc <UART_SetConfig+0x2ec>)
 8005488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800548c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005490:	2b40      	cmp	r3, #64	; 0x40
 8005492:	d00f      	beq.n	80054b4 <UART_SetConfig+0x1c4>
 8005494:	2b40      	cmp	r3, #64	; 0x40
 8005496:	d802      	bhi.n	800549e <UART_SetConfig+0x1ae>
 8005498:	2b00      	cmp	r3, #0
 800549a:	d005      	beq.n	80054a8 <UART_SetConfig+0x1b8>
 800549c:	e010      	b.n	80054c0 <UART_SetConfig+0x1d0>
 800549e:	2b80      	cmp	r3, #128	; 0x80
 80054a0:	d005      	beq.n	80054ae <UART_SetConfig+0x1be>
 80054a2:	2bc0      	cmp	r3, #192	; 0xc0
 80054a4:	d009      	beq.n	80054ba <UART_SetConfig+0x1ca>
 80054a6:	e00b      	b.n	80054c0 <UART_SetConfig+0x1d0>
 80054a8:	2300      	movs	r3, #0
 80054aa:	76fb      	strb	r3, [r7, #27]
 80054ac:	e062      	b.n	8005574 <UART_SetConfig+0x284>
 80054ae:	2302      	movs	r3, #2
 80054b0:	76fb      	strb	r3, [r7, #27]
 80054b2:	e05f      	b.n	8005574 <UART_SetConfig+0x284>
 80054b4:	2304      	movs	r3, #4
 80054b6:	76fb      	strb	r3, [r7, #27]
 80054b8:	e05c      	b.n	8005574 <UART_SetConfig+0x284>
 80054ba:	2308      	movs	r3, #8
 80054bc:	76fb      	strb	r3, [r7, #27]
 80054be:	e059      	b.n	8005574 <UART_SetConfig+0x284>
 80054c0:	2310      	movs	r3, #16
 80054c2:	76fb      	strb	r3, [r7, #27]
 80054c4:	bf00      	nop
 80054c6:	e055      	b.n	8005574 <UART_SetConfig+0x284>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a47      	ldr	r2, [pc, #284]	; (80055ec <UART_SetConfig+0x2fc>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d124      	bne.n	800551c <UART_SetConfig+0x22c>
 80054d2:	4b42      	ldr	r3, [pc, #264]	; (80055dc <UART_SetConfig+0x2ec>)
 80054d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054e0:	d012      	beq.n	8005508 <UART_SetConfig+0x218>
 80054e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054e6:	d802      	bhi.n	80054ee <UART_SetConfig+0x1fe>
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d007      	beq.n	80054fc <UART_SetConfig+0x20c>
 80054ec:	e012      	b.n	8005514 <UART_SetConfig+0x224>
 80054ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054f2:	d006      	beq.n	8005502 <UART_SetConfig+0x212>
 80054f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054f8:	d009      	beq.n	800550e <UART_SetConfig+0x21e>
 80054fa:	e00b      	b.n	8005514 <UART_SetConfig+0x224>
 80054fc:	2300      	movs	r3, #0
 80054fe:	76fb      	strb	r3, [r7, #27]
 8005500:	e038      	b.n	8005574 <UART_SetConfig+0x284>
 8005502:	2302      	movs	r3, #2
 8005504:	76fb      	strb	r3, [r7, #27]
 8005506:	e035      	b.n	8005574 <UART_SetConfig+0x284>
 8005508:	2304      	movs	r3, #4
 800550a:	76fb      	strb	r3, [r7, #27]
 800550c:	e032      	b.n	8005574 <UART_SetConfig+0x284>
 800550e:	2308      	movs	r3, #8
 8005510:	76fb      	strb	r3, [r7, #27]
 8005512:	e02f      	b.n	8005574 <UART_SetConfig+0x284>
 8005514:	2310      	movs	r3, #16
 8005516:	76fb      	strb	r3, [r7, #27]
 8005518:	bf00      	nop
 800551a:	e02b      	b.n	8005574 <UART_SetConfig+0x284>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a2c      	ldr	r2, [pc, #176]	; (80055d4 <UART_SetConfig+0x2e4>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d124      	bne.n	8005570 <UART_SetConfig+0x280>
 8005526:	4b2d      	ldr	r3, [pc, #180]	; (80055dc <UART_SetConfig+0x2ec>)
 8005528:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800552c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005530:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005534:	d012      	beq.n	800555c <UART_SetConfig+0x26c>
 8005536:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800553a:	d802      	bhi.n	8005542 <UART_SetConfig+0x252>
 800553c:	2b00      	cmp	r3, #0
 800553e:	d007      	beq.n	8005550 <UART_SetConfig+0x260>
 8005540:	e012      	b.n	8005568 <UART_SetConfig+0x278>
 8005542:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005546:	d006      	beq.n	8005556 <UART_SetConfig+0x266>
 8005548:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800554c:	d009      	beq.n	8005562 <UART_SetConfig+0x272>
 800554e:	e00b      	b.n	8005568 <UART_SetConfig+0x278>
 8005550:	2300      	movs	r3, #0
 8005552:	76fb      	strb	r3, [r7, #27]
 8005554:	e00e      	b.n	8005574 <UART_SetConfig+0x284>
 8005556:	2302      	movs	r3, #2
 8005558:	76fb      	strb	r3, [r7, #27]
 800555a:	e00b      	b.n	8005574 <UART_SetConfig+0x284>
 800555c:	2304      	movs	r3, #4
 800555e:	76fb      	strb	r3, [r7, #27]
 8005560:	e008      	b.n	8005574 <UART_SetConfig+0x284>
 8005562:	2308      	movs	r3, #8
 8005564:	76fb      	strb	r3, [r7, #27]
 8005566:	e005      	b.n	8005574 <UART_SetConfig+0x284>
 8005568:	2310      	movs	r3, #16
 800556a:	76fb      	strb	r3, [r7, #27]
 800556c:	bf00      	nop
 800556e:	e001      	b.n	8005574 <UART_SetConfig+0x284>
 8005570:	2310      	movs	r3, #16
 8005572:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a16      	ldr	r2, [pc, #88]	; (80055d4 <UART_SetConfig+0x2e4>)
 800557a:	4293      	cmp	r3, r2
 800557c:	f040 8087 	bne.w	800568e <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005580:	7efb      	ldrb	r3, [r7, #27]
 8005582:	2b08      	cmp	r3, #8
 8005584:	d836      	bhi.n	80055f4 <UART_SetConfig+0x304>
 8005586:	a201      	add	r2, pc, #4	; (adr r2, 800558c <UART_SetConfig+0x29c>)
 8005588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800558c:	080055b1 	.word	0x080055b1
 8005590:	080055f5 	.word	0x080055f5
 8005594:	080055b9 	.word	0x080055b9
 8005598:	080055f5 	.word	0x080055f5
 800559c:	080055bf 	.word	0x080055bf
 80055a0:	080055f5 	.word	0x080055f5
 80055a4:	080055f5 	.word	0x080055f5
 80055a8:	080055f5 	.word	0x080055f5
 80055ac:	080055c7 	.word	0x080055c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055b0:	f7fe fd5c 	bl	800406c <HAL_RCC_GetPCLK1Freq>
 80055b4:	6178      	str	r0, [r7, #20]
        break;
 80055b6:	e022      	b.n	80055fe <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055b8:	4b0d      	ldr	r3, [pc, #52]	; (80055f0 <UART_SetConfig+0x300>)
 80055ba:	617b      	str	r3, [r7, #20]
        break;
 80055bc:	e01f      	b.n	80055fe <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055be:	f7fe fcbf 	bl	8003f40 <HAL_RCC_GetSysClockFreq>
 80055c2:	6178      	str	r0, [r7, #20]
        break;
 80055c4:	e01b      	b.n	80055fe <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055ca:	617b      	str	r3, [r7, #20]
        break;
 80055cc:	e017      	b.n	80055fe <UART_SetConfig+0x30e>
 80055ce:	bf00      	nop
 80055d0:	efff69f3 	.word	0xefff69f3
 80055d4:	40008000 	.word	0x40008000
 80055d8:	40013800 	.word	0x40013800
 80055dc:	40021000 	.word	0x40021000
 80055e0:	40004400 	.word	0x40004400
 80055e4:	40004800 	.word	0x40004800
 80055e8:	40004c00 	.word	0x40004c00
 80055ec:	40005000 	.word	0x40005000
 80055f0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80055f4:	2300      	movs	r3, #0
 80055f6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	76bb      	strb	r3, [r7, #26]
        break;
 80055fc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	2b00      	cmp	r3, #0
 8005602:	f000 80f1 	beq.w	80057e8 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	685a      	ldr	r2, [r3, #4]
 800560a:	4613      	mov	r3, r2
 800560c:	005b      	lsls	r3, r3, #1
 800560e:	4413      	add	r3, r2
 8005610:	697a      	ldr	r2, [r7, #20]
 8005612:	429a      	cmp	r2, r3
 8005614:	d305      	bcc.n	8005622 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800561c:	697a      	ldr	r2, [r7, #20]
 800561e:	429a      	cmp	r2, r3
 8005620:	d902      	bls.n	8005628 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	76bb      	strb	r3, [r7, #26]
 8005626:	e0df      	b.n	80057e8 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	4619      	mov	r1, r3
 800562c:	f04f 0200 	mov.w	r2, #0
 8005630:	f04f 0300 	mov.w	r3, #0
 8005634:	f04f 0400 	mov.w	r4, #0
 8005638:	0214      	lsls	r4, r2, #8
 800563a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800563e:	020b      	lsls	r3, r1, #8
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	6852      	ldr	r2, [r2, #4]
 8005644:	0852      	lsrs	r2, r2, #1
 8005646:	4611      	mov	r1, r2
 8005648:	f04f 0200 	mov.w	r2, #0
 800564c:	eb13 0b01 	adds.w	fp, r3, r1
 8005650:	eb44 0c02 	adc.w	ip, r4, r2
 8005654:	4658      	mov	r0, fp
 8005656:	4661      	mov	r1, ip
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	f04f 0400 	mov.w	r4, #0
 8005660:	461a      	mov	r2, r3
 8005662:	4623      	mov	r3, r4
 8005664:	f7fa fdb0 	bl	80001c8 <__aeabi_uldivmod>
 8005668:	4603      	mov	r3, r0
 800566a:	460c      	mov	r4, r1
 800566c:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005674:	d308      	bcc.n	8005688 <UART_SetConfig+0x398>
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800567c:	d204      	bcs.n	8005688 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	693a      	ldr	r2, [r7, #16]
 8005684:	60da      	str	r2, [r3, #12]
 8005686:	e0af      	b.n	80057e8 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	76bb      	strb	r3, [r7, #26]
 800568c:	e0ac      	b.n	80057e8 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	69db      	ldr	r3, [r3, #28]
 8005692:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005696:	d15b      	bne.n	8005750 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8005698:	7efb      	ldrb	r3, [r7, #27]
 800569a:	2b08      	cmp	r3, #8
 800569c:	d827      	bhi.n	80056ee <UART_SetConfig+0x3fe>
 800569e:	a201      	add	r2, pc, #4	; (adr r2, 80056a4 <UART_SetConfig+0x3b4>)
 80056a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056a4:	080056c9 	.word	0x080056c9
 80056a8:	080056d1 	.word	0x080056d1
 80056ac:	080056d9 	.word	0x080056d9
 80056b0:	080056ef 	.word	0x080056ef
 80056b4:	080056df 	.word	0x080056df
 80056b8:	080056ef 	.word	0x080056ef
 80056bc:	080056ef 	.word	0x080056ef
 80056c0:	080056ef 	.word	0x080056ef
 80056c4:	080056e7 	.word	0x080056e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056c8:	f7fe fcd0 	bl	800406c <HAL_RCC_GetPCLK1Freq>
 80056cc:	6178      	str	r0, [r7, #20]
        break;
 80056ce:	e013      	b.n	80056f8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056d0:	f7fe fce2 	bl	8004098 <HAL_RCC_GetPCLK2Freq>
 80056d4:	6178      	str	r0, [r7, #20]
        break;
 80056d6:	e00f      	b.n	80056f8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056d8:	4b49      	ldr	r3, [pc, #292]	; (8005800 <UART_SetConfig+0x510>)
 80056da:	617b      	str	r3, [r7, #20]
        break;
 80056dc:	e00c      	b.n	80056f8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056de:	f7fe fc2f 	bl	8003f40 <HAL_RCC_GetSysClockFreq>
 80056e2:	6178      	str	r0, [r7, #20]
        break;
 80056e4:	e008      	b.n	80056f8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056ea:	617b      	str	r3, [r7, #20]
        break;
 80056ec:	e004      	b.n	80056f8 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80056ee:	2300      	movs	r3, #0
 80056f0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	76bb      	strb	r3, [r7, #26]
        break;
 80056f6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d074      	beq.n	80057e8 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	005a      	lsls	r2, r3, #1
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	085b      	lsrs	r3, r3, #1
 8005708:	441a      	add	r2, r3
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005712:	b29b      	uxth	r3, r3
 8005714:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	2b0f      	cmp	r3, #15
 800571a:	d916      	bls.n	800574a <UART_SetConfig+0x45a>
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005722:	d212      	bcs.n	800574a <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	b29b      	uxth	r3, r3
 8005728:	f023 030f 	bic.w	r3, r3, #15
 800572c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	085b      	lsrs	r3, r3, #1
 8005732:	b29b      	uxth	r3, r3
 8005734:	f003 0307 	and.w	r3, r3, #7
 8005738:	b29a      	uxth	r2, r3
 800573a:	89fb      	ldrh	r3, [r7, #14]
 800573c:	4313      	orrs	r3, r2
 800573e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	89fa      	ldrh	r2, [r7, #14]
 8005746:	60da      	str	r2, [r3, #12]
 8005748:	e04e      	b.n	80057e8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	76bb      	strb	r3, [r7, #26]
 800574e:	e04b      	b.n	80057e8 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005750:	7efb      	ldrb	r3, [r7, #27]
 8005752:	2b08      	cmp	r3, #8
 8005754:	d827      	bhi.n	80057a6 <UART_SetConfig+0x4b6>
 8005756:	a201      	add	r2, pc, #4	; (adr r2, 800575c <UART_SetConfig+0x46c>)
 8005758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800575c:	08005781 	.word	0x08005781
 8005760:	08005789 	.word	0x08005789
 8005764:	08005791 	.word	0x08005791
 8005768:	080057a7 	.word	0x080057a7
 800576c:	08005797 	.word	0x08005797
 8005770:	080057a7 	.word	0x080057a7
 8005774:	080057a7 	.word	0x080057a7
 8005778:	080057a7 	.word	0x080057a7
 800577c:	0800579f 	.word	0x0800579f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005780:	f7fe fc74 	bl	800406c <HAL_RCC_GetPCLK1Freq>
 8005784:	6178      	str	r0, [r7, #20]
        break;
 8005786:	e013      	b.n	80057b0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005788:	f7fe fc86 	bl	8004098 <HAL_RCC_GetPCLK2Freq>
 800578c:	6178      	str	r0, [r7, #20]
        break;
 800578e:	e00f      	b.n	80057b0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005790:	4b1b      	ldr	r3, [pc, #108]	; (8005800 <UART_SetConfig+0x510>)
 8005792:	617b      	str	r3, [r7, #20]
        break;
 8005794:	e00c      	b.n	80057b0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005796:	f7fe fbd3 	bl	8003f40 <HAL_RCC_GetSysClockFreq>
 800579a:	6178      	str	r0, [r7, #20]
        break;
 800579c:	e008      	b.n	80057b0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800579e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057a2:	617b      	str	r3, [r7, #20]
        break;
 80057a4:	e004      	b.n	80057b0 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80057a6:	2300      	movs	r3, #0
 80057a8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	76bb      	strb	r3, [r7, #26]
        break;
 80057ae:	bf00      	nop
    }

    if (pclk != 0U)
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d018      	beq.n	80057e8 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	085a      	lsrs	r2, r3, #1
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	441a      	add	r2, r3
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	2b0f      	cmp	r3, #15
 80057d0:	d908      	bls.n	80057e4 <UART_SetConfig+0x4f4>
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057d8:	d204      	bcs.n	80057e4 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	693a      	ldr	r2, [r7, #16]
 80057e0:	60da      	str	r2, [r3, #12]
 80057e2:	e001      	b.n	80057e8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2200      	movs	r2, #0
 80057ec:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2200      	movs	r2, #0
 80057f2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80057f4:	7ebb      	ldrb	r3, [r7, #26]
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3720      	adds	r7, #32
 80057fa:	46bd      	mov	sp, r7
 80057fc:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8005800:	00f42400 	.word	0x00f42400

08005804 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005804:	b480      	push	{r7}
 8005806:	b083      	sub	sp, #12
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005810:	f003 0301 	and.w	r3, r3, #1
 8005814:	2b00      	cmp	r3, #0
 8005816:	d00a      	beq.n	800582e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	430a      	orrs	r2, r1
 800582c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005832:	f003 0302 	and.w	r3, r3, #2
 8005836:	2b00      	cmp	r3, #0
 8005838:	d00a      	beq.n	8005850 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	430a      	orrs	r2, r1
 800584e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005854:	f003 0304 	and.w	r3, r3, #4
 8005858:	2b00      	cmp	r3, #0
 800585a:	d00a      	beq.n	8005872 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	430a      	orrs	r2, r1
 8005870:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005876:	f003 0308 	and.w	r3, r3, #8
 800587a:	2b00      	cmp	r3, #0
 800587c:	d00a      	beq.n	8005894 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	430a      	orrs	r2, r1
 8005892:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005898:	f003 0310 	and.w	r3, r3, #16
 800589c:	2b00      	cmp	r3, #0
 800589e:	d00a      	beq.n	80058b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	430a      	orrs	r2, r1
 80058b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ba:	f003 0320 	and.w	r3, r3, #32
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d00a      	beq.n	80058d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	430a      	orrs	r2, r1
 80058d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d01a      	beq.n	800591a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	430a      	orrs	r2, r1
 80058f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005902:	d10a      	bne.n	800591a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	430a      	orrs	r2, r1
 8005918:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005922:	2b00      	cmp	r3, #0
 8005924:	d00a      	beq.n	800593c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	430a      	orrs	r2, r1
 800593a:	605a      	str	r2, [r3, #4]
  }
}
 800593c:	bf00      	nop
 800593e:	370c      	adds	r7, #12
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr

08005948 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b086      	sub	sp, #24
 800594c:	af02      	add	r7, sp, #8
 800594e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2200      	movs	r2, #0
 8005954:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005956:	f7fb fca7 	bl	80012a8 <HAL_GetTick>
 800595a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f003 0308 	and.w	r3, r3, #8
 8005966:	2b08      	cmp	r3, #8
 8005968:	d10e      	bne.n	8005988 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800596a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800596e:	9300      	str	r3, [sp, #0]
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2200      	movs	r2, #0
 8005974:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f000 f82a 	bl	80059d2 <UART_WaitOnFlagUntilTimeout>
 800597e:	4603      	mov	r3, r0
 8005980:	2b00      	cmp	r3, #0
 8005982:	d001      	beq.n	8005988 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005984:	2303      	movs	r3, #3
 8005986:	e020      	b.n	80059ca <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f003 0304 	and.w	r3, r3, #4
 8005992:	2b04      	cmp	r3, #4
 8005994:	d10e      	bne.n	80059b4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005996:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800599a:	9300      	str	r3, [sp, #0]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2200      	movs	r2, #0
 80059a0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f000 f814 	bl	80059d2 <UART_WaitOnFlagUntilTimeout>
 80059aa:	4603      	mov	r3, r0
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d001      	beq.n	80059b4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059b0:	2303      	movs	r3, #3
 80059b2:	e00a      	b.n	80059ca <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2220      	movs	r2, #32
 80059b8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2220      	movs	r2, #32
 80059be:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2200      	movs	r2, #0
 80059c4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80059c8:	2300      	movs	r3, #0
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3710      	adds	r7, #16
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}

080059d2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80059d2:	b580      	push	{r7, lr}
 80059d4:	b084      	sub	sp, #16
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	60f8      	str	r0, [r7, #12]
 80059da:	60b9      	str	r1, [r7, #8]
 80059dc:	603b      	str	r3, [r7, #0]
 80059de:	4613      	mov	r3, r2
 80059e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059e2:	e05d      	b.n	8005aa0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059e4:	69bb      	ldr	r3, [r7, #24]
 80059e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ea:	d059      	beq.n	8005aa0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059ec:	f7fb fc5c 	bl	80012a8 <HAL_GetTick>
 80059f0:	4602      	mov	r2, r0
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	69ba      	ldr	r2, [r7, #24]
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d302      	bcc.n	8005a02 <UART_WaitOnFlagUntilTimeout+0x30>
 80059fc:	69bb      	ldr	r3, [r7, #24]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d11b      	bne.n	8005a3a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005a10:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	689a      	ldr	r2, [r3, #8]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f022 0201 	bic.w	r2, r2, #1
 8005a20:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2220      	movs	r2, #32
 8005a26:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2220      	movs	r2, #32
 8005a2c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2200      	movs	r2, #0
 8005a32:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005a36:	2303      	movs	r3, #3
 8005a38:	e042      	b.n	8005ac0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f003 0304 	and.w	r3, r3, #4
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d02b      	beq.n	8005aa0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	69db      	ldr	r3, [r3, #28]
 8005a4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a56:	d123      	bne.n	8005aa0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a60:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005a70:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	689a      	ldr	r2, [r3, #8]
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f022 0201 	bic.w	r2, r2, #1
 8005a80:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2220      	movs	r2, #32
 8005a86:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2220      	movs	r2, #32
 8005a8c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2220      	movs	r2, #32
 8005a92:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2200      	movs	r2, #0
 8005a98:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8005a9c:	2303      	movs	r3, #3
 8005a9e:	e00f      	b.n	8005ac0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	69da      	ldr	r2, [r3, #28]
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	68ba      	ldr	r2, [r7, #8]
 8005aac:	429a      	cmp	r2, r3
 8005aae:	bf0c      	ite	eq
 8005ab0:	2301      	moveq	r3, #1
 8005ab2:	2300      	movne	r3, #0
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	79fb      	ldrb	r3, [r7, #7]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d092      	beq.n	80059e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005abe:	2300      	movs	r3, #0
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3710      	adds	r7, #16
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}

08005ac8 <__libc_init_array>:
 8005ac8:	b570      	push	{r4, r5, r6, lr}
 8005aca:	4e0d      	ldr	r6, [pc, #52]	; (8005b00 <__libc_init_array+0x38>)
 8005acc:	4c0d      	ldr	r4, [pc, #52]	; (8005b04 <__libc_init_array+0x3c>)
 8005ace:	1ba4      	subs	r4, r4, r6
 8005ad0:	10a4      	asrs	r4, r4, #2
 8005ad2:	2500      	movs	r5, #0
 8005ad4:	42a5      	cmp	r5, r4
 8005ad6:	d109      	bne.n	8005aec <__libc_init_array+0x24>
 8005ad8:	4e0b      	ldr	r6, [pc, #44]	; (8005b08 <__libc_init_array+0x40>)
 8005ada:	4c0c      	ldr	r4, [pc, #48]	; (8005b0c <__libc_init_array+0x44>)
 8005adc:	f000 f820 	bl	8005b20 <_init>
 8005ae0:	1ba4      	subs	r4, r4, r6
 8005ae2:	10a4      	asrs	r4, r4, #2
 8005ae4:	2500      	movs	r5, #0
 8005ae6:	42a5      	cmp	r5, r4
 8005ae8:	d105      	bne.n	8005af6 <__libc_init_array+0x2e>
 8005aea:	bd70      	pop	{r4, r5, r6, pc}
 8005aec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005af0:	4798      	blx	r3
 8005af2:	3501      	adds	r5, #1
 8005af4:	e7ee      	b.n	8005ad4 <__libc_init_array+0xc>
 8005af6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005afa:	4798      	blx	r3
 8005afc:	3501      	adds	r5, #1
 8005afe:	e7f2      	b.n	8005ae6 <__libc_init_array+0x1e>
 8005b00:	08005b88 	.word	0x08005b88
 8005b04:	08005b88 	.word	0x08005b88
 8005b08:	08005b88 	.word	0x08005b88
 8005b0c:	08005b8c 	.word	0x08005b8c

08005b10 <memset>:
 8005b10:	4402      	add	r2, r0
 8005b12:	4603      	mov	r3, r0
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d100      	bne.n	8005b1a <memset+0xa>
 8005b18:	4770      	bx	lr
 8005b1a:	f803 1b01 	strb.w	r1, [r3], #1
 8005b1e:	e7f9      	b.n	8005b14 <memset+0x4>

08005b20 <_init>:
 8005b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b22:	bf00      	nop
 8005b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b26:	bc08      	pop	{r3}
 8005b28:	469e      	mov	lr, r3
 8005b2a:	4770      	bx	lr

08005b2c <_fini>:
 8005b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b2e:	bf00      	nop
 8005b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b32:	bc08      	pop	{r3}
 8005b34:	469e      	mov	lr, r3
 8005b36:	4770      	bx	lr
