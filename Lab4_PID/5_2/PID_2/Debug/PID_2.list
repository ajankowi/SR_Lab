
PID_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059b4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08005b3c  08005b3c  00015b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b84  08005b84  000200d4  2**0
                  CONTENTS
  4 .ARM          00000008  08005b84  08005b84  00015b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b8c  08005b8c  000200d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b8c  08005b8c  00015b8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b90  08005b90  00015b90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d4  20000000  08005b94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  200000d4  08005c68  000200d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f8  08005c68  000202f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017133  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002b01  00000000  00000000  00037237  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013f8  00000000  00000000  00039d38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001280  00000000  00000000  0003b130  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029d0c  00000000  00000000  0003c3b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011831  00000000  00000000  000660bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00108c0d  00000000  00000000  000778ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001804fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005428  00000000  00000000  00180578  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000d4 	.word	0x200000d4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005b24 	.word	0x08005b24

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000d8 	.word	0x200000d8
 80001c4:	08005b24 	.word	0x08005b24

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b08a      	sub	sp, #40	; 0x28
 80004cc:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 80004ce:	f107 031c 	add.w	r3, r7, #28
 80004d2:	2200      	movs	r2, #0
 80004d4:	601a      	str	r2, [r3, #0]
 80004d6:	605a      	str	r2, [r3, #4]
 80004d8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80004da:	1d3b      	adds	r3, r7, #4
 80004dc:	2200      	movs	r2, #0
 80004de:	601a      	str	r2, [r3, #0]
 80004e0:	605a      	str	r2, [r3, #4]
 80004e2:	609a      	str	r2, [r3, #8]
 80004e4:	60da      	str	r2, [r3, #12]
 80004e6:	611a      	str	r2, [r3, #16]
 80004e8:	615a      	str	r2, [r3, #20]

  /** Common config
  */
  hadc1.Instance = ADC1;
 80004ea:	4b30      	ldr	r3, [pc, #192]	; (80005ac <MX_ADC1_Init+0xe4>)
 80004ec:	4a30      	ldr	r2, [pc, #192]	; (80005b0 <MX_ADC1_Init+0xe8>)
 80004ee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80004f0:	4b2e      	ldr	r3, [pc, #184]	; (80005ac <MX_ADC1_Init+0xe4>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004f6:	4b2d      	ldr	r3, [pc, #180]	; (80005ac <MX_ADC1_Init+0xe4>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004fc:	4b2b      	ldr	r3, [pc, #172]	; (80005ac <MX_ADC1_Init+0xe4>)
 80004fe:	2200      	movs	r2, #0
 8000500:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000502:	4b2a      	ldr	r3, [pc, #168]	; (80005ac <MX_ADC1_Init+0xe4>)
 8000504:	2200      	movs	r2, #0
 8000506:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000508:	4b28      	ldr	r3, [pc, #160]	; (80005ac <MX_ADC1_Init+0xe4>)
 800050a:	2204      	movs	r2, #4
 800050c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800050e:	4b27      	ldr	r3, [pc, #156]	; (80005ac <MX_ADC1_Init+0xe4>)
 8000510:	2200      	movs	r2, #0
 8000512:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000514:	4b25      	ldr	r3, [pc, #148]	; (80005ac <MX_ADC1_Init+0xe4>)
 8000516:	2200      	movs	r2, #0
 8000518:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800051a:	4b24      	ldr	r3, [pc, #144]	; (80005ac <MX_ADC1_Init+0xe4>)
 800051c:	2201      	movs	r2, #1
 800051e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000520:	4b22      	ldr	r3, [pc, #136]	; (80005ac <MX_ADC1_Init+0xe4>)
 8000522:	2200      	movs	r2, #0
 8000524:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000528:	4b20      	ldr	r3, [pc, #128]	; (80005ac <MX_ADC1_Init+0xe4>)
 800052a:	f44f 62e8 	mov.w	r2, #1856	; 0x740
 800052e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000530:	4b1e      	ldr	r3, [pc, #120]	; (80005ac <MX_ADC1_Init+0xe4>)
 8000532:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000536:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000538:	4b1c      	ldr	r3, [pc, #112]	; (80005ac <MX_ADC1_Init+0xe4>)
 800053a:	2200      	movs	r2, #0
 800053c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000540:	4b1a      	ldr	r3, [pc, #104]	; (80005ac <MX_ADC1_Init+0xe4>)
 8000542:	2200      	movs	r2, #0
 8000544:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000546:	4b19      	ldr	r3, [pc, #100]	; (80005ac <MX_ADC1_Init+0xe4>)
 8000548:	2200      	movs	r2, #0
 800054a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800054e:	4817      	ldr	r0, [pc, #92]	; (80005ac <MX_ADC1_Init+0xe4>)
 8000550:	f001 f8d0 	bl	80016f4 <HAL_ADC_Init>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 800055a:	f000 fadd 	bl	8000b18 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800055e:	2300      	movs	r3, #0
 8000560:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000562:	f107 031c 	add.w	r3, r7, #28
 8000566:	4619      	mov	r1, r3
 8000568:	4810      	ldr	r0, [pc, #64]	; (80005ac <MX_ADC1_Init+0xe4>)
 800056a:	f002 fa25 	bl	80029b8 <HAL_ADCEx_MultiModeConfigChannel>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000574:	f000 fad0 	bl	8000b18 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000578:	4b0e      	ldr	r3, [pc, #56]	; (80005b4 <MX_ADC1_Init+0xec>)
 800057a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800057c:	2306      	movs	r3, #6
 800057e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8000580:	2304      	movs	r3, #4
 8000582:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000584:	237f      	movs	r3, #127	; 0x7f
 8000586:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000588:	2304      	movs	r3, #4
 800058a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800058c:	2300      	movs	r3, #0
 800058e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000590:	1d3b      	adds	r3, r7, #4
 8000592:	4619      	mov	r1, r3
 8000594:	4805      	ldr	r0, [pc, #20]	; (80005ac <MX_ADC1_Init+0xe4>)
 8000596:	f001 fd6f 	bl	8002078 <HAL_ADC_ConfigChannel>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 80005a0:	f000 faba 	bl	8000b18 <Error_Handler>
  }

}
 80005a4:	bf00      	nop
 80005a6:	3728      	adds	r7, #40	; 0x28
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	200000f0 	.word	0x200000f0
 80005b0:	50040000 	.word	0x50040000
 80005b4:	3ef08000 	.word	0x3ef08000

080005b8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b08a      	sub	sp, #40	; 0x28
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c0:	f107 0314 	add.w	r3, r7, #20
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
 80005ca:	609a      	str	r2, [r3, #8]
 80005cc:	60da      	str	r2, [r3, #12]
 80005ce:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a19      	ldr	r2, [pc, #100]	; (800063c <HAL_ADC_MspInit+0x84>)
 80005d6:	4293      	cmp	r3, r2
 80005d8:	d12b      	bne.n	8000632 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80005da:	4b19      	ldr	r3, [pc, #100]	; (8000640 <HAL_ADC_MspInit+0x88>)
 80005dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005de:	4a18      	ldr	r2, [pc, #96]	; (8000640 <HAL_ADC_MspInit+0x88>)
 80005e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80005e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005e6:	4b16      	ldr	r3, [pc, #88]	; (8000640 <HAL_ADC_MspInit+0x88>)
 80005e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80005ee:	613b      	str	r3, [r7, #16]
 80005f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f2:	4b13      	ldr	r3, [pc, #76]	; (8000640 <HAL_ADC_MspInit+0x88>)
 80005f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005f6:	4a12      	ldr	r2, [pc, #72]	; (8000640 <HAL_ADC_MspInit+0x88>)
 80005f8:	f043 0302 	orr.w	r3, r3, #2
 80005fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005fe:	4b10      	ldr	r3, [pc, #64]	; (8000640 <HAL_ADC_MspInit+0x88>)
 8000600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000602:	f003 0302 	and.w	r3, r3, #2
 8000606:	60fb      	str	r3, [r7, #12]
 8000608:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800060a:	2301      	movs	r3, #1
 800060c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800060e:	230b      	movs	r3, #11
 8000610:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000612:	2300      	movs	r3, #0
 8000614:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000616:	f107 0314 	add.w	r3, r7, #20
 800061a:	4619      	mov	r1, r3
 800061c:	4809      	ldr	r0, [pc, #36]	; (8000644 <HAL_ADC_MspInit+0x8c>)
 800061e:	f002 fda5 	bl	800316c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000622:	2200      	movs	r2, #0
 8000624:	2100      	movs	r1, #0
 8000626:	2012      	movs	r0, #18
 8000628:	f002 fb4d 	bl	8002cc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800062c:	2012      	movs	r0, #18
 800062e:	f002 fb66 	bl	8002cfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000632:	bf00      	nop
 8000634:	3728      	adds	r7, #40	; 0x28
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	50040000 	.word	0x50040000
 8000640:	40021000 	.word	0x40021000
 8000644:	48000400 	.word	0x48000400

08000648 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b08a      	sub	sp, #40	; 0x28
 800064c:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 800064e:	1d3b      	adds	r3, r7, #4
 8000650:	2224      	movs	r2, #36	; 0x24
 8000652:	2100      	movs	r1, #0
 8000654:	4618      	mov	r0, r3
 8000656:	f005 fa5d 	bl	8005b14 <memset>

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800065a:	4b12      	ldr	r3, [pc, #72]	; (80006a4 <MX_DAC1_Init+0x5c>)
 800065c:	4a12      	ldr	r2, [pc, #72]	; (80006a8 <MX_DAC1_Init+0x60>)
 800065e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000660:	4810      	ldr	r0, [pc, #64]	; (80006a4 <MX_DAC1_Init+0x5c>)
 8000662:	f002 fb66 	bl	8002d32 <HAL_DAC_Init>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800066c:	f000 fa54 	bl	8000b18 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000670:	2300      	movs	r3, #0
 8000672:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000674:	2300      	movs	r3, #0
 8000676:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000678:	2300      	movs	r3, #0
 800067a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800067c:	2300      	movs	r3, #0
 800067e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000680:	2300      	movs	r3, #0
 8000682:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000684:	1d3b      	adds	r3, r7, #4
 8000686:	2200      	movs	r2, #0
 8000688:	4619      	mov	r1, r3
 800068a:	4806      	ldr	r0, [pc, #24]	; (80006a4 <MX_DAC1_Init+0x5c>)
 800068c:	f002 fc49 	bl	8002f22 <HAL_DAC_ConfigChannel>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000696:	f000 fa3f 	bl	8000b18 <Error_Handler>
  }

}
 800069a:	bf00      	nop
 800069c:	3728      	adds	r7, #40	; 0x28
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	20000154 	.word	0x20000154
 80006a8:	40007400 	.word	0x40007400

080006ac <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b08a      	sub	sp, #40	; 0x28
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b4:	f107 0314 	add.w	r3, r7, #20
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]
 80006c2:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a19      	ldr	r2, [pc, #100]	; (8000730 <HAL_DAC_MspInit+0x84>)
 80006ca:	4293      	cmp	r3, r2
 80006cc:	d12c      	bne.n	8000728 <HAL_DAC_MspInit+0x7c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80006ce:	4b19      	ldr	r3, [pc, #100]	; (8000734 <HAL_DAC_MspInit+0x88>)
 80006d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006d2:	4a18      	ldr	r2, [pc, #96]	; (8000734 <HAL_DAC_MspInit+0x88>)
 80006d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80006d8:	6593      	str	r3, [r2, #88]	; 0x58
 80006da:	4b16      	ldr	r3, [pc, #88]	; (8000734 <HAL_DAC_MspInit+0x88>)
 80006dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80006e2:	613b      	str	r3, [r7, #16]
 80006e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e6:	4b13      	ldr	r3, [pc, #76]	; (8000734 <HAL_DAC_MspInit+0x88>)
 80006e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ea:	4a12      	ldr	r2, [pc, #72]	; (8000734 <HAL_DAC_MspInit+0x88>)
 80006ec:	f043 0301 	orr.w	r3, r3, #1
 80006f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006f2:	4b10      	ldr	r3, [pc, #64]	; (8000734 <HAL_DAC_MspInit+0x88>)
 80006f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f6:	f003 0301 	and.w	r3, r3, #1
 80006fa:	60fb      	str	r3, [r7, #12]
 80006fc:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80006fe:	2310      	movs	r3, #16
 8000700:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000702:	2303      	movs	r3, #3
 8000704:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000706:	2300      	movs	r3, #0
 8000708:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800070a:	f107 0314 	add.w	r3, r7, #20
 800070e:	4619      	mov	r1, r3
 8000710:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000714:	f002 fd2a 	bl	800316c <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000718:	2200      	movs	r2, #0
 800071a:	2100      	movs	r1, #0
 800071c:	2036      	movs	r0, #54	; 0x36
 800071e:	f002 fad2 	bl	8002cc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000722:	2036      	movs	r0, #54	; 0x36
 8000724:	f002 faeb 	bl	8002cfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000728:	bf00      	nop
 800072a:	3728      	adds	r7, #40	; 0x28
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	40007400 	.word	0x40007400
 8000734:	40021000 	.word	0x40021000

08000738 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b08a      	sub	sp, #40	; 0x28
 800073c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073e:	f107 0314 	add.w	r3, r7, #20
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
 8000746:	605a      	str	r2, [r3, #4]
 8000748:	609a      	str	r2, [r3, #8]
 800074a:	60da      	str	r2, [r3, #12]
 800074c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074e:	4b2b      	ldr	r3, [pc, #172]	; (80007fc <MX_GPIO_Init+0xc4>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000752:	4a2a      	ldr	r2, [pc, #168]	; (80007fc <MX_GPIO_Init+0xc4>)
 8000754:	f043 0304 	orr.w	r3, r3, #4
 8000758:	64d3      	str	r3, [r2, #76]	; 0x4c
 800075a:	4b28      	ldr	r3, [pc, #160]	; (80007fc <MX_GPIO_Init+0xc4>)
 800075c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075e:	f003 0304 	and.w	r3, r3, #4
 8000762:	613b      	str	r3, [r7, #16]
 8000764:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000766:	4b25      	ldr	r3, [pc, #148]	; (80007fc <MX_GPIO_Init+0xc4>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076a:	4a24      	ldr	r2, [pc, #144]	; (80007fc <MX_GPIO_Init+0xc4>)
 800076c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000770:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000772:	4b22      	ldr	r3, [pc, #136]	; (80007fc <MX_GPIO_Init+0xc4>)
 8000774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077e:	4b1f      	ldr	r3, [pc, #124]	; (80007fc <MX_GPIO_Init+0xc4>)
 8000780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000782:	4a1e      	ldr	r2, [pc, #120]	; (80007fc <MX_GPIO_Init+0xc4>)
 8000784:	f043 0301 	orr.w	r3, r3, #1
 8000788:	64d3      	str	r3, [r2, #76]	; 0x4c
 800078a:	4b1c      	ldr	r3, [pc, #112]	; (80007fc <MX_GPIO_Init+0xc4>)
 800078c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078e:	f003 0301 	and.w	r3, r3, #1
 8000792:	60bb      	str	r3, [r7, #8]
 8000794:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000796:	4b19      	ldr	r3, [pc, #100]	; (80007fc <MX_GPIO_Init+0xc4>)
 8000798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079a:	4a18      	ldr	r2, [pc, #96]	; (80007fc <MX_GPIO_Init+0xc4>)
 800079c:	f043 0302 	orr.w	r3, r3, #2
 80007a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007a2:	4b16      	ldr	r3, [pc, #88]	; (80007fc <MX_GPIO_Init+0xc4>)
 80007a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a6:	f003 0302 	and.w	r3, r3, #2
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007ae:	2200      	movs	r2, #0
 80007b0:	2120      	movs	r1, #32
 80007b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007b6:	f002 fe81 	bl	80034bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007c0:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <MX_GPIO_Init+0xc8>)
 80007c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007c8:	f107 0314 	add.w	r3, r7, #20
 80007cc:	4619      	mov	r1, r3
 80007ce:	480d      	ldr	r0, [pc, #52]	; (8000804 <MX_GPIO_Init+0xcc>)
 80007d0:	f002 fccc 	bl	800316c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007d4:	2320      	movs	r3, #32
 80007d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d8:	2301      	movs	r3, #1
 80007da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007dc:	2300      	movs	r3, #0
 80007de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e0:	2300      	movs	r3, #0
 80007e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007e4:	f107 0314 	add.w	r3, r7, #20
 80007e8:	4619      	mov	r1, r3
 80007ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ee:	f002 fcbd 	bl	800316c <HAL_GPIO_Init>

}
 80007f2:	bf00      	nop
 80007f4:	3728      	adds	r7, #40	; 0x28
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40021000 	.word	0x40021000
 8000800:	10210000 	.word	0x10210000
 8000804:	48000800 	.word	0x48000800

08000808 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1) {
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	4a08      	ldr	r2, [pc, #32]	; (8000834 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000814:	4293      	cmp	r3, r2
 8000816:	d109      	bne.n	800082c <HAL_ADC_ConvCpltCallback+0x24>
		adc_flag = 1;
 8000818:	4b07      	ldr	r3, [pc, #28]	; (8000838 <HAL_ADC_ConvCpltCallback+0x30>)
 800081a:	2201      	movs	r2, #1
 800081c:	601a      	str	r2, [r3, #0]
		adc_value = HAL_ADC_GetValue(&hadc1);
 800081e:	4805      	ldr	r0, [pc, #20]	; (8000834 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000820:	f001 f9ee 	bl	8001c00 <HAL_ADC_GetValue>
 8000824:	4603      	mov	r3, r0
 8000826:	461a      	mov	r2, r3
 8000828:	4b04      	ldr	r3, [pc, #16]	; (800083c <HAL_ADC_ConvCpltCallback+0x34>)
 800082a:	601a      	str	r2, [r3, #0]
	}
}
 800082c:	bf00      	nop
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	200000f0 	.word	0x200000f0
 8000838:	200001c8 	.word	0x200001c8
 800083c:	200001cc 	.word	0x200001cc

08000840 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
	if (htim == &htim7) {
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	4a18      	ldr	r2, [pc, #96]	; (80008ac <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800084c:	4293      	cmp	r3, r2
 800084e:	d127      	bne.n	80008a0 <HAL_TIM_PeriodElapsedCallback+0x60>
		dac_value = sin_wave[dac_index];
 8000850:	4b17      	ldr	r3, [pc, #92]	; (80008b0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000852:	881b      	ldrh	r3, [r3, #0]
 8000854:	b29b      	uxth	r3, r3
 8000856:	461a      	mov	r2, r3
 8000858:	4b16      	ldr	r3, [pc, #88]	; (80008b4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800085a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800085e:	461a      	mov	r2, r3
 8000860:	4b15      	ldr	r3, [pc, #84]	; (80008b8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000862:	601a      	str	r2, [r3, #0]
		++dac_nperiod;
 8000864:	4b15      	ldr	r3, [pc, #84]	; (80008bc <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	b2db      	uxtb	r3, r3
 800086a:	3301      	adds	r3, #1
 800086c:	b2da      	uxtb	r2, r3
 800086e:	4b13      	ldr	r3, [pc, #76]	; (80008bc <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000870:	701a      	strb	r2, [r3, #0]
		if (dac_nperiod >= dac_nperiod_max) {
 8000872:	4b12      	ldr	r3, [pc, #72]	; (80008bc <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	b2db      	uxtb	r3, r3
 8000878:	2b63      	cmp	r3, #99	; 0x63
 800087a:	d911      	bls.n	80008a0 <HAL_TIM_PeriodElapsedCallback+0x60>
			dac_nperiod = 0;
 800087c:	4b0f      	ldr	r3, [pc, #60]	; (80008bc <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800087e:	2200      	movs	r2, #0
 8000880:	701a      	strb	r2, [r3, #0]
			++dac_index;
 8000882:	4b0b      	ldr	r3, [pc, #44]	; (80008b0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000884:	881b      	ldrh	r3, [r3, #0]
 8000886:	b29b      	uxth	r3, r3
 8000888:	3301      	adds	r3, #1
 800088a:	b29a      	uxth	r2, r3
 800088c:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800088e:	801a      	strh	r2, [r3, #0]
			if (dac_index >= 100)
 8000890:	4b07      	ldr	r3, [pc, #28]	; (80008b0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000892:	881b      	ldrh	r3, [r3, #0]
 8000894:	b29b      	uxth	r3, r3
 8000896:	2b63      	cmp	r3, #99	; 0x63
 8000898:	d902      	bls.n	80008a0 <HAL_TIM_PeriodElapsedCallback+0x60>
				dac_index = 0;
 800089a:	4b05      	ldr	r3, [pc, #20]	; (80008b0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800089c:	2200      	movs	r2, #0
 800089e:	801a      	strh	r2, [r3, #0]
		}
	}
}
 80008a0:	bf00      	nop
 80008a2:	370c      	adds	r7, #12
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr
 80008ac:	20000228 	.word	0x20000228
 80008b0:	200001c4 	.word	0x200001c4
 80008b4:	20000000 	.word	0x20000000
 80008b8:	200001d8 	.word	0x200001d8
 80008bc:	200001d4 	.word	0x200001d4

080008c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008c4:	f000 fc82 	bl	80011cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008c8:	f000 f89e 	bl	8000a08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008cc:	f7ff ff34 	bl	8000738 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80008d0:	f000 fbe0 	bl	8001094 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80008d4:	f7ff fdf8 	bl	80004c8 <MX_ADC1_Init>
  MX_DAC1_Init();
 80008d8:	f7ff feb6 	bl	8000648 <MX_DAC1_Init>
  MX_TIM6_Init();
 80008dc:	f000 fb2c 	bl	8000f38 <MX_TIM6_Init>
  MX_TIM7_Init();
 80008e0:	f000 fb60 	bl	8000fa4 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */


  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 80008e4:	2300      	movs	r3, #0
 80008e6:	2200      	movs	r2, #0
 80008e8:	2100      	movs	r1, #0
 80008ea:	483a      	ldr	r0, [pc, #232]	; (80009d4 <main+0x114>)
 80008ec:	f002 faea 	bl	8002ec4 <HAL_DAC_SetValue>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80008f0:	2100      	movs	r1, #0
 80008f2:	4838      	ldr	r0, [pc, #224]	; (80009d4 <main+0x114>)
 80008f4:	f002 fa3f 	bl	8002d76 <HAL_DAC_Start>
  //PID LOOP
  HAL_TIM_Base_Start(&htim6);
 80008f8:	4837      	ldr	r0, [pc, #220]	; (80009d8 <main+0x118>)
 80008fa:	f004 f94d 	bl	8004b98 <HAL_TIM_Base_Start>
  //DAC DESIRED VALUE
  HAL_TIM_Base_Start_IT(&htim7);
 80008fe:	4837      	ldr	r0, [pc, #220]	; (80009dc <main+0x11c>)
 8000900:	f004 f9b2 	bl	8004c68 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_IT(&hadc1);
 8000904:	4836      	ldr	r0, [pc, #216]	; (80009e0 <main+0x120>)
 8000906:	f001 f849 	bl	800199c <HAL_ADC_Start_IT>


  //DOBIERZ ODPOWIEDNIE WSPOLCZYNNIKI REGULATORA PID
  pid_init(&pid, 1.2f, 4.0f, 2.0f, 10, 1);
 800090a:	2201      	movs	r2, #1
 800090c:	210a      	movs	r1, #10
 800090e:	eeb0 1a00 	vmov.f32	s2, #0	; 0x40000000  2.0
 8000912:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8000916:	ed9f 0a33 	vldr	s0, [pc, #204]	; 80009e4 <main+0x124>
 800091a:	4833      	ldr	r0, [pc, #204]	; (80009e8 <main+0x128>)
 800091c:	f000 f903 	bl	8000b26 <pid_init>
//  pid_init(&pid, 200.0f, 40.0f, 8.0f, 10, 1);

  pid.p_max = pid_scale(&pid, 4095);
 8000920:	ed9f 0a32 	vldr	s0, [pc, #200]	; 80009ec <main+0x12c>
 8000924:	4830      	ldr	r0, [pc, #192]	; (80009e8 <main+0x128>)
 8000926:	f000 fa43 	bl	8000db0 <pid_scale>
 800092a:	4602      	mov	r2, r0
 800092c:	4b2e      	ldr	r3, [pc, #184]	; (80009e8 <main+0x128>)
 800092e:	619a      	str	r2, [r3, #24]
  pid.p_min = pid_scale(&pid, -4095);
 8000930:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 80009f0 <main+0x130>
 8000934:	482c      	ldr	r0, [pc, #176]	; (80009e8 <main+0x128>)
 8000936:	f000 fa3b 	bl	8000db0 <pid_scale>
 800093a:	4602      	mov	r2, r0
 800093c:	4b2a      	ldr	r3, [pc, #168]	; (80009e8 <main+0x128>)
 800093e:	625a      	str	r2, [r3, #36]	; 0x24
  pid.i_max = pid_scale(&pid, 4095);
 8000940:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 80009ec <main+0x12c>
 8000944:	4828      	ldr	r0, [pc, #160]	; (80009e8 <main+0x128>)
 8000946:	f000 fa33 	bl	8000db0 <pid_scale>
 800094a:	4602      	mov	r2, r0
 800094c:	4b26      	ldr	r3, [pc, #152]	; (80009e8 <main+0x128>)
 800094e:	61da      	str	r2, [r3, #28]
  pid.i_min = pid_scale(&pid, -4095);
 8000950:	ed9f 0a27 	vldr	s0, [pc, #156]	; 80009f0 <main+0x130>
 8000954:	4824      	ldr	r0, [pc, #144]	; (80009e8 <main+0x128>)
 8000956:	f000 fa2b 	bl	8000db0 <pid_scale>
 800095a:	4602      	mov	r2, r0
 800095c:	4b22      	ldr	r3, [pc, #136]	; (80009e8 <main+0x128>)
 800095e:	629a      	str	r2, [r3, #40]	; 0x28
  pid.d_max = pid_scale(&pid, 4095);
 8000960:	ed9f 0a22 	vldr	s0, [pc, #136]	; 80009ec <main+0x12c>
 8000964:	4820      	ldr	r0, [pc, #128]	; (80009e8 <main+0x128>)
 8000966:	f000 fa23 	bl	8000db0 <pid_scale>
 800096a:	4602      	mov	r2, r0
 800096c:	4b1e      	ldr	r3, [pc, #120]	; (80009e8 <main+0x128>)
 800096e:	621a      	str	r2, [r3, #32]
  pid.d_min = pid_scale(&pid, -4095);
 8000970:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 80009f0 <main+0x130>
 8000974:	481c      	ldr	r0, [pc, #112]	; (80009e8 <main+0x128>)
 8000976:	f000 fa1b 	bl	8000db0 <pid_scale>
 800097a:	4602      	mov	r2, r0
 800097c:	4b1a      	ldr	r3, [pc, #104]	; (80009e8 <main+0x128>)
 800097e:	62da      	str	r2, [r3, #44]	; 0x2c
  pid.total_max = pid_scale(&pid, 4095);
 8000980:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 80009ec <main+0x12c>
 8000984:	4818      	ldr	r0, [pc, #96]	; (80009e8 <main+0x128>)
 8000986:	f000 fa13 	bl	8000db0 <pid_scale>
 800098a:	4602      	mov	r2, r0
 800098c:	4b16      	ldr	r3, [pc, #88]	; (80009e8 <main+0x128>)
 800098e:	649a      	str	r2, [r3, #72]	; 0x48
  pid.total_min = pid_scale(&pid, 0);
 8000990:	ed9f 0a18 	vldr	s0, [pc, #96]	; 80009f4 <main+0x134>
 8000994:	4814      	ldr	r0, [pc, #80]	; (80009e8 <main+0x128>)
 8000996:	f000 fa0b 	bl	8000db0 <pid_scale>
 800099a:	4602      	mov	r2, r0
 800099c:	4b12      	ldr	r3, [pc, #72]	; (80009e8 <main+0x128>)
 800099e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (adc_flag == 1) {
 80009a0:	4b15      	ldr	r3, [pc, #84]	; (80009f8 <main+0x138>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	2b01      	cmp	r3, #1
 80009a6:	d1fb      	bne.n	80009a0 <main+0xe0>
		  adc_flag = 0;
 80009a8:	4b13      	ldr	r3, [pc, #76]	; (80009f8 <main+0x138>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
		  dac_control = pid_calc(&pid, adc_value, dac_value);
 80009ae:	4b13      	ldr	r3, [pc, #76]	; (80009fc <main+0x13c>)
 80009b0:	6819      	ldr	r1, [r3, #0]
 80009b2:	4b13      	ldr	r3, [pc, #76]	; (8000a00 <main+0x140>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	461a      	mov	r2, r3
 80009b8:	480b      	ldr	r0, [pc, #44]	; (80009e8 <main+0x128>)
 80009ba:	f000 f93f 	bl	8000c3c <pid_calc>
 80009be:	4602      	mov	r2, r0
 80009c0:	4b10      	ldr	r3, [pc, #64]	; (8000a04 <main+0x144>)
 80009c2:	601a      	str	r2, [r3, #0]
		  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,dac_control);
 80009c4:	4b0f      	ldr	r3, [pc, #60]	; (8000a04 <main+0x144>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	2200      	movs	r2, #0
 80009ca:	2100      	movs	r1, #0
 80009cc:	4801      	ldr	r0, [pc, #4]	; (80009d4 <main+0x114>)
 80009ce:	f002 fa79 	bl	8002ec4 <HAL_DAC_SetValue>
	  if (adc_flag == 1) {
 80009d2:	e7e5      	b.n	80009a0 <main+0xe0>
 80009d4:	20000154 	.word	0x20000154
 80009d8:	200001dc 	.word	0x200001dc
 80009dc:	20000228 	.word	0x20000228
 80009e0:	200000f0 	.word	0x200000f0
 80009e4:	3f99999a 	.word	0x3f99999a
 80009e8:	20000168 	.word	0x20000168
 80009ec:	457ff000 	.word	0x457ff000
 80009f0:	c57ff000 	.word	0xc57ff000
 80009f4:	00000000 	.word	0x00000000
 80009f8:	200001c8 	.word	0x200001c8
 80009fc:	200001cc 	.word	0x200001cc
 8000a00:	200001d8 	.word	0x200001d8
 8000a04:	200001c0 	.word	0x200001c0

08000a08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b0b8      	sub	sp, #224	; 0xe0
 8000a0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a0e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a12:	2244      	movs	r2, #68	; 0x44
 8000a14:	2100      	movs	r1, #0
 8000a16:	4618      	mov	r0, r3
 8000a18:	f005 f87c 	bl	8005b14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a1c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	609a      	str	r2, [r3, #8]
 8000a28:	60da      	str	r2, [r3, #12]
 8000a2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a2c:	463b      	mov	r3, r7
 8000a2e:	2288      	movs	r2, #136	; 0x88
 8000a30:	2100      	movs	r1, #0
 8000a32:	4618      	mov	r0, r3
 8000a34:	f005 f86e 	bl	8005b14 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a42:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a46:	2310      	movs	r3, #16
 8000a48:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a52:	2302      	movs	r3, #2
 8000a54:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000a5e:	230a      	movs	r3, #10
 8000a60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a64:	2307      	movs	r3, #7
 8000a66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a70:	2302      	movs	r3, #2
 8000a72:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a76:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f002 fd9a 	bl	80035b4 <HAL_RCC_OscConfig>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000a86:	f000 f847 	bl	8000b18 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a8a:	230f      	movs	r3, #15
 8000a8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a90:	2303      	movs	r3, #3
 8000a92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a96:	2300      	movs	r3, #0
 8000a98:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000aa8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000aac:	2104      	movs	r1, #4
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f003 f966 	bl	8003d80 <HAL_RCC_ClockConfig>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000aba:	f000 f82d 	bl	8000b18 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 8000abe:	f244 0302 	movw	r3, #16386	; 0x4002
 8000ac2:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000ac8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000acc:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000ad6:	2308      	movs	r3, #8
 8000ad8:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000ada:	2307      	movs	r3, #7
 8000adc:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000ae6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000aea:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aec:	463b      	mov	r3, r7
 8000aee:	4618      	mov	r0, r3
 8000af0:	f003 fb4a 	bl	8004188 <HAL_RCCEx_PeriphCLKConfig>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000afa:	f000 f80d 	bl	8000b18 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000afe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000b02:	f002 fd01 	bl	8003508 <HAL_PWREx_ControlVoltageScaling>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <SystemClock_Config+0x108>
  {
    Error_Handler();
 8000b0c:	f000 f804 	bl	8000b18 <Error_Handler>
  }
}
 8000b10:	bf00      	nop
 8000b12:	37e0      	adds	r7, #224	; 0xe0
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr

08000b26 <pid_init>:
* Created on: 09.03.2018
* Author: Wojciech Domski
*/
#include "pid.h"

void pid_init(cpid_t * pid, float p, float i, float d, uint8_t f, int32_t dt_ms) {
 8000b26:	b480      	push	{r7}
 8000b28:	b089      	sub	sp, #36	; 0x24
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	6178      	str	r0, [r7, #20]
 8000b2e:	ed87 0a04 	vstr	s0, [r7, #16]
 8000b32:	edc7 0a03 	vstr	s1, [r7, #12]
 8000b36:	ed87 1a02 	vstr	s2, [r7, #8]
 8000b3a:	460b      	mov	r3, r1
 8000b3c:	603a      	str	r2, [r7, #0]
 8000b3e:	71fb      	strb	r3, [r7, #7]
	uint32_t k;
	pid->power = 1;
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	2201      	movs	r2, #1
 8000b44:	635a      	str	r2, [r3, #52]	; 0x34
	for (k = 0; k < f; ++k) {
 8000b46:	2300      	movs	r3, #0
 8000b48:	61fb      	str	r3, [r7, #28]
 8000b4a:	e007      	b.n	8000b5c <pid_init+0x36>
		pid->power = pid->power * 2;
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b50:	005a      	lsls	r2, r3, #1
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	635a      	str	r2, [r3, #52]	; 0x34
	for (k = 0; k < f; ++k) {
 8000b56:	69fb      	ldr	r3, [r7, #28]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	61fb      	str	r3, [r7, #28]
 8000b5c:	79fb      	ldrb	r3, [r7, #7]
 8000b5e:	69fa      	ldr	r2, [r7, #28]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	d3f3      	bcc.n	8000b4c <pid_init+0x26>
	}
	pid->f = f;
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	79fa      	ldrb	r2, [r7, #7]
 8000b68:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	pid->p = (int32_t) (p * pid->power);
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b70:	ee07 3a90 	vmov	s15, r3
 8000b74:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000b78:	edd7 7a04 	vldr	s15, [r7, #16]
 8000b7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b84:	ee17 2a90 	vmov	r2, s15
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	601a      	str	r2, [r3, #0]
	pid->i = (int32_t) (i * pid->power);
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b90:	ee07 3a90 	vmov	s15, r3
 8000b94:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000b98:	edd7 7a03 	vldr	s15, [r7, #12]
 8000b9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ba0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ba4:	ee17 2a90 	vmov	r2, s15
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	605a      	str	r2, [r3, #4]
	pid->d = (int32_t) (d * pid->power);
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bb0:	ee07 3a90 	vmov	s15, r3
 8000bb4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000bb8:	edd7 7a02 	vldr	s15, [r7, #8]
 8000bbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bc0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000bc4:	ee17 2a90 	vmov	r2, s15
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	609a      	str	r2, [r3, #8]
	pid->p_val = 0;
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	2200      	movs	r2, #0
 8000bd0:	60da      	str	r2, [r3, #12]
	pid->i_val = 0;
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	611a      	str	r2, [r3, #16]
	pid->d_val = 0;
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	2200      	movs	r2, #0
 8000bdc:	615a      	str	r2, [r3, #20]
	pid->p_max = INT32_MAX;
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8000be4:	619a      	str	r2, [r3, #24]
	pid->p_min = INT32_MIN;
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000bec:	625a      	str	r2, [r3, #36]	; 0x24
	pid->i_max = INT32_MAX;
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8000bf4:	61da      	str	r2, [r3, #28]
	pid->i_min = INT32_MIN;
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000bfc:	629a      	str	r2, [r3, #40]	; 0x28
	pid->d_max = INT32_MAX;
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8000c04:	621a      	str	r2, [r3, #32]
	pid->d_min = INT32_MIN;
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000c0c:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->e_last = 0;
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	2200      	movs	r2, #0
 8000c12:	641a      	str	r2, [r3, #64]	; 0x40
	pid->sum = 0;
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	2200      	movs	r2, #0
 8000c18:	645a      	str	r2, [r3, #68]	; 0x44
	pid->total_max = INT32_MAX;
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8000c20:	649a      	str	r2, [r3, #72]	; 0x48
	pid->total_min = INT32_MIN;
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000c28:	64da      	str	r2, [r3, #76]	; 0x4c
	pid->dt_ms = dt_ms;
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	683a      	ldr	r2, [r7, #0]
 8000c2e:	655a      	str	r2, [r3, #84]	; 0x54
}
 8000c30:	bf00      	nop
 8000c32:	3724      	adds	r7, #36	; 0x24
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr

08000c3c <pid_calc>:

int32_t pid_calc(cpid_t * pid, int32_t mv, int32_t dv) {
 8000c3c:	b480      	push	{r7}
 8000c3e:	b08b      	sub	sp, #44	; 0x2c
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	60f8      	str	r0, [r7, #12]
 8000c44:	60b9      	str	r1, [r7, #8]
 8000c46:	607a      	str	r2, [r7, #4]

	int32_t p, i, d, e, total;
	pid->mv = mv;
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	68ba      	ldr	r2, [r7, #8]
 8000c4c:	63da      	str	r2, [r3, #60]	; 0x3c
	pid->dv = dv;
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	687a      	ldr	r2, [r7, #4]
 8000c52:	639a      	str	r2, [r3, #56]	; 0x38

	//UZUPELNIJ WYLICZANIE BLEDU
	e = dv - mv;
 8000c54:	687a      	ldr	r2, [r7, #4]
 8000c56:	68bb      	ldr	r3, [r7, #8]
 8000c58:	1ad3      	subs	r3, r2, r3
 8000c5a:	617b      	str	r3, [r7, #20]

	//UZUPELNIJ WYLICZANIE SYGNALU PRZEZ CZLON PROPORCJONALNY
	p = pid->p * e;
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	fb02 f303 	mul.w	r3, r2, r3
 8000c66:	627b      	str	r3, [r7, #36]	; 0x24

	if (p > pid->p_max)
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	699b      	ldr	r3, [r3, #24]
 8000c6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	dd03      	ble.n	8000c7a <pid_calc+0x3e>
		p = pid->p_max;
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	699b      	ldr	r3, [r3, #24]
 8000c76:	627b      	str	r3, [r7, #36]	; 0x24
 8000c78:	e007      	b.n	8000c8a <pid_calc+0x4e>
	else if (p < pid->p_min)
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c80:	429a      	cmp	r2, r3
 8000c82:	da02      	bge.n	8000c8a <pid_calc+0x4e>
		p = pid->p_min;
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c88:	627b      	str	r3, [r7, #36]	; 0x24
	pid->p_val = p >> pid->f;
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000c90:	461a      	mov	r2, r3
 8000c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c94:	fa43 f202 	asr.w	r2, r3, r2
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	60da      	str	r2, [r3, #12]
	i = pid->sum;
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca0:	623b      	str	r3, [r7, #32]

	//UZUPELNIJ WYLICZANIE SYGNALU PRZEZ CZLON CALKUJACY
	//PAMIETAJ O SKALOWANIU CZASU WYKONYWANIA PETLI DO SEKUND
	i += pid->dt_ms * pid->i * e / 1000;;
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ca6:	68fa      	ldr	r2, [r7, #12]
 8000ca8:	6852      	ldr	r2, [r2, #4]
 8000caa:	fb02 f303 	mul.w	r3, r2, r3
 8000cae:	697a      	ldr	r2, [r7, #20]
 8000cb0:	fb02 f303 	mul.w	r3, r2, r3
 8000cb4:	4a3d      	ldr	r2, [pc, #244]	; (8000dac <pid_calc+0x170>)
 8000cb6:	fb82 1203 	smull	r1, r2, r2, r3
 8000cba:	1192      	asrs	r2, r2, #6
 8000cbc:	17db      	asrs	r3, r3, #31
 8000cbe:	1ad3      	subs	r3, r2, r3
 8000cc0:	6a3a      	ldr	r2, [r7, #32]
 8000cc2:	4413      	add	r3, r2
 8000cc4:	623b      	str	r3, [r7, #32]

	if (i > pid->i_max)
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	69db      	ldr	r3, [r3, #28]
 8000cca:	6a3a      	ldr	r2, [r7, #32]
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	dd03      	ble.n	8000cd8 <pid_calc+0x9c>
		i = pid->i_max;
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	69db      	ldr	r3, [r3, #28]
 8000cd4:	623b      	str	r3, [r7, #32]
 8000cd6:	e007      	b.n	8000ce8 <pid_calc+0xac>
	else if (i < pid->i_min)
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cdc:	6a3a      	ldr	r2, [r7, #32]
 8000cde:	429a      	cmp	r2, r3
 8000ce0:	da02      	bge.n	8000ce8 <pid_calc+0xac>
		i = pid->i_min;
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ce6:	623b      	str	r3, [r7, #32]

	pid->sum = i;
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	6a3a      	ldr	r2, [r7, #32]
 8000cec:	645a      	str	r2, [r3, #68]	; 0x44
	pid->i_val = i >> pid->f;
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	6a3b      	ldr	r3, [r7, #32]
 8000cf8:	fa43 f202 	asr.w	r2, r3, r2
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	611a      	str	r2, [r3, #16]

	//UZUPELNIJ WYLICZANIE SYGNALU PRZEZ CZLON ROZNICZKUJACEGO
	//PAMIETAJ O SKALOWANIU CZASU WYKONYWANIA PETLI DO SEKUND
	d = pid->d * (e - pid->e_last) * 1000 / pid->dt_ms;;
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	689b      	ldr	r3, [r3, #8]
 8000d04:	68fa      	ldr	r2, [r7, #12]
 8000d06:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000d08:	6979      	ldr	r1, [r7, #20]
 8000d0a:	1a8a      	subs	r2, r1, r2
 8000d0c:	fb02 f303 	mul.w	r3, r2, r3
 8000d10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d14:	fb02 f203 	mul.w	r2, r2, r3
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d1c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d20:	61fb      	str	r3, [r7, #28]

	if (d > pid->d_max)
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	6a1b      	ldr	r3, [r3, #32]
 8000d26:	69fa      	ldr	r2, [r7, #28]
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	dd03      	ble.n	8000d34 <pid_calc+0xf8>
		d = pid->d_max;
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	6a1b      	ldr	r3, [r3, #32]
 8000d30:	61fb      	str	r3, [r7, #28]
 8000d32:	e007      	b.n	8000d44 <pid_calc+0x108>
	else if (d < pid->d_min)
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d38:	69fa      	ldr	r2, [r7, #28]
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	da02      	bge.n	8000d44 <pid_calc+0x108>
		d = pid->d_min;
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d42:	61fb      	str	r3, [r7, #28]

	pid->d_val = d >> pid->f;
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	fa43 f202 	asr.w	r2, r3, r2
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	615a      	str	r2, [r3, #20]
	total = p + i + d;
 8000d56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d58:	6a3b      	ldr	r3, [r7, #32]
 8000d5a:	4413      	add	r3, r2
 8000d5c:	69fa      	ldr	r2, [r7, #28]
 8000d5e:	4413      	add	r3, r2
 8000d60:	61bb      	str	r3, [r7, #24]
	if (total > pid->total_max)
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d66:	69ba      	ldr	r2, [r7, #24]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	dd03      	ble.n	8000d74 <pid_calc+0x138>
		total = pid->total_max;
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d70:	61bb      	str	r3, [r7, #24]
 8000d72:	e007      	b.n	8000d84 <pid_calc+0x148>
	else if (total < pid->total_min)
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d78:	69ba      	ldr	r2, [r7, #24]
 8000d7a:	429a      	cmp	r2, r3
 8000d7c:	da02      	bge.n	8000d84 <pid_calc+0x148>
		total = pid->total_min;
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d82:	61bb      	str	r3, [r7, #24]

	pid->control = total >> pid->f;
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	69bb      	ldr	r3, [r7, #24]
 8000d8e:	fa43 f202 	asr.w	r2, r3, r2
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	651a      	str	r2, [r3, #80]	; 0x50
	pid->e_last = e;
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	697a      	ldr	r2, [r7, #20]
 8000d9a:	641a      	str	r2, [r3, #64]	; 0x40
	return pid->control;
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	372c      	adds	r7, #44	; 0x2c
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	10624dd3 	.word	0x10624dd3

08000db0 <pid_scale>:

int32_t pid_scale(cpid_t * pid, float v) {
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	ed87 0a00 	vstr	s0, [r7]
	return v * pid->power;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dc0:	ee07 3a90 	vmov	s15, r3
 8000dc4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000dc8:	edd7 7a00 	vldr	s15, [r7]
 8000dcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000dd0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000dd4:	ee17 3a90 	vmov	r3, s15
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	370c      	adds	r7, #12
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr

08000de4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dea:	4b0f      	ldr	r3, [pc, #60]	; (8000e28 <HAL_MspInit+0x44>)
 8000dec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dee:	4a0e      	ldr	r2, [pc, #56]	; (8000e28 <HAL_MspInit+0x44>)
 8000df0:	f043 0301 	orr.w	r3, r3, #1
 8000df4:	6613      	str	r3, [r2, #96]	; 0x60
 8000df6:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <HAL_MspInit+0x44>)
 8000df8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dfa:	f003 0301 	and.w	r3, r3, #1
 8000dfe:	607b      	str	r3, [r7, #4]
 8000e00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e02:	4b09      	ldr	r3, [pc, #36]	; (8000e28 <HAL_MspInit+0x44>)
 8000e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e06:	4a08      	ldr	r2, [pc, #32]	; (8000e28 <HAL_MspInit+0x44>)
 8000e08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e0c:	6593      	str	r3, [r2, #88]	; 0x58
 8000e0e:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <HAL_MspInit+0x44>)
 8000e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e16:	603b      	str	r3, [r7, #0]
 8000e18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	370c      	adds	r7, #12
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	40021000 	.word	0x40021000

08000e2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr

08000e3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e3e:	e7fe      	b.n	8000e3e <HardFault_Handler+0x4>

08000e40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e44:	e7fe      	b.n	8000e44 <MemManage_Handler+0x4>

08000e46 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e46:	b480      	push	{r7}
 8000e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e4a:	e7fe      	b.n	8000e4a <BusFault_Handler+0x4>

08000e4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e50:	e7fe      	b.n	8000e50 <UsageFault_Handler+0x4>

08000e52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e52:	b480      	push	{r7}
 8000e54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e56:	bf00      	nop
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr

08000e60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr

08000e6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e72:	bf00      	nop
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr

08000e7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e80:	f000 fa00 	bl	8001284 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e84:	bf00      	nop
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000e8c:	4802      	ldr	r0, [pc, #8]	; (8000e98 <ADC1_2_IRQHandler+0x10>)
 8000e8e:	f000 fec5 	bl	8001c1c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	200000f0 	.word	0x200000f0

08000e9c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ea0:	4803      	ldr	r0, [pc, #12]	; (8000eb0 <TIM6_DAC_IRQHandler+0x14>)
 8000ea2:	f003 ff51 	bl	8004d48 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8000ea6:	4803      	ldr	r0, [pc, #12]	; (8000eb4 <TIM6_DAC_IRQHandler+0x18>)
 8000ea8:	f001 ffb2 	bl	8002e10 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000eac:	bf00      	nop
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	200001dc 	.word	0x200001dc
 8000eb4:	20000154 	.word	0x20000154

08000eb8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000ebc:	4802      	ldr	r0, [pc, #8]	; (8000ec8 <TIM7_IRQHandler+0x10>)
 8000ebe:	f003 ff43 	bl	8004d48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	20000228 	.word	0x20000228

08000ecc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ed0:	4b17      	ldr	r3, [pc, #92]	; (8000f30 <SystemInit+0x64>)
 8000ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ed6:	4a16      	ldr	r2, [pc, #88]	; (8000f30 <SystemInit+0x64>)
 8000ed8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000edc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000ee0:	4b14      	ldr	r3, [pc, #80]	; (8000f34 <SystemInit+0x68>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a13      	ldr	r2, [pc, #76]	; (8000f34 <SystemInit+0x68>)
 8000ee6:	f043 0301 	orr.w	r3, r3, #1
 8000eea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000eec:	4b11      	ldr	r3, [pc, #68]	; (8000f34 <SystemInit+0x68>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000ef2:	4b10      	ldr	r3, [pc, #64]	; (8000f34 <SystemInit+0x68>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a0f      	ldr	r2, [pc, #60]	; (8000f34 <SystemInit+0x68>)
 8000ef8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000efc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000f00:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000f02:	4b0c      	ldr	r3, [pc, #48]	; (8000f34 <SystemInit+0x68>)
 8000f04:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f08:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f0a:	4b0a      	ldr	r3, [pc, #40]	; (8000f34 <SystemInit+0x68>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a09      	ldr	r2, [pc, #36]	; (8000f34 <SystemInit+0x68>)
 8000f10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f14:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000f16:	4b07      	ldr	r3, [pc, #28]	; (8000f34 <SystemInit+0x68>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f1c:	4b04      	ldr	r3, [pc, #16]	; (8000f30 <SystemInit+0x64>)
 8000f1e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f22:	609a      	str	r2, [r3, #8]
#endif
}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	e000ed00 	.word	0xe000ed00
 8000f34:	40021000 	.word	0x40021000

08000f38 <MX_TIM6_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f3e:	1d3b      	adds	r3, r7, #4
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 8000f48:	4b14      	ldr	r3, [pc, #80]	; (8000f9c <MX_TIM6_Init+0x64>)
 8000f4a:	4a15      	ldr	r2, [pc, #84]	; (8000fa0 <MX_TIM6_Init+0x68>)
 8000f4c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = TIM_PID_LOOP_PRESCALER;
 8000f4e:	4b13      	ldr	r3, [pc, #76]	; (8000f9c <MX_TIM6_Init+0x64>)
 8000f50:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000f54:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f56:	4b11      	ldr	r3, [pc, #68]	; (8000f9c <MX_TIM6_Init+0x64>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = TIM_PID_LOOP_PERIOD;
 8000f5c:	4b0f      	ldr	r3, [pc, #60]	; (8000f9c <MX_TIM6_Init+0x64>)
 8000f5e:	229f      	movs	r2, #159	; 0x9f
 8000f60:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f62:	4b0e      	ldr	r3, [pc, #56]	; (8000f9c <MX_TIM6_Init+0x64>)
 8000f64:	2280      	movs	r2, #128	; 0x80
 8000f66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000f68:	480c      	ldr	r0, [pc, #48]	; (8000f9c <MX_TIM6_Init+0x64>)
 8000f6a:	f003 fdbd 	bl	8004ae8 <HAL_TIM_Base_Init>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000f74:	f7ff fdd0 	bl	8000b18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000f78:	2320      	movs	r3, #32
 8000f7a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000f80:	1d3b      	adds	r3, r7, #4
 8000f82:	4619      	mov	r1, r3
 8000f84:	4805      	ldr	r0, [pc, #20]	; (8000f9c <MX_TIM6_Init+0x64>)
 8000f86:	f004 f8c1 	bl	800510c <HAL_TIMEx_MasterConfigSynchronization>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000f90:	f7ff fdc2 	bl	8000b18 <Error_Handler>
  }

}
 8000f94:	bf00      	nop
 8000f96:	3710      	adds	r7, #16
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	200001dc 	.word	0x200001dc
 8000fa0:	40001000 	.word	0x40001000

08000fa4 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000faa:	1d3b      	adds	r3, r7, #4
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	605a      	str	r2, [r3, #4]
 8000fb2:	609a      	str	r2, [r3, #8]

  htim7.Instance = TIM7;
 8000fb4:	4b14      	ldr	r3, [pc, #80]	; (8001008 <MX_TIM7_Init+0x64>)
 8000fb6:	4a15      	ldr	r2, [pc, #84]	; (800100c <MX_TIM7_Init+0x68>)
 8000fb8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = TIM_DAC_PRESCALER;
 8000fba:	4b13      	ldr	r3, [pc, #76]	; (8001008 <MX_TIM7_Init+0x64>)
 8000fbc:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000fc0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fc2:	4b11      	ldr	r3, [pc, #68]	; (8001008 <MX_TIM7_Init+0x64>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = TIM_DAC_PERIOD;
 8000fc8:	4b0f      	ldr	r3, [pc, #60]	; (8001008 <MX_TIM7_Init+0x64>)
 8000fca:	229f      	movs	r2, #159	; 0x9f
 8000fcc:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fce:	4b0e      	ldr	r3, [pc, #56]	; (8001008 <MX_TIM7_Init+0x64>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000fd4:	480c      	ldr	r0, [pc, #48]	; (8001008 <MX_TIM7_Init+0x64>)
 8000fd6:	f003 fd87 	bl	8004ae8 <HAL_TIM_Base_Init>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000fe0:	f7ff fd9a 	bl	8000b18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000fec:	1d3b      	adds	r3, r7, #4
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4805      	ldr	r0, [pc, #20]	; (8001008 <MX_TIM7_Init+0x64>)
 8000ff2:	f004 f88b 	bl	800510c <HAL_TIMEx_MasterConfigSynchronization>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000ffc:	f7ff fd8c 	bl	8000b18 <Error_Handler>
  }

}
 8001000:	bf00      	nop
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	20000228 	.word	0x20000228
 800100c:	40001400 	.word	0x40001400

08001010 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a1a      	ldr	r2, [pc, #104]	; (8001088 <HAL_TIM_Base_MspInit+0x78>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d114      	bne.n	800104c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001022:	4b1a      	ldr	r3, [pc, #104]	; (800108c <HAL_TIM_Base_MspInit+0x7c>)
 8001024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001026:	4a19      	ldr	r2, [pc, #100]	; (800108c <HAL_TIM_Base_MspInit+0x7c>)
 8001028:	f043 0310 	orr.w	r3, r3, #16
 800102c:	6593      	str	r3, [r2, #88]	; 0x58
 800102e:	4b17      	ldr	r3, [pc, #92]	; (800108c <HAL_TIM_Base_MspInit+0x7c>)
 8001030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001032:	f003 0310 	and.w	r3, r3, #16
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800103a:	2200      	movs	r2, #0
 800103c:	2100      	movs	r1, #0
 800103e:	2036      	movs	r0, #54	; 0x36
 8001040:	f001 fe41 	bl	8002cc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001044:	2036      	movs	r0, #54	; 0x36
 8001046:	f001 fe5a 	bl	8002cfe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800104a:	e018      	b.n	800107e <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM7)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a0f      	ldr	r2, [pc, #60]	; (8001090 <HAL_TIM_Base_MspInit+0x80>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d113      	bne.n	800107e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001056:	4b0d      	ldr	r3, [pc, #52]	; (800108c <HAL_TIM_Base_MspInit+0x7c>)
 8001058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800105a:	4a0c      	ldr	r2, [pc, #48]	; (800108c <HAL_TIM_Base_MspInit+0x7c>)
 800105c:	f043 0320 	orr.w	r3, r3, #32
 8001060:	6593      	str	r3, [r2, #88]	; 0x58
 8001062:	4b0a      	ldr	r3, [pc, #40]	; (800108c <HAL_TIM_Base_MspInit+0x7c>)
 8001064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001066:	f003 0320 	and.w	r3, r3, #32
 800106a:	60bb      	str	r3, [r7, #8]
 800106c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800106e:	2200      	movs	r2, #0
 8001070:	2100      	movs	r1, #0
 8001072:	2037      	movs	r0, #55	; 0x37
 8001074:	f001 fe27 	bl	8002cc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001078:	2037      	movs	r0, #55	; 0x37
 800107a:	f001 fe40 	bl	8002cfe <HAL_NVIC_EnableIRQ>
}
 800107e:	bf00      	nop
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40001000 	.word	0x40001000
 800108c:	40021000 	.word	0x40021000
 8001090:	40001400 	.word	0x40001400

08001094 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001098:	4b14      	ldr	r3, [pc, #80]	; (80010ec <MX_USART2_UART_Init+0x58>)
 800109a:	4a15      	ldr	r2, [pc, #84]	; (80010f0 <MX_USART2_UART_Init+0x5c>)
 800109c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800109e:	4b13      	ldr	r3, [pc, #76]	; (80010ec <MX_USART2_UART_Init+0x58>)
 80010a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010a6:	4b11      	ldr	r3, [pc, #68]	; (80010ec <MX_USART2_UART_Init+0x58>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010ac:	4b0f      	ldr	r3, [pc, #60]	; (80010ec <MX_USART2_UART_Init+0x58>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010b2:	4b0e      	ldr	r3, [pc, #56]	; (80010ec <MX_USART2_UART_Init+0x58>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010b8:	4b0c      	ldr	r3, [pc, #48]	; (80010ec <MX_USART2_UART_Init+0x58>)
 80010ba:	220c      	movs	r2, #12
 80010bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010be:	4b0b      	ldr	r3, [pc, #44]	; (80010ec <MX_USART2_UART_Init+0x58>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010c4:	4b09      	ldr	r3, [pc, #36]	; (80010ec <MX_USART2_UART_Init+0x58>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010ca:	4b08      	ldr	r3, [pc, #32]	; (80010ec <MX_USART2_UART_Init+0x58>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010d0:	4b06      	ldr	r3, [pc, #24]	; (80010ec <MX_USART2_UART_Init+0x58>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010d6:	4805      	ldr	r0, [pc, #20]	; (80010ec <MX_USART2_UART_Init+0x58>)
 80010d8:	f004 f8be 	bl	8005258 <HAL_UART_Init>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80010e2:	f7ff fd19 	bl	8000b18 <Error_Handler>
  }

}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20000274 	.word	0x20000274
 80010f0:	40004400 	.word	0x40004400

080010f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b08a      	sub	sp, #40	; 0x28
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fc:	f107 0314 	add.w	r3, r7, #20
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	60da      	str	r2, [r3, #12]
 800110a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a17      	ldr	r2, [pc, #92]	; (8001170 <HAL_UART_MspInit+0x7c>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d128      	bne.n	8001168 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001116:	4b17      	ldr	r3, [pc, #92]	; (8001174 <HAL_UART_MspInit+0x80>)
 8001118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800111a:	4a16      	ldr	r2, [pc, #88]	; (8001174 <HAL_UART_MspInit+0x80>)
 800111c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001120:	6593      	str	r3, [r2, #88]	; 0x58
 8001122:	4b14      	ldr	r3, [pc, #80]	; (8001174 <HAL_UART_MspInit+0x80>)
 8001124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800112a:	613b      	str	r3, [r7, #16]
 800112c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800112e:	4b11      	ldr	r3, [pc, #68]	; (8001174 <HAL_UART_MspInit+0x80>)
 8001130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001132:	4a10      	ldr	r2, [pc, #64]	; (8001174 <HAL_UART_MspInit+0x80>)
 8001134:	f043 0301 	orr.w	r3, r3, #1
 8001138:	64d3      	str	r3, [r2, #76]	; 0x4c
 800113a:	4b0e      	ldr	r3, [pc, #56]	; (8001174 <HAL_UART_MspInit+0x80>)
 800113c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001146:	230c      	movs	r3, #12
 8001148:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114a:	2302      	movs	r3, #2
 800114c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114e:	2300      	movs	r3, #0
 8001150:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001152:	2303      	movs	r3, #3
 8001154:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001156:	2307      	movs	r3, #7
 8001158:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115a:	f107 0314 	add.w	r3, r7, #20
 800115e:	4619      	mov	r1, r3
 8001160:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001164:	f002 f802 	bl	800316c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001168:	bf00      	nop
 800116a:	3728      	adds	r7, #40	; 0x28
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	40004400 	.word	0x40004400
 8001174:	40021000 	.word	0x40021000

08001178 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001178:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011b0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800117c:	f7ff fea6 	bl	8000ecc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001180:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001182:	e003      	b.n	800118c <LoopCopyDataInit>

08001184 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001184:	4b0b      	ldr	r3, [pc, #44]	; (80011b4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001186:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001188:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800118a:	3104      	adds	r1, #4

0800118c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800118c:	480a      	ldr	r0, [pc, #40]	; (80011b8 <LoopForever+0xa>)
	ldr	r3, =_edata
 800118e:	4b0b      	ldr	r3, [pc, #44]	; (80011bc <LoopForever+0xe>)
	adds	r2, r0, r1
 8001190:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001192:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001194:	d3f6      	bcc.n	8001184 <CopyDataInit>
	ldr	r2, =_sbss
 8001196:	4a0a      	ldr	r2, [pc, #40]	; (80011c0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001198:	e002      	b.n	80011a0 <LoopFillZerobss>

0800119a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800119a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800119c:	f842 3b04 	str.w	r3, [r2], #4

080011a0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80011a0:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <LoopForever+0x16>)
	cmp	r2, r3
 80011a2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80011a4:	d3f9      	bcc.n	800119a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011a6:	f004 fc91 	bl	8005acc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011aa:	f7ff fb89 	bl	80008c0 <main>

080011ae <LoopForever>:

LoopForever:
    b LoopForever
 80011ae:	e7fe      	b.n	80011ae <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80011b0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80011b4:	08005b94 	.word	0x08005b94
	ldr	r0, =_sdata
 80011b8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80011bc:	200000d4 	.word	0x200000d4
	ldr	r2, =_sbss
 80011c0:	200000d4 	.word	0x200000d4
	ldr	r3, = _ebss
 80011c4:	200002f8 	.word	0x200002f8

080011c8 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011c8:	e7fe      	b.n	80011c8 <ADC3_IRQHandler>
	...

080011cc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011d2:	2300      	movs	r3, #0
 80011d4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011d6:	4b0c      	ldr	r3, [pc, #48]	; (8001208 <HAL_Init+0x3c>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a0b      	ldr	r2, [pc, #44]	; (8001208 <HAL_Init+0x3c>)
 80011dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011e0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011e2:	2003      	movs	r0, #3
 80011e4:	f001 fd64 	bl	8002cb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011e8:	2000      	movs	r0, #0
 80011ea:	f000 f80f 	bl	800120c <HAL_InitTick>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d002      	beq.n	80011fa <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80011f4:	2301      	movs	r3, #1
 80011f6:	71fb      	strb	r3, [r7, #7]
 80011f8:	e001      	b.n	80011fe <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011fa:	f7ff fdf3 	bl	8000de4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011fe:	79fb      	ldrb	r3, [r7, #7]
}
 8001200:	4618      	mov	r0, r3
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40022000 	.word	0x40022000

0800120c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001214:	2300      	movs	r3, #0
 8001216:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001218:	4b17      	ldr	r3, [pc, #92]	; (8001278 <HAL_InitTick+0x6c>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d023      	beq.n	8001268 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001220:	4b16      	ldr	r3, [pc, #88]	; (800127c <HAL_InitTick+0x70>)
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	4b14      	ldr	r3, [pc, #80]	; (8001278 <HAL_InitTick+0x6c>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	4619      	mov	r1, r3
 800122a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800122e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001232:	fbb2 f3f3 	udiv	r3, r2, r3
 8001236:	4618      	mov	r0, r3
 8001238:	f001 fd6f 	bl	8002d1a <HAL_SYSTICK_Config>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d10f      	bne.n	8001262 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2b0f      	cmp	r3, #15
 8001246:	d809      	bhi.n	800125c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001248:	2200      	movs	r2, #0
 800124a:	6879      	ldr	r1, [r7, #4]
 800124c:	f04f 30ff 	mov.w	r0, #4294967295
 8001250:	f001 fd39 	bl	8002cc6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001254:	4a0a      	ldr	r2, [pc, #40]	; (8001280 <HAL_InitTick+0x74>)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6013      	str	r3, [r2, #0]
 800125a:	e007      	b.n	800126c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800125c:	2301      	movs	r3, #1
 800125e:	73fb      	strb	r3, [r7, #15]
 8001260:	e004      	b.n	800126c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	73fb      	strb	r3, [r7, #15]
 8001266:	e001      	b.n	800126c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800126c:	7bfb      	ldrb	r3, [r7, #15]
}
 800126e:	4618      	mov	r0, r3
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	200000d0 	.word	0x200000d0
 800127c:	200000c8 	.word	0x200000c8
 8001280:	200000cc 	.word	0x200000cc

08001284 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001288:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <HAL_IncTick+0x20>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	461a      	mov	r2, r3
 800128e:	4b06      	ldr	r3, [pc, #24]	; (80012a8 <HAL_IncTick+0x24>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4413      	add	r3, r2
 8001294:	4a04      	ldr	r2, [pc, #16]	; (80012a8 <HAL_IncTick+0x24>)
 8001296:	6013      	str	r3, [r2, #0]
}
 8001298:	bf00      	nop
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	200000d0 	.word	0x200000d0
 80012a8:	200002f4 	.word	0x200002f4

080012ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  return uwTick;
 80012b0:	4b03      	ldr	r3, [pc, #12]	; (80012c0 <HAL_GetTick+0x14>)
 80012b2:	681b      	ldr	r3, [r3, #0]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	200002f4 	.word	0x200002f4

080012c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012cc:	f7ff ffee 	bl	80012ac <HAL_GetTick>
 80012d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012dc:	d005      	beq.n	80012ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80012de:	4b09      	ldr	r3, [pc, #36]	; (8001304 <HAL_Delay+0x40>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	461a      	mov	r2, r3
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	4413      	add	r3, r2
 80012e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012ea:	bf00      	nop
 80012ec:	f7ff ffde 	bl	80012ac <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	68fa      	ldr	r2, [r7, #12]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d8f7      	bhi.n	80012ec <HAL_Delay+0x28>
  {
  }
}
 80012fc:	bf00      	nop
 80012fe:	3710      	adds	r7, #16
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	200000d0 	.word	0x200000d0

08001308 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	431a      	orrs	r2, r3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	609a      	str	r2, [r3, #8]
}
 8001322:	bf00      	nop
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr

0800132e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800132e:	b480      	push	{r7}
 8001330:	b083      	sub	sp, #12
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
 8001336:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	431a      	orrs	r2, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	609a      	str	r2, [r3, #8]
}
 8001348:	bf00      	nop
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001364:	4618      	mov	r0, r3
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001370:	b480      	push	{r7}
 8001372:	b087      	sub	sp, #28
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	607a      	str	r2, [r7, #4]
 800137c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	3360      	adds	r3, #96	; 0x60
 8001382:	461a      	mov	r2, r3
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	4413      	add	r3, r2
 800138a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	4b08      	ldr	r3, [pc, #32]	; (80013b4 <LL_ADC_SetOffset+0x44>)
 8001392:	4013      	ands	r3, r2
 8001394:	687a      	ldr	r2, [r7, #4]
 8001396:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800139a:	683a      	ldr	r2, [r7, #0]
 800139c:	430a      	orrs	r2, r1
 800139e:	4313      	orrs	r3, r2
 80013a0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80013a8:	bf00      	nop
 80013aa:	371c      	adds	r7, #28
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	03fff000 	.word	0x03fff000

080013b8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	3360      	adds	r3, #96	; 0x60
 80013c6:	461a      	mov	r2, r3
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	4413      	add	r3, r2
 80013ce:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3714      	adds	r7, #20
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr

080013e4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b087      	sub	sp, #28
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	60b9      	str	r1, [r7, #8]
 80013ee:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	3360      	adds	r3, #96	; 0x60
 80013f4:	461a      	mov	r2, r3
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	4413      	add	r3, r2
 80013fc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	431a      	orrs	r2, r3
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800140e:	bf00      	nop
 8001410:	371c      	adds	r7, #28
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr

0800141a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800141a:	b480      	push	{r7}
 800141c:	b083      	sub	sp, #12
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	68db      	ldr	r3, [r3, #12]
 8001426:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800142a:	2b00      	cmp	r3, #0
 800142c:	d101      	bne.n	8001432 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800142e:	2301      	movs	r3, #1
 8001430:	e000      	b.n	8001434 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001432:	2300      	movs	r3, #0
}
 8001434:	4618      	mov	r0, r3
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001440:	b480      	push	{r7}
 8001442:	b087      	sub	sp, #28
 8001444:	af00      	add	r7, sp, #0
 8001446:	60f8      	str	r0, [r7, #12]
 8001448:	60b9      	str	r1, [r7, #8]
 800144a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	3330      	adds	r3, #48	; 0x30
 8001450:	461a      	mov	r2, r3
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	0a1b      	lsrs	r3, r3, #8
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	f003 030c 	and.w	r3, r3, #12
 800145c:	4413      	add	r3, r2
 800145e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	f003 031f 	and.w	r3, r3, #31
 800146a:	211f      	movs	r1, #31
 800146c:	fa01 f303 	lsl.w	r3, r1, r3
 8001470:	43db      	mvns	r3, r3
 8001472:	401a      	ands	r2, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	0e9b      	lsrs	r3, r3, #26
 8001478:	f003 011f 	and.w	r1, r3, #31
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	f003 031f 	and.w	r3, r3, #31
 8001482:	fa01 f303 	lsl.w	r3, r1, r3
 8001486:	431a      	orrs	r2, r3
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800148c:	bf00      	nop
 800148e:	371c      	adds	r7, #28
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d101      	bne.n	80014b0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80014ac:	2301      	movs	r3, #1
 80014ae:	e000      	b.n	80014b2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr

080014be <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80014be:	b480      	push	{r7}
 80014c0:	b087      	sub	sp, #28
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	60f8      	str	r0, [r7, #12]
 80014c6:	60b9      	str	r1, [r7, #8]
 80014c8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	3314      	adds	r3, #20
 80014ce:	461a      	mov	r2, r3
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	0e5b      	lsrs	r3, r3, #25
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	f003 0304 	and.w	r3, r3, #4
 80014da:	4413      	add	r3, r2
 80014dc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	0d1b      	lsrs	r3, r3, #20
 80014e6:	f003 031f 	and.w	r3, r3, #31
 80014ea:	2107      	movs	r1, #7
 80014ec:	fa01 f303 	lsl.w	r3, r1, r3
 80014f0:	43db      	mvns	r3, r3
 80014f2:	401a      	ands	r2, r3
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	0d1b      	lsrs	r3, r3, #20
 80014f8:	f003 031f 	and.w	r3, r3, #31
 80014fc:	6879      	ldr	r1, [r7, #4]
 80014fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001502:	431a      	orrs	r2, r3
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001508:	bf00      	nop
 800150a:	371c      	adds	r7, #28
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001514:	b480      	push	{r7}
 8001516:	b085      	sub	sp, #20
 8001518:	af00      	add	r7, sp, #0
 800151a:	60f8      	str	r0, [r7, #12]
 800151c:	60b9      	str	r1, [r7, #8]
 800151e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800152c:	43db      	mvns	r3, r3
 800152e:	401a      	ands	r2, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f003 0318 	and.w	r3, r3, #24
 8001536:	4908      	ldr	r1, [pc, #32]	; (8001558 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001538:	40d9      	lsrs	r1, r3
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	400b      	ands	r3, r1
 800153e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001542:	431a      	orrs	r2, r3
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800154a:	bf00      	nop
 800154c:	3714      	adds	r7, #20
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	0007ffff 	.word	0x0007ffff

0800155c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	f003 031f 	and.w	r3, r3, #31
}
 800156c:	4618      	mov	r0, r3
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001588:	4618      	mov	r0, r3
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80015a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015a8:	687a      	ldr	r2, [r7, #4]
 80015aa:	6093      	str	r3, [r2, #8]
}
 80015ac:	bf00      	nop
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80015c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80015cc:	d101      	bne.n	80015d2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80015ce:	2301      	movs	r3, #1
 80015d0:	e000      	b.n	80015d4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80015d2:	2300      	movs	r3, #0
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80015f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015f4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80015fc:	bf00      	nop
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001618:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800161c:	d101      	bne.n	8001622 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800161e:	2301      	movs	r3, #1
 8001620:	e000      	b.n	8001624 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001622:	2300      	movs	r3, #0
}
 8001624:	4618      	mov	r0, r3
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001640:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001644:	f043 0201 	orr.w	r2, r3, #1
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800164c:	bf00      	nop
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	f003 0301 	and.w	r3, r3, #1
 8001668:	2b01      	cmp	r3, #1
 800166a:	d101      	bne.n	8001670 <LL_ADC_IsEnabled+0x18>
 800166c:	2301      	movs	r3, #1
 800166e:	e000      	b.n	8001672 <LL_ADC_IsEnabled+0x1a>
 8001670:	2300      	movs	r3, #0
}
 8001672:	4618      	mov	r0, r3
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr

0800167e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800167e:	b480      	push	{r7}
 8001680:	b083      	sub	sp, #12
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800168e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001692:	f043 0204 	orr.w	r2, r3, #4
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800169a:	bf00      	nop
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr

080016a6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80016a6:	b480      	push	{r7}
 80016a8:	b083      	sub	sp, #12
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	f003 0304 	and.w	r3, r3, #4
 80016b6:	2b04      	cmp	r3, #4
 80016b8:	d101      	bne.n	80016be <LL_ADC_REG_IsConversionOngoing+0x18>
 80016ba:	2301      	movs	r3, #1
 80016bc:	e000      	b.n	80016c0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80016be:	2300      	movs	r3, #0
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	f003 0308 	and.w	r3, r3, #8
 80016dc:	2b08      	cmp	r3, #8
 80016de:	d101      	bne.n	80016e4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80016e0:	2301      	movs	r3, #1
 80016e2:	e000      	b.n	80016e6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	370c      	adds	r7, #12
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
	...

080016f4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80016f4:	b590      	push	{r4, r7, lr}
 80016f6:	b089      	sub	sp, #36	; 0x24
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016fc:	2300      	movs	r3, #0
 80016fe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001700:	2300      	movs	r3, #0
 8001702:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d101      	bne.n	800170e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e134      	b.n	8001978 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	691b      	ldr	r3, [r3, #16]
 8001712:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001718:	2b00      	cmp	r3, #0
 800171a:	d109      	bne.n	8001730 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f7fe ff4b 	bl	80005b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2200      	movs	r2, #0
 8001726:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2200      	movs	r2, #0
 800172c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff ff3f 	bl	80015b8 <LL_ADC_IsDeepPowerDownEnabled>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d004      	beq.n	800174a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff ff25 	bl	8001594 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4618      	mov	r0, r3
 8001750:	f7ff ff5a 	bl	8001608 <LL_ADC_IsInternalRegulatorEnabled>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d113      	bne.n	8001782 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff ff3e 	bl	80015e0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001764:	4b86      	ldr	r3, [pc, #536]	; (8001980 <HAL_ADC_Init+0x28c>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	099b      	lsrs	r3, r3, #6
 800176a:	4a86      	ldr	r2, [pc, #536]	; (8001984 <HAL_ADC_Init+0x290>)
 800176c:	fba2 2303 	umull	r2, r3, r2, r3
 8001770:	099b      	lsrs	r3, r3, #6
 8001772:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001774:	e002      	b.n	800177c <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	3b01      	subs	r3, #1
 800177a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d1f9      	bne.n	8001776 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff ff3e 	bl	8001608 <LL_ADC_IsInternalRegulatorEnabled>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d10d      	bne.n	80017ae <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001796:	f043 0210 	orr.w	r2, r3, #16
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017a2:	f043 0201 	orr.w	r2, r3, #1
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7ff ff77 	bl	80016a6 <LL_ADC_REG_IsConversionOngoing>
 80017b8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017be:	f003 0310 	and.w	r3, r3, #16
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	f040 80cf 	bne.w	8001966 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	f040 80cb 	bne.w	8001966 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017d4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80017d8:	f043 0202 	orr.w	r2, r3, #2
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff ff37 	bl	8001658 <LL_ADC_IsEnabled>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d115      	bne.n	800181c <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80017f0:	4865      	ldr	r0, [pc, #404]	; (8001988 <HAL_ADC_Init+0x294>)
 80017f2:	f7ff ff31 	bl	8001658 <LL_ADC_IsEnabled>
 80017f6:	4604      	mov	r4, r0
 80017f8:	4864      	ldr	r0, [pc, #400]	; (800198c <HAL_ADC_Init+0x298>)
 80017fa:	f7ff ff2d 	bl	8001658 <LL_ADC_IsEnabled>
 80017fe:	4603      	mov	r3, r0
 8001800:	431c      	orrs	r4, r3
 8001802:	4863      	ldr	r0, [pc, #396]	; (8001990 <HAL_ADC_Init+0x29c>)
 8001804:	f7ff ff28 	bl	8001658 <LL_ADC_IsEnabled>
 8001808:	4603      	mov	r3, r0
 800180a:	4323      	orrs	r3, r4
 800180c:	2b00      	cmp	r3, #0
 800180e:	d105      	bne.n	800181c <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	4619      	mov	r1, r3
 8001816:	485f      	ldr	r0, [pc, #380]	; (8001994 <HAL_ADC_Init+0x2a0>)
 8001818:	f7ff fd76 	bl	8001308 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	7e5b      	ldrb	r3, [r3, #25]
 8001820:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001826:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800182c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001832:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	f893 3020 	ldrb.w	r3, [r3, #32]
 800183a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800183c:	4313      	orrs	r3, r2
 800183e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001846:	2b01      	cmp	r3, #1
 8001848:	d106      	bne.n	8001858 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800184e:	3b01      	subs	r3, #1
 8001850:	045b      	lsls	r3, r3, #17
 8001852:	69ba      	ldr	r2, [r7, #24]
 8001854:	4313      	orrs	r3, r2
 8001856:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800185c:	2b00      	cmp	r3, #0
 800185e:	d009      	beq.n	8001874 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001864:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800186c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800186e:	69ba      	ldr	r2, [r7, #24]
 8001870:	4313      	orrs	r3, r2
 8001872:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	68da      	ldr	r2, [r3, #12]
 800187a:	4b47      	ldr	r3, [pc, #284]	; (8001998 <HAL_ADC_Init+0x2a4>)
 800187c:	4013      	ands	r3, r2
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	6812      	ldr	r2, [r2, #0]
 8001882:	69b9      	ldr	r1, [r7, #24]
 8001884:	430b      	orrs	r3, r1
 8001886:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff ff0a 	bl	80016a6 <LL_ADC_REG_IsConversionOngoing>
 8001892:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4618      	mov	r0, r3
 800189a:	f7ff ff17 	bl	80016cc <LL_ADC_INJ_IsConversionOngoing>
 800189e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d13d      	bne.n	8001922 <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d13a      	bne.n	8001922 <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80018b0:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80018b8:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80018ba:	4313      	orrs	r3, r2
 80018bc:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80018c8:	f023 0302 	bic.w	r3, r3, #2
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	6812      	ldr	r2, [r2, #0]
 80018d0:	69b9      	ldr	r1, [r7, #24]
 80018d2:	430b      	orrs	r3, r1
 80018d4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d118      	bne.n	8001912 <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	691b      	ldr	r3, [r3, #16]
 80018e6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80018ea:	f023 0304 	bic.w	r3, r3, #4
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80018f6:	4311      	orrs	r1, r2
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80018fc:	4311      	orrs	r1, r2
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001902:	430a      	orrs	r2, r1
 8001904:	431a      	orrs	r2, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f042 0201 	orr.w	r2, r2, #1
 800190e:	611a      	str	r2, [r3, #16]
 8001910:	e007      	b.n	8001922 <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	691a      	ldr	r2, [r3, #16]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f022 0201 	bic.w	r2, r2, #1
 8001920:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	691b      	ldr	r3, [r3, #16]
 8001926:	2b01      	cmp	r3, #1
 8001928:	d10c      	bne.n	8001944 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001930:	f023 010f 	bic.w	r1, r3, #15
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	69db      	ldr	r3, [r3, #28]
 8001938:	1e5a      	subs	r2, r3, #1
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	430a      	orrs	r2, r1
 8001940:	631a      	str	r2, [r3, #48]	; 0x30
 8001942:	e007      	b.n	8001954 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f022 020f 	bic.w	r2, r2, #15
 8001952:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001958:	f023 0303 	bic.w	r3, r3, #3
 800195c:	f043 0201 	orr.w	r2, r3, #1
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	655a      	str	r2, [r3, #84]	; 0x54
 8001964:	e007      	b.n	8001976 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800196a:	f043 0210 	orr.w	r2, r3, #16
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001976:	7ffb      	ldrb	r3, [r7, #31]
}
 8001978:	4618      	mov	r0, r3
 800197a:	3724      	adds	r7, #36	; 0x24
 800197c:	46bd      	mov	sp, r7
 800197e:	bd90      	pop	{r4, r7, pc}
 8001980:	200000c8 	.word	0x200000c8
 8001984:	053e2d63 	.word	0x053e2d63
 8001988:	50040000 	.word	0x50040000
 800198c:	50040100 	.word	0x50040100
 8001990:	50040200 	.word	0x50040200
 8001994:	50040300 	.word	0x50040300
 8001998:	fff0c007 	.word	0xfff0c007

0800199c <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b086      	sub	sp, #24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80019a4:	4893      	ldr	r0, [pc, #588]	; (8001bf4 <HAL_ADC_Start_IT+0x258>)
 80019a6:	f7ff fdd9 	bl	800155c <LL_ADC_GetMultimode>
 80019aa:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff fe78 	bl	80016a6 <LL_ADC_REG_IsConversionOngoing>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	f040 8112 	bne.w	8001be2 <HAL_ADC_Start_IT+0x246>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d101      	bne.n	80019cc <HAL_ADC_Start_IT+0x30>
 80019c8:	2302      	movs	r3, #2
 80019ca:	e10f      	b.n	8001bec <HAL_ADC_Start_IT+0x250>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2201      	movs	r2, #1
 80019d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f000 ff3d 	bl	8002854 <ADC_Enable>
 80019da:	4603      	mov	r3, r0
 80019dc:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80019de:	7dfb      	ldrb	r3, [r7, #23]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	f040 80f9 	bne.w	8001bd8 <HAL_ADC_Start_IT+0x23c>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019ea:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80019ee:	f023 0301 	bic.w	r3, r3, #1
 80019f2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a7e      	ldr	r2, [pc, #504]	; (8001bf8 <HAL_ADC_Start_IT+0x25c>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d002      	beq.n	8001a0a <HAL_ADC_Start_IT+0x6e>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	e000      	b.n	8001a0c <HAL_ADC_Start_IT+0x70>
 8001a0a:	4b7c      	ldr	r3, [pc, #496]	; (8001bfc <HAL_ADC_Start_IT+0x260>)
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	6812      	ldr	r2, [r2, #0]
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d002      	beq.n	8001a1a <HAL_ADC_Start_IT+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d105      	bne.n	8001a26 <HAL_ADC_Start_IT+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a1e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d006      	beq.n	8001a40 <HAL_ADC_Start_IT+0xa4>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a36:	f023 0206 	bic.w	r2, r3, #6
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	659a      	str	r2, [r3, #88]	; 0x58
 8001a3e:	e002      	b.n	8001a46 <HAL_ADC_Start_IT+0xaa>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2200      	movs	r2, #0
 8001a44:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	221c      	movs	r2, #28
 8001a4c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	685a      	ldr	r2, [r3, #4]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f022 021c 	bic.w	r2, r2, #28
 8001a64:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	695b      	ldr	r3, [r3, #20]
 8001a6a:	2b08      	cmp	r3, #8
 8001a6c:	d108      	bne.n	8001a80 <HAL_ADC_Start_IT+0xe4>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	685a      	ldr	r2, [r3, #4]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f042 0208 	orr.w	r2, r2, #8
 8001a7c:	605a      	str	r2, [r3, #4]
          break;
 8001a7e:	e008      	b.n	8001a92 <HAL_ADC_Start_IT+0xf6>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	685a      	ldr	r2, [r3, #4]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f042 0204 	orr.w	r2, r2, #4
 8001a8e:	605a      	str	r2, [r3, #4]
          break;
 8001a90:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d107      	bne.n	8001aaa <HAL_ADC_Start_IT+0x10e>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	685a      	ldr	r2, [r3, #4]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f042 0210 	orr.w	r2, r2, #16
 8001aa8:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a52      	ldr	r2, [pc, #328]	; (8001bf8 <HAL_ADC_Start_IT+0x25c>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d002      	beq.n	8001aba <HAL_ADC_Start_IT+0x11e>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	e000      	b.n	8001abc <HAL_ADC_Start_IT+0x120>
 8001aba:	4b50      	ldr	r3, [pc, #320]	; (8001bfc <HAL_ADC_Start_IT+0x260>)
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	6812      	ldr	r2, [r2, #0]
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d008      	beq.n	8001ad6 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d005      	beq.n	8001ad6 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	2b05      	cmp	r3, #5
 8001ace:	d002      	beq.n	8001ad6 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	2b09      	cmp	r3, #9
 8001ad4:	d13b      	bne.n	8001b4e <HAL_ADC_Start_IT+0x1b2>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d02d      	beq.n	8001b40 <HAL_ADC_Start_IT+0x1a4>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ae8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001aec:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	655a      	str	r2, [r3, #84]	; 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	695b      	ldr	r3, [r3, #20]
 8001af8:	2b08      	cmp	r3, #8
 8001afa:	d110      	bne.n	8001b1e <HAL_ADC_Start_IT+0x182>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	685a      	ldr	r2, [r3, #4]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f022 0220 	bic.w	r2, r2, #32
 8001b0a:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	685a      	ldr	r2, [r3, #4]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b1a:	605a      	str	r2, [r3, #4]
              break;
 8001b1c:	e011      	b.n	8001b42 <HAL_ADC_Start_IT+0x1a6>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	685a      	ldr	r2, [r3, #4]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b2c:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	685a      	ldr	r2, [r3, #4]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f042 0220 	orr.w	r2, r2, #32
 8001b3c:	605a      	str	r2, [r3, #4]
              break;
 8001b3e:	e000      	b.n	8001b42 <HAL_ADC_Start_IT+0x1a6>
          }
        }
 8001b40:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff fd99 	bl	800167e <LL_ADC_REG_StartConversion>
 8001b4c:	e04d      	b.n	8001bea <HAL_ADC_Start_IT+0x24e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b52:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a26      	ldr	r2, [pc, #152]	; (8001bf8 <HAL_ADC_Start_IT+0x25c>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d002      	beq.n	8001b6a <HAL_ADC_Start_IT+0x1ce>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	e000      	b.n	8001b6c <HAL_ADC_Start_IT+0x1d0>
 8001b6a:	4b24      	ldr	r3, [pc, #144]	; (8001bfc <HAL_ADC_Start_IT+0x260>)
 8001b6c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d036      	beq.n	8001be8 <HAL_ADC_Start_IT+0x24c>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b7e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b82:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	655a      	str	r2, [r3, #84]	; 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	695b      	ldr	r3, [r3, #20]
 8001b8e:	2b08      	cmp	r3, #8
 8001b90:	d110      	bne.n	8001bb4 <HAL_ADC_Start_IT+0x218>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	685a      	ldr	r2, [r3, #4]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f022 0220 	bic.w	r2, r2, #32
 8001ba0:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	685a      	ldr	r2, [r3, #4]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001bb0:	605a      	str	r2, [r3, #4]
              break;
 8001bb2:	e01a      	b.n	8001bea <HAL_ADC_Start_IT+0x24e>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	685a      	ldr	r2, [r3, #4]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001bc2:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	685a      	ldr	r2, [r3, #4]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f042 0220 	orr.w	r2, r2, #32
 8001bd2:	605a      	str	r2, [r3, #4]
              break;
 8001bd4:	bf00      	nop
 8001bd6:	e008      	b.n	8001bea <HAL_ADC_Start_IT+0x24e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001be0:	e003      	b.n	8001bea <HAL_ADC_Start_IT+0x24e>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001be2:	2302      	movs	r3, #2
 8001be4:	75fb      	strb	r3, [r7, #23]
 8001be6:	e000      	b.n	8001bea <HAL_ADC_Start_IT+0x24e>
        }
 8001be8:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 8001bea:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3718      	adds	r7, #24
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	50040300 	.word	0x50040300
 8001bf8:	50040100 	.word	0x50040100
 8001bfc:	50040000 	.word	0x50040000

08001c00 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
	...

08001c1c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b08a      	sub	sp, #40	; 0x28
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001c24:	2300      	movs	r3, #0
 8001c26:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c38:	4882      	ldr	r0, [pc, #520]	; (8001e44 <HAL_ADC_IRQHandler+0x228>)
 8001c3a:	f7ff fc8f 	bl	800155c <LL_ADC_GetMultimode>
 8001c3e:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	f003 0302 	and.w	r3, r3, #2
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d017      	beq.n	8001c7a <HAL_ADC_IRQHandler+0x5e>
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	f003 0302 	and.w	r3, r3, #2
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d012      	beq.n	8001c7a <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c58:	f003 0310 	and.w	r3, r3, #16
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d105      	bne.n	8001c6c <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c64:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f000 fe99 	bl	80029a4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2202      	movs	r2, #2
 8001c78:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	f003 0304 	and.w	r3, r3, #4
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d004      	beq.n	8001c8e <HAL_ADC_IRQHandler+0x72>
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	f003 0304 	and.w	r3, r3, #4
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d10a      	bne.n	8001ca4 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	f000 8083 	beq.w	8001da0 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	f003 0308 	and.w	r3, r3, #8
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d07d      	beq.n	8001da0 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ca8:	f003 0310 	and.w	r3, r3, #16
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d105      	bne.n	8001cbc <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cb4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff fbaa 	bl	800141a <LL_ADC_REG_IsTriggerSourceSWStart>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d062      	beq.n	8001d92 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a5d      	ldr	r2, [pc, #372]	; (8001e48 <HAL_ADC_IRQHandler+0x22c>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d002      	beq.n	8001cdc <HAL_ADC_IRQHandler+0xc0>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	e000      	b.n	8001cde <HAL_ADC_IRQHandler+0xc2>
 8001cdc:	4b5b      	ldr	r3, [pc, #364]	; (8001e4c <HAL_ADC_IRQHandler+0x230>)
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	6812      	ldr	r2, [r2, #0]
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d008      	beq.n	8001cf8 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d005      	beq.n	8001cf8 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	2b05      	cmp	r3, #5
 8001cf0:	d002      	beq.n	8001cf8 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	2b09      	cmp	r3, #9
 8001cf6:	d104      	bne.n	8001d02 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	623b      	str	r3, [r7, #32]
 8001d00:	e00c      	b.n	8001d1c <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a50      	ldr	r2, [pc, #320]	; (8001e48 <HAL_ADC_IRQHandler+0x22c>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d002      	beq.n	8001d12 <HAL_ADC_IRQHandler+0xf6>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	e000      	b.n	8001d14 <HAL_ADC_IRQHandler+0xf8>
 8001d12:	4b4e      	ldr	r3, [pc, #312]	; (8001e4c <HAL_ADC_IRQHandler+0x230>)
 8001d14:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001d1c:	6a3b      	ldr	r3, [r7, #32]
 8001d1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d135      	bne.n	8001d92 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0308 	and.w	r3, r3, #8
 8001d30:	2b08      	cmp	r3, #8
 8001d32:	d12e      	bne.n	8001d92 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff fcb4 	bl	80016a6 <LL_ADC_REG_IsConversionOngoing>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d11a      	bne.n	8001d7a <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	685a      	ldr	r2, [r3, #4]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f022 020c 	bic.w	r2, r2, #12
 8001d52:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d58:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d112      	bne.n	8001d92 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d70:	f043 0201 	orr.w	r2, r3, #1
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	655a      	str	r2, [r3, #84]	; 0x54
 8001d78:	e00b      	b.n	8001d92 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d7e:	f043 0210 	orr.w	r2, r3, #16
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d8a:	f043 0201 	orr.w	r2, r3, #1
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f7fe fd38 	bl	8000808 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	220c      	movs	r2, #12
 8001d9e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	f003 0320 	and.w	r3, r3, #32
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d004      	beq.n	8001db4 <HAL_ADC_IRQHandler+0x198>
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	f003 0320 	and.w	r3, r3, #32
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d10b      	bne.n	8001dcc <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	f000 809f 	beq.w	8001efe <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	f000 8099 	beq.w	8001efe <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dd0:	f003 0310 	and.w	r3, r3, #16
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d105      	bne.n	8001de4 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ddc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7ff fb55 	bl	8001498 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001dee:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff fb10 	bl	800141a <LL_ADC_REG_IsTriggerSourceSWStart>
 8001dfa:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a11      	ldr	r2, [pc, #68]	; (8001e48 <HAL_ADC_IRQHandler+0x22c>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d002      	beq.n	8001e0c <HAL_ADC_IRQHandler+0x1f0>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	e000      	b.n	8001e0e <HAL_ADC_IRQHandler+0x1f2>
 8001e0c:	4b0f      	ldr	r3, [pc, #60]	; (8001e4c <HAL_ADC_IRQHandler+0x230>)
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	6812      	ldr	r2, [r2, #0]
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d008      	beq.n	8001e28 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d005      	beq.n	8001e28 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	2b06      	cmp	r3, #6
 8001e20:	d002      	beq.n	8001e28 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	2b07      	cmp	r3, #7
 8001e26:	d104      	bne.n	8001e32 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	623b      	str	r3, [r7, #32]
 8001e30:	e013      	b.n	8001e5a <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a04      	ldr	r2, [pc, #16]	; (8001e48 <HAL_ADC_IRQHandler+0x22c>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d009      	beq.n	8001e50 <HAL_ADC_IRQHandler+0x234>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	e007      	b.n	8001e52 <HAL_ADC_IRQHandler+0x236>
 8001e42:	bf00      	nop
 8001e44:	50040300 	.word	0x50040300
 8001e48:	50040100 	.word	0x50040100
 8001e4c:	50040000 	.word	0x50040000
 8001e50:	4b7d      	ldr	r3, [pc, #500]	; (8002048 <HAL_ADC_IRQHandler+0x42c>)
 8001e52:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d10c      	bne.n	8001e7a <HAL_ADC_IRQHandler+0x25e>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8001e60:	6a3b      	ldr	r3, [r7, #32]
 8001e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d142      	bne.n	8001ef0 <HAL_ADC_IRQHandler+0x2d4>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d03f      	beq.n	8001ef0 <HAL_ADC_IRQHandler+0x2d4>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 8001e70:	6a3b      	ldr	r3, [r7, #32]
 8001e72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d13a      	bne.n	8001ef0 <HAL_ADC_IRQHandler+0x2d4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e84:	2b40      	cmp	r3, #64	; 0x40
 8001e86:	d133      	bne.n	8001ef0 <HAL_ADC_IRQHandler+0x2d4>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001e88:	6a3b      	ldr	r3, [r7, #32]
 8001e8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d12e      	bne.n	8001ef0 <HAL_ADC_IRQHandler+0x2d4>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7ff fc18 	bl	80016cc <LL_ADC_INJ_IsConversionOngoing>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d11a      	bne.n	8001ed8 <HAL_ADC_IRQHandler+0x2bc>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	685a      	ldr	r2, [r3, #4]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001eb0:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eb6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d112      	bne.n	8001ef0 <HAL_ADC_IRQHandler+0x2d4>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ece:	f043 0201 	orr.w	r2, r3, #1
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	655a      	str	r2, [r3, #84]	; 0x54
 8001ed6:	e00b      	b.n	8001ef0 <HAL_ADC_IRQHandler+0x2d4>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001edc:	f043 0210 	orr.w	r2, r3, #16
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee8:	f043 0201 	orr.w	r2, r3, #1
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f000 fd2f 	bl	8002954 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	2260      	movs	r2, #96	; 0x60
 8001efc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d011      	beq.n	8001f2c <HAL_ADC_IRQHandler+0x310>
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d00c      	beq.n	8001f2c <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f16:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f000 f896 	bl	8002050 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2280      	movs	r2, #128	; 0x80
 8001f2a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d012      	beq.n	8001f5c <HAL_ADC_IRQHandler+0x340>
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d00d      	beq.n	8001f5c <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f44:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f000 fd15 	bl	800297c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f5a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d012      	beq.n	8001f8c <HAL_ADC_IRQHandler+0x370>
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d00d      	beq.n	8001f8c <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f74:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f000 fd07 	bl	8002990 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f8a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	f003 0310 	and.w	r3, r3, #16
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d036      	beq.n	8002004 <HAL_ADC_IRQHandler+0x3e8>
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	f003 0310 	and.w	r3, r3, #16
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d031      	beq.n	8002004 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d102      	bne.n	8001fae <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	627b      	str	r3, [r7, #36]	; 0x24
 8001fac:	e014      	b.n	8001fd8 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d008      	beq.n	8001fc6 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001fb4:	4825      	ldr	r0, [pc, #148]	; (800204c <HAL_ADC_IRQHandler+0x430>)
 8001fb6:	f7ff fadf 	bl	8001578 <LL_ADC_GetMultiDMATransfer>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d00b      	beq.n	8001fd8 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	627b      	str	r3, [r7, #36]	; 0x24
 8001fc4:	e008      	b.n	8001fd8 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	f003 0301 	and.w	r3, r3, #1
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8001fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d10e      	bne.n	8001ffc <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fe2:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fee:	f043 0202 	orr.w	r2, r3, #2
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f000 f834 	bl	8002064 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2210      	movs	r2, #16
 8002002:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800200a:	2b00      	cmp	r3, #0
 800200c:	d018      	beq.n	8002040 <HAL_ADC_IRQHandler+0x424>
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002014:	2b00      	cmp	r3, #0
 8002016:	d013      	beq.n	8002040 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800201c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002028:	f043 0208 	orr.w	r2, r3, #8
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002038:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f000 fc94 	bl	8002968 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002040:	bf00      	nop
 8002042:	3728      	adds	r7, #40	; 0x28
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	50040000 	.word	0x50040000
 800204c:	50040300 	.word	0x50040300

08002050 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002058:	bf00      	nop
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800206c:	bf00      	nop
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b0b6      	sub	sp, #216	; 0xd8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002082:	2300      	movs	r3, #0
 8002084:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002088:	2300      	movs	r3, #0
 800208a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002092:	2b01      	cmp	r3, #1
 8002094:	d101      	bne.n	800209a <HAL_ADC_ConfigChannel+0x22>
 8002096:	2302      	movs	r3, #2
 8002098:	e3c6      	b.n	8002828 <HAL_ADC_ConfigChannel+0x7b0>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2201      	movs	r2, #1
 800209e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7ff fafd 	bl	80016a6 <LL_ADC_REG_IsConversionOngoing>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	f040 83a7 	bne.w	8002802 <HAL_ADC_ConfigChannel+0x78a>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	2b05      	cmp	r3, #5
 80020ba:	d824      	bhi.n	8002106 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	3b02      	subs	r3, #2
 80020c2:	2b03      	cmp	r3, #3
 80020c4:	d81b      	bhi.n	80020fe <HAL_ADC_ConfigChannel+0x86>
 80020c6:	a201      	add	r2, pc, #4	; (adr r2, 80020cc <HAL_ADC_ConfigChannel+0x54>)
 80020c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020cc:	080020dd 	.word	0x080020dd
 80020d0:	080020e5 	.word	0x080020e5
 80020d4:	080020ed 	.word	0x080020ed
 80020d8:	080020f5 	.word	0x080020f5
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	220c      	movs	r2, #12
 80020e0:	605a      	str	r2, [r3, #4]
          break;
 80020e2:	e011      	b.n	8002108 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	2212      	movs	r2, #18
 80020e8:	605a      	str	r2, [r3, #4]
          break;
 80020ea:	e00d      	b.n	8002108 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	2218      	movs	r2, #24
 80020f0:	605a      	str	r2, [r3, #4]
          break;
 80020f2:	e009      	b.n	8002108 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020fa:	605a      	str	r2, [r3, #4]
          break;
 80020fc:	e004      	b.n	8002108 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	2206      	movs	r2, #6
 8002102:	605a      	str	r2, [r3, #4]
          break;
 8002104:	e000      	b.n	8002108 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002106:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6818      	ldr	r0, [r3, #0]
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	6859      	ldr	r1, [r3, #4]
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	461a      	mov	r2, r3
 8002116:	f7ff f993 	bl	8001440 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4618      	mov	r0, r3
 8002120:	f7ff fac1 	bl	80016a6 <LL_ADC_REG_IsConversionOngoing>
 8002124:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4618      	mov	r0, r3
 800212e:	f7ff facd 	bl	80016cc <LL_ADC_INJ_IsConversionOngoing>
 8002132:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002136:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800213a:	2b00      	cmp	r3, #0
 800213c:	f040 81a6 	bne.w	800248c <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002140:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002144:	2b00      	cmp	r3, #0
 8002146:	f040 81a1 	bne.w	800248c <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6818      	ldr	r0, [r3, #0]
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	6819      	ldr	r1, [r3, #0]
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	461a      	mov	r2, r3
 8002158:	f7ff f9b1 	bl	80014be <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	695a      	ldr	r2, [r3, #20]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	08db      	lsrs	r3, r3, #3
 8002168:	f003 0303 	and.w	r3, r3, #3
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	fa02 f303 	lsl.w	r3, r2, r3
 8002172:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	2b04      	cmp	r3, #4
 800217c:	d00a      	beq.n	8002194 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6818      	ldr	r0, [r3, #0]
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	6919      	ldr	r1, [r3, #16]
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800218e:	f7ff f8ef 	bl	8001370 <LL_ADC_SetOffset>
 8002192:	e17b      	b.n	800248c <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2100      	movs	r1, #0
 800219a:	4618      	mov	r0, r3
 800219c:	f7ff f90c 	bl	80013b8 <LL_ADC_GetOffsetChannel>
 80021a0:	4603      	mov	r3, r0
 80021a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d10a      	bne.n	80021c0 <HAL_ADC_ConfigChannel+0x148>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	2100      	movs	r1, #0
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7ff f901 	bl	80013b8 <LL_ADC_GetOffsetChannel>
 80021b6:	4603      	mov	r3, r0
 80021b8:	0e9b      	lsrs	r3, r3, #26
 80021ba:	f003 021f 	and.w	r2, r3, #31
 80021be:	e01e      	b.n	80021fe <HAL_ADC_ConfigChannel+0x186>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2100      	movs	r1, #0
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7ff f8f6 	bl	80013b8 <LL_ADC_GetOffsetChannel>
 80021cc:	4603      	mov	r3, r0
 80021ce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80021d6:	fa93 f3a3 	rbit	r3, r3
 80021da:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80021de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80021e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80021e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d101      	bne.n	80021f2 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80021ee:	2320      	movs	r3, #32
 80021f0:	e004      	b.n	80021fc <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80021f2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80021f6:	fab3 f383 	clz	r3, r3
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002206:	2b00      	cmp	r3, #0
 8002208:	d105      	bne.n	8002216 <HAL_ADC_ConfigChannel+0x19e>
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	0e9b      	lsrs	r3, r3, #26
 8002210:	f003 031f 	and.w	r3, r3, #31
 8002214:	e018      	b.n	8002248 <HAL_ADC_ConfigChannel+0x1d0>
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800221e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002222:	fa93 f3a3 	rbit	r3, r3
 8002226:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800222a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800222e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002232:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002236:	2b00      	cmp	r3, #0
 8002238:	d101      	bne.n	800223e <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800223a:	2320      	movs	r3, #32
 800223c:	e004      	b.n	8002248 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800223e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002242:	fab3 f383 	clz	r3, r3
 8002246:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002248:	429a      	cmp	r2, r3
 800224a:	d106      	bne.n	800225a <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2200      	movs	r2, #0
 8002252:	2100      	movs	r1, #0
 8002254:	4618      	mov	r0, r3
 8002256:	f7ff f8c5 	bl	80013e4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2101      	movs	r1, #1
 8002260:	4618      	mov	r0, r3
 8002262:	f7ff f8a9 	bl	80013b8 <LL_ADC_GetOffsetChannel>
 8002266:	4603      	mov	r3, r0
 8002268:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800226c:	2b00      	cmp	r3, #0
 800226e:	d10a      	bne.n	8002286 <HAL_ADC_ConfigChannel+0x20e>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2101      	movs	r1, #1
 8002276:	4618      	mov	r0, r3
 8002278:	f7ff f89e 	bl	80013b8 <LL_ADC_GetOffsetChannel>
 800227c:	4603      	mov	r3, r0
 800227e:	0e9b      	lsrs	r3, r3, #26
 8002280:	f003 021f 	and.w	r2, r3, #31
 8002284:	e01e      	b.n	80022c4 <HAL_ADC_ConfigChannel+0x24c>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2101      	movs	r1, #1
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff f893 	bl	80013b8 <LL_ADC_GetOffsetChannel>
 8002292:	4603      	mov	r3, r0
 8002294:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002298:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800229c:	fa93 f3a3 	rbit	r3, r3
 80022a0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80022a4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80022a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80022ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d101      	bne.n	80022b8 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80022b4:	2320      	movs	r3, #32
 80022b6:	e004      	b.n	80022c2 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80022b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80022bc:	fab3 f383 	clz	r3, r3
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d105      	bne.n	80022dc <HAL_ADC_ConfigChannel+0x264>
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	0e9b      	lsrs	r3, r3, #26
 80022d6:	f003 031f 	and.w	r3, r3, #31
 80022da:	e018      	b.n	800230e <HAL_ADC_ConfigChannel+0x296>
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80022e8:	fa93 f3a3 	rbit	r3, r3
 80022ec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80022f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80022f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80022f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d101      	bne.n	8002304 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002300:	2320      	movs	r3, #32
 8002302:	e004      	b.n	800230e <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002304:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002308:	fab3 f383 	clz	r3, r3
 800230c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800230e:	429a      	cmp	r2, r3
 8002310:	d106      	bne.n	8002320 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	2200      	movs	r2, #0
 8002318:	2101      	movs	r1, #1
 800231a:	4618      	mov	r0, r3
 800231c:	f7ff f862 	bl	80013e4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2102      	movs	r1, #2
 8002326:	4618      	mov	r0, r3
 8002328:	f7ff f846 	bl	80013b8 <LL_ADC_GetOffsetChannel>
 800232c:	4603      	mov	r3, r0
 800232e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002332:	2b00      	cmp	r3, #0
 8002334:	d10a      	bne.n	800234c <HAL_ADC_ConfigChannel+0x2d4>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2102      	movs	r1, #2
 800233c:	4618      	mov	r0, r3
 800233e:	f7ff f83b 	bl	80013b8 <LL_ADC_GetOffsetChannel>
 8002342:	4603      	mov	r3, r0
 8002344:	0e9b      	lsrs	r3, r3, #26
 8002346:	f003 021f 	and.w	r2, r3, #31
 800234a:	e01e      	b.n	800238a <HAL_ADC_ConfigChannel+0x312>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2102      	movs	r1, #2
 8002352:	4618      	mov	r0, r3
 8002354:	f7ff f830 	bl	80013b8 <LL_ADC_GetOffsetChannel>
 8002358:	4603      	mov	r3, r0
 800235a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002362:	fa93 f3a3 	rbit	r3, r3
 8002366:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800236a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800236e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002372:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002376:	2b00      	cmp	r3, #0
 8002378:	d101      	bne.n	800237e <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800237a:	2320      	movs	r3, #32
 800237c:	e004      	b.n	8002388 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800237e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002382:	fab3 f383 	clz	r3, r3
 8002386:	b2db      	uxtb	r3, r3
 8002388:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002392:	2b00      	cmp	r3, #0
 8002394:	d105      	bne.n	80023a2 <HAL_ADC_ConfigChannel+0x32a>
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	0e9b      	lsrs	r3, r3, #26
 800239c:	f003 031f 	and.w	r3, r3, #31
 80023a0:	e016      	b.n	80023d0 <HAL_ADC_ConfigChannel+0x358>
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80023ae:	fa93 f3a3 	rbit	r3, r3
 80023b2:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80023b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80023b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80023ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d101      	bne.n	80023c6 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80023c2:	2320      	movs	r3, #32
 80023c4:	e004      	b.n	80023d0 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80023c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023ca:	fab3 f383 	clz	r3, r3
 80023ce:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d106      	bne.n	80023e2 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2200      	movs	r2, #0
 80023da:	2102      	movs	r1, #2
 80023dc:	4618      	mov	r0, r3
 80023de:	f7ff f801 	bl	80013e4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2103      	movs	r1, #3
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7fe ffe5 	bl	80013b8 <LL_ADC_GetOffsetChannel>
 80023ee:	4603      	mov	r3, r0
 80023f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d10a      	bne.n	800240e <HAL_ADC_ConfigChannel+0x396>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2103      	movs	r1, #3
 80023fe:	4618      	mov	r0, r3
 8002400:	f7fe ffda 	bl	80013b8 <LL_ADC_GetOffsetChannel>
 8002404:	4603      	mov	r3, r0
 8002406:	0e9b      	lsrs	r3, r3, #26
 8002408:	f003 021f 	and.w	r2, r3, #31
 800240c:	e017      	b.n	800243e <HAL_ADC_ConfigChannel+0x3c6>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2103      	movs	r1, #3
 8002414:	4618      	mov	r0, r3
 8002416:	f7fe ffcf 	bl	80013b8 <LL_ADC_GetOffsetChannel>
 800241a:	4603      	mov	r3, r0
 800241c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002420:	fa93 f3a3 	rbit	r3, r3
 8002424:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002426:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002428:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800242a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800242c:	2b00      	cmp	r3, #0
 800242e:	d101      	bne.n	8002434 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002430:	2320      	movs	r3, #32
 8002432:	e003      	b.n	800243c <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002434:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002436:	fab3 f383 	clz	r3, r3
 800243a:	b2db      	uxtb	r3, r3
 800243c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002446:	2b00      	cmp	r3, #0
 8002448:	d105      	bne.n	8002456 <HAL_ADC_ConfigChannel+0x3de>
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	0e9b      	lsrs	r3, r3, #26
 8002450:	f003 031f 	and.w	r3, r3, #31
 8002454:	e011      	b.n	800247a <HAL_ADC_ConfigChannel+0x402>
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800245e:	fa93 f3a3 	rbit	r3, r3
 8002462:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002464:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002466:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002468:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800246a:	2b00      	cmp	r3, #0
 800246c:	d101      	bne.n	8002472 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800246e:	2320      	movs	r3, #32
 8002470:	e003      	b.n	800247a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002472:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002474:	fab3 f383 	clz	r3, r3
 8002478:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800247a:	429a      	cmp	r2, r3
 800247c:	d106      	bne.n	800248c <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2200      	movs	r2, #0
 8002484:	2103      	movs	r1, #3
 8002486:	4618      	mov	r0, r3
 8002488:	f7fe ffac 	bl	80013e4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4618      	mov	r0, r3
 8002492:	f7ff f8e1 	bl	8001658 <LL_ADC_IsEnabled>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	f040 813f 	bne.w	800271c <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6818      	ldr	r0, [r3, #0]
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	6819      	ldr	r1, [r3, #0]
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	461a      	mov	r2, r3
 80024ac:	f7ff f832 	bl	8001514 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	4a8e      	ldr	r2, [pc, #568]	; (80026f0 <HAL_ADC_ConfigChannel+0x678>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	f040 8130 	bne.w	800271c <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d10b      	bne.n	80024e4 <HAL_ADC_ConfigChannel+0x46c>
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	0e9b      	lsrs	r3, r3, #26
 80024d2:	3301      	adds	r3, #1
 80024d4:	f003 031f 	and.w	r3, r3, #31
 80024d8:	2b09      	cmp	r3, #9
 80024da:	bf94      	ite	ls
 80024dc:	2301      	movls	r3, #1
 80024de:	2300      	movhi	r3, #0
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	e019      	b.n	8002518 <HAL_ADC_ConfigChannel+0x4a0>
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024ec:	fa93 f3a3 	rbit	r3, r3
 80024f0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80024f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024f4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80024f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d101      	bne.n	8002500 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80024fc:	2320      	movs	r3, #32
 80024fe:	e003      	b.n	8002508 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002500:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002502:	fab3 f383 	clz	r3, r3
 8002506:	b2db      	uxtb	r3, r3
 8002508:	3301      	adds	r3, #1
 800250a:	f003 031f 	and.w	r3, r3, #31
 800250e:	2b09      	cmp	r3, #9
 8002510:	bf94      	ite	ls
 8002512:	2301      	movls	r3, #1
 8002514:	2300      	movhi	r3, #0
 8002516:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002518:	2b00      	cmp	r3, #0
 800251a:	d079      	beq.n	8002610 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002524:	2b00      	cmp	r3, #0
 8002526:	d107      	bne.n	8002538 <HAL_ADC_ConfigChannel+0x4c0>
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	0e9b      	lsrs	r3, r3, #26
 800252e:	3301      	adds	r3, #1
 8002530:	069b      	lsls	r3, r3, #26
 8002532:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002536:	e015      	b.n	8002564 <HAL_ADC_ConfigChannel+0x4ec>
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800253e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002540:	fa93 f3a3 	rbit	r3, r3
 8002544:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002546:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002548:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800254a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800254c:	2b00      	cmp	r3, #0
 800254e:	d101      	bne.n	8002554 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002550:	2320      	movs	r3, #32
 8002552:	e003      	b.n	800255c <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002554:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002556:	fab3 f383 	clz	r3, r3
 800255a:	b2db      	uxtb	r3, r3
 800255c:	3301      	adds	r3, #1
 800255e:	069b      	lsls	r3, r3, #26
 8002560:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800256c:	2b00      	cmp	r3, #0
 800256e:	d109      	bne.n	8002584 <HAL_ADC_ConfigChannel+0x50c>
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	0e9b      	lsrs	r3, r3, #26
 8002576:	3301      	adds	r3, #1
 8002578:	f003 031f 	and.w	r3, r3, #31
 800257c:	2101      	movs	r1, #1
 800257e:	fa01 f303 	lsl.w	r3, r1, r3
 8002582:	e017      	b.n	80025b4 <HAL_ADC_ConfigChannel+0x53c>
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800258a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800258c:	fa93 f3a3 	rbit	r3, r3
 8002590:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002592:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002594:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002596:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002598:	2b00      	cmp	r3, #0
 800259a:	d101      	bne.n	80025a0 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 800259c:	2320      	movs	r3, #32
 800259e:	e003      	b.n	80025a8 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80025a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025a2:	fab3 f383 	clz	r3, r3
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	3301      	adds	r3, #1
 80025aa:	f003 031f 	and.w	r3, r3, #31
 80025ae:	2101      	movs	r1, #1
 80025b0:	fa01 f303 	lsl.w	r3, r1, r3
 80025b4:	ea42 0103 	orr.w	r1, r2, r3
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d10a      	bne.n	80025da <HAL_ADC_ConfigChannel+0x562>
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	0e9b      	lsrs	r3, r3, #26
 80025ca:	3301      	adds	r3, #1
 80025cc:	f003 021f 	and.w	r2, r3, #31
 80025d0:	4613      	mov	r3, r2
 80025d2:	005b      	lsls	r3, r3, #1
 80025d4:	4413      	add	r3, r2
 80025d6:	051b      	lsls	r3, r3, #20
 80025d8:	e018      	b.n	800260c <HAL_ADC_ConfigChannel+0x594>
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025e2:	fa93 f3a3 	rbit	r3, r3
 80025e6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80025e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80025ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d101      	bne.n	80025f6 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80025f2:	2320      	movs	r3, #32
 80025f4:	e003      	b.n	80025fe <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80025f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025f8:	fab3 f383 	clz	r3, r3
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	3301      	adds	r3, #1
 8002600:	f003 021f 	and.w	r2, r3, #31
 8002604:	4613      	mov	r3, r2
 8002606:	005b      	lsls	r3, r3, #1
 8002608:	4413      	add	r3, r2
 800260a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800260c:	430b      	orrs	r3, r1
 800260e:	e080      	b.n	8002712 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002618:	2b00      	cmp	r3, #0
 800261a:	d107      	bne.n	800262c <HAL_ADC_ConfigChannel+0x5b4>
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	0e9b      	lsrs	r3, r3, #26
 8002622:	3301      	adds	r3, #1
 8002624:	069b      	lsls	r3, r3, #26
 8002626:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800262a:	e015      	b.n	8002658 <HAL_ADC_ConfigChannel+0x5e0>
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002634:	fa93 f3a3 	rbit	r3, r3
 8002638:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800263a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800263c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800263e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002640:	2b00      	cmp	r3, #0
 8002642:	d101      	bne.n	8002648 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002644:	2320      	movs	r3, #32
 8002646:	e003      	b.n	8002650 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800264a:	fab3 f383 	clz	r3, r3
 800264e:	b2db      	uxtb	r3, r3
 8002650:	3301      	adds	r3, #1
 8002652:	069b      	lsls	r3, r3, #26
 8002654:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002660:	2b00      	cmp	r3, #0
 8002662:	d109      	bne.n	8002678 <HAL_ADC_ConfigChannel+0x600>
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	0e9b      	lsrs	r3, r3, #26
 800266a:	3301      	adds	r3, #1
 800266c:	f003 031f 	and.w	r3, r3, #31
 8002670:	2101      	movs	r1, #1
 8002672:	fa01 f303 	lsl.w	r3, r1, r3
 8002676:	e017      	b.n	80026a8 <HAL_ADC_ConfigChannel+0x630>
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267e:	6a3b      	ldr	r3, [r7, #32]
 8002680:	fa93 f3a3 	rbit	r3, r3
 8002684:	61fb      	str	r3, [r7, #28]
  return result;
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800268a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268c:	2b00      	cmp	r3, #0
 800268e:	d101      	bne.n	8002694 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002690:	2320      	movs	r3, #32
 8002692:	e003      	b.n	800269c <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002696:	fab3 f383 	clz	r3, r3
 800269a:	b2db      	uxtb	r3, r3
 800269c:	3301      	adds	r3, #1
 800269e:	f003 031f 	and.w	r3, r3, #31
 80026a2:	2101      	movs	r1, #1
 80026a4:	fa01 f303 	lsl.w	r3, r1, r3
 80026a8:	ea42 0103 	orr.w	r1, r2, r3
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d10d      	bne.n	80026d4 <HAL_ADC_ConfigChannel+0x65c>
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	0e9b      	lsrs	r3, r3, #26
 80026be:	3301      	adds	r3, #1
 80026c0:	f003 021f 	and.w	r2, r3, #31
 80026c4:	4613      	mov	r3, r2
 80026c6:	005b      	lsls	r3, r3, #1
 80026c8:	4413      	add	r3, r2
 80026ca:	3b1e      	subs	r3, #30
 80026cc:	051b      	lsls	r3, r3, #20
 80026ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026d2:	e01d      	b.n	8002710 <HAL_ADC_ConfigChannel+0x698>
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	fa93 f3a3 	rbit	r3, r3
 80026e0:	613b      	str	r3, [r7, #16]
  return result;
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d103      	bne.n	80026f4 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80026ec:	2320      	movs	r3, #32
 80026ee:	e005      	b.n	80026fc <HAL_ADC_ConfigChannel+0x684>
 80026f0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	fab3 f383 	clz	r3, r3
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	3301      	adds	r3, #1
 80026fe:	f003 021f 	and.w	r2, r3, #31
 8002702:	4613      	mov	r3, r2
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	4413      	add	r3, r2
 8002708:	3b1e      	subs	r3, #30
 800270a:	051b      	lsls	r3, r3, #20
 800270c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002710:	430b      	orrs	r3, r1
 8002712:	683a      	ldr	r2, [r7, #0]
 8002714:	6892      	ldr	r2, [r2, #8]
 8002716:	4619      	mov	r1, r3
 8002718:	f7fe fed1 	bl	80014be <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	4b43      	ldr	r3, [pc, #268]	; (8002830 <HAL_ADC_ConfigChannel+0x7b8>)
 8002722:	4013      	ands	r3, r2
 8002724:	2b00      	cmp	r3, #0
 8002726:	d079      	beq.n	800281c <HAL_ADC_ConfigChannel+0x7a4>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002728:	4842      	ldr	r0, [pc, #264]	; (8002834 <HAL_ADC_ConfigChannel+0x7bc>)
 800272a:	f7fe fe13 	bl	8001354 <LL_ADC_GetCommonPathInternalCh>
 800272e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a40      	ldr	r2, [pc, #256]	; (8002838 <HAL_ADC_ConfigChannel+0x7c0>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d12b      	bne.n	8002794 <HAL_ADC_ConfigChannel+0x71c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800273c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002740:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d125      	bne.n	8002794 <HAL_ADC_ConfigChannel+0x71c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a3b      	ldr	r2, [pc, #236]	; (800283c <HAL_ADC_ConfigChannel+0x7c4>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d004      	beq.n	800275c <HAL_ADC_ConfigChannel+0x6e4>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a3a      	ldr	r2, [pc, #232]	; (8002840 <HAL_ADC_ConfigChannel+0x7c8>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d15c      	bne.n	8002816 <HAL_ADC_ConfigChannel+0x79e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800275c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002760:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002764:	4619      	mov	r1, r3
 8002766:	4833      	ldr	r0, [pc, #204]	; (8002834 <HAL_ADC_ConfigChannel+0x7bc>)
 8002768:	f7fe fde1 	bl	800132e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800276c:	4b35      	ldr	r3, [pc, #212]	; (8002844 <HAL_ADC_ConfigChannel+0x7cc>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	099b      	lsrs	r3, r3, #6
 8002772:	4a35      	ldr	r2, [pc, #212]	; (8002848 <HAL_ADC_ConfigChannel+0x7d0>)
 8002774:	fba2 2303 	umull	r2, r3, r2, r3
 8002778:	099a      	lsrs	r2, r3, #6
 800277a:	4613      	mov	r3, r2
 800277c:	005b      	lsls	r3, r3, #1
 800277e:	4413      	add	r3, r2
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002784:	e002      	b.n	800278c <HAL_ADC_ConfigChannel+0x714>
          {
            wait_loop_index--;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	3b01      	subs	r3, #1
 800278a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d1f9      	bne.n	8002786 <HAL_ADC_ConfigChannel+0x70e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002792:	e040      	b.n	8002816 <HAL_ADC_ConfigChannel+0x79e>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a2c      	ldr	r2, [pc, #176]	; (800284c <HAL_ADC_ConfigChannel+0x7d4>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d118      	bne.n	80027d0 <HAL_ADC_ConfigChannel+0x758>
 800279e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d112      	bne.n	80027d0 <HAL_ADC_ConfigChannel+0x758>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a23      	ldr	r2, [pc, #140]	; (800283c <HAL_ADC_ConfigChannel+0x7c4>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d004      	beq.n	80027be <HAL_ADC_ConfigChannel+0x746>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a21      	ldr	r2, [pc, #132]	; (8002840 <HAL_ADC_ConfigChannel+0x7c8>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d12d      	bne.n	800281a <HAL_ADC_ConfigChannel+0x7a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027c6:	4619      	mov	r1, r3
 80027c8:	481a      	ldr	r0, [pc, #104]	; (8002834 <HAL_ADC_ConfigChannel+0x7bc>)
 80027ca:	f7fe fdb0 	bl	800132e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027ce:	e024      	b.n	800281a <HAL_ADC_ConfigChannel+0x7a2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a1e      	ldr	r2, [pc, #120]	; (8002850 <HAL_ADC_ConfigChannel+0x7d8>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d120      	bne.n	800281c <HAL_ADC_ConfigChannel+0x7a4>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80027da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d11a      	bne.n	800281c <HAL_ADC_ConfigChannel+0x7a4>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a14      	ldr	r2, [pc, #80]	; (800283c <HAL_ADC_ConfigChannel+0x7c4>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d115      	bne.n	800281c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80027f8:	4619      	mov	r1, r3
 80027fa:	480e      	ldr	r0, [pc, #56]	; (8002834 <HAL_ADC_ConfigChannel+0x7bc>)
 80027fc:	f7fe fd97 	bl	800132e <LL_ADC_SetCommonPathInternalCh>
 8002800:	e00c      	b.n	800281c <HAL_ADC_ConfigChannel+0x7a4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002806:	f043 0220 	orr.w	r2, r3, #32
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002814:	e002      	b.n	800281c <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002816:	bf00      	nop
 8002818:	e000      	b.n	800281c <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800281a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002824:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002828:	4618      	mov	r0, r3
 800282a:	37d8      	adds	r7, #216	; 0xd8
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	80080000 	.word	0x80080000
 8002834:	50040300 	.word	0x50040300
 8002838:	c7520000 	.word	0xc7520000
 800283c:	50040000 	.word	0x50040000
 8002840:	50040200 	.word	0x50040200
 8002844:	200000c8 	.word	0x200000c8
 8002848:	053e2d63 	.word	0x053e2d63
 800284c:	cb840000 	.word	0xcb840000
 8002850:	80000001 	.word	0x80000001

08002854 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4618      	mov	r0, r3
 8002862:	f7fe fef9 	bl	8001658 <LL_ADC_IsEnabled>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d146      	bne.n	80028fa <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	689a      	ldr	r2, [r3, #8]
 8002872:	4b24      	ldr	r3, [pc, #144]	; (8002904 <ADC_Enable+0xb0>)
 8002874:	4013      	ands	r3, r2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d00d      	beq.n	8002896 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800287e:	f043 0210 	orr.w	r2, r3, #16
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800288a:	f043 0201 	orr.w	r2, r3, #1
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e032      	b.n	80028fc <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4618      	mov	r0, r3
 800289c:	f7fe fec8 	bl	8001630 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80028a0:	f7fe fd04 	bl	80012ac <HAL_GetTick>
 80028a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80028a6:	e021      	b.n	80028ec <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7fe fed3 	bl	8001658 <LL_ADC_IsEnabled>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d104      	bne.n	80028c2 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4618      	mov	r0, r3
 80028be:	f7fe feb7 	bl	8001630 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80028c2:	f7fe fcf3 	bl	80012ac <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d90d      	bls.n	80028ec <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028d4:	f043 0210 	orr.w	r2, r3, #16
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028e0:	f043 0201 	orr.w	r2, r3, #1
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e007      	b.n	80028fc <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0301 	and.w	r3, r3, #1
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d1d6      	bne.n	80028a8 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80028fa:	2300      	movs	r3, #0
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3710      	adds	r7, #16
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	8000003f 	.word	0x8000003f

08002908 <LL_ADC_IsEnabled>:
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f003 0301 	and.w	r3, r3, #1
 8002918:	2b01      	cmp	r3, #1
 800291a:	d101      	bne.n	8002920 <LL_ADC_IsEnabled+0x18>
 800291c:	2301      	movs	r3, #1
 800291e:	e000      	b.n	8002922 <LL_ADC_IsEnabled+0x1a>
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr

0800292e <LL_ADC_REG_IsConversionOngoing>:
{
 800292e:	b480      	push	{r7}
 8002930:	b083      	sub	sp, #12
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f003 0304 	and.w	r3, r3, #4
 800293e:	2b04      	cmp	r3, #4
 8002940:	d101      	bne.n	8002946 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002942:	2301      	movs	r3, #1
 8002944:	e000      	b.n	8002948 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002946:	2300      	movs	r3, #0
}
 8002948:	4618      	mov	r0, r3
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800295c:	bf00      	nop
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002970:	bf00      	nop
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002984:	bf00      	nop
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002998:	bf00      	nop
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr

080029a4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80029ac:	bf00      	nop
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80029b8:	b590      	push	{r4, r7, lr}
 80029ba:	b09f      	sub	sp, #124	; 0x7c
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029c2:	2300      	movs	r3, #0
 80029c4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d101      	bne.n	80029d6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80029d2:	2302      	movs	r3, #2
 80029d4:	e08f      	b.n	8002af6 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2201      	movs	r2, #1
 80029da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a47      	ldr	r2, [pc, #284]	; (8002b00 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d102      	bne.n	80029ee <HAL_ADCEx_MultiModeConfigChannel+0x36>
 80029e8:	4b46      	ldr	r3, [pc, #280]	; (8002b04 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80029ea:	60bb      	str	r3, [r7, #8]
 80029ec:	e001      	b.n	80029f2 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 80029ee:	2300      	movs	r3, #0
 80029f0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d10b      	bne.n	8002a10 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029fc:	f043 0220 	orr.w	r2, r3, #32
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e072      	b.n	8002af6 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7ff ff8b 	bl	800292e <LL_ADC_REG_IsConversionOngoing>
 8002a18:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7ff ff85 	bl	800292e <LL_ADC_REG_IsConversionOngoing>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d154      	bne.n	8002ad4 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002a2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d151      	bne.n	8002ad4 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002a30:	4b35      	ldr	r3, [pc, #212]	; (8002b08 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002a32:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d02c      	beq.n	8002a96 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002a3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	6859      	ldr	r1, [r3, #4]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a4e:	035b      	lsls	r3, r3, #13
 8002a50:	430b      	orrs	r3, r1
 8002a52:	431a      	orrs	r2, r3
 8002a54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a56:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a58:	4829      	ldr	r0, [pc, #164]	; (8002b00 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002a5a:	f7ff ff55 	bl	8002908 <LL_ADC_IsEnabled>
 8002a5e:	4604      	mov	r4, r0
 8002a60:	4828      	ldr	r0, [pc, #160]	; (8002b04 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002a62:	f7ff ff51 	bl	8002908 <LL_ADC_IsEnabled>
 8002a66:	4603      	mov	r3, r0
 8002a68:	431c      	orrs	r4, r3
 8002a6a:	4828      	ldr	r0, [pc, #160]	; (8002b0c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002a6c:	f7ff ff4c 	bl	8002908 <LL_ADC_IsEnabled>
 8002a70:	4603      	mov	r3, r0
 8002a72:	4323      	orrs	r3, r4
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d137      	bne.n	8002ae8 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002a78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002a80:	f023 030f 	bic.w	r3, r3, #15
 8002a84:	683a      	ldr	r2, [r7, #0]
 8002a86:	6811      	ldr	r1, [r2, #0]
 8002a88:	683a      	ldr	r2, [r7, #0]
 8002a8a:	6892      	ldr	r2, [r2, #8]
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	431a      	orrs	r2, r3
 8002a90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a92:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a94:	e028      	b.n	8002ae8 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002a96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002aa0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002aa2:	4817      	ldr	r0, [pc, #92]	; (8002b00 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002aa4:	f7ff ff30 	bl	8002908 <LL_ADC_IsEnabled>
 8002aa8:	4604      	mov	r4, r0
 8002aaa:	4816      	ldr	r0, [pc, #88]	; (8002b04 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002aac:	f7ff ff2c 	bl	8002908 <LL_ADC_IsEnabled>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	431c      	orrs	r4, r3
 8002ab4:	4815      	ldr	r0, [pc, #84]	; (8002b0c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002ab6:	f7ff ff27 	bl	8002908 <LL_ADC_IsEnabled>
 8002aba:	4603      	mov	r3, r0
 8002abc:	4323      	orrs	r3, r4
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d112      	bne.n	8002ae8 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002ac2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002aca:	f023 030f 	bic.w	r3, r3, #15
 8002ace:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002ad0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ad2:	e009      	b.n	8002ae8 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ad8:	f043 0220 	orr.w	r2, r3, #32
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002ae6:	e000      	b.n	8002aea <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ae8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002af2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	377c      	adds	r7, #124	; 0x7c
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd90      	pop	{r4, r7, pc}
 8002afe:	bf00      	nop
 8002b00:	50040000 	.word	0x50040000
 8002b04:	50040100 	.word	0x50040100
 8002b08:	50040300 	.word	0x50040300
 8002b0c:	50040200 	.word	0x50040200

08002b10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b085      	sub	sp, #20
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f003 0307 	and.w	r3, r3, #7
 8002b1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b20:	4b0c      	ldr	r3, [pc, #48]	; (8002b54 <__NVIC_SetPriorityGrouping+0x44>)
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b26:	68ba      	ldr	r2, [r7, #8]
 8002b28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b42:	4a04      	ldr	r2, [pc, #16]	; (8002b54 <__NVIC_SetPriorityGrouping+0x44>)
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	60d3      	str	r3, [r2, #12]
}
 8002b48:	bf00      	nop
 8002b4a:	3714      	adds	r7, #20
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr
 8002b54:	e000ed00 	.word	0xe000ed00

08002b58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b5c:	4b04      	ldr	r3, [pc, #16]	; (8002b70 <__NVIC_GetPriorityGrouping+0x18>)
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	0a1b      	lsrs	r3, r3, #8
 8002b62:	f003 0307 	and.w	r3, r3, #7
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr
 8002b70:	e000ed00 	.word	0xe000ed00

08002b74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	db0b      	blt.n	8002b9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b86:	79fb      	ldrb	r3, [r7, #7]
 8002b88:	f003 021f 	and.w	r2, r3, #31
 8002b8c:	4907      	ldr	r1, [pc, #28]	; (8002bac <__NVIC_EnableIRQ+0x38>)
 8002b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b92:	095b      	lsrs	r3, r3, #5
 8002b94:	2001      	movs	r0, #1
 8002b96:	fa00 f202 	lsl.w	r2, r0, r2
 8002b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b9e:	bf00      	nop
 8002ba0:	370c      	adds	r7, #12
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	e000e100 	.word	0xe000e100

08002bb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	6039      	str	r1, [r7, #0]
 8002bba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	db0a      	blt.n	8002bda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	b2da      	uxtb	r2, r3
 8002bc8:	490c      	ldr	r1, [pc, #48]	; (8002bfc <__NVIC_SetPriority+0x4c>)
 8002bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bce:	0112      	lsls	r2, r2, #4
 8002bd0:	b2d2      	uxtb	r2, r2
 8002bd2:	440b      	add	r3, r1
 8002bd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bd8:	e00a      	b.n	8002bf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	b2da      	uxtb	r2, r3
 8002bde:	4908      	ldr	r1, [pc, #32]	; (8002c00 <__NVIC_SetPriority+0x50>)
 8002be0:	79fb      	ldrb	r3, [r7, #7]
 8002be2:	f003 030f 	and.w	r3, r3, #15
 8002be6:	3b04      	subs	r3, #4
 8002be8:	0112      	lsls	r2, r2, #4
 8002bea:	b2d2      	uxtb	r2, r2
 8002bec:	440b      	add	r3, r1
 8002bee:	761a      	strb	r2, [r3, #24]
}
 8002bf0:	bf00      	nop
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr
 8002bfc:	e000e100 	.word	0xe000e100
 8002c00:	e000ed00 	.word	0xe000ed00

08002c04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b089      	sub	sp, #36	; 0x24
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	60b9      	str	r1, [r7, #8]
 8002c0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f003 0307 	and.w	r3, r3, #7
 8002c16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	f1c3 0307 	rsb	r3, r3, #7
 8002c1e:	2b04      	cmp	r3, #4
 8002c20:	bf28      	it	cs
 8002c22:	2304      	movcs	r3, #4
 8002c24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	3304      	adds	r3, #4
 8002c2a:	2b06      	cmp	r3, #6
 8002c2c:	d902      	bls.n	8002c34 <NVIC_EncodePriority+0x30>
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	3b03      	subs	r3, #3
 8002c32:	e000      	b.n	8002c36 <NVIC_EncodePriority+0x32>
 8002c34:	2300      	movs	r3, #0
 8002c36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c38:	f04f 32ff 	mov.w	r2, #4294967295
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c42:	43da      	mvns	r2, r3
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	401a      	ands	r2, r3
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c4c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	fa01 f303 	lsl.w	r3, r1, r3
 8002c56:	43d9      	mvns	r1, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c5c:	4313      	orrs	r3, r2
         );
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3724      	adds	r7, #36	; 0x24
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
	...

08002c6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	3b01      	subs	r3, #1
 8002c78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c7c:	d301      	bcc.n	8002c82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e00f      	b.n	8002ca2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c82:	4a0a      	ldr	r2, [pc, #40]	; (8002cac <SysTick_Config+0x40>)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	3b01      	subs	r3, #1
 8002c88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c8a:	210f      	movs	r1, #15
 8002c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c90:	f7ff ff8e 	bl	8002bb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c94:	4b05      	ldr	r3, [pc, #20]	; (8002cac <SysTick_Config+0x40>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c9a:	4b04      	ldr	r3, [pc, #16]	; (8002cac <SysTick_Config+0x40>)
 8002c9c:	2207      	movs	r2, #7
 8002c9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3708      	adds	r7, #8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	e000e010 	.word	0xe000e010

08002cb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f7ff ff29 	bl	8002b10 <__NVIC_SetPriorityGrouping>
}
 8002cbe:	bf00      	nop
 8002cc0:	3708      	adds	r7, #8
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b086      	sub	sp, #24
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	4603      	mov	r3, r0
 8002cce:	60b9      	str	r1, [r7, #8]
 8002cd0:	607a      	str	r2, [r7, #4]
 8002cd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002cd8:	f7ff ff3e 	bl	8002b58 <__NVIC_GetPriorityGrouping>
 8002cdc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	68b9      	ldr	r1, [r7, #8]
 8002ce2:	6978      	ldr	r0, [r7, #20]
 8002ce4:	f7ff ff8e 	bl	8002c04 <NVIC_EncodePriority>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cee:	4611      	mov	r1, r2
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7ff ff5d 	bl	8002bb0 <__NVIC_SetPriority>
}
 8002cf6:	bf00      	nop
 8002cf8:	3718      	adds	r7, #24
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b082      	sub	sp, #8
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	4603      	mov	r3, r0
 8002d06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7ff ff31 	bl	8002b74 <__NVIC_EnableIRQ>
}
 8002d12:	bf00      	nop
 8002d14:	3708      	adds	r7, #8
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b082      	sub	sp, #8
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f7ff ffa2 	bl	8002c6c <SysTick_Config>
 8002d28:	4603      	mov	r3, r0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3708      	adds	r7, #8
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b082      	sub	sp, #8
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d101      	bne.n	8002d44 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e014      	b.n	8002d6e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	791b      	ldrb	r3, [r3, #4]
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d105      	bne.n	8002d5a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f7fd fca9 	bl	80006ac <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2202      	movs	r2, #2
 8002d5e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3708      	adds	r7, #8
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002d76:	b480      	push	{r7}
 8002d78:	b083      	sub	sp, #12
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
 8002d7e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	795b      	ldrb	r3, [r3, #5]
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d101      	bne.n	8002d8c <HAL_DAC_Start+0x16>
 8002d88:	2302      	movs	r3, #2
 8002d8a:	e03b      	b.n	8002e04 <HAL_DAC_Start+0x8e>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2202      	movs	r2, #2
 8002d96:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	6819      	ldr	r1, [r3, #0]
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	f003 0310 	and.w	r3, r3, #16
 8002da4:	2201      	movs	r2, #1
 8002da6:	409a      	lsls	r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	430a      	orrs	r2, r1
 8002dae:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d10f      	bne.n	8002dd6 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8002dc0:	2b04      	cmp	r3, #4
 8002dc2:	d118      	bne.n	8002df6 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	685a      	ldr	r2, [r3, #4]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f042 0201 	orr.w	r2, r2, #1
 8002dd2:	605a      	str	r2, [r3, #4]
 8002dd4:	e00f      	b.n	8002df6 <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002de0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002de4:	d107      	bne.n	8002df6 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	685a      	ldr	r2, [r3, #4]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f042 0202 	orr.w	r2, r2, #2
 8002df4:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002e02:	2300      	movs	r3, #0
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e26:	d120      	bne.n	8002e6a <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e36:	d118      	bne.n	8002e6a <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2204      	movs	r2, #4
 8002e3c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	f043 0201 	orr.w	r2, r3, #1
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e52:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e62:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f000 f852 	bl	8002f0e <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e78:	d120      	bne.n	8002ebc <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e88:	d118      	bne.n	8002ebc <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2204      	movs	r2, #4
 8002e8e:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	691b      	ldr	r3, [r3, #16]
 8002e94:	f043 0202 	orr.w	r2, r3, #2
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002ea4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002eb4:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 f94d 	bl	8003156 <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 8002ebc:	bf00      	nop
 8002ebe:	3708      	adds	r7, #8
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b087      	sub	sp, #28
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	607a      	str	r2, [r7, #4]
 8002ed0:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d105      	bne.n	8002eee <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002ee2:	697a      	ldr	r2, [r7, #20]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	4413      	add	r3, r2
 8002ee8:	3308      	adds	r3, #8
 8002eea:	617b      	str	r3, [r7, #20]
 8002eec:	e004      	b.n	8002ef8 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002eee:	697a      	ldr	r2, [r7, #20]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	3314      	adds	r3, #20
 8002ef6:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	461a      	mov	r2, r3
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	371c      	adds	r7, #28
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr

08002f0e <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002f0e:	b480      	push	{r7}
 8002f10:	b083      	sub	sp, #12
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8002f16:	bf00      	nop
 8002f18:	370c      	adds	r7, #12
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr

08002f22 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002f22:	b580      	push	{r7, lr}
 8002f24:	b088      	sub	sp, #32
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	60f8      	str	r0, [r7, #12]
 8002f2a:	60b9      	str	r1, [r7, #8]
 8002f2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	795b      	ldrb	r3, [r3, #5]
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d101      	bne.n	8002f3e <HAL_DAC_ConfigChannel+0x1c>
 8002f3a:	2302      	movs	r3, #2
 8002f3c:	e107      	b.n	800314e <HAL_DAC_ConfigChannel+0x22c>
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2201      	movs	r2, #1
 8002f42:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2202      	movs	r2, #2
 8002f48:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2b04      	cmp	r3, #4
 8002f50:	d174      	bne.n	800303c <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002f52:	f7fe f9ab 	bl	80012ac <HAL_GetTick>
 8002f56:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d134      	bne.n	8002fc8 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002f5e:	e011      	b.n	8002f84 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002f60:	f7fe f9a4 	bl	80012ac <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d90a      	bls.n	8002f84 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	f043 0208 	orr.w	r2, r3, #8
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2203      	movs	r2, #3
 8002f7e:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	e0e4      	b.n	800314e <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d1e6      	bne.n	8002f60 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8002f92:	2001      	movs	r0, #1
 8002f94:	f7fe f996 	bl	80012c4 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	68ba      	ldr	r2, [r7, #8]
 8002f9e:	6992      	ldr	r2, [r2, #24]
 8002fa0:	641a      	str	r2, [r3, #64]	; 0x40
 8002fa2:	e01e      	b.n	8002fe2 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002fa4:	f7fe f982 	bl	80012ac <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d90a      	bls.n	8002fc8 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	f043 0208 	orr.w	r2, r3, #8
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2203      	movs	r2, #3
 8002fc2:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e0c2      	b.n	800314e <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	dbe8      	blt.n	8002fa4 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8002fd2:	2001      	movs	r0, #1
 8002fd4:	f7fe f976 	bl	80012c4 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68ba      	ldr	r2, [r7, #8]
 8002fde:	6992      	ldr	r2, [r2, #24]
 8002fe0:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f003 0310 	and.w	r3, r3, #16
 8002fee:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff6:	43db      	mvns	r3, r3
 8002ff8:	ea02 0103 	and.w	r1, r2, r3
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	69da      	ldr	r2, [r3, #28]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f003 0310 	and.w	r3, r3, #16
 8003006:	409a      	lsls	r2, r3
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	430a      	orrs	r2, r1
 800300e:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f003 0310 	and.w	r3, r3, #16
 800301c:	21ff      	movs	r1, #255	; 0xff
 800301e:	fa01 f303 	lsl.w	r3, r1, r3
 8003022:	43db      	mvns	r3, r3
 8003024:	ea02 0103 	and.w	r1, r2, r3
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	6a1a      	ldr	r2, [r3, #32]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f003 0310 	and.w	r3, r3, #16
 8003032:	409a      	lsls	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	430a      	orrs	r2, r1
 800303a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	691b      	ldr	r3, [r3, #16]
 8003040:	2b01      	cmp	r3, #1
 8003042:	d11d      	bne.n	8003080 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800304a:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f003 0310 	and.w	r3, r3, #16
 8003052:	221f      	movs	r2, #31
 8003054:	fa02 f303 	lsl.w	r3, r2, r3
 8003058:	43db      	mvns	r3, r3
 800305a:	69ba      	ldr	r2, [r7, #24]
 800305c:	4013      	ands	r3, r2
 800305e:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	695b      	ldr	r3, [r3, #20]
 8003064:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f003 0310 	and.w	r3, r3, #16
 800306c:	697a      	ldr	r2, [r7, #20]
 800306e:	fa02 f303 	lsl.w	r3, r2, r3
 8003072:	69ba      	ldr	r2, [r7, #24]
 8003074:	4313      	orrs	r3, r2
 8003076:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	69ba      	ldr	r2, [r7, #24]
 800307e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003086:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f003 0310 	and.w	r3, r3, #16
 800308e:	2207      	movs	r2, #7
 8003090:	fa02 f303 	lsl.w	r3, r2, r3
 8003094:	43db      	mvns	r3, r3
 8003096:	69ba      	ldr	r2, [r7, #24]
 8003098:	4013      	ands	r3, r2
 800309a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	431a      	orrs	r2, r3
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f003 0310 	and.w	r3, r3, #16
 80030b4:	697a      	ldr	r2, [r7, #20]
 80030b6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ba:	69ba      	ldr	r2, [r7, #24]
 80030bc:	4313      	orrs	r3, r2
 80030be:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	69ba      	ldr	r2, [r7, #24]
 80030c6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	6819      	ldr	r1, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f003 0310 	and.w	r3, r3, #16
 80030d4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80030d8:	fa02 f303 	lsl.w	r3, r2, r3
 80030dc:	43da      	mvns	r2, r3
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	400a      	ands	r2, r1
 80030e4:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f003 0310 	and.w	r3, r3, #16
 80030f4:	f640 72fc 	movw	r2, #4092	; 0xffc
 80030f8:	fa02 f303 	lsl.w	r3, r2, r3
 80030fc:	43db      	mvns	r3, r3
 80030fe:	69ba      	ldr	r2, [r7, #24]
 8003100:	4013      	ands	r3, r2
 8003102:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f003 0310 	and.w	r3, r3, #16
 8003110:	697a      	ldr	r2, [r7, #20]
 8003112:	fa02 f303 	lsl.w	r3, r2, r3
 8003116:	69ba      	ldr	r2, [r7, #24]
 8003118:	4313      	orrs	r3, r2
 800311a:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	69ba      	ldr	r2, [r7, #24]
 8003122:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	6819      	ldr	r1, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f003 0310 	and.w	r3, r3, #16
 8003130:	22c0      	movs	r2, #192	; 0xc0
 8003132:	fa02 f303 	lsl.w	r3, r2, r3
 8003136:	43da      	mvns	r2, r3
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	400a      	ands	r2, r1
 800313e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2201      	movs	r2, #1
 8003144:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2200      	movs	r2, #0
 800314a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	3720      	adds	r7, #32
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}

08003156 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003156:	b480      	push	{r7}
 8003158:	b083      	sub	sp, #12
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800315e:	bf00      	nop
 8003160:	370c      	adds	r7, #12
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
	...

0800316c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800316c:	b480      	push	{r7}
 800316e:	b087      	sub	sp, #28
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003176:	2300      	movs	r3, #0
 8003178:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800317a:	e17f      	b.n	800347c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	2101      	movs	r1, #1
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	fa01 f303 	lsl.w	r3, r1, r3
 8003188:	4013      	ands	r3, r2
 800318a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2b00      	cmp	r3, #0
 8003190:	f000 8171 	beq.w	8003476 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	2b01      	cmp	r3, #1
 800319a:	d00b      	beq.n	80031b4 <HAL_GPIO_Init+0x48>
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d007      	beq.n	80031b4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80031a8:	2b11      	cmp	r3, #17
 80031aa:	d003      	beq.n	80031b4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	2b12      	cmp	r3, #18
 80031b2:	d130      	bne.n	8003216 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	005b      	lsls	r3, r3, #1
 80031be:	2203      	movs	r2, #3
 80031c0:	fa02 f303 	lsl.w	r3, r2, r3
 80031c4:	43db      	mvns	r3, r3
 80031c6:	693a      	ldr	r2, [r7, #16]
 80031c8:	4013      	ands	r3, r2
 80031ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	68da      	ldr	r2, [r3, #12]
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	005b      	lsls	r3, r3, #1
 80031d4:	fa02 f303 	lsl.w	r3, r2, r3
 80031d8:	693a      	ldr	r2, [r7, #16]
 80031da:	4313      	orrs	r3, r2
 80031dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	693a      	ldr	r2, [r7, #16]
 80031e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80031ea:	2201      	movs	r2, #1
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	fa02 f303 	lsl.w	r3, r2, r3
 80031f2:	43db      	mvns	r3, r3
 80031f4:	693a      	ldr	r2, [r7, #16]
 80031f6:	4013      	ands	r3, r2
 80031f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	091b      	lsrs	r3, r3, #4
 8003200:	f003 0201 	and.w	r2, r3, #1
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	fa02 f303 	lsl.w	r3, r2, r3
 800320a:	693a      	ldr	r2, [r7, #16]
 800320c:	4313      	orrs	r3, r2
 800320e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	693a      	ldr	r2, [r7, #16]
 8003214:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f003 0303 	and.w	r3, r3, #3
 800321e:	2b03      	cmp	r3, #3
 8003220:	d118      	bne.n	8003254 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003226:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003228:	2201      	movs	r2, #1
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	fa02 f303 	lsl.w	r3, r2, r3
 8003230:	43db      	mvns	r3, r3
 8003232:	693a      	ldr	r2, [r7, #16]
 8003234:	4013      	ands	r3, r2
 8003236:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	08db      	lsrs	r3, r3, #3
 800323e:	f003 0201 	and.w	r2, r3, #1
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	fa02 f303 	lsl.w	r3, r2, r3
 8003248:	693a      	ldr	r2, [r7, #16]
 800324a:	4313      	orrs	r3, r2
 800324c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	693a      	ldr	r2, [r7, #16]
 8003252:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	005b      	lsls	r3, r3, #1
 800325e:	2203      	movs	r2, #3
 8003260:	fa02 f303 	lsl.w	r3, r2, r3
 8003264:	43db      	mvns	r3, r3
 8003266:	693a      	ldr	r2, [r7, #16]
 8003268:	4013      	ands	r3, r2
 800326a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	689a      	ldr	r2, [r3, #8]
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	005b      	lsls	r3, r3, #1
 8003274:	fa02 f303 	lsl.w	r3, r2, r3
 8003278:	693a      	ldr	r2, [r7, #16]
 800327a:	4313      	orrs	r3, r2
 800327c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	693a      	ldr	r2, [r7, #16]
 8003282:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	2b02      	cmp	r3, #2
 800328a:	d003      	beq.n	8003294 <HAL_GPIO_Init+0x128>
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	2b12      	cmp	r3, #18
 8003292:	d123      	bne.n	80032dc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	08da      	lsrs	r2, r3, #3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	3208      	adds	r2, #8
 800329c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	f003 0307 	and.w	r3, r3, #7
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	220f      	movs	r2, #15
 80032ac:	fa02 f303 	lsl.w	r3, r2, r3
 80032b0:	43db      	mvns	r3, r3
 80032b2:	693a      	ldr	r2, [r7, #16]
 80032b4:	4013      	ands	r3, r2
 80032b6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	691a      	ldr	r2, [r3, #16]
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	f003 0307 	and.w	r3, r3, #7
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	fa02 f303 	lsl.w	r3, r2, r3
 80032c8:	693a      	ldr	r2, [r7, #16]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	08da      	lsrs	r2, r3, #3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	3208      	adds	r2, #8
 80032d6:	6939      	ldr	r1, [r7, #16]
 80032d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	005b      	lsls	r3, r3, #1
 80032e6:	2203      	movs	r2, #3
 80032e8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ec:	43db      	mvns	r3, r3
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	4013      	ands	r3, r2
 80032f2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f003 0203 	and.w	r2, r3, #3
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	005b      	lsls	r3, r3, #1
 8003300:	fa02 f303 	lsl.w	r3, r2, r3
 8003304:	693a      	ldr	r2, [r7, #16]
 8003306:	4313      	orrs	r3, r2
 8003308:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	693a      	ldr	r2, [r7, #16]
 800330e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003318:	2b00      	cmp	r3, #0
 800331a:	f000 80ac 	beq.w	8003476 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800331e:	4b5e      	ldr	r3, [pc, #376]	; (8003498 <HAL_GPIO_Init+0x32c>)
 8003320:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003322:	4a5d      	ldr	r2, [pc, #372]	; (8003498 <HAL_GPIO_Init+0x32c>)
 8003324:	f043 0301 	orr.w	r3, r3, #1
 8003328:	6613      	str	r3, [r2, #96]	; 0x60
 800332a:	4b5b      	ldr	r3, [pc, #364]	; (8003498 <HAL_GPIO_Init+0x32c>)
 800332c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	60bb      	str	r3, [r7, #8]
 8003334:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003336:	4a59      	ldr	r2, [pc, #356]	; (800349c <HAL_GPIO_Init+0x330>)
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	089b      	lsrs	r3, r3, #2
 800333c:	3302      	adds	r3, #2
 800333e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003342:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	f003 0303 	and.w	r3, r3, #3
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	220f      	movs	r2, #15
 800334e:	fa02 f303 	lsl.w	r3, r2, r3
 8003352:	43db      	mvns	r3, r3
 8003354:	693a      	ldr	r2, [r7, #16]
 8003356:	4013      	ands	r3, r2
 8003358:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003360:	d025      	beq.n	80033ae <HAL_GPIO_Init+0x242>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a4e      	ldr	r2, [pc, #312]	; (80034a0 <HAL_GPIO_Init+0x334>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d01f      	beq.n	80033aa <HAL_GPIO_Init+0x23e>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a4d      	ldr	r2, [pc, #308]	; (80034a4 <HAL_GPIO_Init+0x338>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d019      	beq.n	80033a6 <HAL_GPIO_Init+0x23a>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a4c      	ldr	r2, [pc, #304]	; (80034a8 <HAL_GPIO_Init+0x33c>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d013      	beq.n	80033a2 <HAL_GPIO_Init+0x236>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a4b      	ldr	r2, [pc, #300]	; (80034ac <HAL_GPIO_Init+0x340>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d00d      	beq.n	800339e <HAL_GPIO_Init+0x232>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a4a      	ldr	r2, [pc, #296]	; (80034b0 <HAL_GPIO_Init+0x344>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d007      	beq.n	800339a <HAL_GPIO_Init+0x22e>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a49      	ldr	r2, [pc, #292]	; (80034b4 <HAL_GPIO_Init+0x348>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d101      	bne.n	8003396 <HAL_GPIO_Init+0x22a>
 8003392:	2306      	movs	r3, #6
 8003394:	e00c      	b.n	80033b0 <HAL_GPIO_Init+0x244>
 8003396:	2307      	movs	r3, #7
 8003398:	e00a      	b.n	80033b0 <HAL_GPIO_Init+0x244>
 800339a:	2305      	movs	r3, #5
 800339c:	e008      	b.n	80033b0 <HAL_GPIO_Init+0x244>
 800339e:	2304      	movs	r3, #4
 80033a0:	e006      	b.n	80033b0 <HAL_GPIO_Init+0x244>
 80033a2:	2303      	movs	r3, #3
 80033a4:	e004      	b.n	80033b0 <HAL_GPIO_Init+0x244>
 80033a6:	2302      	movs	r3, #2
 80033a8:	e002      	b.n	80033b0 <HAL_GPIO_Init+0x244>
 80033aa:	2301      	movs	r3, #1
 80033ac:	e000      	b.n	80033b0 <HAL_GPIO_Init+0x244>
 80033ae:	2300      	movs	r3, #0
 80033b0:	697a      	ldr	r2, [r7, #20]
 80033b2:	f002 0203 	and.w	r2, r2, #3
 80033b6:	0092      	lsls	r2, r2, #2
 80033b8:	4093      	lsls	r3, r2
 80033ba:	693a      	ldr	r2, [r7, #16]
 80033bc:	4313      	orrs	r3, r2
 80033be:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80033c0:	4936      	ldr	r1, [pc, #216]	; (800349c <HAL_GPIO_Init+0x330>)
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	089b      	lsrs	r3, r3, #2
 80033c6:	3302      	adds	r3, #2
 80033c8:	693a      	ldr	r2, [r7, #16]
 80033ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80033ce:	4b3a      	ldr	r3, [pc, #232]	; (80034b8 <HAL_GPIO_Init+0x34c>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	43db      	mvns	r3, r3
 80033d8:	693a      	ldr	r2, [r7, #16]
 80033da:	4013      	ands	r3, r2
 80033dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d003      	beq.n	80033f2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80033ea:	693a      	ldr	r2, [r7, #16]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80033f2:	4a31      	ldr	r2, [pc, #196]	; (80034b8 <HAL_GPIO_Init+0x34c>)
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80033f8:	4b2f      	ldr	r3, [pc, #188]	; (80034b8 <HAL_GPIO_Init+0x34c>)
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	43db      	mvns	r3, r3
 8003402:	693a      	ldr	r2, [r7, #16]
 8003404:	4013      	ands	r3, r2
 8003406:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d003      	beq.n	800341c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003414:	693a      	ldr	r2, [r7, #16]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	4313      	orrs	r3, r2
 800341a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800341c:	4a26      	ldr	r2, [pc, #152]	; (80034b8 <HAL_GPIO_Init+0x34c>)
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003422:	4b25      	ldr	r3, [pc, #148]	; (80034b8 <HAL_GPIO_Init+0x34c>)
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	43db      	mvns	r3, r3
 800342c:	693a      	ldr	r2, [r7, #16]
 800342e:	4013      	ands	r3, r2
 8003430:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d003      	beq.n	8003446 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800343e:	693a      	ldr	r2, [r7, #16]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	4313      	orrs	r3, r2
 8003444:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003446:	4a1c      	ldr	r2, [pc, #112]	; (80034b8 <HAL_GPIO_Init+0x34c>)
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800344c:	4b1a      	ldr	r3, [pc, #104]	; (80034b8 <HAL_GPIO_Init+0x34c>)
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	43db      	mvns	r3, r3
 8003456:	693a      	ldr	r2, [r7, #16]
 8003458:	4013      	ands	r3, r2
 800345a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d003      	beq.n	8003470 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003468:	693a      	ldr	r2, [r7, #16]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	4313      	orrs	r3, r2
 800346e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003470:	4a11      	ldr	r2, [pc, #68]	; (80034b8 <HAL_GPIO_Init+0x34c>)
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	3301      	adds	r3, #1
 800347a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	fa22 f303 	lsr.w	r3, r2, r3
 8003486:	2b00      	cmp	r3, #0
 8003488:	f47f ae78 	bne.w	800317c <HAL_GPIO_Init+0x10>
  }
}
 800348c:	bf00      	nop
 800348e:	371c      	adds	r7, #28
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr
 8003498:	40021000 	.word	0x40021000
 800349c:	40010000 	.word	0x40010000
 80034a0:	48000400 	.word	0x48000400
 80034a4:	48000800 	.word	0x48000800
 80034a8:	48000c00 	.word	0x48000c00
 80034ac:	48001000 	.word	0x48001000
 80034b0:	48001400 	.word	0x48001400
 80034b4:	48001800 	.word	0x48001800
 80034b8:	40010400 	.word	0x40010400

080034bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	460b      	mov	r3, r1
 80034c6:	807b      	strh	r3, [r7, #2]
 80034c8:	4613      	mov	r3, r2
 80034ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034cc:	787b      	ldrb	r3, [r7, #1]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d003      	beq.n	80034da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80034d2:	887a      	ldrh	r2, [r7, #2]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80034d8:	e002      	b.n	80034e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80034da:	887a      	ldrh	r2, [r7, #2]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80034e0:	bf00      	nop
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80034ec:	b480      	push	{r7}
 80034ee:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80034f0:	4b04      	ldr	r3, [pc, #16]	; (8003504 <HAL_PWREx_GetVoltageRange+0x18>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	40007000 	.word	0x40007000

08003508 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003508:	b480      	push	{r7}
 800350a:	b085      	sub	sp, #20
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003516:	d130      	bne.n	800357a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003518:	4b23      	ldr	r3, [pc, #140]	; (80035a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003520:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003524:	d038      	beq.n	8003598 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003526:	4b20      	ldr	r3, [pc, #128]	; (80035a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800352e:	4a1e      	ldr	r2, [pc, #120]	; (80035a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003530:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003534:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003536:	4b1d      	ldr	r3, [pc, #116]	; (80035ac <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2232      	movs	r2, #50	; 0x32
 800353c:	fb02 f303 	mul.w	r3, r2, r3
 8003540:	4a1b      	ldr	r2, [pc, #108]	; (80035b0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003542:	fba2 2303 	umull	r2, r3, r2, r3
 8003546:	0c9b      	lsrs	r3, r3, #18
 8003548:	3301      	adds	r3, #1
 800354a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800354c:	e002      	b.n	8003554 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	3b01      	subs	r3, #1
 8003552:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003554:	4b14      	ldr	r3, [pc, #80]	; (80035a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003556:	695b      	ldr	r3, [r3, #20]
 8003558:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800355c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003560:	d102      	bne.n	8003568 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d1f2      	bne.n	800354e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003568:	4b0f      	ldr	r3, [pc, #60]	; (80035a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800356a:	695b      	ldr	r3, [r3, #20]
 800356c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003570:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003574:	d110      	bne.n	8003598 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e00f      	b.n	800359a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800357a:	4b0b      	ldr	r3, [pc, #44]	; (80035a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003582:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003586:	d007      	beq.n	8003598 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003588:	4b07      	ldr	r3, [pc, #28]	; (80035a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003590:	4a05      	ldr	r2, [pc, #20]	; (80035a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003592:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003596:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003598:	2300      	movs	r3, #0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3714      	adds	r7, #20
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop
 80035a8:	40007000 	.word	0x40007000
 80035ac:	200000c8 	.word	0x200000c8
 80035b0:	431bde83 	.word	0x431bde83

080035b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b088      	sub	sp, #32
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d101      	bne.n	80035c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e3d4      	b.n	8003d70 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035c6:	4ba1      	ldr	r3, [pc, #644]	; (800384c <HAL_RCC_OscConfig+0x298>)
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	f003 030c 	and.w	r3, r3, #12
 80035ce:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035d0:	4b9e      	ldr	r3, [pc, #632]	; (800384c <HAL_RCC_OscConfig+0x298>)
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	f003 0303 	and.w	r3, r3, #3
 80035d8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0310 	and.w	r3, r3, #16
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	f000 80e4 	beq.w	80037b0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d007      	beq.n	80035fe <HAL_RCC_OscConfig+0x4a>
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	2b0c      	cmp	r3, #12
 80035f2:	f040 808b 	bne.w	800370c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	f040 8087 	bne.w	800370c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80035fe:	4b93      	ldr	r3, [pc, #588]	; (800384c <HAL_RCC_OscConfig+0x298>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	2b00      	cmp	r3, #0
 8003608:	d005      	beq.n	8003616 <HAL_RCC_OscConfig+0x62>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	699b      	ldr	r3, [r3, #24]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d101      	bne.n	8003616 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e3ac      	b.n	8003d70 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a1a      	ldr	r2, [r3, #32]
 800361a:	4b8c      	ldr	r3, [pc, #560]	; (800384c <HAL_RCC_OscConfig+0x298>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0308 	and.w	r3, r3, #8
 8003622:	2b00      	cmp	r3, #0
 8003624:	d004      	beq.n	8003630 <HAL_RCC_OscConfig+0x7c>
 8003626:	4b89      	ldr	r3, [pc, #548]	; (800384c <HAL_RCC_OscConfig+0x298>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800362e:	e005      	b.n	800363c <HAL_RCC_OscConfig+0x88>
 8003630:	4b86      	ldr	r3, [pc, #536]	; (800384c <HAL_RCC_OscConfig+0x298>)
 8003632:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003636:	091b      	lsrs	r3, r3, #4
 8003638:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800363c:	4293      	cmp	r3, r2
 800363e:	d223      	bcs.n	8003688 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6a1b      	ldr	r3, [r3, #32]
 8003644:	4618      	mov	r0, r3
 8003646:	f000 fd3f 	bl	80040c8 <RCC_SetFlashLatencyFromMSIRange>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d001      	beq.n	8003654 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e38d      	b.n	8003d70 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003654:	4b7d      	ldr	r3, [pc, #500]	; (800384c <HAL_RCC_OscConfig+0x298>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a7c      	ldr	r2, [pc, #496]	; (800384c <HAL_RCC_OscConfig+0x298>)
 800365a:	f043 0308 	orr.w	r3, r3, #8
 800365e:	6013      	str	r3, [r2, #0]
 8003660:	4b7a      	ldr	r3, [pc, #488]	; (800384c <HAL_RCC_OscConfig+0x298>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6a1b      	ldr	r3, [r3, #32]
 800366c:	4977      	ldr	r1, [pc, #476]	; (800384c <HAL_RCC_OscConfig+0x298>)
 800366e:	4313      	orrs	r3, r2
 8003670:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003672:	4b76      	ldr	r3, [pc, #472]	; (800384c <HAL_RCC_OscConfig+0x298>)
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	69db      	ldr	r3, [r3, #28]
 800367e:	021b      	lsls	r3, r3, #8
 8003680:	4972      	ldr	r1, [pc, #456]	; (800384c <HAL_RCC_OscConfig+0x298>)
 8003682:	4313      	orrs	r3, r2
 8003684:	604b      	str	r3, [r1, #4]
 8003686:	e025      	b.n	80036d4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003688:	4b70      	ldr	r3, [pc, #448]	; (800384c <HAL_RCC_OscConfig+0x298>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a6f      	ldr	r2, [pc, #444]	; (800384c <HAL_RCC_OscConfig+0x298>)
 800368e:	f043 0308 	orr.w	r3, r3, #8
 8003692:	6013      	str	r3, [r2, #0]
 8003694:	4b6d      	ldr	r3, [pc, #436]	; (800384c <HAL_RCC_OscConfig+0x298>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a1b      	ldr	r3, [r3, #32]
 80036a0:	496a      	ldr	r1, [pc, #424]	; (800384c <HAL_RCC_OscConfig+0x298>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036a6:	4b69      	ldr	r3, [pc, #420]	; (800384c <HAL_RCC_OscConfig+0x298>)
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	69db      	ldr	r3, [r3, #28]
 80036b2:	021b      	lsls	r3, r3, #8
 80036b4:	4965      	ldr	r1, [pc, #404]	; (800384c <HAL_RCC_OscConfig+0x298>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d109      	bne.n	80036d4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6a1b      	ldr	r3, [r3, #32]
 80036c4:	4618      	mov	r0, r3
 80036c6:	f000 fcff 	bl	80040c8 <RCC_SetFlashLatencyFromMSIRange>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d001      	beq.n	80036d4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e34d      	b.n	8003d70 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80036d4:	f000 fc36 	bl	8003f44 <HAL_RCC_GetSysClockFreq>
 80036d8:	4601      	mov	r1, r0
 80036da:	4b5c      	ldr	r3, [pc, #368]	; (800384c <HAL_RCC_OscConfig+0x298>)
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	091b      	lsrs	r3, r3, #4
 80036e0:	f003 030f 	and.w	r3, r3, #15
 80036e4:	4a5a      	ldr	r2, [pc, #360]	; (8003850 <HAL_RCC_OscConfig+0x29c>)
 80036e6:	5cd3      	ldrb	r3, [r2, r3]
 80036e8:	f003 031f 	and.w	r3, r3, #31
 80036ec:	fa21 f303 	lsr.w	r3, r1, r3
 80036f0:	4a58      	ldr	r2, [pc, #352]	; (8003854 <HAL_RCC_OscConfig+0x2a0>)
 80036f2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80036f4:	4b58      	ldr	r3, [pc, #352]	; (8003858 <HAL_RCC_OscConfig+0x2a4>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4618      	mov	r0, r3
 80036fa:	f7fd fd87 	bl	800120c <HAL_InitTick>
 80036fe:	4603      	mov	r3, r0
 8003700:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003702:	7bfb      	ldrb	r3, [r7, #15]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d052      	beq.n	80037ae <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003708:	7bfb      	ldrb	r3, [r7, #15]
 800370a:	e331      	b.n	8003d70 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	699b      	ldr	r3, [r3, #24]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d032      	beq.n	800377a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003714:	4b4d      	ldr	r3, [pc, #308]	; (800384c <HAL_RCC_OscConfig+0x298>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a4c      	ldr	r2, [pc, #304]	; (800384c <HAL_RCC_OscConfig+0x298>)
 800371a:	f043 0301 	orr.w	r3, r3, #1
 800371e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003720:	f7fd fdc4 	bl	80012ac <HAL_GetTick>
 8003724:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003726:	e008      	b.n	800373a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003728:	f7fd fdc0 	bl	80012ac <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	2b02      	cmp	r3, #2
 8003734:	d901      	bls.n	800373a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e31a      	b.n	8003d70 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800373a:	4b44      	ldr	r3, [pc, #272]	; (800384c <HAL_RCC_OscConfig+0x298>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0302 	and.w	r3, r3, #2
 8003742:	2b00      	cmp	r3, #0
 8003744:	d0f0      	beq.n	8003728 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003746:	4b41      	ldr	r3, [pc, #260]	; (800384c <HAL_RCC_OscConfig+0x298>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a40      	ldr	r2, [pc, #256]	; (800384c <HAL_RCC_OscConfig+0x298>)
 800374c:	f043 0308 	orr.w	r3, r3, #8
 8003750:	6013      	str	r3, [r2, #0]
 8003752:	4b3e      	ldr	r3, [pc, #248]	; (800384c <HAL_RCC_OscConfig+0x298>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a1b      	ldr	r3, [r3, #32]
 800375e:	493b      	ldr	r1, [pc, #236]	; (800384c <HAL_RCC_OscConfig+0x298>)
 8003760:	4313      	orrs	r3, r2
 8003762:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003764:	4b39      	ldr	r3, [pc, #228]	; (800384c <HAL_RCC_OscConfig+0x298>)
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	69db      	ldr	r3, [r3, #28]
 8003770:	021b      	lsls	r3, r3, #8
 8003772:	4936      	ldr	r1, [pc, #216]	; (800384c <HAL_RCC_OscConfig+0x298>)
 8003774:	4313      	orrs	r3, r2
 8003776:	604b      	str	r3, [r1, #4]
 8003778:	e01a      	b.n	80037b0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800377a:	4b34      	ldr	r3, [pc, #208]	; (800384c <HAL_RCC_OscConfig+0x298>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a33      	ldr	r2, [pc, #204]	; (800384c <HAL_RCC_OscConfig+0x298>)
 8003780:	f023 0301 	bic.w	r3, r3, #1
 8003784:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003786:	f7fd fd91 	bl	80012ac <HAL_GetTick>
 800378a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800378c:	e008      	b.n	80037a0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800378e:	f7fd fd8d 	bl	80012ac <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	2b02      	cmp	r3, #2
 800379a:	d901      	bls.n	80037a0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e2e7      	b.n	8003d70 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80037a0:	4b2a      	ldr	r3, [pc, #168]	; (800384c <HAL_RCC_OscConfig+0x298>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0302 	and.w	r3, r3, #2
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d1f0      	bne.n	800378e <HAL_RCC_OscConfig+0x1da>
 80037ac:	e000      	b.n	80037b0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80037ae:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0301 	and.w	r3, r3, #1
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d074      	beq.n	80038a6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	2b08      	cmp	r3, #8
 80037c0:	d005      	beq.n	80037ce <HAL_RCC_OscConfig+0x21a>
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	2b0c      	cmp	r3, #12
 80037c6:	d10e      	bne.n	80037e6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	2b03      	cmp	r3, #3
 80037cc:	d10b      	bne.n	80037e6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037ce:	4b1f      	ldr	r3, [pc, #124]	; (800384c <HAL_RCC_OscConfig+0x298>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d064      	beq.n	80038a4 <HAL_RCC_OscConfig+0x2f0>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d160      	bne.n	80038a4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e2c4      	b.n	8003d70 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037ee:	d106      	bne.n	80037fe <HAL_RCC_OscConfig+0x24a>
 80037f0:	4b16      	ldr	r3, [pc, #88]	; (800384c <HAL_RCC_OscConfig+0x298>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a15      	ldr	r2, [pc, #84]	; (800384c <HAL_RCC_OscConfig+0x298>)
 80037f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037fa:	6013      	str	r3, [r2, #0]
 80037fc:	e01d      	b.n	800383a <HAL_RCC_OscConfig+0x286>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003806:	d10c      	bne.n	8003822 <HAL_RCC_OscConfig+0x26e>
 8003808:	4b10      	ldr	r3, [pc, #64]	; (800384c <HAL_RCC_OscConfig+0x298>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a0f      	ldr	r2, [pc, #60]	; (800384c <HAL_RCC_OscConfig+0x298>)
 800380e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003812:	6013      	str	r3, [r2, #0]
 8003814:	4b0d      	ldr	r3, [pc, #52]	; (800384c <HAL_RCC_OscConfig+0x298>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a0c      	ldr	r2, [pc, #48]	; (800384c <HAL_RCC_OscConfig+0x298>)
 800381a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800381e:	6013      	str	r3, [r2, #0]
 8003820:	e00b      	b.n	800383a <HAL_RCC_OscConfig+0x286>
 8003822:	4b0a      	ldr	r3, [pc, #40]	; (800384c <HAL_RCC_OscConfig+0x298>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a09      	ldr	r2, [pc, #36]	; (800384c <HAL_RCC_OscConfig+0x298>)
 8003828:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800382c:	6013      	str	r3, [r2, #0]
 800382e:	4b07      	ldr	r3, [pc, #28]	; (800384c <HAL_RCC_OscConfig+0x298>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a06      	ldr	r2, [pc, #24]	; (800384c <HAL_RCC_OscConfig+0x298>)
 8003834:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003838:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d01c      	beq.n	800387c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003842:	f7fd fd33 	bl	80012ac <HAL_GetTick>
 8003846:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003848:	e011      	b.n	800386e <HAL_RCC_OscConfig+0x2ba>
 800384a:	bf00      	nop
 800384c:	40021000 	.word	0x40021000
 8003850:	08005b3c 	.word	0x08005b3c
 8003854:	200000c8 	.word	0x200000c8
 8003858:	200000cc 	.word	0x200000cc
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800385c:	f7fd fd26 	bl	80012ac <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	2b64      	cmp	r3, #100	; 0x64
 8003868:	d901      	bls.n	800386e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e280      	b.n	8003d70 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800386e:	4baf      	ldr	r3, [pc, #700]	; (8003b2c <HAL_RCC_OscConfig+0x578>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d0f0      	beq.n	800385c <HAL_RCC_OscConfig+0x2a8>
 800387a:	e014      	b.n	80038a6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800387c:	f7fd fd16 	bl	80012ac <HAL_GetTick>
 8003880:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003882:	e008      	b.n	8003896 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003884:	f7fd fd12 	bl	80012ac <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	2b64      	cmp	r3, #100	; 0x64
 8003890:	d901      	bls.n	8003896 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e26c      	b.n	8003d70 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003896:	4ba5      	ldr	r3, [pc, #660]	; (8003b2c <HAL_RCC_OscConfig+0x578>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d1f0      	bne.n	8003884 <HAL_RCC_OscConfig+0x2d0>
 80038a2:	e000      	b.n	80038a6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0302 	and.w	r3, r3, #2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d060      	beq.n	8003974 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	2b04      	cmp	r3, #4
 80038b6:	d005      	beq.n	80038c4 <HAL_RCC_OscConfig+0x310>
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	2b0c      	cmp	r3, #12
 80038bc:	d119      	bne.n	80038f2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	d116      	bne.n	80038f2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038c4:	4b99      	ldr	r3, [pc, #612]	; (8003b2c <HAL_RCC_OscConfig+0x578>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d005      	beq.n	80038dc <HAL_RCC_OscConfig+0x328>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d101      	bne.n	80038dc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e249      	b.n	8003d70 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038dc:	4b93      	ldr	r3, [pc, #588]	; (8003b2c <HAL_RCC_OscConfig+0x578>)
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	691b      	ldr	r3, [r3, #16]
 80038e8:	061b      	lsls	r3, r3, #24
 80038ea:	4990      	ldr	r1, [pc, #576]	; (8003b2c <HAL_RCC_OscConfig+0x578>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038f0:	e040      	b.n	8003974 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d023      	beq.n	8003942 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038fa:	4b8c      	ldr	r3, [pc, #560]	; (8003b2c <HAL_RCC_OscConfig+0x578>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a8b      	ldr	r2, [pc, #556]	; (8003b2c <HAL_RCC_OscConfig+0x578>)
 8003900:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003904:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003906:	f7fd fcd1 	bl	80012ac <HAL_GetTick>
 800390a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800390c:	e008      	b.n	8003920 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800390e:	f7fd fccd 	bl	80012ac <HAL_GetTick>
 8003912:	4602      	mov	r2, r0
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	2b02      	cmp	r3, #2
 800391a:	d901      	bls.n	8003920 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800391c:	2303      	movs	r3, #3
 800391e:	e227      	b.n	8003d70 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003920:	4b82      	ldr	r3, [pc, #520]	; (8003b2c <HAL_RCC_OscConfig+0x578>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003928:	2b00      	cmp	r3, #0
 800392a:	d0f0      	beq.n	800390e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800392c:	4b7f      	ldr	r3, [pc, #508]	; (8003b2c <HAL_RCC_OscConfig+0x578>)
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	691b      	ldr	r3, [r3, #16]
 8003938:	061b      	lsls	r3, r3, #24
 800393a:	497c      	ldr	r1, [pc, #496]	; (8003b2c <HAL_RCC_OscConfig+0x578>)
 800393c:	4313      	orrs	r3, r2
 800393e:	604b      	str	r3, [r1, #4]
 8003940:	e018      	b.n	8003974 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003942:	4b7a      	ldr	r3, [pc, #488]	; (8003b2c <HAL_RCC_OscConfig+0x578>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a79      	ldr	r2, [pc, #484]	; (8003b2c <HAL_RCC_OscConfig+0x578>)
 8003948:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800394c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800394e:	f7fd fcad 	bl	80012ac <HAL_GetTick>
 8003952:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003954:	e008      	b.n	8003968 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003956:	f7fd fca9 	bl	80012ac <HAL_GetTick>
 800395a:	4602      	mov	r2, r0
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	2b02      	cmp	r3, #2
 8003962:	d901      	bls.n	8003968 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e203      	b.n	8003d70 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003968:	4b70      	ldr	r3, [pc, #448]	; (8003b2c <HAL_RCC_OscConfig+0x578>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003970:	2b00      	cmp	r3, #0
 8003972:	d1f0      	bne.n	8003956 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0308 	and.w	r3, r3, #8
 800397c:	2b00      	cmp	r3, #0
 800397e:	d03c      	beq.n	80039fa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	695b      	ldr	r3, [r3, #20]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d01c      	beq.n	80039c2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003988:	4b68      	ldr	r3, [pc, #416]	; (8003b2c <HAL_RCC_OscConfig+0x578>)
 800398a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800398e:	4a67      	ldr	r2, [pc, #412]	; (8003b2c <HAL_RCC_OscConfig+0x578>)
 8003990:	f043 0301 	orr.w	r3, r3, #1
 8003994:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003998:	f7fd fc88 	bl	80012ac <HAL_GetTick>
 800399c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800399e:	e008      	b.n	80039b2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039a0:	f7fd fc84 	bl	80012ac <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d901      	bls.n	80039b2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e1de      	b.n	8003d70 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039b2:	4b5e      	ldr	r3, [pc, #376]	; (8003b2c <HAL_RCC_OscConfig+0x578>)
 80039b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039b8:	f003 0302 	and.w	r3, r3, #2
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d0ef      	beq.n	80039a0 <HAL_RCC_OscConfig+0x3ec>
 80039c0:	e01b      	b.n	80039fa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039c2:	4b5a      	ldr	r3, [pc, #360]	; (8003b2c <HAL_RCC_OscConfig+0x578>)
 80039c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039c8:	4a58      	ldr	r2, [pc, #352]	; (8003b2c <HAL_RCC_OscConfig+0x578>)
 80039ca:	f023 0301 	bic.w	r3, r3, #1
 80039ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039d2:	f7fd fc6b 	bl	80012ac <HAL_GetTick>
 80039d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039d8:	e008      	b.n	80039ec <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039da:	f7fd fc67 	bl	80012ac <HAL_GetTick>
 80039de:	4602      	mov	r2, r0
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d901      	bls.n	80039ec <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80039e8:	2303      	movs	r3, #3
 80039ea:	e1c1      	b.n	8003d70 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039ec:	4b4f      	ldr	r3, [pc, #316]	; (8003b2c <HAL_RCC_OscConfig+0x578>)
 80039ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d1ef      	bne.n	80039da <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0304 	and.w	r3, r3, #4
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	f000 80a6 	beq.w	8003b54 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003a0c:	4b47      	ldr	r3, [pc, #284]	; (8003b2c <HAL_RCC_OscConfig+0x578>)
 8003a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d10d      	bne.n	8003a34 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a18:	4b44      	ldr	r3, [pc, #272]	; (8003b2c <HAL_RCC_OscConfig+0x578>)
 8003a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a1c:	4a43      	ldr	r2, [pc, #268]	; (8003b2c <HAL_RCC_OscConfig+0x578>)
 8003a1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a22:	6593      	str	r3, [r2, #88]	; 0x58
 8003a24:	4b41      	ldr	r3, [pc, #260]	; (8003b2c <HAL_RCC_OscConfig+0x578>)
 8003a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a2c:	60bb      	str	r3, [r7, #8]
 8003a2e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a30:	2301      	movs	r3, #1
 8003a32:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a34:	4b3e      	ldr	r3, [pc, #248]	; (8003b30 <HAL_RCC_OscConfig+0x57c>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d118      	bne.n	8003a72 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a40:	4b3b      	ldr	r3, [pc, #236]	; (8003b30 <HAL_RCC_OscConfig+0x57c>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a3a      	ldr	r2, [pc, #232]	; (8003b30 <HAL_RCC_OscConfig+0x57c>)
 8003a46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a4a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a4c:	f7fd fc2e 	bl	80012ac <HAL_GetTick>
 8003a50:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a52:	e008      	b.n	8003a66 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a54:	f7fd fc2a 	bl	80012ac <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d901      	bls.n	8003a66 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e184      	b.n	8003d70 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a66:	4b32      	ldr	r3, [pc, #200]	; (8003b30 <HAL_RCC_OscConfig+0x57c>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d0f0      	beq.n	8003a54 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d108      	bne.n	8003a8c <HAL_RCC_OscConfig+0x4d8>
 8003a7a:	4b2c      	ldr	r3, [pc, #176]	; (8003b2c <HAL_RCC_OscConfig+0x578>)
 8003a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a80:	4a2a      	ldr	r2, [pc, #168]	; (8003b2c <HAL_RCC_OscConfig+0x578>)
 8003a82:	f043 0301 	orr.w	r3, r3, #1
 8003a86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a8a:	e024      	b.n	8003ad6 <HAL_RCC_OscConfig+0x522>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	2b05      	cmp	r3, #5
 8003a92:	d110      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x502>
 8003a94:	4b25      	ldr	r3, [pc, #148]	; (8003b2c <HAL_RCC_OscConfig+0x578>)
 8003a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a9a:	4a24      	ldr	r2, [pc, #144]	; (8003b2c <HAL_RCC_OscConfig+0x578>)
 8003a9c:	f043 0304 	orr.w	r3, r3, #4
 8003aa0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003aa4:	4b21      	ldr	r3, [pc, #132]	; (8003b2c <HAL_RCC_OscConfig+0x578>)
 8003aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aaa:	4a20      	ldr	r2, [pc, #128]	; (8003b2c <HAL_RCC_OscConfig+0x578>)
 8003aac:	f043 0301 	orr.w	r3, r3, #1
 8003ab0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ab4:	e00f      	b.n	8003ad6 <HAL_RCC_OscConfig+0x522>
 8003ab6:	4b1d      	ldr	r3, [pc, #116]	; (8003b2c <HAL_RCC_OscConfig+0x578>)
 8003ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003abc:	4a1b      	ldr	r2, [pc, #108]	; (8003b2c <HAL_RCC_OscConfig+0x578>)
 8003abe:	f023 0301 	bic.w	r3, r3, #1
 8003ac2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ac6:	4b19      	ldr	r3, [pc, #100]	; (8003b2c <HAL_RCC_OscConfig+0x578>)
 8003ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003acc:	4a17      	ldr	r2, [pc, #92]	; (8003b2c <HAL_RCC_OscConfig+0x578>)
 8003ace:	f023 0304 	bic.w	r3, r3, #4
 8003ad2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d016      	beq.n	8003b0c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ade:	f7fd fbe5 	bl	80012ac <HAL_GetTick>
 8003ae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ae4:	e00a      	b.n	8003afc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ae6:	f7fd fbe1 	bl	80012ac <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d901      	bls.n	8003afc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	e139      	b.n	8003d70 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003afc:	4b0b      	ldr	r3, [pc, #44]	; (8003b2c <HAL_RCC_OscConfig+0x578>)
 8003afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d0ed      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x532>
 8003b0a:	e01a      	b.n	8003b42 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b0c:	f7fd fbce 	bl	80012ac <HAL_GetTick>
 8003b10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b12:	e00f      	b.n	8003b34 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b14:	f7fd fbca 	bl	80012ac <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d906      	bls.n	8003b34 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e122      	b.n	8003d70 <HAL_RCC_OscConfig+0x7bc>
 8003b2a:	bf00      	nop
 8003b2c:	40021000 	.word	0x40021000
 8003b30:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b34:	4b90      	ldr	r3, [pc, #576]	; (8003d78 <HAL_RCC_OscConfig+0x7c4>)
 8003b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b3a:	f003 0302 	and.w	r3, r3, #2
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d1e8      	bne.n	8003b14 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b42:	7ffb      	ldrb	r3, [r7, #31]
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d105      	bne.n	8003b54 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b48:	4b8b      	ldr	r3, [pc, #556]	; (8003d78 <HAL_RCC_OscConfig+0x7c4>)
 8003b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b4c:	4a8a      	ldr	r2, [pc, #552]	; (8003d78 <HAL_RCC_OscConfig+0x7c4>)
 8003b4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b52:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	f000 8108 	beq.w	8003d6e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	f040 80d0 	bne.w	8003d08 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003b68:	4b83      	ldr	r3, [pc, #524]	; (8003d78 <HAL_RCC_OscConfig+0x7c4>)
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	f003 0203 	and.w	r2, r3, #3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d130      	bne.n	8003bde <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b86:	3b01      	subs	r3, #1
 8003b88:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d127      	bne.n	8003bde <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b98:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d11f      	bne.n	8003bde <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ba8:	2a07      	cmp	r2, #7
 8003baa:	bf14      	ite	ne
 8003bac:	2201      	movne	r2, #1
 8003bae:	2200      	moveq	r2, #0
 8003bb0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d113      	bne.n	8003bde <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bc0:	085b      	lsrs	r3, r3, #1
 8003bc2:	3b01      	subs	r3, #1
 8003bc4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d109      	bne.n	8003bde <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd4:	085b      	lsrs	r3, r3, #1
 8003bd6:	3b01      	subs	r3, #1
 8003bd8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d06e      	beq.n	8003cbc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	2b0c      	cmp	r3, #12
 8003be2:	d069      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003be4:	4b64      	ldr	r3, [pc, #400]	; (8003d78 <HAL_RCC_OscConfig+0x7c4>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d105      	bne.n	8003bfc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003bf0:	4b61      	ldr	r3, [pc, #388]	; (8003d78 <HAL_RCC_OscConfig+0x7c4>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d001      	beq.n	8003c00 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e0b7      	b.n	8003d70 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003c00:	4b5d      	ldr	r3, [pc, #372]	; (8003d78 <HAL_RCC_OscConfig+0x7c4>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a5c      	ldr	r2, [pc, #368]	; (8003d78 <HAL_RCC_OscConfig+0x7c4>)
 8003c06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c0a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c0c:	f7fd fb4e 	bl	80012ac <HAL_GetTick>
 8003c10:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c12:	e008      	b.n	8003c26 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c14:	f7fd fb4a 	bl	80012ac <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d901      	bls.n	8003c26 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e0a4      	b.n	8003d70 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c26:	4b54      	ldr	r3, [pc, #336]	; (8003d78 <HAL_RCC_OscConfig+0x7c4>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d1f0      	bne.n	8003c14 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c32:	4b51      	ldr	r3, [pc, #324]	; (8003d78 <HAL_RCC_OscConfig+0x7c4>)
 8003c34:	68da      	ldr	r2, [r3, #12]
 8003c36:	4b51      	ldr	r3, [pc, #324]	; (8003d7c <HAL_RCC_OscConfig+0x7c8>)
 8003c38:	4013      	ands	r3, r2
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003c42:	3a01      	subs	r2, #1
 8003c44:	0112      	lsls	r2, r2, #4
 8003c46:	4311      	orrs	r1, r2
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c4c:	0212      	lsls	r2, r2, #8
 8003c4e:	4311      	orrs	r1, r2
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003c54:	0852      	lsrs	r2, r2, #1
 8003c56:	3a01      	subs	r2, #1
 8003c58:	0552      	lsls	r2, r2, #21
 8003c5a:	4311      	orrs	r1, r2
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003c60:	0852      	lsrs	r2, r2, #1
 8003c62:	3a01      	subs	r2, #1
 8003c64:	0652      	lsls	r2, r2, #25
 8003c66:	4311      	orrs	r1, r2
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c6c:	0912      	lsrs	r2, r2, #4
 8003c6e:	0452      	lsls	r2, r2, #17
 8003c70:	430a      	orrs	r2, r1
 8003c72:	4941      	ldr	r1, [pc, #260]	; (8003d78 <HAL_RCC_OscConfig+0x7c4>)
 8003c74:	4313      	orrs	r3, r2
 8003c76:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003c78:	4b3f      	ldr	r3, [pc, #252]	; (8003d78 <HAL_RCC_OscConfig+0x7c4>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a3e      	ldr	r2, [pc, #248]	; (8003d78 <HAL_RCC_OscConfig+0x7c4>)
 8003c7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c82:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c84:	4b3c      	ldr	r3, [pc, #240]	; (8003d78 <HAL_RCC_OscConfig+0x7c4>)
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	4a3b      	ldr	r2, [pc, #236]	; (8003d78 <HAL_RCC_OscConfig+0x7c4>)
 8003c8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c8e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c90:	f7fd fb0c 	bl	80012ac <HAL_GetTick>
 8003c94:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c96:	e008      	b.n	8003caa <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c98:	f7fd fb08 	bl	80012ac <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d901      	bls.n	8003caa <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e062      	b.n	8003d70 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003caa:	4b33      	ldr	r3, [pc, #204]	; (8003d78 <HAL_RCC_OscConfig+0x7c4>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d0f0      	beq.n	8003c98 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003cb6:	e05a      	b.n	8003d6e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e059      	b.n	8003d70 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cbc:	4b2e      	ldr	r3, [pc, #184]	; (8003d78 <HAL_RCC_OscConfig+0x7c4>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d152      	bne.n	8003d6e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003cc8:	4b2b      	ldr	r3, [pc, #172]	; (8003d78 <HAL_RCC_OscConfig+0x7c4>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a2a      	ldr	r2, [pc, #168]	; (8003d78 <HAL_RCC_OscConfig+0x7c4>)
 8003cce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cd2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003cd4:	4b28      	ldr	r3, [pc, #160]	; (8003d78 <HAL_RCC_OscConfig+0x7c4>)
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	4a27      	ldr	r2, [pc, #156]	; (8003d78 <HAL_RCC_OscConfig+0x7c4>)
 8003cda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cde:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003ce0:	f7fd fae4 	bl	80012ac <HAL_GetTick>
 8003ce4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ce6:	e008      	b.n	8003cfa <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ce8:	f7fd fae0 	bl	80012ac <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d901      	bls.n	8003cfa <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e03a      	b.n	8003d70 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cfa:	4b1f      	ldr	r3, [pc, #124]	; (8003d78 <HAL_RCC_OscConfig+0x7c4>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d0f0      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x734>
 8003d06:	e032      	b.n	8003d6e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	2b0c      	cmp	r3, #12
 8003d0c:	d02d      	beq.n	8003d6a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d0e:	4b1a      	ldr	r3, [pc, #104]	; (8003d78 <HAL_RCC_OscConfig+0x7c4>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a19      	ldr	r2, [pc, #100]	; (8003d78 <HAL_RCC_OscConfig+0x7c4>)
 8003d14:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d18:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003d1a:	4b17      	ldr	r3, [pc, #92]	; (8003d78 <HAL_RCC_OscConfig+0x7c4>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d105      	bne.n	8003d32 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003d26:	4b14      	ldr	r3, [pc, #80]	; (8003d78 <HAL_RCC_OscConfig+0x7c4>)
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	4a13      	ldr	r2, [pc, #76]	; (8003d78 <HAL_RCC_OscConfig+0x7c4>)
 8003d2c:	f023 0303 	bic.w	r3, r3, #3
 8003d30:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003d32:	4b11      	ldr	r3, [pc, #68]	; (8003d78 <HAL_RCC_OscConfig+0x7c4>)
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	4a10      	ldr	r2, [pc, #64]	; (8003d78 <HAL_RCC_OscConfig+0x7c4>)
 8003d38:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003d3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d40:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d42:	f7fd fab3 	bl	80012ac <HAL_GetTick>
 8003d46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d48:	e008      	b.n	8003d5c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d4a:	f7fd faaf 	bl	80012ac <HAL_GetTick>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d901      	bls.n	8003d5c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003d58:	2303      	movs	r3, #3
 8003d5a:	e009      	b.n	8003d70 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d5c:	4b06      	ldr	r3, [pc, #24]	; (8003d78 <HAL_RCC_OscConfig+0x7c4>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d1f0      	bne.n	8003d4a <HAL_RCC_OscConfig+0x796>
 8003d68:	e001      	b.n	8003d6e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e000      	b.n	8003d70 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3720      	adds	r7, #32
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	40021000 	.word	0x40021000
 8003d7c:	f99d808c 	.word	0xf99d808c

08003d80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d101      	bne.n	8003d94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e0c8      	b.n	8003f26 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d94:	4b66      	ldr	r3, [pc, #408]	; (8003f30 <HAL_RCC_ClockConfig+0x1b0>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0307 	and.w	r3, r3, #7
 8003d9c:	683a      	ldr	r2, [r7, #0]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d910      	bls.n	8003dc4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003da2:	4b63      	ldr	r3, [pc, #396]	; (8003f30 <HAL_RCC_ClockConfig+0x1b0>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f023 0207 	bic.w	r2, r3, #7
 8003daa:	4961      	ldr	r1, [pc, #388]	; (8003f30 <HAL_RCC_ClockConfig+0x1b0>)
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003db2:	4b5f      	ldr	r3, [pc, #380]	; (8003f30 <HAL_RCC_ClockConfig+0x1b0>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0307 	and.w	r3, r3, #7
 8003dba:	683a      	ldr	r2, [r7, #0]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d001      	beq.n	8003dc4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e0b0      	b.n	8003f26 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0301 	and.w	r3, r3, #1
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d04c      	beq.n	8003e6a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	2b03      	cmp	r3, #3
 8003dd6:	d107      	bne.n	8003de8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dd8:	4b56      	ldr	r3, [pc, #344]	; (8003f34 <HAL_RCC_ClockConfig+0x1b4>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d121      	bne.n	8003e28 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e09e      	b.n	8003f26 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d107      	bne.n	8003e00 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003df0:	4b50      	ldr	r3, [pc, #320]	; (8003f34 <HAL_RCC_ClockConfig+0x1b4>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d115      	bne.n	8003e28 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e092      	b.n	8003f26 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d107      	bne.n	8003e18 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e08:	4b4a      	ldr	r3, [pc, #296]	; (8003f34 <HAL_RCC_ClockConfig+0x1b4>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0302 	and.w	r3, r3, #2
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d109      	bne.n	8003e28 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e086      	b.n	8003f26 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e18:	4b46      	ldr	r3, [pc, #280]	; (8003f34 <HAL_RCC_ClockConfig+0x1b4>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d101      	bne.n	8003e28 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e07e      	b.n	8003f26 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e28:	4b42      	ldr	r3, [pc, #264]	; (8003f34 <HAL_RCC_ClockConfig+0x1b4>)
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	f023 0203 	bic.w	r2, r3, #3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	493f      	ldr	r1, [pc, #252]	; (8003f34 <HAL_RCC_ClockConfig+0x1b4>)
 8003e36:	4313      	orrs	r3, r2
 8003e38:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e3a:	f7fd fa37 	bl	80012ac <HAL_GetTick>
 8003e3e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e40:	e00a      	b.n	8003e58 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e42:	f7fd fa33 	bl	80012ac <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d901      	bls.n	8003e58 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	e066      	b.n	8003f26 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e58:	4b36      	ldr	r3, [pc, #216]	; (8003f34 <HAL_RCC_ClockConfig+0x1b4>)
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	f003 020c 	and.w	r2, r3, #12
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d1eb      	bne.n	8003e42 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0302 	and.w	r3, r3, #2
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d008      	beq.n	8003e88 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e76:	4b2f      	ldr	r3, [pc, #188]	; (8003f34 <HAL_RCC_ClockConfig+0x1b4>)
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	492c      	ldr	r1, [pc, #176]	; (8003f34 <HAL_RCC_ClockConfig+0x1b4>)
 8003e84:	4313      	orrs	r3, r2
 8003e86:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e88:	4b29      	ldr	r3, [pc, #164]	; (8003f30 <HAL_RCC_ClockConfig+0x1b0>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0307 	and.w	r3, r3, #7
 8003e90:	683a      	ldr	r2, [r7, #0]
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d210      	bcs.n	8003eb8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e96:	4b26      	ldr	r3, [pc, #152]	; (8003f30 <HAL_RCC_ClockConfig+0x1b0>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f023 0207 	bic.w	r2, r3, #7
 8003e9e:	4924      	ldr	r1, [pc, #144]	; (8003f30 <HAL_RCC_ClockConfig+0x1b0>)
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ea6:	4b22      	ldr	r3, [pc, #136]	; (8003f30 <HAL_RCC_ClockConfig+0x1b0>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0307 	and.w	r3, r3, #7
 8003eae:	683a      	ldr	r2, [r7, #0]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d001      	beq.n	8003eb8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e036      	b.n	8003f26 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0304 	and.w	r3, r3, #4
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d008      	beq.n	8003ed6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ec4:	4b1b      	ldr	r3, [pc, #108]	; (8003f34 <HAL_RCC_ClockConfig+0x1b4>)
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	4918      	ldr	r1, [pc, #96]	; (8003f34 <HAL_RCC_ClockConfig+0x1b4>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0308 	and.w	r3, r3, #8
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d009      	beq.n	8003ef6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ee2:	4b14      	ldr	r3, [pc, #80]	; (8003f34 <HAL_RCC_ClockConfig+0x1b4>)
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	00db      	lsls	r3, r3, #3
 8003ef0:	4910      	ldr	r1, [pc, #64]	; (8003f34 <HAL_RCC_ClockConfig+0x1b4>)
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ef6:	f000 f825 	bl	8003f44 <HAL_RCC_GetSysClockFreq>
 8003efa:	4601      	mov	r1, r0
 8003efc:	4b0d      	ldr	r3, [pc, #52]	; (8003f34 <HAL_RCC_ClockConfig+0x1b4>)
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	091b      	lsrs	r3, r3, #4
 8003f02:	f003 030f 	and.w	r3, r3, #15
 8003f06:	4a0c      	ldr	r2, [pc, #48]	; (8003f38 <HAL_RCC_ClockConfig+0x1b8>)
 8003f08:	5cd3      	ldrb	r3, [r2, r3]
 8003f0a:	f003 031f 	and.w	r3, r3, #31
 8003f0e:	fa21 f303 	lsr.w	r3, r1, r3
 8003f12:	4a0a      	ldr	r2, [pc, #40]	; (8003f3c <HAL_RCC_ClockConfig+0x1bc>)
 8003f14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003f16:	4b0a      	ldr	r3, [pc, #40]	; (8003f40 <HAL_RCC_ClockConfig+0x1c0>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f7fd f976 	bl	800120c <HAL_InitTick>
 8003f20:	4603      	mov	r3, r0
 8003f22:	72fb      	strb	r3, [r7, #11]

  return status;
 8003f24:	7afb      	ldrb	r3, [r7, #11]
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3710      	adds	r7, #16
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	40022000 	.word	0x40022000
 8003f34:	40021000 	.word	0x40021000
 8003f38:	08005b3c 	.word	0x08005b3c
 8003f3c:	200000c8 	.word	0x200000c8
 8003f40:	200000cc 	.word	0x200000cc

08003f44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b089      	sub	sp, #36	; 0x24
 8003f48:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	61fb      	str	r3, [r7, #28]
 8003f4e:	2300      	movs	r3, #0
 8003f50:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f52:	4b3d      	ldr	r3, [pc, #244]	; (8004048 <HAL_RCC_GetSysClockFreq+0x104>)
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	f003 030c 	and.w	r3, r3, #12
 8003f5a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f5c:	4b3a      	ldr	r3, [pc, #232]	; (8004048 <HAL_RCC_GetSysClockFreq+0x104>)
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	f003 0303 	and.w	r3, r3, #3
 8003f64:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d005      	beq.n	8003f78 <HAL_RCC_GetSysClockFreq+0x34>
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	2b0c      	cmp	r3, #12
 8003f70:	d121      	bne.n	8003fb6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d11e      	bne.n	8003fb6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003f78:	4b33      	ldr	r3, [pc, #204]	; (8004048 <HAL_RCC_GetSysClockFreq+0x104>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0308 	and.w	r3, r3, #8
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d107      	bne.n	8003f94 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003f84:	4b30      	ldr	r3, [pc, #192]	; (8004048 <HAL_RCC_GetSysClockFreq+0x104>)
 8003f86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f8a:	0a1b      	lsrs	r3, r3, #8
 8003f8c:	f003 030f 	and.w	r3, r3, #15
 8003f90:	61fb      	str	r3, [r7, #28]
 8003f92:	e005      	b.n	8003fa0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003f94:	4b2c      	ldr	r3, [pc, #176]	; (8004048 <HAL_RCC_GetSysClockFreq+0x104>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	091b      	lsrs	r3, r3, #4
 8003f9a:	f003 030f 	and.w	r3, r3, #15
 8003f9e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003fa0:	4a2a      	ldr	r2, [pc, #168]	; (800404c <HAL_RCC_GetSysClockFreq+0x108>)
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fa8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d10d      	bne.n	8003fcc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003fb4:	e00a      	b.n	8003fcc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	2b04      	cmp	r3, #4
 8003fba:	d102      	bne.n	8003fc2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003fbc:	4b24      	ldr	r3, [pc, #144]	; (8004050 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003fbe:	61bb      	str	r3, [r7, #24]
 8003fc0:	e004      	b.n	8003fcc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	2b08      	cmp	r3, #8
 8003fc6:	d101      	bne.n	8003fcc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003fc8:	4b22      	ldr	r3, [pc, #136]	; (8004054 <HAL_RCC_GetSysClockFreq+0x110>)
 8003fca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	2b0c      	cmp	r3, #12
 8003fd0:	d133      	bne.n	800403a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003fd2:	4b1d      	ldr	r3, [pc, #116]	; (8004048 <HAL_RCC_GetSysClockFreq+0x104>)
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	f003 0303 	and.w	r3, r3, #3
 8003fda:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d002      	beq.n	8003fe8 <HAL_RCC_GetSysClockFreq+0xa4>
 8003fe2:	2b03      	cmp	r3, #3
 8003fe4:	d003      	beq.n	8003fee <HAL_RCC_GetSysClockFreq+0xaa>
 8003fe6:	e005      	b.n	8003ff4 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003fe8:	4b19      	ldr	r3, [pc, #100]	; (8004050 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003fea:	617b      	str	r3, [r7, #20]
      break;
 8003fec:	e005      	b.n	8003ffa <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003fee:	4b19      	ldr	r3, [pc, #100]	; (8004054 <HAL_RCC_GetSysClockFreq+0x110>)
 8003ff0:	617b      	str	r3, [r7, #20]
      break;
 8003ff2:	e002      	b.n	8003ffa <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	617b      	str	r3, [r7, #20]
      break;
 8003ff8:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ffa:	4b13      	ldr	r3, [pc, #76]	; (8004048 <HAL_RCC_GetSysClockFreq+0x104>)
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	091b      	lsrs	r3, r3, #4
 8004000:	f003 0307 	and.w	r3, r3, #7
 8004004:	3301      	adds	r3, #1
 8004006:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004008:	4b0f      	ldr	r3, [pc, #60]	; (8004048 <HAL_RCC_GetSysClockFreq+0x104>)
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	0a1b      	lsrs	r3, r3, #8
 800400e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004012:	697a      	ldr	r2, [r7, #20]
 8004014:	fb02 f203 	mul.w	r2, r2, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	fbb2 f3f3 	udiv	r3, r2, r3
 800401e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004020:	4b09      	ldr	r3, [pc, #36]	; (8004048 <HAL_RCC_GetSysClockFreq+0x104>)
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	0e5b      	lsrs	r3, r3, #25
 8004026:	f003 0303 	and.w	r3, r3, #3
 800402a:	3301      	adds	r3, #1
 800402c:	005b      	lsls	r3, r3, #1
 800402e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004030:	697a      	ldr	r2, [r7, #20]
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	fbb2 f3f3 	udiv	r3, r2, r3
 8004038:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800403a:	69bb      	ldr	r3, [r7, #24]
}
 800403c:	4618      	mov	r0, r3
 800403e:	3724      	adds	r7, #36	; 0x24
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr
 8004048:	40021000 	.word	0x40021000
 800404c:	08005b54 	.word	0x08005b54
 8004050:	00f42400 	.word	0x00f42400
 8004054:	007a1200 	.word	0x007a1200

08004058 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004058:	b480      	push	{r7}
 800405a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800405c:	4b03      	ldr	r3, [pc, #12]	; (800406c <HAL_RCC_GetHCLKFreq+0x14>)
 800405e:	681b      	ldr	r3, [r3, #0]
}
 8004060:	4618      	mov	r0, r3
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr
 800406a:	bf00      	nop
 800406c:	200000c8 	.word	0x200000c8

08004070 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004074:	f7ff fff0 	bl	8004058 <HAL_RCC_GetHCLKFreq>
 8004078:	4601      	mov	r1, r0
 800407a:	4b06      	ldr	r3, [pc, #24]	; (8004094 <HAL_RCC_GetPCLK1Freq+0x24>)
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	0a1b      	lsrs	r3, r3, #8
 8004080:	f003 0307 	and.w	r3, r3, #7
 8004084:	4a04      	ldr	r2, [pc, #16]	; (8004098 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004086:	5cd3      	ldrb	r3, [r2, r3]
 8004088:	f003 031f 	and.w	r3, r3, #31
 800408c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004090:	4618      	mov	r0, r3
 8004092:	bd80      	pop	{r7, pc}
 8004094:	40021000 	.word	0x40021000
 8004098:	08005b4c 	.word	0x08005b4c

0800409c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80040a0:	f7ff ffda 	bl	8004058 <HAL_RCC_GetHCLKFreq>
 80040a4:	4601      	mov	r1, r0
 80040a6:	4b06      	ldr	r3, [pc, #24]	; (80040c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	0adb      	lsrs	r3, r3, #11
 80040ac:	f003 0307 	and.w	r3, r3, #7
 80040b0:	4a04      	ldr	r2, [pc, #16]	; (80040c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80040b2:	5cd3      	ldrb	r3, [r2, r3]
 80040b4:	f003 031f 	and.w	r3, r3, #31
 80040b8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80040bc:	4618      	mov	r0, r3
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	40021000 	.word	0x40021000
 80040c4:	08005b4c 	.word	0x08005b4c

080040c8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b086      	sub	sp, #24
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80040d0:	2300      	movs	r3, #0
 80040d2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80040d4:	4b2a      	ldr	r3, [pc, #168]	; (8004180 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d003      	beq.n	80040e8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80040e0:	f7ff fa04 	bl	80034ec <HAL_PWREx_GetVoltageRange>
 80040e4:	6178      	str	r0, [r7, #20]
 80040e6:	e014      	b.n	8004112 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80040e8:	4b25      	ldr	r3, [pc, #148]	; (8004180 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ec:	4a24      	ldr	r2, [pc, #144]	; (8004180 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040f2:	6593      	str	r3, [r2, #88]	; 0x58
 80040f4:	4b22      	ldr	r3, [pc, #136]	; (8004180 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040fc:	60fb      	str	r3, [r7, #12]
 80040fe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004100:	f7ff f9f4 	bl	80034ec <HAL_PWREx_GetVoltageRange>
 8004104:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004106:	4b1e      	ldr	r3, [pc, #120]	; (8004180 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800410a:	4a1d      	ldr	r2, [pc, #116]	; (8004180 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800410c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004110:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004118:	d10b      	bne.n	8004132 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2b80      	cmp	r3, #128	; 0x80
 800411e:	d919      	bls.n	8004154 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2ba0      	cmp	r3, #160	; 0xa0
 8004124:	d902      	bls.n	800412c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004126:	2302      	movs	r3, #2
 8004128:	613b      	str	r3, [r7, #16]
 800412a:	e013      	b.n	8004154 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800412c:	2301      	movs	r3, #1
 800412e:	613b      	str	r3, [r7, #16]
 8004130:	e010      	b.n	8004154 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2b80      	cmp	r3, #128	; 0x80
 8004136:	d902      	bls.n	800413e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004138:	2303      	movs	r3, #3
 800413a:	613b      	str	r3, [r7, #16]
 800413c:	e00a      	b.n	8004154 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2b80      	cmp	r3, #128	; 0x80
 8004142:	d102      	bne.n	800414a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004144:	2302      	movs	r3, #2
 8004146:	613b      	str	r3, [r7, #16]
 8004148:	e004      	b.n	8004154 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2b70      	cmp	r3, #112	; 0x70
 800414e:	d101      	bne.n	8004154 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004150:	2301      	movs	r3, #1
 8004152:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004154:	4b0b      	ldr	r3, [pc, #44]	; (8004184 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f023 0207 	bic.w	r2, r3, #7
 800415c:	4909      	ldr	r1, [pc, #36]	; (8004184 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	4313      	orrs	r3, r2
 8004162:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004164:	4b07      	ldr	r3, [pc, #28]	; (8004184 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0307 	and.w	r3, r3, #7
 800416c:	693a      	ldr	r2, [r7, #16]
 800416e:	429a      	cmp	r2, r3
 8004170:	d001      	beq.n	8004176 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e000      	b.n	8004178 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004176:	2300      	movs	r3, #0
}
 8004178:	4618      	mov	r0, r3
 800417a:	3718      	adds	r7, #24
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}
 8004180:	40021000 	.word	0x40021000
 8004184:	40022000 	.word	0x40022000

08004188 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b086      	sub	sp, #24
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004190:	2300      	movs	r3, #0
 8004192:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004194:	2300      	movs	r3, #0
 8004196:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d03f      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041ac:	d01c      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80041ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041b2:	d802      	bhi.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x32>
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d00e      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80041b8:	e01f      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x72>
 80041ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80041be:	d003      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80041c0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80041c4:	d01c      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80041c6:	e018      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80041c8:	4b85      	ldr	r3, [pc, #532]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	4a84      	ldr	r2, [pc, #528]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80041ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041d2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80041d4:	e015      	b.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	3304      	adds	r3, #4
 80041da:	2100      	movs	r1, #0
 80041dc:	4618      	mov	r0, r3
 80041de:	f000 fab9 	bl	8004754 <RCCEx_PLLSAI1_Config>
 80041e2:	4603      	mov	r3, r0
 80041e4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80041e6:	e00c      	b.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	3320      	adds	r3, #32
 80041ec:	2100      	movs	r1, #0
 80041ee:	4618      	mov	r0, r3
 80041f0:	f000 fba0 	bl	8004934 <RCCEx_PLLSAI2_Config>
 80041f4:	4603      	mov	r3, r0
 80041f6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80041f8:	e003      	b.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	74fb      	strb	r3, [r7, #19]
      break;
 80041fe:	e000      	b.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8004200:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004202:	7cfb      	ldrb	r3, [r7, #19]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d10b      	bne.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004208:	4b75      	ldr	r3, [pc, #468]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800420a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800420e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004216:	4972      	ldr	r1, [pc, #456]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004218:	4313      	orrs	r3, r2
 800421a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800421e:	e001      	b.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004220:	7cfb      	ldrb	r3, [r7, #19]
 8004222:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d03f      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004234:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004238:	d01c      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800423a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800423e:	d802      	bhi.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8004240:	2b00      	cmp	r3, #0
 8004242:	d00e      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8004244:	e01f      	b.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004246:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800424a:	d003      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 800424c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004250:	d01c      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x104>
 8004252:	e018      	b.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004254:	4b62      	ldr	r3, [pc, #392]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	4a61      	ldr	r2, [pc, #388]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800425a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800425e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004260:	e015      	b.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	3304      	adds	r3, #4
 8004266:	2100      	movs	r1, #0
 8004268:	4618      	mov	r0, r3
 800426a:	f000 fa73 	bl	8004754 <RCCEx_PLLSAI1_Config>
 800426e:	4603      	mov	r3, r0
 8004270:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004272:	e00c      	b.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	3320      	adds	r3, #32
 8004278:	2100      	movs	r1, #0
 800427a:	4618      	mov	r0, r3
 800427c:	f000 fb5a 	bl	8004934 <RCCEx_PLLSAI2_Config>
 8004280:	4603      	mov	r3, r0
 8004282:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004284:	e003      	b.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	74fb      	strb	r3, [r7, #19]
      break;
 800428a:	e000      	b.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800428c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800428e:	7cfb      	ldrb	r3, [r7, #19]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d10b      	bne.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004294:	4b52      	ldr	r3, [pc, #328]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800429a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042a2:	494f      	ldr	r1, [pc, #316]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80042a4:	4313      	orrs	r3, r2
 80042a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80042aa:	e001      	b.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042ac:	7cfb      	ldrb	r3, [r7, #19]
 80042ae:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	f000 80a0 	beq.w	80043fe <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042be:	2300      	movs	r3, #0
 80042c0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80042c2:	4b47      	ldr	r3, [pc, #284]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80042c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d101      	bne.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80042ce:	2301      	movs	r3, #1
 80042d0:	e000      	b.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80042d2:	2300      	movs	r3, #0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d00d      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042d8:	4b41      	ldr	r3, [pc, #260]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80042da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042dc:	4a40      	ldr	r2, [pc, #256]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80042de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042e2:	6593      	str	r3, [r2, #88]	; 0x58
 80042e4:	4b3e      	ldr	r3, [pc, #248]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80042e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ec:	60bb      	str	r3, [r7, #8]
 80042ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042f0:	2301      	movs	r3, #1
 80042f2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042f4:	4b3b      	ldr	r3, [pc, #236]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a3a      	ldr	r2, [pc, #232]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80042fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042fe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004300:	f7fc ffd4 	bl	80012ac <HAL_GetTick>
 8004304:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004306:	e009      	b.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004308:	f7fc ffd0 	bl	80012ac <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	2b02      	cmp	r3, #2
 8004314:	d902      	bls.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	74fb      	strb	r3, [r7, #19]
        break;
 800431a:	e005      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800431c:	4b31      	ldr	r3, [pc, #196]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004324:	2b00      	cmp	r3, #0
 8004326:	d0ef      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8004328:	7cfb      	ldrb	r3, [r7, #19]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d15c      	bne.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800432e:	4b2c      	ldr	r3, [pc, #176]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004330:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004334:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004338:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d01f      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004346:	697a      	ldr	r2, [r7, #20]
 8004348:	429a      	cmp	r2, r3
 800434a:	d019      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800434c:	4b24      	ldr	r3, [pc, #144]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800434e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004352:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004356:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004358:	4b21      	ldr	r3, [pc, #132]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800435a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800435e:	4a20      	ldr	r2, [pc, #128]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004360:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004364:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004368:	4b1d      	ldr	r3, [pc, #116]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800436a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800436e:	4a1c      	ldr	r2, [pc, #112]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004370:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004374:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004378:	4a19      	ldr	r2, [pc, #100]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	f003 0301 	and.w	r3, r3, #1
 8004386:	2b00      	cmp	r3, #0
 8004388:	d016      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800438a:	f7fc ff8f 	bl	80012ac <HAL_GetTick>
 800438e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004390:	e00b      	b.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004392:	f7fc ff8b 	bl	80012ac <HAL_GetTick>
 8004396:	4602      	mov	r2, r0
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	f241 3288 	movw	r2, #5000	; 0x1388
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d902      	bls.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80043a4:	2303      	movs	r3, #3
 80043a6:	74fb      	strb	r3, [r7, #19]
            break;
 80043a8:	e006      	b.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043aa:	4b0d      	ldr	r3, [pc, #52]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80043ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043b0:	f003 0302 	and.w	r3, r3, #2
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d0ec      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80043b8:	7cfb      	ldrb	r3, [r7, #19]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d10c      	bne.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043be:	4b08      	ldr	r3, [pc, #32]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80043c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043ce:	4904      	ldr	r1, [pc, #16]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80043d0:	4313      	orrs	r3, r2
 80043d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80043d6:	e009      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80043d8:	7cfb      	ldrb	r3, [r7, #19]
 80043da:	74bb      	strb	r3, [r7, #18]
 80043dc:	e006      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x264>
 80043de:	bf00      	nop
 80043e0:	40021000 	.word	0x40021000
 80043e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043e8:	7cfb      	ldrb	r3, [r7, #19]
 80043ea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043ec:	7c7b      	ldrb	r3, [r7, #17]
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d105      	bne.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043f2:	4b9e      	ldr	r3, [pc, #632]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80043f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043f6:	4a9d      	ldr	r2, [pc, #628]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80043f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043fc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0301 	and.w	r3, r3, #1
 8004406:	2b00      	cmp	r3, #0
 8004408:	d00a      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800440a:	4b98      	ldr	r3, [pc, #608]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800440c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004410:	f023 0203 	bic.w	r2, r3, #3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004418:	4994      	ldr	r1, [pc, #592]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800441a:	4313      	orrs	r3, r2
 800441c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0302 	and.w	r3, r3, #2
 8004428:	2b00      	cmp	r3, #0
 800442a:	d00a      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800442c:	4b8f      	ldr	r3, [pc, #572]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800442e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004432:	f023 020c 	bic.w	r2, r3, #12
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800443a:	498c      	ldr	r1, [pc, #560]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800443c:	4313      	orrs	r3, r2
 800443e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0304 	and.w	r3, r3, #4
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00a      	beq.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800444e:	4b87      	ldr	r3, [pc, #540]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004450:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004454:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445c:	4983      	ldr	r1, [pc, #524]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800445e:	4313      	orrs	r3, r2
 8004460:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0308 	and.w	r3, r3, #8
 800446c:	2b00      	cmp	r3, #0
 800446e:	d00a      	beq.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004470:	4b7e      	ldr	r3, [pc, #504]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004476:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800447e:	497b      	ldr	r1, [pc, #492]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004480:	4313      	orrs	r3, r2
 8004482:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0310 	and.w	r3, r3, #16
 800448e:	2b00      	cmp	r3, #0
 8004490:	d00a      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004492:	4b76      	ldr	r3, [pc, #472]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004494:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004498:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044a0:	4972      	ldr	r1, [pc, #456]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0320 	and.w	r3, r3, #32
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d00a      	beq.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80044b4:	4b6d      	ldr	r3, [pc, #436]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80044b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044c2:	496a      	ldr	r1, [pc, #424]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80044c4:	4313      	orrs	r3, r2
 80044c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00a      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80044d6:	4b65      	ldr	r3, [pc, #404]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80044d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044dc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044e4:	4961      	ldr	r1, [pc, #388]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d00a      	beq.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80044f8:	4b5c      	ldr	r3, [pc, #368]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80044fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044fe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004506:	4959      	ldr	r1, [pc, #356]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004508:	4313      	orrs	r3, r2
 800450a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004516:	2b00      	cmp	r3, #0
 8004518:	d00a      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800451a:	4b54      	ldr	r3, [pc, #336]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800451c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004520:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004528:	4950      	ldr	r1, [pc, #320]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800452a:	4313      	orrs	r3, r2
 800452c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004538:	2b00      	cmp	r3, #0
 800453a:	d00a      	beq.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800453c:	4b4b      	ldr	r3, [pc, #300]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800453e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004542:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800454a:	4948      	ldr	r1, [pc, #288]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800454c:	4313      	orrs	r3, r2
 800454e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800455a:	2b00      	cmp	r3, #0
 800455c:	d00a      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800455e:	4b43      	ldr	r3, [pc, #268]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004560:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004564:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800456c:	493f      	ldr	r1, [pc, #252]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800456e:	4313      	orrs	r3, r2
 8004570:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800457c:	2b00      	cmp	r3, #0
 800457e:	d028      	beq.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004580:	4b3a      	ldr	r3, [pc, #232]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004586:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800458e:	4937      	ldr	r1, [pc, #220]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004590:	4313      	orrs	r3, r2
 8004592:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800459a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800459e:	d106      	bne.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045a0:	4b32      	ldr	r3, [pc, #200]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	4a31      	ldr	r2, [pc, #196]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80045a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045aa:	60d3      	str	r3, [r2, #12]
 80045ac:	e011      	b.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045b2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80045b6:	d10c      	bne.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	3304      	adds	r3, #4
 80045bc:	2101      	movs	r1, #1
 80045be:	4618      	mov	r0, r3
 80045c0:	f000 f8c8 	bl	8004754 <RCCEx_PLLSAI1_Config>
 80045c4:	4603      	mov	r3, r0
 80045c6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80045c8:	7cfb      	ldrb	r3, [r7, #19]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d001      	beq.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 80045ce:	7cfb      	ldrb	r3, [r7, #19]
 80045d0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d028      	beq.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80045de:	4b23      	ldr	r3, [pc, #140]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80045e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045e4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ec:	491f      	ldr	r1, [pc, #124]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045fc:	d106      	bne.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045fe:	4b1b      	ldr	r3, [pc, #108]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	4a1a      	ldr	r2, [pc, #104]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004604:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004608:	60d3      	str	r3, [r2, #12]
 800460a:	e011      	b.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004610:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004614:	d10c      	bne.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	3304      	adds	r3, #4
 800461a:	2101      	movs	r1, #1
 800461c:	4618      	mov	r0, r3
 800461e:	f000 f899 	bl	8004754 <RCCEx_PLLSAI1_Config>
 8004622:	4603      	mov	r3, r0
 8004624:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004626:	7cfb      	ldrb	r3, [r7, #19]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d001      	beq.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 800462c:	7cfb      	ldrb	r3, [r7, #19]
 800462e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004638:	2b00      	cmp	r3, #0
 800463a:	d02b      	beq.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800463c:	4b0b      	ldr	r3, [pc, #44]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800463e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004642:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800464a:	4908      	ldr	r1, [pc, #32]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800464c:	4313      	orrs	r3, r2
 800464e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004656:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800465a:	d109      	bne.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800465c:	4b03      	ldr	r3, [pc, #12]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	4a02      	ldr	r2, [pc, #8]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004662:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004666:	60d3      	str	r3, [r2, #12]
 8004668:	e014      	b.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800466a:	bf00      	nop
 800466c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004674:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004678:	d10c      	bne.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	3304      	adds	r3, #4
 800467e:	2101      	movs	r1, #1
 8004680:	4618      	mov	r0, r3
 8004682:	f000 f867 	bl	8004754 <RCCEx_PLLSAI1_Config>
 8004686:	4603      	mov	r3, r0
 8004688:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800468a:	7cfb      	ldrb	r3, [r7, #19]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d001      	beq.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8004690:	7cfb      	ldrb	r3, [r7, #19]
 8004692:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800469c:	2b00      	cmp	r3, #0
 800469e:	d02f      	beq.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80046a0:	4b2b      	ldr	r3, [pc, #172]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80046a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046a6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046ae:	4928      	ldr	r1, [pc, #160]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80046b0:	4313      	orrs	r3, r2
 80046b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80046be:	d10d      	bne.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	3304      	adds	r3, #4
 80046c4:	2102      	movs	r1, #2
 80046c6:	4618      	mov	r0, r3
 80046c8:	f000 f844 	bl	8004754 <RCCEx_PLLSAI1_Config>
 80046cc:	4603      	mov	r3, r0
 80046ce:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046d0:	7cfb      	ldrb	r3, [r7, #19]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d014      	beq.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80046d6:	7cfb      	ldrb	r3, [r7, #19]
 80046d8:	74bb      	strb	r3, [r7, #18]
 80046da:	e011      	b.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046e4:	d10c      	bne.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	3320      	adds	r3, #32
 80046ea:	2102      	movs	r1, #2
 80046ec:	4618      	mov	r0, r3
 80046ee:	f000 f921 	bl	8004934 <RCCEx_PLLSAI2_Config>
 80046f2:	4603      	mov	r3, r0
 80046f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046f6:	7cfb      	ldrb	r3, [r7, #19]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d001      	beq.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80046fc:	7cfb      	ldrb	r3, [r7, #19]
 80046fe:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004708:	2b00      	cmp	r3, #0
 800470a:	d00a      	beq.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800470c:	4b10      	ldr	r3, [pc, #64]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800470e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004712:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800471a:	490d      	ldr	r1, [pc, #52]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800471c:	4313      	orrs	r3, r2
 800471e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800472a:	2b00      	cmp	r3, #0
 800472c:	d00b      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800472e:	4b08      	ldr	r3, [pc, #32]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004730:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004734:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800473e:	4904      	ldr	r1, [pc, #16]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004740:	4313      	orrs	r3, r2
 8004742:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004746:	7cbb      	ldrb	r3, [r7, #18]
}
 8004748:	4618      	mov	r0, r3
 800474a:	3718      	adds	r7, #24
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}
 8004750:	40021000 	.word	0x40021000

08004754 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b084      	sub	sp, #16
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800475e:	2300      	movs	r3, #0
 8004760:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004762:	4b73      	ldr	r3, [pc, #460]	; (8004930 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	f003 0303 	and.w	r3, r3, #3
 800476a:	2b00      	cmp	r3, #0
 800476c:	d018      	beq.n	80047a0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800476e:	4b70      	ldr	r3, [pc, #448]	; (8004930 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	f003 0203 	and.w	r2, r3, #3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	429a      	cmp	r2, r3
 800477c:	d10d      	bne.n	800479a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
       ||
 8004782:	2b00      	cmp	r3, #0
 8004784:	d009      	beq.n	800479a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004786:	4b6a      	ldr	r3, [pc, #424]	; (8004930 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	091b      	lsrs	r3, r3, #4
 800478c:	f003 0307 	and.w	r3, r3, #7
 8004790:	1c5a      	adds	r2, r3, #1
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	685b      	ldr	r3, [r3, #4]
       ||
 8004796:	429a      	cmp	r2, r3
 8004798:	d044      	beq.n	8004824 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	73fb      	strb	r3, [r7, #15]
 800479e:	e041      	b.n	8004824 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d00c      	beq.n	80047c2 <RCCEx_PLLSAI1_Config+0x6e>
 80047a8:	2b03      	cmp	r3, #3
 80047aa:	d013      	beq.n	80047d4 <RCCEx_PLLSAI1_Config+0x80>
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d120      	bne.n	80047f2 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80047b0:	4b5f      	ldr	r3, [pc, #380]	; (8004930 <RCCEx_PLLSAI1_Config+0x1dc>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 0302 	and.w	r3, r3, #2
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d11d      	bne.n	80047f8 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047c0:	e01a      	b.n	80047f8 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80047c2:	4b5b      	ldr	r3, [pc, #364]	; (8004930 <RCCEx_PLLSAI1_Config+0x1dc>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d116      	bne.n	80047fc <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047d2:	e013      	b.n	80047fc <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80047d4:	4b56      	ldr	r3, [pc, #344]	; (8004930 <RCCEx_PLLSAI1_Config+0x1dc>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d10f      	bne.n	8004800 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80047e0:	4b53      	ldr	r3, [pc, #332]	; (8004930 <RCCEx_PLLSAI1_Config+0x1dc>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d109      	bne.n	8004800 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80047f0:	e006      	b.n	8004800 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	73fb      	strb	r3, [r7, #15]
      break;
 80047f6:	e004      	b.n	8004802 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80047f8:	bf00      	nop
 80047fa:	e002      	b.n	8004802 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80047fc:	bf00      	nop
 80047fe:	e000      	b.n	8004802 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004800:	bf00      	nop
    }

    if(status == HAL_OK)
 8004802:	7bfb      	ldrb	r3, [r7, #15]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d10d      	bne.n	8004824 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004808:	4b49      	ldr	r3, [pc, #292]	; (8004930 <RCCEx_PLLSAI1_Config+0x1dc>)
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6819      	ldr	r1, [r3, #0]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	3b01      	subs	r3, #1
 800481a:	011b      	lsls	r3, r3, #4
 800481c:	430b      	orrs	r3, r1
 800481e:	4944      	ldr	r1, [pc, #272]	; (8004930 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004820:	4313      	orrs	r3, r2
 8004822:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004824:	7bfb      	ldrb	r3, [r7, #15]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d17d      	bne.n	8004926 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800482a:	4b41      	ldr	r3, [pc, #260]	; (8004930 <RCCEx_PLLSAI1_Config+0x1dc>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a40      	ldr	r2, [pc, #256]	; (8004930 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004830:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004834:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004836:	f7fc fd39 	bl	80012ac <HAL_GetTick>
 800483a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800483c:	e009      	b.n	8004852 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800483e:	f7fc fd35 	bl	80012ac <HAL_GetTick>
 8004842:	4602      	mov	r2, r0
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	1ad3      	subs	r3, r2, r3
 8004848:	2b02      	cmp	r3, #2
 800484a:	d902      	bls.n	8004852 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800484c:	2303      	movs	r3, #3
 800484e:	73fb      	strb	r3, [r7, #15]
        break;
 8004850:	e005      	b.n	800485e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004852:	4b37      	ldr	r3, [pc, #220]	; (8004930 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d1ef      	bne.n	800483e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800485e:	7bfb      	ldrb	r3, [r7, #15]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d160      	bne.n	8004926 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d111      	bne.n	800488e <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800486a:	4b31      	ldr	r3, [pc, #196]	; (8004930 <RCCEx_PLLSAI1_Config+0x1dc>)
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004872:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	6892      	ldr	r2, [r2, #8]
 800487a:	0211      	lsls	r1, r2, #8
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	68d2      	ldr	r2, [r2, #12]
 8004880:	0912      	lsrs	r2, r2, #4
 8004882:	0452      	lsls	r2, r2, #17
 8004884:	430a      	orrs	r2, r1
 8004886:	492a      	ldr	r1, [pc, #168]	; (8004930 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004888:	4313      	orrs	r3, r2
 800488a:	610b      	str	r3, [r1, #16]
 800488c:	e027      	b.n	80048de <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	2b01      	cmp	r3, #1
 8004892:	d112      	bne.n	80048ba <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004894:	4b26      	ldr	r3, [pc, #152]	; (8004930 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004896:	691b      	ldr	r3, [r3, #16]
 8004898:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800489c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	6892      	ldr	r2, [r2, #8]
 80048a4:	0211      	lsls	r1, r2, #8
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	6912      	ldr	r2, [r2, #16]
 80048aa:	0852      	lsrs	r2, r2, #1
 80048ac:	3a01      	subs	r2, #1
 80048ae:	0552      	lsls	r2, r2, #21
 80048b0:	430a      	orrs	r2, r1
 80048b2:	491f      	ldr	r1, [pc, #124]	; (8004930 <RCCEx_PLLSAI1_Config+0x1dc>)
 80048b4:	4313      	orrs	r3, r2
 80048b6:	610b      	str	r3, [r1, #16]
 80048b8:	e011      	b.n	80048de <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048ba:	4b1d      	ldr	r3, [pc, #116]	; (8004930 <RCCEx_PLLSAI1_Config+0x1dc>)
 80048bc:	691b      	ldr	r3, [r3, #16]
 80048be:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80048c2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	6892      	ldr	r2, [r2, #8]
 80048ca:	0211      	lsls	r1, r2, #8
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	6952      	ldr	r2, [r2, #20]
 80048d0:	0852      	lsrs	r2, r2, #1
 80048d2:	3a01      	subs	r2, #1
 80048d4:	0652      	lsls	r2, r2, #25
 80048d6:	430a      	orrs	r2, r1
 80048d8:	4915      	ldr	r1, [pc, #84]	; (8004930 <RCCEx_PLLSAI1_Config+0x1dc>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80048de:	4b14      	ldr	r3, [pc, #80]	; (8004930 <RCCEx_PLLSAI1_Config+0x1dc>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a13      	ldr	r2, [pc, #76]	; (8004930 <RCCEx_PLLSAI1_Config+0x1dc>)
 80048e4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80048e8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048ea:	f7fc fcdf 	bl	80012ac <HAL_GetTick>
 80048ee:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80048f0:	e009      	b.n	8004906 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80048f2:	f7fc fcdb 	bl	80012ac <HAL_GetTick>
 80048f6:	4602      	mov	r2, r0
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	d902      	bls.n	8004906 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8004900:	2303      	movs	r3, #3
 8004902:	73fb      	strb	r3, [r7, #15]
          break;
 8004904:	e005      	b.n	8004912 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004906:	4b0a      	ldr	r3, [pc, #40]	; (8004930 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d0ef      	beq.n	80048f2 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8004912:	7bfb      	ldrb	r3, [r7, #15]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d106      	bne.n	8004926 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004918:	4b05      	ldr	r3, [pc, #20]	; (8004930 <RCCEx_PLLSAI1_Config+0x1dc>)
 800491a:	691a      	ldr	r2, [r3, #16]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	699b      	ldr	r3, [r3, #24]
 8004920:	4903      	ldr	r1, [pc, #12]	; (8004930 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004922:	4313      	orrs	r3, r2
 8004924:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004926:	7bfb      	ldrb	r3, [r7, #15]
}
 8004928:	4618      	mov	r0, r3
 800492a:	3710      	adds	r7, #16
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}
 8004930:	40021000 	.word	0x40021000

08004934 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b084      	sub	sp, #16
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800493e:	2300      	movs	r3, #0
 8004940:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004942:	4b68      	ldr	r3, [pc, #416]	; (8004ae4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	f003 0303 	and.w	r3, r3, #3
 800494a:	2b00      	cmp	r3, #0
 800494c:	d018      	beq.n	8004980 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800494e:	4b65      	ldr	r3, [pc, #404]	; (8004ae4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	f003 0203 	and.w	r2, r3, #3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	429a      	cmp	r2, r3
 800495c:	d10d      	bne.n	800497a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
       ||
 8004962:	2b00      	cmp	r3, #0
 8004964:	d009      	beq.n	800497a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004966:	4b5f      	ldr	r3, [pc, #380]	; (8004ae4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	091b      	lsrs	r3, r3, #4
 800496c:	f003 0307 	and.w	r3, r3, #7
 8004970:	1c5a      	adds	r2, r3, #1
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
       ||
 8004976:	429a      	cmp	r2, r3
 8004978:	d044      	beq.n	8004a04 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	73fb      	strb	r3, [r7, #15]
 800497e:	e041      	b.n	8004a04 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	2b02      	cmp	r3, #2
 8004986:	d00c      	beq.n	80049a2 <RCCEx_PLLSAI2_Config+0x6e>
 8004988:	2b03      	cmp	r3, #3
 800498a:	d013      	beq.n	80049b4 <RCCEx_PLLSAI2_Config+0x80>
 800498c:	2b01      	cmp	r3, #1
 800498e:	d120      	bne.n	80049d2 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004990:	4b54      	ldr	r3, [pc, #336]	; (8004ae4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0302 	and.w	r3, r3, #2
 8004998:	2b00      	cmp	r3, #0
 800499a:	d11d      	bne.n	80049d8 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049a0:	e01a      	b.n	80049d8 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80049a2:	4b50      	ldr	r3, [pc, #320]	; (8004ae4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d116      	bne.n	80049dc <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049b2:	e013      	b.n	80049dc <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80049b4:	4b4b      	ldr	r3, [pc, #300]	; (8004ae4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d10f      	bne.n	80049e0 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80049c0:	4b48      	ldr	r3, [pc, #288]	; (8004ae4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d109      	bne.n	80049e0 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80049d0:	e006      	b.n	80049e0 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	73fb      	strb	r3, [r7, #15]
      break;
 80049d6:	e004      	b.n	80049e2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80049d8:	bf00      	nop
 80049da:	e002      	b.n	80049e2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80049dc:	bf00      	nop
 80049de:	e000      	b.n	80049e2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80049e0:	bf00      	nop
    }

    if(status == HAL_OK)
 80049e2:	7bfb      	ldrb	r3, [r7, #15]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d10d      	bne.n	8004a04 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80049e8:	4b3e      	ldr	r3, [pc, #248]	; (8004ae4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6819      	ldr	r1, [r3, #0]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	3b01      	subs	r3, #1
 80049fa:	011b      	lsls	r3, r3, #4
 80049fc:	430b      	orrs	r3, r1
 80049fe:	4939      	ldr	r1, [pc, #228]	; (8004ae4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004a00:	4313      	orrs	r3, r2
 8004a02:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004a04:	7bfb      	ldrb	r3, [r7, #15]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d167      	bne.n	8004ada <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004a0a:	4b36      	ldr	r3, [pc, #216]	; (8004ae4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a35      	ldr	r2, [pc, #212]	; (8004ae4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004a10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a16:	f7fc fc49 	bl	80012ac <HAL_GetTick>
 8004a1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004a1c:	e009      	b.n	8004a32 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004a1e:	f7fc fc45 	bl	80012ac <HAL_GetTick>
 8004a22:	4602      	mov	r2, r0
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	1ad3      	subs	r3, r2, r3
 8004a28:	2b02      	cmp	r3, #2
 8004a2a:	d902      	bls.n	8004a32 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004a2c:	2303      	movs	r3, #3
 8004a2e:	73fb      	strb	r3, [r7, #15]
        break;
 8004a30:	e005      	b.n	8004a3e <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004a32:	4b2c      	ldr	r3, [pc, #176]	; (8004ae4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d1ef      	bne.n	8004a1e <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004a3e:	7bfb      	ldrb	r3, [r7, #15]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d14a      	bne.n	8004ada <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d111      	bne.n	8004a6e <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a4a:	4b26      	ldr	r3, [pc, #152]	; (8004ae4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004a4c:	695b      	ldr	r3, [r3, #20]
 8004a4e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004a52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	6892      	ldr	r2, [r2, #8]
 8004a5a:	0211      	lsls	r1, r2, #8
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	68d2      	ldr	r2, [r2, #12]
 8004a60:	0912      	lsrs	r2, r2, #4
 8004a62:	0452      	lsls	r2, r2, #17
 8004a64:	430a      	orrs	r2, r1
 8004a66:	491f      	ldr	r1, [pc, #124]	; (8004ae4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	614b      	str	r3, [r1, #20]
 8004a6c:	e011      	b.n	8004a92 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a6e:	4b1d      	ldr	r3, [pc, #116]	; (8004ae4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004a70:	695b      	ldr	r3, [r3, #20]
 8004a72:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004a76:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	6892      	ldr	r2, [r2, #8]
 8004a7e:	0211      	lsls	r1, r2, #8
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	6912      	ldr	r2, [r2, #16]
 8004a84:	0852      	lsrs	r2, r2, #1
 8004a86:	3a01      	subs	r2, #1
 8004a88:	0652      	lsls	r2, r2, #25
 8004a8a:	430a      	orrs	r2, r1
 8004a8c:	4915      	ldr	r1, [pc, #84]	; (8004ae4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004a92:	4b14      	ldr	r3, [pc, #80]	; (8004ae4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a13      	ldr	r2, [pc, #76]	; (8004ae4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004a98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a9c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a9e:	f7fc fc05 	bl	80012ac <HAL_GetTick>
 8004aa2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004aa4:	e009      	b.n	8004aba <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004aa6:	f7fc fc01 	bl	80012ac <HAL_GetTick>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	1ad3      	subs	r3, r2, r3
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d902      	bls.n	8004aba <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8004ab4:	2303      	movs	r3, #3
 8004ab6:	73fb      	strb	r3, [r7, #15]
          break;
 8004ab8:	e005      	b.n	8004ac6 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004aba:	4b0a      	ldr	r3, [pc, #40]	; (8004ae4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d0ef      	beq.n	8004aa6 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8004ac6:	7bfb      	ldrb	r3, [r7, #15]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d106      	bne.n	8004ada <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004acc:	4b05      	ldr	r3, [pc, #20]	; (8004ae4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004ace:	695a      	ldr	r2, [r3, #20]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	695b      	ldr	r3, [r3, #20]
 8004ad4:	4903      	ldr	r1, [pc, #12]	; (8004ae4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004ada:	7bfb      	ldrb	r3, [r7, #15]
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3710      	adds	r7, #16
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	40021000 	.word	0x40021000

08004ae8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d101      	bne.n	8004afa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e049      	b.n	8004b8e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d106      	bne.n	8004b14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f7fc fa7e 	bl	8001010 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2202      	movs	r2, #2
 8004b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	3304      	adds	r3, #4
 8004b24:	4619      	mov	r1, r3
 8004b26:	4610      	mov	r0, r2
 8004b28:	f000 fa56 	bl	8004fd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b8c:	2300      	movs	r3, #0
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3708      	adds	r7, #8
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
	...

08004b98 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b085      	sub	sp, #20
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d001      	beq.n	8004bb0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e047      	b.n	8004c40 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2202      	movs	r2, #2
 8004bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a23      	ldr	r2, [pc, #140]	; (8004c4c <HAL_TIM_Base_Start+0xb4>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d01d      	beq.n	8004bfe <HAL_TIM_Base_Start+0x66>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bca:	d018      	beq.n	8004bfe <HAL_TIM_Base_Start+0x66>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a1f      	ldr	r2, [pc, #124]	; (8004c50 <HAL_TIM_Base_Start+0xb8>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d013      	beq.n	8004bfe <HAL_TIM_Base_Start+0x66>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a1e      	ldr	r2, [pc, #120]	; (8004c54 <HAL_TIM_Base_Start+0xbc>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d00e      	beq.n	8004bfe <HAL_TIM_Base_Start+0x66>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a1c      	ldr	r2, [pc, #112]	; (8004c58 <HAL_TIM_Base_Start+0xc0>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d009      	beq.n	8004bfe <HAL_TIM_Base_Start+0x66>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a1b      	ldr	r2, [pc, #108]	; (8004c5c <HAL_TIM_Base_Start+0xc4>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d004      	beq.n	8004bfe <HAL_TIM_Base_Start+0x66>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a19      	ldr	r2, [pc, #100]	; (8004c60 <HAL_TIM_Base_Start+0xc8>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d115      	bne.n	8004c2a <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	689a      	ldr	r2, [r3, #8]
 8004c04:	4b17      	ldr	r3, [pc, #92]	; (8004c64 <HAL_TIM_Base_Start+0xcc>)
 8004c06:	4013      	ands	r3, r2
 8004c08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2b06      	cmp	r3, #6
 8004c0e:	d015      	beq.n	8004c3c <HAL_TIM_Base_Start+0xa4>
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c16:	d011      	beq.n	8004c3c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f042 0201 	orr.w	r2, r2, #1
 8004c26:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c28:	e008      	b.n	8004c3c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f042 0201 	orr.w	r2, r2, #1
 8004c38:	601a      	str	r2, [r3, #0]
 8004c3a:	e000      	b.n	8004c3e <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c3c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004c3e:	2300      	movs	r3, #0
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3714      	adds	r7, #20
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr
 8004c4c:	40012c00 	.word	0x40012c00
 8004c50:	40000400 	.word	0x40000400
 8004c54:	40000800 	.word	0x40000800
 8004c58:	40000c00 	.word	0x40000c00
 8004c5c:	40013400 	.word	0x40013400
 8004c60:	40014000 	.word	0x40014000
 8004c64:	00010007 	.word	0x00010007

08004c68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b085      	sub	sp, #20
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d001      	beq.n	8004c80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e04f      	b.n	8004d20 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2202      	movs	r2, #2
 8004c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	68da      	ldr	r2, [r3, #12]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f042 0201 	orr.w	r2, r2, #1
 8004c96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a23      	ldr	r2, [pc, #140]	; (8004d2c <HAL_TIM_Base_Start_IT+0xc4>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d01d      	beq.n	8004cde <HAL_TIM_Base_Start_IT+0x76>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004caa:	d018      	beq.n	8004cde <HAL_TIM_Base_Start_IT+0x76>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a1f      	ldr	r2, [pc, #124]	; (8004d30 <HAL_TIM_Base_Start_IT+0xc8>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d013      	beq.n	8004cde <HAL_TIM_Base_Start_IT+0x76>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a1e      	ldr	r2, [pc, #120]	; (8004d34 <HAL_TIM_Base_Start_IT+0xcc>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d00e      	beq.n	8004cde <HAL_TIM_Base_Start_IT+0x76>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a1c      	ldr	r2, [pc, #112]	; (8004d38 <HAL_TIM_Base_Start_IT+0xd0>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d009      	beq.n	8004cde <HAL_TIM_Base_Start_IT+0x76>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a1b      	ldr	r2, [pc, #108]	; (8004d3c <HAL_TIM_Base_Start_IT+0xd4>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d004      	beq.n	8004cde <HAL_TIM_Base_Start_IT+0x76>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a19      	ldr	r2, [pc, #100]	; (8004d40 <HAL_TIM_Base_Start_IT+0xd8>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d115      	bne.n	8004d0a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	689a      	ldr	r2, [r3, #8]
 8004ce4:	4b17      	ldr	r3, [pc, #92]	; (8004d44 <HAL_TIM_Base_Start_IT+0xdc>)
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2b06      	cmp	r3, #6
 8004cee:	d015      	beq.n	8004d1c <HAL_TIM_Base_Start_IT+0xb4>
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cf6:	d011      	beq.n	8004d1c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f042 0201 	orr.w	r2, r2, #1
 8004d06:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d08:	e008      	b.n	8004d1c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f042 0201 	orr.w	r2, r2, #1
 8004d18:	601a      	str	r2, [r3, #0]
 8004d1a:	e000      	b.n	8004d1e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d1c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004d1e:	2300      	movs	r3, #0
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3714      	adds	r7, #20
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr
 8004d2c:	40012c00 	.word	0x40012c00
 8004d30:	40000400 	.word	0x40000400
 8004d34:	40000800 	.word	0x40000800
 8004d38:	40000c00 	.word	0x40000c00
 8004d3c:	40013400 	.word	0x40013400
 8004d40:	40014000 	.word	0x40014000
 8004d44:	00010007 	.word	0x00010007

08004d48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b082      	sub	sp, #8
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	f003 0302 	and.w	r3, r3, #2
 8004d5a:	2b02      	cmp	r3, #2
 8004d5c:	d122      	bne.n	8004da4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	f003 0302 	and.w	r3, r3, #2
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d11b      	bne.n	8004da4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f06f 0202 	mvn.w	r2, #2
 8004d74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2201      	movs	r2, #1
 8004d7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	699b      	ldr	r3, [r3, #24]
 8004d82:	f003 0303 	and.w	r3, r3, #3
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d003      	beq.n	8004d92 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f000 f905 	bl	8004f9a <HAL_TIM_IC_CaptureCallback>
 8004d90:	e005      	b.n	8004d9e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f000 f8f7 	bl	8004f86 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f000 f908 	bl	8004fae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	f003 0304 	and.w	r3, r3, #4
 8004dae:	2b04      	cmp	r3, #4
 8004db0:	d122      	bne.n	8004df8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	f003 0304 	and.w	r3, r3, #4
 8004dbc:	2b04      	cmp	r3, #4
 8004dbe:	d11b      	bne.n	8004df8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f06f 0204 	mvn.w	r2, #4
 8004dc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2202      	movs	r2, #2
 8004dce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	699b      	ldr	r3, [r3, #24]
 8004dd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d003      	beq.n	8004de6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 f8db 	bl	8004f9a <HAL_TIM_IC_CaptureCallback>
 8004de4:	e005      	b.n	8004df2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f000 f8cd 	bl	8004f86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f000 f8de 	bl	8004fae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2200      	movs	r2, #0
 8004df6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	691b      	ldr	r3, [r3, #16]
 8004dfe:	f003 0308 	and.w	r3, r3, #8
 8004e02:	2b08      	cmp	r3, #8
 8004e04:	d122      	bne.n	8004e4c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	f003 0308 	and.w	r3, r3, #8
 8004e10:	2b08      	cmp	r3, #8
 8004e12:	d11b      	bne.n	8004e4c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f06f 0208 	mvn.w	r2, #8
 8004e1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2204      	movs	r2, #4
 8004e22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	69db      	ldr	r3, [r3, #28]
 8004e2a:	f003 0303 	and.w	r3, r3, #3
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d003      	beq.n	8004e3a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f000 f8b1 	bl	8004f9a <HAL_TIM_IC_CaptureCallback>
 8004e38:	e005      	b.n	8004e46 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f000 f8a3 	bl	8004f86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f000 f8b4 	bl	8004fae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	f003 0310 	and.w	r3, r3, #16
 8004e56:	2b10      	cmp	r3, #16
 8004e58:	d122      	bne.n	8004ea0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	f003 0310 	and.w	r3, r3, #16
 8004e64:	2b10      	cmp	r3, #16
 8004e66:	d11b      	bne.n	8004ea0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f06f 0210 	mvn.w	r2, #16
 8004e70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2208      	movs	r2, #8
 8004e76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	69db      	ldr	r3, [r3, #28]
 8004e7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d003      	beq.n	8004e8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f000 f887 	bl	8004f9a <HAL_TIM_IC_CaptureCallback>
 8004e8c:	e005      	b.n	8004e9a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f000 f879 	bl	8004f86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f000 f88a 	bl	8004fae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	691b      	ldr	r3, [r3, #16]
 8004ea6:	f003 0301 	and.w	r3, r3, #1
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d10e      	bne.n	8004ecc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	f003 0301 	and.w	r3, r3, #1
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d107      	bne.n	8004ecc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f06f 0201 	mvn.w	r2, #1
 8004ec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f7fb fcba 	bl	8000840 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	691b      	ldr	r3, [r3, #16]
 8004ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ed6:	2b80      	cmp	r3, #128	; 0x80
 8004ed8:	d10e      	bne.n	8004ef8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ee4:	2b80      	cmp	r3, #128	; 0x80
 8004ee6:	d107      	bne.n	8004ef8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ef0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f000 f99c 	bl	8005230 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	691b      	ldr	r3, [r3, #16]
 8004efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f06:	d10e      	bne.n	8004f26 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f12:	2b80      	cmp	r3, #128	; 0x80
 8004f14:	d107      	bne.n	8004f26 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004f1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f000 f98f 	bl	8005244 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	691b      	ldr	r3, [r3, #16]
 8004f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f30:	2b40      	cmp	r3, #64	; 0x40
 8004f32:	d10e      	bne.n	8004f52 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f3e:	2b40      	cmp	r3, #64	; 0x40
 8004f40:	d107      	bne.n	8004f52 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f000 f838 	bl	8004fc2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	691b      	ldr	r3, [r3, #16]
 8004f58:	f003 0320 	and.w	r3, r3, #32
 8004f5c:	2b20      	cmp	r3, #32
 8004f5e:	d10e      	bne.n	8004f7e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	f003 0320 	and.w	r3, r3, #32
 8004f6a:	2b20      	cmp	r3, #32
 8004f6c:	d107      	bne.n	8004f7e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f06f 0220 	mvn.w	r2, #32
 8004f76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f000 f94f 	bl	800521c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f7e:	bf00      	nop
 8004f80:	3708      	adds	r7, #8
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}

08004f86 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f86:	b480      	push	{r7}
 8004f88:	b083      	sub	sp, #12
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f8e:	bf00      	nop
 8004f90:	370c      	adds	r7, #12
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr

08004f9a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f9a:	b480      	push	{r7}
 8004f9c:	b083      	sub	sp, #12
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004fa2:	bf00      	nop
 8004fa4:	370c      	adds	r7, #12
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr

08004fae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004fae:	b480      	push	{r7}
 8004fb0:	b083      	sub	sp, #12
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004fb6:	bf00      	nop
 8004fb8:	370c      	adds	r7, #12
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr

08004fc2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004fc2:	b480      	push	{r7}
 8004fc4:	b083      	sub	sp, #12
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004fca:	bf00      	nop
 8004fcc:	370c      	adds	r7, #12
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr
	...

08004fd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b085      	sub	sp, #20
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4a40      	ldr	r2, [pc, #256]	; (80050ec <TIM_Base_SetConfig+0x114>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d013      	beq.n	8005018 <TIM_Base_SetConfig+0x40>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ff6:	d00f      	beq.n	8005018 <TIM_Base_SetConfig+0x40>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	4a3d      	ldr	r2, [pc, #244]	; (80050f0 <TIM_Base_SetConfig+0x118>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d00b      	beq.n	8005018 <TIM_Base_SetConfig+0x40>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	4a3c      	ldr	r2, [pc, #240]	; (80050f4 <TIM_Base_SetConfig+0x11c>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d007      	beq.n	8005018 <TIM_Base_SetConfig+0x40>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	4a3b      	ldr	r2, [pc, #236]	; (80050f8 <TIM_Base_SetConfig+0x120>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d003      	beq.n	8005018 <TIM_Base_SetConfig+0x40>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	4a3a      	ldr	r2, [pc, #232]	; (80050fc <TIM_Base_SetConfig+0x124>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d108      	bne.n	800502a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800501e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	68fa      	ldr	r2, [r7, #12]
 8005026:	4313      	orrs	r3, r2
 8005028:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a2f      	ldr	r2, [pc, #188]	; (80050ec <TIM_Base_SetConfig+0x114>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d01f      	beq.n	8005072 <TIM_Base_SetConfig+0x9a>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005038:	d01b      	beq.n	8005072 <TIM_Base_SetConfig+0x9a>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4a2c      	ldr	r2, [pc, #176]	; (80050f0 <TIM_Base_SetConfig+0x118>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d017      	beq.n	8005072 <TIM_Base_SetConfig+0x9a>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4a2b      	ldr	r2, [pc, #172]	; (80050f4 <TIM_Base_SetConfig+0x11c>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d013      	beq.n	8005072 <TIM_Base_SetConfig+0x9a>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4a2a      	ldr	r2, [pc, #168]	; (80050f8 <TIM_Base_SetConfig+0x120>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d00f      	beq.n	8005072 <TIM_Base_SetConfig+0x9a>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4a29      	ldr	r2, [pc, #164]	; (80050fc <TIM_Base_SetConfig+0x124>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d00b      	beq.n	8005072 <TIM_Base_SetConfig+0x9a>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	4a28      	ldr	r2, [pc, #160]	; (8005100 <TIM_Base_SetConfig+0x128>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d007      	beq.n	8005072 <TIM_Base_SetConfig+0x9a>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	4a27      	ldr	r2, [pc, #156]	; (8005104 <TIM_Base_SetConfig+0x12c>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d003      	beq.n	8005072 <TIM_Base_SetConfig+0x9a>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	4a26      	ldr	r2, [pc, #152]	; (8005108 <TIM_Base_SetConfig+0x130>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d108      	bne.n	8005084 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005078:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	68db      	ldr	r3, [r3, #12]
 800507e:	68fa      	ldr	r2, [r7, #12]
 8005080:	4313      	orrs	r3, r2
 8005082:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	695b      	ldr	r3, [r3, #20]
 800508e:	4313      	orrs	r3, r2
 8005090:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	68fa      	ldr	r2, [r7, #12]
 8005096:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	689a      	ldr	r2, [r3, #8]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a10      	ldr	r2, [pc, #64]	; (80050ec <TIM_Base_SetConfig+0x114>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d00f      	beq.n	80050d0 <TIM_Base_SetConfig+0xf8>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4a12      	ldr	r2, [pc, #72]	; (80050fc <TIM_Base_SetConfig+0x124>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d00b      	beq.n	80050d0 <TIM_Base_SetConfig+0xf8>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4a11      	ldr	r2, [pc, #68]	; (8005100 <TIM_Base_SetConfig+0x128>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d007      	beq.n	80050d0 <TIM_Base_SetConfig+0xf8>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	4a10      	ldr	r2, [pc, #64]	; (8005104 <TIM_Base_SetConfig+0x12c>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d003      	beq.n	80050d0 <TIM_Base_SetConfig+0xf8>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	4a0f      	ldr	r2, [pc, #60]	; (8005108 <TIM_Base_SetConfig+0x130>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d103      	bne.n	80050d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	691a      	ldr	r2, [r3, #16]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	615a      	str	r2, [r3, #20]
}
 80050de:	bf00      	nop
 80050e0:	3714      	adds	r7, #20
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr
 80050ea:	bf00      	nop
 80050ec:	40012c00 	.word	0x40012c00
 80050f0:	40000400 	.word	0x40000400
 80050f4:	40000800 	.word	0x40000800
 80050f8:	40000c00 	.word	0x40000c00
 80050fc:	40013400 	.word	0x40013400
 8005100:	40014000 	.word	0x40014000
 8005104:	40014400 	.word	0x40014400
 8005108:	40014800 	.word	0x40014800

0800510c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800510c:	b480      	push	{r7}
 800510e:	b085      	sub	sp, #20
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800511c:	2b01      	cmp	r3, #1
 800511e:	d101      	bne.n	8005124 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005120:	2302      	movs	r3, #2
 8005122:	e068      	b.n	80051f6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2202      	movs	r2, #2
 8005130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a2e      	ldr	r2, [pc, #184]	; (8005204 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d004      	beq.n	8005158 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a2d      	ldr	r2, [pc, #180]	; (8005208 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d108      	bne.n	800516a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800515e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	68fa      	ldr	r2, [r7, #12]
 8005166:	4313      	orrs	r3, r2
 8005168:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005170:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	68fa      	ldr	r2, [r7, #12]
 8005178:	4313      	orrs	r3, r2
 800517a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	68fa      	ldr	r2, [r7, #12]
 8005182:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a1e      	ldr	r2, [pc, #120]	; (8005204 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d01d      	beq.n	80051ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005196:	d018      	beq.n	80051ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a1b      	ldr	r2, [pc, #108]	; (800520c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d013      	beq.n	80051ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a1a      	ldr	r2, [pc, #104]	; (8005210 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d00e      	beq.n	80051ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a18      	ldr	r2, [pc, #96]	; (8005214 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d009      	beq.n	80051ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a13      	ldr	r2, [pc, #76]	; (8005208 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d004      	beq.n	80051ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a14      	ldr	r2, [pc, #80]	; (8005218 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d10c      	bne.n	80051e4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	68ba      	ldr	r2, [r7, #8]
 80051d8:	4313      	orrs	r3, r2
 80051da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	68ba      	ldr	r2, [r7, #8]
 80051e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051f4:	2300      	movs	r3, #0
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3714      	adds	r7, #20
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr
 8005202:	bf00      	nop
 8005204:	40012c00 	.word	0x40012c00
 8005208:	40013400 	.word	0x40013400
 800520c:	40000400 	.word	0x40000400
 8005210:	40000800 	.word	0x40000800
 8005214:	40000c00 	.word	0x40000c00
 8005218:	40014000 	.word	0x40014000

0800521c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800521c:	b480      	push	{r7}
 800521e:	b083      	sub	sp, #12
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005224:	bf00      	nop
 8005226:	370c      	adds	r7, #12
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr

08005230 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005238:	bf00      	nop
 800523a:	370c      	adds	r7, #12
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005244:	b480      	push	{r7}
 8005246:	b083      	sub	sp, #12
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800524c:	bf00      	nop
 800524e:	370c      	adds	r7, #12
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b082      	sub	sp, #8
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d101      	bne.n	800526a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e040      	b.n	80052ec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800526e:	2b00      	cmp	r3, #0
 8005270:	d106      	bne.n	8005280 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f7fb ff3a 	bl	80010f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2224      	movs	r2, #36	; 0x24
 8005284:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f022 0201 	bic.w	r2, r2, #1
 8005294:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f000 f82c 	bl	80052f4 <UART_SetConfig>
 800529c:	4603      	mov	r3, r0
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d101      	bne.n	80052a6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e022      	b.n	80052ec <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d002      	beq.n	80052b4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f000 faaa 	bl	8005808 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	685a      	ldr	r2, [r3, #4]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80052c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	689a      	ldr	r2, [r3, #8]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80052d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f042 0201 	orr.w	r2, r2, #1
 80052e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f000 fb31 	bl	800594c <UART_CheckIdleState>
 80052ea:	4603      	mov	r3, r0
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3708      	adds	r7, #8
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}

080052f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052f4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80052f8:	b088      	sub	sp, #32
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80052fe:	2300      	movs	r3, #0
 8005300:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	689a      	ldr	r2, [r3, #8]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	691b      	ldr	r3, [r3, #16]
 800530a:	431a      	orrs	r2, r3
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	695b      	ldr	r3, [r3, #20]
 8005310:	431a      	orrs	r2, r3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	69db      	ldr	r3, [r3, #28]
 8005316:	4313      	orrs	r3, r2
 8005318:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	4bac      	ldr	r3, [pc, #688]	; (80055d4 <UART_SetConfig+0x2e0>)
 8005322:	4013      	ands	r3, r2
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	6812      	ldr	r2, [r2, #0]
 8005328:	69f9      	ldr	r1, [r7, #28]
 800532a:	430b      	orrs	r3, r1
 800532c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	68da      	ldr	r2, [r3, #12]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	430a      	orrs	r2, r1
 8005342:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	699b      	ldr	r3, [r3, #24]
 8005348:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4aa2      	ldr	r2, [pc, #648]	; (80055d8 <UART_SetConfig+0x2e4>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d004      	beq.n	800535e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6a1b      	ldr	r3, [r3, #32]
 8005358:	69fa      	ldr	r2, [r7, #28]
 800535a:	4313      	orrs	r3, r2
 800535c:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	69fa      	ldr	r2, [r7, #28]
 800536e:	430a      	orrs	r2, r1
 8005370:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a99      	ldr	r2, [pc, #612]	; (80055dc <UART_SetConfig+0x2e8>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d121      	bne.n	80053c0 <UART_SetConfig+0xcc>
 800537c:	4b98      	ldr	r3, [pc, #608]	; (80055e0 <UART_SetConfig+0x2ec>)
 800537e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005382:	f003 0303 	and.w	r3, r3, #3
 8005386:	2b03      	cmp	r3, #3
 8005388:	d816      	bhi.n	80053b8 <UART_SetConfig+0xc4>
 800538a:	a201      	add	r2, pc, #4	; (adr r2, 8005390 <UART_SetConfig+0x9c>)
 800538c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005390:	080053a1 	.word	0x080053a1
 8005394:	080053ad 	.word	0x080053ad
 8005398:	080053a7 	.word	0x080053a7
 800539c:	080053b3 	.word	0x080053b3
 80053a0:	2301      	movs	r3, #1
 80053a2:	76fb      	strb	r3, [r7, #27]
 80053a4:	e0e8      	b.n	8005578 <UART_SetConfig+0x284>
 80053a6:	2302      	movs	r3, #2
 80053a8:	76fb      	strb	r3, [r7, #27]
 80053aa:	e0e5      	b.n	8005578 <UART_SetConfig+0x284>
 80053ac:	2304      	movs	r3, #4
 80053ae:	76fb      	strb	r3, [r7, #27]
 80053b0:	e0e2      	b.n	8005578 <UART_SetConfig+0x284>
 80053b2:	2308      	movs	r3, #8
 80053b4:	76fb      	strb	r3, [r7, #27]
 80053b6:	e0df      	b.n	8005578 <UART_SetConfig+0x284>
 80053b8:	2310      	movs	r3, #16
 80053ba:	76fb      	strb	r3, [r7, #27]
 80053bc:	bf00      	nop
 80053be:	e0db      	b.n	8005578 <UART_SetConfig+0x284>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a87      	ldr	r2, [pc, #540]	; (80055e4 <UART_SetConfig+0x2f0>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d134      	bne.n	8005434 <UART_SetConfig+0x140>
 80053ca:	4b85      	ldr	r3, [pc, #532]	; (80055e0 <UART_SetConfig+0x2ec>)
 80053cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053d0:	f003 030c 	and.w	r3, r3, #12
 80053d4:	2b0c      	cmp	r3, #12
 80053d6:	d829      	bhi.n	800542c <UART_SetConfig+0x138>
 80053d8:	a201      	add	r2, pc, #4	; (adr r2, 80053e0 <UART_SetConfig+0xec>)
 80053da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053de:	bf00      	nop
 80053e0:	08005415 	.word	0x08005415
 80053e4:	0800542d 	.word	0x0800542d
 80053e8:	0800542d 	.word	0x0800542d
 80053ec:	0800542d 	.word	0x0800542d
 80053f0:	08005421 	.word	0x08005421
 80053f4:	0800542d 	.word	0x0800542d
 80053f8:	0800542d 	.word	0x0800542d
 80053fc:	0800542d 	.word	0x0800542d
 8005400:	0800541b 	.word	0x0800541b
 8005404:	0800542d 	.word	0x0800542d
 8005408:	0800542d 	.word	0x0800542d
 800540c:	0800542d 	.word	0x0800542d
 8005410:	08005427 	.word	0x08005427
 8005414:	2300      	movs	r3, #0
 8005416:	76fb      	strb	r3, [r7, #27]
 8005418:	e0ae      	b.n	8005578 <UART_SetConfig+0x284>
 800541a:	2302      	movs	r3, #2
 800541c:	76fb      	strb	r3, [r7, #27]
 800541e:	e0ab      	b.n	8005578 <UART_SetConfig+0x284>
 8005420:	2304      	movs	r3, #4
 8005422:	76fb      	strb	r3, [r7, #27]
 8005424:	e0a8      	b.n	8005578 <UART_SetConfig+0x284>
 8005426:	2308      	movs	r3, #8
 8005428:	76fb      	strb	r3, [r7, #27]
 800542a:	e0a5      	b.n	8005578 <UART_SetConfig+0x284>
 800542c:	2310      	movs	r3, #16
 800542e:	76fb      	strb	r3, [r7, #27]
 8005430:	bf00      	nop
 8005432:	e0a1      	b.n	8005578 <UART_SetConfig+0x284>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a6b      	ldr	r2, [pc, #428]	; (80055e8 <UART_SetConfig+0x2f4>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d120      	bne.n	8005480 <UART_SetConfig+0x18c>
 800543e:	4b68      	ldr	r3, [pc, #416]	; (80055e0 <UART_SetConfig+0x2ec>)
 8005440:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005444:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005448:	2b10      	cmp	r3, #16
 800544a:	d00f      	beq.n	800546c <UART_SetConfig+0x178>
 800544c:	2b10      	cmp	r3, #16
 800544e:	d802      	bhi.n	8005456 <UART_SetConfig+0x162>
 8005450:	2b00      	cmp	r3, #0
 8005452:	d005      	beq.n	8005460 <UART_SetConfig+0x16c>
 8005454:	e010      	b.n	8005478 <UART_SetConfig+0x184>
 8005456:	2b20      	cmp	r3, #32
 8005458:	d005      	beq.n	8005466 <UART_SetConfig+0x172>
 800545a:	2b30      	cmp	r3, #48	; 0x30
 800545c:	d009      	beq.n	8005472 <UART_SetConfig+0x17e>
 800545e:	e00b      	b.n	8005478 <UART_SetConfig+0x184>
 8005460:	2300      	movs	r3, #0
 8005462:	76fb      	strb	r3, [r7, #27]
 8005464:	e088      	b.n	8005578 <UART_SetConfig+0x284>
 8005466:	2302      	movs	r3, #2
 8005468:	76fb      	strb	r3, [r7, #27]
 800546a:	e085      	b.n	8005578 <UART_SetConfig+0x284>
 800546c:	2304      	movs	r3, #4
 800546e:	76fb      	strb	r3, [r7, #27]
 8005470:	e082      	b.n	8005578 <UART_SetConfig+0x284>
 8005472:	2308      	movs	r3, #8
 8005474:	76fb      	strb	r3, [r7, #27]
 8005476:	e07f      	b.n	8005578 <UART_SetConfig+0x284>
 8005478:	2310      	movs	r3, #16
 800547a:	76fb      	strb	r3, [r7, #27]
 800547c:	bf00      	nop
 800547e:	e07b      	b.n	8005578 <UART_SetConfig+0x284>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a59      	ldr	r2, [pc, #356]	; (80055ec <UART_SetConfig+0x2f8>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d120      	bne.n	80054cc <UART_SetConfig+0x1d8>
 800548a:	4b55      	ldr	r3, [pc, #340]	; (80055e0 <UART_SetConfig+0x2ec>)
 800548c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005490:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005494:	2b40      	cmp	r3, #64	; 0x40
 8005496:	d00f      	beq.n	80054b8 <UART_SetConfig+0x1c4>
 8005498:	2b40      	cmp	r3, #64	; 0x40
 800549a:	d802      	bhi.n	80054a2 <UART_SetConfig+0x1ae>
 800549c:	2b00      	cmp	r3, #0
 800549e:	d005      	beq.n	80054ac <UART_SetConfig+0x1b8>
 80054a0:	e010      	b.n	80054c4 <UART_SetConfig+0x1d0>
 80054a2:	2b80      	cmp	r3, #128	; 0x80
 80054a4:	d005      	beq.n	80054b2 <UART_SetConfig+0x1be>
 80054a6:	2bc0      	cmp	r3, #192	; 0xc0
 80054a8:	d009      	beq.n	80054be <UART_SetConfig+0x1ca>
 80054aa:	e00b      	b.n	80054c4 <UART_SetConfig+0x1d0>
 80054ac:	2300      	movs	r3, #0
 80054ae:	76fb      	strb	r3, [r7, #27]
 80054b0:	e062      	b.n	8005578 <UART_SetConfig+0x284>
 80054b2:	2302      	movs	r3, #2
 80054b4:	76fb      	strb	r3, [r7, #27]
 80054b6:	e05f      	b.n	8005578 <UART_SetConfig+0x284>
 80054b8:	2304      	movs	r3, #4
 80054ba:	76fb      	strb	r3, [r7, #27]
 80054bc:	e05c      	b.n	8005578 <UART_SetConfig+0x284>
 80054be:	2308      	movs	r3, #8
 80054c0:	76fb      	strb	r3, [r7, #27]
 80054c2:	e059      	b.n	8005578 <UART_SetConfig+0x284>
 80054c4:	2310      	movs	r3, #16
 80054c6:	76fb      	strb	r3, [r7, #27]
 80054c8:	bf00      	nop
 80054ca:	e055      	b.n	8005578 <UART_SetConfig+0x284>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a47      	ldr	r2, [pc, #284]	; (80055f0 <UART_SetConfig+0x2fc>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d124      	bne.n	8005520 <UART_SetConfig+0x22c>
 80054d6:	4b42      	ldr	r3, [pc, #264]	; (80055e0 <UART_SetConfig+0x2ec>)
 80054d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054e4:	d012      	beq.n	800550c <UART_SetConfig+0x218>
 80054e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054ea:	d802      	bhi.n	80054f2 <UART_SetConfig+0x1fe>
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d007      	beq.n	8005500 <UART_SetConfig+0x20c>
 80054f0:	e012      	b.n	8005518 <UART_SetConfig+0x224>
 80054f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054f6:	d006      	beq.n	8005506 <UART_SetConfig+0x212>
 80054f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054fc:	d009      	beq.n	8005512 <UART_SetConfig+0x21e>
 80054fe:	e00b      	b.n	8005518 <UART_SetConfig+0x224>
 8005500:	2300      	movs	r3, #0
 8005502:	76fb      	strb	r3, [r7, #27]
 8005504:	e038      	b.n	8005578 <UART_SetConfig+0x284>
 8005506:	2302      	movs	r3, #2
 8005508:	76fb      	strb	r3, [r7, #27]
 800550a:	e035      	b.n	8005578 <UART_SetConfig+0x284>
 800550c:	2304      	movs	r3, #4
 800550e:	76fb      	strb	r3, [r7, #27]
 8005510:	e032      	b.n	8005578 <UART_SetConfig+0x284>
 8005512:	2308      	movs	r3, #8
 8005514:	76fb      	strb	r3, [r7, #27]
 8005516:	e02f      	b.n	8005578 <UART_SetConfig+0x284>
 8005518:	2310      	movs	r3, #16
 800551a:	76fb      	strb	r3, [r7, #27]
 800551c:	bf00      	nop
 800551e:	e02b      	b.n	8005578 <UART_SetConfig+0x284>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a2c      	ldr	r2, [pc, #176]	; (80055d8 <UART_SetConfig+0x2e4>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d124      	bne.n	8005574 <UART_SetConfig+0x280>
 800552a:	4b2d      	ldr	r3, [pc, #180]	; (80055e0 <UART_SetConfig+0x2ec>)
 800552c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005530:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005534:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005538:	d012      	beq.n	8005560 <UART_SetConfig+0x26c>
 800553a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800553e:	d802      	bhi.n	8005546 <UART_SetConfig+0x252>
 8005540:	2b00      	cmp	r3, #0
 8005542:	d007      	beq.n	8005554 <UART_SetConfig+0x260>
 8005544:	e012      	b.n	800556c <UART_SetConfig+0x278>
 8005546:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800554a:	d006      	beq.n	800555a <UART_SetConfig+0x266>
 800554c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005550:	d009      	beq.n	8005566 <UART_SetConfig+0x272>
 8005552:	e00b      	b.n	800556c <UART_SetConfig+0x278>
 8005554:	2300      	movs	r3, #0
 8005556:	76fb      	strb	r3, [r7, #27]
 8005558:	e00e      	b.n	8005578 <UART_SetConfig+0x284>
 800555a:	2302      	movs	r3, #2
 800555c:	76fb      	strb	r3, [r7, #27]
 800555e:	e00b      	b.n	8005578 <UART_SetConfig+0x284>
 8005560:	2304      	movs	r3, #4
 8005562:	76fb      	strb	r3, [r7, #27]
 8005564:	e008      	b.n	8005578 <UART_SetConfig+0x284>
 8005566:	2308      	movs	r3, #8
 8005568:	76fb      	strb	r3, [r7, #27]
 800556a:	e005      	b.n	8005578 <UART_SetConfig+0x284>
 800556c:	2310      	movs	r3, #16
 800556e:	76fb      	strb	r3, [r7, #27]
 8005570:	bf00      	nop
 8005572:	e001      	b.n	8005578 <UART_SetConfig+0x284>
 8005574:	2310      	movs	r3, #16
 8005576:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a16      	ldr	r2, [pc, #88]	; (80055d8 <UART_SetConfig+0x2e4>)
 800557e:	4293      	cmp	r3, r2
 8005580:	f040 8087 	bne.w	8005692 <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005584:	7efb      	ldrb	r3, [r7, #27]
 8005586:	2b08      	cmp	r3, #8
 8005588:	d836      	bhi.n	80055f8 <UART_SetConfig+0x304>
 800558a:	a201      	add	r2, pc, #4	; (adr r2, 8005590 <UART_SetConfig+0x29c>)
 800558c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005590:	080055b5 	.word	0x080055b5
 8005594:	080055f9 	.word	0x080055f9
 8005598:	080055bd 	.word	0x080055bd
 800559c:	080055f9 	.word	0x080055f9
 80055a0:	080055c3 	.word	0x080055c3
 80055a4:	080055f9 	.word	0x080055f9
 80055a8:	080055f9 	.word	0x080055f9
 80055ac:	080055f9 	.word	0x080055f9
 80055b0:	080055cb 	.word	0x080055cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055b4:	f7fe fd5c 	bl	8004070 <HAL_RCC_GetPCLK1Freq>
 80055b8:	6178      	str	r0, [r7, #20]
        break;
 80055ba:	e022      	b.n	8005602 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055bc:	4b0d      	ldr	r3, [pc, #52]	; (80055f4 <UART_SetConfig+0x300>)
 80055be:	617b      	str	r3, [r7, #20]
        break;
 80055c0:	e01f      	b.n	8005602 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055c2:	f7fe fcbf 	bl	8003f44 <HAL_RCC_GetSysClockFreq>
 80055c6:	6178      	str	r0, [r7, #20]
        break;
 80055c8:	e01b      	b.n	8005602 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055ce:	617b      	str	r3, [r7, #20]
        break;
 80055d0:	e017      	b.n	8005602 <UART_SetConfig+0x30e>
 80055d2:	bf00      	nop
 80055d4:	efff69f3 	.word	0xefff69f3
 80055d8:	40008000 	.word	0x40008000
 80055dc:	40013800 	.word	0x40013800
 80055e0:	40021000 	.word	0x40021000
 80055e4:	40004400 	.word	0x40004400
 80055e8:	40004800 	.word	0x40004800
 80055ec:	40004c00 	.word	0x40004c00
 80055f0:	40005000 	.word	0x40005000
 80055f4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80055f8:	2300      	movs	r3, #0
 80055fa:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80055fc:	2301      	movs	r3, #1
 80055fe:	76bb      	strb	r3, [r7, #26]
        break;
 8005600:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	2b00      	cmp	r3, #0
 8005606:	f000 80f1 	beq.w	80057ec <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	685a      	ldr	r2, [r3, #4]
 800560e:	4613      	mov	r3, r2
 8005610:	005b      	lsls	r3, r3, #1
 8005612:	4413      	add	r3, r2
 8005614:	697a      	ldr	r2, [r7, #20]
 8005616:	429a      	cmp	r2, r3
 8005618:	d305      	bcc.n	8005626 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005620:	697a      	ldr	r2, [r7, #20]
 8005622:	429a      	cmp	r2, r3
 8005624:	d902      	bls.n	800562c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	76bb      	strb	r3, [r7, #26]
 800562a:	e0df      	b.n	80057ec <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	4619      	mov	r1, r3
 8005630:	f04f 0200 	mov.w	r2, #0
 8005634:	f04f 0300 	mov.w	r3, #0
 8005638:	f04f 0400 	mov.w	r4, #0
 800563c:	0214      	lsls	r4, r2, #8
 800563e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005642:	020b      	lsls	r3, r1, #8
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	6852      	ldr	r2, [r2, #4]
 8005648:	0852      	lsrs	r2, r2, #1
 800564a:	4611      	mov	r1, r2
 800564c:	f04f 0200 	mov.w	r2, #0
 8005650:	eb13 0b01 	adds.w	fp, r3, r1
 8005654:	eb44 0c02 	adc.w	ip, r4, r2
 8005658:	4658      	mov	r0, fp
 800565a:	4661      	mov	r1, ip
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	f04f 0400 	mov.w	r4, #0
 8005664:	461a      	mov	r2, r3
 8005666:	4623      	mov	r3, r4
 8005668:	f7fa fdae 	bl	80001c8 <__aeabi_uldivmod>
 800566c:	4603      	mov	r3, r0
 800566e:	460c      	mov	r4, r1
 8005670:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005678:	d308      	bcc.n	800568c <UART_SetConfig+0x398>
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005680:	d204      	bcs.n	800568c <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	693a      	ldr	r2, [r7, #16]
 8005688:	60da      	str	r2, [r3, #12]
 800568a:	e0af      	b.n	80057ec <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	76bb      	strb	r3, [r7, #26]
 8005690:	e0ac      	b.n	80057ec <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	69db      	ldr	r3, [r3, #28]
 8005696:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800569a:	d15b      	bne.n	8005754 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800569c:	7efb      	ldrb	r3, [r7, #27]
 800569e:	2b08      	cmp	r3, #8
 80056a0:	d827      	bhi.n	80056f2 <UART_SetConfig+0x3fe>
 80056a2:	a201      	add	r2, pc, #4	; (adr r2, 80056a8 <UART_SetConfig+0x3b4>)
 80056a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056a8:	080056cd 	.word	0x080056cd
 80056ac:	080056d5 	.word	0x080056d5
 80056b0:	080056dd 	.word	0x080056dd
 80056b4:	080056f3 	.word	0x080056f3
 80056b8:	080056e3 	.word	0x080056e3
 80056bc:	080056f3 	.word	0x080056f3
 80056c0:	080056f3 	.word	0x080056f3
 80056c4:	080056f3 	.word	0x080056f3
 80056c8:	080056eb 	.word	0x080056eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056cc:	f7fe fcd0 	bl	8004070 <HAL_RCC_GetPCLK1Freq>
 80056d0:	6178      	str	r0, [r7, #20]
        break;
 80056d2:	e013      	b.n	80056fc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056d4:	f7fe fce2 	bl	800409c <HAL_RCC_GetPCLK2Freq>
 80056d8:	6178      	str	r0, [r7, #20]
        break;
 80056da:	e00f      	b.n	80056fc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056dc:	4b49      	ldr	r3, [pc, #292]	; (8005804 <UART_SetConfig+0x510>)
 80056de:	617b      	str	r3, [r7, #20]
        break;
 80056e0:	e00c      	b.n	80056fc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056e2:	f7fe fc2f 	bl	8003f44 <HAL_RCC_GetSysClockFreq>
 80056e6:	6178      	str	r0, [r7, #20]
        break;
 80056e8:	e008      	b.n	80056fc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056ee:	617b      	str	r3, [r7, #20]
        break;
 80056f0:	e004      	b.n	80056fc <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80056f2:	2300      	movs	r3, #0
 80056f4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	76bb      	strb	r3, [r7, #26]
        break;
 80056fa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d074      	beq.n	80057ec <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	005a      	lsls	r2, r3, #1
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	085b      	lsrs	r3, r3, #1
 800570c:	441a      	add	r2, r3
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	fbb2 f3f3 	udiv	r3, r2, r3
 8005716:	b29b      	uxth	r3, r3
 8005718:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	2b0f      	cmp	r3, #15
 800571e:	d916      	bls.n	800574e <UART_SetConfig+0x45a>
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005726:	d212      	bcs.n	800574e <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	b29b      	uxth	r3, r3
 800572c:	f023 030f 	bic.w	r3, r3, #15
 8005730:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	085b      	lsrs	r3, r3, #1
 8005736:	b29b      	uxth	r3, r3
 8005738:	f003 0307 	and.w	r3, r3, #7
 800573c:	b29a      	uxth	r2, r3
 800573e:	89fb      	ldrh	r3, [r7, #14]
 8005740:	4313      	orrs	r3, r2
 8005742:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	89fa      	ldrh	r2, [r7, #14]
 800574a:	60da      	str	r2, [r3, #12]
 800574c:	e04e      	b.n	80057ec <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	76bb      	strb	r3, [r7, #26]
 8005752:	e04b      	b.n	80057ec <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005754:	7efb      	ldrb	r3, [r7, #27]
 8005756:	2b08      	cmp	r3, #8
 8005758:	d827      	bhi.n	80057aa <UART_SetConfig+0x4b6>
 800575a:	a201      	add	r2, pc, #4	; (adr r2, 8005760 <UART_SetConfig+0x46c>)
 800575c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005760:	08005785 	.word	0x08005785
 8005764:	0800578d 	.word	0x0800578d
 8005768:	08005795 	.word	0x08005795
 800576c:	080057ab 	.word	0x080057ab
 8005770:	0800579b 	.word	0x0800579b
 8005774:	080057ab 	.word	0x080057ab
 8005778:	080057ab 	.word	0x080057ab
 800577c:	080057ab 	.word	0x080057ab
 8005780:	080057a3 	.word	0x080057a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005784:	f7fe fc74 	bl	8004070 <HAL_RCC_GetPCLK1Freq>
 8005788:	6178      	str	r0, [r7, #20]
        break;
 800578a:	e013      	b.n	80057b4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800578c:	f7fe fc86 	bl	800409c <HAL_RCC_GetPCLK2Freq>
 8005790:	6178      	str	r0, [r7, #20]
        break;
 8005792:	e00f      	b.n	80057b4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005794:	4b1b      	ldr	r3, [pc, #108]	; (8005804 <UART_SetConfig+0x510>)
 8005796:	617b      	str	r3, [r7, #20]
        break;
 8005798:	e00c      	b.n	80057b4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800579a:	f7fe fbd3 	bl	8003f44 <HAL_RCC_GetSysClockFreq>
 800579e:	6178      	str	r0, [r7, #20]
        break;
 80057a0:	e008      	b.n	80057b4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057a6:	617b      	str	r3, [r7, #20]
        break;
 80057a8:	e004      	b.n	80057b4 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80057aa:	2300      	movs	r3, #0
 80057ac:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	76bb      	strb	r3, [r7, #26]
        break;
 80057b2:	bf00      	nop
    }

    if (pclk != 0U)
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d018      	beq.n	80057ec <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	085a      	lsrs	r2, r3, #1
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	441a      	add	r2, r3
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	2b0f      	cmp	r3, #15
 80057d4:	d908      	bls.n	80057e8 <UART_SetConfig+0x4f4>
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057dc:	d204      	bcs.n	80057e8 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	693a      	ldr	r2, [r7, #16]
 80057e4:	60da      	str	r2, [r3, #12]
 80057e6:	e001      	b.n	80057ec <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2200      	movs	r2, #0
 80057f0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80057f8:	7ebb      	ldrb	r3, [r7, #26]
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3720      	adds	r7, #32
 80057fe:	46bd      	mov	sp, r7
 8005800:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8005804:	00f42400 	.word	0x00f42400

08005808 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005808:	b480      	push	{r7}
 800580a:	b083      	sub	sp, #12
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005814:	f003 0301 	and.w	r3, r3, #1
 8005818:	2b00      	cmp	r3, #0
 800581a:	d00a      	beq.n	8005832 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	430a      	orrs	r2, r1
 8005830:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005836:	f003 0302 	and.w	r3, r3, #2
 800583a:	2b00      	cmp	r3, #0
 800583c:	d00a      	beq.n	8005854 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	430a      	orrs	r2, r1
 8005852:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005858:	f003 0304 	and.w	r3, r3, #4
 800585c:	2b00      	cmp	r3, #0
 800585e:	d00a      	beq.n	8005876 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	430a      	orrs	r2, r1
 8005874:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587a:	f003 0308 	and.w	r3, r3, #8
 800587e:	2b00      	cmp	r3, #0
 8005880:	d00a      	beq.n	8005898 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	430a      	orrs	r2, r1
 8005896:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589c:	f003 0310 	and.w	r3, r3, #16
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d00a      	beq.n	80058ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	430a      	orrs	r2, r1
 80058b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058be:	f003 0320 	and.w	r3, r3, #32
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d00a      	beq.n	80058dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	430a      	orrs	r2, r1
 80058da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d01a      	beq.n	800591e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	430a      	orrs	r2, r1
 80058fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005902:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005906:	d10a      	bne.n	800591e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	430a      	orrs	r2, r1
 800591c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005926:	2b00      	cmp	r3, #0
 8005928:	d00a      	beq.n	8005940 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	430a      	orrs	r2, r1
 800593e:	605a      	str	r2, [r3, #4]
  }
}
 8005940:	bf00      	nop
 8005942:	370c      	adds	r7, #12
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr

0800594c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b086      	sub	sp, #24
 8005950:	af02      	add	r7, sp, #8
 8005952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800595a:	f7fb fca7 	bl	80012ac <HAL_GetTick>
 800595e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f003 0308 	and.w	r3, r3, #8
 800596a:	2b08      	cmp	r3, #8
 800596c:	d10e      	bne.n	800598c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800596e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005972:	9300      	str	r3, [sp, #0]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2200      	movs	r2, #0
 8005978:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f000 f82a 	bl	80059d6 <UART_WaitOnFlagUntilTimeout>
 8005982:	4603      	mov	r3, r0
 8005984:	2b00      	cmp	r3, #0
 8005986:	d001      	beq.n	800598c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005988:	2303      	movs	r3, #3
 800598a:	e020      	b.n	80059ce <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 0304 	and.w	r3, r3, #4
 8005996:	2b04      	cmp	r3, #4
 8005998:	d10e      	bne.n	80059b8 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800599a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800599e:	9300      	str	r3, [sp, #0]
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2200      	movs	r2, #0
 80059a4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f000 f814 	bl	80059d6 <UART_WaitOnFlagUntilTimeout>
 80059ae:	4603      	mov	r3, r0
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d001      	beq.n	80059b8 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059b4:	2303      	movs	r3, #3
 80059b6:	e00a      	b.n	80059ce <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2220      	movs	r2, #32
 80059bc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2220      	movs	r2, #32
 80059c2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80059cc:	2300      	movs	r3, #0
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3710      	adds	r7, #16
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}

080059d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80059d6:	b580      	push	{r7, lr}
 80059d8:	b084      	sub	sp, #16
 80059da:	af00      	add	r7, sp, #0
 80059dc:	60f8      	str	r0, [r7, #12]
 80059de:	60b9      	str	r1, [r7, #8]
 80059e0:	603b      	str	r3, [r7, #0]
 80059e2:	4613      	mov	r3, r2
 80059e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059e6:	e05d      	b.n	8005aa4 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059e8:	69bb      	ldr	r3, [r7, #24]
 80059ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ee:	d059      	beq.n	8005aa4 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059f0:	f7fb fc5c 	bl	80012ac <HAL_GetTick>
 80059f4:	4602      	mov	r2, r0
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	1ad3      	subs	r3, r2, r3
 80059fa:	69ba      	ldr	r2, [r7, #24]
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d302      	bcc.n	8005a06 <UART_WaitOnFlagUntilTimeout+0x30>
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d11b      	bne.n	8005a3e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005a14:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	689a      	ldr	r2, [r3, #8]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f022 0201 	bic.w	r2, r2, #1
 8005a24:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2220      	movs	r2, #32
 8005a2a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2220      	movs	r2, #32
 8005a30:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005a3a:	2303      	movs	r3, #3
 8005a3c:	e042      	b.n	8005ac4 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f003 0304 	and.w	r3, r3, #4
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d02b      	beq.n	8005aa4 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	69db      	ldr	r3, [r3, #28]
 8005a52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a5a:	d123      	bne.n	8005aa4 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a64:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005a74:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	689a      	ldr	r2, [r3, #8]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f022 0201 	bic.w	r2, r2, #1
 8005a84:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2220      	movs	r2, #32
 8005a8a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2220      	movs	r2, #32
 8005a90:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2220      	movs	r2, #32
 8005a96:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8005aa0:	2303      	movs	r3, #3
 8005aa2:	e00f      	b.n	8005ac4 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	69da      	ldr	r2, [r3, #28]
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	4013      	ands	r3, r2
 8005aae:	68ba      	ldr	r2, [r7, #8]
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	bf0c      	ite	eq
 8005ab4:	2301      	moveq	r3, #1
 8005ab6:	2300      	movne	r3, #0
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	461a      	mov	r2, r3
 8005abc:	79fb      	ldrb	r3, [r7, #7]
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d092      	beq.n	80059e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ac2:	2300      	movs	r3, #0
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3710      	adds	r7, #16
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}

08005acc <__libc_init_array>:
 8005acc:	b570      	push	{r4, r5, r6, lr}
 8005ace:	4e0d      	ldr	r6, [pc, #52]	; (8005b04 <__libc_init_array+0x38>)
 8005ad0:	4c0d      	ldr	r4, [pc, #52]	; (8005b08 <__libc_init_array+0x3c>)
 8005ad2:	1ba4      	subs	r4, r4, r6
 8005ad4:	10a4      	asrs	r4, r4, #2
 8005ad6:	2500      	movs	r5, #0
 8005ad8:	42a5      	cmp	r5, r4
 8005ada:	d109      	bne.n	8005af0 <__libc_init_array+0x24>
 8005adc:	4e0b      	ldr	r6, [pc, #44]	; (8005b0c <__libc_init_array+0x40>)
 8005ade:	4c0c      	ldr	r4, [pc, #48]	; (8005b10 <__libc_init_array+0x44>)
 8005ae0:	f000 f820 	bl	8005b24 <_init>
 8005ae4:	1ba4      	subs	r4, r4, r6
 8005ae6:	10a4      	asrs	r4, r4, #2
 8005ae8:	2500      	movs	r5, #0
 8005aea:	42a5      	cmp	r5, r4
 8005aec:	d105      	bne.n	8005afa <__libc_init_array+0x2e>
 8005aee:	bd70      	pop	{r4, r5, r6, pc}
 8005af0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005af4:	4798      	blx	r3
 8005af6:	3501      	adds	r5, #1
 8005af8:	e7ee      	b.n	8005ad8 <__libc_init_array+0xc>
 8005afa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005afe:	4798      	blx	r3
 8005b00:	3501      	adds	r5, #1
 8005b02:	e7f2      	b.n	8005aea <__libc_init_array+0x1e>
 8005b04:	08005b8c 	.word	0x08005b8c
 8005b08:	08005b8c 	.word	0x08005b8c
 8005b0c:	08005b8c 	.word	0x08005b8c
 8005b10:	08005b90 	.word	0x08005b90

08005b14 <memset>:
 8005b14:	4402      	add	r2, r0
 8005b16:	4603      	mov	r3, r0
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d100      	bne.n	8005b1e <memset+0xa>
 8005b1c:	4770      	bx	lr
 8005b1e:	f803 1b01 	strb.w	r1, [r3], #1
 8005b22:	e7f9      	b.n	8005b18 <memset+0x4>

08005b24 <_init>:
 8005b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b26:	bf00      	nop
 8005b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b2a:	bc08      	pop	{r3}
 8005b2c:	469e      	mov	lr, r3
 8005b2e:	4770      	bx	lr

08005b30 <_fini>:
 8005b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b32:	bf00      	nop
 8005b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b36:	bc08      	pop	{r3}
 8005b38:	469e      	mov	lr, r3
 8005b3a:	4770      	bx	lr
