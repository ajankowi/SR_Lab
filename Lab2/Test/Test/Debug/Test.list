
Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a78  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08008c00  08008c00  00018c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c4c  08008c4c  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08008c4c  08008c4c  00018c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c54  08008c54  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c54  08008c54  00018c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008c58  08008c58  00018c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08008c5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009dc  20000090  08008cec  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a6c  08008cec  00020a6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020f6d  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003f0e  00000000  00000000  0004102d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000017f0  00000000  00000000  00044f40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001630  00000000  00000000  00046730  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002ac73  00000000  00000000  00047d60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001559f  00000000  00000000  000729d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f950f  00000000  00000000  00087f72  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00181481  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065b4  00000000  00000000  001814fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008be8 	.word	0x08008be8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08008be8 	.word	0x08008be8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 ff4e 	bl	800136c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f81e 	bl	8000510 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 faba 	bl	8000a4c <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d8:	f000 f8c4 	bl	8000664 <MX_I2C1_Init>
  MX_I2C2_Init();
 80004dc:	f000 f902 	bl	80006e4 <MX_I2C2_Init>
  MX_LCD_Init();
 80004e0:	f000 f940 	bl	8000764 <MX_LCD_Init>
  MX_QUADSPI_Init();
 80004e4:	f000 f976 	bl	80007d4 <MX_QUADSPI_Init>
  MX_SAI1_Init();
 80004e8:	f000 f99a 	bl	8000820 <MX_SAI1_Init>
  MX_SPI2_Init();
 80004ec:	f000 fa40 	bl	8000970 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 80004f0:	f000 fa7c 	bl	80009ec <MX_USART2_UART_Init>
  MX_USB_HOST_Init();
 80004f4:	f007 ffc4 	bl	8008480 <MX_USB_HOST_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_TogglePin(LD_R_GPIO_Port,LD_R_Pin);
 80004f8:	2104      	movs	r1, #4
 80004fa:	4804      	ldr	r0, [pc, #16]	; (800050c <main+0x44>)
 80004fc:	f001 faa6 	bl	8001a4c <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8000500:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000504:	f000 ffae 	bl	8001464 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD_R_GPIO_Port,LD_R_Pin);
 8000508:	e7f6      	b.n	80004f8 <main+0x30>
 800050a:	bf00      	nop
 800050c:	48000400 	.word	0x48000400

08000510 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b0b8      	sub	sp, #224	; 0xe0
 8000514:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000516:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800051a:	2244      	movs	r2, #68	; 0x44
 800051c:	2100      	movs	r1, #0
 800051e:	4618      	mov	r0, r3
 8000520:	f008 faa0 	bl	8008a64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000524:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000528:	2200      	movs	r2, #0
 800052a:	601a      	str	r2, [r3, #0]
 800052c:	605a      	str	r2, [r3, #4]
 800052e:	609a      	str	r2, [r3, #8]
 8000530:	60da      	str	r2, [r3, #12]
 8000532:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000534:	463b      	mov	r3, r7
 8000536:	2288      	movs	r2, #136	; 0x88
 8000538:	2100      	movs	r1, #0
 800053a:	4618      	mov	r0, r3
 800053c:	f008 fa92 	bl	8008a64 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000540:	f003 f934 	bl	80037ac <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000544:	4b45      	ldr	r3, [pc, #276]	; (800065c <SystemClock_Config+0x14c>)
 8000546:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800054a:	4a44      	ldr	r2, [pc, #272]	; (800065c <SystemClock_Config+0x14c>)
 800054c:	f023 0318 	bic.w	r3, r3, #24
 8000550:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 8000554:	231c      	movs	r3, #28
 8000556:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800055a:	2301      	movs	r3, #1
 800055c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000560:	2301      	movs	r3, #1
 8000562:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000566:	2301      	movs	r3, #1
 8000568:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800056c:	2300      	movs	r3, #0
 800056e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000572:	2360      	movs	r3, #96	; 0x60
 8000574:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000578:	2302      	movs	r3, #2
 800057a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800057e:	2301      	movs	r3, #1
 8000580:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000584:	2301      	movs	r3, #1
 8000586:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 20;
 800058a:	2314      	movs	r3, #20
 800058c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000590:	2307      	movs	r3, #7
 8000592:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000596:	2302      	movs	r3, #2
 8000598:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800059c:	2302      	movs	r3, #2
 800059e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80005a6:	4618      	mov	r0, r3
 80005a8:	f003 fa40 	bl	8003a2c <HAL_RCC_OscConfig>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80005b2:	f000 fb87 	bl	8000cc4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b6:	230f      	movs	r3, #15
 80005b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005bc:	2303      	movs	r3, #3
 80005be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80005c2:	2380      	movs	r3, #128	; 0x80
 80005c4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c8:	2300      	movs	r3, #0
 80005ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ce:	2300      	movs	r3, #0
 80005d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005d4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80005d8:	2101      	movs	r1, #1
 80005da:	4618      	mov	r0, r3
 80005dc:	f003 fe0c 	bl	80041f8 <HAL_RCC_ClockConfig>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <SystemClock_Config+0xda>
  {
    Error_Handler();
 80005e6:	f000 fb6d 	bl	8000cc4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2
 80005ea:	4b1d      	ldr	r3, [pc, #116]	; (8000660 <SystemClock_Config+0x150>)
 80005ec:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005ee:	2300      	movs	r3, #0
 80005f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80005f2:	2300      	movs	r3, #0
 80005f4:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80005f6:	2300      	movs	r3, #0
 80005f8:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 80005fa:	2300      	movs	r3, #0
 80005fc:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80005fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000602:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000606:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800060a:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800060c:	2301      	movs	r3, #1
 800060e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000610:	2301      	movs	r3, #1
 8000612:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000614:	2318      	movs	r3, #24
 8000616:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000618:	2307      	movs	r3, #7
 800061a:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800061c:	2302      	movs	r3, #2
 800061e:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000620:	2302      	movs	r3, #2
 8000622:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_48M2CLK;
 8000624:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000628:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800062a:	463b      	mov	r3, r7
 800062c:	4618      	mov	r0, r3
 800062e:	f003 ffe7 	bl	8004600 <HAL_RCCEx_PeriphCLKConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0x12c>
  {
    Error_Handler();
 8000638:	f000 fb44 	bl	8000cc4 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800063c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000640:	f003 f8d2 	bl	80037e8 <HAL_PWREx_ControlVoltageScaling>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <SystemClock_Config+0x13e>
  {
    Error_Handler();
 800064a:	f000 fb3b 	bl	8000cc4 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800064e:	f004 ff43 	bl	80054d8 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000652:	bf00      	nop
 8000654:	37e0      	adds	r7, #224	; 0xe0
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40021000 	.word	0x40021000
 8000660:	000228c2 	.word	0x000228c2

08000664 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000668:	4b1b      	ldr	r3, [pc, #108]	; (80006d8 <MX_I2C1_Init+0x74>)
 800066a:	4a1c      	ldr	r2, [pc, #112]	; (80006dc <MX_I2C1_Init+0x78>)
 800066c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00404C74;
 800066e:	4b1a      	ldr	r3, [pc, #104]	; (80006d8 <MX_I2C1_Init+0x74>)
 8000670:	4a1b      	ldr	r2, [pc, #108]	; (80006e0 <MX_I2C1_Init+0x7c>)
 8000672:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000674:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <MX_I2C1_Init+0x74>)
 8000676:	2200      	movs	r2, #0
 8000678:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800067a:	4b17      	ldr	r3, [pc, #92]	; (80006d8 <MX_I2C1_Init+0x74>)
 800067c:	2201      	movs	r2, #1
 800067e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000680:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <MX_I2C1_Init+0x74>)
 8000682:	2200      	movs	r2, #0
 8000684:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000686:	4b14      	ldr	r3, [pc, #80]	; (80006d8 <MX_I2C1_Init+0x74>)
 8000688:	2200      	movs	r2, #0
 800068a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <MX_I2C1_Init+0x74>)
 800068e:	2200      	movs	r2, #0
 8000690:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000692:	4b11      	ldr	r3, [pc, #68]	; (80006d8 <MX_I2C1_Init+0x74>)
 8000694:	2200      	movs	r2, #0
 8000696:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000698:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <MX_I2C1_Init+0x74>)
 800069a:	2200      	movs	r2, #0
 800069c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800069e:	480e      	ldr	r0, [pc, #56]	; (80006d8 <MX_I2C1_Init+0x74>)
 80006a0:	f002 fe7b 	bl	800339a <HAL_I2C_Init>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006aa:	f000 fb0b 	bl	8000cc4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006ae:	2100      	movs	r1, #0
 80006b0:	4809      	ldr	r0, [pc, #36]	; (80006d8 <MX_I2C1_Init+0x74>)
 80006b2:	f002 ff01 	bl	80034b8 <HAL_I2CEx_ConfigAnalogFilter>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006bc:	f000 fb02 	bl	8000cc4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006c0:	2100      	movs	r1, #0
 80006c2:	4805      	ldr	r0, [pc, #20]	; (80006d8 <MX_I2C1_Init+0x74>)
 80006c4:	f002 ff43 	bl	800354e <HAL_I2CEx_ConfigDigitalFilter>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006ce:	f000 faf9 	bl	8000cc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20000128 	.word	0x20000128
 80006dc:	40005400 	.word	0x40005400
 80006e0:	00404c74 	.word	0x00404c74

080006e4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80006e8:	4b1b      	ldr	r3, [pc, #108]	; (8000758 <MX_I2C2_Init+0x74>)
 80006ea:	4a1c      	ldr	r2, [pc, #112]	; (800075c <MX_I2C2_Init+0x78>)
 80006ec:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00404C74;
 80006ee:	4b1a      	ldr	r3, [pc, #104]	; (8000758 <MX_I2C2_Init+0x74>)
 80006f0:	4a1b      	ldr	r2, [pc, #108]	; (8000760 <MX_I2C2_Init+0x7c>)
 80006f2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80006f4:	4b18      	ldr	r3, [pc, #96]	; (8000758 <MX_I2C2_Init+0x74>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006fa:	4b17      	ldr	r3, [pc, #92]	; (8000758 <MX_I2C2_Init+0x74>)
 80006fc:	2201      	movs	r2, #1
 80006fe:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000700:	4b15      	ldr	r3, [pc, #84]	; (8000758 <MX_I2C2_Init+0x74>)
 8000702:	2200      	movs	r2, #0
 8000704:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000706:	4b14      	ldr	r3, [pc, #80]	; (8000758 <MX_I2C2_Init+0x74>)
 8000708:	2200      	movs	r2, #0
 800070a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800070c:	4b12      	ldr	r3, [pc, #72]	; (8000758 <MX_I2C2_Init+0x74>)
 800070e:	2200      	movs	r2, #0
 8000710:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000712:	4b11      	ldr	r3, [pc, #68]	; (8000758 <MX_I2C2_Init+0x74>)
 8000714:	2200      	movs	r2, #0
 8000716:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000718:	4b0f      	ldr	r3, [pc, #60]	; (8000758 <MX_I2C2_Init+0x74>)
 800071a:	2200      	movs	r2, #0
 800071c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800071e:	480e      	ldr	r0, [pc, #56]	; (8000758 <MX_I2C2_Init+0x74>)
 8000720:	f002 fe3b 	bl	800339a <HAL_I2C_Init>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800072a:	f000 facb 	bl	8000cc4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800072e:	2100      	movs	r1, #0
 8000730:	4809      	ldr	r0, [pc, #36]	; (8000758 <MX_I2C2_Init+0x74>)
 8000732:	f002 fec1 	bl	80034b8 <HAL_I2CEx_ConfigAnalogFilter>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800073c:	f000 fac2 	bl	8000cc4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000740:	2100      	movs	r1, #0
 8000742:	4805      	ldr	r0, [pc, #20]	; (8000758 <MX_I2C2_Init+0x74>)
 8000744:	f002 ff03 	bl	800354e <HAL_I2CEx_ConfigDigitalFilter>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800074e:	f000 fab9 	bl	8000cc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	20000174 	.word	0x20000174
 800075c:	40005800 	.word	0x40005800
 8000760:	00404c74 	.word	0x00404c74

08000764 <MX_LCD_Init>:
  * @brief LCD Initialization Function
  * @param None
  * @retval None
  */
static void MX_LCD_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END LCD_Init 0 */

  /* USER CODE BEGIN LCD_Init 1 */

  /* USER CODE END LCD_Init 1 */
  hlcd.Instance = LCD;
 8000768:	4b18      	ldr	r3, [pc, #96]	; (80007cc <MX_LCD_Init+0x68>)
 800076a:	4a19      	ldr	r2, [pc, #100]	; (80007d0 <MX_LCD_Init+0x6c>)
 800076c:	601a      	str	r2, [r3, #0]
  hlcd.Init.Prescaler = LCD_PRESCALER_1;
 800076e:	4b17      	ldr	r3, [pc, #92]	; (80007cc <MX_LCD_Init+0x68>)
 8000770:	2200      	movs	r2, #0
 8000772:	605a      	str	r2, [r3, #4]
  hlcd.Init.Divider = LCD_DIVIDER_16;
 8000774:	4b15      	ldr	r3, [pc, #84]	; (80007cc <MX_LCD_Init+0x68>)
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
  hlcd.Init.Duty = LCD_DUTY_1_4;
 800077a:	4b14      	ldr	r3, [pc, #80]	; (80007cc <MX_LCD_Init+0x68>)
 800077c:	220c      	movs	r2, #12
 800077e:	60da      	str	r2, [r3, #12]
  hlcd.Init.Bias = LCD_BIAS_1_4;
 8000780:	4b12      	ldr	r3, [pc, #72]	; (80007cc <MX_LCD_Init+0x68>)
 8000782:	2200      	movs	r2, #0
 8000784:	611a      	str	r2, [r3, #16]
  hlcd.Init.VoltageSource = LCD_VOLTAGESOURCE_INTERNAL;
 8000786:	4b11      	ldr	r3, [pc, #68]	; (80007cc <MX_LCD_Init+0x68>)
 8000788:	2200      	movs	r2, #0
 800078a:	615a      	str	r2, [r3, #20]
  hlcd.Init.Contrast = LCD_CONTRASTLEVEL_0;
 800078c:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <MX_LCD_Init+0x68>)
 800078e:	2200      	movs	r2, #0
 8000790:	619a      	str	r2, [r3, #24]
  hlcd.Init.DeadTime = LCD_DEADTIME_0;
 8000792:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <MX_LCD_Init+0x68>)
 8000794:	2200      	movs	r2, #0
 8000796:	61da      	str	r2, [r3, #28]
  hlcd.Init.PulseOnDuration = LCD_PULSEONDURATION_0;
 8000798:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <MX_LCD_Init+0x68>)
 800079a:	2200      	movs	r2, #0
 800079c:	621a      	str	r2, [r3, #32]
  hlcd.Init.MuxSegment = LCD_MUXSEGMENT_DISABLE;
 800079e:	4b0b      	ldr	r3, [pc, #44]	; (80007cc <MX_LCD_Init+0x68>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	631a      	str	r2, [r3, #48]	; 0x30
  hlcd.Init.BlinkMode = LCD_BLINKMODE_OFF;
 80007a4:	4b09      	ldr	r3, [pc, #36]	; (80007cc <MX_LCD_Init+0x68>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	629a      	str	r2, [r3, #40]	; 0x28
  hlcd.Init.BlinkFrequency = LCD_BLINKFREQUENCY_DIV8;
 80007aa:	4b08      	ldr	r3, [pc, #32]	; (80007cc <MX_LCD_Init+0x68>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hlcd.Init.HighDrive = LCD_HIGHDRIVE_DISABLE;
 80007b0:	4b06      	ldr	r3, [pc, #24]	; (80007cc <MX_LCD_Init+0x68>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_LCD_Init(&hlcd) != HAL_OK)
 80007b6:	4805      	ldr	r0, [pc, #20]	; (80007cc <MX_LCD_Init+0x68>)
 80007b8:	f002 ff16 	bl	80035e8 <HAL_LCD_Init>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_LCD_Init+0x62>
  {
    Error_Handler();
 80007c2:	f000 fa7f 	bl	8000cc4 <Error_Handler>
  }
  /* USER CODE BEGIN LCD_Init 2 */

  /* USER CODE END LCD_Init 2 */

}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	20000244 	.word	0x20000244
 80007d0:	40002400 	.word	0x40002400

080007d4 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80007d8:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <MX_QUADSPI_Init+0x44>)
 80007da:	4a10      	ldr	r2, [pc, #64]	; (800081c <MX_QUADSPI_Init+0x48>)
 80007dc:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 80007de:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <MX_QUADSPI_Init+0x44>)
 80007e0:	22ff      	movs	r2, #255	; 0xff
 80007e2:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80007e4:	4b0c      	ldr	r3, [pc, #48]	; (8000818 <MX_QUADSPI_Init+0x44>)
 80007e6:	2201      	movs	r2, #1
 80007e8:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80007ea:	4b0b      	ldr	r3, [pc, #44]	; (8000818 <MX_QUADSPI_Init+0x44>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 80007f0:	4b09      	ldr	r3, [pc, #36]	; (8000818 <MX_QUADSPI_Init+0x44>)
 80007f2:	2201      	movs	r2, #1
 80007f4:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80007f6:	4b08      	ldr	r3, [pc, #32]	; (8000818 <MX_QUADSPI_Init+0x44>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80007fc:	4b06      	ldr	r3, [pc, #24]	; (8000818 <MX_QUADSPI_Init+0x44>)
 80007fe:	2200      	movs	r2, #0
 8000800:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000802:	4805      	ldr	r0, [pc, #20]	; (8000818 <MX_QUADSPI_Init+0x44>)
 8000804:	f003 f856 	bl	80038b4 <HAL_QSPI_Init>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 800080e:	f000 fa59 	bl	8000cc4 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	20000384 	.word	0x20000384
 800081c:	a0001000 	.word	0xa0001000

08000820 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000824:	4b4d      	ldr	r3, [pc, #308]	; (800095c <MX_SAI1_Init+0x13c>)
 8000826:	4a4e      	ldr	r2, [pc, #312]	; (8000960 <MX_SAI1_Init+0x140>)
 8000828:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 800082a:	4b4c      	ldr	r3, [pc, #304]	; (800095c <MX_SAI1_Init+0x13c>)
 800082c:	2200      	movs	r2, #0
 800082e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000830:	4b4a      	ldr	r3, [pc, #296]	; (800095c <MX_SAI1_Init+0x13c>)
 8000832:	2200      	movs	r2, #0
 8000834:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8000836:	4b49      	ldr	r3, [pc, #292]	; (800095c <MX_SAI1_Init+0x13c>)
 8000838:	2240      	movs	r2, #64	; 0x40
 800083a:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800083c:	4b47      	ldr	r3, [pc, #284]	; (800095c <MX_SAI1_Init+0x13c>)
 800083e:	2200      	movs	r2, #0
 8000840:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000842:	4b46      	ldr	r3, [pc, #280]	; (800095c <MX_SAI1_Init+0x13c>)
 8000844:	2200      	movs	r2, #0
 8000846:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000848:	4b44      	ldr	r3, [pc, #272]	; (800095c <MX_SAI1_Init+0x13c>)
 800084a:	2200      	movs	r2, #0
 800084c:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800084e:	4b43      	ldr	r3, [pc, #268]	; (800095c <MX_SAI1_Init+0x13c>)
 8000850:	2200      	movs	r2, #0
 8000852:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000854:	4b41      	ldr	r3, [pc, #260]	; (800095c <MX_SAI1_Init+0x13c>)
 8000856:	2200      	movs	r2, #0
 8000858:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800085a:	4b40      	ldr	r3, [pc, #256]	; (800095c <MX_SAI1_Init+0x13c>)
 800085c:	2200      	movs	r2, #0
 800085e:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000860:	4b3e      	ldr	r3, [pc, #248]	; (800095c <MX_SAI1_Init+0x13c>)
 8000862:	4a40      	ldr	r2, [pc, #256]	; (8000964 <MX_SAI1_Init+0x144>)
 8000864:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000866:	4b3d      	ldr	r3, [pc, #244]	; (800095c <MX_SAI1_Init+0x13c>)
 8000868:	2200      	movs	r2, #0
 800086a:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 800086c:	4b3b      	ldr	r3, [pc, #236]	; (800095c <MX_SAI1_Init+0x13c>)
 800086e:	2200      	movs	r2, #0
 8000870:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000872:	4b3a      	ldr	r3, [pc, #232]	; (800095c <MX_SAI1_Init+0x13c>)
 8000874:	2200      	movs	r2, #0
 8000876:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000878:	4b38      	ldr	r3, [pc, #224]	; (800095c <MX_SAI1_Init+0x13c>)
 800087a:	2200      	movs	r2, #0
 800087c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.FrameInit.FrameLength = 8;
 800087e:	4b37      	ldr	r3, [pc, #220]	; (800095c <MX_SAI1_Init+0x13c>)
 8000880:	2208      	movs	r2, #8
 8000882:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8000884:	4b35      	ldr	r3, [pc, #212]	; (800095c <MX_SAI1_Init+0x13c>)
 8000886:	2201      	movs	r2, #1
 8000888:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800088a:	4b34      	ldr	r3, [pc, #208]	; (800095c <MX_SAI1_Init+0x13c>)
 800088c:	2200      	movs	r2, #0
 800088e:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000890:	4b32      	ldr	r3, [pc, #200]	; (800095c <MX_SAI1_Init+0x13c>)
 8000892:	2200      	movs	r2, #0
 8000894:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000896:	4b31      	ldr	r3, [pc, #196]	; (800095c <MX_SAI1_Init+0x13c>)
 8000898:	2200      	movs	r2, #0
 800089a:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 800089c:	4b2f      	ldr	r3, [pc, #188]	; (800095c <MX_SAI1_Init+0x13c>)
 800089e:	2200      	movs	r2, #0
 80008a0:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80008a2:	4b2e      	ldr	r3, [pc, #184]	; (800095c <MX_SAI1_Init+0x13c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 80008a8:	4b2c      	ldr	r3, [pc, #176]	; (800095c <MX_SAI1_Init+0x13c>)
 80008aa:	2201      	movs	r2, #1
 80008ac:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 80008ae:	4b2b      	ldr	r3, [pc, #172]	; (800095c <MX_SAI1_Init+0x13c>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 80008b4:	4829      	ldr	r0, [pc, #164]	; (800095c <MX_SAI1_Init+0x13c>)
 80008b6:	f005 f8d9 	bl	8005a6c <HAL_SAI_Init>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_SAI1_Init+0xa4>
  {
    Error_Handler();
 80008c0:	f000 fa00 	bl	8000cc4 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 80008c4:	4b28      	ldr	r3, [pc, #160]	; (8000968 <MX_SAI1_Init+0x148>)
 80008c6:	4a29      	ldr	r2, [pc, #164]	; (800096c <MX_SAI1_Init+0x14c>)
 80008c8:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 80008ca:	4b27      	ldr	r3, [pc, #156]	; (8000968 <MX_SAI1_Init+0x148>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 80008d0:	4b25      	ldr	r3, [pc, #148]	; (8000968 <MX_SAI1_Init+0x148>)
 80008d2:	2203      	movs	r2, #3
 80008d4:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 80008d6:	4b24      	ldr	r3, [pc, #144]	; (8000968 <MX_SAI1_Init+0x148>)
 80008d8:	2240      	movs	r2, #64	; 0x40
 80008da:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80008dc:	4b22      	ldr	r3, [pc, #136]	; (8000968 <MX_SAI1_Init+0x148>)
 80008de:	2200      	movs	r2, #0
 80008e0:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80008e2:	4b21      	ldr	r3, [pc, #132]	; (8000968 <MX_SAI1_Init+0x148>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 80008e8:	4b1f      	ldr	r3, [pc, #124]	; (8000968 <MX_SAI1_Init+0x148>)
 80008ea:	2201      	movs	r2, #1
 80008ec:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80008ee:	4b1e      	ldr	r3, [pc, #120]	; (8000968 <MX_SAI1_Init+0x148>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80008f4:	4b1c      	ldr	r3, [pc, #112]	; (8000968 <MX_SAI1_Init+0x148>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80008fa:	4b1b      	ldr	r3, [pc, #108]	; (8000968 <MX_SAI1_Init+0x148>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000900:	4b19      	ldr	r3, [pc, #100]	; (8000968 <MX_SAI1_Init+0x148>)
 8000902:	2200      	movs	r2, #0
 8000904:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000906:	4b18      	ldr	r3, [pc, #96]	; (8000968 <MX_SAI1_Init+0x148>)
 8000908:	2200      	movs	r2, #0
 800090a:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800090c:	4b16      	ldr	r3, [pc, #88]	; (8000968 <MX_SAI1_Init+0x148>)
 800090e:	2200      	movs	r2, #0
 8000910:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.FrameInit.FrameLength = 8;
 8000912:	4b15      	ldr	r3, [pc, #84]	; (8000968 <MX_SAI1_Init+0x148>)
 8000914:	2208      	movs	r2, #8
 8000916:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 8000918:	4b13      	ldr	r3, [pc, #76]	; (8000968 <MX_SAI1_Init+0x148>)
 800091a:	2201      	movs	r2, #1
 800091c:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800091e:	4b12      	ldr	r3, [pc, #72]	; (8000968 <MX_SAI1_Init+0x148>)
 8000920:	2200      	movs	r2, #0
 8000922:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000924:	4b10      	ldr	r3, [pc, #64]	; (8000968 <MX_SAI1_Init+0x148>)
 8000926:	2200      	movs	r2, #0
 8000928:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800092a:	4b0f      	ldr	r3, [pc, #60]	; (8000968 <MX_SAI1_Init+0x148>)
 800092c:	2200      	movs	r2, #0
 800092e:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 8000930:	4b0d      	ldr	r3, [pc, #52]	; (8000968 <MX_SAI1_Init+0x148>)
 8000932:	2200      	movs	r2, #0
 8000934:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000936:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <MX_SAI1_Init+0x148>)
 8000938:	2200      	movs	r2, #0
 800093a:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 800093c:	4b0a      	ldr	r3, [pc, #40]	; (8000968 <MX_SAI1_Init+0x148>)
 800093e:	2201      	movs	r2, #1
 8000940:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 8000942:	4b09      	ldr	r3, [pc, #36]	; (8000968 <MX_SAI1_Init+0x148>)
 8000944:	2200      	movs	r2, #0
 8000946:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8000948:	4807      	ldr	r0, [pc, #28]	; (8000968 <MX_SAI1_Init+0x148>)
 800094a:	f005 f88f 	bl	8005a6c <HAL_SAI_Init>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_SAI1_Init+0x138>
  {
    Error_Handler();
 8000954:	f000 f9b6 	bl	8000cc4 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000958:	bf00      	nop
 800095a:	bd80      	pop	{r7, pc}
 800095c:	20000280 	.word	0x20000280
 8000960:	40015404 	.word	0x40015404
 8000964:	0002ee00 	.word	0x0002ee00
 8000968:	200001c0 	.word	0x200001c0
 800096c:	40015424 	.word	0x40015424

08000970 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000974:	4b1b      	ldr	r3, [pc, #108]	; (80009e4 <MX_SPI2_Init+0x74>)
 8000976:	4a1c      	ldr	r2, [pc, #112]	; (80009e8 <MX_SPI2_Init+0x78>)
 8000978:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800097a:	4b1a      	ldr	r3, [pc, #104]	; (80009e4 <MX_SPI2_Init+0x74>)
 800097c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000980:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000982:	4b18      	ldr	r3, [pc, #96]	; (80009e4 <MX_SPI2_Init+0x74>)
 8000984:	2200      	movs	r2, #0
 8000986:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000988:	4b16      	ldr	r3, [pc, #88]	; (80009e4 <MX_SPI2_Init+0x74>)
 800098a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800098e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000990:	4b14      	ldr	r3, [pc, #80]	; (80009e4 <MX_SPI2_Init+0x74>)
 8000992:	2200      	movs	r2, #0
 8000994:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000996:	4b13      	ldr	r3, [pc, #76]	; (80009e4 <MX_SPI2_Init+0x74>)
 8000998:	2200      	movs	r2, #0
 800099a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800099c:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <MX_SPI2_Init+0x74>)
 800099e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009a2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009a4:	4b0f      	ldr	r3, [pc, #60]	; (80009e4 <MX_SPI2_Init+0x74>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009aa:	4b0e      	ldr	r3, [pc, #56]	; (80009e4 <MX_SPI2_Init+0x74>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80009b0:	4b0c      	ldr	r3, [pc, #48]	; (80009e4 <MX_SPI2_Init+0x74>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009b6:	4b0b      	ldr	r3, [pc, #44]	; (80009e4 <MX_SPI2_Init+0x74>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80009bc:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <MX_SPI2_Init+0x74>)
 80009be:	2207      	movs	r2, #7
 80009c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009c2:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <MX_SPI2_Init+0x74>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009c8:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <MX_SPI2_Init+0x74>)
 80009ca:	2208      	movs	r2, #8
 80009cc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80009ce:	4805      	ldr	r0, [pc, #20]	; (80009e4 <MX_SPI2_Init+0x74>)
 80009d0:	f005 f9f6 	bl	8005dc0 <HAL_SPI_Init>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80009da:	f000 f973 	bl	8000cc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	200000c4 	.word	0x200000c4
 80009e8:	40003800 	.word	0x40003800

080009ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009f0:	4b14      	ldr	r3, [pc, #80]	; (8000a44 <MX_USART2_UART_Init+0x58>)
 80009f2:	4a15      	ldr	r2, [pc, #84]	; (8000a48 <MX_USART2_UART_Init+0x5c>)
 80009f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009f6:	4b13      	ldr	r3, [pc, #76]	; (8000a44 <MX_USART2_UART_Init+0x58>)
 80009f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009fe:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <MX_USART2_UART_Init+0x58>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a04:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <MX_USART2_UART_Init+0x58>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a0a:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <MX_USART2_UART_Init+0x58>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a10:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <MX_USART2_UART_Init+0x58>)
 8000a12:	220c      	movs	r2, #12
 8000a14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a16:	4b0b      	ldr	r3, [pc, #44]	; (8000a44 <MX_USART2_UART_Init+0x58>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a1c:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <MX_USART2_UART_Init+0x58>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a22:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <MX_USART2_UART_Init+0x58>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a28:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <MX_USART2_UART_Init+0x58>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a2e:	4805      	ldr	r0, [pc, #20]	; (8000a44 <MX_USART2_UART_Init+0x58>)
 8000a30:	f005 fa69 	bl	8005f06 <HAL_UART_Init>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a3a:	f000 f943 	bl	8000cc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	20000304 	.word	0x20000304
 8000a48:	40004400 	.word	0x40004400

08000a4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08c      	sub	sp, #48	; 0x30
 8000a50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a52:	f107 031c 	add.w	r3, r7, #28
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
 8000a5e:	60da      	str	r2, [r3, #12]
 8000a60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a62:	4b92      	ldr	r3, [pc, #584]	; (8000cac <MX_GPIO_Init+0x260>)
 8000a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a66:	4a91      	ldr	r2, [pc, #580]	; (8000cac <MX_GPIO_Init+0x260>)
 8000a68:	f043 0310 	orr.w	r3, r3, #16
 8000a6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a6e:	4b8f      	ldr	r3, [pc, #572]	; (8000cac <MX_GPIO_Init+0x260>)
 8000a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a72:	f003 0310 	and.w	r3, r3, #16
 8000a76:	61bb      	str	r3, [r7, #24]
 8000a78:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a7a:	4b8c      	ldr	r3, [pc, #560]	; (8000cac <MX_GPIO_Init+0x260>)
 8000a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7e:	4a8b      	ldr	r2, [pc, #556]	; (8000cac <MX_GPIO_Init+0x260>)
 8000a80:	f043 0304 	orr.w	r3, r3, #4
 8000a84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a86:	4b89      	ldr	r3, [pc, #548]	; (8000cac <MX_GPIO_Init+0x260>)
 8000a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a8a:	f003 0304 	and.w	r3, r3, #4
 8000a8e:	617b      	str	r3, [r7, #20]
 8000a90:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a92:	4b86      	ldr	r3, [pc, #536]	; (8000cac <MX_GPIO_Init+0x260>)
 8000a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a96:	4a85      	ldr	r2, [pc, #532]	; (8000cac <MX_GPIO_Init+0x260>)
 8000a98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a9e:	4b83      	ldr	r3, [pc, #524]	; (8000cac <MX_GPIO_Init+0x260>)
 8000aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aa6:	613b      	str	r3, [r7, #16]
 8000aa8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aaa:	4b80      	ldr	r3, [pc, #512]	; (8000cac <MX_GPIO_Init+0x260>)
 8000aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aae:	4a7f      	ldr	r2, [pc, #508]	; (8000cac <MX_GPIO_Init+0x260>)
 8000ab0:	f043 0301 	orr.w	r3, r3, #1
 8000ab4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ab6:	4b7d      	ldr	r3, [pc, #500]	; (8000cac <MX_GPIO_Init+0x260>)
 8000ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aba:	f003 0301 	and.w	r3, r3, #1
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac2:	4b7a      	ldr	r3, [pc, #488]	; (8000cac <MX_GPIO_Init+0x260>)
 8000ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac6:	4a79      	ldr	r2, [pc, #484]	; (8000cac <MX_GPIO_Init+0x260>)
 8000ac8:	f043 0302 	orr.w	r3, r3, #2
 8000acc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ace:	4b77      	ldr	r3, [pc, #476]	; (8000cac <MX_GPIO_Init+0x260>)
 8000ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad2:	f003 0302 	and.w	r3, r3, #2
 8000ad6:	60bb      	str	r3, [r7, #8]
 8000ad8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ada:	4b74      	ldr	r3, [pc, #464]	; (8000cac <MX_GPIO_Init+0x260>)
 8000adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ade:	4a73      	ldr	r2, [pc, #460]	; (8000cac <MX_GPIO_Init+0x260>)
 8000ae0:	f043 0308 	orr.w	r3, r3, #8
 8000ae4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ae6:	4b71      	ldr	r3, [pc, #452]	; (8000cac <MX_GPIO_Init+0x260>)
 8000ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aea:	f003 0308 	and.w	r3, r3, #8
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, AUDIO_RST_Pin|LD_G_Pin|XL_CS_Pin, GPIO_PIN_RESET);
 8000af2:	2200      	movs	r2, #0
 8000af4:	f240 1109 	movw	r1, #265	; 0x109
 8000af8:	486d      	ldr	r0, [pc, #436]	; (8000cb0 <MX_GPIO_Init+0x264>)
 8000afa:	f000 ff8f 	bl	8001a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD_R_Pin|M3V3_REG_ON_Pin, GPIO_PIN_RESET);
 8000afe:	2200      	movs	r2, #0
 8000b00:	210c      	movs	r1, #12
 8000b02:	486c      	ldr	r0, [pc, #432]	; (8000cb4 <MX_GPIO_Init+0x268>)
 8000b04:	f000 ff8a 	bl	8001a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000b08:	2201      	movs	r2, #1
 8000b0a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b0e:	486a      	ldr	r0, [pc, #424]	; (8000cb8 <MX_GPIO_Init+0x26c>)
 8000b10:	f000 ff84 	bl	8001a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_VBUS_GPIO_Port, OTG_FS_VBUS_Pin, GPIO_PIN_RESET);
 8000b14:	2200      	movs	r2, #0
 8000b16:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b1a:	4867      	ldr	r0, [pc, #412]	; (8000cb8 <MX_GPIO_Init+0x26c>)
 8000b1c:	f000 ff7e 	bl	8001a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 8000b20:	2200      	movs	r2, #0
 8000b22:	2180      	movs	r1, #128	; 0x80
 8000b24:	4865      	ldr	r0, [pc, #404]	; (8000cbc <MX_GPIO_Init+0x270>)
 8000b26:	f000 ff79 	bl	8001a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : AUDIO_RST_Pin */
  GPIO_InitStruct.Pin = AUDIO_RST_Pin;
 8000b2a:	2308      	movs	r3, #8
 8000b2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b36:	2302      	movs	r3, #2
 8000b38:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AUDIO_RST_GPIO_Port, &GPIO_InitStruct);
 8000b3a:	f107 031c 	add.w	r3, r7, #28
 8000b3e:	4619      	mov	r1, r3
 8000b40:	485b      	ldr	r0, [pc, #364]	; (8000cb0 <MX_GPIO_Init+0x264>)
 8000b42:	f000 fdc3 	bl	80016cc <HAL_GPIO_Init>

  /*Configure GPIO pins : MFX_IRQ_OUT_Pin OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin|OTG_FS_OverCurrent_Pin;
 8000b46:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8000b4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b4c:	4b5c      	ldr	r3, [pc, #368]	; (8000cc0 <MX_GPIO_Init+0x274>)
 8000b4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b54:	f107 031c 	add.w	r3, r7, #28
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4857      	ldr	r0, [pc, #348]	; (8000cb8 <MX_GPIO_Init+0x26c>)
 8000b5c:	f000 fdb6 	bl	80016cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 MAG_INT_Pin MAG_DRDY_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|MAG_INT_Pin|MAG_DRDY_Pin;
 8000b60:	2307      	movs	r3, #7
 8000b62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b64:	2300      	movs	r3, #0
 8000b66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b6c:	f107 031c 	add.w	r3, r7, #28
 8000b70:	4619      	mov	r1, r3
 8000b72:	4851      	ldr	r0, [pc, #324]	; (8000cb8 <MX_GPIO_Init+0x26c>)
 8000b74:	f000 fdaa 	bl	80016cc <HAL_GPIO_Init>

  /*Configure GPIO pins : JOY_CENTER_Pin JOY_LEFT_Pin JOY_RIGHT_Pin JOY_UP_Pin
                           JOY_DOWN_Pin */
  GPIO_InitStruct.Pin = JOY_CENTER_Pin|JOY_LEFT_Pin|JOY_RIGHT_Pin|JOY_UP_Pin
 8000b78:	232f      	movs	r3, #47	; 0x2f
 8000b7a:	61fb      	str	r3, [r7, #28]
                          |JOY_DOWN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b80:	2302      	movs	r3, #2
 8000b82:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b84:	f107 031c 	add.w	r3, r7, #28
 8000b88:	4619      	mov	r1, r3
 8000b8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b8e:	f000 fd9d 	bl	80016cc <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_WAKEUP_Pin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
 8000b92:	2310      	movs	r3, #16
 8000b94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b96:	4b4a      	ldr	r3, [pc, #296]	; (8000cc0 <MX_GPIO_Init+0x274>)
 8000b98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8000b9e:	f107 031c 	add.w	r3, r7, #28
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ba8:	f000 fd90 	bl	80016cc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD_R_Pin */
  GPIO_InitStruct.Pin = LD_R_Pin;
 8000bac:	2304      	movs	r3, #4
 8000bae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb8:	2303      	movs	r3, #3
 8000bba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_R_GPIO_Port, &GPIO_InitStruct);
 8000bbc:	f107 031c 	add.w	r3, r7, #28
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	483c      	ldr	r0, [pc, #240]	; (8000cb4 <MX_GPIO_Init+0x268>)
 8000bc4:	f000 fd82 	bl	80016cc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD_G_Pin */
  GPIO_InitStruct.Pin = LD_G_Pin;
 8000bc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd6:	2303      	movs	r3, #3
 8000bd8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_G_GPIO_Port, &GPIO_InitStruct);
 8000bda:	f107 031c 	add.w	r3, r7, #28
 8000bde:	4619      	mov	r1, r3
 8000be0:	4833      	ldr	r0, [pc, #204]	; (8000cb0 <MX_GPIO_Init+0x264>)
 8000be2:	f000 fd73 	bl	80016cc <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|OTG_FS_VBUS_Pin;
 8000be6:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8000bea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bec:	2301      	movs	r3, #1
 8000bee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bf8:	f107 031c 	add.w	r3, r7, #28
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	482e      	ldr	r0, [pc, #184]	; (8000cb8 <MX_GPIO_Init+0x26c>)
 8000c00:	f000 fd64 	bl	80016cc <HAL_GPIO_Init>

  /*Configure GPIO pins : EXT_RST_Pin GYRO_INT1_Pin */
  GPIO_InitStruct.Pin = EXT_RST_Pin|GYRO_INT1_Pin;
 8000c04:	2305      	movs	r3, #5
 8000c06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c08:	4b2d      	ldr	r3, [pc, #180]	; (8000cc0 <MX_GPIO_Init+0x274>)
 8000c0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c10:	f107 031c 	add.w	r3, r7, #28
 8000c14:	4619      	mov	r1, r3
 8000c16:	4829      	ldr	r0, [pc, #164]	; (8000cbc <MX_GPIO_Init+0x270>)
 8000c18:	f000 fd58 	bl	80016cc <HAL_GPIO_Init>

  /*Configure GPIO pin : GYRO_CS_Pin */
  GPIO_InitStruct.Pin = GYRO_CS_Pin;
 8000c1c:	2380      	movs	r3, #128	; 0x80
 8000c1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c20:	2301      	movs	r3, #1
 8000c22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c28:	2303      	movs	r3, #3
 8000c2a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GYRO_CS_GPIO_Port, &GPIO_InitStruct);
 8000c2c:	f107 031c 	add.w	r3, r7, #28
 8000c30:	4619      	mov	r1, r3
 8000c32:	4822      	ldr	r0, [pc, #136]	; (8000cbc <MX_GPIO_Init+0x270>)
 8000c34:	f000 fd4a 	bl	80016cc <HAL_GPIO_Init>

  /*Configure GPIO pin : M3V3_REG_ON_Pin */
  GPIO_InitStruct.Pin = M3V3_REG_ON_Pin;
 8000c38:	2308      	movs	r3, #8
 8000c3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c40:	2300      	movs	r3, #0
 8000c42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c44:	2300      	movs	r3, #0
 8000c46:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(M3V3_REG_ON_GPIO_Port, &GPIO_InitStruct);
 8000c48:	f107 031c 	add.w	r3, r7, #28
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4819      	ldr	r0, [pc, #100]	; (8000cb4 <MX_GPIO_Init+0x268>)
 8000c50:	f000 fd3c 	bl	80016cc <HAL_GPIO_Init>

  /*Configure GPIO pin : GYRO_INT2_Pin */
  GPIO_InitStruct.Pin = GYRO_INT2_Pin;
 8000c54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c5a:	4b19      	ldr	r3, [pc, #100]	; (8000cc0 <MX_GPIO_Init+0x274>)
 8000c5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GYRO_INT2_GPIO_Port, &GPIO_InitStruct);
 8000c62:	f107 031c 	add.w	r3, r7, #28
 8000c66:	4619      	mov	r1, r3
 8000c68:	4812      	ldr	r0, [pc, #72]	; (8000cb4 <MX_GPIO_Init+0x268>)
 8000c6a:	f000 fd2f 	bl	80016cc <HAL_GPIO_Init>

  /*Configure GPIO pin : XL_CS_Pin */
  GPIO_InitStruct.Pin = XL_CS_Pin;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c72:	2301      	movs	r3, #1
 8000c74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(XL_CS_GPIO_Port, &GPIO_InitStruct);
 8000c7e:	f107 031c 	add.w	r3, r7, #28
 8000c82:	4619      	mov	r1, r3
 8000c84:	480a      	ldr	r0, [pc, #40]	; (8000cb0 <MX_GPIO_Init+0x264>)
 8000c86:	f000 fd21 	bl	80016cc <HAL_GPIO_Init>

  /*Configure GPIO pin : XL_INT_Pin */
  GPIO_InitStruct.Pin = XL_INT_Pin;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c8e:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <MX_GPIO_Init+0x274>)
 8000c90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(XL_INT_GPIO_Port, &GPIO_InitStruct);
 8000c96:	f107 031c 	add.w	r3, r7, #28
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4804      	ldr	r0, [pc, #16]	; (8000cb0 <MX_GPIO_Init+0x264>)
 8000c9e:	f000 fd15 	bl	80016cc <HAL_GPIO_Init>

}
 8000ca2:	bf00      	nop
 8000ca4:	3730      	adds	r7, #48	; 0x30
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	40021000 	.word	0x40021000
 8000cb0:	48001000 	.word	0x48001000
 8000cb4:	48000400 	.word	0x48000400
 8000cb8:	48000800 	.word	0x48000800
 8000cbc:	48000c00 	.word	0x48000c00
 8000cc0:	10120000 	.word	0x10120000

08000cc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000cc8:	bf00      	nop
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
	...

08000cd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cda:	4b0f      	ldr	r3, [pc, #60]	; (8000d18 <HAL_MspInit+0x44>)
 8000cdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cde:	4a0e      	ldr	r2, [pc, #56]	; (8000d18 <HAL_MspInit+0x44>)
 8000ce0:	f043 0301 	orr.w	r3, r3, #1
 8000ce4:	6613      	str	r3, [r2, #96]	; 0x60
 8000ce6:	4b0c      	ldr	r3, [pc, #48]	; (8000d18 <HAL_MspInit+0x44>)
 8000ce8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	607b      	str	r3, [r7, #4]
 8000cf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cf2:	4b09      	ldr	r3, [pc, #36]	; (8000d18 <HAL_MspInit+0x44>)
 8000cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cf6:	4a08      	ldr	r2, [pc, #32]	; (8000d18 <HAL_MspInit+0x44>)
 8000cf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cfc:	6593      	str	r3, [r2, #88]	; 0x58
 8000cfe:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <HAL_MspInit+0x44>)
 8000d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d06:	603b      	str	r3, [r7, #0]
 8000d08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	370c      	adds	r7, #12
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	40021000 	.word	0x40021000

08000d1c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b08c      	sub	sp, #48	; 0x30
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d24:	f107 031c 	add.w	r3, r7, #28
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]
 8000d32:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a2e      	ldr	r2, [pc, #184]	; (8000df4 <HAL_I2C_MspInit+0xd8>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d128      	bne.n	8000d90 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d3e:	4b2e      	ldr	r3, [pc, #184]	; (8000df8 <HAL_I2C_MspInit+0xdc>)
 8000d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d42:	4a2d      	ldr	r2, [pc, #180]	; (8000df8 <HAL_I2C_MspInit+0xdc>)
 8000d44:	f043 0302 	orr.w	r3, r3, #2
 8000d48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d4a:	4b2b      	ldr	r3, [pc, #172]	; (8000df8 <HAL_I2C_MspInit+0xdc>)
 8000d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d4e:	f003 0302 	and.w	r3, r3, #2
 8000d52:	61bb      	str	r3, [r7, #24]
 8000d54:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000d56:	23c0      	movs	r3, #192	; 0xc0
 8000d58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d5a:	2312      	movs	r3, #18
 8000d5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d62:	2303      	movs	r3, #3
 8000d64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d66:	2304      	movs	r3, #4
 8000d68:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d6a:	f107 031c 	add.w	r3, r7, #28
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4822      	ldr	r0, [pc, #136]	; (8000dfc <HAL_I2C_MspInit+0xe0>)
 8000d72:	f000 fcab 	bl	80016cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d76:	4b20      	ldr	r3, [pc, #128]	; (8000df8 <HAL_I2C_MspInit+0xdc>)
 8000d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d7a:	4a1f      	ldr	r2, [pc, #124]	; (8000df8 <HAL_I2C_MspInit+0xdc>)
 8000d7c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d80:	6593      	str	r3, [r2, #88]	; 0x58
 8000d82:	4b1d      	ldr	r3, [pc, #116]	; (8000df8 <HAL_I2C_MspInit+0xdc>)
 8000d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d8a:	617b      	str	r3, [r7, #20]
 8000d8c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000d8e:	e02d      	b.n	8000dec <HAL_I2C_MspInit+0xd0>
  else if(hi2c->Instance==I2C2)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a1a      	ldr	r2, [pc, #104]	; (8000e00 <HAL_I2C_MspInit+0xe4>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d128      	bne.n	8000dec <HAL_I2C_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d9a:	4b17      	ldr	r3, [pc, #92]	; (8000df8 <HAL_I2C_MspInit+0xdc>)
 8000d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9e:	4a16      	ldr	r2, [pc, #88]	; (8000df8 <HAL_I2C_MspInit+0xdc>)
 8000da0:	f043 0302 	orr.w	r3, r3, #2
 8000da4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000da6:	4b14      	ldr	r3, [pc, #80]	; (8000df8 <HAL_I2C_MspInit+0xdc>)
 8000da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000daa:	f003 0302 	and.w	r3, r3, #2
 8000dae:	613b      	str	r3, [r7, #16]
 8000db0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MFX_I2C_SLC_Pin|MFX_I2C_SDA_Pin;
 8000db2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000db6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000db8:	2312      	movs	r3, #18
 8000dba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000dc4:	2304      	movs	r3, #4
 8000dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc8:	f107 031c 	add.w	r3, r7, #28
 8000dcc:	4619      	mov	r1, r3
 8000dce:	480b      	ldr	r0, [pc, #44]	; (8000dfc <HAL_I2C_MspInit+0xe0>)
 8000dd0:	f000 fc7c 	bl	80016cc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000dd4:	4b08      	ldr	r3, [pc, #32]	; (8000df8 <HAL_I2C_MspInit+0xdc>)
 8000dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dd8:	4a07      	ldr	r2, [pc, #28]	; (8000df8 <HAL_I2C_MspInit+0xdc>)
 8000dda:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000dde:	6593      	str	r3, [r2, #88]	; 0x58
 8000de0:	4b05      	ldr	r3, [pc, #20]	; (8000df8 <HAL_I2C_MspInit+0xdc>)
 8000de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000de4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000de8:	60fb      	str	r3, [r7, #12]
 8000dea:	68fb      	ldr	r3, [r7, #12]
}
 8000dec:	bf00      	nop
 8000dee:	3730      	adds	r7, #48	; 0x30
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	40005400 	.word	0x40005400
 8000df8:	40021000 	.word	0x40021000
 8000dfc:	48000400 	.word	0x48000400
 8000e00:	40005800 	.word	0x40005800

08000e04 <HAL_LCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hlcd: LCD handle pointer
* @retval None
*/
void HAL_LCD_MspInit(LCD_HandleTypeDef* hlcd)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b08c      	sub	sp, #48	; 0x30
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0c:	f107 031c 	add.w	r3, r7, #28
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
 8000e18:	60da      	str	r2, [r3, #12]
 8000e1a:	611a      	str	r2, [r3, #16]
  if(hlcd->Instance==LCD)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a44      	ldr	r2, [pc, #272]	; (8000f34 <HAL_LCD_MspInit+0x130>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	f040 8081 	bne.w	8000f2a <HAL_LCD_MspInit+0x126>
  {
  /* USER CODE BEGIN LCD_MspInit 0 */

  /* USER CODE END LCD_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LCD_CLK_ENABLE();
 8000e28:	4b43      	ldr	r3, [pc, #268]	; (8000f38 <HAL_LCD_MspInit+0x134>)
 8000e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e2c:	4a42      	ldr	r2, [pc, #264]	; (8000f38 <HAL_LCD_MspInit+0x134>)
 8000e2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e32:	6593      	str	r3, [r2, #88]	; 0x58
 8000e34:	4b40      	ldr	r3, [pc, #256]	; (8000f38 <HAL_LCD_MspInit+0x134>)
 8000e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e3c:	61bb      	str	r3, [r7, #24]
 8000e3e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e40:	4b3d      	ldr	r3, [pc, #244]	; (8000f38 <HAL_LCD_MspInit+0x134>)
 8000e42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e44:	4a3c      	ldr	r2, [pc, #240]	; (8000f38 <HAL_LCD_MspInit+0x134>)
 8000e46:	f043 0304 	orr.w	r3, r3, #4
 8000e4a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e4c:	4b3a      	ldr	r3, [pc, #232]	; (8000f38 <HAL_LCD_MspInit+0x134>)
 8000e4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e50:	f003 0304 	and.w	r3, r3, #4
 8000e54:	617b      	str	r3, [r7, #20]
 8000e56:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e58:	4b37      	ldr	r3, [pc, #220]	; (8000f38 <HAL_LCD_MspInit+0x134>)
 8000e5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e5c:	4a36      	ldr	r2, [pc, #216]	; (8000f38 <HAL_LCD_MspInit+0x134>)
 8000e5e:	f043 0301 	orr.w	r3, r3, #1
 8000e62:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e64:	4b34      	ldr	r3, [pc, #208]	; (8000f38 <HAL_LCD_MspInit+0x134>)
 8000e66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e68:	f003 0301 	and.w	r3, r3, #1
 8000e6c:	613b      	str	r3, [r7, #16]
 8000e6e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e70:	4b31      	ldr	r3, [pc, #196]	; (8000f38 <HAL_LCD_MspInit+0x134>)
 8000e72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e74:	4a30      	ldr	r2, [pc, #192]	; (8000f38 <HAL_LCD_MspInit+0x134>)
 8000e76:	f043 0302 	orr.w	r3, r3, #2
 8000e7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e7c:	4b2e      	ldr	r3, [pc, #184]	; (8000f38 <HAL_LCD_MspInit+0x134>)
 8000e7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e80:	f003 0302 	and.w	r3, r3, #2
 8000e84:	60fb      	str	r3, [r7, #12]
 8000e86:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e88:	4b2b      	ldr	r3, [pc, #172]	; (8000f38 <HAL_LCD_MspInit+0x134>)
 8000e8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e8c:	4a2a      	ldr	r2, [pc, #168]	; (8000f38 <HAL_LCD_MspInit+0x134>)
 8000e8e:	f043 0308 	orr.w	r3, r3, #8
 8000e92:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e94:	4b28      	ldr	r3, [pc, #160]	; (8000f38 <HAL_LCD_MspInit+0x134>)
 8000e96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e98:	f003 0308 	and.w	r3, r3, #8
 8000e9c:	60bb      	str	r3, [r7, #8]
 8000e9e:	68bb      	ldr	r3, [r7, #8]
    PA15 (JTDI)     ------> LCD_SEG17
    PB4 (NJTRST)     ------> LCD_SEG8
    PB5     ------> LCD_SEG9
    PB9     ------> LCD_COM3
    */
    GPIO_InitStruct.Pin = VLCD_Pin|SEG22_Pin|SEG1_Pin|SEG14_Pin
 8000ea0:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 8000ea4:	61fb      	str	r3, [r7, #28]
                          |SEG9_Pin|SEG13_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000eb2:	230b      	movs	r3, #11
 8000eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eb6:	f107 031c 	add.w	r3, r7, #28
 8000eba:	4619      	mov	r1, r3
 8000ebc:	481f      	ldr	r0, [pc, #124]	; (8000f3c <HAL_LCD_MspInit+0x138>)
 8000ebe:	f000 fc05 	bl	80016cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG23_Pin|SEG0_Pin|COM0_Pin|COM1_Pin
 8000ec2:	f248 73c0 	movw	r3, #34752	; 0x87c0
 8000ec6:	61fb      	str	r3, [r7, #28]
                          |COM2_Pin|SEG10_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000ed4:	230b      	movs	r3, #11
 8000ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed8:	f107 031c 	add.w	r3, r7, #28
 8000edc:	4619      	mov	r1, r3
 8000ede:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ee2:	f000 fbf3 	bl	80016cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG21_Pin|SEG2_Pin|SEG20_Pin|SEG3_Pin
 8000ee6:	f24f 2333 	movw	r3, #62003	; 0xf233
 8000eea:	61fb      	str	r3, [r7, #28]
                          |SEG19_Pin|SEG4_Pin|SEG11_Pin|SEG12_Pin
                          |COM3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eec:	2302      	movs	r3, #2
 8000eee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000ef8:	230b      	movs	r3, #11
 8000efa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000efc:	f107 031c 	add.w	r3, r7, #28
 8000f00:	4619      	mov	r1, r3
 8000f02:	480f      	ldr	r0, [pc, #60]	; (8000f40 <HAL_LCD_MspInit+0x13c>)
 8000f04:	f000 fbe2 	bl	80016cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG18_Pin|SEG5_Pin|SEG17_Pin|SEG6_Pin
 8000f08:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000f0c:	61fb      	str	r3, [r7, #28]
                          |SEG16_Pin|SEG7_Pin|SEG15_Pin|SEG8_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	2300      	movs	r3, #0
 8000f14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f16:	2300      	movs	r3, #0
 8000f18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000f1a:	230b      	movs	r3, #11
 8000f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f1e:	f107 031c 	add.w	r3, r7, #28
 8000f22:	4619      	mov	r1, r3
 8000f24:	4807      	ldr	r0, [pc, #28]	; (8000f44 <HAL_LCD_MspInit+0x140>)
 8000f26:	f000 fbd1 	bl	80016cc <HAL_GPIO_Init>
  /* USER CODE BEGIN LCD_MspInit 1 */

  /* USER CODE END LCD_MspInit 1 */
  }

}
 8000f2a:	bf00      	nop
 8000f2c:	3730      	adds	r7, #48	; 0x30
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	40002400 	.word	0x40002400
 8000f38:	40021000 	.word	0x40021000
 8000f3c:	48000800 	.word	0x48000800
 8000f40:	48000400 	.word	0x48000400
 8000f44:	48000c00 	.word	0x48000c00

08000f48 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b08a      	sub	sp, #40	; 0x28
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f50:	f107 0314 	add.w	r3, r7, #20
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a17      	ldr	r2, [pc, #92]	; (8000fc4 <HAL_QSPI_MspInit+0x7c>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d128      	bne.n	8000fbc <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000f6a:	4b17      	ldr	r3, [pc, #92]	; (8000fc8 <HAL_QSPI_MspInit+0x80>)
 8000f6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f6e:	4a16      	ldr	r2, [pc, #88]	; (8000fc8 <HAL_QSPI_MspInit+0x80>)
 8000f70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f74:	6513      	str	r3, [r2, #80]	; 0x50
 8000f76:	4b14      	ldr	r3, [pc, #80]	; (8000fc8 <HAL_QSPI_MspInit+0x80>)
 8000f78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f7e:	613b      	str	r3, [r7, #16]
 8000f80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f82:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <HAL_QSPI_MspInit+0x80>)
 8000f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f86:	4a10      	ldr	r2, [pc, #64]	; (8000fc8 <HAL_QSPI_MspInit+0x80>)
 8000f88:	f043 0310 	orr.w	r3, r3, #16
 8000f8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f8e:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <HAL_QSPI_MspInit+0x80>)
 8000f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f92:	f003 0310 	and.w	r3, r3, #16
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QSPI_CLK_Pin|QSPI_CS_Pin|QSPI_D0_Pin|QSPI_D1_Pin
 8000f9a:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000f9e:	617b      	str	r3, [r7, #20]
                          |QSPI_D2_Pin|QSPI_D3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa8:	2303      	movs	r3, #3
 8000faa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000fac:	230a      	movs	r3, #10
 8000fae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fb0:	f107 0314 	add.w	r3, r7, #20
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4805      	ldr	r0, [pc, #20]	; (8000fcc <HAL_QSPI_MspInit+0x84>)
 8000fb8:	f000 fb88 	bl	80016cc <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8000fbc:	bf00      	nop
 8000fbe:	3728      	adds	r7, #40	; 0x28
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	a0001000 	.word	0xa0001000
 8000fc8:	40021000 	.word	0x40021000
 8000fcc:	48001000 	.word	0x48001000

08000fd0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b08a      	sub	sp, #40	; 0x28
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd8:	f107 0314 	add.w	r3, r7, #20
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a17      	ldr	r2, [pc, #92]	; (800104c <HAL_SPI_MspInit+0x7c>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d127      	bne.n	8001042 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000ff2:	4b17      	ldr	r3, [pc, #92]	; (8001050 <HAL_SPI_MspInit+0x80>)
 8000ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ff6:	4a16      	ldr	r2, [pc, #88]	; (8001050 <HAL_SPI_MspInit+0x80>)
 8000ff8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ffc:	6593      	str	r3, [r2, #88]	; 0x58
 8000ffe:	4b14      	ldr	r3, [pc, #80]	; (8001050 <HAL_SPI_MspInit+0x80>)
 8001000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001002:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001006:	613b      	str	r3, [r7, #16]
 8001008:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800100a:	4b11      	ldr	r3, [pc, #68]	; (8001050 <HAL_SPI_MspInit+0x80>)
 800100c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100e:	4a10      	ldr	r2, [pc, #64]	; (8001050 <HAL_SPI_MspInit+0x80>)
 8001010:	f043 0308 	orr.w	r3, r3, #8
 8001014:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001016:	4b0e      	ldr	r3, [pc, #56]	; (8001050 <HAL_SPI_MspInit+0x80>)
 8001018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101a:	f003 0308 	and.w	r3, r3, #8
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PD1     ------> SPI2_SCK
    PD3     ------> SPI2_MISO
    PD4     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = MEMS_SCK_Pin|MEMS_MISO_Pin|MEMS_MOSI_Pin;
 8001022:	231a      	movs	r3, #26
 8001024:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001026:	2302      	movs	r3, #2
 8001028:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2300      	movs	r3, #0
 800102c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800102e:	2303      	movs	r3, #3
 8001030:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001032:	2305      	movs	r3, #5
 8001034:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001036:	f107 0314 	add.w	r3, r7, #20
 800103a:	4619      	mov	r1, r3
 800103c:	4805      	ldr	r0, [pc, #20]	; (8001054 <HAL_SPI_MspInit+0x84>)
 800103e:	f000 fb45 	bl	80016cc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001042:	bf00      	nop
 8001044:	3728      	adds	r7, #40	; 0x28
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40003800 	.word	0x40003800
 8001050:	40021000 	.word	0x40021000
 8001054:	48000c00 	.word	0x48000c00

08001058 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b08a      	sub	sp, #40	; 0x28
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001060:	f107 0314 	add.w	r3, r7, #20
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a17      	ldr	r2, [pc, #92]	; (80010d4 <HAL_UART_MspInit+0x7c>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d127      	bne.n	80010ca <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800107a:	4b17      	ldr	r3, [pc, #92]	; (80010d8 <HAL_UART_MspInit+0x80>)
 800107c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800107e:	4a16      	ldr	r2, [pc, #88]	; (80010d8 <HAL_UART_MspInit+0x80>)
 8001080:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001084:	6593      	str	r3, [r2, #88]	; 0x58
 8001086:	4b14      	ldr	r3, [pc, #80]	; (80010d8 <HAL_UART_MspInit+0x80>)
 8001088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800108a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800108e:	613b      	str	r3, [r7, #16]
 8001090:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001092:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <HAL_UART_MspInit+0x80>)
 8001094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001096:	4a10      	ldr	r2, [pc, #64]	; (80010d8 <HAL_UART_MspInit+0x80>)
 8001098:	f043 0308 	orr.w	r3, r3, #8
 800109c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800109e:	4b0e      	ldr	r3, [pc, #56]	; (80010d8 <HAL_UART_MspInit+0x80>)
 80010a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a2:	f003 0308 	and.w	r3, r3, #8
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80010aa:	2360      	movs	r3, #96	; 0x60
 80010ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ae:	2302      	movs	r3, #2
 80010b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010b2:	2301      	movs	r3, #1
 80010b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b6:	2303      	movs	r3, #3
 80010b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010ba:	2307      	movs	r3, #7
 80010bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010be:	f107 0314 	add.w	r3, r7, #20
 80010c2:	4619      	mov	r1, r3
 80010c4:	4805      	ldr	r0, [pc, #20]	; (80010dc <HAL_UART_MspInit+0x84>)
 80010c6:	f000 fb01 	bl	80016cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010ca:	bf00      	nop
 80010cc:	3728      	adds	r7, #40	; 0x28
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40004400 	.word	0x40004400
 80010d8:	40021000 	.word	0x40021000
 80010dc:	48000c00 	.word	0x48000c00

080010e0 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b08a      	sub	sp, #40	; 0x28
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a33      	ldr	r2, [pc, #204]	; (80011bc <HAL_SAI_MspInit+0xdc>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d135      	bne.n	800115e <HAL_SAI_MspInit+0x7e>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 80010f2:	4b33      	ldr	r3, [pc, #204]	; (80011c0 <HAL_SAI_MspInit+0xe0>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d10b      	bne.n	8001112 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80010fa:	4b32      	ldr	r3, [pc, #200]	; (80011c4 <HAL_SAI_MspInit+0xe4>)
 80010fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010fe:	4a31      	ldr	r2, [pc, #196]	; (80011c4 <HAL_SAI_MspInit+0xe4>)
 8001100:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001104:	6613      	str	r3, [r2, #96]	; 0x60
 8001106:	4b2f      	ldr	r3, [pc, #188]	; (80011c4 <HAL_SAI_MspInit+0xe4>)
 8001108:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800110a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800110e:	613b      	str	r3, [r7, #16]
 8001110:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8001112:	4b2b      	ldr	r3, [pc, #172]	; (80011c0 <HAL_SAI_MspInit+0xe0>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	3301      	adds	r3, #1
 8001118:	4a29      	ldr	r2, [pc, #164]	; (80011c0 <HAL_SAI_MspInit+0xe0>)
 800111a:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    PE9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = SAI1_MCK_Pin|SAI1_FS_Pin|SAI1_SCK_Pin|SAI1_SD_Pin;
 800111c:	2374      	movs	r3, #116	; 0x74
 800111e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001120:	2302      	movs	r3, #2
 8001122:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001128:	2303      	movs	r3, #3
 800112a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800112c:	230d      	movs	r3, #13
 800112e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001130:	f107 0314 	add.w	r3, r7, #20
 8001134:	4619      	mov	r1, r3
 8001136:	4824      	ldr	r0, [pc, #144]	; (80011c8 <HAL_SAI_MspInit+0xe8>)
 8001138:	f000 fac8 	bl	80016cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AUDIO_CLK_Pin;
 800113c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001140:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001142:	2302      	movs	r3, #2
 8001144:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114a:	2300      	movs	r3, #0
 800114c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800114e:	230d      	movs	r3, #13
 8001150:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AUDIO_CLK_GPIO_Port, &GPIO_InitStruct);
 8001152:	f107 0314 	add.w	r3, r7, #20
 8001156:	4619      	mov	r1, r3
 8001158:	481b      	ldr	r0, [pc, #108]	; (80011c8 <HAL_SAI_MspInit+0xe8>)
 800115a:	f000 fab7 	bl	80016cc <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a1a      	ldr	r2, [pc, #104]	; (80011cc <HAL_SAI_MspInit+0xec>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d124      	bne.n	80011b2 <HAL_SAI_MspInit+0xd2>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 8001168:	4b15      	ldr	r3, [pc, #84]	; (80011c0 <HAL_SAI_MspInit+0xe0>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d10b      	bne.n	8001188 <HAL_SAI_MspInit+0xa8>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001170:	4b14      	ldr	r3, [pc, #80]	; (80011c4 <HAL_SAI_MspInit+0xe4>)
 8001172:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001174:	4a13      	ldr	r2, [pc, #76]	; (80011c4 <HAL_SAI_MspInit+0xe4>)
 8001176:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800117a:	6613      	str	r3, [r2, #96]	; 0x60
 800117c:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <HAL_SAI_MspInit+0xe4>)
 800117e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001180:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8001188:	4b0d      	ldr	r3, [pc, #52]	; (80011c0 <HAL_SAI_MspInit+0xe0>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	3301      	adds	r3, #1
 800118e:	4a0c      	ldr	r2, [pc, #48]	; (80011c0 <HAL_SAI_MspInit+0xe0>)
 8001190:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE7     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = AUDIO_DIN_Pin;
 8001192:	2380      	movs	r3, #128	; 0x80
 8001194:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001196:	2302      	movs	r3, #2
 8001198:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	2300      	movs	r3, #0
 800119c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800119e:	2303      	movs	r3, #3
 80011a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80011a2:	230d      	movs	r3, #13
 80011a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AUDIO_DIN_GPIO_Port, &GPIO_InitStruct);
 80011a6:	f107 0314 	add.w	r3, r7, #20
 80011aa:	4619      	mov	r1, r3
 80011ac:	4806      	ldr	r0, [pc, #24]	; (80011c8 <HAL_SAI_MspInit+0xe8>)
 80011ae:	f000 fa8d 	bl	80016cc <HAL_GPIO_Init>

    }
}
 80011b2:	bf00      	nop
 80011b4:	3728      	adds	r7, #40	; 0x28
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	40015404 	.word	0x40015404
 80011c0:	200000ac 	.word	0x200000ac
 80011c4:	40021000 	.word	0x40021000
 80011c8:	48001000 	.word	0x48001000
 80011cc:	40015424 	.word	0x40015424

080011d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80011d4:	bf00      	nop
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr

080011de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011de:	b480      	push	{r7}
 80011e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011e2:	e7fe      	b.n	80011e2 <HardFault_Handler+0x4>

080011e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011e8:	e7fe      	b.n	80011e8 <MemManage_Handler+0x4>

080011ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011ea:	b480      	push	{r7}
 80011ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ee:	e7fe      	b.n	80011ee <BusFault_Handler+0x4>

080011f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011f4:	e7fe      	b.n	80011f4 <UsageFault_Handler+0x4>

080011f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011f6:	b480      	push	{r7}
 80011f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011fa:	bf00      	nop
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr

08001204 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr

08001212 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001212:	b480      	push	{r7}
 8001214:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001224:	f000 f8fe 	bl	8001424 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001228:	bf00      	nop
 800122a:	bd80      	pop	{r7, pc}

0800122c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001230:	4802      	ldr	r0, [pc, #8]	; (800123c <OTG_FS_IRQHandler+0x10>)
 8001232:	f000 feb1 	bl	8001f98 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	200007a4 	.word	0x200007a4

08001240 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b086      	sub	sp, #24
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001248:	4a14      	ldr	r2, [pc, #80]	; (800129c <_sbrk+0x5c>)
 800124a:	4b15      	ldr	r3, [pc, #84]	; (80012a0 <_sbrk+0x60>)
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001254:	4b13      	ldr	r3, [pc, #76]	; (80012a4 <_sbrk+0x64>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d102      	bne.n	8001262 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800125c:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <_sbrk+0x64>)
 800125e:	4a12      	ldr	r2, [pc, #72]	; (80012a8 <_sbrk+0x68>)
 8001260:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001262:	4b10      	ldr	r3, [pc, #64]	; (80012a4 <_sbrk+0x64>)
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4413      	add	r3, r2
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	429a      	cmp	r2, r3
 800126e:	d207      	bcs.n	8001280 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001270:	f007 fbbe 	bl	80089f0 <__errno>
 8001274:	4602      	mov	r2, r0
 8001276:	230c      	movs	r3, #12
 8001278:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800127a:	f04f 33ff 	mov.w	r3, #4294967295
 800127e:	e009      	b.n	8001294 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001280:	4b08      	ldr	r3, [pc, #32]	; (80012a4 <_sbrk+0x64>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001286:	4b07      	ldr	r3, [pc, #28]	; (80012a4 <_sbrk+0x64>)
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4413      	add	r3, r2
 800128e:	4a05      	ldr	r2, [pc, #20]	; (80012a4 <_sbrk+0x64>)
 8001290:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001292:	68fb      	ldr	r3, [r7, #12]
}
 8001294:	4618      	mov	r0, r3
 8001296:	3718      	adds	r7, #24
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	20018000 	.word	0x20018000
 80012a0:	00000400 	.word	0x00000400
 80012a4:	200000b0 	.word	0x200000b0
 80012a8:	20000a70 	.word	0x20000a70

080012ac <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012b0:	4b17      	ldr	r3, [pc, #92]	; (8001310 <SystemInit+0x64>)
 80012b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012b6:	4a16      	ldr	r2, [pc, #88]	; (8001310 <SystemInit+0x64>)
 80012b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80012c0:	4b14      	ldr	r3, [pc, #80]	; (8001314 <SystemInit+0x68>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a13      	ldr	r2, [pc, #76]	; (8001314 <SystemInit+0x68>)
 80012c6:	f043 0301 	orr.w	r3, r3, #1
 80012ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80012cc:	4b11      	ldr	r3, [pc, #68]	; (8001314 <SystemInit+0x68>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80012d2:	4b10      	ldr	r3, [pc, #64]	; (8001314 <SystemInit+0x68>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a0f      	ldr	r2, [pc, #60]	; (8001314 <SystemInit+0x68>)
 80012d8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80012dc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80012e0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80012e2:	4b0c      	ldr	r3, [pc, #48]	; (8001314 <SystemInit+0x68>)
 80012e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012e8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80012ea:	4b0a      	ldr	r3, [pc, #40]	; (8001314 <SystemInit+0x68>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a09      	ldr	r2, [pc, #36]	; (8001314 <SystemInit+0x68>)
 80012f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012f4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80012f6:	4b07      	ldr	r3, [pc, #28]	; (8001314 <SystemInit+0x68>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80012fc:	4b04      	ldr	r3, [pc, #16]	; (8001310 <SystemInit+0x64>)
 80012fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001302:	609a      	str	r2, [r3, #8]
#endif
}
 8001304:	bf00      	nop
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	e000ed00 	.word	0xe000ed00
 8001314:	40021000 	.word	0x40021000

08001318 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001318:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001350 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800131c:	f7ff ffc6 	bl	80012ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001320:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001322:	e003      	b.n	800132c <LoopCopyDataInit>

08001324 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001324:	4b0b      	ldr	r3, [pc, #44]	; (8001354 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001326:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001328:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800132a:	3104      	adds	r1, #4

0800132c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800132c:	480a      	ldr	r0, [pc, #40]	; (8001358 <LoopForever+0xa>)
	ldr	r3, =_edata
 800132e:	4b0b      	ldr	r3, [pc, #44]	; (800135c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001330:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001332:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001334:	d3f6      	bcc.n	8001324 <CopyDataInit>
	ldr	r2, =_sbss
 8001336:	4a0a      	ldr	r2, [pc, #40]	; (8001360 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001338:	e002      	b.n	8001340 <LoopFillZerobss>

0800133a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800133a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800133c:	f842 3b04 	str.w	r3, [r2], #4

08001340 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001340:	4b08      	ldr	r3, [pc, #32]	; (8001364 <LoopForever+0x16>)
	cmp	r2, r3
 8001342:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001344:	d3f9      	bcc.n	800133a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001346:	f007 fb59 	bl	80089fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800134a:	f7ff f8bd 	bl	80004c8 <main>

0800134e <LoopForever>:

LoopForever:
    b LoopForever
 800134e:	e7fe      	b.n	800134e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001350:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001354:	08008c5c 	.word	0x08008c5c
	ldr	r0, =_sdata
 8001358:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800135c:	20000090 	.word	0x20000090
	ldr	r2, =_sbss
 8001360:	20000090 	.word	0x20000090
	ldr	r3, = _ebss
 8001364:	20000a6c 	.word	0x20000a6c

08001368 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001368:	e7fe      	b.n	8001368 <ADC1_2_IRQHandler>
	...

0800136c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001372:	2300      	movs	r3, #0
 8001374:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001376:	4b0c      	ldr	r3, [pc, #48]	; (80013a8 <HAL_Init+0x3c>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a0b      	ldr	r2, [pc, #44]	; (80013a8 <HAL_Init+0x3c>)
 800137c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001380:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001382:	2003      	movs	r0, #3
 8001384:	f000 f960 	bl	8001648 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001388:	2000      	movs	r0, #0
 800138a:	f000 f80f 	bl	80013ac <HAL_InitTick>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d002      	beq.n	800139a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001394:	2301      	movs	r3, #1
 8001396:	71fb      	strb	r3, [r7, #7]
 8001398:	e001      	b.n	800139e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800139a:	f7ff fc9b 	bl	8000cd4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800139e:	79fb      	ldrb	r3, [r7, #7]
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3708      	adds	r7, #8
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	40022000 	.word	0x40022000

080013ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013b4:	2300      	movs	r3, #0
 80013b6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80013b8:	4b17      	ldr	r3, [pc, #92]	; (8001418 <HAL_InitTick+0x6c>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d023      	beq.n	8001408 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80013c0:	4b16      	ldr	r3, [pc, #88]	; (800141c <HAL_InitTick+0x70>)
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	4b14      	ldr	r3, [pc, #80]	; (8001418 <HAL_InitTick+0x6c>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	4619      	mov	r1, r3
 80013ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80013d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013d6:	4618      	mov	r0, r3
 80013d8:	f000 f96b 	bl	80016b2 <HAL_SYSTICK_Config>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d10f      	bne.n	8001402 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2b0f      	cmp	r3, #15
 80013e6:	d809      	bhi.n	80013fc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013e8:	2200      	movs	r2, #0
 80013ea:	6879      	ldr	r1, [r7, #4]
 80013ec:	f04f 30ff 	mov.w	r0, #4294967295
 80013f0:	f000 f935 	bl	800165e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013f4:	4a0a      	ldr	r2, [pc, #40]	; (8001420 <HAL_InitTick+0x74>)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6013      	str	r3, [r2, #0]
 80013fa:	e007      	b.n	800140c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	73fb      	strb	r3, [r7, #15]
 8001400:	e004      	b.n	800140c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	73fb      	strb	r3, [r7, #15]
 8001406:	e001      	b.n	800140c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800140c:	7bfb      	ldrb	r3, [r7, #15]
}
 800140e:	4618      	mov	r0, r3
 8001410:	3710      	adds	r7, #16
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	20000008 	.word	0x20000008
 800141c:	20000000 	.word	0x20000000
 8001420:	20000004 	.word	0x20000004

08001424 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001428:	4b06      	ldr	r3, [pc, #24]	; (8001444 <HAL_IncTick+0x20>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	461a      	mov	r2, r3
 800142e:	4b06      	ldr	r3, [pc, #24]	; (8001448 <HAL_IncTick+0x24>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4413      	add	r3, r2
 8001434:	4a04      	ldr	r2, [pc, #16]	; (8001448 <HAL_IncTick+0x24>)
 8001436:	6013      	str	r3, [r2, #0]
}
 8001438:	bf00      	nop
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	20000008 	.word	0x20000008
 8001448:	200003c8 	.word	0x200003c8

0800144c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  return uwTick;
 8001450:	4b03      	ldr	r3, [pc, #12]	; (8001460 <HAL_GetTick+0x14>)
 8001452:	681b      	ldr	r3, [r3, #0]
}
 8001454:	4618      	mov	r0, r3
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	200003c8 	.word	0x200003c8

08001464 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800146c:	f7ff ffee 	bl	800144c <HAL_GetTick>
 8001470:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800147c:	d005      	beq.n	800148a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800147e:	4b09      	ldr	r3, [pc, #36]	; (80014a4 <HAL_Delay+0x40>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	461a      	mov	r2, r3
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	4413      	add	r3, r2
 8001488:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800148a:	bf00      	nop
 800148c:	f7ff ffde 	bl	800144c <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	68fa      	ldr	r2, [r7, #12]
 8001498:	429a      	cmp	r2, r3
 800149a:	d8f7      	bhi.n	800148c <HAL_Delay+0x28>
  {
  }
}
 800149c:	bf00      	nop
 800149e:	3710      	adds	r7, #16
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	20000008 	.word	0x20000008

080014a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f003 0307 	and.w	r3, r3, #7
 80014b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014b8:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <__NVIC_SetPriorityGrouping+0x44>)
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014be:	68ba      	ldr	r2, [r7, #8]
 80014c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014c4:	4013      	ands	r3, r2
 80014c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014da:	4a04      	ldr	r2, [pc, #16]	; (80014ec <__NVIC_SetPriorityGrouping+0x44>)
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	60d3      	str	r3, [r2, #12]
}
 80014e0:	bf00      	nop
 80014e2:	3714      	adds	r7, #20
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr
 80014ec:	e000ed00 	.word	0xe000ed00

080014f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014f4:	4b04      	ldr	r3, [pc, #16]	; (8001508 <__NVIC_GetPriorityGrouping+0x18>)
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	0a1b      	lsrs	r3, r3, #8
 80014fa:	f003 0307 	and.w	r3, r3, #7
}
 80014fe:	4618      	mov	r0, r3
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr
 8001508:	e000ed00 	.word	0xe000ed00

0800150c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151a:	2b00      	cmp	r3, #0
 800151c:	db0b      	blt.n	8001536 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800151e:	79fb      	ldrb	r3, [r7, #7]
 8001520:	f003 021f 	and.w	r2, r3, #31
 8001524:	4907      	ldr	r1, [pc, #28]	; (8001544 <__NVIC_EnableIRQ+0x38>)
 8001526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152a:	095b      	lsrs	r3, r3, #5
 800152c:	2001      	movs	r0, #1
 800152e:	fa00 f202 	lsl.w	r2, r0, r2
 8001532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001536:	bf00      	nop
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	e000e100 	.word	0xe000e100

08001548 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	6039      	str	r1, [r7, #0]
 8001552:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001558:	2b00      	cmp	r3, #0
 800155a:	db0a      	blt.n	8001572 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	b2da      	uxtb	r2, r3
 8001560:	490c      	ldr	r1, [pc, #48]	; (8001594 <__NVIC_SetPriority+0x4c>)
 8001562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001566:	0112      	lsls	r2, r2, #4
 8001568:	b2d2      	uxtb	r2, r2
 800156a:	440b      	add	r3, r1
 800156c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001570:	e00a      	b.n	8001588 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	b2da      	uxtb	r2, r3
 8001576:	4908      	ldr	r1, [pc, #32]	; (8001598 <__NVIC_SetPriority+0x50>)
 8001578:	79fb      	ldrb	r3, [r7, #7]
 800157a:	f003 030f 	and.w	r3, r3, #15
 800157e:	3b04      	subs	r3, #4
 8001580:	0112      	lsls	r2, r2, #4
 8001582:	b2d2      	uxtb	r2, r2
 8001584:	440b      	add	r3, r1
 8001586:	761a      	strb	r2, [r3, #24]
}
 8001588:	bf00      	nop
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr
 8001594:	e000e100 	.word	0xe000e100
 8001598:	e000ed00 	.word	0xe000ed00

0800159c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800159c:	b480      	push	{r7}
 800159e:	b089      	sub	sp, #36	; 0x24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60f8      	str	r0, [r7, #12]
 80015a4:	60b9      	str	r1, [r7, #8]
 80015a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	f003 0307 	and.w	r3, r3, #7
 80015ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	f1c3 0307 	rsb	r3, r3, #7
 80015b6:	2b04      	cmp	r3, #4
 80015b8:	bf28      	it	cs
 80015ba:	2304      	movcs	r3, #4
 80015bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	3304      	adds	r3, #4
 80015c2:	2b06      	cmp	r3, #6
 80015c4:	d902      	bls.n	80015cc <NVIC_EncodePriority+0x30>
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	3b03      	subs	r3, #3
 80015ca:	e000      	b.n	80015ce <NVIC_EncodePriority+0x32>
 80015cc:	2300      	movs	r3, #0
 80015ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d0:	f04f 32ff 	mov.w	r2, #4294967295
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	43da      	mvns	r2, r3
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	401a      	ands	r2, r3
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015e4:	f04f 31ff 	mov.w	r1, #4294967295
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	fa01 f303 	lsl.w	r3, r1, r3
 80015ee:	43d9      	mvns	r1, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f4:	4313      	orrs	r3, r2
         );
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3724      	adds	r7, #36	; 0x24
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
	...

08001604 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	3b01      	subs	r3, #1
 8001610:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001614:	d301      	bcc.n	800161a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001616:	2301      	movs	r3, #1
 8001618:	e00f      	b.n	800163a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800161a:	4a0a      	ldr	r2, [pc, #40]	; (8001644 <SysTick_Config+0x40>)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	3b01      	subs	r3, #1
 8001620:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001622:	210f      	movs	r1, #15
 8001624:	f04f 30ff 	mov.w	r0, #4294967295
 8001628:	f7ff ff8e 	bl	8001548 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800162c:	4b05      	ldr	r3, [pc, #20]	; (8001644 <SysTick_Config+0x40>)
 800162e:	2200      	movs	r2, #0
 8001630:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001632:	4b04      	ldr	r3, [pc, #16]	; (8001644 <SysTick_Config+0x40>)
 8001634:	2207      	movs	r2, #7
 8001636:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	e000e010 	.word	0xe000e010

08001648 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f7ff ff29 	bl	80014a8 <__NVIC_SetPriorityGrouping>
}
 8001656:	bf00      	nop
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}

0800165e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800165e:	b580      	push	{r7, lr}
 8001660:	b086      	sub	sp, #24
 8001662:	af00      	add	r7, sp, #0
 8001664:	4603      	mov	r3, r0
 8001666:	60b9      	str	r1, [r7, #8]
 8001668:	607a      	str	r2, [r7, #4]
 800166a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800166c:	2300      	movs	r3, #0
 800166e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001670:	f7ff ff3e 	bl	80014f0 <__NVIC_GetPriorityGrouping>
 8001674:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	68b9      	ldr	r1, [r7, #8]
 800167a:	6978      	ldr	r0, [r7, #20]
 800167c:	f7ff ff8e 	bl	800159c <NVIC_EncodePriority>
 8001680:	4602      	mov	r2, r0
 8001682:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001686:	4611      	mov	r1, r2
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff ff5d 	bl	8001548 <__NVIC_SetPriority>
}
 800168e:	bf00      	nop
 8001690:	3718      	adds	r7, #24
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001696:	b580      	push	{r7, lr}
 8001698:	b082      	sub	sp, #8
 800169a:	af00      	add	r7, sp, #0
 800169c:	4603      	mov	r3, r0
 800169e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff ff31 	bl	800150c <__NVIC_EnableIRQ>
}
 80016aa:	bf00      	nop
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b082      	sub	sp, #8
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f7ff ffa2 	bl	8001604 <SysTick_Config>
 80016c0:	4603      	mov	r3, r0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
	...

080016cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b087      	sub	sp, #28
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016d6:	2300      	movs	r3, #0
 80016d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016da:	e17f      	b.n	80019dc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	2101      	movs	r1, #1
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	fa01 f303 	lsl.w	r3, r1, r3
 80016e8:	4013      	ands	r3, r2
 80016ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	f000 8171 	beq.w	80019d6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d00b      	beq.n	8001714 <HAL_GPIO_Init+0x48>
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	2b02      	cmp	r3, #2
 8001702:	d007      	beq.n	8001714 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001708:	2b11      	cmp	r3, #17
 800170a:	d003      	beq.n	8001714 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	2b12      	cmp	r3, #18
 8001712:	d130      	bne.n	8001776 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	2203      	movs	r2, #3
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	43db      	mvns	r3, r3
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	4013      	ands	r3, r2
 800172a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	68da      	ldr	r2, [r3, #12]
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	693a      	ldr	r2, [r7, #16]
 800173a:	4313      	orrs	r3, r2
 800173c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	693a      	ldr	r2, [r7, #16]
 8001742:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800174a:	2201      	movs	r2, #1
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	fa02 f303 	lsl.w	r3, r2, r3
 8001752:	43db      	mvns	r3, r3
 8001754:	693a      	ldr	r2, [r7, #16]
 8001756:	4013      	ands	r3, r2
 8001758:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	091b      	lsrs	r3, r3, #4
 8001760:	f003 0201 	and.w	r2, r3, #1
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	fa02 f303 	lsl.w	r3, r2, r3
 800176a:	693a      	ldr	r2, [r7, #16]
 800176c:	4313      	orrs	r3, r2
 800176e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f003 0303 	and.w	r3, r3, #3
 800177e:	2b03      	cmp	r3, #3
 8001780:	d118      	bne.n	80017b4 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001786:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001788:	2201      	movs	r2, #1
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	43db      	mvns	r3, r3
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	4013      	ands	r3, r2
 8001796:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	08db      	lsrs	r3, r3, #3
 800179e:	f003 0201 	and.w	r2, r3, #1
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	693a      	ldr	r2, [r7, #16]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	693a      	ldr	r2, [r7, #16]
 80017b2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	2203      	movs	r2, #3
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	43db      	mvns	r3, r3
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	4013      	ands	r3, r2
 80017ca:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	689a      	ldr	r2, [r3, #8]
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	693a      	ldr	r2, [r7, #16]
 80017da:	4313      	orrs	r3, r2
 80017dc:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	693a      	ldr	r2, [r7, #16]
 80017e2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	d003      	beq.n	80017f4 <HAL_GPIO_Init+0x128>
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	2b12      	cmp	r3, #18
 80017f2:	d123      	bne.n	800183c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	08da      	lsrs	r2, r3, #3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	3208      	adds	r2, #8
 80017fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001800:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	f003 0307 	and.w	r3, r3, #7
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	220f      	movs	r2, #15
 800180c:	fa02 f303 	lsl.w	r3, r2, r3
 8001810:	43db      	mvns	r3, r3
 8001812:	693a      	ldr	r2, [r7, #16]
 8001814:	4013      	ands	r3, r2
 8001816:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	691a      	ldr	r2, [r3, #16]
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	f003 0307 	and.w	r3, r3, #7
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	693a      	ldr	r2, [r7, #16]
 800182a:	4313      	orrs	r3, r2
 800182c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	08da      	lsrs	r2, r3, #3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	3208      	adds	r2, #8
 8001836:	6939      	ldr	r1, [r7, #16]
 8001838:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	2203      	movs	r2, #3
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	43db      	mvns	r3, r3
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	4013      	ands	r3, r2
 8001852:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f003 0203 	and.w	r2, r3, #3
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	693a      	ldr	r2, [r7, #16]
 8001866:	4313      	orrs	r3, r2
 8001868:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	693a      	ldr	r2, [r7, #16]
 800186e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001878:	2b00      	cmp	r3, #0
 800187a:	f000 80ac 	beq.w	80019d6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800187e:	4b5e      	ldr	r3, [pc, #376]	; (80019f8 <HAL_GPIO_Init+0x32c>)
 8001880:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001882:	4a5d      	ldr	r2, [pc, #372]	; (80019f8 <HAL_GPIO_Init+0x32c>)
 8001884:	f043 0301 	orr.w	r3, r3, #1
 8001888:	6613      	str	r3, [r2, #96]	; 0x60
 800188a:	4b5b      	ldr	r3, [pc, #364]	; (80019f8 <HAL_GPIO_Init+0x32c>)
 800188c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	60bb      	str	r3, [r7, #8]
 8001894:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001896:	4a59      	ldr	r2, [pc, #356]	; (80019fc <HAL_GPIO_Init+0x330>)
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	089b      	lsrs	r3, r3, #2
 800189c:	3302      	adds	r3, #2
 800189e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	f003 0303 	and.w	r3, r3, #3
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	220f      	movs	r2, #15
 80018ae:	fa02 f303 	lsl.w	r3, r2, r3
 80018b2:	43db      	mvns	r3, r3
 80018b4:	693a      	ldr	r2, [r7, #16]
 80018b6:	4013      	ands	r3, r2
 80018b8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80018c0:	d025      	beq.n	800190e <HAL_GPIO_Init+0x242>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4a4e      	ldr	r2, [pc, #312]	; (8001a00 <HAL_GPIO_Init+0x334>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d01f      	beq.n	800190a <HAL_GPIO_Init+0x23e>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a4d      	ldr	r2, [pc, #308]	; (8001a04 <HAL_GPIO_Init+0x338>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d019      	beq.n	8001906 <HAL_GPIO_Init+0x23a>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a4c      	ldr	r2, [pc, #304]	; (8001a08 <HAL_GPIO_Init+0x33c>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d013      	beq.n	8001902 <HAL_GPIO_Init+0x236>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a4b      	ldr	r2, [pc, #300]	; (8001a0c <HAL_GPIO_Init+0x340>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d00d      	beq.n	80018fe <HAL_GPIO_Init+0x232>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a4a      	ldr	r2, [pc, #296]	; (8001a10 <HAL_GPIO_Init+0x344>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d007      	beq.n	80018fa <HAL_GPIO_Init+0x22e>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a49      	ldr	r2, [pc, #292]	; (8001a14 <HAL_GPIO_Init+0x348>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d101      	bne.n	80018f6 <HAL_GPIO_Init+0x22a>
 80018f2:	2306      	movs	r3, #6
 80018f4:	e00c      	b.n	8001910 <HAL_GPIO_Init+0x244>
 80018f6:	2307      	movs	r3, #7
 80018f8:	e00a      	b.n	8001910 <HAL_GPIO_Init+0x244>
 80018fa:	2305      	movs	r3, #5
 80018fc:	e008      	b.n	8001910 <HAL_GPIO_Init+0x244>
 80018fe:	2304      	movs	r3, #4
 8001900:	e006      	b.n	8001910 <HAL_GPIO_Init+0x244>
 8001902:	2303      	movs	r3, #3
 8001904:	e004      	b.n	8001910 <HAL_GPIO_Init+0x244>
 8001906:	2302      	movs	r3, #2
 8001908:	e002      	b.n	8001910 <HAL_GPIO_Init+0x244>
 800190a:	2301      	movs	r3, #1
 800190c:	e000      	b.n	8001910 <HAL_GPIO_Init+0x244>
 800190e:	2300      	movs	r3, #0
 8001910:	697a      	ldr	r2, [r7, #20]
 8001912:	f002 0203 	and.w	r2, r2, #3
 8001916:	0092      	lsls	r2, r2, #2
 8001918:	4093      	lsls	r3, r2
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	4313      	orrs	r3, r2
 800191e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001920:	4936      	ldr	r1, [pc, #216]	; (80019fc <HAL_GPIO_Init+0x330>)
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	089b      	lsrs	r3, r3, #2
 8001926:	3302      	adds	r3, #2
 8001928:	693a      	ldr	r2, [r7, #16]
 800192a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800192e:	4b3a      	ldr	r3, [pc, #232]	; (8001a18 <HAL_GPIO_Init+0x34c>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	43db      	mvns	r3, r3
 8001938:	693a      	ldr	r2, [r7, #16]
 800193a:	4013      	ands	r3, r2
 800193c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d003      	beq.n	8001952 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	4313      	orrs	r3, r2
 8001950:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001952:	4a31      	ldr	r2, [pc, #196]	; (8001a18 <HAL_GPIO_Init+0x34c>)
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001958:	4b2f      	ldr	r3, [pc, #188]	; (8001a18 <HAL_GPIO_Init+0x34c>)
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	43db      	mvns	r3, r3
 8001962:	693a      	ldr	r2, [r7, #16]
 8001964:	4013      	ands	r3, r2
 8001966:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001970:	2b00      	cmp	r3, #0
 8001972:	d003      	beq.n	800197c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001974:	693a      	ldr	r2, [r7, #16]
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	4313      	orrs	r3, r2
 800197a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800197c:	4a26      	ldr	r2, [pc, #152]	; (8001a18 <HAL_GPIO_Init+0x34c>)
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001982:	4b25      	ldr	r3, [pc, #148]	; (8001a18 <HAL_GPIO_Init+0x34c>)
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	43db      	mvns	r3, r3
 800198c:	693a      	ldr	r2, [r7, #16]
 800198e:	4013      	ands	r3, r2
 8001990:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d003      	beq.n	80019a6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800199e:	693a      	ldr	r2, [r7, #16]
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80019a6:	4a1c      	ldr	r2, [pc, #112]	; (8001a18 <HAL_GPIO_Init+0x34c>)
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80019ac:	4b1a      	ldr	r3, [pc, #104]	; (8001a18 <HAL_GPIO_Init+0x34c>)
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	43db      	mvns	r3, r3
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	4013      	ands	r3, r2
 80019ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d003      	beq.n	80019d0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80019c8:	693a      	ldr	r2, [r7, #16]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80019d0:	4a11      	ldr	r2, [pc, #68]	; (8001a18 <HAL_GPIO_Init+0x34c>)
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	3301      	adds	r3, #1
 80019da:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	fa22 f303 	lsr.w	r3, r2, r3
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	f47f ae78 	bne.w	80016dc <HAL_GPIO_Init+0x10>
  }
}
 80019ec:	bf00      	nop
 80019ee:	371c      	adds	r7, #28
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr
 80019f8:	40021000 	.word	0x40021000
 80019fc:	40010000 	.word	0x40010000
 8001a00:	48000400 	.word	0x48000400
 8001a04:	48000800 	.word	0x48000800
 8001a08:	48000c00 	.word	0x48000c00
 8001a0c:	48001000 	.word	0x48001000
 8001a10:	48001400 	.word	0x48001400
 8001a14:	48001800 	.word	0x48001800
 8001a18:	40010400 	.word	0x40010400

08001a1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	460b      	mov	r3, r1
 8001a26:	807b      	strh	r3, [r7, #2]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a2c:	787b      	ldrb	r3, [r7, #1]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d003      	beq.n	8001a3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a32:	887a      	ldrh	r2, [r7, #2]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a38:	e002      	b.n	8001a40 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a3a:	887a      	ldrh	r2, [r7, #2]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a40:	bf00      	nop
 8001a42:	370c      	adds	r7, #12
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	460b      	mov	r3, r1
 8001a56:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	695b      	ldr	r3, [r3, #20]
 8001a5c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a5e:	887a      	ldrh	r2, [r7, #2]
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	4013      	ands	r3, r2
 8001a64:	041a      	lsls	r2, r3, #16
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	43d9      	mvns	r1, r3
 8001a6a:	887b      	ldrh	r3, [r7, #2]
 8001a6c:	400b      	ands	r3, r1
 8001a6e:	431a      	orrs	r2, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	619a      	str	r2, [r3, #24]
}
 8001a74:	bf00      	nop
 8001a76:	3714      	adds	r7, #20
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001a80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a82:	b08f      	sub	sp, #60	; 0x3c
 8001a84:	af0a      	add	r7, sp, #40	; 0x28
 8001a86:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d101      	bne.n	8001a92 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e054      	b.n	8001b3c <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d106      	bne.n	8001ab2 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f006 fd3b 	bl	8008528 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2203      	movs	r2, #3
 8001ab6:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d102      	bne.n	8001acc <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f004 feb6 	bl	8006842 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	603b      	str	r3, [r7, #0]
 8001adc:	687e      	ldr	r6, [r7, #4]
 8001ade:	466d      	mov	r5, sp
 8001ae0:	f106 0410 	add.w	r4, r6, #16
 8001ae4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ae6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ae8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001aea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001aec:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001af0:	e885 0003 	stmia.w	r5, {r0, r1}
 8001af4:	1d33      	adds	r3, r6, #4
 8001af6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001af8:	6838      	ldr	r0, [r7, #0]
 8001afa:	f004 fe3f 	bl	800677c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2101      	movs	r1, #1
 8001b04:	4618      	mov	r0, r3
 8001b06:	f004 fead 	bl	8006864 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	603b      	str	r3, [r7, #0]
 8001b10:	687e      	ldr	r6, [r7, #4]
 8001b12:	466d      	mov	r5, sp
 8001b14:	f106 0410 	add.w	r4, r6, #16
 8001b18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b20:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b24:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b28:	1d33      	adds	r3, r6, #4
 8001b2a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b2c:	6838      	ldr	r0, [r7, #0]
 8001b2e:	f004 ffbb 	bl	8006aa8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2201      	movs	r2, #1
 8001b36:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8001b3a:	2300      	movs	r3, #0
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3714      	adds	r7, #20
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b44 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001b44:	b590      	push	{r4, r7, lr}
 8001b46:	b089      	sub	sp, #36	; 0x24
 8001b48:	af04      	add	r7, sp, #16
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	4608      	mov	r0, r1
 8001b4e:	4611      	mov	r1, r2
 8001b50:	461a      	mov	r2, r3
 8001b52:	4603      	mov	r3, r0
 8001b54:	70fb      	strb	r3, [r7, #3]
 8001b56:	460b      	mov	r3, r1
 8001b58:	70bb      	strb	r3, [r7, #2]
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d101      	bne.n	8001b6c <HAL_HCD_HC_Init+0x28>
 8001b68:	2302      	movs	r3, #2
 8001b6a:	e07f      	b.n	8001c6c <HAL_HCD_HC_Init+0x128>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8001b74:	78fa      	ldrb	r2, [r7, #3]
 8001b76:	6879      	ldr	r1, [r7, #4]
 8001b78:	4613      	mov	r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	4413      	add	r3, r2
 8001b7e:	00db      	lsls	r3, r3, #3
 8001b80:	440b      	add	r3, r1
 8001b82:	333d      	adds	r3, #61	; 0x3d
 8001b84:	2200      	movs	r2, #0
 8001b86:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001b88:	78fa      	ldrb	r2, [r7, #3]
 8001b8a:	6879      	ldr	r1, [r7, #4]
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	4413      	add	r3, r2
 8001b92:	00db      	lsls	r3, r3, #3
 8001b94:	440b      	add	r3, r1
 8001b96:	3338      	adds	r3, #56	; 0x38
 8001b98:	787a      	ldrb	r2, [r7, #1]
 8001b9a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001b9c:	78fa      	ldrb	r2, [r7, #3]
 8001b9e:	6879      	ldr	r1, [r7, #4]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	4413      	add	r3, r2
 8001ba6:	00db      	lsls	r3, r3, #3
 8001ba8:	440b      	add	r3, r1
 8001baa:	3340      	adds	r3, #64	; 0x40
 8001bac:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001bae:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001bb0:	78fa      	ldrb	r2, [r7, #3]
 8001bb2:	6879      	ldr	r1, [r7, #4]
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	4413      	add	r3, r2
 8001bba:	00db      	lsls	r3, r3, #3
 8001bbc:	440b      	add	r3, r1
 8001bbe:	3339      	adds	r3, #57	; 0x39
 8001bc0:	78fa      	ldrb	r2, [r7, #3]
 8001bc2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001bc4:	78fa      	ldrb	r2, [r7, #3]
 8001bc6:	6879      	ldr	r1, [r7, #4]
 8001bc8:	4613      	mov	r3, r2
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	4413      	add	r3, r2
 8001bce:	00db      	lsls	r3, r3, #3
 8001bd0:	440b      	add	r3, r1
 8001bd2:	333f      	adds	r3, #63	; 0x3f
 8001bd4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001bd8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001bda:	78fa      	ldrb	r2, [r7, #3]
 8001bdc:	78bb      	ldrb	r3, [r7, #2]
 8001bde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001be2:	b2d8      	uxtb	r0, r3
 8001be4:	6879      	ldr	r1, [r7, #4]
 8001be6:	4613      	mov	r3, r2
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	4413      	add	r3, r2
 8001bec:	00db      	lsls	r3, r3, #3
 8001bee:	440b      	add	r3, r1
 8001bf0:	333a      	adds	r3, #58	; 0x3a
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001bf6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	da0a      	bge.n	8001c14 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001bfe:	78fa      	ldrb	r2, [r7, #3]
 8001c00:	6879      	ldr	r1, [r7, #4]
 8001c02:	4613      	mov	r3, r2
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	4413      	add	r3, r2
 8001c08:	00db      	lsls	r3, r3, #3
 8001c0a:	440b      	add	r3, r1
 8001c0c:	333b      	adds	r3, #59	; 0x3b
 8001c0e:	2201      	movs	r2, #1
 8001c10:	701a      	strb	r2, [r3, #0]
 8001c12:	e009      	b.n	8001c28 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001c14:	78fa      	ldrb	r2, [r7, #3]
 8001c16:	6879      	ldr	r1, [r7, #4]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	4413      	add	r3, r2
 8001c1e:	00db      	lsls	r3, r3, #3
 8001c20:	440b      	add	r3, r1
 8001c22:	333b      	adds	r3, #59	; 0x3b
 8001c24:	2200      	movs	r2, #0
 8001c26:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001c28:	78fa      	ldrb	r2, [r7, #3]
 8001c2a:	6879      	ldr	r1, [r7, #4]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	4413      	add	r3, r2
 8001c32:	00db      	lsls	r3, r3, #3
 8001c34:	440b      	add	r3, r1
 8001c36:	333c      	adds	r3, #60	; 0x3c
 8001c38:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001c3c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6818      	ldr	r0, [r3, #0]
 8001c42:	787c      	ldrb	r4, [r7, #1]
 8001c44:	78ba      	ldrb	r2, [r7, #2]
 8001c46:	78f9      	ldrb	r1, [r7, #3]
 8001c48:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001c4a:	9302      	str	r3, [sp, #8]
 8001c4c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001c50:	9301      	str	r3, [sp, #4]
 8001c52:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001c56:	9300      	str	r3, [sp, #0]
 8001c58:	4623      	mov	r3, r4
 8001c5a:	f005 f827 	bl	8006cac <USB_HC_Init>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3714      	adds	r7, #20
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd90      	pop	{r4, r7, pc}

08001c74 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001c80:	2300      	movs	r3, #0
 8001c82:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d101      	bne.n	8001c92 <HAL_HCD_HC_Halt+0x1e>
 8001c8e:	2302      	movs	r3, #2
 8001c90:	e00f      	b.n	8001cb2 <HAL_HCD_HC_Halt+0x3e>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2201      	movs	r2, #1
 8001c96:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	78fa      	ldrb	r2, [r7, #3]
 8001ca0:	4611      	mov	r1, r2
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f005 fa05 	bl	80070b2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3710      	adds	r7, #16
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
	...

08001cbc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	4608      	mov	r0, r1
 8001cc6:	4611      	mov	r1, r2
 8001cc8:	461a      	mov	r2, r3
 8001cca:	4603      	mov	r3, r0
 8001ccc:	70fb      	strb	r3, [r7, #3]
 8001cce:	460b      	mov	r3, r1
 8001cd0:	70bb      	strb	r3, [r7, #2]
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001cd6:	78fa      	ldrb	r2, [r7, #3]
 8001cd8:	6879      	ldr	r1, [r7, #4]
 8001cda:	4613      	mov	r3, r2
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	4413      	add	r3, r2
 8001ce0:	00db      	lsls	r3, r3, #3
 8001ce2:	440b      	add	r3, r1
 8001ce4:	333b      	adds	r3, #59	; 0x3b
 8001ce6:	78ba      	ldrb	r2, [r7, #2]
 8001ce8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001cea:	78fa      	ldrb	r2, [r7, #3]
 8001cec:	6879      	ldr	r1, [r7, #4]
 8001cee:	4613      	mov	r3, r2
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	4413      	add	r3, r2
 8001cf4:	00db      	lsls	r3, r3, #3
 8001cf6:	440b      	add	r3, r1
 8001cf8:	333f      	adds	r3, #63	; 0x3f
 8001cfa:	787a      	ldrb	r2, [r7, #1]
 8001cfc:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001cfe:	7c3b      	ldrb	r3, [r7, #16]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d114      	bne.n	8001d2e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001d04:	78fa      	ldrb	r2, [r7, #3]
 8001d06:	6879      	ldr	r1, [r7, #4]
 8001d08:	4613      	mov	r3, r2
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	4413      	add	r3, r2
 8001d0e:	00db      	lsls	r3, r3, #3
 8001d10:	440b      	add	r3, r1
 8001d12:	3342      	adds	r3, #66	; 0x42
 8001d14:	2203      	movs	r2, #3
 8001d16:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001d18:	78fa      	ldrb	r2, [r7, #3]
 8001d1a:	6879      	ldr	r1, [r7, #4]
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	4413      	add	r3, r2
 8001d22:	00db      	lsls	r3, r3, #3
 8001d24:	440b      	add	r3, r1
 8001d26:	333d      	adds	r3, #61	; 0x3d
 8001d28:	7f3a      	ldrb	r2, [r7, #28]
 8001d2a:	701a      	strb	r2, [r3, #0]
 8001d2c:	e009      	b.n	8001d42 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d2e:	78fa      	ldrb	r2, [r7, #3]
 8001d30:	6879      	ldr	r1, [r7, #4]
 8001d32:	4613      	mov	r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	4413      	add	r3, r2
 8001d38:	00db      	lsls	r3, r3, #3
 8001d3a:	440b      	add	r3, r1
 8001d3c:	3342      	adds	r3, #66	; 0x42
 8001d3e:	2202      	movs	r2, #2
 8001d40:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001d42:	787b      	ldrb	r3, [r7, #1]
 8001d44:	2b03      	cmp	r3, #3
 8001d46:	f200 80d6 	bhi.w	8001ef6 <HAL_HCD_HC_SubmitRequest+0x23a>
 8001d4a:	a201      	add	r2, pc, #4	; (adr r2, 8001d50 <HAL_HCD_HC_SubmitRequest+0x94>)
 8001d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d50:	08001d61 	.word	0x08001d61
 8001d54:	08001ee1 	.word	0x08001ee1
 8001d58:	08001dcd 	.word	0x08001dcd
 8001d5c:	08001e57 	.word	0x08001e57
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001d60:	7c3b      	ldrb	r3, [r7, #16]
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	f040 80c9 	bne.w	8001efa <HAL_HCD_HC_SubmitRequest+0x23e>
 8001d68:	78bb      	ldrb	r3, [r7, #2]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	f040 80c5 	bne.w	8001efa <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8001d70:	8b3b      	ldrh	r3, [r7, #24]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d109      	bne.n	8001d8a <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001d76:	78fa      	ldrb	r2, [r7, #3]
 8001d78:	6879      	ldr	r1, [r7, #4]
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	4413      	add	r3, r2
 8001d80:	00db      	lsls	r3, r3, #3
 8001d82:	440b      	add	r3, r1
 8001d84:	3351      	adds	r3, #81	; 0x51
 8001d86:	2201      	movs	r2, #1
 8001d88:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001d8a:	78fa      	ldrb	r2, [r7, #3]
 8001d8c:	6879      	ldr	r1, [r7, #4]
 8001d8e:	4613      	mov	r3, r2
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	4413      	add	r3, r2
 8001d94:	00db      	lsls	r3, r3, #3
 8001d96:	440b      	add	r3, r1
 8001d98:	3351      	adds	r3, #81	; 0x51
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d10a      	bne.n	8001db6 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001da0:	78fa      	ldrb	r2, [r7, #3]
 8001da2:	6879      	ldr	r1, [r7, #4]
 8001da4:	4613      	mov	r3, r2
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	4413      	add	r3, r2
 8001daa:	00db      	lsls	r3, r3, #3
 8001dac:	440b      	add	r3, r1
 8001dae:	3342      	adds	r3, #66	; 0x42
 8001db0:	2200      	movs	r2, #0
 8001db2:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001db4:	e0a1      	b.n	8001efa <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001db6:	78fa      	ldrb	r2, [r7, #3]
 8001db8:	6879      	ldr	r1, [r7, #4]
 8001dba:	4613      	mov	r3, r2
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	4413      	add	r3, r2
 8001dc0:	00db      	lsls	r3, r3, #3
 8001dc2:	440b      	add	r3, r1
 8001dc4:	3342      	adds	r3, #66	; 0x42
 8001dc6:	2202      	movs	r2, #2
 8001dc8:	701a      	strb	r2, [r3, #0]
      break;
 8001dca:	e096      	b.n	8001efa <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001dcc:	78bb      	ldrb	r3, [r7, #2]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d120      	bne.n	8001e14 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001dd2:	78fa      	ldrb	r2, [r7, #3]
 8001dd4:	6879      	ldr	r1, [r7, #4]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	4413      	add	r3, r2
 8001ddc:	00db      	lsls	r3, r3, #3
 8001dde:	440b      	add	r3, r1
 8001de0:	3351      	adds	r3, #81	; 0x51
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d10a      	bne.n	8001dfe <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001de8:	78fa      	ldrb	r2, [r7, #3]
 8001dea:	6879      	ldr	r1, [r7, #4]
 8001dec:	4613      	mov	r3, r2
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	4413      	add	r3, r2
 8001df2:	00db      	lsls	r3, r3, #3
 8001df4:	440b      	add	r3, r1
 8001df6:	3342      	adds	r3, #66	; 0x42
 8001df8:	2200      	movs	r2, #0
 8001dfa:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001dfc:	e07e      	b.n	8001efc <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001dfe:	78fa      	ldrb	r2, [r7, #3]
 8001e00:	6879      	ldr	r1, [r7, #4]
 8001e02:	4613      	mov	r3, r2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	4413      	add	r3, r2
 8001e08:	00db      	lsls	r3, r3, #3
 8001e0a:	440b      	add	r3, r1
 8001e0c:	3342      	adds	r3, #66	; 0x42
 8001e0e:	2202      	movs	r2, #2
 8001e10:	701a      	strb	r2, [r3, #0]
      break;
 8001e12:	e073      	b.n	8001efc <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001e14:	78fa      	ldrb	r2, [r7, #3]
 8001e16:	6879      	ldr	r1, [r7, #4]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	4413      	add	r3, r2
 8001e1e:	00db      	lsls	r3, r3, #3
 8001e20:	440b      	add	r3, r1
 8001e22:	3350      	adds	r3, #80	; 0x50
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d10a      	bne.n	8001e40 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001e2a:	78fa      	ldrb	r2, [r7, #3]
 8001e2c:	6879      	ldr	r1, [r7, #4]
 8001e2e:	4613      	mov	r3, r2
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	4413      	add	r3, r2
 8001e34:	00db      	lsls	r3, r3, #3
 8001e36:	440b      	add	r3, r1
 8001e38:	3342      	adds	r3, #66	; 0x42
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	701a      	strb	r2, [r3, #0]
      break;
 8001e3e:	e05d      	b.n	8001efc <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001e40:	78fa      	ldrb	r2, [r7, #3]
 8001e42:	6879      	ldr	r1, [r7, #4]
 8001e44:	4613      	mov	r3, r2
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	4413      	add	r3, r2
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	440b      	add	r3, r1
 8001e4e:	3342      	adds	r3, #66	; 0x42
 8001e50:	2202      	movs	r2, #2
 8001e52:	701a      	strb	r2, [r3, #0]
      break;
 8001e54:	e052      	b.n	8001efc <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001e56:	78bb      	ldrb	r3, [r7, #2]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d120      	bne.n	8001e9e <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001e5c:	78fa      	ldrb	r2, [r7, #3]
 8001e5e:	6879      	ldr	r1, [r7, #4]
 8001e60:	4613      	mov	r3, r2
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	4413      	add	r3, r2
 8001e66:	00db      	lsls	r3, r3, #3
 8001e68:	440b      	add	r3, r1
 8001e6a:	3351      	adds	r3, #81	; 0x51
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d10a      	bne.n	8001e88 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001e72:	78fa      	ldrb	r2, [r7, #3]
 8001e74:	6879      	ldr	r1, [r7, #4]
 8001e76:	4613      	mov	r3, r2
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	4413      	add	r3, r2
 8001e7c:	00db      	lsls	r3, r3, #3
 8001e7e:	440b      	add	r3, r1
 8001e80:	3342      	adds	r3, #66	; 0x42
 8001e82:	2200      	movs	r2, #0
 8001e84:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001e86:	e039      	b.n	8001efc <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001e88:	78fa      	ldrb	r2, [r7, #3]
 8001e8a:	6879      	ldr	r1, [r7, #4]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	4413      	add	r3, r2
 8001e92:	00db      	lsls	r3, r3, #3
 8001e94:	440b      	add	r3, r1
 8001e96:	3342      	adds	r3, #66	; 0x42
 8001e98:	2202      	movs	r2, #2
 8001e9a:	701a      	strb	r2, [r3, #0]
      break;
 8001e9c:	e02e      	b.n	8001efc <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001e9e:	78fa      	ldrb	r2, [r7, #3]
 8001ea0:	6879      	ldr	r1, [r7, #4]
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	4413      	add	r3, r2
 8001ea8:	00db      	lsls	r3, r3, #3
 8001eaa:	440b      	add	r3, r1
 8001eac:	3350      	adds	r3, #80	; 0x50
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d10a      	bne.n	8001eca <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001eb4:	78fa      	ldrb	r2, [r7, #3]
 8001eb6:	6879      	ldr	r1, [r7, #4]
 8001eb8:	4613      	mov	r3, r2
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	4413      	add	r3, r2
 8001ebe:	00db      	lsls	r3, r3, #3
 8001ec0:	440b      	add	r3, r1
 8001ec2:	3342      	adds	r3, #66	; 0x42
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	701a      	strb	r2, [r3, #0]
      break;
 8001ec8:	e018      	b.n	8001efc <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001eca:	78fa      	ldrb	r2, [r7, #3]
 8001ecc:	6879      	ldr	r1, [r7, #4]
 8001ece:	4613      	mov	r3, r2
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	4413      	add	r3, r2
 8001ed4:	00db      	lsls	r3, r3, #3
 8001ed6:	440b      	add	r3, r1
 8001ed8:	3342      	adds	r3, #66	; 0x42
 8001eda:	2202      	movs	r2, #2
 8001edc:	701a      	strb	r2, [r3, #0]
      break;
 8001ede:	e00d      	b.n	8001efc <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ee0:	78fa      	ldrb	r2, [r7, #3]
 8001ee2:	6879      	ldr	r1, [r7, #4]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	4413      	add	r3, r2
 8001eea:	00db      	lsls	r3, r3, #3
 8001eec:	440b      	add	r3, r1
 8001eee:	3342      	adds	r3, #66	; 0x42
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	701a      	strb	r2, [r3, #0]
      break;
 8001ef4:	e002      	b.n	8001efc <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8001ef6:	bf00      	nop
 8001ef8:	e000      	b.n	8001efc <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8001efa:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001efc:	78fa      	ldrb	r2, [r7, #3]
 8001efe:	6879      	ldr	r1, [r7, #4]
 8001f00:	4613      	mov	r3, r2
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	4413      	add	r3, r2
 8001f06:	00db      	lsls	r3, r3, #3
 8001f08:	440b      	add	r3, r1
 8001f0a:	3344      	adds	r3, #68	; 0x44
 8001f0c:	697a      	ldr	r2, [r7, #20]
 8001f0e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001f10:	78fa      	ldrb	r2, [r7, #3]
 8001f12:	8b39      	ldrh	r1, [r7, #24]
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	4613      	mov	r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	4413      	add	r3, r2
 8001f1c:	00db      	lsls	r3, r3, #3
 8001f1e:	4403      	add	r3, r0
 8001f20:	3348      	adds	r3, #72	; 0x48
 8001f22:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001f24:	78fa      	ldrb	r2, [r7, #3]
 8001f26:	6879      	ldr	r1, [r7, #4]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	4413      	add	r3, r2
 8001f2e:	00db      	lsls	r3, r3, #3
 8001f30:	440b      	add	r3, r1
 8001f32:	335c      	adds	r3, #92	; 0x5c
 8001f34:	2200      	movs	r2, #0
 8001f36:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001f38:	78fa      	ldrb	r2, [r7, #3]
 8001f3a:	6879      	ldr	r1, [r7, #4]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	4413      	add	r3, r2
 8001f42:	00db      	lsls	r3, r3, #3
 8001f44:	440b      	add	r3, r1
 8001f46:	334c      	adds	r3, #76	; 0x4c
 8001f48:	2200      	movs	r2, #0
 8001f4a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001f4c:	78fa      	ldrb	r2, [r7, #3]
 8001f4e:	6879      	ldr	r1, [r7, #4]
 8001f50:	4613      	mov	r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	4413      	add	r3, r2
 8001f56:	00db      	lsls	r3, r3, #3
 8001f58:	440b      	add	r3, r1
 8001f5a:	3339      	adds	r3, #57	; 0x39
 8001f5c:	78fa      	ldrb	r2, [r7, #3]
 8001f5e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001f60:	78fa      	ldrb	r2, [r7, #3]
 8001f62:	6879      	ldr	r1, [r7, #4]
 8001f64:	4613      	mov	r3, r2
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	4413      	add	r3, r2
 8001f6a:	00db      	lsls	r3, r3, #3
 8001f6c:	440b      	add	r3, r1
 8001f6e:	335d      	adds	r3, #93	; 0x5d
 8001f70:	2200      	movs	r2, #0
 8001f72:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num]);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6818      	ldr	r0, [r3, #0]
 8001f78:	78fa      	ldrb	r2, [r7, #3]
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	4413      	add	r3, r2
 8001f80:	00db      	lsls	r3, r3, #3
 8001f82:	3338      	adds	r3, #56	; 0x38
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	4413      	add	r3, r2
 8001f88:	4619      	mov	r1, r3
 8001f8a:	f004 ff81 	bl	8006e90 <USB_HC_StartXfer>
 8001f8e:	4603      	mov	r3, r0
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3708      	adds	r7, #8
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b086      	sub	sp, #24
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f004 fd37 	bl	8006a22 <USB_GetMode>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	f040 80ef 	bne.w	800219a <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f004 fd1b 	bl	80069fc <USB_ReadInterrupts>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	f000 80e5 	beq.w	8002198 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f004 fd12 	bl	80069fc <USB_ReadInterrupts>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fde:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001fe2:	d104      	bne.n	8001fee <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001fec:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f004 fd02 	bl	80069fc <USB_ReadInterrupts>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ffe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002002:	d104      	bne.n	800200e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800200c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4618      	mov	r0, r3
 8002014:	f004 fcf2 	bl	80069fc <USB_ReadInterrupts>
 8002018:	4603      	mov	r3, r0
 800201a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800201e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002022:	d104      	bne.n	800202e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800202c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4618      	mov	r0, r3
 8002034:	f004 fce2 	bl	80069fc <USB_ReadInterrupts>
 8002038:	4603      	mov	r3, r0
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b02      	cmp	r3, #2
 8002040:	d103      	bne.n	800204a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	2202      	movs	r2, #2
 8002048:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4618      	mov	r0, r3
 8002050:	f004 fcd4 	bl	80069fc <USB_ReadInterrupts>
 8002054:	4603      	mov	r3, r0
 8002056:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800205a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800205e:	d115      	bne.n	800208c <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002068:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	2b00      	cmp	r3, #0
 8002078:	d108      	bne.n	800208c <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f006 fad6 	bl	800862c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2101      	movs	r1, #1
 8002086:	4618      	mov	r0, r3
 8002088:	f004 fd8c 	bl	8006ba4 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4618      	mov	r0, r3
 8002092:	f004 fcb3 	bl	80069fc <USB_ReadInterrupts>
 8002096:	4603      	mov	r3, r0
 8002098:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800209c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020a0:	d102      	bne.n	80020a8 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f001 f906 	bl	80032b4 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f004 fca5 	bl	80069fc <USB_ReadInterrupts>
 80020b2:	4603      	mov	r3, r0
 80020b4:	f003 0308 	and.w	r3, r3, #8
 80020b8:	2b08      	cmp	r3, #8
 80020ba:	d106      	bne.n	80020ca <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f006 fa99 	bl	80085f4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2208      	movs	r2, #8
 80020c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f004 fc94 	bl	80069fc <USB_ReadInterrupts>
 80020d4:	4603      	mov	r3, r0
 80020d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80020de:	d138      	bne.n	8002152 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4618      	mov	r0, r3
 80020e6:	f004 ffd3 	bl	8007090 <USB_HC_ReadInterrupt>
 80020ea:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80020ec:	2300      	movs	r3, #0
 80020ee:	617b      	str	r3, [r7, #20]
 80020f0:	e025      	b.n	800213e <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	f003 030f 	and.w	r3, r3, #15
 80020f8:	68ba      	ldr	r2, [r7, #8]
 80020fa:	fa22 f303 	lsr.w	r3, r2, r3
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	2b00      	cmp	r3, #0
 8002104:	d018      	beq.n	8002138 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	015a      	lsls	r2, r3, #5
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	4413      	add	r3, r2
 800210e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002118:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800211c:	d106      	bne.n	800212c <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	b2db      	uxtb	r3, r3
 8002122:	4619      	mov	r1, r3
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f000 f8b3 	bl	8002290 <HCD_HC_IN_IRQHandler>
 800212a:	e005      	b.n	8002138 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	b2db      	uxtb	r3, r3
 8002130:	4619      	mov	r1, r3
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f000 fcbd 	bl	8002ab2 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	3301      	adds	r3, #1
 800213c:	617b      	str	r3, [r7, #20]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	697a      	ldr	r2, [r7, #20]
 8002144:	429a      	cmp	r2, r3
 8002146:	d3d4      	bcc.n	80020f2 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002150:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4618      	mov	r0, r3
 8002158:	f004 fc50 	bl	80069fc <USB_ReadInterrupts>
 800215c:	4603      	mov	r3, r0
 800215e:	f003 0310 	and.w	r3, r3, #16
 8002162:	2b10      	cmp	r3, #16
 8002164:	d101      	bne.n	800216a <HAL_HCD_IRQHandler+0x1d2>
 8002166:	2301      	movs	r3, #1
 8002168:	e000      	b.n	800216c <HAL_HCD_IRQHandler+0x1d4>
 800216a:	2300      	movs	r3, #0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d014      	beq.n	800219a <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	699a      	ldr	r2, [r3, #24]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f022 0210 	bic.w	r2, r2, #16
 800217e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f000 ffeb 	bl	800315c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	699a      	ldr	r2, [r3, #24]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f042 0210 	orr.w	r2, r2, #16
 8002194:	619a      	str	r2, [r3, #24]
 8002196:	e000      	b.n	800219a <HAL_HCD_IRQHandler+0x202>
      return;
 8002198:	bf00      	nop
    }
  }
}
 800219a:	3718      	adds	r7, #24
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d101      	bne.n	80021b6 <HAL_HCD_Start+0x16>
 80021b2:	2302      	movs	r3, #2
 80021b4:	e013      	b.n	80021de <HAL_HCD_Start+0x3e>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2201      	movs	r2, #1
 80021ba:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f004 fb2c 	bl	8006820 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2101      	movs	r1, #1
 80021ce:	4618      	mov	r0, r3
 80021d0:	f004 fd22 	bl	8006c18 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b082      	sub	sp, #8
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d101      	bne.n	80021fc <HAL_HCD_Stop+0x16>
 80021f8:	2302      	movs	r3, #2
 80021fa:	e00d      	b.n	8002218 <HAL_HCD_Stop+0x32>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2201      	movs	r2, #1
 8002200:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4618      	mov	r0, r3
 800220a:	f005 f851 	bl	80072b0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8002216:	2300      	movs	r3, #0
}
 8002218:	4618      	mov	r0, r3
 800221a:	3708      	adds	r7, #8
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	460b      	mov	r3, r1
 800222a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800222c:	78fa      	ldrb	r2, [r7, #3]
 800222e:	6879      	ldr	r1, [r7, #4]
 8002230:	4613      	mov	r3, r2
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	4413      	add	r3, r2
 8002236:	00db      	lsls	r3, r3, #3
 8002238:	440b      	add	r3, r1
 800223a:	335c      	adds	r3, #92	; 0x5c
 800223c:	781b      	ldrb	r3, [r3, #0]
}
 800223e:	4618      	mov	r0, r3
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr

0800224a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800224a:	b480      	push	{r7}
 800224c:	b083      	sub	sp, #12
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
 8002252:	460b      	mov	r3, r1
 8002254:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002256:	78fa      	ldrb	r2, [r7, #3]
 8002258:	6879      	ldr	r1, [r7, #4]
 800225a:	4613      	mov	r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	4413      	add	r3, r2
 8002260:	00db      	lsls	r3, r3, #3
 8002262:	440b      	add	r3, r1
 8002264:	334c      	adds	r3, #76	; 0x4c
 8002266:	681b      	ldr	r3, [r3, #0]
}
 8002268:	4618      	mov	r0, r3
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4618      	mov	r0, r3
 8002282:	f004 fd02 	bl	8006c8a <USB_GetCurrentFrame>
 8002286:	4603      	mov	r3, r0
}
 8002288:	4618      	mov	r0, r3
 800228a:	3708      	adds	r7, #8
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b086      	sub	sp, #24
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	460b      	mov	r3, r1
 800229a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80022a6:	78fb      	ldrb	r3, [r7, #3]
 80022a8:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	015a      	lsls	r2, r3, #5
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	4413      	add	r3, r2
 80022b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	f003 0304 	and.w	r3, r3, #4
 80022bc:	2b04      	cmp	r3, #4
 80022be:	d119      	bne.n	80022f4 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	015a      	lsls	r2, r3, #5
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	4413      	add	r3, r2
 80022c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022cc:	461a      	mov	r2, r3
 80022ce:	2304      	movs	r3, #4
 80022d0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	015a      	lsls	r2, r3, #5
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	4413      	add	r3, r2
 80022da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	68fa      	ldr	r2, [r7, #12]
 80022e2:	0151      	lsls	r1, r2, #5
 80022e4:	693a      	ldr	r2, [r7, #16]
 80022e6:	440a      	add	r2, r1
 80022e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022ec:	f043 0302 	orr.w	r3, r3, #2
 80022f0:	60d3      	str	r3, [r2, #12]
 80022f2:	e0ce      	b.n	8002492 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	015a      	lsls	r2, r3, #5
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	4413      	add	r3, r2
 80022fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002306:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800230a:	d12c      	bne.n	8002366 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	015a      	lsls	r2, r3, #5
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	4413      	add	r3, r2
 8002314:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002318:	461a      	mov	r2, r3
 800231a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800231e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002320:	6879      	ldr	r1, [r7, #4]
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	4613      	mov	r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	4413      	add	r3, r2
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	440b      	add	r3, r1
 800232e:	335d      	adds	r3, #93	; 0x5d
 8002330:	2207      	movs	r2, #7
 8002332:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	015a      	lsls	r2, r3, #5
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	4413      	add	r3, r2
 800233c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	68fa      	ldr	r2, [r7, #12]
 8002344:	0151      	lsls	r1, r2, #5
 8002346:	693a      	ldr	r2, [r7, #16]
 8002348:	440a      	add	r2, r1
 800234a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800234e:	f043 0302 	orr.w	r3, r3, #2
 8002352:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	68fa      	ldr	r2, [r7, #12]
 800235a:	b2d2      	uxtb	r2, r2
 800235c:	4611      	mov	r1, r2
 800235e:	4618      	mov	r0, r3
 8002360:	f004 fea7 	bl	80070b2 <USB_HC_Halt>
 8002364:	e095      	b.n	8002492 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	015a      	lsls	r2, r3, #5
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	4413      	add	r3, r2
 800236e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f003 0320 	and.w	r3, r3, #32
 8002378:	2b20      	cmp	r3, #32
 800237a:	d109      	bne.n	8002390 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	015a      	lsls	r2, r3, #5
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	4413      	add	r3, r2
 8002384:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002388:	461a      	mov	r2, r3
 800238a:	2320      	movs	r3, #32
 800238c:	6093      	str	r3, [r2, #8]
 800238e:	e080      	b.n	8002492 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	015a      	lsls	r2, r3, #5
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	4413      	add	r3, r2
 8002398:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f003 0308 	and.w	r3, r3, #8
 80023a2:	2b08      	cmp	r3, #8
 80023a4:	d134      	bne.n	8002410 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	015a      	lsls	r2, r3, #5
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	4413      	add	r3, r2
 80023ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	68fa      	ldr	r2, [r7, #12]
 80023b6:	0151      	lsls	r1, r2, #5
 80023b8:	693a      	ldr	r2, [r7, #16]
 80023ba:	440a      	add	r2, r1
 80023bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023c0:	f043 0302 	orr.w	r3, r3, #2
 80023c4:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80023c6:	6879      	ldr	r1, [r7, #4]
 80023c8:	68fa      	ldr	r2, [r7, #12]
 80023ca:	4613      	mov	r3, r2
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	4413      	add	r3, r2
 80023d0:	00db      	lsls	r3, r3, #3
 80023d2:	440b      	add	r3, r1
 80023d4:	335d      	adds	r3, #93	; 0x5d
 80023d6:	2205      	movs	r2, #5
 80023d8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	015a      	lsls	r2, r3, #5
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	4413      	add	r3, r2
 80023e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023e6:	461a      	mov	r2, r3
 80023e8:	2310      	movs	r3, #16
 80023ea:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	015a      	lsls	r2, r3, #5
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	4413      	add	r3, r2
 80023f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023f8:	461a      	mov	r2, r3
 80023fa:	2308      	movs	r3, #8
 80023fc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	68fa      	ldr	r2, [r7, #12]
 8002404:	b2d2      	uxtb	r2, r2
 8002406:	4611      	mov	r1, r2
 8002408:	4618      	mov	r0, r3
 800240a:	f004 fe52 	bl	80070b2 <USB_HC_Halt>
 800240e:	e040      	b.n	8002492 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	015a      	lsls	r2, r3, #5
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	4413      	add	r3, r2
 8002418:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002422:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002426:	d134      	bne.n	8002492 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	015a      	lsls	r2, r3, #5
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	4413      	add	r3, r2
 8002430:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	68fa      	ldr	r2, [r7, #12]
 8002438:	0151      	lsls	r1, r2, #5
 800243a:	693a      	ldr	r2, [r7, #16]
 800243c:	440a      	add	r2, r1
 800243e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002442:	f043 0302 	orr.w	r3, r3, #2
 8002446:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	68fa      	ldr	r2, [r7, #12]
 800244e:	b2d2      	uxtb	r2, r2
 8002450:	4611      	mov	r1, r2
 8002452:	4618      	mov	r0, r3
 8002454:	f004 fe2d 	bl	80070b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	015a      	lsls	r2, r3, #5
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	4413      	add	r3, r2
 8002460:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002464:	461a      	mov	r2, r3
 8002466:	2310      	movs	r3, #16
 8002468:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800246a:	6879      	ldr	r1, [r7, #4]
 800246c:	68fa      	ldr	r2, [r7, #12]
 800246e:	4613      	mov	r3, r2
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	4413      	add	r3, r2
 8002474:	00db      	lsls	r3, r3, #3
 8002476:	440b      	add	r3, r1
 8002478:	335d      	adds	r3, #93	; 0x5d
 800247a:	2208      	movs	r2, #8
 800247c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	015a      	lsls	r2, r3, #5
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	4413      	add	r3, r2
 8002486:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800248a:	461a      	mov	r2, r3
 800248c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002490:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	015a      	lsls	r2, r3, #5
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	4413      	add	r3, r2
 800249a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024a8:	d122      	bne.n	80024f0 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	015a      	lsls	r2, r3, #5
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	4413      	add	r3, r2
 80024b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	68fa      	ldr	r2, [r7, #12]
 80024ba:	0151      	lsls	r1, r2, #5
 80024bc:	693a      	ldr	r2, [r7, #16]
 80024be:	440a      	add	r2, r1
 80024c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024c4:	f043 0302 	orr.w	r3, r3, #2
 80024c8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	68fa      	ldr	r2, [r7, #12]
 80024d0:	b2d2      	uxtb	r2, r2
 80024d2:	4611      	mov	r1, r2
 80024d4:	4618      	mov	r0, r3
 80024d6:	f004 fdec 	bl	80070b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	015a      	lsls	r2, r3, #5
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	4413      	add	r3, r2
 80024e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024e6:	461a      	mov	r2, r3
 80024e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024ec:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80024ee:	e2dc      	b.n	8002aaa <HCD_HC_IN_IRQHandler+0x81a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	015a      	lsls	r2, r3, #5
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	4413      	add	r3, r2
 80024f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	2b01      	cmp	r3, #1
 8002504:	f040 80dd 	bne.w	80026c2 <HCD_HC_IN_IRQHandler+0x432>
    hhcd->hc[ch_num].state = HC_XFRC;
 8002508:	6879      	ldr	r1, [r7, #4]
 800250a:	68fa      	ldr	r2, [r7, #12]
 800250c:	4613      	mov	r3, r2
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	4413      	add	r3, r2
 8002512:	00db      	lsls	r3, r3, #3
 8002514:	440b      	add	r3, r1
 8002516:	335d      	adds	r3, #93	; 0x5d
 8002518:	2201      	movs	r2, #1
 800251a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800251c:	6879      	ldr	r1, [r7, #4]
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	4613      	mov	r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	4413      	add	r3, r2
 8002526:	00db      	lsls	r3, r3, #3
 8002528:	440b      	add	r3, r1
 800252a:	3358      	adds	r3, #88	; 0x58
 800252c:	2200      	movs	r2, #0
 800252e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	015a      	lsls	r2, r3, #5
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	4413      	add	r3, r2
 8002538:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800253c:	461a      	mov	r2, r3
 800253e:	2301      	movs	r3, #1
 8002540:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002542:	6879      	ldr	r1, [r7, #4]
 8002544:	68fa      	ldr	r2, [r7, #12]
 8002546:	4613      	mov	r3, r2
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	4413      	add	r3, r2
 800254c:	00db      	lsls	r3, r3, #3
 800254e:	440b      	add	r3, r1
 8002550:	333f      	adds	r3, #63	; 0x3f
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d00a      	beq.n	800256e <HCD_HC_IN_IRQHandler+0x2de>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002558:	6879      	ldr	r1, [r7, #4]
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	4613      	mov	r3, r2
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	4413      	add	r3, r2
 8002562:	00db      	lsls	r3, r3, #3
 8002564:	440b      	add	r3, r1
 8002566:	333f      	adds	r3, #63	; 0x3f
 8002568:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800256a:	2b02      	cmp	r3, #2
 800256c:	d121      	bne.n	80025b2 <HCD_HC_IN_IRQHandler+0x322>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	015a      	lsls	r2, r3, #5
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	4413      	add	r3, r2
 8002576:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	68fa      	ldr	r2, [r7, #12]
 800257e:	0151      	lsls	r1, r2, #5
 8002580:	693a      	ldr	r2, [r7, #16]
 8002582:	440a      	add	r2, r1
 8002584:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002588:	f043 0302 	orr.w	r3, r3, #2
 800258c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	68fa      	ldr	r2, [r7, #12]
 8002594:	b2d2      	uxtb	r2, r2
 8002596:	4611      	mov	r1, r2
 8002598:	4618      	mov	r0, r3
 800259a:	f004 fd8a 	bl	80070b2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	015a      	lsls	r2, r3, #5
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	4413      	add	r3, r2
 80025a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025aa:	461a      	mov	r2, r3
 80025ac:	2310      	movs	r3, #16
 80025ae:	6093      	str	r3, [r2, #8]
 80025b0:	e070      	b.n	8002694 <HCD_HC_IN_IRQHandler+0x404>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80025b2:	6879      	ldr	r1, [r7, #4]
 80025b4:	68fa      	ldr	r2, [r7, #12]
 80025b6:	4613      	mov	r3, r2
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	4413      	add	r3, r2
 80025bc:	00db      	lsls	r3, r3, #3
 80025be:	440b      	add	r3, r1
 80025c0:	333f      	adds	r3, #63	; 0x3f
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	2b03      	cmp	r3, #3
 80025c6:	d12a      	bne.n	800261e <HCD_HC_IN_IRQHandler+0x38e>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	015a      	lsls	r2, r3, #5
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	4413      	add	r3, r2
 80025d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	68fa      	ldr	r2, [r7, #12]
 80025d8:	0151      	lsls	r1, r2, #5
 80025da:	693a      	ldr	r2, [r7, #16]
 80025dc:	440a      	add	r2, r1
 80025de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025e2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80025e6:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80025e8:	6879      	ldr	r1, [r7, #4]
 80025ea:	68fa      	ldr	r2, [r7, #12]
 80025ec:	4613      	mov	r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	4413      	add	r3, r2
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	440b      	add	r3, r1
 80025f6:	335c      	adds	r3, #92	; 0x5c
 80025f8:	2201      	movs	r2, #1
 80025fa:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	b2d8      	uxtb	r0, r3
 8002600:	6879      	ldr	r1, [r7, #4]
 8002602:	68fa      	ldr	r2, [r7, #12]
 8002604:	4613      	mov	r3, r2
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	4413      	add	r3, r2
 800260a:	00db      	lsls	r3, r3, #3
 800260c:	440b      	add	r3, r1
 800260e:	335c      	adds	r3, #92	; 0x5c
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	461a      	mov	r2, r3
 8002614:	4601      	mov	r1, r0
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f006 f816 	bl	8008648 <HAL_HCD_HC_NotifyURBChange_Callback>
 800261c:	e03a      	b.n	8002694 <HCD_HC_IN_IRQHandler+0x404>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800261e:	6879      	ldr	r1, [r7, #4]
 8002620:	68fa      	ldr	r2, [r7, #12]
 8002622:	4613      	mov	r3, r2
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	4413      	add	r3, r2
 8002628:	00db      	lsls	r3, r3, #3
 800262a:	440b      	add	r3, r1
 800262c:	333f      	adds	r3, #63	; 0x3f
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	2b01      	cmp	r3, #1
 8002632:	d12f      	bne.n	8002694 <HCD_HC_IN_IRQHandler+0x404>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002634:	6879      	ldr	r1, [r7, #4]
 8002636:	68fa      	ldr	r2, [r7, #12]
 8002638:	4613      	mov	r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	4413      	add	r3, r2
 800263e:	00db      	lsls	r3, r3, #3
 8002640:	440b      	add	r3, r1
 8002642:	335c      	adds	r3, #92	; 0x5c
 8002644:	2201      	movs	r2, #1
 8002646:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002648:	6879      	ldr	r1, [r7, #4]
 800264a:	68fa      	ldr	r2, [r7, #12]
 800264c:	4613      	mov	r3, r2
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	4413      	add	r3, r2
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	440b      	add	r3, r1
 8002656:	3350      	adds	r3, #80	; 0x50
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	f083 0301 	eor.w	r3, r3, #1
 800265e:	b2d8      	uxtb	r0, r3
 8002660:	6879      	ldr	r1, [r7, #4]
 8002662:	68fa      	ldr	r2, [r7, #12]
 8002664:	4613      	mov	r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	4413      	add	r3, r2
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	440b      	add	r3, r1
 800266e:	3350      	adds	r3, #80	; 0x50
 8002670:	4602      	mov	r2, r0
 8002672:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	b2d8      	uxtb	r0, r3
 8002678:	6879      	ldr	r1, [r7, #4]
 800267a:	68fa      	ldr	r2, [r7, #12]
 800267c:	4613      	mov	r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	4413      	add	r3, r2
 8002682:	00db      	lsls	r3, r3, #3
 8002684:	440b      	add	r3, r1
 8002686:	335c      	adds	r3, #92	; 0x5c
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	461a      	mov	r2, r3
 800268c:	4601      	mov	r1, r0
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f005 ffda 	bl	8008648 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8002694:	6879      	ldr	r1, [r7, #4]
 8002696:	68fa      	ldr	r2, [r7, #12]
 8002698:	4613      	mov	r3, r2
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	4413      	add	r3, r2
 800269e:	00db      	lsls	r3, r3, #3
 80026a0:	440b      	add	r3, r1
 80026a2:	3350      	adds	r3, #80	; 0x50
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	f083 0301 	eor.w	r3, r3, #1
 80026aa:	b2d8      	uxtb	r0, r3
 80026ac:	6879      	ldr	r1, [r7, #4]
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	4613      	mov	r3, r2
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	4413      	add	r3, r2
 80026b6:	00db      	lsls	r3, r3, #3
 80026b8:	440b      	add	r3, r1
 80026ba:	3350      	adds	r3, #80	; 0x50
 80026bc:	4602      	mov	r2, r0
 80026be:	701a      	strb	r2, [r3, #0]
}
 80026c0:	e1f3      	b.n	8002aaa <HCD_HC_IN_IRQHandler+0x81a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	015a      	lsls	r2, r3, #5
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	4413      	add	r3, r2
 80026ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	f040 811a 	bne.w	800290e <HCD_HC_IN_IRQHandler+0x67e>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	015a      	lsls	r2, r3, #5
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	4413      	add	r3, r2
 80026e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	68fa      	ldr	r2, [r7, #12]
 80026ea:	0151      	lsls	r1, r2, #5
 80026ec:	693a      	ldr	r2, [r7, #16]
 80026ee:	440a      	add	r2, r1
 80026f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026f4:	f023 0302 	bic.w	r3, r3, #2
 80026f8:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80026fa:	6879      	ldr	r1, [r7, #4]
 80026fc:	68fa      	ldr	r2, [r7, #12]
 80026fe:	4613      	mov	r3, r2
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	4413      	add	r3, r2
 8002704:	00db      	lsls	r3, r3, #3
 8002706:	440b      	add	r3, r1
 8002708:	335d      	adds	r3, #93	; 0x5d
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	2b01      	cmp	r3, #1
 800270e:	d10a      	bne.n	8002726 <HCD_HC_IN_IRQHandler+0x496>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002710:	6879      	ldr	r1, [r7, #4]
 8002712:	68fa      	ldr	r2, [r7, #12]
 8002714:	4613      	mov	r3, r2
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	4413      	add	r3, r2
 800271a:	00db      	lsls	r3, r3, #3
 800271c:	440b      	add	r3, r1
 800271e:	335c      	adds	r3, #92	; 0x5c
 8002720:	2201      	movs	r2, #1
 8002722:	701a      	strb	r2, [r3, #0]
 8002724:	e0d9      	b.n	80028da <HCD_HC_IN_IRQHandler+0x64a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002726:	6879      	ldr	r1, [r7, #4]
 8002728:	68fa      	ldr	r2, [r7, #12]
 800272a:	4613      	mov	r3, r2
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	4413      	add	r3, r2
 8002730:	00db      	lsls	r3, r3, #3
 8002732:	440b      	add	r3, r1
 8002734:	335d      	adds	r3, #93	; 0x5d
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	2b05      	cmp	r3, #5
 800273a:	d10a      	bne.n	8002752 <HCD_HC_IN_IRQHandler+0x4c2>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800273c:	6879      	ldr	r1, [r7, #4]
 800273e:	68fa      	ldr	r2, [r7, #12]
 8002740:	4613      	mov	r3, r2
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	4413      	add	r3, r2
 8002746:	00db      	lsls	r3, r3, #3
 8002748:	440b      	add	r3, r1
 800274a:	335c      	adds	r3, #92	; 0x5c
 800274c:	2205      	movs	r2, #5
 800274e:	701a      	strb	r2, [r3, #0]
 8002750:	e0c3      	b.n	80028da <HCD_HC_IN_IRQHandler+0x64a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002752:	6879      	ldr	r1, [r7, #4]
 8002754:	68fa      	ldr	r2, [r7, #12]
 8002756:	4613      	mov	r3, r2
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	4413      	add	r3, r2
 800275c:	00db      	lsls	r3, r3, #3
 800275e:	440b      	add	r3, r1
 8002760:	335d      	adds	r3, #93	; 0x5d
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	2b06      	cmp	r3, #6
 8002766:	d00a      	beq.n	800277e <HCD_HC_IN_IRQHandler+0x4ee>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002768:	6879      	ldr	r1, [r7, #4]
 800276a:	68fa      	ldr	r2, [r7, #12]
 800276c:	4613      	mov	r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	4413      	add	r3, r2
 8002772:	00db      	lsls	r3, r3, #3
 8002774:	440b      	add	r3, r1
 8002776:	335d      	adds	r3, #93	; 0x5d
 8002778:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800277a:	2b08      	cmp	r3, #8
 800277c:	d156      	bne.n	800282c <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].ErrCnt++;
 800277e:	6879      	ldr	r1, [r7, #4]
 8002780:	68fa      	ldr	r2, [r7, #12]
 8002782:	4613      	mov	r3, r2
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	4413      	add	r3, r2
 8002788:	00db      	lsls	r3, r3, #3
 800278a:	440b      	add	r3, r1
 800278c:	3358      	adds	r3, #88	; 0x58
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	1c59      	adds	r1, r3, #1
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	4613      	mov	r3, r2
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	4413      	add	r3, r2
 800279c:	00db      	lsls	r3, r3, #3
 800279e:	4403      	add	r3, r0
 80027a0:	3358      	adds	r3, #88	; 0x58
 80027a2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80027a4:	6879      	ldr	r1, [r7, #4]
 80027a6:	68fa      	ldr	r2, [r7, #12]
 80027a8:	4613      	mov	r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	4413      	add	r3, r2
 80027ae:	00db      	lsls	r3, r3, #3
 80027b0:	440b      	add	r3, r1
 80027b2:	3358      	adds	r3, #88	; 0x58
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2b03      	cmp	r3, #3
 80027b8:	d914      	bls.n	80027e4 <HCD_HC_IN_IRQHandler+0x554>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80027ba:	6879      	ldr	r1, [r7, #4]
 80027bc:	68fa      	ldr	r2, [r7, #12]
 80027be:	4613      	mov	r3, r2
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	4413      	add	r3, r2
 80027c4:	00db      	lsls	r3, r3, #3
 80027c6:	440b      	add	r3, r1
 80027c8:	3358      	adds	r3, #88	; 0x58
 80027ca:	2200      	movs	r2, #0
 80027cc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80027ce:	6879      	ldr	r1, [r7, #4]
 80027d0:	68fa      	ldr	r2, [r7, #12]
 80027d2:	4613      	mov	r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	4413      	add	r3, r2
 80027d8:	00db      	lsls	r3, r3, #3
 80027da:	440b      	add	r3, r1
 80027dc:	335c      	adds	r3, #92	; 0x5c
 80027de:	2204      	movs	r2, #4
 80027e0:	701a      	strb	r2, [r3, #0]
 80027e2:	e009      	b.n	80027f8 <HCD_HC_IN_IRQHandler+0x568>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80027e4:	6879      	ldr	r1, [r7, #4]
 80027e6:	68fa      	ldr	r2, [r7, #12]
 80027e8:	4613      	mov	r3, r2
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	4413      	add	r3, r2
 80027ee:	00db      	lsls	r3, r3, #3
 80027f0:	440b      	add	r3, r1
 80027f2:	335c      	adds	r3, #92	; 0x5c
 80027f4:	2202      	movs	r2, #2
 80027f6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	015a      	lsls	r2, r3, #5
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	4413      	add	r3, r2
 8002800:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800280e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002816:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	015a      	lsls	r2, r3, #5
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	4413      	add	r3, r2
 8002820:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002824:	461a      	mov	r2, r3
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	6013      	str	r3, [r2, #0]
 800282a:	e056      	b.n	80028da <HCD_HC_IN_IRQHandler+0x64a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800282c:	6879      	ldr	r1, [r7, #4]
 800282e:	68fa      	ldr	r2, [r7, #12]
 8002830:	4613      	mov	r3, r2
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	4413      	add	r3, r2
 8002836:	00db      	lsls	r3, r3, #3
 8002838:	440b      	add	r3, r1
 800283a:	335d      	adds	r3, #93	; 0x5d
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	2b03      	cmp	r3, #3
 8002840:	d123      	bne.n	800288a <HCD_HC_IN_IRQHandler+0x5fa>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002842:	6879      	ldr	r1, [r7, #4]
 8002844:	68fa      	ldr	r2, [r7, #12]
 8002846:	4613      	mov	r3, r2
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	4413      	add	r3, r2
 800284c:	00db      	lsls	r3, r3, #3
 800284e:	440b      	add	r3, r1
 8002850:	335c      	adds	r3, #92	; 0x5c
 8002852:	2202      	movs	r2, #2
 8002854:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	015a      	lsls	r2, r3, #5
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	4413      	add	r3, r2
 800285e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800286c:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002874:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	015a      	lsls	r2, r3, #5
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	4413      	add	r3, r2
 800287e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002882:	461a      	mov	r2, r3
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	6013      	str	r3, [r2, #0]
 8002888:	e027      	b.n	80028da <HCD_HC_IN_IRQHandler+0x64a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800288a:	6879      	ldr	r1, [r7, #4]
 800288c:	68fa      	ldr	r2, [r7, #12]
 800288e:	4613      	mov	r3, r2
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	4413      	add	r3, r2
 8002894:	00db      	lsls	r3, r3, #3
 8002896:	440b      	add	r3, r1
 8002898:	335d      	adds	r3, #93	; 0x5d
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	2b07      	cmp	r3, #7
 800289e:	d11c      	bne.n	80028da <HCD_HC_IN_IRQHandler+0x64a>
      hhcd->hc[ch_num].ErrCnt++;
 80028a0:	6879      	ldr	r1, [r7, #4]
 80028a2:	68fa      	ldr	r2, [r7, #12]
 80028a4:	4613      	mov	r3, r2
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	4413      	add	r3, r2
 80028aa:	00db      	lsls	r3, r3, #3
 80028ac:	440b      	add	r3, r1
 80028ae:	3358      	adds	r3, #88	; 0x58
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	1c59      	adds	r1, r3, #1
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	68fa      	ldr	r2, [r7, #12]
 80028b8:	4613      	mov	r3, r2
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	4413      	add	r3, r2
 80028be:	00db      	lsls	r3, r3, #3
 80028c0:	4403      	add	r3, r0
 80028c2:	3358      	adds	r3, #88	; 0x58
 80028c4:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80028c6:	6879      	ldr	r1, [r7, #4]
 80028c8:	68fa      	ldr	r2, [r7, #12]
 80028ca:	4613      	mov	r3, r2
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	4413      	add	r3, r2
 80028d0:	00db      	lsls	r3, r3, #3
 80028d2:	440b      	add	r3, r1
 80028d4:	335c      	adds	r3, #92	; 0x5c
 80028d6:	2204      	movs	r2, #4
 80028d8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	015a      	lsls	r2, r3, #5
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	4413      	add	r3, r2
 80028e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028e6:	461a      	mov	r2, r3
 80028e8:	2302      	movs	r3, #2
 80028ea:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	b2d8      	uxtb	r0, r3
 80028f0:	6879      	ldr	r1, [r7, #4]
 80028f2:	68fa      	ldr	r2, [r7, #12]
 80028f4:	4613      	mov	r3, r2
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	4413      	add	r3, r2
 80028fa:	00db      	lsls	r3, r3, #3
 80028fc:	440b      	add	r3, r1
 80028fe:	335c      	adds	r3, #92	; 0x5c
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	461a      	mov	r2, r3
 8002904:	4601      	mov	r1, r0
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f005 fe9e 	bl	8008648 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800290c:	e0cd      	b.n	8002aaa <HCD_HC_IN_IRQHandler+0x81a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	015a      	lsls	r2, r3, #5
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	4413      	add	r3, r2
 8002916:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002920:	2b80      	cmp	r3, #128	; 0x80
 8002922:	d13e      	bne.n	80029a2 <HCD_HC_IN_IRQHandler+0x712>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	015a      	lsls	r2, r3, #5
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	4413      	add	r3, r2
 800292c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	68fa      	ldr	r2, [r7, #12]
 8002934:	0151      	lsls	r1, r2, #5
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	440a      	add	r2, r1
 800293a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800293e:	f043 0302 	orr.w	r3, r3, #2
 8002942:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002944:	6879      	ldr	r1, [r7, #4]
 8002946:	68fa      	ldr	r2, [r7, #12]
 8002948:	4613      	mov	r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	4413      	add	r3, r2
 800294e:	00db      	lsls	r3, r3, #3
 8002950:	440b      	add	r3, r1
 8002952:	3358      	adds	r3, #88	; 0x58
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	1c59      	adds	r1, r3, #1
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	68fa      	ldr	r2, [r7, #12]
 800295c:	4613      	mov	r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	4413      	add	r3, r2
 8002962:	00db      	lsls	r3, r3, #3
 8002964:	4403      	add	r3, r0
 8002966:	3358      	adds	r3, #88	; 0x58
 8002968:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800296a:	6879      	ldr	r1, [r7, #4]
 800296c:	68fa      	ldr	r2, [r7, #12]
 800296e:	4613      	mov	r3, r2
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	4413      	add	r3, r2
 8002974:	00db      	lsls	r3, r3, #3
 8002976:	440b      	add	r3, r1
 8002978:	335d      	adds	r3, #93	; 0x5d
 800297a:	2206      	movs	r2, #6
 800297c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	68fa      	ldr	r2, [r7, #12]
 8002984:	b2d2      	uxtb	r2, r2
 8002986:	4611      	mov	r1, r2
 8002988:	4618      	mov	r0, r3
 800298a:	f004 fb92 	bl	80070b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	015a      	lsls	r2, r3, #5
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	4413      	add	r3, r2
 8002996:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800299a:	461a      	mov	r2, r3
 800299c:	2380      	movs	r3, #128	; 0x80
 800299e:	6093      	str	r3, [r2, #8]
}
 80029a0:	e083      	b.n	8002aaa <HCD_HC_IN_IRQHandler+0x81a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	015a      	lsls	r2, r3, #5
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	4413      	add	r3, r2
 80029aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f003 0310 	and.w	r3, r3, #16
 80029b4:	2b10      	cmp	r3, #16
 80029b6:	d178      	bne.n	8002aaa <HCD_HC_IN_IRQHandler+0x81a>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80029b8:	6879      	ldr	r1, [r7, #4]
 80029ba:	68fa      	ldr	r2, [r7, #12]
 80029bc:	4613      	mov	r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	4413      	add	r3, r2
 80029c2:	00db      	lsls	r3, r3, #3
 80029c4:	440b      	add	r3, r1
 80029c6:	333f      	adds	r3, #63	; 0x3f
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	2b03      	cmp	r3, #3
 80029cc:	d122      	bne.n	8002a14 <HCD_HC_IN_IRQHandler+0x784>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80029ce:	6879      	ldr	r1, [r7, #4]
 80029d0:	68fa      	ldr	r2, [r7, #12]
 80029d2:	4613      	mov	r3, r2
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	4413      	add	r3, r2
 80029d8:	00db      	lsls	r3, r3, #3
 80029da:	440b      	add	r3, r1
 80029dc:	3358      	adds	r3, #88	; 0x58
 80029de:	2200      	movs	r2, #0
 80029e0:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	015a      	lsls	r2, r3, #5
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	4413      	add	r3, r2
 80029ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	68fa      	ldr	r2, [r7, #12]
 80029f2:	0151      	lsls	r1, r2, #5
 80029f4:	693a      	ldr	r2, [r7, #16]
 80029f6:	440a      	add	r2, r1
 80029f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029fc:	f043 0302 	orr.w	r3, r3, #2
 8002a00:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	68fa      	ldr	r2, [r7, #12]
 8002a08:	b2d2      	uxtb	r2, r2
 8002a0a:	4611      	mov	r1, r2
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f004 fb50 	bl	80070b2 <USB_HC_Halt>
 8002a12:	e041      	b.n	8002a98 <HCD_HC_IN_IRQHandler+0x808>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002a14:	6879      	ldr	r1, [r7, #4]
 8002a16:	68fa      	ldr	r2, [r7, #12]
 8002a18:	4613      	mov	r3, r2
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	4413      	add	r3, r2
 8002a1e:	00db      	lsls	r3, r3, #3
 8002a20:	440b      	add	r3, r1
 8002a22:	333f      	adds	r3, #63	; 0x3f
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d00a      	beq.n	8002a40 <HCD_HC_IN_IRQHandler+0x7b0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002a2a:	6879      	ldr	r1, [r7, #4]
 8002a2c:	68fa      	ldr	r2, [r7, #12]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	4413      	add	r3, r2
 8002a34:	00db      	lsls	r3, r3, #3
 8002a36:	440b      	add	r3, r1
 8002a38:	333f      	adds	r3, #63	; 0x3f
 8002a3a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d12b      	bne.n	8002a98 <HCD_HC_IN_IRQHandler+0x808>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002a40:	6879      	ldr	r1, [r7, #4]
 8002a42:	68fa      	ldr	r2, [r7, #12]
 8002a44:	4613      	mov	r3, r2
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	4413      	add	r3, r2
 8002a4a:	00db      	lsls	r3, r3, #3
 8002a4c:	440b      	add	r3, r1
 8002a4e:	3358      	adds	r3, #88	; 0x58
 8002a50:	2200      	movs	r2, #0
 8002a52:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 8002a54:	6879      	ldr	r1, [r7, #4]
 8002a56:	68fa      	ldr	r2, [r7, #12]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	4413      	add	r3, r2
 8002a5e:	00db      	lsls	r3, r3, #3
 8002a60:	440b      	add	r3, r1
 8002a62:	335d      	adds	r3, #93	; 0x5d
 8002a64:	2203      	movs	r2, #3
 8002a66:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	015a      	lsls	r2, r3, #5
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	4413      	add	r3, r2
 8002a70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	68fa      	ldr	r2, [r7, #12]
 8002a78:	0151      	lsls	r1, r2, #5
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	440a      	add	r2, r1
 8002a7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a82:	f043 0302 	orr.w	r3, r3, #2
 8002a86:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	68fa      	ldr	r2, [r7, #12]
 8002a8e:	b2d2      	uxtb	r2, r2
 8002a90:	4611      	mov	r1, r2
 8002a92:	4618      	mov	r0, r3
 8002a94:	f004 fb0d 	bl	80070b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	015a      	lsls	r2, r3, #5
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	4413      	add	r3, r2
 8002aa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	2310      	movs	r3, #16
 8002aa8:	6093      	str	r3, [r2, #8]
}
 8002aaa:	bf00      	nop
 8002aac:	3718      	adds	r7, #24
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b086      	sub	sp, #24
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
 8002aba:	460b      	mov	r3, r1
 8002abc:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002ac8:	78fb      	ldrb	r3, [r7, #3]
 8002aca:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	015a      	lsls	r2, r3, #5
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f003 0304 	and.w	r3, r3, #4
 8002ade:	2b04      	cmp	r3, #4
 8002ae0:	d119      	bne.n	8002b16 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	015a      	lsls	r2, r3, #5
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	4413      	add	r3, r2
 8002aea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aee:	461a      	mov	r2, r3
 8002af0:	2304      	movs	r3, #4
 8002af2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	015a      	lsls	r2, r3, #5
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	4413      	add	r3, r2
 8002afc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	68fa      	ldr	r2, [r7, #12]
 8002b04:	0151      	lsls	r1, r2, #5
 8002b06:	693a      	ldr	r2, [r7, #16]
 8002b08:	440a      	add	r2, r1
 8002b0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b0e:	f043 0302 	orr.w	r3, r3, #2
 8002b12:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002b14:	e31e      	b.n	8003154 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	015a      	lsls	r2, r3, #5
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	4413      	add	r3, r2
 8002b1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	f003 0320 	and.w	r3, r3, #32
 8002b28:	2b20      	cmp	r3, #32
 8002b2a:	d141      	bne.n	8002bb0 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	015a      	lsls	r2, r3, #5
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	4413      	add	r3, r2
 8002b34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b38:	461a      	mov	r2, r3
 8002b3a:	2320      	movs	r3, #32
 8002b3c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002b3e:	6879      	ldr	r1, [r7, #4]
 8002b40:	68fa      	ldr	r2, [r7, #12]
 8002b42:	4613      	mov	r3, r2
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	4413      	add	r3, r2
 8002b48:	00db      	lsls	r3, r3, #3
 8002b4a:	440b      	add	r3, r1
 8002b4c:	333d      	adds	r3, #61	; 0x3d
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	f040 82ff 	bne.w	8003154 <HCD_HC_OUT_IRQHandler+0x6a2>
      hhcd->hc[ch_num].do_ping = 0U;
 8002b56:	6879      	ldr	r1, [r7, #4]
 8002b58:	68fa      	ldr	r2, [r7, #12]
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	4413      	add	r3, r2
 8002b60:	00db      	lsls	r3, r3, #3
 8002b62:	440b      	add	r3, r1
 8002b64:	333d      	adds	r3, #61	; 0x3d
 8002b66:	2200      	movs	r2, #0
 8002b68:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002b6a:	6879      	ldr	r1, [r7, #4]
 8002b6c:	68fa      	ldr	r2, [r7, #12]
 8002b6e:	4613      	mov	r3, r2
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	4413      	add	r3, r2
 8002b74:	00db      	lsls	r3, r3, #3
 8002b76:	440b      	add	r3, r1
 8002b78:	335c      	adds	r3, #92	; 0x5c
 8002b7a:	2202      	movs	r2, #2
 8002b7c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	015a      	lsls	r2, r3, #5
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	4413      	add	r3, r2
 8002b86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	68fa      	ldr	r2, [r7, #12]
 8002b8e:	0151      	lsls	r1, r2, #5
 8002b90:	693a      	ldr	r2, [r7, #16]
 8002b92:	440a      	add	r2, r1
 8002b94:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b98:	f043 0302 	orr.w	r3, r3, #2
 8002b9c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	b2d2      	uxtb	r2, r2
 8002ba6:	4611      	mov	r1, r2
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f004 fa82 	bl	80070b2 <USB_HC_Halt>
}
 8002bae:	e2d1      	b.n	8003154 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	015a      	lsls	r2, r3, #5
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	4413      	add	r3, r2
 8002bb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bc2:	2b40      	cmp	r3, #64	; 0x40
 8002bc4:	d13f      	bne.n	8002c46 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8002bc6:	6879      	ldr	r1, [r7, #4]
 8002bc8:	68fa      	ldr	r2, [r7, #12]
 8002bca:	4613      	mov	r3, r2
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	4413      	add	r3, r2
 8002bd0:	00db      	lsls	r3, r3, #3
 8002bd2:	440b      	add	r3, r1
 8002bd4:	335d      	adds	r3, #93	; 0x5d
 8002bd6:	2204      	movs	r2, #4
 8002bd8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002bda:	6879      	ldr	r1, [r7, #4]
 8002bdc:	68fa      	ldr	r2, [r7, #12]
 8002bde:	4613      	mov	r3, r2
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	4413      	add	r3, r2
 8002be4:	00db      	lsls	r3, r3, #3
 8002be6:	440b      	add	r3, r1
 8002be8:	333d      	adds	r3, #61	; 0x3d
 8002bea:	2201      	movs	r2, #1
 8002bec:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002bee:	6879      	ldr	r1, [r7, #4]
 8002bf0:	68fa      	ldr	r2, [r7, #12]
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	4413      	add	r3, r2
 8002bf8:	00db      	lsls	r3, r3, #3
 8002bfa:	440b      	add	r3, r1
 8002bfc:	3358      	adds	r3, #88	; 0x58
 8002bfe:	2200      	movs	r2, #0
 8002c00:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	015a      	lsls	r2, r3, #5
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	4413      	add	r3, r2
 8002c0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	68fa      	ldr	r2, [r7, #12]
 8002c12:	0151      	lsls	r1, r2, #5
 8002c14:	693a      	ldr	r2, [r7, #16]
 8002c16:	440a      	add	r2, r1
 8002c18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c1c:	f043 0302 	orr.w	r3, r3, #2
 8002c20:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68fa      	ldr	r2, [r7, #12]
 8002c28:	b2d2      	uxtb	r2, r2
 8002c2a:	4611      	mov	r1, r2
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f004 fa40 	bl	80070b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	015a      	lsls	r2, r3, #5
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	4413      	add	r3, r2
 8002c3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c3e:	461a      	mov	r2, r3
 8002c40:	2340      	movs	r3, #64	; 0x40
 8002c42:	6093      	str	r3, [r2, #8]
}
 8002c44:	e286      	b.n	8003154 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	015a      	lsls	r2, r3, #5
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	4413      	add	r3, r2
 8002c4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c5c:	d122      	bne.n	8002ca4 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	015a      	lsls	r2, r3, #5
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	4413      	add	r3, r2
 8002c66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	68fa      	ldr	r2, [r7, #12]
 8002c6e:	0151      	lsls	r1, r2, #5
 8002c70:	693a      	ldr	r2, [r7, #16]
 8002c72:	440a      	add	r2, r1
 8002c74:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c78:	f043 0302 	orr.w	r3, r3, #2
 8002c7c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	b2d2      	uxtb	r2, r2
 8002c86:	4611      	mov	r1, r2
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f004 fa12 	bl	80070b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	015a      	lsls	r2, r3, #5
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	4413      	add	r3, r2
 8002c96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ca0:	6093      	str	r3, [r2, #8]
}
 8002ca2:	e257      	b.n	8003154 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	015a      	lsls	r2, r3, #5
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	4413      	add	r3, r2
 8002cac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f003 0301 	and.w	r3, r3, #1
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d135      	bne.n	8002d26 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002cba:	6879      	ldr	r1, [r7, #4]
 8002cbc:	68fa      	ldr	r2, [r7, #12]
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	4413      	add	r3, r2
 8002cc4:	00db      	lsls	r3, r3, #3
 8002cc6:	440b      	add	r3, r1
 8002cc8:	3358      	adds	r3, #88	; 0x58
 8002cca:	2200      	movs	r2, #0
 8002ccc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	015a      	lsls	r2, r3, #5
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	4413      	add	r3, r2
 8002cd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	68fa      	ldr	r2, [r7, #12]
 8002cde:	0151      	lsls	r1, r2, #5
 8002ce0:	693a      	ldr	r2, [r7, #16]
 8002ce2:	440a      	add	r2, r1
 8002ce4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ce8:	f043 0302 	orr.w	r3, r3, #2
 8002cec:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	68fa      	ldr	r2, [r7, #12]
 8002cf4:	b2d2      	uxtb	r2, r2
 8002cf6:	4611      	mov	r1, r2
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f004 f9da 	bl	80070b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	015a      	lsls	r2, r3, #5
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	4413      	add	r3, r2
 8002d06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002d10:	6879      	ldr	r1, [r7, #4]
 8002d12:	68fa      	ldr	r2, [r7, #12]
 8002d14:	4613      	mov	r3, r2
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	4413      	add	r3, r2
 8002d1a:	00db      	lsls	r3, r3, #3
 8002d1c:	440b      	add	r3, r1
 8002d1e:	335d      	adds	r3, #93	; 0x5d
 8002d20:	2201      	movs	r2, #1
 8002d22:	701a      	strb	r2, [r3, #0]
}
 8002d24:	e216      	b.n	8003154 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	015a      	lsls	r2, r3, #5
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f003 0308 	and.w	r3, r3, #8
 8002d38:	2b08      	cmp	r3, #8
 8002d3a:	d12b      	bne.n	8002d94 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	015a      	lsls	r2, r3, #5
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	4413      	add	r3, r2
 8002d44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d48:	461a      	mov	r2, r3
 8002d4a:	2308      	movs	r3, #8
 8002d4c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	015a      	lsls	r2, r3, #5
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	4413      	add	r3, r2
 8002d56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	68fa      	ldr	r2, [r7, #12]
 8002d5e:	0151      	lsls	r1, r2, #5
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	440a      	add	r2, r1
 8002d64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d68:	f043 0302 	orr.w	r3, r3, #2
 8002d6c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	68fa      	ldr	r2, [r7, #12]
 8002d74:	b2d2      	uxtb	r2, r2
 8002d76:	4611      	mov	r1, r2
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f004 f99a 	bl	80070b2 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002d7e:	6879      	ldr	r1, [r7, #4]
 8002d80:	68fa      	ldr	r2, [r7, #12]
 8002d82:	4613      	mov	r3, r2
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	4413      	add	r3, r2
 8002d88:	00db      	lsls	r3, r3, #3
 8002d8a:	440b      	add	r3, r1
 8002d8c:	335d      	adds	r3, #93	; 0x5d
 8002d8e:	2205      	movs	r2, #5
 8002d90:	701a      	strb	r2, [r3, #0]
}
 8002d92:	e1df      	b.n	8003154 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	015a      	lsls	r2, r3, #5
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	4413      	add	r3, r2
 8002d9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	f003 0310 	and.w	r3, r3, #16
 8002da6:	2b10      	cmp	r3, #16
 8002da8:	d135      	bne.n	8002e16 <HCD_HC_OUT_IRQHandler+0x364>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002daa:	6879      	ldr	r1, [r7, #4]
 8002dac:	68fa      	ldr	r2, [r7, #12]
 8002dae:	4613      	mov	r3, r2
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	4413      	add	r3, r2
 8002db4:	00db      	lsls	r3, r3, #3
 8002db6:	440b      	add	r3, r1
 8002db8:	3358      	adds	r3, #88	; 0x58
 8002dba:	2200      	movs	r2, #0
 8002dbc:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002dbe:	6879      	ldr	r1, [r7, #4]
 8002dc0:	68fa      	ldr	r2, [r7, #12]
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	4413      	add	r3, r2
 8002dc8:	00db      	lsls	r3, r3, #3
 8002dca:	440b      	add	r3, r1
 8002dcc:	335d      	adds	r3, #93	; 0x5d
 8002dce:	2203      	movs	r2, #3
 8002dd0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	015a      	lsls	r2, r3, #5
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	4413      	add	r3, r2
 8002dda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	68fa      	ldr	r2, [r7, #12]
 8002de2:	0151      	lsls	r1, r2, #5
 8002de4:	693a      	ldr	r2, [r7, #16]
 8002de6:	440a      	add	r2, r1
 8002de8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002dec:	f043 0302 	orr.w	r3, r3, #2
 8002df0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	68fa      	ldr	r2, [r7, #12]
 8002df8:	b2d2      	uxtb	r2, r2
 8002dfa:	4611      	mov	r1, r2
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f004 f958 	bl	80070b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	015a      	lsls	r2, r3, #5
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	4413      	add	r3, r2
 8002e0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e0e:	461a      	mov	r2, r3
 8002e10:	2310      	movs	r3, #16
 8002e12:	6093      	str	r3, [r2, #8]
}
 8002e14:	e19e      	b.n	8003154 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	015a      	lsls	r2, r3, #5
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e28:	2b80      	cmp	r3, #128	; 0x80
 8002e2a:	d12b      	bne.n	8002e84 <HCD_HC_OUT_IRQHandler+0x3d2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	015a      	lsls	r2, r3, #5
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	4413      	add	r3, r2
 8002e34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	68fa      	ldr	r2, [r7, #12]
 8002e3c:	0151      	lsls	r1, r2, #5
 8002e3e:	693a      	ldr	r2, [r7, #16]
 8002e40:	440a      	add	r2, r1
 8002e42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e46:	f043 0302 	orr.w	r3, r3, #2
 8002e4a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	68fa      	ldr	r2, [r7, #12]
 8002e52:	b2d2      	uxtb	r2, r2
 8002e54:	4611      	mov	r1, r2
 8002e56:	4618      	mov	r0, r3
 8002e58:	f004 f92b 	bl	80070b2 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002e5c:	6879      	ldr	r1, [r7, #4]
 8002e5e:	68fa      	ldr	r2, [r7, #12]
 8002e60:	4613      	mov	r3, r2
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	4413      	add	r3, r2
 8002e66:	00db      	lsls	r3, r3, #3
 8002e68:	440b      	add	r3, r1
 8002e6a:	335d      	adds	r3, #93	; 0x5d
 8002e6c:	2206      	movs	r2, #6
 8002e6e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	015a      	lsls	r2, r3, #5
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	4413      	add	r3, r2
 8002e78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	2380      	movs	r3, #128	; 0x80
 8002e80:	6093      	str	r3, [r2, #8]
}
 8002e82:	e167      	b.n	8003154 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	015a      	lsls	r2, r3, #5
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e9a:	d135      	bne.n	8002f08 <HCD_HC_OUT_IRQHandler+0x456>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	015a      	lsls	r2, r3, #5
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	0151      	lsls	r1, r2, #5
 8002eae:	693a      	ldr	r2, [r7, #16]
 8002eb0:	440a      	add	r2, r1
 8002eb2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002eb6:	f043 0302 	orr.w	r3, r3, #2
 8002eba:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68fa      	ldr	r2, [r7, #12]
 8002ec2:	b2d2      	uxtb	r2, r2
 8002ec4:	4611      	mov	r1, r2
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f004 f8f3 	bl	80070b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	015a      	lsls	r2, r3, #5
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ed8:	461a      	mov	r2, r3
 8002eda:	2310      	movs	r3, #16
 8002edc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	015a      	lsls	r2, r3, #5
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eea:	461a      	mov	r2, r3
 8002eec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ef0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002ef2:	6879      	ldr	r1, [r7, #4]
 8002ef4:	68fa      	ldr	r2, [r7, #12]
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	4413      	add	r3, r2
 8002efc:	00db      	lsls	r3, r3, #3
 8002efe:	440b      	add	r3, r1
 8002f00:	335d      	adds	r3, #93	; 0x5d
 8002f02:	2208      	movs	r2, #8
 8002f04:	701a      	strb	r2, [r3, #0]
}
 8002f06:	e125      	b.n	8003154 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	015a      	lsls	r2, r3, #5
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	4413      	add	r3, r2
 8002f10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	f040 811a 	bne.w	8003154 <HCD_HC_OUT_IRQHandler+0x6a2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	015a      	lsls	r2, r3, #5
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	4413      	add	r3, r2
 8002f28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	68fa      	ldr	r2, [r7, #12]
 8002f30:	0151      	lsls	r1, r2, #5
 8002f32:	693a      	ldr	r2, [r7, #16]
 8002f34:	440a      	add	r2, r1
 8002f36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f3a:	f023 0302 	bic.w	r3, r3, #2
 8002f3e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002f40:	6879      	ldr	r1, [r7, #4]
 8002f42:	68fa      	ldr	r2, [r7, #12]
 8002f44:	4613      	mov	r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	4413      	add	r3, r2
 8002f4a:	00db      	lsls	r3, r3, #3
 8002f4c:	440b      	add	r3, r1
 8002f4e:	335d      	adds	r3, #93	; 0x5d
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d137      	bne.n	8002fc6 <HCD_HC_OUT_IRQHandler+0x514>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002f56:	6879      	ldr	r1, [r7, #4]
 8002f58:	68fa      	ldr	r2, [r7, #12]
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	4413      	add	r3, r2
 8002f60:	00db      	lsls	r3, r3, #3
 8002f62:	440b      	add	r3, r1
 8002f64:	335c      	adds	r3, #92	; 0x5c
 8002f66:	2201      	movs	r2, #1
 8002f68:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002f6a:	6879      	ldr	r1, [r7, #4]
 8002f6c:	68fa      	ldr	r2, [r7, #12]
 8002f6e:	4613      	mov	r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	4413      	add	r3, r2
 8002f74:	00db      	lsls	r3, r3, #3
 8002f76:	440b      	add	r3, r1
 8002f78:	333f      	adds	r3, #63	; 0x3f
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d00b      	beq.n	8002f98 <HCD_HC_OUT_IRQHandler+0x4e6>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002f80:	6879      	ldr	r1, [r7, #4]
 8002f82:	68fa      	ldr	r2, [r7, #12]
 8002f84:	4613      	mov	r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	4413      	add	r3, r2
 8002f8a:	00db      	lsls	r3, r3, #3
 8002f8c:	440b      	add	r3, r1
 8002f8e:	333f      	adds	r3, #63	; 0x3f
 8002f90:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002f92:	2b03      	cmp	r3, #3
 8002f94:	f040 80c5 	bne.w	8003122 <HCD_HC_OUT_IRQHandler+0x670>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8002f98:	6879      	ldr	r1, [r7, #4]
 8002f9a:	68fa      	ldr	r2, [r7, #12]
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	4413      	add	r3, r2
 8002fa2:	00db      	lsls	r3, r3, #3
 8002fa4:	440b      	add	r3, r1
 8002fa6:	3351      	adds	r3, #81	; 0x51
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	f083 0301 	eor.w	r3, r3, #1
 8002fae:	b2d8      	uxtb	r0, r3
 8002fb0:	6879      	ldr	r1, [r7, #4]
 8002fb2:	68fa      	ldr	r2, [r7, #12]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	4413      	add	r3, r2
 8002fba:	00db      	lsls	r3, r3, #3
 8002fbc:	440b      	add	r3, r1
 8002fbe:	3351      	adds	r3, #81	; 0x51
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	701a      	strb	r2, [r3, #0]
 8002fc4:	e0ad      	b.n	8003122 <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002fc6:	6879      	ldr	r1, [r7, #4]
 8002fc8:	68fa      	ldr	r2, [r7, #12]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	4413      	add	r3, r2
 8002fd0:	00db      	lsls	r3, r3, #3
 8002fd2:	440b      	add	r3, r1
 8002fd4:	335d      	adds	r3, #93	; 0x5d
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	2b03      	cmp	r3, #3
 8002fda:	d10a      	bne.n	8002ff2 <HCD_HC_OUT_IRQHandler+0x540>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002fdc:	6879      	ldr	r1, [r7, #4]
 8002fde:	68fa      	ldr	r2, [r7, #12]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	4413      	add	r3, r2
 8002fe6:	00db      	lsls	r3, r3, #3
 8002fe8:	440b      	add	r3, r1
 8002fea:	335c      	adds	r3, #92	; 0x5c
 8002fec:	2202      	movs	r2, #2
 8002fee:	701a      	strb	r2, [r3, #0]
 8002ff0:	e097      	b.n	8003122 <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002ff2:	6879      	ldr	r1, [r7, #4]
 8002ff4:	68fa      	ldr	r2, [r7, #12]
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	4413      	add	r3, r2
 8002ffc:	00db      	lsls	r3, r3, #3
 8002ffe:	440b      	add	r3, r1
 8003000:	335d      	adds	r3, #93	; 0x5d
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	2b04      	cmp	r3, #4
 8003006:	d10a      	bne.n	800301e <HCD_HC_OUT_IRQHandler+0x56c>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003008:	6879      	ldr	r1, [r7, #4]
 800300a:	68fa      	ldr	r2, [r7, #12]
 800300c:	4613      	mov	r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	4413      	add	r3, r2
 8003012:	00db      	lsls	r3, r3, #3
 8003014:	440b      	add	r3, r1
 8003016:	335c      	adds	r3, #92	; 0x5c
 8003018:	2202      	movs	r2, #2
 800301a:	701a      	strb	r2, [r3, #0]
 800301c:	e081      	b.n	8003122 <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800301e:	6879      	ldr	r1, [r7, #4]
 8003020:	68fa      	ldr	r2, [r7, #12]
 8003022:	4613      	mov	r3, r2
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	4413      	add	r3, r2
 8003028:	00db      	lsls	r3, r3, #3
 800302a:	440b      	add	r3, r1
 800302c:	335d      	adds	r3, #93	; 0x5d
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	2b05      	cmp	r3, #5
 8003032:	d10a      	bne.n	800304a <HCD_HC_OUT_IRQHandler+0x598>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003034:	6879      	ldr	r1, [r7, #4]
 8003036:	68fa      	ldr	r2, [r7, #12]
 8003038:	4613      	mov	r3, r2
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	4413      	add	r3, r2
 800303e:	00db      	lsls	r3, r3, #3
 8003040:	440b      	add	r3, r1
 8003042:	335c      	adds	r3, #92	; 0x5c
 8003044:	2205      	movs	r2, #5
 8003046:	701a      	strb	r2, [r3, #0]
 8003048:	e06b      	b.n	8003122 <HCD_HC_OUT_IRQHandler+0x670>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800304a:	6879      	ldr	r1, [r7, #4]
 800304c:	68fa      	ldr	r2, [r7, #12]
 800304e:	4613      	mov	r3, r2
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	4413      	add	r3, r2
 8003054:	00db      	lsls	r3, r3, #3
 8003056:	440b      	add	r3, r1
 8003058:	335d      	adds	r3, #93	; 0x5d
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	2b06      	cmp	r3, #6
 800305e:	d00a      	beq.n	8003076 <HCD_HC_OUT_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003060:	6879      	ldr	r1, [r7, #4]
 8003062:	68fa      	ldr	r2, [r7, #12]
 8003064:	4613      	mov	r3, r2
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	4413      	add	r3, r2
 800306a:	00db      	lsls	r3, r3, #3
 800306c:	440b      	add	r3, r1
 800306e:	335d      	adds	r3, #93	; 0x5d
 8003070:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003072:	2b08      	cmp	r3, #8
 8003074:	d155      	bne.n	8003122 <HCD_HC_OUT_IRQHandler+0x670>
      hhcd->hc[ch_num].ErrCnt++;
 8003076:	6879      	ldr	r1, [r7, #4]
 8003078:	68fa      	ldr	r2, [r7, #12]
 800307a:	4613      	mov	r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	4413      	add	r3, r2
 8003080:	00db      	lsls	r3, r3, #3
 8003082:	440b      	add	r3, r1
 8003084:	3358      	adds	r3, #88	; 0x58
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	1c59      	adds	r1, r3, #1
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	68fa      	ldr	r2, [r7, #12]
 800308e:	4613      	mov	r3, r2
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	4413      	add	r3, r2
 8003094:	00db      	lsls	r3, r3, #3
 8003096:	4403      	add	r3, r0
 8003098:	3358      	adds	r3, #88	; 0x58
 800309a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800309c:	6879      	ldr	r1, [r7, #4]
 800309e:	68fa      	ldr	r2, [r7, #12]
 80030a0:	4613      	mov	r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	4413      	add	r3, r2
 80030a6:	00db      	lsls	r3, r3, #3
 80030a8:	440b      	add	r3, r1
 80030aa:	3358      	adds	r3, #88	; 0x58
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2b03      	cmp	r3, #3
 80030b0:	d914      	bls.n	80030dc <HCD_HC_OUT_IRQHandler+0x62a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80030b2:	6879      	ldr	r1, [r7, #4]
 80030b4:	68fa      	ldr	r2, [r7, #12]
 80030b6:	4613      	mov	r3, r2
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	4413      	add	r3, r2
 80030bc:	00db      	lsls	r3, r3, #3
 80030be:	440b      	add	r3, r1
 80030c0:	3358      	adds	r3, #88	; 0x58
 80030c2:	2200      	movs	r2, #0
 80030c4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80030c6:	6879      	ldr	r1, [r7, #4]
 80030c8:	68fa      	ldr	r2, [r7, #12]
 80030ca:	4613      	mov	r3, r2
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	4413      	add	r3, r2
 80030d0:	00db      	lsls	r3, r3, #3
 80030d2:	440b      	add	r3, r1
 80030d4:	335c      	adds	r3, #92	; 0x5c
 80030d6:	2204      	movs	r2, #4
 80030d8:	701a      	strb	r2, [r3, #0]
 80030da:	e009      	b.n	80030f0 <HCD_HC_OUT_IRQHandler+0x63e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80030dc:	6879      	ldr	r1, [r7, #4]
 80030de:	68fa      	ldr	r2, [r7, #12]
 80030e0:	4613      	mov	r3, r2
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	4413      	add	r3, r2
 80030e6:	00db      	lsls	r3, r3, #3
 80030e8:	440b      	add	r3, r1
 80030ea:	335c      	adds	r3, #92	; 0x5c
 80030ec:	2202      	movs	r2, #2
 80030ee:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	015a      	lsls	r2, r3, #5
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	4413      	add	r3, r2
 80030f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003106:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800310e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	015a      	lsls	r2, r3, #5
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	4413      	add	r3, r2
 8003118:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800311c:	461a      	mov	r2, r3
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	015a      	lsls	r2, r3, #5
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	4413      	add	r3, r2
 800312a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800312e:	461a      	mov	r2, r3
 8003130:	2302      	movs	r3, #2
 8003132:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	b2d8      	uxtb	r0, r3
 8003138:	6879      	ldr	r1, [r7, #4]
 800313a:	68fa      	ldr	r2, [r7, #12]
 800313c:	4613      	mov	r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	4413      	add	r3, r2
 8003142:	00db      	lsls	r3, r3, #3
 8003144:	440b      	add	r3, r1
 8003146:	335c      	adds	r3, #92	; 0x5c
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	461a      	mov	r2, r3
 800314c:	4601      	mov	r1, r0
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f005 fa7a 	bl	8008648 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003154:	bf00      	nop
 8003156:	3718      	adds	r7, #24
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}

0800315c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b08a      	sub	sp, #40	; 0x28
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800316a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316c:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	6a1b      	ldr	r3, [r3, #32]
 8003174:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	f003 030f 	and.w	r3, r3, #15
 800317c:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	0c5b      	lsrs	r3, r3, #17
 8003182:	f003 030f 	and.w	r3, r3, #15
 8003186:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	091b      	lsrs	r3, r3, #4
 800318c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003190:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	2b02      	cmp	r3, #2
 8003196:	d003      	beq.n	80031a0 <HCD_RXQLVL_IRQHandler+0x44>
 8003198:	2b05      	cmp	r3, #5
 800319a:	f000 8082 	beq.w	80032a2 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800319e:	e083      	b.n	80032a8 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d07f      	beq.n	80032a6 <HCD_RXQLVL_IRQHandler+0x14a>
 80031a6:	6879      	ldr	r1, [r7, #4]
 80031a8:	69ba      	ldr	r2, [r7, #24]
 80031aa:	4613      	mov	r3, r2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	4413      	add	r3, r2
 80031b0:	00db      	lsls	r3, r3, #3
 80031b2:	440b      	add	r3, r1
 80031b4:	3344      	adds	r3, #68	; 0x44
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d074      	beq.n	80032a6 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6818      	ldr	r0, [r3, #0]
 80031c0:	6879      	ldr	r1, [r7, #4]
 80031c2:	69ba      	ldr	r2, [r7, #24]
 80031c4:	4613      	mov	r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	4413      	add	r3, r2
 80031ca:	00db      	lsls	r3, r3, #3
 80031cc:	440b      	add	r3, r1
 80031ce:	3344      	adds	r3, #68	; 0x44
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	693a      	ldr	r2, [r7, #16]
 80031d4:	b292      	uxth	r2, r2
 80031d6:	4619      	mov	r1, r3
 80031d8:	f003 fbe7 	bl	80069aa <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80031dc:	6879      	ldr	r1, [r7, #4]
 80031de:	69ba      	ldr	r2, [r7, #24]
 80031e0:	4613      	mov	r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	4413      	add	r3, r2
 80031e6:	00db      	lsls	r3, r3, #3
 80031e8:	440b      	add	r3, r1
 80031ea:	3344      	adds	r3, #68	; 0x44
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	18d1      	adds	r1, r2, r3
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	69ba      	ldr	r2, [r7, #24]
 80031f6:	4613      	mov	r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	4413      	add	r3, r2
 80031fc:	00db      	lsls	r3, r3, #3
 80031fe:	4403      	add	r3, r0
 8003200:	3344      	adds	r3, #68	; 0x44
 8003202:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8003204:	6879      	ldr	r1, [r7, #4]
 8003206:	69ba      	ldr	r2, [r7, #24]
 8003208:	4613      	mov	r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	4413      	add	r3, r2
 800320e:	00db      	lsls	r3, r3, #3
 8003210:	440b      	add	r3, r1
 8003212:	334c      	adds	r3, #76	; 0x4c
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	18d1      	adds	r1, r2, r3
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	69ba      	ldr	r2, [r7, #24]
 800321e:	4613      	mov	r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	4413      	add	r3, r2
 8003224:	00db      	lsls	r3, r3, #3
 8003226:	4403      	add	r3, r0
 8003228:	334c      	adds	r3, #76	; 0x4c
 800322a:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	015a      	lsls	r2, r3, #5
 8003230:	6a3b      	ldr	r3, [r7, #32]
 8003232:	4413      	add	r3, r2
 8003234:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003238:	691a      	ldr	r2, [r3, #16]
 800323a:	4b1d      	ldr	r3, [pc, #116]	; (80032b0 <HCD_RXQLVL_IRQHandler+0x154>)
 800323c:	4013      	ands	r3, r2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d031      	beq.n	80032a6 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	015a      	lsls	r2, r3, #5
 8003246:	6a3b      	ldr	r3, [r7, #32]
 8003248:	4413      	add	r3, r2
 800324a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003258:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003260:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	015a      	lsls	r2, r3, #5
 8003266:	6a3b      	ldr	r3, [r7, #32]
 8003268:	4413      	add	r3, r2
 800326a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800326e:	461a      	mov	r2, r3
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8003274:	6879      	ldr	r1, [r7, #4]
 8003276:	69ba      	ldr	r2, [r7, #24]
 8003278:	4613      	mov	r3, r2
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	4413      	add	r3, r2
 800327e:	00db      	lsls	r3, r3, #3
 8003280:	440b      	add	r3, r1
 8003282:	3350      	adds	r3, #80	; 0x50
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	f083 0301 	eor.w	r3, r3, #1
 800328a:	b2d8      	uxtb	r0, r3
 800328c:	6879      	ldr	r1, [r7, #4]
 800328e:	69ba      	ldr	r2, [r7, #24]
 8003290:	4613      	mov	r3, r2
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	4413      	add	r3, r2
 8003296:	00db      	lsls	r3, r3, #3
 8003298:	440b      	add	r3, r1
 800329a:	3350      	adds	r3, #80	; 0x50
 800329c:	4602      	mov	r2, r0
 800329e:	701a      	strb	r2, [r3, #0]
      break;
 80032a0:	e001      	b.n	80032a6 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 80032a2:	bf00      	nop
 80032a4:	e000      	b.n	80032a8 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80032a6:	bf00      	nop
  }
}
 80032a8:	bf00      	nop
 80032aa:	3728      	adds	r7, #40	; 0x28
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	1ff80000 	.word	0x1ff80000

080032b4 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b086      	sub	sp, #24
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80032e0:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f003 0302 	and.w	r3, r3, #2
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d10b      	bne.n	8003304 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d102      	bne.n	80032fc <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f005 f98a 	bl	8008610 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	f043 0302 	orr.w	r3, r3, #2
 8003302:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f003 0308 	and.w	r3, r3, #8
 800330a:	2b08      	cmp	r3, #8
 800330c:	d132      	bne.n	8003374 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	f043 0308 	orr.w	r3, r3, #8
 8003314:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f003 0304 	and.w	r3, r3, #4
 800331c:	2b04      	cmp	r3, #4
 800331e:	d126      	bne.n	800336e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	2b02      	cmp	r3, #2
 8003326:	d113      	bne.n	8003350 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800332e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003332:	d106      	bne.n	8003342 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2102      	movs	r1, #2
 800333a:	4618      	mov	r0, r3
 800333c:	f003 fc32 	bl	8006ba4 <USB_InitFSLSPClkSel>
 8003340:	e011      	b.n	8003366 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2101      	movs	r1, #1
 8003348:	4618      	mov	r0, r3
 800334a:	f003 fc2b 	bl	8006ba4 <USB_InitFSLSPClkSel>
 800334e:	e00a      	b.n	8003366 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	2b01      	cmp	r3, #1
 8003356:	d106      	bne.n	8003366 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800335e:	461a      	mov	r2, r3
 8003360:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003364:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f005 f97c 	bl	8008664 <HAL_HCD_PortEnabled_Callback>
 800336c:	e002      	b.n	8003374 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f005 f986 	bl	8008680 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f003 0320 	and.w	r3, r3, #32
 800337a:	2b20      	cmp	r3, #32
 800337c:	d103      	bne.n	8003386 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	f043 0320 	orr.w	r3, r3, #32
 8003384:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800338c:	461a      	mov	r2, r3
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	6013      	str	r3, [r2, #0]
}
 8003392:	bf00      	nop
 8003394:	3718      	adds	r7, #24
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800339a:	b580      	push	{r7, lr}
 800339c:	b082      	sub	sp, #8
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d101      	bne.n	80033ac <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e081      	b.n	80034b0 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d106      	bne.n	80033c6 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f7fd fcab 	bl	8000d1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2224      	movs	r2, #36	; 0x24
 80033ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f022 0201 	bic.w	r2, r2, #1
 80033dc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685a      	ldr	r2, [r3, #4]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80033ea:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	689a      	ldr	r2, [r3, #8]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033fa:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	2b01      	cmp	r3, #1
 8003402:	d107      	bne.n	8003414 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	689a      	ldr	r2, [r3, #8]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003410:	609a      	str	r2, [r3, #8]
 8003412:	e006      	b.n	8003422 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	689a      	ldr	r2, [r3, #8]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003420:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	2b02      	cmp	r3, #2
 8003428:	d104      	bne.n	8003434 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003432:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	6812      	ldr	r2, [r2, #0]
 800343e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003442:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003446:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	68da      	ldr	r2, [r3, #12]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003456:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	691a      	ldr	r2, [r3, #16]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	695b      	ldr	r3, [r3, #20]
 8003460:	ea42 0103 	orr.w	r1, r2, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	699b      	ldr	r3, [r3, #24]
 8003468:	021a      	lsls	r2, r3, #8
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	430a      	orrs	r2, r1
 8003470:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	69d9      	ldr	r1, [r3, #28]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a1a      	ldr	r2, [r3, #32]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	430a      	orrs	r2, r1
 8003480:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f042 0201 	orr.w	r2, r2, #1
 8003490:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2220      	movs	r2, #32
 800349c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80034ae:	2300      	movs	r3, #0
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3708      	adds	r7, #8
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b20      	cmp	r3, #32
 80034cc:	d138      	bne.n	8003540 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d101      	bne.n	80034dc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80034d8:	2302      	movs	r3, #2
 80034da:	e032      	b.n	8003542 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2224      	movs	r2, #36	; 0x24
 80034e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f022 0201 	bic.w	r2, r2, #1
 80034fa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800350a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	6819      	ldr	r1, [r3, #0]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	683a      	ldr	r2, [r7, #0]
 8003518:	430a      	orrs	r2, r1
 800351a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f042 0201 	orr.w	r2, r2, #1
 800352a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2220      	movs	r2, #32
 8003530:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800353c:	2300      	movs	r3, #0
 800353e:	e000      	b.n	8003542 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003540:	2302      	movs	r3, #2
  }
}
 8003542:	4618      	mov	r0, r3
 8003544:	370c      	adds	r7, #12
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr

0800354e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800354e:	b480      	push	{r7}
 8003550:	b085      	sub	sp, #20
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
 8003556:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800355e:	b2db      	uxtb	r3, r3
 8003560:	2b20      	cmp	r3, #32
 8003562:	d139      	bne.n	80035d8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800356a:	2b01      	cmp	r3, #1
 800356c:	d101      	bne.n	8003572 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800356e:	2302      	movs	r3, #2
 8003570:	e033      	b.n	80035da <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2201      	movs	r2, #1
 8003576:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2224      	movs	r2, #36	; 0x24
 800357e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f022 0201 	bic.w	r2, r2, #1
 8003590:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80035a0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	021b      	lsls	r3, r3, #8
 80035a6:	68fa      	ldr	r2, [r7, #12]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68fa      	ldr	r2, [r7, #12]
 80035b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f042 0201 	orr.w	r2, r2, #1
 80035c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2220      	movs	r2, #32
 80035c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80035d4:	2300      	movs	r3, #0
 80035d6:	e000      	b.n	80035da <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80035d8:	2302      	movs	r3, #2
  }
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3714      	adds	r7, #20
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr
	...

080035e8 <HAL_LCD_Init>:
  * @note   This function can be used only when the LCD is disabled.
  * @param hlcd LCD handle
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Init(LCD_HandleTypeDef *hlcd)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b086      	sub	sp, #24
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t counter;
  HAL_StatusTypeDef status;

  /* Check the LCD handle allocation */
  if (hlcd == NULL)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d101      	bne.n	80035fa <HAL_LCD_Init+0x12>
  {
    return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e0af      	b.n	800375a <HAL_LCD_Init+0x172>
  assert_param(IS_LCD_CONTRAST(hlcd->Init.Contrast));
  assert_param(IS_LCD_BLINK_FREQUENCY(hlcd->Init.BlinkFrequency));
  assert_param(IS_LCD_BLINK_MODE(hlcd->Init.BlinkMode));
  assert_param(IS_LCD_MUX_SEGMENT(hlcd->Init.MuxSegment));

  if (hlcd->State == HAL_LCD_STATE_RESET)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003600:	b2db      	uxtb	r3, r3
 8003602:	2b00      	cmp	r3, #0
 8003604:	d106      	bne.n	8003614 <HAL_LCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hlcd->Lock = HAL_UNLOCKED;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize the low level hardware (MSP) */
    HAL_LCD_MspInit(hlcd);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f7fd fbf8 	bl	8000e04 <HAL_LCD_MspInit>
  }

  hlcd->State = HAL_LCD_STATE_BUSY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2202      	movs	r2, #2
 8003618:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable the peripheral */
  __HAL_LCD_DISABLE(hlcd);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f022 0201 	bic.w	r2, r2, #1
 800362a:	601a      	str	r2, [r3, #0]

  /* Clear the LCD_RAM registers and enable the display request by setting the UDR bit
     in the LCD_SR register */
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 800362c:	2300      	movs	r3, #0
 800362e:	617b      	str	r3, [r7, #20]
 8003630:	e00a      	b.n	8003648 <HAL_LCD_Init+0x60>
  {
    hlcd->Instance->RAM[counter] = 0;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	3304      	adds	r3, #4
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	4413      	add	r3, r2
 800363e:	2200      	movs	r2, #0
 8003640:	605a      	str	r2, [r3, #4]
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	3301      	adds	r3, #1
 8003646:	617b      	str	r3, [r7, #20]
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	2b0f      	cmp	r3, #15
 800364c:	d9f1      	bls.n	8003632 <HAL_LCD_Init+0x4a>
  }
  /* Enable the display request */
  hlcd->Instance->SR |= LCD_SR_UDR;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	689a      	ldr	r2, [r3, #8]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f042 0204 	orr.w	r2, r2, #4
 800365c:	609a      	str	r2, [r3, #8]
     Set BLINKF[2:0] bits according to hlcd->Init.BlinkFrequency value
     Set DEAD[2:0] bits according to hlcd->Init.DeadTime value
     Set PON[2:0] bits according to hlcd->Init.PulseOnDuration value
     Set CC[2:0] bits according to hlcd->Init.Contrast value
     Set HD bit according to hlcd->Init.HighDrive value */
  MODIFY_REG(hlcd->Instance->FCR, \
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	685a      	ldr	r2, [r3, #4]
 8003664:	4b3f      	ldr	r3, [pc, #252]	; (8003764 <HAL_LCD_Init+0x17c>)
 8003666:	4013      	ands	r3, r2
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	6851      	ldr	r1, [r2, #4]
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	6892      	ldr	r2, [r2, #8]
 8003670:	4311      	orrs	r1, r2
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003676:	4311      	orrs	r1, r2
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800367c:	4311      	orrs	r1, r2
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	69d2      	ldr	r2, [r2, #28]
 8003682:	4311      	orrs	r1, r2
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	6a12      	ldr	r2, [r2, #32]
 8003688:	4311      	orrs	r1, r2
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	6992      	ldr	r2, [r2, #24]
 800368e:	4311      	orrs	r1, r2
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003694:	4311      	orrs	r1, r2
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	6812      	ldr	r2, [r2, #0]
 800369a:	430b      	orrs	r3, r1
 800369c:	6053      	str	r3, [r2, #4]
              hlcd->Init.DeadTime | hlcd->Init.PulseOnDuration | hlcd->Init.Contrast | hlcd->Init.HighDrive));

  /* Wait until LCD Frame Control Register Synchronization flag (FCRSF) is set in the LCD_SR register
     This bit is set by hardware each time the LCD_FCR register is updated in the LCDCLK
     domain. It is cleared by hardware when writing to the LCD_FCR register.*/
  status = LCD_WaitForSynchro(hlcd);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f000 f862 	bl	8003768 <LCD_WaitForSynchro>
 80036a4:	4603      	mov	r3, r0
 80036a6:	74fb      	strb	r3, [r7, #19]
  if (status != HAL_OK)
 80036a8:	7cfb      	ldrb	r3, [r7, #19]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d001      	beq.n	80036b2 <HAL_LCD_Init+0xca>
  {
    return status;
 80036ae:	7cfb      	ldrb	r3, [r7, #19]
 80036b0:	e053      	b.n	800375a <HAL_LCD_Init+0x172>
  /* Configure the LCD Duty, Bias, Voltage Source, Dead Time, Pulse On Duration and Contrast:
     Set DUTY[2:0] bits according to hlcd->Init.Duty value
     Set BIAS[1:0] bits according to hlcd->Init.Bias value
     Set VSEL bit according to hlcd->Init.VoltageSource value
     Set MUX_SEG bit according to hlcd->Init.MuxSegment value */
  MODIFY_REG(hlcd->Instance->CR, \
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f023 01fe 	bic.w	r1, r3, #254	; 0xfe
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	68da      	ldr	r2, [r3, #12]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	691b      	ldr	r3, [r3, #16]
 80036c4:	431a      	orrs	r2, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	695b      	ldr	r3, [r3, #20]
 80036ca:	431a      	orrs	r2, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d0:	431a      	orrs	r2, r3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	430a      	orrs	r2, r1
 80036d8:	601a      	str	r2, [r3, #0]
             (LCD_CR_DUTY | LCD_CR_BIAS | LCD_CR_VSEL | LCD_CR_MUX_SEG), \
             (hlcd->Init.Duty | hlcd->Init.Bias | hlcd->Init.VoltageSource | hlcd->Init.MuxSegment));

  /* Enable the peripheral */
  __HAL_LCD_ENABLE(hlcd);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f042 0201 	orr.w	r2, r2, #1
 80036e8:	601a      	str	r2, [r3, #0]

  /* Get timeout */
  tickstart = HAL_GetTick();
 80036ea:	f7fd feaf 	bl	800144c <HAL_GetTick>
 80036ee:	60f8      	str	r0, [r7, #12]

  /* Wait Until the LCD is enabled */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 80036f0:	e00c      	b.n	800370c <HAL_LCD_Init+0x124>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 80036f2:	f7fd feab 	bl	800144c <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003700:	d904      	bls.n	800370c <HAL_LCD_Init+0x124>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_ENS;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2208      	movs	r2, #8
 8003706:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e026      	b.n	800375a <HAL_LCD_Init+0x172>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	f003 0301 	and.w	r3, r3, #1
 8003716:	2b01      	cmp	r3, #1
 8003718:	d1eb      	bne.n	80036f2 <HAL_LCD_Init+0x10a>
    }
  }

  /* Get timeout */
  tickstart = HAL_GetTick();
 800371a:	f7fd fe97 	bl	800144c <HAL_GetTick>
 800371e:	60f8      	str	r0, [r7, #12]

  /*!< Wait Until the LCD Booster is ready */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 8003720:	e00c      	b.n	800373c <HAL_LCD_Init+0x154>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8003722:	f7fd fe93 	bl	800144c <HAL_GetTick>
 8003726:	4602      	mov	r2, r0
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003730:	d904      	bls.n	800373c <HAL_LCD_Init+0x154>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_RDY;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2210      	movs	r2, #16
 8003736:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	e00e      	b.n	800375a <HAL_LCD_Init+0x172>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f003 0310 	and.w	r3, r3, #16
 8003746:	2b10      	cmp	r3, #16
 8003748:	d1eb      	bne.n	8003722 <HAL_LCD_Init+0x13a>
    }
  }

  /* Initialize the LCD state */
  hlcd->ErrorCode = HAL_LCD_ERROR_NONE;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	639a      	str	r2, [r3, #56]	; 0x38
  hlcd->State = HAL_LCD_STATE_READY;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return status;
 8003758:	7cfb      	ldrb	r3, [r7, #19]
}
 800375a:	4618      	mov	r0, r3
 800375c:	3718      	adds	r7, #24
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	fc00000e 	.word	0xfc00000e

08003768 <LCD_WaitForSynchro>:
  * @brief  Wait until the LCD FCR register is synchronized in the LCDCLK domain.
  *   This function must be called after any write operation to LCD_FCR register.
  * @retval None
  */
HAL_StatusTypeDef LCD_WaitForSynchro(LCD_HandleTypeDef *hlcd)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Get timeout */
  tickstart = HAL_GetTick();
 8003770:	f7fd fe6c 	bl	800144c <HAL_GetTick>
 8003774:	60f8      	str	r0, [r7, #12]

  /* Loop until FCRSF flag is set */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 8003776:	e00c      	b.n	8003792 <LCD_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8003778:	f7fd fe68 	bl	800144c <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003786:	d904      	bls.n	8003792 <LCD_WaitForSynchro+0x2a>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_FCRSF;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e007      	b.n	80037a2 <LCD_WaitForSynchro+0x3a>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	f003 0320 	and.w	r3, r3, #32
 800379c:	2b20      	cmp	r3, #32
 800379e:	d1eb      	bne.n	8003778 <LCD_WaitForSynchro+0x10>
    }
  }

  return HAL_OK;
 80037a0:	2300      	movs	r3, #0
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3710      	adds	r7, #16
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
	...

080037ac <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80037ac:	b480      	push	{r7}
 80037ae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037b0:	4b05      	ldr	r3, [pc, #20]	; (80037c8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a04      	ldr	r2, [pc, #16]	; (80037c8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80037b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037ba:	6013      	str	r3, [r2, #0]
}
 80037bc:	bf00      	nop
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop
 80037c8:	40007000 	.word	0x40007000

080037cc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80037cc:	b480      	push	{r7}
 80037ce:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80037d0:	4b04      	ldr	r3, [pc, #16]	; (80037e4 <HAL_PWREx_GetVoltageRange+0x18>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80037d8:	4618      	mov	r0, r3
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
 80037e2:	bf00      	nop
 80037e4:	40007000 	.word	0x40007000

080037e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b085      	sub	sp, #20
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037f6:	d130      	bne.n	800385a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80037f8:	4b23      	ldr	r3, [pc, #140]	; (8003888 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003800:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003804:	d038      	beq.n	8003878 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003806:	4b20      	ldr	r3, [pc, #128]	; (8003888 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800380e:	4a1e      	ldr	r2, [pc, #120]	; (8003888 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003810:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003814:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003816:	4b1d      	ldr	r3, [pc, #116]	; (800388c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	2232      	movs	r2, #50	; 0x32
 800381c:	fb02 f303 	mul.w	r3, r2, r3
 8003820:	4a1b      	ldr	r2, [pc, #108]	; (8003890 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003822:	fba2 2303 	umull	r2, r3, r2, r3
 8003826:	0c9b      	lsrs	r3, r3, #18
 8003828:	3301      	adds	r3, #1
 800382a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800382c:	e002      	b.n	8003834 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	3b01      	subs	r3, #1
 8003832:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003834:	4b14      	ldr	r3, [pc, #80]	; (8003888 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003836:	695b      	ldr	r3, [r3, #20]
 8003838:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800383c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003840:	d102      	bne.n	8003848 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d1f2      	bne.n	800382e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003848:	4b0f      	ldr	r3, [pc, #60]	; (8003888 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800384a:	695b      	ldr	r3, [r3, #20]
 800384c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003850:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003854:	d110      	bne.n	8003878 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e00f      	b.n	800387a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800385a:	4b0b      	ldr	r3, [pc, #44]	; (8003888 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003862:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003866:	d007      	beq.n	8003878 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003868:	4b07      	ldr	r3, [pc, #28]	; (8003888 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003870:	4a05      	ldr	r2, [pc, #20]	; (8003888 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003872:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003876:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003878:	2300      	movs	r3, #0
}
 800387a:	4618      	mov	r0, r3
 800387c:	3714      	adds	r7, #20
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr
 8003886:	bf00      	nop
 8003888:	40007000 	.word	0x40007000
 800388c:	20000000 	.word	0x20000000
 8003890:	431bde83 	.word	0x431bde83

08003894 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003894:	b480      	push	{r7}
 8003896:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003898:	4b05      	ldr	r3, [pc, #20]	; (80038b0 <HAL_PWREx_EnableVddUSB+0x1c>)
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	4a04      	ldr	r2, [pc, #16]	; (80038b0 <HAL_PWREx_EnableVddUSB+0x1c>)
 800389e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038a2:	6053      	str	r3, [r2, #4]
}
 80038a4:	bf00      	nop
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop
 80038b0:	40007000 	.word	0x40007000

080038b4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b086      	sub	sp, #24
 80038b8:	af02      	add	r7, sp, #8
 80038ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80038bc:	f7fd fdc6 	bl	800144c <HAL_GetTick>
 80038c0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d101      	bne.n	80038cc <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e063      	b.n	8003994 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d10b      	bne.n	80038f0 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f7fd fb31 	bl	8000f48 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80038e6:	f241 3188 	movw	r1, #5000	; 0x1388
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 f858 	bl	80039a0 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	3b01      	subs	r3, #1
 8003900:	021a      	lsls	r2, r3, #8
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	430a      	orrs	r2, r1
 8003908:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390e:	9300      	str	r3, [sp, #0]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2200      	movs	r2, #0
 8003914:	2120      	movs	r1, #32
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 f850 	bl	80039bc <QSPI_WaitFlagStateUntilTimeout>
 800391c:	4603      	mov	r3, r0
 800391e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8003920:	7afb      	ldrb	r3, [r7, #11]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d131      	bne.n	800398a <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003930:	f023 0310 	bic.w	r3, r3, #16
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	6852      	ldr	r2, [r2, #4]
 8003938:	0611      	lsls	r1, r2, #24
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	68d2      	ldr	r2, [r2, #12]
 800393e:	4311      	orrs	r1, r2
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	6812      	ldr	r2, [r2, #0]
 8003944:	430b      	orrs	r3, r1
 8003946:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	685a      	ldr	r2, [r3, #4]
 800394e:	4b13      	ldr	r3, [pc, #76]	; (800399c <HAL_QSPI_Init+0xe8>)
 8003950:	4013      	ands	r3, r2
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	6912      	ldr	r2, [r2, #16]
 8003956:	0411      	lsls	r1, r2, #16
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	6952      	ldr	r2, [r2, #20]
 800395c:	4311      	orrs	r1, r2
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	6992      	ldr	r2, [r2, #24]
 8003962:	4311      	orrs	r1, r2
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	6812      	ldr	r2, [r2, #0]
 8003968:	430b      	orrs	r3, r1
 800396a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f042 0201 	orr.w	r2, r2, #1
 800397a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2201      	movs	r2, #1
 8003986:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8003992:	7afb      	ldrb	r3, [r7, #11]
}
 8003994:	4618      	mov	r0, r3
 8003996:	3710      	adds	r7, #16
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}
 800399c:	ffe0f8fe 	.word	0xffe0f8fe

080039a0 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	683a      	ldr	r2, [r7, #0]
 80039ae:	641a      	str	r2, [r3, #64]	; 0x40
}
 80039b0:	bf00      	nop
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	60b9      	str	r1, [r7, #8]
 80039c6:	603b      	str	r3, [r7, #0]
 80039c8:	4613      	mov	r3, r2
 80039ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80039cc:	e01a      	b.n	8003a04 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039ce:	69bb      	ldr	r3, [r7, #24]
 80039d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039d4:	d016      	beq.n	8003a04 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039d6:	f7fd fd39 	bl	800144c <HAL_GetTick>
 80039da:	4602      	mov	r2, r0
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	69ba      	ldr	r2, [r7, #24]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d302      	bcc.n	80039ec <QSPI_WaitFlagStateUntilTimeout+0x30>
 80039e6:	69bb      	ldr	r3, [r7, #24]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d10b      	bne.n	8003a04 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2204      	movs	r2, #4
 80039f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039f8:	f043 0201 	orr.w	r2, r3, #1
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e00e      	b.n	8003a22 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	689a      	ldr	r2, [r3, #8]
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	bf14      	ite	ne
 8003a12:	2301      	movne	r3, #1
 8003a14:	2300      	moveq	r3, #0
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	461a      	mov	r2, r3
 8003a1a:	79fb      	ldrb	r3, [r7, #7]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d1d6      	bne.n	80039ce <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3710      	adds	r7, #16
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
	...

08003a2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b088      	sub	sp, #32
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d101      	bne.n	8003a3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e3d4      	b.n	80041e8 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a3e:	4ba1      	ldr	r3, [pc, #644]	; (8003cc4 <HAL_RCC_OscConfig+0x298>)
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	f003 030c 	and.w	r3, r3, #12
 8003a46:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a48:	4b9e      	ldr	r3, [pc, #632]	; (8003cc4 <HAL_RCC_OscConfig+0x298>)
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	f003 0303 	and.w	r3, r3, #3
 8003a50:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0310 	and.w	r3, r3, #16
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	f000 80e4 	beq.w	8003c28 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003a60:	69bb      	ldr	r3, [r7, #24]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d007      	beq.n	8003a76 <HAL_RCC_OscConfig+0x4a>
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	2b0c      	cmp	r3, #12
 8003a6a:	f040 808b 	bne.w	8003b84 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	f040 8087 	bne.w	8003b84 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003a76:	4b93      	ldr	r3, [pc, #588]	; (8003cc4 <HAL_RCC_OscConfig+0x298>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0302 	and.w	r3, r3, #2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d005      	beq.n	8003a8e <HAL_RCC_OscConfig+0x62>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	699b      	ldr	r3, [r3, #24]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d101      	bne.n	8003a8e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e3ac      	b.n	80041e8 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a1a      	ldr	r2, [r3, #32]
 8003a92:	4b8c      	ldr	r3, [pc, #560]	; (8003cc4 <HAL_RCC_OscConfig+0x298>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0308 	and.w	r3, r3, #8
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d004      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x7c>
 8003a9e:	4b89      	ldr	r3, [pc, #548]	; (8003cc4 <HAL_RCC_OscConfig+0x298>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003aa6:	e005      	b.n	8003ab4 <HAL_RCC_OscConfig+0x88>
 8003aa8:	4b86      	ldr	r3, [pc, #536]	; (8003cc4 <HAL_RCC_OscConfig+0x298>)
 8003aaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003aae:	091b      	lsrs	r3, r3, #4
 8003ab0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d223      	bcs.n	8003b00 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a1b      	ldr	r3, [r3, #32]
 8003abc:	4618      	mov	r0, r3
 8003abe:	f000 fd3f 	bl	8004540 <RCC_SetFlashLatencyFromMSIRange>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d001      	beq.n	8003acc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e38d      	b.n	80041e8 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003acc:	4b7d      	ldr	r3, [pc, #500]	; (8003cc4 <HAL_RCC_OscConfig+0x298>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a7c      	ldr	r2, [pc, #496]	; (8003cc4 <HAL_RCC_OscConfig+0x298>)
 8003ad2:	f043 0308 	orr.w	r3, r3, #8
 8003ad6:	6013      	str	r3, [r2, #0]
 8003ad8:	4b7a      	ldr	r3, [pc, #488]	; (8003cc4 <HAL_RCC_OscConfig+0x298>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6a1b      	ldr	r3, [r3, #32]
 8003ae4:	4977      	ldr	r1, [pc, #476]	; (8003cc4 <HAL_RCC_OscConfig+0x298>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003aea:	4b76      	ldr	r3, [pc, #472]	; (8003cc4 <HAL_RCC_OscConfig+0x298>)
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	69db      	ldr	r3, [r3, #28]
 8003af6:	021b      	lsls	r3, r3, #8
 8003af8:	4972      	ldr	r1, [pc, #456]	; (8003cc4 <HAL_RCC_OscConfig+0x298>)
 8003afa:	4313      	orrs	r3, r2
 8003afc:	604b      	str	r3, [r1, #4]
 8003afe:	e025      	b.n	8003b4c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b00:	4b70      	ldr	r3, [pc, #448]	; (8003cc4 <HAL_RCC_OscConfig+0x298>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a6f      	ldr	r2, [pc, #444]	; (8003cc4 <HAL_RCC_OscConfig+0x298>)
 8003b06:	f043 0308 	orr.w	r3, r3, #8
 8003b0a:	6013      	str	r3, [r2, #0]
 8003b0c:	4b6d      	ldr	r3, [pc, #436]	; (8003cc4 <HAL_RCC_OscConfig+0x298>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a1b      	ldr	r3, [r3, #32]
 8003b18:	496a      	ldr	r1, [pc, #424]	; (8003cc4 <HAL_RCC_OscConfig+0x298>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b1e:	4b69      	ldr	r3, [pc, #420]	; (8003cc4 <HAL_RCC_OscConfig+0x298>)
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	69db      	ldr	r3, [r3, #28]
 8003b2a:	021b      	lsls	r3, r3, #8
 8003b2c:	4965      	ldr	r1, [pc, #404]	; (8003cc4 <HAL_RCC_OscConfig+0x298>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b32:	69bb      	ldr	r3, [r7, #24]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d109      	bne.n	8003b4c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6a1b      	ldr	r3, [r3, #32]
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f000 fcff 	bl	8004540 <RCC_SetFlashLatencyFromMSIRange>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d001      	beq.n	8003b4c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e34d      	b.n	80041e8 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b4c:	f000 fc36 	bl	80043bc <HAL_RCC_GetSysClockFreq>
 8003b50:	4601      	mov	r1, r0
 8003b52:	4b5c      	ldr	r3, [pc, #368]	; (8003cc4 <HAL_RCC_OscConfig+0x298>)
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	091b      	lsrs	r3, r3, #4
 8003b58:	f003 030f 	and.w	r3, r3, #15
 8003b5c:	4a5a      	ldr	r2, [pc, #360]	; (8003cc8 <HAL_RCC_OscConfig+0x29c>)
 8003b5e:	5cd3      	ldrb	r3, [r2, r3]
 8003b60:	f003 031f 	and.w	r3, r3, #31
 8003b64:	fa21 f303 	lsr.w	r3, r1, r3
 8003b68:	4a58      	ldr	r2, [pc, #352]	; (8003ccc <HAL_RCC_OscConfig+0x2a0>)
 8003b6a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003b6c:	4b58      	ldr	r3, [pc, #352]	; (8003cd0 <HAL_RCC_OscConfig+0x2a4>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4618      	mov	r0, r3
 8003b72:	f7fd fc1b 	bl	80013ac <HAL_InitTick>
 8003b76:	4603      	mov	r3, r0
 8003b78:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003b7a:	7bfb      	ldrb	r3, [r7, #15]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d052      	beq.n	8003c26 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003b80:	7bfb      	ldrb	r3, [r7, #15]
 8003b82:	e331      	b.n	80041e8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	699b      	ldr	r3, [r3, #24]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d032      	beq.n	8003bf2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003b8c:	4b4d      	ldr	r3, [pc, #308]	; (8003cc4 <HAL_RCC_OscConfig+0x298>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a4c      	ldr	r2, [pc, #304]	; (8003cc4 <HAL_RCC_OscConfig+0x298>)
 8003b92:	f043 0301 	orr.w	r3, r3, #1
 8003b96:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b98:	f7fd fc58 	bl	800144c <HAL_GetTick>
 8003b9c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b9e:	e008      	b.n	8003bb2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ba0:	f7fd fc54 	bl	800144c <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d901      	bls.n	8003bb2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e31a      	b.n	80041e8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003bb2:	4b44      	ldr	r3, [pc, #272]	; (8003cc4 <HAL_RCC_OscConfig+0x298>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0302 	and.w	r3, r3, #2
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d0f0      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003bbe:	4b41      	ldr	r3, [pc, #260]	; (8003cc4 <HAL_RCC_OscConfig+0x298>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a40      	ldr	r2, [pc, #256]	; (8003cc4 <HAL_RCC_OscConfig+0x298>)
 8003bc4:	f043 0308 	orr.w	r3, r3, #8
 8003bc8:	6013      	str	r3, [r2, #0]
 8003bca:	4b3e      	ldr	r3, [pc, #248]	; (8003cc4 <HAL_RCC_OscConfig+0x298>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a1b      	ldr	r3, [r3, #32]
 8003bd6:	493b      	ldr	r1, [pc, #236]	; (8003cc4 <HAL_RCC_OscConfig+0x298>)
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003bdc:	4b39      	ldr	r3, [pc, #228]	; (8003cc4 <HAL_RCC_OscConfig+0x298>)
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	69db      	ldr	r3, [r3, #28]
 8003be8:	021b      	lsls	r3, r3, #8
 8003bea:	4936      	ldr	r1, [pc, #216]	; (8003cc4 <HAL_RCC_OscConfig+0x298>)
 8003bec:	4313      	orrs	r3, r2
 8003bee:	604b      	str	r3, [r1, #4]
 8003bf0:	e01a      	b.n	8003c28 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003bf2:	4b34      	ldr	r3, [pc, #208]	; (8003cc4 <HAL_RCC_OscConfig+0x298>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a33      	ldr	r2, [pc, #204]	; (8003cc4 <HAL_RCC_OscConfig+0x298>)
 8003bf8:	f023 0301 	bic.w	r3, r3, #1
 8003bfc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003bfe:	f7fd fc25 	bl	800144c <HAL_GetTick>
 8003c02:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003c04:	e008      	b.n	8003c18 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c06:	f7fd fc21 	bl	800144c <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d901      	bls.n	8003c18 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e2e7      	b.n	80041e8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003c18:	4b2a      	ldr	r3, [pc, #168]	; (8003cc4 <HAL_RCC_OscConfig+0x298>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0302 	and.w	r3, r3, #2
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d1f0      	bne.n	8003c06 <HAL_RCC_OscConfig+0x1da>
 8003c24:	e000      	b.n	8003c28 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003c26:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0301 	and.w	r3, r3, #1
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d074      	beq.n	8003d1e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	2b08      	cmp	r3, #8
 8003c38:	d005      	beq.n	8003c46 <HAL_RCC_OscConfig+0x21a>
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	2b0c      	cmp	r3, #12
 8003c3e:	d10e      	bne.n	8003c5e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	2b03      	cmp	r3, #3
 8003c44:	d10b      	bne.n	8003c5e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c46:	4b1f      	ldr	r3, [pc, #124]	; (8003cc4 <HAL_RCC_OscConfig+0x298>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d064      	beq.n	8003d1c <HAL_RCC_OscConfig+0x2f0>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d160      	bne.n	8003d1c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e2c4      	b.n	80041e8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c66:	d106      	bne.n	8003c76 <HAL_RCC_OscConfig+0x24a>
 8003c68:	4b16      	ldr	r3, [pc, #88]	; (8003cc4 <HAL_RCC_OscConfig+0x298>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a15      	ldr	r2, [pc, #84]	; (8003cc4 <HAL_RCC_OscConfig+0x298>)
 8003c6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c72:	6013      	str	r3, [r2, #0]
 8003c74:	e01d      	b.n	8003cb2 <HAL_RCC_OscConfig+0x286>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c7e:	d10c      	bne.n	8003c9a <HAL_RCC_OscConfig+0x26e>
 8003c80:	4b10      	ldr	r3, [pc, #64]	; (8003cc4 <HAL_RCC_OscConfig+0x298>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a0f      	ldr	r2, [pc, #60]	; (8003cc4 <HAL_RCC_OscConfig+0x298>)
 8003c86:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c8a:	6013      	str	r3, [r2, #0]
 8003c8c:	4b0d      	ldr	r3, [pc, #52]	; (8003cc4 <HAL_RCC_OscConfig+0x298>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a0c      	ldr	r2, [pc, #48]	; (8003cc4 <HAL_RCC_OscConfig+0x298>)
 8003c92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c96:	6013      	str	r3, [r2, #0]
 8003c98:	e00b      	b.n	8003cb2 <HAL_RCC_OscConfig+0x286>
 8003c9a:	4b0a      	ldr	r3, [pc, #40]	; (8003cc4 <HAL_RCC_OscConfig+0x298>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a09      	ldr	r2, [pc, #36]	; (8003cc4 <HAL_RCC_OscConfig+0x298>)
 8003ca0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ca4:	6013      	str	r3, [r2, #0]
 8003ca6:	4b07      	ldr	r3, [pc, #28]	; (8003cc4 <HAL_RCC_OscConfig+0x298>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a06      	ldr	r2, [pc, #24]	; (8003cc4 <HAL_RCC_OscConfig+0x298>)
 8003cac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cb0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d01c      	beq.n	8003cf4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cba:	f7fd fbc7 	bl	800144c <HAL_GetTick>
 8003cbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cc0:	e011      	b.n	8003ce6 <HAL_RCC_OscConfig+0x2ba>
 8003cc2:	bf00      	nop
 8003cc4:	40021000 	.word	0x40021000
 8003cc8:	08008c04 	.word	0x08008c04
 8003ccc:	20000000 	.word	0x20000000
 8003cd0:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cd4:	f7fd fbba 	bl	800144c <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	2b64      	cmp	r3, #100	; 0x64
 8003ce0:	d901      	bls.n	8003ce6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e280      	b.n	80041e8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ce6:	4baf      	ldr	r3, [pc, #700]	; (8003fa4 <HAL_RCC_OscConfig+0x578>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d0f0      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x2a8>
 8003cf2:	e014      	b.n	8003d1e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf4:	f7fd fbaa 	bl	800144c <HAL_GetTick>
 8003cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003cfa:	e008      	b.n	8003d0e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cfc:	f7fd fba6 	bl	800144c <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	2b64      	cmp	r3, #100	; 0x64
 8003d08:	d901      	bls.n	8003d0e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e26c      	b.n	80041e8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d0e:	4ba5      	ldr	r3, [pc, #660]	; (8003fa4 <HAL_RCC_OscConfig+0x578>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d1f0      	bne.n	8003cfc <HAL_RCC_OscConfig+0x2d0>
 8003d1a:	e000      	b.n	8003d1e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0302 	and.w	r3, r3, #2
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d060      	beq.n	8003dec <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	2b04      	cmp	r3, #4
 8003d2e:	d005      	beq.n	8003d3c <HAL_RCC_OscConfig+0x310>
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	2b0c      	cmp	r3, #12
 8003d34:	d119      	bne.n	8003d6a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d116      	bne.n	8003d6a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d3c:	4b99      	ldr	r3, [pc, #612]	; (8003fa4 <HAL_RCC_OscConfig+0x578>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d005      	beq.n	8003d54 <HAL_RCC_OscConfig+0x328>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d101      	bne.n	8003d54 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e249      	b.n	80041e8 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d54:	4b93      	ldr	r3, [pc, #588]	; (8003fa4 <HAL_RCC_OscConfig+0x578>)
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	691b      	ldr	r3, [r3, #16]
 8003d60:	061b      	lsls	r3, r3, #24
 8003d62:	4990      	ldr	r1, [pc, #576]	; (8003fa4 <HAL_RCC_OscConfig+0x578>)
 8003d64:	4313      	orrs	r3, r2
 8003d66:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d68:	e040      	b.n	8003dec <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d023      	beq.n	8003dba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d72:	4b8c      	ldr	r3, [pc, #560]	; (8003fa4 <HAL_RCC_OscConfig+0x578>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a8b      	ldr	r2, [pc, #556]	; (8003fa4 <HAL_RCC_OscConfig+0x578>)
 8003d78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d7e:	f7fd fb65 	bl	800144c <HAL_GetTick>
 8003d82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d84:	e008      	b.n	8003d98 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d86:	f7fd fb61 	bl	800144c <HAL_GetTick>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	2b02      	cmp	r3, #2
 8003d92:	d901      	bls.n	8003d98 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	e227      	b.n	80041e8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d98:	4b82      	ldr	r3, [pc, #520]	; (8003fa4 <HAL_RCC_OscConfig+0x578>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d0f0      	beq.n	8003d86 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003da4:	4b7f      	ldr	r3, [pc, #508]	; (8003fa4 <HAL_RCC_OscConfig+0x578>)
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	691b      	ldr	r3, [r3, #16]
 8003db0:	061b      	lsls	r3, r3, #24
 8003db2:	497c      	ldr	r1, [pc, #496]	; (8003fa4 <HAL_RCC_OscConfig+0x578>)
 8003db4:	4313      	orrs	r3, r2
 8003db6:	604b      	str	r3, [r1, #4]
 8003db8:	e018      	b.n	8003dec <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dba:	4b7a      	ldr	r3, [pc, #488]	; (8003fa4 <HAL_RCC_OscConfig+0x578>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a79      	ldr	r2, [pc, #484]	; (8003fa4 <HAL_RCC_OscConfig+0x578>)
 8003dc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003dc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc6:	f7fd fb41 	bl	800144c <HAL_GetTick>
 8003dca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003dcc:	e008      	b.n	8003de0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dce:	f7fd fb3d 	bl	800144c <HAL_GetTick>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d901      	bls.n	8003de0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	e203      	b.n	80041e8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003de0:	4b70      	ldr	r3, [pc, #448]	; (8003fa4 <HAL_RCC_OscConfig+0x578>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d1f0      	bne.n	8003dce <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0308 	and.w	r3, r3, #8
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d03c      	beq.n	8003e72 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	695b      	ldr	r3, [r3, #20]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d01c      	beq.n	8003e3a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e00:	4b68      	ldr	r3, [pc, #416]	; (8003fa4 <HAL_RCC_OscConfig+0x578>)
 8003e02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e06:	4a67      	ldr	r2, [pc, #412]	; (8003fa4 <HAL_RCC_OscConfig+0x578>)
 8003e08:	f043 0301 	orr.w	r3, r3, #1
 8003e0c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e10:	f7fd fb1c 	bl	800144c <HAL_GetTick>
 8003e14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e16:	e008      	b.n	8003e2a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e18:	f7fd fb18 	bl	800144c <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	d901      	bls.n	8003e2a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e1de      	b.n	80041e8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e2a:	4b5e      	ldr	r3, [pc, #376]	; (8003fa4 <HAL_RCC_OscConfig+0x578>)
 8003e2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e30:	f003 0302 	and.w	r3, r3, #2
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d0ef      	beq.n	8003e18 <HAL_RCC_OscConfig+0x3ec>
 8003e38:	e01b      	b.n	8003e72 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e3a:	4b5a      	ldr	r3, [pc, #360]	; (8003fa4 <HAL_RCC_OscConfig+0x578>)
 8003e3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e40:	4a58      	ldr	r2, [pc, #352]	; (8003fa4 <HAL_RCC_OscConfig+0x578>)
 8003e42:	f023 0301 	bic.w	r3, r3, #1
 8003e46:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e4a:	f7fd faff 	bl	800144c <HAL_GetTick>
 8003e4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e50:	e008      	b.n	8003e64 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e52:	f7fd fafb 	bl	800144c <HAL_GetTick>
 8003e56:	4602      	mov	r2, r0
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	d901      	bls.n	8003e64 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003e60:	2303      	movs	r3, #3
 8003e62:	e1c1      	b.n	80041e8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e64:	4b4f      	ldr	r3, [pc, #316]	; (8003fa4 <HAL_RCC_OscConfig+0x578>)
 8003e66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e6a:	f003 0302 	and.w	r3, r3, #2
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d1ef      	bne.n	8003e52 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0304 	and.w	r3, r3, #4
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	f000 80a6 	beq.w	8003fcc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e80:	2300      	movs	r3, #0
 8003e82:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003e84:	4b47      	ldr	r3, [pc, #284]	; (8003fa4 <HAL_RCC_OscConfig+0x578>)
 8003e86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d10d      	bne.n	8003eac <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e90:	4b44      	ldr	r3, [pc, #272]	; (8003fa4 <HAL_RCC_OscConfig+0x578>)
 8003e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e94:	4a43      	ldr	r2, [pc, #268]	; (8003fa4 <HAL_RCC_OscConfig+0x578>)
 8003e96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e9a:	6593      	str	r3, [r2, #88]	; 0x58
 8003e9c:	4b41      	ldr	r3, [pc, #260]	; (8003fa4 <HAL_RCC_OscConfig+0x578>)
 8003e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ea0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ea4:	60bb      	str	r3, [r7, #8]
 8003ea6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003eac:	4b3e      	ldr	r3, [pc, #248]	; (8003fa8 <HAL_RCC_OscConfig+0x57c>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d118      	bne.n	8003eea <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003eb8:	4b3b      	ldr	r3, [pc, #236]	; (8003fa8 <HAL_RCC_OscConfig+0x57c>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a3a      	ldr	r2, [pc, #232]	; (8003fa8 <HAL_RCC_OscConfig+0x57c>)
 8003ebe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ec2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ec4:	f7fd fac2 	bl	800144c <HAL_GetTick>
 8003ec8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003eca:	e008      	b.n	8003ede <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ecc:	f7fd fabe 	bl	800144c <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d901      	bls.n	8003ede <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e184      	b.n	80041e8 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ede:	4b32      	ldr	r3, [pc, #200]	; (8003fa8 <HAL_RCC_OscConfig+0x57c>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d0f0      	beq.n	8003ecc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d108      	bne.n	8003f04 <HAL_RCC_OscConfig+0x4d8>
 8003ef2:	4b2c      	ldr	r3, [pc, #176]	; (8003fa4 <HAL_RCC_OscConfig+0x578>)
 8003ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ef8:	4a2a      	ldr	r2, [pc, #168]	; (8003fa4 <HAL_RCC_OscConfig+0x578>)
 8003efa:	f043 0301 	orr.w	r3, r3, #1
 8003efe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f02:	e024      	b.n	8003f4e <HAL_RCC_OscConfig+0x522>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	2b05      	cmp	r3, #5
 8003f0a:	d110      	bne.n	8003f2e <HAL_RCC_OscConfig+0x502>
 8003f0c:	4b25      	ldr	r3, [pc, #148]	; (8003fa4 <HAL_RCC_OscConfig+0x578>)
 8003f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f12:	4a24      	ldr	r2, [pc, #144]	; (8003fa4 <HAL_RCC_OscConfig+0x578>)
 8003f14:	f043 0304 	orr.w	r3, r3, #4
 8003f18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f1c:	4b21      	ldr	r3, [pc, #132]	; (8003fa4 <HAL_RCC_OscConfig+0x578>)
 8003f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f22:	4a20      	ldr	r2, [pc, #128]	; (8003fa4 <HAL_RCC_OscConfig+0x578>)
 8003f24:	f043 0301 	orr.w	r3, r3, #1
 8003f28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f2c:	e00f      	b.n	8003f4e <HAL_RCC_OscConfig+0x522>
 8003f2e:	4b1d      	ldr	r3, [pc, #116]	; (8003fa4 <HAL_RCC_OscConfig+0x578>)
 8003f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f34:	4a1b      	ldr	r2, [pc, #108]	; (8003fa4 <HAL_RCC_OscConfig+0x578>)
 8003f36:	f023 0301 	bic.w	r3, r3, #1
 8003f3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f3e:	4b19      	ldr	r3, [pc, #100]	; (8003fa4 <HAL_RCC_OscConfig+0x578>)
 8003f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f44:	4a17      	ldr	r2, [pc, #92]	; (8003fa4 <HAL_RCC_OscConfig+0x578>)
 8003f46:	f023 0304 	bic.w	r3, r3, #4
 8003f4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d016      	beq.n	8003f84 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f56:	f7fd fa79 	bl	800144c <HAL_GetTick>
 8003f5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f5c:	e00a      	b.n	8003f74 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f5e:	f7fd fa75 	bl	800144c <HAL_GetTick>
 8003f62:	4602      	mov	r2, r0
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d901      	bls.n	8003f74 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e139      	b.n	80041e8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f74:	4b0b      	ldr	r3, [pc, #44]	; (8003fa4 <HAL_RCC_OscConfig+0x578>)
 8003f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f7a:	f003 0302 	and.w	r3, r3, #2
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d0ed      	beq.n	8003f5e <HAL_RCC_OscConfig+0x532>
 8003f82:	e01a      	b.n	8003fba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f84:	f7fd fa62 	bl	800144c <HAL_GetTick>
 8003f88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f8a:	e00f      	b.n	8003fac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f8c:	f7fd fa5e 	bl	800144c <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d906      	bls.n	8003fac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e122      	b.n	80041e8 <HAL_RCC_OscConfig+0x7bc>
 8003fa2:	bf00      	nop
 8003fa4:	40021000 	.word	0x40021000
 8003fa8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003fac:	4b90      	ldr	r3, [pc, #576]	; (80041f0 <HAL_RCC_OscConfig+0x7c4>)
 8003fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fb2:	f003 0302 	and.w	r3, r3, #2
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d1e8      	bne.n	8003f8c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fba:	7ffb      	ldrb	r3, [r7, #31]
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d105      	bne.n	8003fcc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fc0:	4b8b      	ldr	r3, [pc, #556]	; (80041f0 <HAL_RCC_OscConfig+0x7c4>)
 8003fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fc4:	4a8a      	ldr	r2, [pc, #552]	; (80041f0 <HAL_RCC_OscConfig+0x7c4>)
 8003fc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fca:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	f000 8108 	beq.w	80041e6 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	f040 80d0 	bne.w	8004180 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003fe0:	4b83      	ldr	r3, [pc, #524]	; (80041f0 <HAL_RCC_OscConfig+0x7c4>)
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	f003 0203 	and.w	r2, r3, #3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d130      	bne.n	8004056 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ffe:	3b01      	subs	r3, #1
 8004000:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004002:	429a      	cmp	r2, r3
 8004004:	d127      	bne.n	8004056 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004010:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004012:	429a      	cmp	r2, r3
 8004014:	d11f      	bne.n	8004056 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004020:	2a07      	cmp	r2, #7
 8004022:	bf14      	ite	ne
 8004024:	2201      	movne	r2, #1
 8004026:	2200      	moveq	r2, #0
 8004028:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800402a:	4293      	cmp	r3, r2
 800402c:	d113      	bne.n	8004056 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004038:	085b      	lsrs	r3, r3, #1
 800403a:	3b01      	subs	r3, #1
 800403c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800403e:	429a      	cmp	r2, r3
 8004040:	d109      	bne.n	8004056 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404c:	085b      	lsrs	r3, r3, #1
 800404e:	3b01      	subs	r3, #1
 8004050:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004052:	429a      	cmp	r2, r3
 8004054:	d06e      	beq.n	8004134 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	2b0c      	cmp	r3, #12
 800405a:	d069      	beq.n	8004130 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800405c:	4b64      	ldr	r3, [pc, #400]	; (80041f0 <HAL_RCC_OscConfig+0x7c4>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d105      	bne.n	8004074 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004068:	4b61      	ldr	r3, [pc, #388]	; (80041f0 <HAL_RCC_OscConfig+0x7c4>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004070:	2b00      	cmp	r3, #0
 8004072:	d001      	beq.n	8004078 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e0b7      	b.n	80041e8 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004078:	4b5d      	ldr	r3, [pc, #372]	; (80041f0 <HAL_RCC_OscConfig+0x7c4>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a5c      	ldr	r2, [pc, #368]	; (80041f0 <HAL_RCC_OscConfig+0x7c4>)
 800407e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004082:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004084:	f7fd f9e2 	bl	800144c <HAL_GetTick>
 8004088:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800408a:	e008      	b.n	800409e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800408c:	f7fd f9de 	bl	800144c <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	2b02      	cmp	r3, #2
 8004098:	d901      	bls.n	800409e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e0a4      	b.n	80041e8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800409e:	4b54      	ldr	r3, [pc, #336]	; (80041f0 <HAL_RCC_OscConfig+0x7c4>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d1f0      	bne.n	800408c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040aa:	4b51      	ldr	r3, [pc, #324]	; (80041f0 <HAL_RCC_OscConfig+0x7c4>)
 80040ac:	68da      	ldr	r2, [r3, #12]
 80040ae:	4b51      	ldr	r3, [pc, #324]	; (80041f4 <HAL_RCC_OscConfig+0x7c8>)
 80040b0:	4013      	ands	r3, r2
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80040ba:	3a01      	subs	r2, #1
 80040bc:	0112      	lsls	r2, r2, #4
 80040be:	4311      	orrs	r1, r2
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80040c4:	0212      	lsls	r2, r2, #8
 80040c6:	4311      	orrs	r1, r2
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80040cc:	0852      	lsrs	r2, r2, #1
 80040ce:	3a01      	subs	r2, #1
 80040d0:	0552      	lsls	r2, r2, #21
 80040d2:	4311      	orrs	r1, r2
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80040d8:	0852      	lsrs	r2, r2, #1
 80040da:	3a01      	subs	r2, #1
 80040dc:	0652      	lsls	r2, r2, #25
 80040de:	4311      	orrs	r1, r2
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80040e4:	0912      	lsrs	r2, r2, #4
 80040e6:	0452      	lsls	r2, r2, #17
 80040e8:	430a      	orrs	r2, r1
 80040ea:	4941      	ldr	r1, [pc, #260]	; (80041f0 <HAL_RCC_OscConfig+0x7c4>)
 80040ec:	4313      	orrs	r3, r2
 80040ee:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80040f0:	4b3f      	ldr	r3, [pc, #252]	; (80041f0 <HAL_RCC_OscConfig+0x7c4>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a3e      	ldr	r2, [pc, #248]	; (80041f0 <HAL_RCC_OscConfig+0x7c4>)
 80040f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040fa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80040fc:	4b3c      	ldr	r3, [pc, #240]	; (80041f0 <HAL_RCC_OscConfig+0x7c4>)
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	4a3b      	ldr	r2, [pc, #236]	; (80041f0 <HAL_RCC_OscConfig+0x7c4>)
 8004102:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004106:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004108:	f7fd f9a0 	bl	800144c <HAL_GetTick>
 800410c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800410e:	e008      	b.n	8004122 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004110:	f7fd f99c 	bl	800144c <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	2b02      	cmp	r3, #2
 800411c:	d901      	bls.n	8004122 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e062      	b.n	80041e8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004122:	4b33      	ldr	r3, [pc, #204]	; (80041f0 <HAL_RCC_OscConfig+0x7c4>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d0f0      	beq.n	8004110 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800412e:	e05a      	b.n	80041e6 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e059      	b.n	80041e8 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004134:	4b2e      	ldr	r3, [pc, #184]	; (80041f0 <HAL_RCC_OscConfig+0x7c4>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800413c:	2b00      	cmp	r3, #0
 800413e:	d152      	bne.n	80041e6 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004140:	4b2b      	ldr	r3, [pc, #172]	; (80041f0 <HAL_RCC_OscConfig+0x7c4>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a2a      	ldr	r2, [pc, #168]	; (80041f0 <HAL_RCC_OscConfig+0x7c4>)
 8004146:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800414a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800414c:	4b28      	ldr	r3, [pc, #160]	; (80041f0 <HAL_RCC_OscConfig+0x7c4>)
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	4a27      	ldr	r2, [pc, #156]	; (80041f0 <HAL_RCC_OscConfig+0x7c4>)
 8004152:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004156:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004158:	f7fd f978 	bl	800144c <HAL_GetTick>
 800415c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800415e:	e008      	b.n	8004172 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004160:	f7fd f974 	bl	800144c <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	2b02      	cmp	r3, #2
 800416c:	d901      	bls.n	8004172 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e03a      	b.n	80041e8 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004172:	4b1f      	ldr	r3, [pc, #124]	; (80041f0 <HAL_RCC_OscConfig+0x7c4>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d0f0      	beq.n	8004160 <HAL_RCC_OscConfig+0x734>
 800417e:	e032      	b.n	80041e6 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004180:	69bb      	ldr	r3, [r7, #24]
 8004182:	2b0c      	cmp	r3, #12
 8004184:	d02d      	beq.n	80041e2 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004186:	4b1a      	ldr	r3, [pc, #104]	; (80041f0 <HAL_RCC_OscConfig+0x7c4>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a19      	ldr	r2, [pc, #100]	; (80041f0 <HAL_RCC_OscConfig+0x7c4>)
 800418c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004190:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004192:	4b17      	ldr	r3, [pc, #92]	; (80041f0 <HAL_RCC_OscConfig+0x7c4>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d105      	bne.n	80041aa <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800419e:	4b14      	ldr	r3, [pc, #80]	; (80041f0 <HAL_RCC_OscConfig+0x7c4>)
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	4a13      	ldr	r2, [pc, #76]	; (80041f0 <HAL_RCC_OscConfig+0x7c4>)
 80041a4:	f023 0303 	bic.w	r3, r3, #3
 80041a8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80041aa:	4b11      	ldr	r3, [pc, #68]	; (80041f0 <HAL_RCC_OscConfig+0x7c4>)
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	4a10      	ldr	r2, [pc, #64]	; (80041f0 <HAL_RCC_OscConfig+0x7c4>)
 80041b0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80041b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041b8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ba:	f7fd f947 	bl	800144c <HAL_GetTick>
 80041be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041c0:	e008      	b.n	80041d4 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041c2:	f7fd f943 	bl	800144c <HAL_GetTick>
 80041c6:	4602      	mov	r2, r0
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d901      	bls.n	80041d4 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80041d0:	2303      	movs	r3, #3
 80041d2:	e009      	b.n	80041e8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041d4:	4b06      	ldr	r3, [pc, #24]	; (80041f0 <HAL_RCC_OscConfig+0x7c4>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d1f0      	bne.n	80041c2 <HAL_RCC_OscConfig+0x796>
 80041e0:	e001      	b.n	80041e6 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e000      	b.n	80041e8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80041e6:	2300      	movs	r3, #0
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3720      	adds	r7, #32
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	40021000 	.word	0x40021000
 80041f4:	f99d808c 	.word	0xf99d808c

080041f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d101      	bne.n	800420c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e0c8      	b.n	800439e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800420c:	4b66      	ldr	r3, [pc, #408]	; (80043a8 <HAL_RCC_ClockConfig+0x1b0>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0307 	and.w	r3, r3, #7
 8004214:	683a      	ldr	r2, [r7, #0]
 8004216:	429a      	cmp	r2, r3
 8004218:	d910      	bls.n	800423c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800421a:	4b63      	ldr	r3, [pc, #396]	; (80043a8 <HAL_RCC_ClockConfig+0x1b0>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f023 0207 	bic.w	r2, r3, #7
 8004222:	4961      	ldr	r1, [pc, #388]	; (80043a8 <HAL_RCC_ClockConfig+0x1b0>)
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	4313      	orrs	r3, r2
 8004228:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800422a:	4b5f      	ldr	r3, [pc, #380]	; (80043a8 <HAL_RCC_ClockConfig+0x1b0>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 0307 	and.w	r3, r3, #7
 8004232:	683a      	ldr	r2, [r7, #0]
 8004234:	429a      	cmp	r2, r3
 8004236:	d001      	beq.n	800423c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e0b0      	b.n	800439e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0301 	and.w	r3, r3, #1
 8004244:	2b00      	cmp	r3, #0
 8004246:	d04c      	beq.n	80042e2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	2b03      	cmp	r3, #3
 800424e:	d107      	bne.n	8004260 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004250:	4b56      	ldr	r3, [pc, #344]	; (80043ac <HAL_RCC_ClockConfig+0x1b4>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004258:	2b00      	cmp	r3, #0
 800425a:	d121      	bne.n	80042a0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e09e      	b.n	800439e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	2b02      	cmp	r3, #2
 8004266:	d107      	bne.n	8004278 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004268:	4b50      	ldr	r3, [pc, #320]	; (80043ac <HAL_RCC_ClockConfig+0x1b4>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004270:	2b00      	cmp	r3, #0
 8004272:	d115      	bne.n	80042a0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e092      	b.n	800439e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d107      	bne.n	8004290 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004280:	4b4a      	ldr	r3, [pc, #296]	; (80043ac <HAL_RCC_ClockConfig+0x1b4>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0302 	and.w	r3, r3, #2
 8004288:	2b00      	cmp	r3, #0
 800428a:	d109      	bne.n	80042a0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e086      	b.n	800439e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004290:	4b46      	ldr	r3, [pc, #280]	; (80043ac <HAL_RCC_ClockConfig+0x1b4>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004298:	2b00      	cmp	r3, #0
 800429a:	d101      	bne.n	80042a0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e07e      	b.n	800439e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80042a0:	4b42      	ldr	r3, [pc, #264]	; (80043ac <HAL_RCC_ClockConfig+0x1b4>)
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	f023 0203 	bic.w	r2, r3, #3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	493f      	ldr	r1, [pc, #252]	; (80043ac <HAL_RCC_ClockConfig+0x1b4>)
 80042ae:	4313      	orrs	r3, r2
 80042b0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042b2:	f7fd f8cb 	bl	800144c <HAL_GetTick>
 80042b6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042b8:	e00a      	b.n	80042d0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042ba:	f7fd f8c7 	bl	800144c <HAL_GetTick>
 80042be:	4602      	mov	r2, r0
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d901      	bls.n	80042d0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80042cc:	2303      	movs	r3, #3
 80042ce:	e066      	b.n	800439e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042d0:	4b36      	ldr	r3, [pc, #216]	; (80043ac <HAL_RCC_ClockConfig+0x1b4>)
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	f003 020c 	and.w	r2, r3, #12
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	429a      	cmp	r2, r3
 80042e0:	d1eb      	bne.n	80042ba <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0302 	and.w	r3, r3, #2
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d008      	beq.n	8004300 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042ee:	4b2f      	ldr	r3, [pc, #188]	; (80043ac <HAL_RCC_ClockConfig+0x1b4>)
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	492c      	ldr	r1, [pc, #176]	; (80043ac <HAL_RCC_ClockConfig+0x1b4>)
 80042fc:	4313      	orrs	r3, r2
 80042fe:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004300:	4b29      	ldr	r3, [pc, #164]	; (80043a8 <HAL_RCC_ClockConfig+0x1b0>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 0307 	and.w	r3, r3, #7
 8004308:	683a      	ldr	r2, [r7, #0]
 800430a:	429a      	cmp	r2, r3
 800430c:	d210      	bcs.n	8004330 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800430e:	4b26      	ldr	r3, [pc, #152]	; (80043a8 <HAL_RCC_ClockConfig+0x1b0>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f023 0207 	bic.w	r2, r3, #7
 8004316:	4924      	ldr	r1, [pc, #144]	; (80043a8 <HAL_RCC_ClockConfig+0x1b0>)
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	4313      	orrs	r3, r2
 800431c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800431e:	4b22      	ldr	r3, [pc, #136]	; (80043a8 <HAL_RCC_ClockConfig+0x1b0>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 0307 	and.w	r3, r3, #7
 8004326:	683a      	ldr	r2, [r7, #0]
 8004328:	429a      	cmp	r2, r3
 800432a:	d001      	beq.n	8004330 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e036      	b.n	800439e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0304 	and.w	r3, r3, #4
 8004338:	2b00      	cmp	r3, #0
 800433a:	d008      	beq.n	800434e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800433c:	4b1b      	ldr	r3, [pc, #108]	; (80043ac <HAL_RCC_ClockConfig+0x1b4>)
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	4918      	ldr	r1, [pc, #96]	; (80043ac <HAL_RCC_ClockConfig+0x1b4>)
 800434a:	4313      	orrs	r3, r2
 800434c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 0308 	and.w	r3, r3, #8
 8004356:	2b00      	cmp	r3, #0
 8004358:	d009      	beq.n	800436e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800435a:	4b14      	ldr	r3, [pc, #80]	; (80043ac <HAL_RCC_ClockConfig+0x1b4>)
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	00db      	lsls	r3, r3, #3
 8004368:	4910      	ldr	r1, [pc, #64]	; (80043ac <HAL_RCC_ClockConfig+0x1b4>)
 800436a:	4313      	orrs	r3, r2
 800436c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800436e:	f000 f825 	bl	80043bc <HAL_RCC_GetSysClockFreq>
 8004372:	4601      	mov	r1, r0
 8004374:	4b0d      	ldr	r3, [pc, #52]	; (80043ac <HAL_RCC_ClockConfig+0x1b4>)
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	091b      	lsrs	r3, r3, #4
 800437a:	f003 030f 	and.w	r3, r3, #15
 800437e:	4a0c      	ldr	r2, [pc, #48]	; (80043b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004380:	5cd3      	ldrb	r3, [r2, r3]
 8004382:	f003 031f 	and.w	r3, r3, #31
 8004386:	fa21 f303 	lsr.w	r3, r1, r3
 800438a:	4a0a      	ldr	r2, [pc, #40]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 800438c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800438e:	4b0a      	ldr	r3, [pc, #40]	; (80043b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4618      	mov	r0, r3
 8004394:	f7fd f80a 	bl	80013ac <HAL_InitTick>
 8004398:	4603      	mov	r3, r0
 800439a:	72fb      	strb	r3, [r7, #11]

  return status;
 800439c:	7afb      	ldrb	r3, [r7, #11]
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3710      	adds	r7, #16
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	40022000 	.word	0x40022000
 80043ac:	40021000 	.word	0x40021000
 80043b0:	08008c04 	.word	0x08008c04
 80043b4:	20000000 	.word	0x20000000
 80043b8:	20000004 	.word	0x20000004

080043bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043bc:	b480      	push	{r7}
 80043be:	b089      	sub	sp, #36	; 0x24
 80043c0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80043c2:	2300      	movs	r3, #0
 80043c4:	61fb      	str	r3, [r7, #28]
 80043c6:	2300      	movs	r3, #0
 80043c8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043ca:	4b3d      	ldr	r3, [pc, #244]	; (80044c0 <HAL_RCC_GetSysClockFreq+0x104>)
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f003 030c 	and.w	r3, r3, #12
 80043d2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043d4:	4b3a      	ldr	r3, [pc, #232]	; (80044c0 <HAL_RCC_GetSysClockFreq+0x104>)
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	f003 0303 	and.w	r3, r3, #3
 80043dc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d005      	beq.n	80043f0 <HAL_RCC_GetSysClockFreq+0x34>
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	2b0c      	cmp	r3, #12
 80043e8:	d121      	bne.n	800442e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d11e      	bne.n	800442e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80043f0:	4b33      	ldr	r3, [pc, #204]	; (80044c0 <HAL_RCC_GetSysClockFreq+0x104>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0308 	and.w	r3, r3, #8
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d107      	bne.n	800440c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80043fc:	4b30      	ldr	r3, [pc, #192]	; (80044c0 <HAL_RCC_GetSysClockFreq+0x104>)
 80043fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004402:	0a1b      	lsrs	r3, r3, #8
 8004404:	f003 030f 	and.w	r3, r3, #15
 8004408:	61fb      	str	r3, [r7, #28]
 800440a:	e005      	b.n	8004418 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800440c:	4b2c      	ldr	r3, [pc, #176]	; (80044c0 <HAL_RCC_GetSysClockFreq+0x104>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	091b      	lsrs	r3, r3, #4
 8004412:	f003 030f 	and.w	r3, r3, #15
 8004416:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004418:	4a2a      	ldr	r2, [pc, #168]	; (80044c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004420:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d10d      	bne.n	8004444 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800442c:	e00a      	b.n	8004444 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	2b04      	cmp	r3, #4
 8004432:	d102      	bne.n	800443a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004434:	4b24      	ldr	r3, [pc, #144]	; (80044c8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004436:	61bb      	str	r3, [r7, #24]
 8004438:	e004      	b.n	8004444 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	2b08      	cmp	r3, #8
 800443e:	d101      	bne.n	8004444 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004440:	4b22      	ldr	r3, [pc, #136]	; (80044cc <HAL_RCC_GetSysClockFreq+0x110>)
 8004442:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	2b0c      	cmp	r3, #12
 8004448:	d133      	bne.n	80044b2 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800444a:	4b1d      	ldr	r3, [pc, #116]	; (80044c0 <HAL_RCC_GetSysClockFreq+0x104>)
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	f003 0303 	and.w	r3, r3, #3
 8004452:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	2b02      	cmp	r3, #2
 8004458:	d002      	beq.n	8004460 <HAL_RCC_GetSysClockFreq+0xa4>
 800445a:	2b03      	cmp	r3, #3
 800445c:	d003      	beq.n	8004466 <HAL_RCC_GetSysClockFreq+0xaa>
 800445e:	e005      	b.n	800446c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004460:	4b19      	ldr	r3, [pc, #100]	; (80044c8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004462:	617b      	str	r3, [r7, #20]
      break;
 8004464:	e005      	b.n	8004472 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004466:	4b19      	ldr	r3, [pc, #100]	; (80044cc <HAL_RCC_GetSysClockFreq+0x110>)
 8004468:	617b      	str	r3, [r7, #20]
      break;
 800446a:	e002      	b.n	8004472 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800446c:	69fb      	ldr	r3, [r7, #28]
 800446e:	617b      	str	r3, [r7, #20]
      break;
 8004470:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004472:	4b13      	ldr	r3, [pc, #76]	; (80044c0 <HAL_RCC_GetSysClockFreq+0x104>)
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	091b      	lsrs	r3, r3, #4
 8004478:	f003 0307 	and.w	r3, r3, #7
 800447c:	3301      	adds	r3, #1
 800447e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004480:	4b0f      	ldr	r3, [pc, #60]	; (80044c0 <HAL_RCC_GetSysClockFreq+0x104>)
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	0a1b      	lsrs	r3, r3, #8
 8004486:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800448a:	697a      	ldr	r2, [r7, #20]
 800448c:	fb02 f203 	mul.w	r2, r2, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	fbb2 f3f3 	udiv	r3, r2, r3
 8004496:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004498:	4b09      	ldr	r3, [pc, #36]	; (80044c0 <HAL_RCC_GetSysClockFreq+0x104>)
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	0e5b      	lsrs	r3, r3, #25
 800449e:	f003 0303 	and.w	r3, r3, #3
 80044a2:	3301      	adds	r3, #1
 80044a4:	005b      	lsls	r3, r3, #1
 80044a6:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80044a8:	697a      	ldr	r2, [r7, #20]
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80044b0:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80044b2:	69bb      	ldr	r3, [r7, #24]
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3724      	adds	r7, #36	; 0x24
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr
 80044c0:	40021000 	.word	0x40021000
 80044c4:	08008c1c 	.word	0x08008c1c
 80044c8:	00f42400 	.word	0x00f42400
 80044cc:	007a1200 	.word	0x007a1200

080044d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044d0:	b480      	push	{r7}
 80044d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044d4:	4b03      	ldr	r3, [pc, #12]	; (80044e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80044d6:	681b      	ldr	r3, [r3, #0]
}
 80044d8:	4618      	mov	r0, r3
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr
 80044e2:	bf00      	nop
 80044e4:	20000000 	.word	0x20000000

080044e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80044ec:	f7ff fff0 	bl	80044d0 <HAL_RCC_GetHCLKFreq>
 80044f0:	4601      	mov	r1, r0
 80044f2:	4b06      	ldr	r3, [pc, #24]	; (800450c <HAL_RCC_GetPCLK1Freq+0x24>)
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	0a1b      	lsrs	r3, r3, #8
 80044f8:	f003 0307 	and.w	r3, r3, #7
 80044fc:	4a04      	ldr	r2, [pc, #16]	; (8004510 <HAL_RCC_GetPCLK1Freq+0x28>)
 80044fe:	5cd3      	ldrb	r3, [r2, r3]
 8004500:	f003 031f 	and.w	r3, r3, #31
 8004504:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004508:	4618      	mov	r0, r3
 800450a:	bd80      	pop	{r7, pc}
 800450c:	40021000 	.word	0x40021000
 8004510:	08008c14 	.word	0x08008c14

08004514 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004518:	f7ff ffda 	bl	80044d0 <HAL_RCC_GetHCLKFreq>
 800451c:	4601      	mov	r1, r0
 800451e:	4b06      	ldr	r3, [pc, #24]	; (8004538 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	0adb      	lsrs	r3, r3, #11
 8004524:	f003 0307 	and.w	r3, r3, #7
 8004528:	4a04      	ldr	r2, [pc, #16]	; (800453c <HAL_RCC_GetPCLK2Freq+0x28>)
 800452a:	5cd3      	ldrb	r3, [r2, r3]
 800452c:	f003 031f 	and.w	r3, r3, #31
 8004530:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004534:	4618      	mov	r0, r3
 8004536:	bd80      	pop	{r7, pc}
 8004538:	40021000 	.word	0x40021000
 800453c:	08008c14 	.word	0x08008c14

08004540 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b086      	sub	sp, #24
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004548:	2300      	movs	r3, #0
 800454a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800454c:	4b2a      	ldr	r3, [pc, #168]	; (80045f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800454e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004550:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004554:	2b00      	cmp	r3, #0
 8004556:	d003      	beq.n	8004560 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004558:	f7ff f938 	bl	80037cc <HAL_PWREx_GetVoltageRange>
 800455c:	6178      	str	r0, [r7, #20]
 800455e:	e014      	b.n	800458a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004560:	4b25      	ldr	r3, [pc, #148]	; (80045f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004564:	4a24      	ldr	r2, [pc, #144]	; (80045f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004566:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800456a:	6593      	str	r3, [r2, #88]	; 0x58
 800456c:	4b22      	ldr	r3, [pc, #136]	; (80045f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800456e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004570:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004574:	60fb      	str	r3, [r7, #12]
 8004576:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004578:	f7ff f928 	bl	80037cc <HAL_PWREx_GetVoltageRange>
 800457c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800457e:	4b1e      	ldr	r3, [pc, #120]	; (80045f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004582:	4a1d      	ldr	r2, [pc, #116]	; (80045f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004584:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004588:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004590:	d10b      	bne.n	80045aa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2b80      	cmp	r3, #128	; 0x80
 8004596:	d919      	bls.n	80045cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2ba0      	cmp	r3, #160	; 0xa0
 800459c:	d902      	bls.n	80045a4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800459e:	2302      	movs	r3, #2
 80045a0:	613b      	str	r3, [r7, #16]
 80045a2:	e013      	b.n	80045cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80045a4:	2301      	movs	r3, #1
 80045a6:	613b      	str	r3, [r7, #16]
 80045a8:	e010      	b.n	80045cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2b80      	cmp	r3, #128	; 0x80
 80045ae:	d902      	bls.n	80045b6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80045b0:	2303      	movs	r3, #3
 80045b2:	613b      	str	r3, [r7, #16]
 80045b4:	e00a      	b.n	80045cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2b80      	cmp	r3, #128	; 0x80
 80045ba:	d102      	bne.n	80045c2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80045bc:	2302      	movs	r3, #2
 80045be:	613b      	str	r3, [r7, #16]
 80045c0:	e004      	b.n	80045cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2b70      	cmp	r3, #112	; 0x70
 80045c6:	d101      	bne.n	80045cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80045c8:	2301      	movs	r3, #1
 80045ca:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80045cc:	4b0b      	ldr	r3, [pc, #44]	; (80045fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f023 0207 	bic.w	r2, r3, #7
 80045d4:	4909      	ldr	r1, [pc, #36]	; (80045fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	4313      	orrs	r3, r2
 80045da:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80045dc:	4b07      	ldr	r3, [pc, #28]	; (80045fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0307 	and.w	r3, r3, #7
 80045e4:	693a      	ldr	r2, [r7, #16]
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d001      	beq.n	80045ee <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e000      	b.n	80045f0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80045ee:	2300      	movs	r3, #0
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3718      	adds	r7, #24
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	40021000 	.word	0x40021000
 80045fc:	40022000 	.word	0x40022000

08004600 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b086      	sub	sp, #24
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004608:	2300      	movs	r3, #0
 800460a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800460c:	2300      	movs	r3, #0
 800460e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004618:	2b00      	cmp	r3, #0
 800461a:	d03f      	beq.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004620:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004624:	d01c      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8004626:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800462a:	d802      	bhi.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800462c:	2b00      	cmp	r3, #0
 800462e:	d00e      	beq.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8004630:	e01f      	b.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8004632:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004636:	d003      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004638:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800463c:	d01c      	beq.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800463e:	e018      	b.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004640:	4b85      	ldr	r3, [pc, #532]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	4a84      	ldr	r2, [pc, #528]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004646:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800464a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800464c:	e015      	b.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	3304      	adds	r3, #4
 8004652:	2100      	movs	r1, #0
 8004654:	4618      	mov	r0, r3
 8004656:	f000 ff4f 	bl	80054f8 <RCCEx_PLLSAI1_Config>
 800465a:	4603      	mov	r3, r0
 800465c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800465e:	e00c      	b.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	3320      	adds	r3, #32
 8004664:	2100      	movs	r1, #0
 8004666:	4618      	mov	r0, r3
 8004668:	f001 f836 	bl	80056d8 <RCCEx_PLLSAI2_Config>
 800466c:	4603      	mov	r3, r0
 800466e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004670:	e003      	b.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	74fb      	strb	r3, [r7, #19]
      break;
 8004676:	e000      	b.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8004678:	bf00      	nop
    }

    if(ret == HAL_OK)
 800467a:	7cfb      	ldrb	r3, [r7, #19]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d10b      	bne.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004680:	4b75      	ldr	r3, [pc, #468]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004686:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800468e:	4972      	ldr	r1, [pc, #456]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004690:	4313      	orrs	r3, r2
 8004692:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004696:	e001      	b.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004698:	7cfb      	ldrb	r3, [r7, #19]
 800469a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d03f      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80046b0:	d01c      	beq.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0xec>
 80046b2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80046b6:	d802      	bhi.n	80046be <HAL_RCCEx_PeriphCLKConfig+0xbe>
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d00e      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0xda>
 80046bc:	e01f      	b.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80046be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80046c2:	d003      	beq.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80046c4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80046c8:	d01c      	beq.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x104>
 80046ca:	e018      	b.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80046cc:	4b62      	ldr	r3, [pc, #392]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	4a61      	ldr	r2, [pc, #388]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80046d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046d6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80046d8:	e015      	b.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	3304      	adds	r3, #4
 80046de:	2100      	movs	r1, #0
 80046e0:	4618      	mov	r0, r3
 80046e2:	f000 ff09 	bl	80054f8 <RCCEx_PLLSAI1_Config>
 80046e6:	4603      	mov	r3, r0
 80046e8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80046ea:	e00c      	b.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	3320      	adds	r3, #32
 80046f0:	2100      	movs	r1, #0
 80046f2:	4618      	mov	r0, r3
 80046f4:	f000 fff0 	bl	80056d8 <RCCEx_PLLSAI2_Config>
 80046f8:	4603      	mov	r3, r0
 80046fa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80046fc:	e003      	b.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	74fb      	strb	r3, [r7, #19]
      break;
 8004702:	e000      	b.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004704:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004706:	7cfb      	ldrb	r3, [r7, #19]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d10b      	bne.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800470c:	4b52      	ldr	r3, [pc, #328]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800470e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004712:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800471a:	494f      	ldr	r1, [pc, #316]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800471c:	4313      	orrs	r3, r2
 800471e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004722:	e001      	b.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004724:	7cfb      	ldrb	r3, [r7, #19]
 8004726:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004730:	2b00      	cmp	r3, #0
 8004732:	f000 80a0 	beq.w	8004876 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004736:	2300      	movs	r3, #0
 8004738:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800473a:	4b47      	ldr	r3, [pc, #284]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800473c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800473e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d101      	bne.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8004746:	2301      	movs	r3, #1
 8004748:	e000      	b.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800474a:	2300      	movs	r3, #0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d00d      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004750:	4b41      	ldr	r3, [pc, #260]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004754:	4a40      	ldr	r2, [pc, #256]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004756:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800475a:	6593      	str	r3, [r2, #88]	; 0x58
 800475c:	4b3e      	ldr	r3, [pc, #248]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800475e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004760:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004764:	60bb      	str	r3, [r7, #8]
 8004766:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004768:	2301      	movs	r3, #1
 800476a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800476c:	4b3b      	ldr	r3, [pc, #236]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a3a      	ldr	r2, [pc, #232]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004772:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004776:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004778:	f7fc fe68 	bl	800144c <HAL_GetTick>
 800477c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800477e:	e009      	b.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004780:	f7fc fe64 	bl	800144c <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	2b02      	cmp	r3, #2
 800478c:	d902      	bls.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	74fb      	strb	r3, [r7, #19]
        break;
 8004792:	e005      	b.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004794:	4b31      	ldr	r3, [pc, #196]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800479c:	2b00      	cmp	r3, #0
 800479e:	d0ef      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 80047a0:	7cfb      	ldrb	r3, [r7, #19]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d15c      	bne.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80047a6:	4b2c      	ldr	r3, [pc, #176]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80047a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047b0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d01f      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047be:	697a      	ldr	r2, [r7, #20]
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d019      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80047c4:	4b24      	ldr	r3, [pc, #144]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80047c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047ce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80047d0:	4b21      	ldr	r3, [pc, #132]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80047d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047d6:	4a20      	ldr	r2, [pc, #128]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80047d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80047e0:	4b1d      	ldr	r3, [pc, #116]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80047e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047e6:	4a1c      	ldr	r2, [pc, #112]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80047e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80047f0:	4a19      	ldr	r2, [pc, #100]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	f003 0301 	and.w	r3, r3, #1
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d016      	beq.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004802:	f7fc fe23 	bl	800144c <HAL_GetTick>
 8004806:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004808:	e00b      	b.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800480a:	f7fc fe1f 	bl	800144c <HAL_GetTick>
 800480e:	4602      	mov	r2, r0
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	f241 3288 	movw	r2, #5000	; 0x1388
 8004818:	4293      	cmp	r3, r2
 800481a:	d902      	bls.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 800481c:	2303      	movs	r3, #3
 800481e:	74fb      	strb	r3, [r7, #19]
            break;
 8004820:	e006      	b.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004822:	4b0d      	ldr	r3, [pc, #52]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004824:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004828:	f003 0302 	and.w	r3, r3, #2
 800482c:	2b00      	cmp	r3, #0
 800482e:	d0ec      	beq.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8004830:	7cfb      	ldrb	r3, [r7, #19]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d10c      	bne.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004836:	4b08      	ldr	r3, [pc, #32]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004838:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800483c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004846:	4904      	ldr	r1, [pc, #16]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004848:	4313      	orrs	r3, r2
 800484a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800484e:	e009      	b.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004850:	7cfb      	ldrb	r3, [r7, #19]
 8004852:	74bb      	strb	r3, [r7, #18]
 8004854:	e006      	b.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8004856:	bf00      	nop
 8004858:	40021000 	.word	0x40021000
 800485c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004860:	7cfb      	ldrb	r3, [r7, #19]
 8004862:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004864:	7c7b      	ldrb	r3, [r7, #17]
 8004866:	2b01      	cmp	r3, #1
 8004868:	d105      	bne.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800486a:	4b9e      	ldr	r3, [pc, #632]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800486c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800486e:	4a9d      	ldr	r2, [pc, #628]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004870:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004874:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 0301 	and.w	r3, r3, #1
 800487e:	2b00      	cmp	r3, #0
 8004880:	d00a      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004882:	4b98      	ldr	r3, [pc, #608]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004888:	f023 0203 	bic.w	r2, r3, #3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004890:	4994      	ldr	r1, [pc, #592]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004892:	4313      	orrs	r3, r2
 8004894:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0302 	and.w	r3, r3, #2
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d00a      	beq.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80048a4:	4b8f      	ldr	r3, [pc, #572]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80048a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048aa:	f023 020c 	bic.w	r2, r3, #12
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048b2:	498c      	ldr	r1, [pc, #560]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80048b4:	4313      	orrs	r3, r2
 80048b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0304 	and.w	r3, r3, #4
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d00a      	beq.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80048c6:	4b87      	ldr	r3, [pc, #540]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80048c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048cc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d4:	4983      	ldr	r1, [pc, #524]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 0308 	and.w	r3, r3, #8
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d00a      	beq.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80048e8:	4b7e      	ldr	r3, [pc, #504]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80048ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048f6:	497b      	ldr	r1, [pc, #492]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80048f8:	4313      	orrs	r3, r2
 80048fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0310 	and.w	r3, r3, #16
 8004906:	2b00      	cmp	r3, #0
 8004908:	d00a      	beq.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800490a:	4b76      	ldr	r3, [pc, #472]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800490c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004910:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004918:	4972      	ldr	r1, [pc, #456]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800491a:	4313      	orrs	r3, r2
 800491c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0320 	and.w	r3, r3, #32
 8004928:	2b00      	cmp	r3, #0
 800492a:	d00a      	beq.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800492c:	4b6d      	ldr	r3, [pc, #436]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800492e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004932:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800493a:	496a      	ldr	r1, [pc, #424]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800493c:	4313      	orrs	r3, r2
 800493e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800494a:	2b00      	cmp	r3, #0
 800494c:	d00a      	beq.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800494e:	4b65      	ldr	r3, [pc, #404]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004950:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004954:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800495c:	4961      	ldr	r1, [pc, #388]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800495e:	4313      	orrs	r3, r2
 8004960:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800496c:	2b00      	cmp	r3, #0
 800496e:	d00a      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004970:	4b5c      	ldr	r3, [pc, #368]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004976:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800497e:	4959      	ldr	r1, [pc, #356]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004980:	4313      	orrs	r3, r2
 8004982:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800498e:	2b00      	cmp	r3, #0
 8004990:	d00a      	beq.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004992:	4b54      	ldr	r3, [pc, #336]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004994:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004998:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049a0:	4950      	ldr	r1, [pc, #320]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80049a2:	4313      	orrs	r3, r2
 80049a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d00a      	beq.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80049b4:	4b4b      	ldr	r3, [pc, #300]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80049b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ba:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049c2:	4948      	ldr	r1, [pc, #288]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80049c4:	4313      	orrs	r3, r2
 80049c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d00a      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80049d6:	4b43      	ldr	r3, [pc, #268]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80049d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049e4:	493f      	ldr	r1, [pc, #252]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80049e6:	4313      	orrs	r3, r2
 80049e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d028      	beq.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80049f8:	4b3a      	ldr	r3, [pc, #232]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80049fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a06:	4937      	ldr	r1, [pc, #220]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a16:	d106      	bne.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a18:	4b32      	ldr	r3, [pc, #200]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	4a31      	ldr	r2, [pc, #196]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a22:	60d3      	str	r3, [r2, #12]
 8004a24:	e011      	b.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a2a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a2e:	d10c      	bne.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	3304      	adds	r3, #4
 8004a34:	2101      	movs	r1, #1
 8004a36:	4618      	mov	r0, r3
 8004a38:	f000 fd5e 	bl	80054f8 <RCCEx_PLLSAI1_Config>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004a40:	7cfb      	ldrb	r3, [r7, #19]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d001      	beq.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8004a46:	7cfb      	ldrb	r3, [r7, #19]
 8004a48:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d028      	beq.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004a56:	4b23      	ldr	r3, [pc, #140]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a5c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a64:	491f      	ldr	r1, [pc, #124]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a66:	4313      	orrs	r3, r2
 8004a68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a74:	d106      	bne.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a76:	4b1b      	ldr	r3, [pc, #108]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	4a1a      	ldr	r2, [pc, #104]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a80:	60d3      	str	r3, [r2, #12]
 8004a82:	e011      	b.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a88:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a8c:	d10c      	bne.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	3304      	adds	r3, #4
 8004a92:	2101      	movs	r1, #1
 8004a94:	4618      	mov	r0, r3
 8004a96:	f000 fd2f 	bl	80054f8 <RCCEx_PLLSAI1_Config>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a9e:	7cfb      	ldrb	r3, [r7, #19]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d001      	beq.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8004aa4:	7cfb      	ldrb	r3, [r7, #19]
 8004aa6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d02b      	beq.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ab4:	4b0b      	ldr	r3, [pc, #44]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ac2:	4908      	ldr	r1, [pc, #32]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ace:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ad2:	d109      	bne.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ad4:	4b03      	ldr	r3, [pc, #12]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	4a02      	ldr	r2, [pc, #8]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004ada:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ade:	60d3      	str	r3, [r2, #12]
 8004ae0:	e014      	b.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8004ae2:	bf00      	nop
 8004ae4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004aec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004af0:	d10c      	bne.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	3304      	adds	r3, #4
 8004af6:	2101      	movs	r1, #1
 8004af8:	4618      	mov	r0, r3
 8004afa:	f000 fcfd 	bl	80054f8 <RCCEx_PLLSAI1_Config>
 8004afe:	4603      	mov	r3, r0
 8004b00:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b02:	7cfb      	ldrb	r3, [r7, #19]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d001      	beq.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8004b08:	7cfb      	ldrb	r3, [r7, #19]
 8004b0a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d02f      	beq.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004b18:	4b2b      	ldr	r3, [pc, #172]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b1e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b26:	4928      	ldr	r1, [pc, #160]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b36:	d10d      	bne.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	3304      	adds	r3, #4
 8004b3c:	2102      	movs	r1, #2
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f000 fcda 	bl	80054f8 <RCCEx_PLLSAI1_Config>
 8004b44:	4603      	mov	r3, r0
 8004b46:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b48:	7cfb      	ldrb	r3, [r7, #19]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d014      	beq.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8004b4e:	7cfb      	ldrb	r3, [r7, #19]
 8004b50:	74bb      	strb	r3, [r7, #18]
 8004b52:	e011      	b.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b5c:	d10c      	bne.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	3320      	adds	r3, #32
 8004b62:	2102      	movs	r1, #2
 8004b64:	4618      	mov	r0, r3
 8004b66:	f000 fdb7 	bl	80056d8 <RCCEx_PLLSAI2_Config>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b6e:	7cfb      	ldrb	r3, [r7, #19]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d001      	beq.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8004b74:	7cfb      	ldrb	r3, [r7, #19]
 8004b76:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d00a      	beq.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004b84:	4b10      	ldr	r3, [pc, #64]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b8a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b92:	490d      	ldr	r1, [pc, #52]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b94:	4313      	orrs	r3, r2
 8004b96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d00b      	beq.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004ba6:	4b08      	ldr	r3, [pc, #32]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bb6:	4904      	ldr	r1, [pc, #16]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004bbe:	7cbb      	ldrb	r3, [r7, #18]
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3718      	adds	r7, #24
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	40021000 	.word	0x40021000

08004bcc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b088      	sub	sp, #32
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004bde:	d137      	bne.n	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8004be0:	4bb8      	ldr	r3, [pc, #736]	; (8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004be6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bea:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bf2:	d014      	beq.n	8004c1e <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8004bf4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bf8:	d01e      	beq.n	8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
 8004bfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bfe:	d001      	beq.n	8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8004c00:	f000 bc60 	b.w	80054c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004c04:	4baf      	ldr	r3, [pc, #700]	; (8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c0a:	f003 0302 	and.w	r3, r3, #2
 8004c0e:	2b02      	cmp	r3, #2
 8004c10:	f040 8453 	bne.w	80054ba <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
        frequency = LSE_VALUE;
 8004c14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c18:	61fb      	str	r3, [r7, #28]
      break;
 8004c1a:	f000 bc4e 	b.w	80054ba <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004c1e:	4ba9      	ldr	r3, [pc, #676]	; (8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004c20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c24:	f003 0302 	and.w	r3, r3, #2
 8004c28:	2b02      	cmp	r3, #2
 8004c2a:	f040 8448 	bne.w	80054be <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          frequency = LSI_VALUE;
 8004c2e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004c32:	61fb      	str	r3, [r7, #28]
      break;
 8004c34:	f000 bc43 	b.w	80054be <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004c38:	4ba2      	ldr	r3, [pc, #648]	; (8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c44:	f040 843d 	bne.w	80054c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
        frequency = HSE_VALUE / 32U;
 8004c48:	4b9f      	ldr	r3, [pc, #636]	; (8004ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8004c4a:	61fb      	str	r3, [r7, #28]
      break;
 8004c4c:	f000 bc39 	b.w	80054c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c50:	4b9c      	ldr	r3, [pc, #624]	; (8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	f003 0303 	and.w	r3, r3, #3
 8004c58:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	2b02      	cmp	r3, #2
 8004c5e:	d023      	beq.n	8004ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8004c60:	2b03      	cmp	r3, #3
 8004c62:	d02e      	beq.n	8004cc2 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d139      	bne.n	8004cdc <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004c68:	4b96      	ldr	r3, [pc, #600]	; (8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0302 	and.w	r3, r3, #2
 8004c70:	2b02      	cmp	r3, #2
 8004c72:	d116      	bne.n	8004ca2 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004c74:	4b93      	ldr	r3, [pc, #588]	; (8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0308 	and.w	r3, r3, #8
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d005      	beq.n	8004c8c <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
 8004c80:	4b90      	ldr	r3, [pc, #576]	; (8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	091b      	lsrs	r3, r3, #4
 8004c86:	f003 030f 	and.w	r3, r3, #15
 8004c8a:	e005      	b.n	8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 8004c8c:	4b8d      	ldr	r3, [pc, #564]	; (8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004c8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c92:	0a1b      	lsrs	r3, r3, #8
 8004c94:	f003 030f 	and.w	r3, r3, #15
 8004c98:	4a8c      	ldr	r2, [pc, #560]	; (8004ecc <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8004c9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c9e:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8004ca0:	e01f      	b.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	61bb      	str	r3, [r7, #24]
      break;
 8004ca6:	e01c      	b.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004ca8:	4b86      	ldr	r3, [pc, #536]	; (8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cb4:	d102      	bne.n	8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        pllvco = HSI_VALUE;
 8004cb6:	4b86      	ldr	r3, [pc, #536]	; (8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8004cb8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8004cba:	e012      	b.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	61bb      	str	r3, [r7, #24]
      break;
 8004cc0:	e00f      	b.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004cc2:	4b80      	ldr	r3, [pc, #512]	; (8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004cce:	d102      	bne.n	8004cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSE_VALUE;
 8004cd0:	4b80      	ldr	r3, [pc, #512]	; (8004ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 8004cd2:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8004cd4:	e005      	b.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	61bb      	str	r3, [r7, #24]
      break;
 8004cda:	e002      	b.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    default:
      /* No source */
      pllvco = 0U;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	61bb      	str	r3, [r7, #24]
      break;
 8004ce0:	bf00      	nop
    }

    switch(PeriphClk)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ce8:	f000 8345 	beq.w	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
 8004cec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cf0:	d825      	bhi.n	8004d3e <HAL_RCCEx_GetPeriphCLKFreq+0x172>
 8004cf2:	2b10      	cmp	r3, #16
 8004cf4:	f000 81df 	beq.w	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8004cf8:	2b10      	cmp	r3, #16
 8004cfa:	d80f      	bhi.n	8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 8004cfc:	2b02      	cmp	r3, #2
 8004cfe:	f000 8128 	beq.w	8004f52 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8004d02:	2b02      	cmp	r3, #2
 8004d04:	d803      	bhi.n	8004d0e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	f000 80ec 	beq.w	8004ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8004d0c:	e3da      	b.n	80054c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
    switch(PeriphClk)
 8004d0e:	2b04      	cmp	r3, #4
 8004d10:	f000 8169 	beq.w	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
 8004d14:	2b08      	cmp	r3, #8
 8004d16:	f000 819a 	beq.w	800504e <HAL_RCCEx_GetPeriphCLKFreq+0x482>
      break;
 8004d1a:	e3d3      	b.n	80054c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
    switch(PeriphClk)
 8004d1c:	2b40      	cmp	r3, #64	; 0x40
 8004d1e:	f000 82c1 	beq.w	80052a4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8004d22:	2b40      	cmp	r3, #64	; 0x40
 8004d24:	d803      	bhi.n	8004d2e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 8004d26:	2b20      	cmp	r3, #32
 8004d28:	f000 81fd 	beq.w	8005126 <HAL_RCCEx_GetPeriphCLKFreq+0x55a>
      break;
 8004d2c:	e3ca      	b.n	80054c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
    switch(PeriphClk)
 8004d2e:	2b80      	cmp	r3, #128	; 0x80
 8004d30:	f000 82db 	beq.w	80052ea <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
 8004d34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d38:	f000 82fa 	beq.w	8005330 <HAL_RCCEx_GetPeriphCLKFreq+0x764>
      break;
 8004d3c:	e3c2      	b.n	80054c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
    switch(PeriphClk)
 8004d3e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d42:	f000 822d 	beq.w	80051a0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 8004d46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d4a:	d811      	bhi.n	8004d70 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8004d4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d50:	d021      	beq.n	8004d96 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
 8004d52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d56:	d804      	bhi.n	8004d62 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8004d58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d5c:	f000 834c 	beq.w	80053f8 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      break;
 8004d60:	e3b0      	b.n	80054c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
    switch(PeriphClk)
 8004d62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d66:	d01d      	beq.n	8004da4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 8004d68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d6c:	d021      	beq.n	8004db2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
      break;
 8004d6e:	e3a9      	b.n	80054c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
    switch(PeriphClk)
 8004d70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d74:	f000 8285 	beq.w	8005282 <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 8004d78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d7c:	d804      	bhi.n	8004d88 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8004d7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d82:	f000 837e 	beq.w	8005482 <HAL_RCCEx_GetPeriphCLKFreq+0x8b6>
      break;
 8004d86:	e39d      	b.n	80054c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
    switch(PeriphClk)
 8004d88:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004d8c:	d011      	beq.n	8004db2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8004d8e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004d92:	d00e      	beq.n	8004db2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
      break;
 8004d94:	e396      	b.n	80054c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8004d96:	69b9      	ldr	r1, [r7, #24]
 8004d98:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004d9c:	f000 fd76 	bl	800588c <RCCEx_GetSAIxPeriphCLKFreq>
 8004da0:	61f8      	str	r0, [r7, #28]
      break;
 8004da2:	e38f      	b.n	80054c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8004da4:	69b9      	ldr	r1, [r7, #24]
 8004da6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004daa:	f000 fd6f 	bl	800588c <RCCEx_GetSAIxPeriphCLKFreq>
 8004dae:	61f8      	str	r0, [r7, #28]
      break;
 8004db0:	e388      	b.n	80054c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8004db2:	4b44      	ldr	r3, [pc, #272]	; (8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004db8:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8004dbc:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004dc4:	d023      	beq.n	8004e0e <HAL_RCCEx_GetPeriphCLKFreq+0x242>
 8004dc6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004dca:	d003      	beq.n	8004dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8004dcc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004dd0:	d04a      	beq.n	8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
          break;
 8004dd2:	e086      	b.n	8004ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x316>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004dd4:	4b3b      	ldr	r3, [pc, #236]	; (8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 0302 	and.w	r3, r3, #2
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	d17b      	bne.n	8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004de0:	4b38      	ldr	r3, [pc, #224]	; (8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0308 	and.w	r3, r3, #8
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d005      	beq.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8004dec:	4b35      	ldr	r3, [pc, #212]	; (8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	091b      	lsrs	r3, r3, #4
 8004df2:	f003 030f 	and.w	r3, r3, #15
 8004df6:	e005      	b.n	8004e04 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
 8004df8:	4b32      	ldr	r3, [pc, #200]	; (8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004dfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004dfe:	0a1b      	lsrs	r3, r3, #8
 8004e00:	f003 030f 	and.w	r3, r3, #15
 8004e04:	4a31      	ldr	r2, [pc, #196]	; (8004ecc <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8004e06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e0a:	61fb      	str	r3, [r7, #28]
          break;
 8004e0c:	e064      	b.n	8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8004e0e:	4b2d      	ldr	r3, [pc, #180]	; (8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e16:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e1a:	d15f      	bne.n	8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x310>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8004e1c:	4b29      	ldr	r3, [pc, #164]	; (8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e28:	d158      	bne.n	8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x310>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004e2a:	4b26      	ldr	r3, [pc, #152]	; (8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	0a1b      	lsrs	r3, r3, #8
 8004e30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e34:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004e36:	69bb      	ldr	r3, [r7, #24]
 8004e38:	68fa      	ldr	r2, [r7, #12]
 8004e3a:	fb02 f203 	mul.w	r2, r2, r3
 8004e3e:	4b21      	ldr	r3, [pc, #132]	; (8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	091b      	lsrs	r3, r3, #4
 8004e44:	f003 0307 	and.w	r3, r3, #7
 8004e48:	3301      	adds	r3, #1
 8004e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e4e:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8004e50:	4b1c      	ldr	r3, [pc, #112]	; (8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	0d5b      	lsrs	r3, r3, #21
 8004e56:	f003 0303 	and.w	r3, r3, #3
 8004e5a:	3301      	adds	r3, #1
 8004e5c:	005b      	lsls	r3, r3, #1
 8004e5e:	69ba      	ldr	r2, [r7, #24]
 8004e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e64:	61fb      	str	r3, [r7, #28]
          break;
 8004e66:	e039      	b.n	8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x310>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8004e68:	4b16      	ldr	r3, [pc, #88]	; (8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e74:	d134      	bne.n	8004ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8004e76:	4b13      	ldr	r3, [pc, #76]	; (8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e82:	d12d      	bne.n	8004ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004e84:	4b0f      	ldr	r3, [pc, #60]	; (8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004e86:	691b      	ldr	r3, [r3, #16]
 8004e88:	0a1b      	lsrs	r3, r3, #8
 8004e8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e8e:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004e90:	69bb      	ldr	r3, [r7, #24]
 8004e92:	68fa      	ldr	r2, [r7, #12]
 8004e94:	fb02 f203 	mul.w	r2, r2, r3
 8004e98:	4b0a      	ldr	r3, [pc, #40]	; (8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	091b      	lsrs	r3, r3, #4
 8004e9e:	f003 0307 	and.w	r3, r3, #7
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ea8:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8004eaa:	4b06      	ldr	r3, [pc, #24]	; (8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	0d5b      	lsrs	r3, r3, #21
 8004eb0:	f003 0303 	and.w	r3, r3, #3
 8004eb4:	3301      	adds	r3, #1
 8004eb6:	005b      	lsls	r3, r3, #1
 8004eb8:	69ba      	ldr	r2, [r7, #24]
 8004eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ebe:	61fb      	str	r3, [r7, #28]
          break;
 8004ec0:	e00e      	b.n	8004ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8004ec2:	bf00      	nop
 8004ec4:	40021000 	.word	0x40021000
 8004ec8:	0003d090 	.word	0x0003d090
 8004ecc:	08008c1c 	.word	0x08008c1c
 8004ed0:	00f42400 	.word	0x00f42400
 8004ed4:	007a1200 	.word	0x007a1200
          break;
 8004ed8:	bf00      	nop
 8004eda:	e2f3      	b.n	80054c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 8004edc:	bf00      	nop
 8004ede:	e2f1      	b.n	80054c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 8004ee0:	bf00      	nop
        break;
 8004ee2:	e2ef      	b.n	80054c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8004ee4:	4bac      	ldr	r3, [pc, #688]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8004ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eea:	f003 0303 	and.w	r3, r3, #3
 8004eee:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	2b03      	cmp	r3, #3
 8004ef4:	d827      	bhi.n	8004f46 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8004ef6:	a201      	add	r2, pc, #4	; (adr r2, 8004efc <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8004ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004efc:	08004f0d 	.word	0x08004f0d
 8004f00:	08004f15 	.word	0x08004f15
 8004f04:	08004f1d 	.word	0x08004f1d
 8004f08:	08004f31 	.word	0x08004f31
          frequency = HAL_RCC_GetPCLK2Freq();
 8004f0c:	f7ff fb02 	bl	8004514 <HAL_RCC_GetPCLK2Freq>
 8004f10:	61f8      	str	r0, [r7, #28]
          break;
 8004f12:	e01d      	b.n	8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0x384>
          frequency = HAL_RCC_GetSysClockFreq();
 8004f14:	f7ff fa52 	bl	80043bc <HAL_RCC_GetSysClockFreq>
 8004f18:	61f8      	str	r0, [r7, #28]
          break;
 8004f1a:	e019      	b.n	8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0x384>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004f1c:	4b9e      	ldr	r3, [pc, #632]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f28:	d10f      	bne.n	8004f4a <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
            frequency = HSI_VALUE;
 8004f2a:	4b9c      	ldr	r3, [pc, #624]	; (800519c <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8004f2c:	61fb      	str	r3, [r7, #28]
          break;
 8004f2e:	e00c      	b.n	8004f4a <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004f30:	4b99      	ldr	r3, [pc, #612]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8004f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f36:	f003 0302 	and.w	r3, r3, #2
 8004f3a:	2b02      	cmp	r3, #2
 8004f3c:	d107      	bne.n	8004f4e <HAL_RCCEx_GetPeriphCLKFreq+0x382>
            frequency = LSE_VALUE;
 8004f3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f42:	61fb      	str	r3, [r7, #28]
          break;
 8004f44:	e003      	b.n	8004f4e <HAL_RCCEx_GetPeriphCLKFreq+0x382>
          break;
 8004f46:	bf00      	nop
 8004f48:	e2bc      	b.n	80054c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 8004f4a:	bf00      	nop
 8004f4c:	e2ba      	b.n	80054c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 8004f4e:	bf00      	nop
        break;
 8004f50:	e2b8      	b.n	80054c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8004f52:	4b91      	ldr	r3, [pc, #580]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8004f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f58:	f003 030c 	and.w	r3, r3, #12
 8004f5c:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	2b0c      	cmp	r3, #12
 8004f62:	d83a      	bhi.n	8004fda <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 8004f64:	a201      	add	r2, pc, #4	; (adr r2, 8004f6c <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>)
 8004f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f6a:	bf00      	nop
 8004f6c:	08004fa1 	.word	0x08004fa1
 8004f70:	08004fdb 	.word	0x08004fdb
 8004f74:	08004fdb 	.word	0x08004fdb
 8004f78:	08004fdb 	.word	0x08004fdb
 8004f7c:	08004fa9 	.word	0x08004fa9
 8004f80:	08004fdb 	.word	0x08004fdb
 8004f84:	08004fdb 	.word	0x08004fdb
 8004f88:	08004fdb 	.word	0x08004fdb
 8004f8c:	08004fb1 	.word	0x08004fb1
 8004f90:	08004fdb 	.word	0x08004fdb
 8004f94:	08004fdb 	.word	0x08004fdb
 8004f98:	08004fdb 	.word	0x08004fdb
 8004f9c:	08004fc5 	.word	0x08004fc5
          frequency = HAL_RCC_GetPCLK1Freq();
 8004fa0:	f7ff faa2 	bl	80044e8 <HAL_RCC_GetPCLK1Freq>
 8004fa4:	61f8      	str	r0, [r7, #28]
          break;
 8004fa6:	e01d      	b.n	8004fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          frequency = HAL_RCC_GetSysClockFreq();
 8004fa8:	f7ff fa08 	bl	80043bc <HAL_RCC_GetSysClockFreq>
 8004fac:	61f8      	str	r0, [r7, #28]
          break;
 8004fae:	e019      	b.n	8004fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004fb0:	4b79      	ldr	r3, [pc, #484]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fbc:	d10f      	bne.n	8004fde <HAL_RCCEx_GetPeriphCLKFreq+0x412>
            frequency = HSI_VALUE;
 8004fbe:	4b77      	ldr	r3, [pc, #476]	; (800519c <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8004fc0:	61fb      	str	r3, [r7, #28]
          break;
 8004fc2:	e00c      	b.n	8004fde <HAL_RCCEx_GetPeriphCLKFreq+0x412>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004fc4:	4b74      	ldr	r3, [pc, #464]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8004fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fca:	f003 0302 	and.w	r3, r3, #2
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	d107      	bne.n	8004fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
            frequency = LSE_VALUE;
 8004fd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fd6:	61fb      	str	r3, [r7, #28]
          break;
 8004fd8:	e003      	b.n	8004fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
          break;
 8004fda:	bf00      	nop
 8004fdc:	e272      	b.n	80054c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 8004fde:	bf00      	nop
 8004fe0:	e270      	b.n	80054c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 8004fe2:	bf00      	nop
        break;
 8004fe4:	e26e      	b.n	80054c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8004fe6:	4b6c      	ldr	r3, [pc, #432]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8004fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fec:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004ff0:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	2b10      	cmp	r3, #16
 8004ff6:	d00d      	beq.n	8005014 <HAL_RCCEx_GetPeriphCLKFreq+0x448>
 8004ff8:	2b10      	cmp	r3, #16
 8004ffa:	d802      	bhi.n	8005002 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d005      	beq.n	800500c <HAL_RCCEx_GetPeriphCLKFreq+0x440>
          break;
 8005000:	e024      	b.n	800504c <HAL_RCCEx_GetPeriphCLKFreq+0x480>
        switch(srcclk)
 8005002:	2b20      	cmp	r3, #32
 8005004:	d00a      	beq.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 8005006:	2b30      	cmp	r3, #48	; 0x30
 8005008:	d012      	beq.n	8005030 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          break;
 800500a:	e01f      	b.n	800504c <HAL_RCCEx_GetPeriphCLKFreq+0x480>
          frequency = HAL_RCC_GetPCLK1Freq();
 800500c:	f7ff fa6c 	bl	80044e8 <HAL_RCC_GetPCLK1Freq>
 8005010:	61f8      	str	r0, [r7, #28]
          break;
 8005012:	e01b      	b.n	800504c <HAL_RCCEx_GetPeriphCLKFreq+0x480>
          frequency = HAL_RCC_GetSysClockFreq();
 8005014:	f7ff f9d2 	bl	80043bc <HAL_RCC_GetSysClockFreq>
 8005018:	61f8      	str	r0, [r7, #28]
          break;
 800501a:	e017      	b.n	800504c <HAL_RCCEx_GetPeriphCLKFreq+0x480>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800501c:	4b5e      	ldr	r3, [pc, #376]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005024:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005028:	d10d      	bne.n	8005046 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
            frequency = HSI_VALUE;
 800502a:	4b5c      	ldr	r3, [pc, #368]	; (800519c <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 800502c:	61fb      	str	r3, [r7, #28]
          break;
 800502e:	e00a      	b.n	8005046 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005030:	4b59      	ldr	r3, [pc, #356]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8005032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005036:	f003 0302 	and.w	r3, r3, #2
 800503a:	2b02      	cmp	r3, #2
 800503c:	d105      	bne.n	800504a <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = LSE_VALUE;
 800503e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005042:	61fb      	str	r3, [r7, #28]
          break;
 8005044:	e001      	b.n	800504a <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 8005046:	bf00      	nop
 8005048:	e23c      	b.n	80054c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 800504a:	bf00      	nop
        break;
 800504c:	e23a      	b.n	80054c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800504e:	4b52      	ldr	r3, [pc, #328]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8005050:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005054:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005058:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	2b40      	cmp	r3, #64	; 0x40
 800505e:	d00d      	beq.n	800507c <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>
 8005060:	2b40      	cmp	r3, #64	; 0x40
 8005062:	d802      	bhi.n	800506a <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 8005064:	2b00      	cmp	r3, #0
 8005066:	d005      	beq.n	8005074 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
          break;
 8005068:	e024      	b.n	80050b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
        switch(srcclk)
 800506a:	2b80      	cmp	r3, #128	; 0x80
 800506c:	d00a      	beq.n	8005084 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 800506e:	2bc0      	cmp	r3, #192	; 0xc0
 8005070:	d012      	beq.n	8005098 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
          break;
 8005072:	e01f      	b.n	80050b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005074:	f7ff fa38 	bl	80044e8 <HAL_RCC_GetPCLK1Freq>
 8005078:	61f8      	str	r0, [r7, #28]
          break;
 800507a:	e01b      	b.n	80050b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          frequency = HAL_RCC_GetSysClockFreq();
 800507c:	f7ff f99e 	bl	80043bc <HAL_RCC_GetSysClockFreq>
 8005080:	61f8      	str	r0, [r7, #28]
          break;
 8005082:	e017      	b.n	80050b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005084:	4b44      	ldr	r3, [pc, #272]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800508c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005090:	d10d      	bne.n	80050ae <HAL_RCCEx_GetPeriphCLKFreq+0x4e2>
            frequency = HSI_VALUE;
 8005092:	4b42      	ldr	r3, [pc, #264]	; (800519c <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8005094:	61fb      	str	r3, [r7, #28]
          break;
 8005096:	e00a      	b.n	80050ae <HAL_RCCEx_GetPeriphCLKFreq+0x4e2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005098:	4b3f      	ldr	r3, [pc, #252]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800509a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800509e:	f003 0302 	and.w	r3, r3, #2
 80050a2:	2b02      	cmp	r3, #2
 80050a4:	d105      	bne.n	80050b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
            frequency = LSE_VALUE;
 80050a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050aa:	61fb      	str	r3, [r7, #28]
          break;
 80050ac:	e001      	b.n	80050b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
          break;
 80050ae:	bf00      	nop
 80050b0:	e208      	b.n	80054c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 80050b2:	bf00      	nop
        break;
 80050b4:	e206      	b.n	80054c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80050b6:	4b38      	ldr	r3, [pc, #224]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80050b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050c0:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050c8:	d010      	beq.n	80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x520>
 80050ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050ce:	d802      	bhi.n	80050d6 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d007      	beq.n	80050e4 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
          break;
 80050d4:	e026      	b.n	8005124 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
        switch(srcclk)
 80050d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050da:	d00b      	beq.n	80050f4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 80050dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050e0:	d012      	beq.n	8005108 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>
          break;
 80050e2:	e01f      	b.n	8005124 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          frequency = HAL_RCC_GetPCLK1Freq();
 80050e4:	f7ff fa00 	bl	80044e8 <HAL_RCC_GetPCLK1Freq>
 80050e8:	61f8      	str	r0, [r7, #28]
          break;
 80050ea:	e01b      	b.n	8005124 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          frequency = HAL_RCC_GetSysClockFreq();
 80050ec:	f7ff f966 	bl	80043bc <HAL_RCC_GetSysClockFreq>
 80050f0:	61f8      	str	r0, [r7, #28]
          break;
 80050f2:	e017      	b.n	8005124 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80050f4:	4b28      	ldr	r3, [pc, #160]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005100:	d10d      	bne.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x552>
            frequency = HSI_VALUE;
 8005102:	4b26      	ldr	r3, [pc, #152]	; (800519c <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8005104:	61fb      	str	r3, [r7, #28]
          break;
 8005106:	e00a      	b.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x552>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005108:	4b23      	ldr	r3, [pc, #140]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800510a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800510e:	f003 0302 	and.w	r3, r3, #2
 8005112:	2b02      	cmp	r3, #2
 8005114:	d105      	bne.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0x556>
            frequency = LSE_VALUE;
 8005116:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800511a:	61fb      	str	r3, [r7, #28]
          break;
 800511c:	e001      	b.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0x556>
          break;
 800511e:	bf00      	nop
 8005120:	e1d0      	b.n	80054c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 8005122:	bf00      	nop
        break;
 8005124:	e1ce      	b.n	80054c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8005126:	4b1c      	ldr	r3, [pc, #112]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8005128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800512c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005130:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005138:	d010      	beq.n	800515c <HAL_RCCEx_GetPeriphCLKFreq+0x590>
 800513a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800513e:	d802      	bhi.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 8005140:	2b00      	cmp	r3, #0
 8005142:	d007      	beq.n	8005154 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
          break;
 8005144:	e026      	b.n	8005194 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
        switch(srcclk)
 8005146:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800514a:	d00b      	beq.n	8005164 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 800514c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005150:	d012      	beq.n	8005178 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>
          break;
 8005152:	e01f      	b.n	8005194 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005154:	f7ff f9c8 	bl	80044e8 <HAL_RCC_GetPCLK1Freq>
 8005158:	61f8      	str	r0, [r7, #28]
          break;
 800515a:	e01b      	b.n	8005194 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          frequency = HAL_RCC_GetSysClockFreq();
 800515c:	f7ff f92e 	bl	80043bc <HAL_RCC_GetSysClockFreq>
 8005160:	61f8      	str	r0, [r7, #28]
          break;
 8005162:	e017      	b.n	8005194 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005164:	4b0c      	ldr	r3, [pc, #48]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800516c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005170:	d10d      	bne.n	800518e <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
            frequency = HSI_VALUE;
 8005172:	4b0a      	ldr	r3, [pc, #40]	; (800519c <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8005174:	61fb      	str	r3, [r7, #28]
          break;
 8005176:	e00a      	b.n	800518e <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005178:	4b07      	ldr	r3, [pc, #28]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800517a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800517e:	f003 0302 	and.w	r3, r3, #2
 8005182:	2b02      	cmp	r3, #2
 8005184:	d105      	bne.n	8005192 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
            frequency = LSE_VALUE;
 8005186:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800518a:	61fb      	str	r3, [r7, #28]
          break;
 800518c:	e001      	b.n	8005192 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
          break;
 800518e:	bf00      	nop
 8005190:	e198      	b.n	80054c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 8005192:	bf00      	nop
        break;
 8005194:	e196      	b.n	80054c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 8005196:	bf00      	nop
 8005198:	40021000 	.word	0x40021000
 800519c:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80051a0:	4bad      	ldr	r3, [pc, #692]	; (8005458 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 80051a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80051aa:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051b2:	d036      	beq.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
 80051b4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80051b8:	d003      	beq.n	80051c2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 80051ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80051be:	d004      	beq.n	80051ca <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          break;
 80051c0:	e05e      	b.n	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          frequency = HAL_RCC_GetSysClockFreq();
 80051c2:	f7ff f8fb 	bl	80043bc <HAL_RCC_GetSysClockFreq>
 80051c6:	61f8      	str	r0, [r7, #28]
          break;
 80051c8:	e05a      	b.n	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 80051ca:	4ba3      	ldr	r3, [pc, #652]	; (8005458 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051d6:	d150      	bne.n	800527a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 80051d8:	4b9f      	ldr	r3, [pc, #636]	; (8005458 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 80051da:	691b      	ldr	r3, [r3, #16]
 80051dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d04a      	beq.n	800527a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80051e4:	4b9c      	ldr	r3, [pc, #624]	; (8005458 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 80051e6:	691b      	ldr	r3, [r3, #16]
 80051e8:	0a1b      	lsrs	r3, r3, #8
 80051ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051ee:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80051f0:	69bb      	ldr	r3, [r7, #24]
 80051f2:	68fa      	ldr	r2, [r7, #12]
 80051f4:	fb02 f203 	mul.w	r2, r2, r3
 80051f8:	4b97      	ldr	r3, [pc, #604]	; (8005458 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	091b      	lsrs	r3, r3, #4
 80051fe:	f003 0307 	and.w	r3, r3, #7
 8005202:	3301      	adds	r3, #1
 8005204:	fbb2 f3f3 	udiv	r3, r2, r3
 8005208:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800520a:	4b93      	ldr	r3, [pc, #588]	; (8005458 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 800520c:	691b      	ldr	r3, [r3, #16]
 800520e:	0e5b      	lsrs	r3, r3, #25
 8005210:	f003 0303 	and.w	r3, r3, #3
 8005214:	3301      	adds	r3, #1
 8005216:	005b      	lsls	r3, r3, #1
 8005218:	69ba      	ldr	r2, [r7, #24]
 800521a:	fbb2 f3f3 	udiv	r3, r2, r3
 800521e:	61fb      	str	r3, [r7, #28]
          break;
 8005220:	e02b      	b.n	800527a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 8005222:	4b8d      	ldr	r3, [pc, #564]	; (8005458 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800522a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800522e:	d126      	bne.n	800527e <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
 8005230:	4b89      	ldr	r3, [pc, #548]	; (8005458 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8005232:	695b      	ldr	r3, [r3, #20]
 8005234:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005238:	2b00      	cmp	r3, #0
 800523a:	d020      	beq.n	800527e <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800523c:	4b86      	ldr	r3, [pc, #536]	; (8005458 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 800523e:	695b      	ldr	r3, [r3, #20]
 8005240:	0a1b      	lsrs	r3, r3, #8
 8005242:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005246:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005248:	69bb      	ldr	r3, [r7, #24]
 800524a:	68fa      	ldr	r2, [r7, #12]
 800524c:	fb02 f203 	mul.w	r2, r2, r3
 8005250:	4b81      	ldr	r3, [pc, #516]	; (8005458 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	091b      	lsrs	r3, r3, #4
 8005256:	f003 0307 	and.w	r3, r3, #7
 800525a:	3301      	adds	r3, #1
 800525c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005260:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 8005262:	4b7d      	ldr	r3, [pc, #500]	; (8005458 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8005264:	695b      	ldr	r3, [r3, #20]
 8005266:	0e5b      	lsrs	r3, r3, #25
 8005268:	f003 0303 	and.w	r3, r3, #3
 800526c:	3301      	adds	r3, #1
 800526e:	005b      	lsls	r3, r3, #1
 8005270:	69ba      	ldr	r2, [r7, #24]
 8005272:	fbb2 f3f3 	udiv	r3, r2, r3
 8005276:	61fb      	str	r3, [r7, #28]
          break;
 8005278:	e001      	b.n	800527e <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
          break;
 800527a:	bf00      	nop
 800527c:	e122      	b.n	80054c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 800527e:	bf00      	nop
        break;
 8005280:	e120      	b.n	80054c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8005282:	4b75      	ldr	r3, [pc, #468]	; (8005458 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8005284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005288:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800528c:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d103      	bne.n	800529c <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
          frequency = HAL_RCC_GetPCLK2Freq();
 8005294:	f7ff f93e 	bl	8004514 <HAL_RCC_GetPCLK2Freq>
 8005298:	61f8      	str	r0, [r7, #28]
        break;
 800529a:	e113      	b.n	80054c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = HAL_RCC_GetSysClockFreq();
 800529c:	f7ff f88e 	bl	80043bc <HAL_RCC_GetSysClockFreq>
 80052a0:	61f8      	str	r0, [r7, #28]
        break;
 80052a2:	e10f      	b.n	80054c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80052a4:	4b6c      	ldr	r3, [pc, #432]	; (8005458 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 80052a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052aa:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80052ae:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052b6:	d009      	beq.n	80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 80052b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052bc:	d00a      	beq.n	80052d4 <HAL_RCCEx_GetPeriphCLKFreq+0x708>
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d000      	beq.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
          break;
 80052c2:	e011      	b.n	80052e8 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          frequency = HAL_RCC_GetPCLK1Freq();
 80052c4:	f7ff f910 	bl	80044e8 <HAL_RCC_GetPCLK1Freq>
 80052c8:	61f8      	str	r0, [r7, #28]
          break;
 80052ca:	e00d      	b.n	80052e8 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          frequency = HAL_RCC_GetSysClockFreq();
 80052cc:	f7ff f876 	bl	80043bc <HAL_RCC_GetSysClockFreq>
 80052d0:	61f8      	str	r0, [r7, #28]
          break;
 80052d2:	e009      	b.n	80052e8 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80052d4:	4b60      	ldr	r3, [pc, #384]	; (8005458 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052e0:	d101      	bne.n	80052e6 <HAL_RCCEx_GetPeriphCLKFreq+0x71a>
            frequency = HSI_VALUE;
 80052e2:	4b5e      	ldr	r3, [pc, #376]	; (800545c <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80052e4:	61fb      	str	r3, [r7, #28]
          break;
 80052e6:	bf00      	nop
        break;
 80052e8:	e0ec      	b.n	80054c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80052ea:	4b5b      	ldr	r3, [pc, #364]	; (8005458 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 80052ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80052f4:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80052fc:	d009      	beq.n	8005312 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 80052fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005302:	d00a      	beq.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8005304:	2b00      	cmp	r3, #0
 8005306:	d000      	beq.n	800530a <HAL_RCCEx_GetPeriphCLKFreq+0x73e>
          break;
 8005308:	e011      	b.n	800532e <HAL_RCCEx_GetPeriphCLKFreq+0x762>
          frequency = HAL_RCC_GetPCLK1Freq();
 800530a:	f7ff f8ed 	bl	80044e8 <HAL_RCC_GetPCLK1Freq>
 800530e:	61f8      	str	r0, [r7, #28]
          break;
 8005310:	e00d      	b.n	800532e <HAL_RCCEx_GetPeriphCLKFreq+0x762>
          frequency = HAL_RCC_GetSysClockFreq();
 8005312:	f7ff f853 	bl	80043bc <HAL_RCC_GetSysClockFreq>
 8005316:	61f8      	str	r0, [r7, #28]
          break;
 8005318:	e009      	b.n	800532e <HAL_RCCEx_GetPeriphCLKFreq+0x762>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800531a:	4b4f      	ldr	r3, [pc, #316]	; (8005458 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005322:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005326:	d101      	bne.n	800532c <HAL_RCCEx_GetPeriphCLKFreq+0x760>
            frequency = HSI_VALUE;
 8005328:	4b4c      	ldr	r3, [pc, #304]	; (800545c <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 800532a:	61fb      	str	r3, [r7, #28]
          break;
 800532c:	bf00      	nop
        break;
 800532e:	e0c9      	b.n	80054c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8005330:	4b49      	ldr	r3, [pc, #292]	; (8005458 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8005332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005336:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800533a:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005342:	d009      	beq.n	8005358 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8005344:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005348:	d00a      	beq.n	8005360 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800534a:	2b00      	cmp	r3, #0
 800534c:	d000      	beq.n	8005350 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
          break;
 800534e:	e011      	b.n	8005374 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005350:	f7ff f8ca 	bl	80044e8 <HAL_RCC_GetPCLK1Freq>
 8005354:	61f8      	str	r0, [r7, #28]
          break;
 8005356:	e00d      	b.n	8005374 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
          frequency = HAL_RCC_GetSysClockFreq();
 8005358:	f7ff f830 	bl	80043bc <HAL_RCC_GetSysClockFreq>
 800535c:	61f8      	str	r0, [r7, #28]
          break;
 800535e:	e009      	b.n	8005374 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005360:	4b3d      	ldr	r3, [pc, #244]	; (8005458 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005368:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800536c:	d101      	bne.n	8005372 <HAL_RCCEx_GetPeriphCLKFreq+0x7a6>
            frequency = HSI_VALUE;
 800536e:	4b3b      	ldr	r3, [pc, #236]	; (800545c <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8005370:	61fb      	str	r3, [r7, #28]
          break;
 8005372:	bf00      	nop
        break;
 8005374:	e0a6      	b.n	80054c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005376:	4b38      	ldr	r3, [pc, #224]	; (8005458 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8005378:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800537c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005380:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005388:	d010      	beq.n	80053ac <HAL_RCCEx_GetPeriphCLKFreq+0x7e0>
 800538a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800538e:	d802      	bhi.n	8005396 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 8005390:	2b00      	cmp	r3, #0
 8005392:	d007      	beq.n	80053a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7d8>
          break;
 8005394:	e02f      	b.n	80053f6 <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
        switch(srcclk)
 8005396:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800539a:	d012      	beq.n	80053c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
 800539c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80053a0:	d019      	beq.n	80053d6 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          break;
 80053a2:	e028      	b.n	80053f6 <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
          frequency = HAL_RCC_GetPCLK1Freq();
 80053a4:	f7ff f8a0 	bl	80044e8 <HAL_RCC_GetPCLK1Freq>
 80053a8:	61f8      	str	r0, [r7, #28]
          break;
 80053aa:	e024      	b.n	80053f6 <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80053ac:	4b2a      	ldr	r3, [pc, #168]	; (8005458 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 80053ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053b2:	f003 0302 	and.w	r3, r3, #2
 80053b6:	2b02      	cmp	r3, #2
 80053b8:	d118      	bne.n	80053ec <HAL_RCCEx_GetPeriphCLKFreq+0x820>
              frequency = LSI_VALUE;
 80053ba:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80053be:	61fb      	str	r3, [r7, #28]
          break;
 80053c0:	e014      	b.n	80053ec <HAL_RCCEx_GetPeriphCLKFreq+0x820>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80053c2:	4b25      	ldr	r3, [pc, #148]	; (8005458 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053ce:	d10f      	bne.n	80053f0 <HAL_RCCEx_GetPeriphCLKFreq+0x824>
            frequency = HSI_VALUE;
 80053d0:	4b22      	ldr	r3, [pc, #136]	; (800545c <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80053d2:	61fb      	str	r3, [r7, #28]
          break;
 80053d4:	e00c      	b.n	80053f0 <HAL_RCCEx_GetPeriphCLKFreq+0x824>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80053d6:	4b20      	ldr	r3, [pc, #128]	; (8005458 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 80053d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053dc:	f003 0302 	and.w	r3, r3, #2
 80053e0:	2b02      	cmp	r3, #2
 80053e2:	d107      	bne.n	80053f4 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
            frequency = LSE_VALUE;
 80053e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053e8:	61fb      	str	r3, [r7, #28]
          break;
 80053ea:	e003      	b.n	80053f4 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
          break;
 80053ec:	bf00      	nop
 80053ee:	e069      	b.n	80054c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 80053f0:	bf00      	nop
 80053f2:	e067      	b.n	80054c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 80053f4:	bf00      	nop
        break;
 80053f6:	e065      	b.n	80054c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80053f8:	4b17      	ldr	r3, [pc, #92]	; (8005458 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 80053fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053fe:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005402:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800540a:	d010      	beq.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0x862>
 800540c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005410:	d802      	bhi.n	8005418 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>
 8005412:	2b00      	cmp	r3, #0
 8005414:	d007      	beq.n	8005426 <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
          break;
 8005416:	e033      	b.n	8005480 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
        switch(srcclk)
 8005418:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800541c:	d012      	beq.n	8005444 <HAL_RCCEx_GetPeriphCLKFreq+0x878>
 800541e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005422:	d01d      	beq.n	8005460 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          break;
 8005424:	e02c      	b.n	8005480 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005426:	f7ff f85f 	bl	80044e8 <HAL_RCC_GetPCLK1Freq>
 800542a:	61f8      	str	r0, [r7, #28]
          break;
 800542c:	e028      	b.n	8005480 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800542e:	4b0a      	ldr	r3, [pc, #40]	; (8005458 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8005430:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005434:	f003 0302 	and.w	r3, r3, #2
 8005438:	2b02      	cmp	r3, #2
 800543a:	d11c      	bne.n	8005476 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
              frequency = LSI_VALUE;
 800543c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005440:	61fb      	str	r3, [r7, #28]
          break;
 8005442:	e018      	b.n	8005476 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005444:	4b04      	ldr	r3, [pc, #16]	; (8005458 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800544c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005450:	d113      	bne.n	800547a <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
            frequency = HSI_VALUE;
 8005452:	4b02      	ldr	r3, [pc, #8]	; (800545c <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8005454:	61fb      	str	r3, [r7, #28]
          break;
 8005456:	e010      	b.n	800547a <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8005458:	40021000 	.word	0x40021000
 800545c:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005460:	4b1b      	ldr	r3, [pc, #108]	; (80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0x904>)
 8005462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005466:	f003 0302 	and.w	r3, r3, #2
 800546a:	2b02      	cmp	r3, #2
 800546c:	d107      	bne.n	800547e <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
            frequency = LSE_VALUE;
 800546e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005472:	61fb      	str	r3, [r7, #28]
          break;
 8005474:	e003      	b.n	800547e <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
          break;
 8005476:	bf00      	nop
 8005478:	e024      	b.n	80054c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 800547a:	bf00      	nop
 800547c:	e022      	b.n	80054c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 800547e:	bf00      	nop
        break;
 8005480:	e020      	b.n	80054c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8005482:	4b13      	ldr	r3, [pc, #76]	; (80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0x904>)
 8005484:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005488:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800548c:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d003      	beq.n	800549c <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
 8005494:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005498:	d004      	beq.n	80054a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>
          break;
 800549a:	e00d      	b.n	80054b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 800549c:	f7ff f824 	bl	80044e8 <HAL_RCC_GetPCLK1Freq>
 80054a0:	61f8      	str	r0, [r7, #28]
          break;
 80054a2:	e009      	b.n	80054b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80054a4:	4b0a      	ldr	r3, [pc, #40]	; (80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0x904>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054b0:	d101      	bne.n	80054b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
            frequency = HSI_VALUE;
 80054b2:	4b08      	ldr	r3, [pc, #32]	; (80054d4 <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
 80054b4:	61fb      	str	r3, [r7, #28]
          break;
 80054b6:	bf00      	nop
        break;
 80054b8:	e004      	b.n	80054c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
      break;
 80054ba:	bf00      	nop
 80054bc:	e002      	b.n	80054c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
      break;
 80054be:	bf00      	nop
 80054c0:	e000      	b.n	80054c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
      break;
 80054c2:	bf00      	nop
    }
  }

  return(frequency);
 80054c4:	69fb      	ldr	r3, [r7, #28]
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3720      	adds	r7, #32
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	bf00      	nop
 80054d0:	40021000 	.word	0x40021000
 80054d4:	00f42400 	.word	0x00f42400

080054d8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80054d8:	b480      	push	{r7}
 80054da:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80054dc:	4b05      	ldr	r3, [pc, #20]	; (80054f4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a04      	ldr	r2, [pc, #16]	; (80054f4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80054e2:	f043 0304 	orr.w	r3, r3, #4
 80054e6:	6013      	str	r3, [r2, #0]
}
 80054e8:	bf00      	nop
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr
 80054f2:	bf00      	nop
 80054f4:	40021000 	.word	0x40021000

080054f8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005502:	2300      	movs	r3, #0
 8005504:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005506:	4b73      	ldr	r3, [pc, #460]	; (80056d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005508:	68db      	ldr	r3, [r3, #12]
 800550a:	f003 0303 	and.w	r3, r3, #3
 800550e:	2b00      	cmp	r3, #0
 8005510:	d018      	beq.n	8005544 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005512:	4b70      	ldr	r3, [pc, #448]	; (80056d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	f003 0203 	and.w	r2, r3, #3
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	429a      	cmp	r2, r3
 8005520:	d10d      	bne.n	800553e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
       ||
 8005526:	2b00      	cmp	r3, #0
 8005528:	d009      	beq.n	800553e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800552a:	4b6a      	ldr	r3, [pc, #424]	; (80056d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	091b      	lsrs	r3, r3, #4
 8005530:	f003 0307 	and.w	r3, r3, #7
 8005534:	1c5a      	adds	r2, r3, #1
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	685b      	ldr	r3, [r3, #4]
       ||
 800553a:	429a      	cmp	r2, r3
 800553c:	d044      	beq.n	80055c8 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	73fb      	strb	r3, [r7, #15]
 8005542:	e041      	b.n	80055c8 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2b02      	cmp	r3, #2
 800554a:	d00c      	beq.n	8005566 <RCCEx_PLLSAI1_Config+0x6e>
 800554c:	2b03      	cmp	r3, #3
 800554e:	d013      	beq.n	8005578 <RCCEx_PLLSAI1_Config+0x80>
 8005550:	2b01      	cmp	r3, #1
 8005552:	d120      	bne.n	8005596 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005554:	4b5f      	ldr	r3, [pc, #380]	; (80056d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 0302 	and.w	r3, r3, #2
 800555c:	2b00      	cmp	r3, #0
 800555e:	d11d      	bne.n	800559c <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005564:	e01a      	b.n	800559c <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005566:	4b5b      	ldr	r3, [pc, #364]	; (80056d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800556e:	2b00      	cmp	r3, #0
 8005570:	d116      	bne.n	80055a0 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005576:	e013      	b.n	80055a0 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005578:	4b56      	ldr	r3, [pc, #344]	; (80056d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005580:	2b00      	cmp	r3, #0
 8005582:	d10f      	bne.n	80055a4 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005584:	4b53      	ldr	r3, [pc, #332]	; (80056d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800558c:	2b00      	cmp	r3, #0
 800558e:	d109      	bne.n	80055a4 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005594:	e006      	b.n	80055a4 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	73fb      	strb	r3, [r7, #15]
      break;
 800559a:	e004      	b.n	80055a6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800559c:	bf00      	nop
 800559e:	e002      	b.n	80055a6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80055a0:	bf00      	nop
 80055a2:	e000      	b.n	80055a6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80055a4:	bf00      	nop
    }

    if(status == HAL_OK)
 80055a6:	7bfb      	ldrb	r3, [r7, #15]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d10d      	bne.n	80055c8 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80055ac:	4b49      	ldr	r3, [pc, #292]	; (80056d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80055ae:	68db      	ldr	r3, [r3, #12]
 80055b0:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6819      	ldr	r1, [r3, #0]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	3b01      	subs	r3, #1
 80055be:	011b      	lsls	r3, r3, #4
 80055c0:	430b      	orrs	r3, r1
 80055c2:	4944      	ldr	r1, [pc, #272]	; (80056d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80055c4:	4313      	orrs	r3, r2
 80055c6:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80055c8:	7bfb      	ldrb	r3, [r7, #15]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d17d      	bne.n	80056ca <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80055ce:	4b41      	ldr	r3, [pc, #260]	; (80056d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a40      	ldr	r2, [pc, #256]	; (80056d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80055d4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80055d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055da:	f7fb ff37 	bl	800144c <HAL_GetTick>
 80055de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80055e0:	e009      	b.n	80055f6 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80055e2:	f7fb ff33 	bl	800144c <HAL_GetTick>
 80055e6:	4602      	mov	r2, r0
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	1ad3      	subs	r3, r2, r3
 80055ec:	2b02      	cmp	r3, #2
 80055ee:	d902      	bls.n	80055f6 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80055f0:	2303      	movs	r3, #3
 80055f2:	73fb      	strb	r3, [r7, #15]
        break;
 80055f4:	e005      	b.n	8005602 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80055f6:	4b37      	ldr	r3, [pc, #220]	; (80056d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d1ef      	bne.n	80055e2 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8005602:	7bfb      	ldrb	r3, [r7, #15]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d160      	bne.n	80056ca <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d111      	bne.n	8005632 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800560e:	4b31      	ldr	r3, [pc, #196]	; (80056d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005610:	691b      	ldr	r3, [r3, #16]
 8005612:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005616:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	6892      	ldr	r2, [r2, #8]
 800561e:	0211      	lsls	r1, r2, #8
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	68d2      	ldr	r2, [r2, #12]
 8005624:	0912      	lsrs	r2, r2, #4
 8005626:	0452      	lsls	r2, r2, #17
 8005628:	430a      	orrs	r2, r1
 800562a:	492a      	ldr	r1, [pc, #168]	; (80056d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800562c:	4313      	orrs	r3, r2
 800562e:	610b      	str	r3, [r1, #16]
 8005630:	e027      	b.n	8005682 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	2b01      	cmp	r3, #1
 8005636:	d112      	bne.n	800565e <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005638:	4b26      	ldr	r3, [pc, #152]	; (80056d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800563a:	691b      	ldr	r3, [r3, #16]
 800563c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005640:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	6892      	ldr	r2, [r2, #8]
 8005648:	0211      	lsls	r1, r2, #8
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	6912      	ldr	r2, [r2, #16]
 800564e:	0852      	lsrs	r2, r2, #1
 8005650:	3a01      	subs	r2, #1
 8005652:	0552      	lsls	r2, r2, #21
 8005654:	430a      	orrs	r2, r1
 8005656:	491f      	ldr	r1, [pc, #124]	; (80056d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005658:	4313      	orrs	r3, r2
 800565a:	610b      	str	r3, [r1, #16]
 800565c:	e011      	b.n	8005682 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800565e:	4b1d      	ldr	r3, [pc, #116]	; (80056d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005666:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	6892      	ldr	r2, [r2, #8]
 800566e:	0211      	lsls	r1, r2, #8
 8005670:	687a      	ldr	r2, [r7, #4]
 8005672:	6952      	ldr	r2, [r2, #20]
 8005674:	0852      	lsrs	r2, r2, #1
 8005676:	3a01      	subs	r2, #1
 8005678:	0652      	lsls	r2, r2, #25
 800567a:	430a      	orrs	r2, r1
 800567c:	4915      	ldr	r1, [pc, #84]	; (80056d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800567e:	4313      	orrs	r3, r2
 8005680:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005682:	4b14      	ldr	r3, [pc, #80]	; (80056d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a13      	ldr	r2, [pc, #76]	; (80056d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005688:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800568c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800568e:	f7fb fedd 	bl	800144c <HAL_GetTick>
 8005692:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005694:	e009      	b.n	80056aa <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005696:	f7fb fed9 	bl	800144c <HAL_GetTick>
 800569a:	4602      	mov	r2, r0
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	1ad3      	subs	r3, r2, r3
 80056a0:	2b02      	cmp	r3, #2
 80056a2:	d902      	bls.n	80056aa <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80056a4:	2303      	movs	r3, #3
 80056a6:	73fb      	strb	r3, [r7, #15]
          break;
 80056a8:	e005      	b.n	80056b6 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80056aa:	4b0a      	ldr	r3, [pc, #40]	; (80056d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d0ef      	beq.n	8005696 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80056b6:	7bfb      	ldrb	r3, [r7, #15]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d106      	bne.n	80056ca <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80056bc:	4b05      	ldr	r3, [pc, #20]	; (80056d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80056be:	691a      	ldr	r2, [r3, #16]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	699b      	ldr	r3, [r3, #24]
 80056c4:	4903      	ldr	r1, [pc, #12]	; (80056d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80056c6:	4313      	orrs	r3, r2
 80056c8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80056ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3710      	adds	r7, #16
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}
 80056d4:	40021000 	.word	0x40021000

080056d8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b084      	sub	sp, #16
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80056e2:	2300      	movs	r3, #0
 80056e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80056e6:	4b68      	ldr	r3, [pc, #416]	; (8005888 <RCCEx_PLLSAI2_Config+0x1b0>)
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	f003 0303 	and.w	r3, r3, #3
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d018      	beq.n	8005724 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80056f2:	4b65      	ldr	r3, [pc, #404]	; (8005888 <RCCEx_PLLSAI2_Config+0x1b0>)
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	f003 0203 	and.w	r2, r3, #3
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	429a      	cmp	r2, r3
 8005700:	d10d      	bne.n	800571e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
       ||
 8005706:	2b00      	cmp	r3, #0
 8005708:	d009      	beq.n	800571e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800570a:	4b5f      	ldr	r3, [pc, #380]	; (8005888 <RCCEx_PLLSAI2_Config+0x1b0>)
 800570c:	68db      	ldr	r3, [r3, #12]
 800570e:	091b      	lsrs	r3, r3, #4
 8005710:	f003 0307 	and.w	r3, r3, #7
 8005714:	1c5a      	adds	r2, r3, #1
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	685b      	ldr	r3, [r3, #4]
       ||
 800571a:	429a      	cmp	r2, r3
 800571c:	d044      	beq.n	80057a8 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	73fb      	strb	r3, [r7, #15]
 8005722:	e041      	b.n	80057a8 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	2b02      	cmp	r3, #2
 800572a:	d00c      	beq.n	8005746 <RCCEx_PLLSAI2_Config+0x6e>
 800572c:	2b03      	cmp	r3, #3
 800572e:	d013      	beq.n	8005758 <RCCEx_PLLSAI2_Config+0x80>
 8005730:	2b01      	cmp	r3, #1
 8005732:	d120      	bne.n	8005776 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005734:	4b54      	ldr	r3, [pc, #336]	; (8005888 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f003 0302 	and.w	r3, r3, #2
 800573c:	2b00      	cmp	r3, #0
 800573e:	d11d      	bne.n	800577c <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005744:	e01a      	b.n	800577c <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005746:	4b50      	ldr	r3, [pc, #320]	; (8005888 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800574e:	2b00      	cmp	r3, #0
 8005750:	d116      	bne.n	8005780 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005756:	e013      	b.n	8005780 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005758:	4b4b      	ldr	r3, [pc, #300]	; (8005888 <RCCEx_PLLSAI2_Config+0x1b0>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005760:	2b00      	cmp	r3, #0
 8005762:	d10f      	bne.n	8005784 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005764:	4b48      	ldr	r3, [pc, #288]	; (8005888 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800576c:	2b00      	cmp	r3, #0
 800576e:	d109      	bne.n	8005784 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005774:	e006      	b.n	8005784 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	73fb      	strb	r3, [r7, #15]
      break;
 800577a:	e004      	b.n	8005786 <RCCEx_PLLSAI2_Config+0xae>
      break;
 800577c:	bf00      	nop
 800577e:	e002      	b.n	8005786 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8005780:	bf00      	nop
 8005782:	e000      	b.n	8005786 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8005784:	bf00      	nop
    }

    if(status == HAL_OK)
 8005786:	7bfb      	ldrb	r3, [r7, #15]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d10d      	bne.n	80057a8 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800578c:	4b3e      	ldr	r3, [pc, #248]	; (8005888 <RCCEx_PLLSAI2_Config+0x1b0>)
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6819      	ldr	r1, [r3, #0]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	3b01      	subs	r3, #1
 800579e:	011b      	lsls	r3, r3, #4
 80057a0:	430b      	orrs	r3, r1
 80057a2:	4939      	ldr	r1, [pc, #228]	; (8005888 <RCCEx_PLLSAI2_Config+0x1b0>)
 80057a4:	4313      	orrs	r3, r2
 80057a6:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80057a8:	7bfb      	ldrb	r3, [r7, #15]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d167      	bne.n	800587e <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80057ae:	4b36      	ldr	r3, [pc, #216]	; (8005888 <RCCEx_PLLSAI2_Config+0x1b0>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a35      	ldr	r2, [pc, #212]	; (8005888 <RCCEx_PLLSAI2_Config+0x1b0>)
 80057b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057ba:	f7fb fe47 	bl	800144c <HAL_GetTick>
 80057be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80057c0:	e009      	b.n	80057d6 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80057c2:	f7fb fe43 	bl	800144c <HAL_GetTick>
 80057c6:	4602      	mov	r2, r0
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	1ad3      	subs	r3, r2, r3
 80057cc:	2b02      	cmp	r3, #2
 80057ce:	d902      	bls.n	80057d6 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80057d0:	2303      	movs	r3, #3
 80057d2:	73fb      	strb	r3, [r7, #15]
        break;
 80057d4:	e005      	b.n	80057e2 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80057d6:	4b2c      	ldr	r3, [pc, #176]	; (8005888 <RCCEx_PLLSAI2_Config+0x1b0>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d1ef      	bne.n	80057c2 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80057e2:	7bfb      	ldrb	r3, [r7, #15]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d14a      	bne.n	800587e <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d111      	bne.n	8005812 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80057ee:	4b26      	ldr	r3, [pc, #152]	; (8005888 <RCCEx_PLLSAI2_Config+0x1b0>)
 80057f0:	695b      	ldr	r3, [r3, #20]
 80057f2:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80057f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057fa:	687a      	ldr	r2, [r7, #4]
 80057fc:	6892      	ldr	r2, [r2, #8]
 80057fe:	0211      	lsls	r1, r2, #8
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	68d2      	ldr	r2, [r2, #12]
 8005804:	0912      	lsrs	r2, r2, #4
 8005806:	0452      	lsls	r2, r2, #17
 8005808:	430a      	orrs	r2, r1
 800580a:	491f      	ldr	r1, [pc, #124]	; (8005888 <RCCEx_PLLSAI2_Config+0x1b0>)
 800580c:	4313      	orrs	r3, r2
 800580e:	614b      	str	r3, [r1, #20]
 8005810:	e011      	b.n	8005836 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005812:	4b1d      	ldr	r3, [pc, #116]	; (8005888 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005814:	695b      	ldr	r3, [r3, #20]
 8005816:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800581a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	6892      	ldr	r2, [r2, #8]
 8005822:	0211      	lsls	r1, r2, #8
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	6912      	ldr	r2, [r2, #16]
 8005828:	0852      	lsrs	r2, r2, #1
 800582a:	3a01      	subs	r2, #1
 800582c:	0652      	lsls	r2, r2, #25
 800582e:	430a      	orrs	r2, r1
 8005830:	4915      	ldr	r1, [pc, #84]	; (8005888 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005832:	4313      	orrs	r3, r2
 8005834:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005836:	4b14      	ldr	r3, [pc, #80]	; (8005888 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a13      	ldr	r2, [pc, #76]	; (8005888 <RCCEx_PLLSAI2_Config+0x1b0>)
 800583c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005840:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005842:	f7fb fe03 	bl	800144c <HAL_GetTick>
 8005846:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005848:	e009      	b.n	800585e <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800584a:	f7fb fdff 	bl	800144c <HAL_GetTick>
 800584e:	4602      	mov	r2, r0
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	1ad3      	subs	r3, r2, r3
 8005854:	2b02      	cmp	r3, #2
 8005856:	d902      	bls.n	800585e <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8005858:	2303      	movs	r3, #3
 800585a:	73fb      	strb	r3, [r7, #15]
          break;
 800585c:	e005      	b.n	800586a <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800585e:	4b0a      	ldr	r3, [pc, #40]	; (8005888 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005866:	2b00      	cmp	r3, #0
 8005868:	d0ef      	beq.n	800584a <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 800586a:	7bfb      	ldrb	r3, [r7, #15]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d106      	bne.n	800587e <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005870:	4b05      	ldr	r3, [pc, #20]	; (8005888 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005872:	695a      	ldr	r2, [r3, #20]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	695b      	ldr	r3, [r3, #20]
 8005878:	4903      	ldr	r1, [pc, #12]	; (8005888 <RCCEx_PLLSAI2_Config+0x1b0>)
 800587a:	4313      	orrs	r3, r2
 800587c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800587e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005880:	4618      	mov	r0, r3
 8005882:	3710      	adds	r7, #16
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}
 8005888:	40021000 	.word	0x40021000

0800588c <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 800588c:	b480      	push	{r7}
 800588e:	b089      	sub	sp, #36	; 0x24
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8005896:	2300      	movs	r3, #0
 8005898:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800589a:	2300      	movs	r3, #0
 800589c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800589e:	2300      	movs	r3, #0
 80058a0:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058a8:	d10c      	bne.n	80058c4 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80058aa:	4b6e      	ldr	r3, [pc, #440]	; (8005a64 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80058ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058b0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80058b4:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 80058b6:	69bb      	ldr	r3, [r7, #24]
 80058b8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80058bc:	d112      	bne.n	80058e4 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80058be:	4b6a      	ldr	r3, [pc, #424]	; (8005a68 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 80058c0:	61fb      	str	r3, [r7, #28]
 80058c2:	e00f      	b.n	80058e4 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058ca:	d10b      	bne.n	80058e4 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80058cc:	4b65      	ldr	r3, [pc, #404]	; (8005a64 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80058ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058d2:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 80058d6:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 80058d8:	69bb      	ldr	r3, [r7, #24]
 80058da:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80058de:	d101      	bne.n	80058e4 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 80058e0:	4b61      	ldr	r3, [pc, #388]	; (8005a68 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 80058e2:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 80058e4:	69fb      	ldr	r3, [r7, #28]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	f040 80b4 	bne.w	8005a54 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 80058f0:	69bb      	ldr	r3, [r7, #24]
 80058f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80058f6:	d003      	beq.n	8005900 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 80058f8:	69bb      	ldr	r3, [r7, #24]
 80058fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80058fe:	d135      	bne.n	800596c <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8005900:	4b58      	ldr	r3, [pc, #352]	; (8005a64 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005908:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800590c:	f040 80a1 	bne.w	8005a52 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 8005910:	4b54      	ldr	r3, [pc, #336]	; (8005a64 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005918:	2b00      	cmp	r3, #0
 800591a:	f000 809a 	beq.w	8005a52 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800591e:	4b51      	ldr	r3, [pc, #324]	; (8005a64 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	091b      	lsrs	r3, r3, #4
 8005924:	f003 0307 	and.w	r3, r3, #7
 8005928:	3301      	adds	r3, #1
 800592a:	693a      	ldr	r2, [r7, #16]
 800592c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005930:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005932:	4b4c      	ldr	r3, [pc, #304]	; (8005a64 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005934:	68db      	ldr	r3, [r3, #12]
 8005936:	0a1b      	lsrs	r3, r3, #8
 8005938:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800593c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d10a      	bne.n	800595a <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8005944:	4b47      	ldr	r3, [pc, #284]	; (8005a64 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800594c:	2b00      	cmp	r3, #0
 800594e:	d002      	beq.n	8005956 <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 8005950:	2311      	movs	r3, #17
 8005952:	617b      	str	r3, [r7, #20]
 8005954:	e001      	b.n	800595a <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 8005956:	2307      	movs	r3, #7
 8005958:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	68fa      	ldr	r2, [r7, #12]
 800595e:	fb02 f203 	mul.w	r2, r2, r3
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	fbb2 f3f3 	udiv	r3, r2, r3
 8005968:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800596a:	e072      	b.n	8005a52 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 800596c:	69bb      	ldr	r3, [r7, #24]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d133      	bne.n	80059da <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8005972:	4b3c      	ldr	r3, [pc, #240]	; (8005a64 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800597a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800597e:	d169      	bne.n	8005a54 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8005980:	4b38      	ldr	r3, [pc, #224]	; (8005a64 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005982:	691b      	ldr	r3, [r3, #16]
 8005984:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005988:	2b00      	cmp	r3, #0
 800598a:	d063      	beq.n	8005a54 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800598c:	4b35      	ldr	r3, [pc, #212]	; (8005a64 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800598e:	68db      	ldr	r3, [r3, #12]
 8005990:	091b      	lsrs	r3, r3, #4
 8005992:	f003 0307 	and.w	r3, r3, #7
 8005996:	3301      	adds	r3, #1
 8005998:	693a      	ldr	r2, [r7, #16]
 800599a:	fbb2 f3f3 	udiv	r3, r2, r3
 800599e:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80059a0:	4b30      	ldr	r3, [pc, #192]	; (8005a64 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80059a2:	691b      	ldr	r3, [r3, #16]
 80059a4:	0a1b      	lsrs	r3, r3, #8
 80059a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059aa:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d10a      	bne.n	80059c8 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 80059b2:	4b2c      	ldr	r3, [pc, #176]	; (8005a64 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80059b4:	691b      	ldr	r3, [r3, #16]
 80059b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d002      	beq.n	80059c4 <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 80059be:	2311      	movs	r3, #17
 80059c0:	617b      	str	r3, [r7, #20]
 80059c2:	e001      	b.n	80059c8 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 80059c4:	2307      	movs	r3, #7
 80059c6:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	68fa      	ldr	r2, [r7, #12]
 80059cc:	fb02 f203 	mul.w	r2, r2, r3
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80059d6:	61fb      	str	r3, [r7, #28]
 80059d8:	e03c      	b.n	8005a54 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 80059da:	69bb      	ldr	r3, [r7, #24]
 80059dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059e0:	d003      	beq.n	80059ea <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80059e8:	d134      	bne.n	8005a54 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 80059ea:	4b1e      	ldr	r3, [pc, #120]	; (8005a64 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059f6:	d12d      	bne.n	8005a54 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 80059f8:	4b1a      	ldr	r3, [pc, #104]	; (8005a64 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80059fa:	695b      	ldr	r3, [r3, #20]
 80059fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d027      	beq.n	8005a54 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005a04:	4b17      	ldr	r3, [pc, #92]	; (8005a64 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	091b      	lsrs	r3, r3, #4
 8005a0a:	f003 0307 	and.w	r3, r3, #7
 8005a0e:	3301      	adds	r3, #1
 8005a10:	693a      	ldr	r2, [r7, #16]
 8005a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a16:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8005a18:	4b12      	ldr	r3, [pc, #72]	; (8005a64 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005a1a:	695b      	ldr	r3, [r3, #20]
 8005a1c:	0a1b      	lsrs	r3, r3, #8
 8005a1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a22:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d10a      	bne.n	8005a40 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8005a2a:	4b0e      	ldr	r3, [pc, #56]	; (8005a64 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005a2c:	695b      	ldr	r3, [r3, #20]
 8005a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d002      	beq.n	8005a3c <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 8005a36:	2311      	movs	r3, #17
 8005a38:	617b      	str	r3, [r7, #20]
 8005a3a:	e001      	b.n	8005a40 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 8005a3c:	2307      	movs	r3, #7
 8005a3e:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	68fa      	ldr	r2, [r7, #12]
 8005a44:	fb02 f203 	mul.w	r2, r2, r3
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a4e:	61fb      	str	r3, [r7, #28]
 8005a50:	e000      	b.n	8005a54 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8005a52:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8005a54:	69fb      	ldr	r3, [r7, #28]
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3724      	adds	r7, #36	; 0x24
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr
 8005a62:	bf00      	nop
 8005a64:	40021000 	.word	0x40021000
 8005a68:	001fff68 	.word	0x001fff68

08005a6c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b088      	sub	sp, #32
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d101      	bne.n	8005a7e <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e153      	b.n	8005d26 <HAL_SAI_Init+0x2ba>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d106      	bne.n	8005a98 <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f7fb fb24 	bl	80010e0 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f000 f957 	bl	8005d4c <SAI_Disable>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d001      	beq.n	8005aa8 <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	e13e      	b.n	8005d26 <HAL_SAI_Init+0x2ba>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2202      	movs	r2, #2
 8005aac:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d007      	beq.n	8005ac8 <HAL_SAI_Init+0x5c>
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d302      	bcc.n	8005ac2 <HAL_SAI_Init+0x56>
 8005abc:	2b02      	cmp	r3, #2
 8005abe:	d006      	beq.n	8005ace <HAL_SAI_Init+0x62>
 8005ac0:	e008      	b.n	8005ad4 <HAL_SAI_Init+0x68>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	61fb      	str	r3, [r7, #28]
      break;
 8005ac6:	e008      	b.n	8005ada <HAL_SAI_Init+0x6e>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8005ac8:	2310      	movs	r3, #16
 8005aca:	61fb      	str	r3, [r7, #28]
      break;
 8005acc:	e005      	b.n	8005ada <HAL_SAI_Init+0x6e>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8005ace:	2320      	movs	r3, #32
 8005ad0:	61fb      	str	r3, [r7, #28]
      break;
 8005ad2:	e002      	b.n	8005ada <HAL_SAI_Init+0x6e>
    default :
      tmpregisterGCR = 0;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	61fb      	str	r3, [r7, #28]
      break;
 8005ad8:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	2b03      	cmp	r3, #3
 8005ae0:	d81d      	bhi.n	8005b1e <HAL_SAI_Init+0xb2>
 8005ae2:	a201      	add	r2, pc, #4	; (adr r2, 8005ae8 <HAL_SAI_Init+0x7c>)
 8005ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ae8:	08005af9 	.word	0x08005af9
 8005aec:	08005aff 	.word	0x08005aff
 8005af0:	08005b07 	.word	0x08005b07
 8005af4:	08005b0f 	.word	0x08005b0f
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8005af8:	2300      	movs	r3, #0
 8005afa:	617b      	str	r3, [r7, #20]
      break;
 8005afc:	e012      	b.n	8005b24 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8005afe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b02:	617b      	str	r3, [r7, #20]
      break;
 8005b04:	e00e      	b.n	8005b24 <HAL_SAI_Init+0xb8>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005b06:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005b0a:	617b      	str	r3, [r7, #20]
      break;
 8005b0c:	e00a      	b.n	8005b24 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005b0e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005b12:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	f043 0301 	orr.w	r3, r3, #1
 8005b1a:	61fb      	str	r3, [r7, #28]
      break;
 8005b1c:	e002      	b.n	8005b24 <HAL_SAI_Init+0xb8>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	617b      	str	r3, [r7, #20]
      break;
 8005b22:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a81      	ldr	r2, [pc, #516]	; (8005d30 <HAL_SAI_Init+0x2c4>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d004      	beq.n	8005b38 <HAL_SAI_Init+0xcc>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a80      	ldr	r2, [pc, #512]	; (8005d34 <HAL_SAI_Init+0x2c8>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d103      	bne.n	8005b40 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8005b38:	4a7f      	ldr	r2, [pc, #508]	; (8005d38 <HAL_SAI_Init+0x2cc>)
 8005b3a:	69fb      	ldr	r3, [r7, #28]
 8005b3c:	6013      	str	r3, [r2, #0]
 8005b3e:	e002      	b.n	8005b46 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8005b40:	4a7e      	ldr	r2, [pc, #504]	; (8005d3c <HAL_SAI_Init+0x2d0>)
 8005b42:	69fb      	ldr	r3, [r7, #28]
 8005b44:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	69db      	ldr	r3, [r3, #28]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d041      	beq.n	8005bd2 <HAL_SAI_Init+0x166>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a77      	ldr	r2, [pc, #476]	; (8005d30 <HAL_SAI_Init+0x2c4>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d004      	beq.n	8005b62 <HAL_SAI_Init+0xf6>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a75      	ldr	r2, [pc, #468]	; (8005d34 <HAL_SAI_Init+0x2c8>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d105      	bne.n	8005b6e <HAL_SAI_Init+0x102>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8005b62:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005b66:	f7ff f831 	bl	8004bcc <HAL_RCCEx_GetPeriphCLKFreq>
 8005b6a:	6138      	str	r0, [r7, #16]
 8005b6c:	e004      	b.n	8005b78 <HAL_SAI_Init+0x10c>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8005b6e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005b72:	f7ff f82b 	bl	8004bcc <HAL_RCCEx_GetPeriphCLKFreq>
 8005b76:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 8005b78:	693a      	ldr	r2, [r7, #16]
 8005b7a:	4613      	mov	r3, r2
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	4413      	add	r3, r2
 8005b80:	005b      	lsls	r3, r3, #1
 8005b82:	461a      	mov	r2, r3
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	69db      	ldr	r3, [r3, #28]
 8005b88:	025b      	lsls	r3, r3, #9
 8005b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b8e:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	4a6b      	ldr	r2, [pc, #428]	; (8005d40 <HAL_SAI_Init+0x2d4>)
 8005b94:	fba2 2303 	umull	r2, r3, r2, r3
 8005b98:	08da      	lsrs	r2, r3, #3
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8005b9e:	68f9      	ldr	r1, [r7, #12]
 8005ba0:	4b67      	ldr	r3, [pc, #412]	; (8005d40 <HAL_SAI_Init+0x2d4>)
 8005ba2:	fba3 2301 	umull	r2, r3, r3, r1
 8005ba6:	08da      	lsrs	r2, r3, #3
 8005ba8:	4613      	mov	r3, r2
 8005baa:	009b      	lsls	r3, r3, #2
 8005bac:	4413      	add	r3, r2
 8005bae:	005b      	lsls	r3, r3, #1
 8005bb0:	1aca      	subs	r2, r1, r3
 8005bb2:	2a08      	cmp	r2, #8
 8005bb4:	d904      	bls.n	8005bc0 <HAL_SAI_Init+0x154>
    {
      hsai->Init.Mckdiv += 1U;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6a1b      	ldr	r3, [r3, #32]
 8005bba:	1c5a      	adds	r2, r3, #1
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bc4:	2b04      	cmp	r3, #4
 8005bc6:	d104      	bne.n	8005bd2 <HAL_SAI_Init+0x166>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6a1b      	ldr	r3, [r3, #32]
 8005bcc:	085a      	lsrs	r2, r3, #1
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d003      	beq.n	8005be2 <HAL_SAI_Init+0x176>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	2b02      	cmp	r3, #2
 8005be0:	d109      	bne.n	8005bf6 <HAL_SAI_Init+0x18a>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d101      	bne.n	8005bee <HAL_SAI_Init+0x182>
 8005bea:	2300      	movs	r3, #0
 8005bec:	e001      	b.n	8005bf2 <HAL_SAI_Init+0x186>
 8005bee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005bf2:	61bb      	str	r3, [r7, #24]
 8005bf4:	e008      	b.n	8005c08 <HAL_SAI_Init+0x19c>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d102      	bne.n	8005c04 <HAL_SAI_Init+0x198>
 8005bfe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c02:	e000      	b.n	8005c06 <HAL_SAI_Init+0x19a>
 8005c04:	2300      	movs	r3, #0
 8005c06:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	6819      	ldr	r1, [r3, #0]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	4b4c      	ldr	r3, [pc, #304]	; (8005d44 <HAL_SAI_Init+0x2d8>)
 8005c14:	400b      	ands	r3, r1
 8005c16:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	6819      	ldr	r1, [r3, #0]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	685a      	ldr	r2, [r3, #4]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c26:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005c2c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c32:	431a      	orrs	r2, r3
 8005c34:	69bb      	ldr	r3, [r7, #24]
 8005c36:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                             \
 8005c40:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	691b      	ldr	r3, [r3, #16]
 8005c46:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005c4c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6a1b      	ldr	r3, [r3, #32]
 8005c52:	051b      	lsls	r3, r3, #20
 8005c54:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	430a      	orrs	r2, r1
 8005c5c:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	6812      	ldr	r2, [r2, #0]
 8005c68:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8005c6c:	f023 030f 	bic.w	r3, r3, #15
 8005c70:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	6859      	ldr	r1, [r3, #4]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	699a      	ldr	r2, [r3, #24]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c80:	431a      	orrs	r2, r3
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c86:	431a      	orrs	r2, r3
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	430a      	orrs	r2, r1
 8005c8e:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	6899      	ldr	r1, [r3, #8]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	4b2b      	ldr	r3, [pc, #172]	; (8005d48 <HAL_SAI_Init+0x2dc>)
 8005c9c:	400b      	ands	r3, r1
 8005c9e:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	6899      	ldr	r1, [r3, #8]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005caa:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005cb0:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 8005cb6:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8005cbc:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cc2:	3b01      	subs	r3, #1
 8005cc4:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8005cc6:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	430a      	orrs	r2, r1
 8005cce:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	68d9      	ldr	r1, [r3, #12]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	f24f 0320 	movw	r3, #61472	; 0xf020
 8005cde:	400b      	ands	r3, r1
 8005ce0:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	68d9      	ldr	r1, [r3, #12]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cf0:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cf6:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8005cf8:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cfe:	3b01      	subs	r3, #1
 8005d00:	021b      	lsls	r3, r3, #8
 8005d02:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	430a      	orrs	r2, r1
 8005d0a:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005d24:	2300      	movs	r3, #0
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3720      	adds	r7, #32
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}
 8005d2e:	bf00      	nop
 8005d30:	40015404 	.word	0x40015404
 8005d34:	40015424 	.word	0x40015424
 8005d38:	40015400 	.word	0x40015400
 8005d3c:	40015800 	.word	0x40015800
 8005d40:	cccccccd 	.word	0xcccccccd
 8005d44:	ff05c010 	.word	0xff05c010
 8005d48:	fff88000 	.word	0xfff88000

08005d4c <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b085      	sub	sp, #20
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8005d54:	4b18      	ldr	r3, [pc, #96]	; (8005db8 <SAI_Disable+0x6c>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a18      	ldr	r2, [pc, #96]	; (8005dbc <SAI_Disable+0x70>)
 8005d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d5e:	0b1b      	lsrs	r3, r3, #12
 8005d60:	009b      	lsls	r3, r3, #2
 8005d62:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8005d64:	2300      	movs	r3, #0
 8005d66:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005d76:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d10a      	bne.n	8005d94 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d84:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8005d8e:	2303      	movs	r3, #3
 8005d90:	72fb      	strb	r3, [r7, #11]
      break;
 8005d92:	e009      	b.n	8005da8 <SAI_Disable+0x5c>
    }
    count--;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	3b01      	subs	r3, #1
 8005d98:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d1e7      	bne.n	8005d78 <SAI_Disable+0x2c>

  return status;
 8005da8:	7afb      	ldrb	r3, [r7, #11]
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3714      	adds	r7, #20
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr
 8005db6:	bf00      	nop
 8005db8:	20000000 	.word	0x20000000
 8005dbc:	95cbec1b 	.word	0x95cbec1b

08005dc0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b084      	sub	sp, #16
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d101      	bne.n	8005dd2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e095      	b.n	8005efe <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d108      	bne.n	8005dec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005de2:	d009      	beq.n	8005df8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	61da      	str	r2, [r3, #28]
 8005dea:	e005      	b.n	8005df8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2200      	movs	r2, #0
 8005df0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2200      	movs	r2, #0
 8005df6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d106      	bne.n	8005e18 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f7fb f8dc 	bl	8000fd0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2202      	movs	r2, #2
 8005e1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e2e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005e38:	d902      	bls.n	8005e40 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	60fb      	str	r3, [r7, #12]
 8005e3e:	e002      	b.n	8005e46 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005e40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e44:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	68db      	ldr	r3, [r3, #12]
 8005e4a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005e4e:	d007      	beq.n	8005e60 <HAL_SPI_Init+0xa0>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005e58:	d002      	beq.n	8005e60 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005e70:	431a      	orrs	r2, r3
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	691b      	ldr	r3, [r3, #16]
 8005e76:	f003 0302 	and.w	r3, r3, #2
 8005e7a:	431a      	orrs	r2, r3
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	695b      	ldr	r3, [r3, #20]
 8005e80:	f003 0301 	and.w	r3, r3, #1
 8005e84:	431a      	orrs	r2, r3
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	699b      	ldr	r3, [r3, #24]
 8005e8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e8e:	431a      	orrs	r2, r3
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	69db      	ldr	r3, [r3, #28]
 8005e94:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e98:	431a      	orrs	r2, r3
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6a1b      	ldr	r3, [r3, #32]
 8005e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ea2:	ea42 0103 	orr.w	r1, r2, r3
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eaa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	430a      	orrs	r2, r1
 8005eb4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	699b      	ldr	r3, [r3, #24]
 8005eba:	0c1b      	lsrs	r3, r3, #16
 8005ebc:	f003 0204 	and.w	r2, r3, #4
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec4:	f003 0310 	and.w	r3, r3, #16
 8005ec8:	431a      	orrs	r2, r3
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ece:	f003 0308 	and.w	r3, r3, #8
 8005ed2:	431a      	orrs	r2, r3
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	68db      	ldr	r3, [r3, #12]
 8005ed8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005edc:	ea42 0103 	orr.w	r1, r2, r3
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	430a      	orrs	r2, r1
 8005eec:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005efc:	2300      	movs	r3, #0
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3710      	adds	r7, #16
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}

08005f06 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f06:	b580      	push	{r7, lr}
 8005f08:	b082      	sub	sp, #8
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d101      	bne.n	8005f18 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f14:	2301      	movs	r3, #1
 8005f16:	e040      	b.n	8005f9a <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d106      	bne.n	8005f2e <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2200      	movs	r2, #0
 8005f24:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f7fb f895 	bl	8001058 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2224      	movs	r2, #36	; 0x24
 8005f32:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f022 0201 	bic.w	r2, r2, #1
 8005f42:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f000 f82d 	bl	8005fa4 <UART_SetConfig>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d101      	bne.n	8005f54 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	e022      	b.n	8005f9a <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d002      	beq.n	8005f62 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f000 faab 	bl	80064b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	685a      	ldr	r2, [r3, #4]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f70:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	689a      	ldr	r2, [r3, #8]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f80:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f042 0201 	orr.w	r2, r2, #1
 8005f90:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f000 fb32 	bl	80065fc <UART_CheckIdleState>
 8005f98:	4603      	mov	r3, r0
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3708      	adds	r7, #8
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}
	...

08005fa4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fa4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005fa8:	b088      	sub	sp, #32
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	689a      	ldr	r2, [r3, #8]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	691b      	ldr	r3, [r3, #16]
 8005fba:	431a      	orrs	r2, r3
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	695b      	ldr	r3, [r3, #20]
 8005fc0:	431a      	orrs	r2, r3
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	69db      	ldr	r3, [r3, #28]
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	4bac      	ldr	r3, [pc, #688]	; (8006284 <UART_SetConfig+0x2e0>)
 8005fd2:	4013      	ands	r3, r2
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	6812      	ldr	r2, [r2, #0]
 8005fd8:	69f9      	ldr	r1, [r7, #28]
 8005fda:	430b      	orrs	r3, r1
 8005fdc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	68da      	ldr	r2, [r3, #12]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	430a      	orrs	r2, r1
 8005ff2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	699b      	ldr	r3, [r3, #24]
 8005ff8:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4aa2      	ldr	r2, [pc, #648]	; (8006288 <UART_SetConfig+0x2e4>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d004      	beq.n	800600e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6a1b      	ldr	r3, [r3, #32]
 8006008:	69fa      	ldr	r2, [r7, #28]
 800600a:	4313      	orrs	r3, r2
 800600c:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	69fa      	ldr	r2, [r7, #28]
 800601e:	430a      	orrs	r2, r1
 8006020:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a99      	ldr	r2, [pc, #612]	; (800628c <UART_SetConfig+0x2e8>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d121      	bne.n	8006070 <UART_SetConfig+0xcc>
 800602c:	4b98      	ldr	r3, [pc, #608]	; (8006290 <UART_SetConfig+0x2ec>)
 800602e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006032:	f003 0303 	and.w	r3, r3, #3
 8006036:	2b03      	cmp	r3, #3
 8006038:	d816      	bhi.n	8006068 <UART_SetConfig+0xc4>
 800603a:	a201      	add	r2, pc, #4	; (adr r2, 8006040 <UART_SetConfig+0x9c>)
 800603c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006040:	08006051 	.word	0x08006051
 8006044:	0800605d 	.word	0x0800605d
 8006048:	08006057 	.word	0x08006057
 800604c:	08006063 	.word	0x08006063
 8006050:	2301      	movs	r3, #1
 8006052:	76fb      	strb	r3, [r7, #27]
 8006054:	e0e8      	b.n	8006228 <UART_SetConfig+0x284>
 8006056:	2302      	movs	r3, #2
 8006058:	76fb      	strb	r3, [r7, #27]
 800605a:	e0e5      	b.n	8006228 <UART_SetConfig+0x284>
 800605c:	2304      	movs	r3, #4
 800605e:	76fb      	strb	r3, [r7, #27]
 8006060:	e0e2      	b.n	8006228 <UART_SetConfig+0x284>
 8006062:	2308      	movs	r3, #8
 8006064:	76fb      	strb	r3, [r7, #27]
 8006066:	e0df      	b.n	8006228 <UART_SetConfig+0x284>
 8006068:	2310      	movs	r3, #16
 800606a:	76fb      	strb	r3, [r7, #27]
 800606c:	bf00      	nop
 800606e:	e0db      	b.n	8006228 <UART_SetConfig+0x284>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a87      	ldr	r2, [pc, #540]	; (8006294 <UART_SetConfig+0x2f0>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d134      	bne.n	80060e4 <UART_SetConfig+0x140>
 800607a:	4b85      	ldr	r3, [pc, #532]	; (8006290 <UART_SetConfig+0x2ec>)
 800607c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006080:	f003 030c 	and.w	r3, r3, #12
 8006084:	2b0c      	cmp	r3, #12
 8006086:	d829      	bhi.n	80060dc <UART_SetConfig+0x138>
 8006088:	a201      	add	r2, pc, #4	; (adr r2, 8006090 <UART_SetConfig+0xec>)
 800608a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800608e:	bf00      	nop
 8006090:	080060c5 	.word	0x080060c5
 8006094:	080060dd 	.word	0x080060dd
 8006098:	080060dd 	.word	0x080060dd
 800609c:	080060dd 	.word	0x080060dd
 80060a0:	080060d1 	.word	0x080060d1
 80060a4:	080060dd 	.word	0x080060dd
 80060a8:	080060dd 	.word	0x080060dd
 80060ac:	080060dd 	.word	0x080060dd
 80060b0:	080060cb 	.word	0x080060cb
 80060b4:	080060dd 	.word	0x080060dd
 80060b8:	080060dd 	.word	0x080060dd
 80060bc:	080060dd 	.word	0x080060dd
 80060c0:	080060d7 	.word	0x080060d7
 80060c4:	2300      	movs	r3, #0
 80060c6:	76fb      	strb	r3, [r7, #27]
 80060c8:	e0ae      	b.n	8006228 <UART_SetConfig+0x284>
 80060ca:	2302      	movs	r3, #2
 80060cc:	76fb      	strb	r3, [r7, #27]
 80060ce:	e0ab      	b.n	8006228 <UART_SetConfig+0x284>
 80060d0:	2304      	movs	r3, #4
 80060d2:	76fb      	strb	r3, [r7, #27]
 80060d4:	e0a8      	b.n	8006228 <UART_SetConfig+0x284>
 80060d6:	2308      	movs	r3, #8
 80060d8:	76fb      	strb	r3, [r7, #27]
 80060da:	e0a5      	b.n	8006228 <UART_SetConfig+0x284>
 80060dc:	2310      	movs	r3, #16
 80060de:	76fb      	strb	r3, [r7, #27]
 80060e0:	bf00      	nop
 80060e2:	e0a1      	b.n	8006228 <UART_SetConfig+0x284>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a6b      	ldr	r2, [pc, #428]	; (8006298 <UART_SetConfig+0x2f4>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d120      	bne.n	8006130 <UART_SetConfig+0x18c>
 80060ee:	4b68      	ldr	r3, [pc, #416]	; (8006290 <UART_SetConfig+0x2ec>)
 80060f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060f4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80060f8:	2b10      	cmp	r3, #16
 80060fa:	d00f      	beq.n	800611c <UART_SetConfig+0x178>
 80060fc:	2b10      	cmp	r3, #16
 80060fe:	d802      	bhi.n	8006106 <UART_SetConfig+0x162>
 8006100:	2b00      	cmp	r3, #0
 8006102:	d005      	beq.n	8006110 <UART_SetConfig+0x16c>
 8006104:	e010      	b.n	8006128 <UART_SetConfig+0x184>
 8006106:	2b20      	cmp	r3, #32
 8006108:	d005      	beq.n	8006116 <UART_SetConfig+0x172>
 800610a:	2b30      	cmp	r3, #48	; 0x30
 800610c:	d009      	beq.n	8006122 <UART_SetConfig+0x17e>
 800610e:	e00b      	b.n	8006128 <UART_SetConfig+0x184>
 8006110:	2300      	movs	r3, #0
 8006112:	76fb      	strb	r3, [r7, #27]
 8006114:	e088      	b.n	8006228 <UART_SetConfig+0x284>
 8006116:	2302      	movs	r3, #2
 8006118:	76fb      	strb	r3, [r7, #27]
 800611a:	e085      	b.n	8006228 <UART_SetConfig+0x284>
 800611c:	2304      	movs	r3, #4
 800611e:	76fb      	strb	r3, [r7, #27]
 8006120:	e082      	b.n	8006228 <UART_SetConfig+0x284>
 8006122:	2308      	movs	r3, #8
 8006124:	76fb      	strb	r3, [r7, #27]
 8006126:	e07f      	b.n	8006228 <UART_SetConfig+0x284>
 8006128:	2310      	movs	r3, #16
 800612a:	76fb      	strb	r3, [r7, #27]
 800612c:	bf00      	nop
 800612e:	e07b      	b.n	8006228 <UART_SetConfig+0x284>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a59      	ldr	r2, [pc, #356]	; (800629c <UART_SetConfig+0x2f8>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d120      	bne.n	800617c <UART_SetConfig+0x1d8>
 800613a:	4b55      	ldr	r3, [pc, #340]	; (8006290 <UART_SetConfig+0x2ec>)
 800613c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006140:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006144:	2b40      	cmp	r3, #64	; 0x40
 8006146:	d00f      	beq.n	8006168 <UART_SetConfig+0x1c4>
 8006148:	2b40      	cmp	r3, #64	; 0x40
 800614a:	d802      	bhi.n	8006152 <UART_SetConfig+0x1ae>
 800614c:	2b00      	cmp	r3, #0
 800614e:	d005      	beq.n	800615c <UART_SetConfig+0x1b8>
 8006150:	e010      	b.n	8006174 <UART_SetConfig+0x1d0>
 8006152:	2b80      	cmp	r3, #128	; 0x80
 8006154:	d005      	beq.n	8006162 <UART_SetConfig+0x1be>
 8006156:	2bc0      	cmp	r3, #192	; 0xc0
 8006158:	d009      	beq.n	800616e <UART_SetConfig+0x1ca>
 800615a:	e00b      	b.n	8006174 <UART_SetConfig+0x1d0>
 800615c:	2300      	movs	r3, #0
 800615e:	76fb      	strb	r3, [r7, #27]
 8006160:	e062      	b.n	8006228 <UART_SetConfig+0x284>
 8006162:	2302      	movs	r3, #2
 8006164:	76fb      	strb	r3, [r7, #27]
 8006166:	e05f      	b.n	8006228 <UART_SetConfig+0x284>
 8006168:	2304      	movs	r3, #4
 800616a:	76fb      	strb	r3, [r7, #27]
 800616c:	e05c      	b.n	8006228 <UART_SetConfig+0x284>
 800616e:	2308      	movs	r3, #8
 8006170:	76fb      	strb	r3, [r7, #27]
 8006172:	e059      	b.n	8006228 <UART_SetConfig+0x284>
 8006174:	2310      	movs	r3, #16
 8006176:	76fb      	strb	r3, [r7, #27]
 8006178:	bf00      	nop
 800617a:	e055      	b.n	8006228 <UART_SetConfig+0x284>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a47      	ldr	r2, [pc, #284]	; (80062a0 <UART_SetConfig+0x2fc>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d124      	bne.n	80061d0 <UART_SetConfig+0x22c>
 8006186:	4b42      	ldr	r3, [pc, #264]	; (8006290 <UART_SetConfig+0x2ec>)
 8006188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800618c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006190:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006194:	d012      	beq.n	80061bc <UART_SetConfig+0x218>
 8006196:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800619a:	d802      	bhi.n	80061a2 <UART_SetConfig+0x1fe>
 800619c:	2b00      	cmp	r3, #0
 800619e:	d007      	beq.n	80061b0 <UART_SetConfig+0x20c>
 80061a0:	e012      	b.n	80061c8 <UART_SetConfig+0x224>
 80061a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061a6:	d006      	beq.n	80061b6 <UART_SetConfig+0x212>
 80061a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061ac:	d009      	beq.n	80061c2 <UART_SetConfig+0x21e>
 80061ae:	e00b      	b.n	80061c8 <UART_SetConfig+0x224>
 80061b0:	2300      	movs	r3, #0
 80061b2:	76fb      	strb	r3, [r7, #27]
 80061b4:	e038      	b.n	8006228 <UART_SetConfig+0x284>
 80061b6:	2302      	movs	r3, #2
 80061b8:	76fb      	strb	r3, [r7, #27]
 80061ba:	e035      	b.n	8006228 <UART_SetConfig+0x284>
 80061bc:	2304      	movs	r3, #4
 80061be:	76fb      	strb	r3, [r7, #27]
 80061c0:	e032      	b.n	8006228 <UART_SetConfig+0x284>
 80061c2:	2308      	movs	r3, #8
 80061c4:	76fb      	strb	r3, [r7, #27]
 80061c6:	e02f      	b.n	8006228 <UART_SetConfig+0x284>
 80061c8:	2310      	movs	r3, #16
 80061ca:	76fb      	strb	r3, [r7, #27]
 80061cc:	bf00      	nop
 80061ce:	e02b      	b.n	8006228 <UART_SetConfig+0x284>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a2c      	ldr	r2, [pc, #176]	; (8006288 <UART_SetConfig+0x2e4>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d124      	bne.n	8006224 <UART_SetConfig+0x280>
 80061da:	4b2d      	ldr	r3, [pc, #180]	; (8006290 <UART_SetConfig+0x2ec>)
 80061dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061e0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80061e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061e8:	d012      	beq.n	8006210 <UART_SetConfig+0x26c>
 80061ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061ee:	d802      	bhi.n	80061f6 <UART_SetConfig+0x252>
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d007      	beq.n	8006204 <UART_SetConfig+0x260>
 80061f4:	e012      	b.n	800621c <UART_SetConfig+0x278>
 80061f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061fa:	d006      	beq.n	800620a <UART_SetConfig+0x266>
 80061fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006200:	d009      	beq.n	8006216 <UART_SetConfig+0x272>
 8006202:	e00b      	b.n	800621c <UART_SetConfig+0x278>
 8006204:	2300      	movs	r3, #0
 8006206:	76fb      	strb	r3, [r7, #27]
 8006208:	e00e      	b.n	8006228 <UART_SetConfig+0x284>
 800620a:	2302      	movs	r3, #2
 800620c:	76fb      	strb	r3, [r7, #27]
 800620e:	e00b      	b.n	8006228 <UART_SetConfig+0x284>
 8006210:	2304      	movs	r3, #4
 8006212:	76fb      	strb	r3, [r7, #27]
 8006214:	e008      	b.n	8006228 <UART_SetConfig+0x284>
 8006216:	2308      	movs	r3, #8
 8006218:	76fb      	strb	r3, [r7, #27]
 800621a:	e005      	b.n	8006228 <UART_SetConfig+0x284>
 800621c:	2310      	movs	r3, #16
 800621e:	76fb      	strb	r3, [r7, #27]
 8006220:	bf00      	nop
 8006222:	e001      	b.n	8006228 <UART_SetConfig+0x284>
 8006224:	2310      	movs	r3, #16
 8006226:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a16      	ldr	r2, [pc, #88]	; (8006288 <UART_SetConfig+0x2e4>)
 800622e:	4293      	cmp	r3, r2
 8006230:	f040 8087 	bne.w	8006342 <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006234:	7efb      	ldrb	r3, [r7, #27]
 8006236:	2b08      	cmp	r3, #8
 8006238:	d836      	bhi.n	80062a8 <UART_SetConfig+0x304>
 800623a:	a201      	add	r2, pc, #4	; (adr r2, 8006240 <UART_SetConfig+0x29c>)
 800623c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006240:	08006265 	.word	0x08006265
 8006244:	080062a9 	.word	0x080062a9
 8006248:	0800626d 	.word	0x0800626d
 800624c:	080062a9 	.word	0x080062a9
 8006250:	08006273 	.word	0x08006273
 8006254:	080062a9 	.word	0x080062a9
 8006258:	080062a9 	.word	0x080062a9
 800625c:	080062a9 	.word	0x080062a9
 8006260:	0800627b 	.word	0x0800627b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006264:	f7fe f940 	bl	80044e8 <HAL_RCC_GetPCLK1Freq>
 8006268:	6178      	str	r0, [r7, #20]
        break;
 800626a:	e022      	b.n	80062b2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800626c:	4b0d      	ldr	r3, [pc, #52]	; (80062a4 <UART_SetConfig+0x300>)
 800626e:	617b      	str	r3, [r7, #20]
        break;
 8006270:	e01f      	b.n	80062b2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006272:	f7fe f8a3 	bl	80043bc <HAL_RCC_GetSysClockFreq>
 8006276:	6178      	str	r0, [r7, #20]
        break;
 8006278:	e01b      	b.n	80062b2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800627a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800627e:	617b      	str	r3, [r7, #20]
        break;
 8006280:	e017      	b.n	80062b2 <UART_SetConfig+0x30e>
 8006282:	bf00      	nop
 8006284:	efff69f3 	.word	0xefff69f3
 8006288:	40008000 	.word	0x40008000
 800628c:	40013800 	.word	0x40013800
 8006290:	40021000 	.word	0x40021000
 8006294:	40004400 	.word	0x40004400
 8006298:	40004800 	.word	0x40004800
 800629c:	40004c00 	.word	0x40004c00
 80062a0:	40005000 	.word	0x40005000
 80062a4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80062a8:	2300      	movs	r3, #0
 80062aa:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80062ac:	2301      	movs	r3, #1
 80062ae:	76bb      	strb	r3, [r7, #26]
        break;
 80062b0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	f000 80f1 	beq.w	800649c <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	685a      	ldr	r2, [r3, #4]
 80062be:	4613      	mov	r3, r2
 80062c0:	005b      	lsls	r3, r3, #1
 80062c2:	4413      	add	r3, r2
 80062c4:	697a      	ldr	r2, [r7, #20]
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d305      	bcc.n	80062d6 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80062d0:	697a      	ldr	r2, [r7, #20]
 80062d2:	429a      	cmp	r2, r3
 80062d4:	d902      	bls.n	80062dc <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	76bb      	strb	r3, [r7, #26]
 80062da:	e0df      	b.n	800649c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	4619      	mov	r1, r3
 80062e0:	f04f 0200 	mov.w	r2, #0
 80062e4:	f04f 0300 	mov.w	r3, #0
 80062e8:	f04f 0400 	mov.w	r4, #0
 80062ec:	0214      	lsls	r4, r2, #8
 80062ee:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80062f2:	020b      	lsls	r3, r1, #8
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	6852      	ldr	r2, [r2, #4]
 80062f8:	0852      	lsrs	r2, r2, #1
 80062fa:	4611      	mov	r1, r2
 80062fc:	f04f 0200 	mov.w	r2, #0
 8006300:	eb13 0b01 	adds.w	fp, r3, r1
 8006304:	eb44 0c02 	adc.w	ip, r4, r2
 8006308:	4658      	mov	r0, fp
 800630a:	4661      	mov	r1, ip
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	f04f 0400 	mov.w	r4, #0
 8006314:	461a      	mov	r2, r3
 8006316:	4623      	mov	r3, r4
 8006318:	f7f9 ff56 	bl	80001c8 <__aeabi_uldivmod>
 800631c:	4603      	mov	r3, r0
 800631e:	460c      	mov	r4, r1
 8006320:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006328:	d308      	bcc.n	800633c <UART_SetConfig+0x398>
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006330:	d204      	bcs.n	800633c <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	693a      	ldr	r2, [r7, #16]
 8006338:	60da      	str	r2, [r3, #12]
 800633a:	e0af      	b.n	800649c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800633c:	2301      	movs	r3, #1
 800633e:	76bb      	strb	r3, [r7, #26]
 8006340:	e0ac      	b.n	800649c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	69db      	ldr	r3, [r3, #28]
 8006346:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800634a:	d15b      	bne.n	8006404 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800634c:	7efb      	ldrb	r3, [r7, #27]
 800634e:	2b08      	cmp	r3, #8
 8006350:	d827      	bhi.n	80063a2 <UART_SetConfig+0x3fe>
 8006352:	a201      	add	r2, pc, #4	; (adr r2, 8006358 <UART_SetConfig+0x3b4>)
 8006354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006358:	0800637d 	.word	0x0800637d
 800635c:	08006385 	.word	0x08006385
 8006360:	0800638d 	.word	0x0800638d
 8006364:	080063a3 	.word	0x080063a3
 8006368:	08006393 	.word	0x08006393
 800636c:	080063a3 	.word	0x080063a3
 8006370:	080063a3 	.word	0x080063a3
 8006374:	080063a3 	.word	0x080063a3
 8006378:	0800639b 	.word	0x0800639b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800637c:	f7fe f8b4 	bl	80044e8 <HAL_RCC_GetPCLK1Freq>
 8006380:	6178      	str	r0, [r7, #20]
        break;
 8006382:	e013      	b.n	80063ac <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006384:	f7fe f8c6 	bl	8004514 <HAL_RCC_GetPCLK2Freq>
 8006388:	6178      	str	r0, [r7, #20]
        break;
 800638a:	e00f      	b.n	80063ac <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800638c:	4b49      	ldr	r3, [pc, #292]	; (80064b4 <UART_SetConfig+0x510>)
 800638e:	617b      	str	r3, [r7, #20]
        break;
 8006390:	e00c      	b.n	80063ac <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006392:	f7fe f813 	bl	80043bc <HAL_RCC_GetSysClockFreq>
 8006396:	6178      	str	r0, [r7, #20]
        break;
 8006398:	e008      	b.n	80063ac <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800639a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800639e:	617b      	str	r3, [r7, #20]
        break;
 80063a0:	e004      	b.n	80063ac <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80063a2:	2300      	movs	r3, #0
 80063a4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80063a6:	2301      	movs	r3, #1
 80063a8:	76bb      	strb	r3, [r7, #26]
        break;
 80063aa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d074      	beq.n	800649c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	005a      	lsls	r2, r3, #1
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	085b      	lsrs	r3, r3, #1
 80063bc:	441a      	add	r2, r3
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	2b0f      	cmp	r3, #15
 80063ce:	d916      	bls.n	80063fe <UART_SetConfig+0x45a>
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063d6:	d212      	bcs.n	80063fe <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	b29b      	uxth	r3, r3
 80063dc:	f023 030f 	bic.w	r3, r3, #15
 80063e0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	085b      	lsrs	r3, r3, #1
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	f003 0307 	and.w	r3, r3, #7
 80063ec:	b29a      	uxth	r2, r3
 80063ee:	89fb      	ldrh	r3, [r7, #14]
 80063f0:	4313      	orrs	r3, r2
 80063f2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	89fa      	ldrh	r2, [r7, #14]
 80063fa:	60da      	str	r2, [r3, #12]
 80063fc:	e04e      	b.n	800649c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80063fe:	2301      	movs	r3, #1
 8006400:	76bb      	strb	r3, [r7, #26]
 8006402:	e04b      	b.n	800649c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006404:	7efb      	ldrb	r3, [r7, #27]
 8006406:	2b08      	cmp	r3, #8
 8006408:	d827      	bhi.n	800645a <UART_SetConfig+0x4b6>
 800640a:	a201      	add	r2, pc, #4	; (adr r2, 8006410 <UART_SetConfig+0x46c>)
 800640c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006410:	08006435 	.word	0x08006435
 8006414:	0800643d 	.word	0x0800643d
 8006418:	08006445 	.word	0x08006445
 800641c:	0800645b 	.word	0x0800645b
 8006420:	0800644b 	.word	0x0800644b
 8006424:	0800645b 	.word	0x0800645b
 8006428:	0800645b 	.word	0x0800645b
 800642c:	0800645b 	.word	0x0800645b
 8006430:	08006453 	.word	0x08006453
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006434:	f7fe f858 	bl	80044e8 <HAL_RCC_GetPCLK1Freq>
 8006438:	6178      	str	r0, [r7, #20]
        break;
 800643a:	e013      	b.n	8006464 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800643c:	f7fe f86a 	bl	8004514 <HAL_RCC_GetPCLK2Freq>
 8006440:	6178      	str	r0, [r7, #20]
        break;
 8006442:	e00f      	b.n	8006464 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006444:	4b1b      	ldr	r3, [pc, #108]	; (80064b4 <UART_SetConfig+0x510>)
 8006446:	617b      	str	r3, [r7, #20]
        break;
 8006448:	e00c      	b.n	8006464 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800644a:	f7fd ffb7 	bl	80043bc <HAL_RCC_GetSysClockFreq>
 800644e:	6178      	str	r0, [r7, #20]
        break;
 8006450:	e008      	b.n	8006464 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006452:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006456:	617b      	str	r3, [r7, #20]
        break;
 8006458:	e004      	b.n	8006464 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800645a:	2300      	movs	r3, #0
 800645c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	76bb      	strb	r3, [r7, #26]
        break;
 8006462:	bf00      	nop
    }

    if (pclk != 0U)
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d018      	beq.n	800649c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	085a      	lsrs	r2, r3, #1
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	441a      	add	r2, r3
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	fbb2 f3f3 	udiv	r3, r2, r3
 800647c:	b29b      	uxth	r3, r3
 800647e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	2b0f      	cmp	r3, #15
 8006484:	d908      	bls.n	8006498 <UART_SetConfig+0x4f4>
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800648c:	d204      	bcs.n	8006498 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	693a      	ldr	r2, [r7, #16]
 8006494:	60da      	str	r2, [r3, #12]
 8006496:	e001      	b.n	800649c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8006498:	2301      	movs	r3, #1
 800649a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2200      	movs	r2, #0
 80064a0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2200      	movs	r2, #0
 80064a6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80064a8:	7ebb      	ldrb	r3, [r7, #26]
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3720      	adds	r7, #32
 80064ae:	46bd      	mov	sp, r7
 80064b0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80064b4:	00f42400 	.word	0x00f42400

080064b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b083      	sub	sp, #12
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c4:	f003 0301 	and.w	r3, r3, #1
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d00a      	beq.n	80064e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	430a      	orrs	r2, r1
 80064e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e6:	f003 0302 	and.w	r3, r3, #2
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d00a      	beq.n	8006504 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	430a      	orrs	r2, r1
 8006502:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006508:	f003 0304 	and.w	r3, r3, #4
 800650c:	2b00      	cmp	r3, #0
 800650e:	d00a      	beq.n	8006526 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	430a      	orrs	r2, r1
 8006524:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800652a:	f003 0308 	and.w	r3, r3, #8
 800652e:	2b00      	cmp	r3, #0
 8006530:	d00a      	beq.n	8006548 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	430a      	orrs	r2, r1
 8006546:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800654c:	f003 0310 	and.w	r3, r3, #16
 8006550:	2b00      	cmp	r3, #0
 8006552:	d00a      	beq.n	800656a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	430a      	orrs	r2, r1
 8006568:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800656e:	f003 0320 	and.w	r3, r3, #32
 8006572:	2b00      	cmp	r3, #0
 8006574:	d00a      	beq.n	800658c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	430a      	orrs	r2, r1
 800658a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006594:	2b00      	cmp	r3, #0
 8006596:	d01a      	beq.n	80065ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	430a      	orrs	r2, r1
 80065ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065b6:	d10a      	bne.n	80065ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	430a      	orrs	r2, r1
 80065cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d00a      	beq.n	80065f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	430a      	orrs	r2, r1
 80065ee:	605a      	str	r2, [r3, #4]
  }
}
 80065f0:	bf00      	nop
 80065f2:	370c      	adds	r7, #12
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr

080065fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b086      	sub	sp, #24
 8006600:	af02      	add	r7, sp, #8
 8006602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2200      	movs	r2, #0
 8006608:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800660a:	f7fa ff1f 	bl	800144c <HAL_GetTick>
 800660e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f003 0308 	and.w	r3, r3, #8
 800661a:	2b08      	cmp	r3, #8
 800661c:	d10e      	bne.n	800663c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800661e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006622:	9300      	str	r3, [sp, #0]
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2200      	movs	r2, #0
 8006628:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f000 f82a 	bl	8006686 <UART_WaitOnFlagUntilTimeout>
 8006632:	4603      	mov	r3, r0
 8006634:	2b00      	cmp	r3, #0
 8006636:	d001      	beq.n	800663c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006638:	2303      	movs	r3, #3
 800663a:	e020      	b.n	800667e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f003 0304 	and.w	r3, r3, #4
 8006646:	2b04      	cmp	r3, #4
 8006648:	d10e      	bne.n	8006668 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800664a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800664e:	9300      	str	r3, [sp, #0]
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2200      	movs	r2, #0
 8006654:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f000 f814 	bl	8006686 <UART_WaitOnFlagUntilTimeout>
 800665e:	4603      	mov	r3, r0
 8006660:	2b00      	cmp	r3, #0
 8006662:	d001      	beq.n	8006668 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006664:	2303      	movs	r3, #3
 8006666:	e00a      	b.n	800667e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2220      	movs	r2, #32
 800666c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2220      	movs	r2, #32
 8006672:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2200      	movs	r2, #0
 8006678:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800667c:	2300      	movs	r3, #0
}
 800667e:	4618      	mov	r0, r3
 8006680:	3710      	adds	r7, #16
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}

08006686 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006686:	b580      	push	{r7, lr}
 8006688:	b084      	sub	sp, #16
 800668a:	af00      	add	r7, sp, #0
 800668c:	60f8      	str	r0, [r7, #12]
 800668e:	60b9      	str	r1, [r7, #8]
 8006690:	603b      	str	r3, [r7, #0]
 8006692:	4613      	mov	r3, r2
 8006694:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006696:	e05d      	b.n	8006754 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006698:	69bb      	ldr	r3, [r7, #24]
 800669a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800669e:	d059      	beq.n	8006754 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066a0:	f7fa fed4 	bl	800144c <HAL_GetTick>
 80066a4:	4602      	mov	r2, r0
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	1ad3      	subs	r3, r2, r3
 80066aa:	69ba      	ldr	r2, [r7, #24]
 80066ac:	429a      	cmp	r2, r3
 80066ae:	d302      	bcc.n	80066b6 <UART_WaitOnFlagUntilTimeout+0x30>
 80066b0:	69bb      	ldr	r3, [r7, #24]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d11b      	bne.n	80066ee <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80066c4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	689a      	ldr	r2, [r3, #8]
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f022 0201 	bic.w	r2, r2, #1
 80066d4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2220      	movs	r2, #32
 80066da:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2220      	movs	r2, #32
 80066e0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2200      	movs	r2, #0
 80066e6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80066ea:	2303      	movs	r3, #3
 80066ec:	e042      	b.n	8006774 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f003 0304 	and.w	r3, r3, #4
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d02b      	beq.n	8006754 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	69db      	ldr	r3, [r3, #28]
 8006702:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006706:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800670a:	d123      	bne.n	8006754 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006714:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006724:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	689a      	ldr	r2, [r3, #8]
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f022 0201 	bic.w	r2, r2, #1
 8006734:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2220      	movs	r2, #32
 800673a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2220      	movs	r2, #32
 8006740:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2220      	movs	r2, #32
 8006746:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2200      	movs	r2, #0
 800674c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8006750:	2303      	movs	r3, #3
 8006752:	e00f      	b.n	8006774 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	69da      	ldr	r2, [r3, #28]
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	4013      	ands	r3, r2
 800675e:	68ba      	ldr	r2, [r7, #8]
 8006760:	429a      	cmp	r2, r3
 8006762:	bf0c      	ite	eq
 8006764:	2301      	moveq	r3, #1
 8006766:	2300      	movne	r3, #0
 8006768:	b2db      	uxtb	r3, r3
 800676a:	461a      	mov	r2, r3
 800676c:	79fb      	ldrb	r3, [r7, #7]
 800676e:	429a      	cmp	r2, r3
 8006770:	d092      	beq.n	8006698 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006772:	2300      	movs	r3, #0
}
 8006774:	4618      	mov	r0, r3
 8006776:	3710      	adds	r7, #16
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}

0800677c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800677c:	b084      	sub	sp, #16
 800677e:	b580      	push	{r7, lr}
 8006780:	b084      	sub	sp, #16
 8006782:	af00      	add	r7, sp, #0
 8006784:	6078      	str	r0, [r7, #4]
 8006786:	f107 001c 	add.w	r0, r7, #28
 800678a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800678e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006790:	2b01      	cmp	r3, #1
 8006792:	d122      	bne.n	80067da <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006798:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	68db      	ldr	r3, [r3, #12]
 80067a4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80067a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	68db      	ldr	r3, [r3, #12]
 80067b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80067bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067be:	2b01      	cmp	r3, #1
 80067c0:	d105      	bne.n	80067ce <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	68db      	ldr	r3, [r3, #12]
 80067c6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f000 f936 	bl	8006a40 <USB_CoreReset>
 80067d4:	4603      	mov	r3, r0
 80067d6:	73fb      	strb	r3, [r7, #15]
 80067d8:	e01a      	b.n	8006810 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	68db      	ldr	r3, [r3, #12]
 80067de:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f000 f92a 	bl	8006a40 <USB_CoreReset>
 80067ec:	4603      	mov	r3, r0
 80067ee:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80067f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d106      	bne.n	8006804 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067fa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	639a      	str	r2, [r3, #56]	; 0x38
 8006802:	e005      	b.n	8006810 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006808:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 8006810:	7bfb      	ldrb	r3, [r7, #15]
}
 8006812:	4618      	mov	r0, r3
 8006814:	3710      	adds	r7, #16
 8006816:	46bd      	mov	sp, r7
 8006818:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800681c:	b004      	add	sp, #16
 800681e:	4770      	bx	lr

08006820 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006820:	b480      	push	{r7}
 8006822:	b083      	sub	sp, #12
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	f043 0201 	orr.w	r2, r3, #1
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006834:	2300      	movs	r3, #0
}
 8006836:	4618      	mov	r0, r3
 8006838:	370c      	adds	r7, #12
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr

08006842 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006842:	b480      	push	{r7}
 8006844:	b083      	sub	sp, #12
 8006846:	af00      	add	r7, sp, #0
 8006848:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	689b      	ldr	r3, [r3, #8]
 800684e:	f023 0201 	bic.w	r2, r3, #1
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006856:	2300      	movs	r3, #0
}
 8006858:	4618      	mov	r0, r3
 800685a:	370c      	adds	r7, #12
 800685c:	46bd      	mov	sp, r7
 800685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006862:	4770      	bx	lr

08006864 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b082      	sub	sp, #8
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	460b      	mov	r3, r1
 800686e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	68db      	ldr	r3, [r3, #12]
 8006874:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800687c:	78fb      	ldrb	r3, [r7, #3]
 800687e:	2b01      	cmp	r3, #1
 8006880:	d106      	bne.n	8006890 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	68db      	ldr	r3, [r3, #12]
 8006886:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	60da      	str	r2, [r3, #12]
 800688e:	e00b      	b.n	80068a8 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006890:	78fb      	ldrb	r3, [r7, #3]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d106      	bne.n	80068a4 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	68db      	ldr	r3, [r3, #12]
 800689a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	60da      	str	r2, [r3, #12]
 80068a2:	e001      	b.n	80068a8 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	e003      	b.n	80068b0 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80068a8:	2032      	movs	r0, #50	; 0x32
 80068aa:	f7fa fddb 	bl	8001464 <HAL_Delay>

  return HAL_OK;
 80068ae:	2300      	movs	r3, #0
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3708      	adds	r7, #8
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}

080068b8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b085      	sub	sp, #20
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80068c2:	2300      	movs	r3, #0
 80068c4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	019b      	lsls	r3, r3, #6
 80068ca:	f043 0220 	orr.w	r2, r3, #32
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	3301      	adds	r3, #1
 80068d6:	60fb      	str	r3, [r7, #12]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	4a09      	ldr	r2, [pc, #36]	; (8006900 <USB_FlushTxFifo+0x48>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d901      	bls.n	80068e4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80068e0:	2303      	movs	r3, #3
 80068e2:	e006      	b.n	80068f2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	691b      	ldr	r3, [r3, #16]
 80068e8:	f003 0320 	and.w	r3, r3, #32
 80068ec:	2b20      	cmp	r3, #32
 80068ee:	d0f0      	beq.n	80068d2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80068f0:	2300      	movs	r3, #0
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3714      	adds	r7, #20
 80068f6:	46bd      	mov	sp, r7
 80068f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fc:	4770      	bx	lr
 80068fe:	bf00      	nop
 8006900:	00030d40 	.word	0x00030d40

08006904 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006904:	b480      	push	{r7}
 8006906:	b085      	sub	sp, #20
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800690c:	2300      	movs	r3, #0
 800690e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2210      	movs	r2, #16
 8006914:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	3301      	adds	r3, #1
 800691a:	60fb      	str	r3, [r7, #12]
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	4a09      	ldr	r2, [pc, #36]	; (8006944 <USB_FlushRxFifo+0x40>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d901      	bls.n	8006928 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006924:	2303      	movs	r3, #3
 8006926:	e006      	b.n	8006936 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	691b      	ldr	r3, [r3, #16]
 800692c:	f003 0310 	and.w	r3, r3, #16
 8006930:	2b10      	cmp	r3, #16
 8006932:	d0f0      	beq.n	8006916 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006934:	2300      	movs	r3, #0
}
 8006936:	4618      	mov	r0, r3
 8006938:	3714      	adds	r7, #20
 800693a:	46bd      	mov	sp, r7
 800693c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006940:	4770      	bx	lr
 8006942:	bf00      	nop
 8006944:	00030d40 	.word	0x00030d40

08006948 <USB_WritePacket>:
  * @param  ch_ep_num  endpoint or host channel number
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len)
{
 8006948:	b480      	push	{r7}
 800694a:	b089      	sub	sp, #36	; 0x24
 800694c:	af00      	add	r7, sp, #0
 800694e:	60f8      	str	r0, [r7, #12]
 8006950:	60b9      	str	r1, [r7, #8]
 8006952:	4611      	mov	r1, r2
 8006954:	461a      	mov	r2, r3
 8006956:	460b      	mov	r3, r1
 8006958:	71fb      	strb	r3, [r7, #7]
 800695a:	4613      	mov	r3, r2
 800695c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8006966:	88bb      	ldrh	r3, [r7, #4]
 8006968:	3303      	adds	r3, #3
 800696a:	089b      	lsrs	r3, r3, #2
 800696c:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800696e:	2300      	movs	r3, #0
 8006970:	61bb      	str	r3, [r7, #24]
 8006972:	e00f      	b.n	8006994 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006974:	79fb      	ldrb	r3, [r7, #7]
 8006976:	031a      	lsls	r2, r3, #12
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	4413      	add	r3, r2
 800697c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006980:	461a      	mov	r2, r3
 8006982:	69fb      	ldr	r3, [r7, #28]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	6013      	str	r3, [r2, #0]
    pSrc++;
 8006988:	69fb      	ldr	r3, [r7, #28]
 800698a:	3304      	adds	r3, #4
 800698c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800698e:	69bb      	ldr	r3, [r7, #24]
 8006990:	3301      	adds	r3, #1
 8006992:	61bb      	str	r3, [r7, #24]
 8006994:	69ba      	ldr	r2, [r7, #24]
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	429a      	cmp	r2, r3
 800699a:	d3eb      	bcc.n	8006974 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800699c:	2300      	movs	r3, #0
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3724      	adds	r7, #36	; 0x24
 80069a2:	46bd      	mov	sp, r7
 80069a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a8:	4770      	bx	lr

080069aa <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80069aa:	b480      	push	{r7}
 80069ac:	b089      	sub	sp, #36	; 0x24
 80069ae:	af00      	add	r7, sp, #0
 80069b0:	60f8      	str	r0, [r7, #12]
 80069b2:	60b9      	str	r1, [r7, #8]
 80069b4:	4613      	mov	r3, r2
 80069b6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80069c0:	88fb      	ldrh	r3, [r7, #6]
 80069c2:	3303      	adds	r3, #3
 80069c4:	089b      	lsrs	r3, r3, #2
 80069c6:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80069c8:	2300      	movs	r3, #0
 80069ca:	61bb      	str	r3, [r7, #24]
 80069cc:	e00b      	b.n	80069e6 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	69fb      	ldr	r3, [r7, #28]
 80069d8:	601a      	str	r2, [r3, #0]
    pDest++;
 80069da:	69fb      	ldr	r3, [r7, #28]
 80069dc:	3304      	adds	r3, #4
 80069de:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80069e0:	69bb      	ldr	r3, [r7, #24]
 80069e2:	3301      	adds	r3, #1
 80069e4:	61bb      	str	r3, [r7, #24]
 80069e6:	69ba      	ldr	r2, [r7, #24]
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d3ef      	bcc.n	80069ce <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80069ee:	69fb      	ldr	r3, [r7, #28]
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3724      	adds	r7, #36	; 0x24
 80069f4:	46bd      	mov	sp, r7
 80069f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fa:	4770      	bx	lr

080069fc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b085      	sub	sp, #20
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	695b      	ldr	r3, [r3, #20]
 8006a08:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	699b      	ldr	r3, [r3, #24]
 8006a0e:	68fa      	ldr	r2, [r7, #12]
 8006a10:	4013      	ands	r3, r2
 8006a12:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006a14:	68fb      	ldr	r3, [r7, #12]
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3714      	adds	r7, #20
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr

08006a22 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006a22:	b480      	push	{r7}
 8006a24:	b083      	sub	sp, #12
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	695b      	ldr	r3, [r3, #20]
 8006a2e:	f003 0301 	and.w	r3, r3, #1
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	370c      	adds	r7, #12
 8006a36:	46bd      	mov	sp, r7
 8006a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3c:	4770      	bx	lr
	...

08006a40 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b085      	sub	sp, #20
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	3301      	adds	r3, #1
 8006a50:	60fb      	str	r3, [r7, #12]
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	4a13      	ldr	r2, [pc, #76]	; (8006aa4 <USB_CoreReset+0x64>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d901      	bls.n	8006a5e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006a5a:	2303      	movs	r3, #3
 8006a5c:	e01b      	b.n	8006a96 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	691b      	ldr	r3, [r3, #16]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	daf2      	bge.n	8006a4c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006a66:	2300      	movs	r3, #0
 8006a68:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	691b      	ldr	r3, [r3, #16]
 8006a6e:	f043 0201 	orr.w	r2, r3, #1
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	3301      	adds	r3, #1
 8006a7a:	60fb      	str	r3, [r7, #12]
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	4a09      	ldr	r2, [pc, #36]	; (8006aa4 <USB_CoreReset+0x64>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d901      	bls.n	8006a88 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006a84:	2303      	movs	r3, #3
 8006a86:	e006      	b.n	8006a96 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	691b      	ldr	r3, [r3, #16]
 8006a8c:	f003 0301 	and.w	r3, r3, #1
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	d0f0      	beq.n	8006a76 <USB_CoreReset+0x36>

  return HAL_OK;
 8006a94:	2300      	movs	r3, #0
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3714      	adds	r7, #20
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr
 8006aa2:	bf00      	nop
 8006aa4:	00030d40 	.word	0x00030d40

08006aa8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006aa8:	b084      	sub	sp, #16
 8006aaa:	b580      	push	{r7, lr}
 8006aac:	b084      	sub	sp, #16
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	6078      	str	r0, [r7, #4]
 8006ab2:	f107 001c 	add.w	r0, r7, #28
 8006ab6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ace:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ada:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Set default Max speed support */
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	68ba      	ldr	r2, [r7, #8]
 8006aec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006af0:	f023 0304 	bic.w	r3, r3, #4
 8006af4:	6013      	str	r3, [r2, #0]

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8006af6:	2110      	movs	r1, #16
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f7ff fedd 	bl	80068b8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f7ff ff00 	bl	8006904 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006b04:	2300      	movs	r3, #0
 8006b06:	60fb      	str	r3, [r7, #12]
 8006b08:	e015      	b.n	8006b36 <USB_HostInit+0x8e>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	015a      	lsls	r2, r3, #5
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	4413      	add	r3, r2
 8006b12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b16:	461a      	mov	r2, r3
 8006b18:	f04f 33ff 	mov.w	r3, #4294967295
 8006b1c:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	015a      	lsls	r2, r3, #5
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	4413      	add	r3, r2
 8006b26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	3301      	adds	r3, #1
 8006b34:	60fb      	str	r3, [r7, #12]
 8006b36:	6a3b      	ldr	r3, [r7, #32]
 8006b38:	68fa      	ldr	r2, [r7, #12]
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d3e5      	bcc.n	8006b0a <USB_HostInit+0x62>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8006b3e:	2101      	movs	r1, #1
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f000 f869 	bl	8006c18 <USB_DriveVbus>

  HAL_Delay(200U);
 8006b46:	20c8      	movs	r0, #200	; 0xc8
 8006b48:	f7fa fc8c 	bl	8001464 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f04f 32ff 	mov.w	r2, #4294967295
 8006b58:	615a      	str	r2, [r3, #20]

  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x80U;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2280      	movs	r2, #128	; 0x80
 8006b5e:	625a      	str	r2, [r3, #36]	; 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	4a0d      	ldr	r2, [pc, #52]	; (8006b98 <USB_HostInit+0xf0>)
 8006b64:	629a      	str	r2, [r3, #40]	; 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	4a0c      	ldr	r2, [pc, #48]	; (8006b9c <USB_HostInit+0xf4>)
 8006b6a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	699b      	ldr	r3, [r3, #24]
 8006b72:	f043 0210 	orr.w	r2, r3, #16
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	699a      	ldr	r2, [r3, #24]
 8006b7e:	4b08      	ldr	r3, [pc, #32]	; (8006ba0 <USB_HostInit+0xf8>)
 8006b80:	4313      	orrs	r3, r2
 8006b82:	687a      	ldr	r2, [r7, #4]
 8006b84:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8006b86:	2300      	movs	r3, #0
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3710      	adds	r7, #16
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b92:	b004      	add	sp, #16
 8006b94:	4770      	bx	lr
 8006b96:	bf00      	nop
 8006b98:	00600080 	.word	0x00600080
 8006b9c:	004000e0 	.word	0x004000e0
 8006ba0:	a3200008 	.word	0xa3200008

08006ba4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b085      	sub	sp, #20
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
 8006bac:	460b      	mov	r3, r1
 8006bae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	68fa      	ldr	r2, [r7, #12]
 8006bbe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006bc2:	f023 0303 	bic.w	r3, r3, #3
 8006bc6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	78fb      	ldrb	r3, [r7, #3]
 8006bd2:	f003 0303 	and.w	r3, r3, #3
 8006bd6:	68f9      	ldr	r1, [r7, #12]
 8006bd8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006be0:	78fb      	ldrb	r3, [r7, #3]
 8006be2:	2b01      	cmp	r3, #1
 8006be4:	d107      	bne.n	8006bf6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bec:	461a      	mov	r2, r3
 8006bee:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006bf2:	6053      	str	r3, [r2, #4]
 8006bf4:	e009      	b.n	8006c0a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006bf6:	78fb      	ldrb	r3, [r7, #3]
 8006bf8:	2b02      	cmp	r3, #2
 8006bfa:	d106      	bne.n	8006c0a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c02:	461a      	mov	r2, r3
 8006c04:	f241 7370 	movw	r3, #6000	; 0x1770
 8006c08:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006c0a:	2300      	movs	r3, #0
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3714      	adds	r7, #20
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr

08006c18 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b085      	sub	sp, #20
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
 8006c20:	460b      	mov	r3, r1
 8006c22:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006c3c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d109      	bne.n	8006c5c <USB_DriveVbus+0x44>
 8006c48:	78fb      	ldrb	r3, [r7, #3]
 8006c4a:	2b01      	cmp	r3, #1
 8006c4c:	d106      	bne.n	8006c5c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	68fa      	ldr	r2, [r7, #12]
 8006c52:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006c56:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006c5a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006c62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c66:	d109      	bne.n	8006c7c <USB_DriveVbus+0x64>
 8006c68:	78fb      	ldrb	r3, [r7, #3]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d106      	bne.n	8006c7c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	68fa      	ldr	r2, [r7, #12]
 8006c72:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006c76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c7a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006c7c:	2300      	movs	r3, #0
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3714      	adds	r7, #20
 8006c82:	46bd      	mov	sp, r7
 8006c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c88:	4770      	bx	lr

08006c8a <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006c8a:	b480      	push	{r7}
 8006c8c:	b085      	sub	sp, #20
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	b29b      	uxth	r3, r3
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	3714      	adds	r7, #20
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr

08006cac <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b087      	sub	sp, #28
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	4608      	mov	r0, r1
 8006cb6:	4611      	mov	r1, r2
 8006cb8:	461a      	mov	r2, r3
 8006cba:	4603      	mov	r3, r0
 8006cbc:	70fb      	strb	r3, [r7, #3]
 8006cbe:	460b      	mov	r3, r1
 8006cc0:	70bb      	strb	r3, [r7, #2]
 8006cc2:	4613      	mov	r3, r2
 8006cc4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006cce:	78fb      	ldrb	r3, [r7, #3]
 8006cd0:	015a      	lsls	r2, r3, #5
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	4413      	add	r3, r2
 8006cd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cda:	461a      	mov	r2, r3
 8006cdc:	f04f 33ff 	mov.w	r3, #4294967295
 8006ce0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006ce2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006ce6:	2b03      	cmp	r3, #3
 8006ce8:	d867      	bhi.n	8006dba <USB_HC_Init+0x10e>
 8006cea:	a201      	add	r2, pc, #4	; (adr r2, 8006cf0 <USB_HC_Init+0x44>)
 8006cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cf0:	08006d01 	.word	0x08006d01
 8006cf4:	08006d7d 	.word	0x08006d7d
 8006cf8:	08006d01 	.word	0x08006d01
 8006cfc:	08006d3f 	.word	0x08006d3f
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006d00:	78fb      	ldrb	r3, [r7, #3]
 8006d02:	015a      	lsls	r2, r3, #5
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	4413      	add	r3, r2
 8006d08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d0c:	461a      	mov	r2, r3
 8006d0e:	f240 439d 	movw	r3, #1181	; 0x49d
 8006d12:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006d14:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	da51      	bge.n	8006dc0 <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006d1c:	78fb      	ldrb	r3, [r7, #3]
 8006d1e:	015a      	lsls	r2, r3, #5
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	4413      	add	r3, r2
 8006d24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d28:	68db      	ldr	r3, [r3, #12]
 8006d2a:	78fa      	ldrb	r2, [r7, #3]
 8006d2c:	0151      	lsls	r1, r2, #5
 8006d2e:	68ba      	ldr	r2, [r7, #8]
 8006d30:	440a      	add	r2, r1
 8006d32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d3a:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006d3c:	e040      	b.n	8006dc0 <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006d3e:	78fb      	ldrb	r3, [r7, #3]
 8006d40:	015a      	lsls	r2, r3, #5
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	4413      	add	r3, r2
 8006d46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d4a:	461a      	mov	r2, r3
 8006d4c:	f240 639d 	movw	r3, #1693	; 0x69d
 8006d50:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006d52:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	da34      	bge.n	8006dc4 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006d5a:	78fb      	ldrb	r3, [r7, #3]
 8006d5c:	015a      	lsls	r2, r3, #5
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	4413      	add	r3, r2
 8006d62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d66:	68db      	ldr	r3, [r3, #12]
 8006d68:	78fa      	ldrb	r2, [r7, #3]
 8006d6a:	0151      	lsls	r1, r2, #5
 8006d6c:	68ba      	ldr	r2, [r7, #8]
 8006d6e:	440a      	add	r2, r1
 8006d70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d78:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006d7a:	e023      	b.n	8006dc4 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006d7c:	78fb      	ldrb	r3, [r7, #3]
 8006d7e:	015a      	lsls	r2, r3, #5
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	4413      	add	r3, r2
 8006d84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d88:	461a      	mov	r2, r3
 8006d8a:	f240 2325 	movw	r3, #549	; 0x225
 8006d8e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006d90:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	da17      	bge.n	8006dc8 <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006d98:	78fb      	ldrb	r3, [r7, #3]
 8006d9a:	015a      	lsls	r2, r3, #5
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	4413      	add	r3, r2
 8006da0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006da4:	68db      	ldr	r3, [r3, #12]
 8006da6:	78fa      	ldrb	r2, [r7, #3]
 8006da8:	0151      	lsls	r1, r2, #5
 8006daa:	68ba      	ldr	r2, [r7, #8]
 8006dac:	440a      	add	r2, r1
 8006dae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006db2:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006db6:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006db8:	e006      	b.n	8006dc8 <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 8006dba:	2301      	movs	r3, #1
 8006dbc:	75fb      	strb	r3, [r7, #23]
      break;
 8006dbe:	e004      	b.n	8006dca <USB_HC_Init+0x11e>
      break;
 8006dc0:	bf00      	nop
 8006dc2:	e002      	b.n	8006dca <USB_HC_Init+0x11e>
      break;
 8006dc4:	bf00      	nop
 8006dc6:	e000      	b.n	8006dca <USB_HC_Init+0x11e>
      break;
 8006dc8:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006dd0:	699a      	ldr	r2, [r3, #24]
 8006dd2:	78fb      	ldrb	r3, [r7, #3]
 8006dd4:	f003 030f 	and.w	r3, r3, #15
 8006dd8:	2101      	movs	r1, #1
 8006dda:	fa01 f303 	lsl.w	r3, r1, r3
 8006dde:	68b9      	ldr	r1, [r7, #8]
 8006de0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006de4:	4313      	orrs	r3, r2
 8006de6:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	699b      	ldr	r3, [r3, #24]
 8006dec:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006df4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	da03      	bge.n	8006e04 <USB_HC_Init+0x158>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006dfc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e00:	613b      	str	r3, [r7, #16]
 8006e02:	e001      	b.n	8006e08 <USB_HC_Init+0x15c>
  }
  else
  {
    HCcharEpDir = 0U;
 8006e04:	2300      	movs	r3, #0
 8006e06:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8006e08:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006e0c:	2b02      	cmp	r3, #2
 8006e0e:	d103      	bne.n	8006e18 <USB_HC_Init+0x16c>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006e10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006e14:	60fb      	str	r3, [r7, #12]
 8006e16:	e001      	b.n	8006e1c <USB_HC_Init+0x170>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006e1c:	787b      	ldrb	r3, [r7, #1]
 8006e1e:	059b      	lsls	r3, r3, #22
 8006e20:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006e24:	78bb      	ldrb	r3, [r7, #2]
 8006e26:	02db      	lsls	r3, r3, #11
 8006e28:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006e2c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006e2e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006e32:	049b      	lsls	r3, r3, #18
 8006e34:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006e38:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006e3a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006e3c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006e40:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006e46:	78fb      	ldrb	r3, [r7, #3]
 8006e48:	0159      	lsls	r1, r3, #5
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	440b      	add	r3, r1
 8006e4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e52:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006e58:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8006e5a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006e5e:	2b03      	cmp	r3, #3
 8006e60:	d10f      	bne.n	8006e82 <USB_HC_Init+0x1d6>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8006e62:	78fb      	ldrb	r3, [r7, #3]
 8006e64:	015a      	lsls	r2, r3, #5
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	4413      	add	r3, r2
 8006e6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	78fa      	ldrb	r2, [r7, #3]
 8006e72:	0151      	lsls	r1, r2, #5
 8006e74:	68ba      	ldr	r2, [r7, #8]
 8006e76:	440a      	add	r2, r1
 8006e78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e7c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006e80:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006e82:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	371c      	adds	r7, #28
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr

08006e90 <USB_HC_StartXfer>:
  * @param  USBx  Selected device
  * @param  hc  pointer to host channel structure
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b088      	sub	sp, #32
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	785b      	ldrb	r3, [r3, #1]
 8006ea2:	617b      	str	r3, [r7, #20]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006ea4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006ea8:	827b      	strh	r3, [r7, #18]

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	691b      	ldr	r3, [r3, #16]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d018      	beq.n	8006ee4 <USB_HC_StartXfer+0x54>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	691b      	ldr	r3, [r3, #16]
 8006eb6:	683a      	ldr	r2, [r7, #0]
 8006eb8:	8912      	ldrh	r2, [r2, #8]
 8006eba:	4413      	add	r3, r2
 8006ebc:	3b01      	subs	r3, #1
 8006ebe:	683a      	ldr	r2, [r7, #0]
 8006ec0:	8912      	ldrh	r2, [r2, #8]
 8006ec2:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ec6:	83fb      	strh	r3, [r7, #30]

    if (num_packets > max_hc_pkt_count)
 8006ec8:	8bfa      	ldrh	r2, [r7, #30]
 8006eca:	8a7b      	ldrh	r3, [r7, #18]
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d90b      	bls.n	8006ee8 <USB_HC_StartXfer+0x58>
    {
      num_packets = max_hc_pkt_count;
 8006ed0:	8a7b      	ldrh	r3, [r7, #18]
 8006ed2:	83fb      	strh	r3, [r7, #30]
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8006ed4:	8bfb      	ldrh	r3, [r7, #30]
 8006ed6:	683a      	ldr	r2, [r7, #0]
 8006ed8:	8912      	ldrh	r2, [r2, #8]
 8006eda:	fb02 f203 	mul.w	r2, r2, r3
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	611a      	str	r2, [r3, #16]
 8006ee2:	e001      	b.n	8006ee8 <USB_HC_StartXfer+0x58>
    }
  }
  else
  {
    num_packets = 1U;
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	83fb      	strh	r3, [r7, #30]
  }
  if (hc->ep_is_in != 0U)
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	78db      	ldrb	r3, [r3, #3]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d006      	beq.n	8006efe <USB_HC_StartXfer+0x6e>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8006ef0:	8bfb      	ldrh	r3, [r7, #30]
 8006ef2:	683a      	ldr	r2, [r7, #0]
 8006ef4:	8912      	ldrh	r2, [r2, #8]
 8006ef6:	fb02 f203 	mul.w	r2, r2, r3
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	691b      	ldr	r3, [r3, #16]
 8006f02:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006f06:	8bfb      	ldrh	r3, [r7, #30]
 8006f08:	04d9      	lsls	r1, r3, #19
 8006f0a:	4b5f      	ldr	r3, [pc, #380]	; (8007088 <USB_HC_StartXfer+0x1f8>)
 8006f0c:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006f0e:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	7a9b      	ldrb	r3, [r3, #10]
 8006f14:	075b      	lsls	r3, r3, #29
 8006f16:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006f1a:	6979      	ldr	r1, [r7, #20]
 8006f1c:	0148      	lsls	r0, r1, #5
 8006f1e:	69b9      	ldr	r1, [r7, #24]
 8006f20:	4401      	add	r1, r0
 8006f22:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006f26:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006f28:	610b      	str	r3, [r1, #16]

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006f2a:	69bb      	ldr	r3, [r7, #24]
 8006f2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f30:	689b      	ldr	r3, [r3, #8]
 8006f32:	f003 0301 	and.w	r3, r3, #1
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	bf0c      	ite	eq
 8006f3a:	2301      	moveq	r3, #1
 8006f3c:	2300      	movne	r3, #0
 8006f3e:	b2db      	uxtb	r3, r3
 8006f40:	747b      	strb	r3, [r7, #17]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	015a      	lsls	r2, r3, #5
 8006f46:	69bb      	ldr	r3, [r7, #24]
 8006f48:	4413      	add	r3, r2
 8006f4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	697a      	ldr	r2, [r7, #20]
 8006f52:	0151      	lsls	r1, r2, #5
 8006f54:	69ba      	ldr	r2, [r7, #24]
 8006f56:	440a      	add	r2, r1
 8006f58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f5c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006f60:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	015a      	lsls	r2, r3, #5
 8006f66:	69bb      	ldr	r3, [r7, #24]
 8006f68:	4413      	add	r3, r2
 8006f6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f6e:	681a      	ldr	r2, [r3, #0]
 8006f70:	7c7b      	ldrb	r3, [r7, #17]
 8006f72:	075b      	lsls	r3, r3, #29
 8006f74:	6979      	ldr	r1, [r7, #20]
 8006f76:	0148      	lsls	r0, r1, #5
 8006f78:	69b9      	ldr	r1, [r7, #24]
 8006f7a:	4401      	add	r1, r0
 8006f7c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006f80:	4313      	orrs	r3, r2
 8006f82:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	015a      	lsls	r2, r3, #5
 8006f88:	69bb      	ldr	r3, [r7, #24]
 8006f8a:	4413      	add	r3, r2
 8006f8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a3e      	ldr	r2, [pc, #248]	; (800708c <USB_HC_StartXfer+0x1fc>)
 8006f94:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006f96:	4b3d      	ldr	r3, [pc, #244]	; (800708c <USB_HC_StartXfer+0x1fc>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006f9e:	4a3b      	ldr	r2, [pc, #236]	; (800708c <USB_HC_StartXfer+0x1fc>)
 8006fa0:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	78db      	ldrb	r3, [r3, #3]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d006      	beq.n	8006fb8 <USB_HC_StartXfer+0x128>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006faa:	4b38      	ldr	r3, [pc, #224]	; (800708c <USB_HC_StartXfer+0x1fc>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fb2:	4a36      	ldr	r2, [pc, #216]	; (800708c <USB_HC_StartXfer+0x1fc>)
 8006fb4:	6013      	str	r3, [r2, #0]
 8006fb6:	e005      	b.n	8006fc4 <USB_HC_StartXfer+0x134>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006fb8:	4b34      	ldr	r3, [pc, #208]	; (800708c <USB_HC_StartXfer+0x1fc>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006fc0:	4a32      	ldr	r2, [pc, #200]	; (800708c <USB_HC_StartXfer+0x1fc>)
 8006fc2:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006fc4:	4b31      	ldr	r3, [pc, #196]	; (800708c <USB_HC_StartXfer+0x1fc>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006fcc:	4a2f      	ldr	r2, [pc, #188]	; (800708c <USB_HC_StartXfer+0x1fc>)
 8006fce:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	015a      	lsls	r2, r3, #5
 8006fd4:	69bb      	ldr	r3, [r7, #24]
 8006fd6:	4413      	add	r3, r2
 8006fd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fdc:	461a      	mov	r2, r3
 8006fde:	4b2b      	ldr	r3, [pc, #172]	; (800708c <USB_HC_StartXfer+0x1fc>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	6013      	str	r3, [r2, #0]

    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	78db      	ldrb	r3, [r3, #3]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d148      	bne.n	800707e <USB_HC_StartXfer+0x1ee>
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	691b      	ldr	r3, [r3, #16]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d044      	beq.n	800707e <USB_HC_StartXfer+0x1ee>
    {
      switch (hc->ep_type)
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	79db      	ldrb	r3, [r3, #7]
 8006ff8:	2b03      	cmp	r3, #3
 8006ffa:	d831      	bhi.n	8007060 <USB_HC_StartXfer+0x1d0>
 8006ffc:	a201      	add	r2, pc, #4	; (adr r2, 8007004 <USB_HC_StartXfer+0x174>)
 8006ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007002:	bf00      	nop
 8007004:	08007015 	.word	0x08007015
 8007008:	08007039 	.word	0x08007039
 800700c:	08007015 	.word	0x08007015
 8007010:	08007039 	.word	0x08007039
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	691b      	ldr	r3, [r3, #16]
 8007018:	3303      	adds	r3, #3
 800701a:	089b      	lsrs	r3, r3, #2
 800701c:	81fb      	strh	r3, [r7, #14]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800701e:	89fa      	ldrh	r2, [r7, #14]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007024:	b29b      	uxth	r3, r3
 8007026:	429a      	cmp	r2, r3
 8007028:	d91c      	bls.n	8007064 <USB_HC_StartXfer+0x1d4>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	699b      	ldr	r3, [r3, #24]
 800702e:	f043 0220 	orr.w	r2, r3, #32
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	619a      	str	r2, [r3, #24]
          }
          break;
 8007036:	e015      	b.n	8007064 <USB_HC_StartXfer+0x1d4>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	691b      	ldr	r3, [r3, #16]
 800703c:	3303      	adds	r3, #3
 800703e:	089b      	lsrs	r3, r3, #2
 8007040:	81fb      	strh	r3, [r7, #14]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007042:	89fa      	ldrh	r2, [r7, #14]
 8007044:	69bb      	ldr	r3, [r7, #24]
 8007046:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800704a:	691b      	ldr	r3, [r3, #16]
 800704c:	b29b      	uxth	r3, r3
 800704e:	429a      	cmp	r2, r3
 8007050:	d90a      	bls.n	8007068 <USB_HC_StartXfer+0x1d8>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	699b      	ldr	r3, [r3, #24]
 8007056:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	619a      	str	r2, [r3, #24]
          }
          break;
 800705e:	e003      	b.n	8007068 <USB_HC_StartXfer+0x1d8>

        default:
          break;
 8007060:	bf00      	nop
 8007062:	e002      	b.n	800706a <USB_HC_StartXfer+0x1da>
          break;
 8007064:	bf00      	nop
 8007066:	e000      	b.n	800706a <USB_HC_StartXfer+0x1da>
          break;
 8007068:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len);
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	68d9      	ldr	r1, [r3, #12]
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	785a      	ldrb	r2, [r3, #1]
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	691b      	ldr	r3, [r3, #16]
 8007076:	b29b      	uxth	r3, r3
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f7ff fc65 	bl	8006948 <USB_WritePacket>
    }

  return HAL_OK;
 800707e:	2300      	movs	r3, #0
}
 8007080:	4618      	mov	r0, r3
 8007082:	3720      	adds	r7, #32
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}
 8007088:	1ff80000 	.word	0x1ff80000
 800708c:	200000b4 	.word	0x200000b4

08007090 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007090:	b480      	push	{r7}
 8007092:	b085      	sub	sp, #20
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80070a2:	695b      	ldr	r3, [r3, #20]
 80070a4:	b29b      	uxth	r3, r3
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3714      	adds	r7, #20
 80070aa:	46bd      	mov	sp, r7
 80070ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b0:	4770      	bx	lr

080070b2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80070b2:	b480      	push	{r7}
 80070b4:	b087      	sub	sp, #28
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	6078      	str	r0, [r7, #4]
 80070ba:	460b      	mov	r3, r1
 80070bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 80070c2:	78fb      	ldrb	r3, [r7, #3]
 80070c4:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80070c6:	2300      	movs	r3, #0
 80070c8:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	015a      	lsls	r2, r3, #5
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	4413      	add	r3, r2
 80070d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	0c9b      	lsrs	r3, r3, #18
 80070da:	f003 0303 	and.w	r3, r3, #3
 80070de:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d002      	beq.n	80070ec <USB_HC_Halt+0x3a>
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	2b02      	cmp	r3, #2
 80070ea:	d16c      	bne.n	80071c6 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	015a      	lsls	r2, r3, #5
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	4413      	add	r3, r2
 80070f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	68fa      	ldr	r2, [r7, #12]
 80070fc:	0151      	lsls	r1, r2, #5
 80070fe:	693a      	ldr	r2, [r7, #16]
 8007100:	440a      	add	r2, r1
 8007102:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007106:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800710a:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007110:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007114:	2b00      	cmp	r3, #0
 8007116:	d143      	bne.n	80071a0 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	015a      	lsls	r2, r3, #5
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	4413      	add	r3, r2
 8007120:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	68fa      	ldr	r2, [r7, #12]
 8007128:	0151      	lsls	r1, r2, #5
 800712a:	693a      	ldr	r2, [r7, #16]
 800712c:	440a      	add	r2, r1
 800712e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007132:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007136:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	015a      	lsls	r2, r3, #5
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	4413      	add	r3, r2
 8007140:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	68fa      	ldr	r2, [r7, #12]
 8007148:	0151      	lsls	r1, r2, #5
 800714a:	693a      	ldr	r2, [r7, #16]
 800714c:	440a      	add	r2, r1
 800714e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007152:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007156:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	015a      	lsls	r2, r3, #5
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	4413      	add	r3, r2
 8007160:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	68fa      	ldr	r2, [r7, #12]
 8007168:	0151      	lsls	r1, r2, #5
 800716a:	693a      	ldr	r2, [r7, #16]
 800716c:	440a      	add	r2, r1
 800716e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007172:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007176:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	3301      	adds	r3, #1
 800717c:	617b      	str	r3, [r7, #20]
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007184:	d81d      	bhi.n	80071c2 <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	015a      	lsls	r2, r3, #5
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	4413      	add	r3, r2
 800718e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007198:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800719c:	d0ec      	beq.n	8007178 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800719e:	e080      	b.n	80072a2 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	015a      	lsls	r2, r3, #5
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	4413      	add	r3, r2
 80071a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	68fa      	ldr	r2, [r7, #12]
 80071b0:	0151      	lsls	r1, r2, #5
 80071b2:	693a      	ldr	r2, [r7, #16]
 80071b4:	440a      	add	r2, r1
 80071b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80071ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80071be:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80071c0:	e06f      	b.n	80072a2 <USB_HC_Halt+0x1f0>
          break;
 80071c2:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80071c4:	e06d      	b.n	80072a2 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	015a      	lsls	r2, r3, #5
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	4413      	add	r3, r2
 80071ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	68fa      	ldr	r2, [r7, #12]
 80071d6:	0151      	lsls	r1, r2, #5
 80071d8:	693a      	ldr	r2, [r7, #16]
 80071da:	440a      	add	r2, r1
 80071dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80071e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80071e4:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80071ec:	691b      	ldr	r3, [r3, #16]
 80071ee:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d143      	bne.n	800727e <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	015a      	lsls	r2, r3, #5
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	4413      	add	r3, r2
 80071fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	68fa      	ldr	r2, [r7, #12]
 8007206:	0151      	lsls	r1, r2, #5
 8007208:	693a      	ldr	r2, [r7, #16]
 800720a:	440a      	add	r2, r1
 800720c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007210:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007214:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	015a      	lsls	r2, r3, #5
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	4413      	add	r3, r2
 800721e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	68fa      	ldr	r2, [r7, #12]
 8007226:	0151      	lsls	r1, r2, #5
 8007228:	693a      	ldr	r2, [r7, #16]
 800722a:	440a      	add	r2, r1
 800722c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007230:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007234:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	015a      	lsls	r2, r3, #5
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	4413      	add	r3, r2
 800723e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	68fa      	ldr	r2, [r7, #12]
 8007246:	0151      	lsls	r1, r2, #5
 8007248:	693a      	ldr	r2, [r7, #16]
 800724a:	440a      	add	r2, r1
 800724c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007250:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007254:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	3301      	adds	r3, #1
 800725a:	617b      	str	r3, [r7, #20]
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007262:	d81d      	bhi.n	80072a0 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	015a      	lsls	r2, r3, #5
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	4413      	add	r3, r2
 800726c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007276:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800727a:	d0ec      	beq.n	8007256 <USB_HC_Halt+0x1a4>
 800727c:	e011      	b.n	80072a2 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	015a      	lsls	r2, r3, #5
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	4413      	add	r3, r2
 8007286:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	68fa      	ldr	r2, [r7, #12]
 800728e:	0151      	lsls	r1, r2, #5
 8007290:	693a      	ldr	r2, [r7, #16]
 8007292:	440a      	add	r2, r1
 8007294:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007298:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800729c:	6013      	str	r3, [r2, #0]
 800729e:	e000      	b.n	80072a2 <USB_HC_Halt+0x1f0>
          break;
 80072a0:	bf00      	nop
    }
  }

  return HAL_OK;
 80072a2:	2300      	movs	r3, #0
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	371c      	adds	r7, #28
 80072a8:	46bd      	mov	sp, r7
 80072aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ae:	4770      	bx	lr

080072b0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b086      	sub	sp, #24
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80072bc:	2300      	movs	r3, #0
 80072be:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f7ff fabe 	bl	8006842 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80072c6:	2110      	movs	r1, #16
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f7ff faf5 	bl	80068b8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f7ff fb18 	bl	8006904 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80072d4:	2300      	movs	r3, #0
 80072d6:	613b      	str	r3, [r7, #16]
 80072d8:	e01f      	b.n	800731a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	015a      	lsls	r2, r3, #5
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	4413      	add	r3, r2
 80072e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80072f0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80072f8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007300:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	015a      	lsls	r2, r3, #5
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	4413      	add	r3, r2
 800730a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800730e:	461a      	mov	r2, r3
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	3301      	adds	r3, #1
 8007318:	613b      	str	r3, [r7, #16]
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	2b0f      	cmp	r3, #15
 800731e:	d9dc      	bls.n	80072da <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007320:	2300      	movs	r3, #0
 8007322:	613b      	str	r3, [r7, #16]
 8007324:	e034      	b.n	8007390 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	015a      	lsls	r2, r3, #5
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	4413      	add	r3, r2
 800732e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800733c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007344:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800734c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	015a      	lsls	r2, r3, #5
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	4413      	add	r3, r2
 8007356:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800735a:	461a      	mov	r2, r3
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	3301      	adds	r3, #1
 8007364:	617b      	str	r3, [r7, #20]
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800736c:	d80c      	bhi.n	8007388 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	015a      	lsls	r2, r3, #5
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	4413      	add	r3, r2
 8007376:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007380:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007384:	d0ec      	beq.n	8007360 <USB_StopHost+0xb0>
 8007386:	e000      	b.n	800738a <USB_StopHost+0xda>
        break;
 8007388:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	3301      	adds	r3, #1
 800738e:	613b      	str	r3, [r7, #16]
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	2b0f      	cmp	r3, #15
 8007394:	d9c7      	bls.n	8007326 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800739c:	461a      	mov	r2, r3
 800739e:	f04f 33ff 	mov.w	r3, #4294967295
 80073a2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f04f 32ff 	mov.w	r2, #4294967295
 80073aa:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f7ff fa37 	bl	8006820 <USB_EnableGlobalInt>

  return HAL_OK;
 80073b2:	2300      	movs	r3, #0
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3718      	adds	r7, #24
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}

080073bc <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80073bc:	b590      	push	{r4, r7, lr}
 80073be:	b089      	sub	sp, #36	; 0x24
 80073c0:	af04      	add	r7, sp, #16
 80073c2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80073c4:	2301      	movs	r3, #1
 80073c6:	2202      	movs	r2, #2
 80073c8:	2102      	movs	r1, #2
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f000 fc68 	bl	8007ca0 <USBH_FindInterface>
 80073d0:	4603      	mov	r3, r0
 80073d2:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80073d4:	7bfb      	ldrb	r3, [r7, #15]
 80073d6:	2bff      	cmp	r3, #255	; 0xff
 80073d8:	d002      	beq.n	80073e0 <USBH_CDC_InterfaceInit+0x24>
 80073da:	7bfb      	ldrb	r3, [r7, #15]
 80073dc:	2b01      	cmp	r3, #1
 80073de:	d901      	bls.n	80073e4 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80073e0:	2302      	movs	r3, #2
 80073e2:	e13d      	b.n	8007660 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80073e4:	7bfb      	ldrb	r3, [r7, #15]
 80073e6:	4619      	mov	r1, r3
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f000 fc3d 	bl	8007c68 <USBH_SelectInterface>
 80073ee:	4603      	mov	r3, r0
 80073f0:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80073f2:	7bbb      	ldrb	r3, [r7, #14]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d001      	beq.n	80073fc <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80073f8:	2302      	movs	r3, #2
 80073fa:	e131      	b.n	8007660 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8007402:	2050      	movs	r0, #80	; 0x50
 8007404:	f001 fb1e 	bl	8008a44 <malloc>
 8007408:	4603      	mov	r3, r0
 800740a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007412:	69db      	ldr	r3, [r3, #28]
 8007414:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d101      	bne.n	8007420 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800741c:	2302      	movs	r3, #2
 800741e:	e11f      	b.n	8007660 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007420:	2250      	movs	r2, #80	; 0x50
 8007422:	2100      	movs	r1, #0
 8007424:	68b8      	ldr	r0, [r7, #8]
 8007426:	f001 fb1d 	bl	8008a64 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800742a:	7bfb      	ldrb	r3, [r7, #15]
 800742c:	687a      	ldr	r2, [r7, #4]
 800742e:	211a      	movs	r1, #26
 8007430:	fb01 f303 	mul.w	r3, r1, r3
 8007434:	4413      	add	r3, r2
 8007436:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800743a:	781b      	ldrb	r3, [r3, #0]
 800743c:	b25b      	sxtb	r3, r3
 800743e:	2b00      	cmp	r3, #0
 8007440:	da15      	bge.n	800746e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007442:	7bfb      	ldrb	r3, [r7, #15]
 8007444:	687a      	ldr	r2, [r7, #4]
 8007446:	211a      	movs	r1, #26
 8007448:	fb01 f303 	mul.w	r3, r1, r3
 800744c:	4413      	add	r3, r2
 800744e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007452:	781a      	ldrb	r2, [r3, #0]
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007458:	7bfb      	ldrb	r3, [r7, #15]
 800745a:	687a      	ldr	r2, [r7, #4]
 800745c:	211a      	movs	r1, #26
 800745e:	fb01 f303 	mul.w	r3, r1, r3
 8007462:	4413      	add	r3, r2
 8007464:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007468:	881a      	ldrh	r2, [r3, #0]
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	785b      	ldrb	r3, [r3, #1]
 8007472:	4619      	mov	r1, r3
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f000 ffa0 	bl	80083ba <USBH_AllocPipe>
 800747a:	4603      	mov	r3, r0
 800747c:	461a      	mov	r2, r3
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	7819      	ldrb	r1, [r3, #0]
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	7858      	ldrb	r0, [r3, #1]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007496:	68ba      	ldr	r2, [r7, #8]
 8007498:	8952      	ldrh	r2, [r2, #10]
 800749a:	9202      	str	r2, [sp, #8]
 800749c:	2203      	movs	r2, #3
 800749e:	9201      	str	r2, [sp, #4]
 80074a0:	9300      	str	r3, [sp, #0]
 80074a2:	4623      	mov	r3, r4
 80074a4:	4602      	mov	r2, r0
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f000 ff58 	bl	800835c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	781b      	ldrb	r3, [r3, #0]
 80074b0:	2200      	movs	r2, #0
 80074b2:	4619      	mov	r1, r3
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f001 fa1f 	bl	80088f8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80074ba:	2300      	movs	r3, #0
 80074bc:	2200      	movs	r2, #0
 80074be:	210a      	movs	r1, #10
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f000 fbed 	bl	8007ca0 <USBH_FindInterface>
 80074c6:	4603      	mov	r3, r0
 80074c8:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80074ca:	7bfb      	ldrb	r3, [r7, #15]
 80074cc:	2bff      	cmp	r3, #255	; 0xff
 80074ce:	d002      	beq.n	80074d6 <USBH_CDC_InterfaceInit+0x11a>
 80074d0:	7bfb      	ldrb	r3, [r7, #15]
 80074d2:	2b01      	cmp	r3, #1
 80074d4:	d901      	bls.n	80074da <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80074d6:	2302      	movs	r3, #2
 80074d8:	e0c2      	b.n	8007660 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80074da:	7bfb      	ldrb	r3, [r7, #15]
 80074dc:	687a      	ldr	r2, [r7, #4]
 80074de:	211a      	movs	r1, #26
 80074e0:	fb01 f303 	mul.w	r3, r1, r3
 80074e4:	4413      	add	r3, r2
 80074e6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80074ea:	781b      	ldrb	r3, [r3, #0]
 80074ec:	b25b      	sxtb	r3, r3
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	da16      	bge.n	8007520 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80074f2:	7bfb      	ldrb	r3, [r7, #15]
 80074f4:	687a      	ldr	r2, [r7, #4]
 80074f6:	211a      	movs	r1, #26
 80074f8:	fb01 f303 	mul.w	r3, r1, r3
 80074fc:	4413      	add	r3, r2
 80074fe:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007502:	781a      	ldrb	r2, [r3, #0]
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007508:	7bfb      	ldrb	r3, [r7, #15]
 800750a:	687a      	ldr	r2, [r7, #4]
 800750c:	211a      	movs	r1, #26
 800750e:	fb01 f303 	mul.w	r3, r1, r3
 8007512:	4413      	add	r3, r2
 8007514:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007518:	881a      	ldrh	r2, [r3, #0]
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	835a      	strh	r2, [r3, #26]
 800751e:	e015      	b.n	800754c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007520:	7bfb      	ldrb	r3, [r7, #15]
 8007522:	687a      	ldr	r2, [r7, #4]
 8007524:	211a      	movs	r1, #26
 8007526:	fb01 f303 	mul.w	r3, r1, r3
 800752a:	4413      	add	r3, r2
 800752c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007530:	781a      	ldrb	r2, [r3, #0]
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007536:	7bfb      	ldrb	r3, [r7, #15]
 8007538:	687a      	ldr	r2, [r7, #4]
 800753a:	211a      	movs	r1, #26
 800753c:	fb01 f303 	mul.w	r3, r1, r3
 8007540:	4413      	add	r3, r2
 8007542:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007546:	881a      	ldrh	r2, [r3, #0]
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800754c:	7bfb      	ldrb	r3, [r7, #15]
 800754e:	687a      	ldr	r2, [r7, #4]
 8007550:	211a      	movs	r1, #26
 8007552:	fb01 f303 	mul.w	r3, r1, r3
 8007556:	4413      	add	r3, r2
 8007558:	f203 3356 	addw	r3, r3, #854	; 0x356
 800755c:	781b      	ldrb	r3, [r3, #0]
 800755e:	b25b      	sxtb	r3, r3
 8007560:	2b00      	cmp	r3, #0
 8007562:	da16      	bge.n	8007592 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007564:	7bfb      	ldrb	r3, [r7, #15]
 8007566:	687a      	ldr	r2, [r7, #4]
 8007568:	211a      	movs	r1, #26
 800756a:	fb01 f303 	mul.w	r3, r1, r3
 800756e:	4413      	add	r3, r2
 8007570:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007574:	781a      	ldrb	r2, [r3, #0]
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800757a:	7bfb      	ldrb	r3, [r7, #15]
 800757c:	687a      	ldr	r2, [r7, #4]
 800757e:	211a      	movs	r1, #26
 8007580:	fb01 f303 	mul.w	r3, r1, r3
 8007584:	4413      	add	r3, r2
 8007586:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800758a:	881a      	ldrh	r2, [r3, #0]
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	835a      	strh	r2, [r3, #26]
 8007590:	e015      	b.n	80075be <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007592:	7bfb      	ldrb	r3, [r7, #15]
 8007594:	687a      	ldr	r2, [r7, #4]
 8007596:	211a      	movs	r1, #26
 8007598:	fb01 f303 	mul.w	r3, r1, r3
 800759c:	4413      	add	r3, r2
 800759e:	f203 3356 	addw	r3, r3, #854	; 0x356
 80075a2:	781a      	ldrb	r2, [r3, #0]
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80075a8:	7bfb      	ldrb	r3, [r7, #15]
 80075aa:	687a      	ldr	r2, [r7, #4]
 80075ac:	211a      	movs	r1, #26
 80075ae:	fb01 f303 	mul.w	r3, r1, r3
 80075b2:	4413      	add	r3, r2
 80075b4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80075b8:	881a      	ldrh	r2, [r3, #0]
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	7b9b      	ldrb	r3, [r3, #14]
 80075c2:	4619      	mov	r1, r3
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f000 fef8 	bl	80083ba <USBH_AllocPipe>
 80075ca:	4603      	mov	r3, r0
 80075cc:	461a      	mov	r2, r3
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	7bdb      	ldrb	r3, [r3, #15]
 80075d6:	4619      	mov	r1, r3
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f000 feee 	bl	80083ba <USBH_AllocPipe>
 80075de:	4603      	mov	r3, r0
 80075e0:	461a      	mov	r2, r3
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	7b59      	ldrb	r1, [r3, #13]
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	7b98      	ldrb	r0, [r3, #14]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80075fa:	68ba      	ldr	r2, [r7, #8]
 80075fc:	8b12      	ldrh	r2, [r2, #24]
 80075fe:	9202      	str	r2, [sp, #8]
 8007600:	2202      	movs	r2, #2
 8007602:	9201      	str	r2, [sp, #4]
 8007604:	9300      	str	r3, [sp, #0]
 8007606:	4623      	mov	r3, r4
 8007608:	4602      	mov	r2, r0
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f000 fea6 	bl	800835c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	7b19      	ldrb	r1, [r3, #12]
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	7bd8      	ldrb	r0, [r3, #15]
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007624:	68ba      	ldr	r2, [r7, #8]
 8007626:	8b52      	ldrh	r2, [r2, #26]
 8007628:	9202      	str	r2, [sp, #8]
 800762a:	2202      	movs	r2, #2
 800762c:	9201      	str	r2, [sp, #4]
 800762e:	9300      	str	r3, [sp, #0]
 8007630:	4623      	mov	r3, r4
 8007632:	4602      	mov	r2, r0
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f000 fe91 	bl	800835c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	2200      	movs	r2, #0
 800763e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	7b5b      	ldrb	r3, [r3, #13]
 8007646:	2200      	movs	r2, #0
 8007648:	4619      	mov	r1, r3
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f001 f954 	bl	80088f8 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	7b1b      	ldrb	r3, [r3, #12]
 8007654:	2200      	movs	r2, #0
 8007656:	4619      	mov	r1, r3
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f001 f94d 	bl	80088f8 <USBH_LL_SetToggle>

  return USBH_OK;
 800765e:	2300      	movs	r3, #0
}
 8007660:	4618      	mov	r0, r3
 8007662:	3714      	adds	r7, #20
 8007664:	46bd      	mov	sp, r7
 8007666:	bd90      	pop	{r4, r7, pc}

08007668 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b084      	sub	sp, #16
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007676:	69db      	ldr	r3, [r3, #28]
 8007678:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	781b      	ldrb	r3, [r3, #0]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d00e      	beq.n	80076a0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	781b      	ldrb	r3, [r3, #0]
 8007686:	4619      	mov	r1, r3
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f000 fe86 	bl	800839a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	781b      	ldrb	r3, [r3, #0]
 8007692:	4619      	mov	r1, r3
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f000 feb1 	bl	80083fc <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2200      	movs	r2, #0
 800769e:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	7b1b      	ldrb	r3, [r3, #12]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d00e      	beq.n	80076c6 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	7b1b      	ldrb	r3, [r3, #12]
 80076ac:	4619      	mov	r1, r3
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f000 fe73 	bl	800839a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	7b1b      	ldrb	r3, [r3, #12]
 80076b8:	4619      	mov	r1, r3
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f000 fe9e 	bl	80083fc <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	2200      	movs	r2, #0
 80076c4:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	7b5b      	ldrb	r3, [r3, #13]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d00e      	beq.n	80076ec <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	7b5b      	ldrb	r3, [r3, #13]
 80076d2:	4619      	mov	r1, r3
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f000 fe60 	bl	800839a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	7b5b      	ldrb	r3, [r3, #13]
 80076de:	4619      	mov	r1, r3
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f000 fe8b 	bl	80083fc <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2200      	movs	r2, #0
 80076ea:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80076f2:	69db      	ldr	r3, [r3, #28]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d00b      	beq.n	8007710 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80076fe:	69db      	ldr	r3, [r3, #28]
 8007700:	4618      	mov	r0, r3
 8007702:	f001 f9a7 	bl	8008a54 <free>
    phost->pActiveClass->pData = 0U;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800770c:	2200      	movs	r2, #0
 800770e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007710:	2300      	movs	r3, #0
}
 8007712:	4618      	mov	r0, r3
 8007714:	3710      	adds	r7, #16
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}

0800771a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800771a:	b580      	push	{r7, lr}
 800771c:	b084      	sub	sp, #16
 800771e:	af00      	add	r7, sp, #0
 8007720:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007728:	69db      	ldr	r3, [r3, #28]
 800772a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	3340      	adds	r3, #64	; 0x40
 8007730:	4619      	mov	r1, r3
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f000 f8b1 	bl	800789a <GetLineCoding>
 8007738:	4603      	mov	r3, r0
 800773a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800773c:	7afb      	ldrb	r3, [r7, #11]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d105      	bne.n	800774e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007748:	2102      	movs	r1, #2
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800774e:	7afb      	ldrb	r3, [r7, #11]
}
 8007750:	4618      	mov	r0, r3
 8007752:	3710      	adds	r7, #16
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}

08007758 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b084      	sub	sp, #16
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007760:	2301      	movs	r3, #1
 8007762:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007764:	2300      	movs	r3, #0
 8007766:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800776e:	69db      	ldr	r3, [r3, #28]
 8007770:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007778:	2b04      	cmp	r3, #4
 800777a:	d877      	bhi.n	800786c <USBH_CDC_Process+0x114>
 800777c:	a201      	add	r2, pc, #4	; (adr r2, 8007784 <USBH_CDC_Process+0x2c>)
 800777e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007782:	bf00      	nop
 8007784:	08007799 	.word	0x08007799
 8007788:	0800779f 	.word	0x0800779f
 800778c:	080077cf 	.word	0x080077cf
 8007790:	08007843 	.word	0x08007843
 8007794:	08007851 	.word	0x08007851
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007798:	2300      	movs	r3, #0
 800779a:	73fb      	strb	r3, [r7, #15]
      break;
 800779c:	e06d      	b.n	800787a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077a2:	4619      	mov	r1, r3
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f000 f897 	bl	80078d8 <SetLineCoding>
 80077aa:	4603      	mov	r3, r0
 80077ac:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80077ae:	7bbb      	ldrb	r3, [r7, #14]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d104      	bne.n	80077be <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	2202      	movs	r2, #2
 80077b8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80077bc:	e058      	b.n	8007870 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80077be:	7bbb      	ldrb	r3, [r7, #14]
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d055      	beq.n	8007870 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	2204      	movs	r2, #4
 80077c8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80077cc:	e050      	b.n	8007870 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	3340      	adds	r3, #64	; 0x40
 80077d2:	4619      	mov	r1, r3
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f000 f860 	bl	800789a <GetLineCoding>
 80077da:	4603      	mov	r3, r0
 80077dc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80077de:	7bbb      	ldrb	r3, [r7, #14]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d126      	bne.n	8007832 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	2200      	movs	r2, #0
 80077e8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077f6:	791b      	ldrb	r3, [r3, #4]
 80077f8:	429a      	cmp	r2, r3
 80077fa:	d13b      	bne.n	8007874 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007806:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007808:	429a      	cmp	r2, r3
 800780a:	d133      	bne.n	8007874 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007816:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007818:	429a      	cmp	r2, r3
 800781a:	d12b      	bne.n	8007874 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007824:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007826:	429a      	cmp	r2, r3
 8007828:	d124      	bne.n	8007874 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f000 f95a 	bl	8007ae4 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007830:	e020      	b.n	8007874 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007832:	7bbb      	ldrb	r3, [r7, #14]
 8007834:	2b01      	cmp	r3, #1
 8007836:	d01d      	beq.n	8007874 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	2204      	movs	r2, #4
 800783c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007840:	e018      	b.n	8007874 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f000 f867 	bl	8007916 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f000 f8dc 	bl	8007a06 <CDC_ProcessReception>
      break;
 800784e:	e014      	b.n	800787a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007850:	2100      	movs	r1, #0
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f000 fb0a 	bl	8007e6c <USBH_ClrFeature>
 8007858:	4603      	mov	r3, r0
 800785a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800785c:	7bbb      	ldrb	r3, [r7, #14]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d10a      	bne.n	8007878 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	2200      	movs	r2, #0
 8007866:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800786a:	e005      	b.n	8007878 <USBH_CDC_Process+0x120>

    default:
      break;
 800786c:	bf00      	nop
 800786e:	e004      	b.n	800787a <USBH_CDC_Process+0x122>
      break;
 8007870:	bf00      	nop
 8007872:	e002      	b.n	800787a <USBH_CDC_Process+0x122>
      break;
 8007874:	bf00      	nop
 8007876:	e000      	b.n	800787a <USBH_CDC_Process+0x122>
      break;
 8007878:	bf00      	nop

  }

  return status;
 800787a:	7bfb      	ldrb	r3, [r7, #15]
}
 800787c:	4618      	mov	r0, r3
 800787e:	3710      	adds	r7, #16
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}

08007884 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007884:	b480      	push	{r7}
 8007886:	b083      	sub	sp, #12
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800788c:	2300      	movs	r3, #0
}
 800788e:	4618      	mov	r0, r3
 8007890:	370c      	adds	r7, #12
 8007892:	46bd      	mov	sp, r7
 8007894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007898:	4770      	bx	lr

0800789a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800789a:	b580      	push	{r7, lr}
 800789c:	b082      	sub	sp, #8
 800789e:	af00      	add	r7, sp, #0
 80078a0:	6078      	str	r0, [r7, #4]
 80078a2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	22a1      	movs	r2, #161	; 0xa1
 80078a8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2221      	movs	r2, #33	; 0x21
 80078ae:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2200      	movs	r2, #0
 80078b4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2200      	movs	r2, #0
 80078ba:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2207      	movs	r2, #7
 80078c0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	2207      	movs	r2, #7
 80078c6:	4619      	mov	r1, r3
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f000 faf3 	bl	8007eb4 <USBH_CtlReq>
 80078ce:	4603      	mov	r3, r0
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	3708      	adds	r7, #8
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}

080078d8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b082      	sub	sp, #8
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
 80078e0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2221      	movs	r2, #33	; 0x21
 80078e6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2220      	movs	r2, #32
 80078ec:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2200      	movs	r2, #0
 80078f2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2200      	movs	r2, #0
 80078f8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2207      	movs	r2, #7
 80078fe:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	2207      	movs	r2, #7
 8007904:	4619      	mov	r1, r3
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f000 fad4 	bl	8007eb4 <USBH_CtlReq>
 800790c:	4603      	mov	r3, r0
}
 800790e:	4618      	mov	r0, r3
 8007910:	3708      	adds	r7, #8
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}

08007916 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007916:	b580      	push	{r7, lr}
 8007918:	b086      	sub	sp, #24
 800791a:	af02      	add	r7, sp, #8
 800791c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007924:	69db      	ldr	r3, [r3, #28]
 8007926:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007928:	2300      	movs	r3, #0
 800792a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8007932:	2b01      	cmp	r3, #1
 8007934:	d002      	beq.n	800793c <CDC_ProcessTransmission+0x26>
 8007936:	2b02      	cmp	r3, #2
 8007938:	d025      	beq.n	8007986 <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 800793a:	e060      	b.n	80079fe <CDC_ProcessTransmission+0xe8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007940:	68fa      	ldr	r2, [r7, #12]
 8007942:	8b12      	ldrh	r2, [r2, #24]
 8007944:	4293      	cmp	r3, r2
 8007946:	d90c      	bls.n	8007962 <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	69d9      	ldr	r1, [r3, #28]
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	8b1a      	ldrh	r2, [r3, #24]
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	7b58      	ldrb	r0, [r3, #13]
 8007954:	2301      	movs	r3, #1
 8007956:	9300      	str	r3, [sp, #0]
 8007958:	4603      	mov	r3, r0
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f000 fcbb 	bl	80082d6 <USBH_BulkSendData>
 8007960:	e00c      	b.n	800797c <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800796a:	b29a      	uxth	r2, r3
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	7b58      	ldrb	r0, [r3, #13]
 8007970:	2301      	movs	r3, #1
 8007972:	9300      	str	r3, [sp, #0]
 8007974:	4603      	mov	r3, r0
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f000 fcad 	bl	80082d6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	2202      	movs	r2, #2
 8007980:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007984:	e03b      	b.n	80079fe <CDC_ProcessTransmission+0xe8>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	7b5b      	ldrb	r3, [r3, #13]
 800798a:	4619      	mov	r1, r3
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f000 ff89 	bl	80088a4 <USBH_LL_GetURBState>
 8007992:	4603      	mov	r3, r0
 8007994:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007996:	7afb      	ldrb	r3, [r7, #11]
 8007998:	2b01      	cmp	r3, #1
 800799a:	d128      	bne.n	80079ee <CDC_ProcessTransmission+0xd8>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a0:	68fa      	ldr	r2, [r7, #12]
 80079a2:	8b12      	ldrh	r2, [r2, #24]
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d90e      	bls.n	80079c6 <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ac:	68fa      	ldr	r2, [r7, #12]
 80079ae:	8b12      	ldrh	r2, [r2, #24]
 80079b0:	1a9a      	subs	r2, r3, r2
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	69db      	ldr	r3, [r3, #28]
 80079ba:	68fa      	ldr	r2, [r7, #12]
 80079bc:	8b12      	ldrh	r2, [r2, #24]
 80079be:	441a      	add	r2, r3
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	61da      	str	r2, [r3, #28]
 80079c4:	e002      	b.n	80079cc <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2200      	movs	r2, #0
 80079ca:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d004      	beq.n	80079de <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	2201      	movs	r2, #1
 80079d8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80079dc:	e00e      	b.n	80079fc <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2200      	movs	r2, #0
 80079e2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f000 f868 	bl	8007abc <USBH_CDC_TransmitCallback>
      break;
 80079ec:	e006      	b.n	80079fc <CDC_ProcessTransmission+0xe6>
        if (URB_Status == USBH_URB_NOTREADY)
 80079ee:	7afb      	ldrb	r3, [r7, #11]
 80079f0:	2b02      	cmp	r3, #2
 80079f2:	d103      	bne.n	80079fc <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	2201      	movs	r2, #1
 80079f8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80079fc:	bf00      	nop
  }
}
 80079fe:	bf00      	nop
 8007a00:	3710      	adds	r7, #16
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}

08007a06 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007a06:	b580      	push	{r7, lr}
 8007a08:	b086      	sub	sp, #24
 8007a0a:	af00      	add	r7, sp, #0
 8007a0c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a14:	69db      	ldr	r3, [r3, #28]
 8007a16:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007a22:	2b03      	cmp	r3, #3
 8007a24:	d002      	beq.n	8007a2c <CDC_ProcessReception+0x26>
 8007a26:	2b04      	cmp	r3, #4
 8007a28:	d00e      	beq.n	8007a48 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007a2a:	e043      	b.n	8007ab4 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	6a19      	ldr	r1, [r3, #32]
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	8b5a      	ldrh	r2, [r3, #26]
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	7b1b      	ldrb	r3, [r3, #12]
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f000 fc71 	bl	8008320 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	2204      	movs	r2, #4
 8007a42:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007a46:	e035      	b.n	8007ab4 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	7b1b      	ldrb	r3, [r3, #12]
 8007a4c:	4619      	mov	r1, r3
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f000 ff28 	bl	80088a4 <USBH_LL_GetURBState>
 8007a54:	4603      	mov	r3, r0
 8007a56:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007a58:	7cfb      	ldrb	r3, [r7, #19]
 8007a5a:	2b01      	cmp	r3, #1
 8007a5c:	d129      	bne.n	8007ab2 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	7b1b      	ldrb	r3, [r3, #12]
 8007a62:	4619      	mov	r1, r3
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f000 fe8b 	bl	8008780 <USBH_LL_GetLastXferSize>
 8007a6a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a70:	68fa      	ldr	r2, [r7, #12]
 8007a72:	429a      	cmp	r2, r3
 8007a74:	d016      	beq.n	8007aa4 <CDC_ProcessReception+0x9e>
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	8b5b      	ldrh	r3, [r3, #26]
 8007a7a:	461a      	mov	r2, r3
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d910      	bls.n	8007aa4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	1ad2      	subs	r2, r2, r3
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	6a1a      	ldr	r2, [r3, #32]
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	441a      	add	r2, r3
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	2203      	movs	r2, #3
 8007a9e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007aa2:	e006      	b.n	8007ab2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f000 f80f 	bl	8007ad0 <USBH_CDC_ReceiveCallback>
      break;
 8007ab2:	bf00      	nop
  }
}
 8007ab4:	bf00      	nop
 8007ab6:	3718      	adds	r7, #24
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}

08007abc <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b083      	sub	sp, #12
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007ac4:	bf00      	nop
 8007ac6:	370c      	adds	r7, #12
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ace:	4770      	bx	lr

08007ad0 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b083      	sub	sp, #12
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007ad8:	bf00      	nop
 8007ada:	370c      	adds	r7, #12
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr

08007ae4 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b083      	sub	sp, #12
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007aec:	bf00      	nop
 8007aee:	370c      	adds	r7, #12
 8007af0:	46bd      	mov	sp, r7
 8007af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af6:	4770      	bx	lr

08007af8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b084      	sub	sp, #16
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	60f8      	str	r0, [r7, #12]
 8007b00:	60b9      	str	r1, [r7, #8]
 8007b02:	4613      	mov	r3, r2
 8007b04:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d101      	bne.n	8007b10 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007b0c:	2302      	movs	r3, #2
 8007b0e:	e029      	b.n	8007b64 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	79fa      	ldrb	r2, [r7, #7]
 8007b14:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	2200      	movs	r2, #0
 8007b24:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8007b28:	68f8      	ldr	r0, [r7, #12]
 8007b2a:	f000 f81f 	bl	8007b6c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	2200      	movs	r2, #0
 8007b32:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2200      	movs	r2, #0
 8007b42:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d003      	beq.n	8007b5c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	68ba      	ldr	r2, [r7, #8]
 8007b58:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8007b5c:	68f8      	ldr	r0, [r7, #12]
 8007b5e:	f000 fd9d 	bl	800869c <USBH_LL_Init>

  return USBH_OK;
 8007b62:	2300      	movs	r3, #0
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	3710      	adds	r7, #16
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}

08007b6c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b085      	sub	sp, #20
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007b74:	2300      	movs	r3, #0
 8007b76:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007b78:	2300      	movs	r3, #0
 8007b7a:	60fb      	str	r3, [r7, #12]
 8007b7c:	e009      	b.n	8007b92 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007b7e:	687a      	ldr	r2, [r7, #4]
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	33e0      	adds	r3, #224	; 0xe0
 8007b84:	009b      	lsls	r3, r3, #2
 8007b86:	4413      	add	r3, r2
 8007b88:	2200      	movs	r2, #0
 8007b8a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	3301      	adds	r3, #1
 8007b90:	60fb      	str	r3, [r7, #12]
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	2b0e      	cmp	r3, #14
 8007b96:	d9f2      	bls.n	8007b7e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007b98:	2300      	movs	r3, #0
 8007b9a:	60fb      	str	r3, [r7, #12]
 8007b9c:	e009      	b.n	8007bb2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007b9e:	687a      	ldr	r2, [r7, #4]
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	4413      	add	r3, r2
 8007ba4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007ba8:	2200      	movs	r2, #0
 8007baa:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	3301      	adds	r3, #1
 8007bb0:	60fb      	str	r3, [r7, #12]
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bb8:	d3f1      	bcc.n	8007b9e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2201      	movs	r2, #1
 8007bca:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2240      	movs	r2, #64	; 0x40
 8007bde:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2200      	movs	r2, #0
 8007be4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2200      	movs	r2, #0
 8007bea:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2201      	movs	r2, #1
 8007bf2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2200      	movs	r2, #0
 8007c02:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007c06:	2300      	movs	r3, #0
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3714      	adds	r7, #20
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c12:	4770      	bx	lr

08007c14 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b085      	sub	sp, #20
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
 8007c1c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d016      	beq.n	8007c56 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d10e      	bne.n	8007c50 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007c38:	1c59      	adds	r1, r3, #1
 8007c3a:	687a      	ldr	r2, [r7, #4]
 8007c3c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007c40:	687a      	ldr	r2, [r7, #4]
 8007c42:	33de      	adds	r3, #222	; 0xde
 8007c44:	6839      	ldr	r1, [r7, #0]
 8007c46:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	73fb      	strb	r3, [r7, #15]
 8007c4e:	e004      	b.n	8007c5a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007c50:	2302      	movs	r3, #2
 8007c52:	73fb      	strb	r3, [r7, #15]
 8007c54:	e001      	b.n	8007c5a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007c56:	2302      	movs	r3, #2
 8007c58:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007c5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3714      	adds	r7, #20
 8007c60:	46bd      	mov	sp, r7
 8007c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c66:	4770      	bx	lr

08007c68 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b085      	sub	sp, #20
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	460b      	mov	r3, r1
 8007c72:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007c74:	2300      	movs	r3, #0
 8007c76:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007c7e:	78fa      	ldrb	r2, [r7, #3]
 8007c80:	429a      	cmp	r2, r3
 8007c82:	d204      	bcs.n	8007c8e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	78fa      	ldrb	r2, [r7, #3]
 8007c88:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007c8c:	e001      	b.n	8007c92 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007c8e:	2302      	movs	r3, #2
 8007c90:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c94:	4618      	mov	r0, r3
 8007c96:	3714      	adds	r7, #20
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr

08007ca0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b087      	sub	sp, #28
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
 8007ca8:	4608      	mov	r0, r1
 8007caa:	4611      	mov	r1, r2
 8007cac:	461a      	mov	r2, r3
 8007cae:	4603      	mov	r3, r0
 8007cb0:	70fb      	strb	r3, [r7, #3]
 8007cb2:	460b      	mov	r3, r1
 8007cb4:	70bb      	strb	r3, [r7, #2]
 8007cb6:	4613      	mov	r3, r2
 8007cb8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007cc8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007cca:	e025      	b.n	8007d18 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007ccc:	7dfb      	ldrb	r3, [r7, #23]
 8007cce:	221a      	movs	r2, #26
 8007cd0:	fb02 f303 	mul.w	r3, r2, r3
 8007cd4:	3308      	adds	r3, #8
 8007cd6:	68fa      	ldr	r2, [r7, #12]
 8007cd8:	4413      	add	r3, r2
 8007cda:	3302      	adds	r3, #2
 8007cdc:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	795b      	ldrb	r3, [r3, #5]
 8007ce2:	78fa      	ldrb	r2, [r7, #3]
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	d002      	beq.n	8007cee <USBH_FindInterface+0x4e>
 8007ce8:	78fb      	ldrb	r3, [r7, #3]
 8007cea:	2bff      	cmp	r3, #255	; 0xff
 8007cec:	d111      	bne.n	8007d12 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007cee:	693b      	ldr	r3, [r7, #16]
 8007cf0:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007cf2:	78ba      	ldrb	r2, [r7, #2]
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	d002      	beq.n	8007cfe <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007cf8:	78bb      	ldrb	r3, [r7, #2]
 8007cfa:	2bff      	cmp	r3, #255	; 0xff
 8007cfc:	d109      	bne.n	8007d12 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007d02:	787a      	ldrb	r2, [r7, #1]
 8007d04:	429a      	cmp	r2, r3
 8007d06:	d002      	beq.n	8007d0e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007d08:	787b      	ldrb	r3, [r7, #1]
 8007d0a:	2bff      	cmp	r3, #255	; 0xff
 8007d0c:	d101      	bne.n	8007d12 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007d0e:	7dfb      	ldrb	r3, [r7, #23]
 8007d10:	e006      	b.n	8007d20 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007d12:	7dfb      	ldrb	r3, [r7, #23]
 8007d14:	3301      	adds	r3, #1
 8007d16:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007d18:	7dfb      	ldrb	r3, [r7, #23]
 8007d1a:	2b01      	cmp	r3, #1
 8007d1c:	d9d6      	bls.n	8007ccc <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007d1e:	23ff      	movs	r3, #255	; 0xff
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	371c      	adds	r7, #28
 8007d24:	46bd      	mov	sp, r7
 8007d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2a:	4770      	bx	lr

08007d2c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b082      	sub	sp, #8
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f000 fced 	bl	8008714 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8007d3a:	2101      	movs	r1, #1
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f000 fdc4 	bl	80088ca <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007d42:	2300      	movs	r3, #0
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	3708      	adds	r7, #8
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}

08007d4c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b083      	sub	sp, #12
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
 8007d54:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	683a      	ldr	r2, [r7, #0]
 8007d5a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007d5e:	bf00      	nop
 8007d60:	370c      	adds	r7, #12
 8007d62:	46bd      	mov	sp, r7
 8007d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d68:	4770      	bx	lr

08007d6a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007d6a:	b580      	push	{r7, lr}
 8007d6c:	b082      	sub	sp, #8
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007d78:	1c5a      	adds	r2, r3, #1
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f000 f804 	bl	8007d8e <USBH_HandleSof>
}
 8007d86:	bf00      	nop
 8007d88:	3708      	adds	r7, #8
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}

08007d8e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007d8e:	b580      	push	{r7, lr}
 8007d90:	b082      	sub	sp, #8
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	781b      	ldrb	r3, [r3, #0]
 8007d9a:	b2db      	uxtb	r3, r3
 8007d9c:	2b0b      	cmp	r3, #11
 8007d9e:	d10a      	bne.n	8007db6 <USBH_HandleSof+0x28>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d005      	beq.n	8007db6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007db0:	699b      	ldr	r3, [r3, #24]
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	4798      	blx	r3
  }
}
 8007db6:	bf00      	nop
 8007db8:	3708      	adds	r7, #8
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}

08007dbe <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007dbe:	b480      	push	{r7}
 8007dc0:	b083      	sub	sp, #12
 8007dc2:	af00      	add	r7, sp, #0
 8007dc4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2201      	movs	r2, #1
 8007dca:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8007dce:	bf00      	nop
}
 8007dd0:	370c      	adds	r7, #12
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd8:	4770      	bx	lr

08007dda <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007dda:	b480      	push	{r7}
 8007ddc:	b083      	sub	sp, #12
 8007dde:	af00      	add	r7, sp, #0
 8007de0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2200      	movs	r2, #0
 8007de6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007dea:	bf00      	nop
}
 8007dec:	370c      	adds	r7, #12
 8007dee:	46bd      	mov	sp, r7
 8007df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df4:	4770      	bx	lr

08007df6 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007df6:	b480      	push	{r7}
 8007df8:	b083      	sub	sp, #12
 8007dfa:	af00      	add	r7, sp, #0
 8007dfc:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2201      	movs	r2, #1
 8007e02:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2200      	movs	r2, #0
 8007e12:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007e16:	2300      	movs	r3, #0
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	370c      	adds	r7, #12
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e22:	4770      	bx	lr

08007e24 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b082      	sub	sp, #8
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2201      	movs	r2, #1
 8007e30:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2200      	movs	r2, #0
 8007e38:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f000 fc80 	bl	800874a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	791b      	ldrb	r3, [r3, #4]
 8007e4e:	4619      	mov	r1, r3
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f000 fad3 	bl	80083fc <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	795b      	ldrb	r3, [r3, #5]
 8007e5a:	4619      	mov	r1, r3
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f000 facd 	bl	80083fc <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007e62:	2300      	movs	r3, #0
}
 8007e64:	4618      	mov	r0, r3
 8007e66:	3708      	adds	r7, #8
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}

08007e6c <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b082      	sub	sp, #8
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
 8007e74:	460b      	mov	r3, r1
 8007e76:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	789b      	ldrb	r3, [r3, #2]
 8007e7c:	2b01      	cmp	r3, #1
 8007e7e:	d10f      	bne.n	8007ea0 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2202      	movs	r2, #2
 8007e84:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2201      	movs	r2, #1
 8007e8a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007e92:	78fb      	ldrb	r3, [r7, #3]
 8007e94:	b29a      	uxth	r2, r3
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	2100      	movs	r1, #0
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f000 f805 	bl	8007eb4 <USBH_CtlReq>
 8007eaa:	4603      	mov	r3, r0
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	3708      	adds	r7, #8
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}

08007eb4 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b086      	sub	sp, #24
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	60f8      	str	r0, [r7, #12]
 8007ebc:	60b9      	str	r1, [r7, #8]
 8007ebe:	4613      	mov	r3, r2
 8007ec0:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	789b      	ldrb	r3, [r3, #2]
 8007eca:	2b01      	cmp	r3, #1
 8007ecc:	d002      	beq.n	8007ed4 <USBH_CtlReq+0x20>
 8007ece:	2b02      	cmp	r3, #2
 8007ed0:	d00f      	beq.n	8007ef2 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007ed2:	e027      	b.n	8007f24 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	68ba      	ldr	r2, [r7, #8]
 8007ed8:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	88fa      	ldrh	r2, [r7, #6]
 8007ede:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	2202      	movs	r2, #2
 8007eea:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007eec:	2301      	movs	r3, #1
 8007eee:	75fb      	strb	r3, [r7, #23]
      break;
 8007ef0:	e018      	b.n	8007f24 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007ef2:	68f8      	ldr	r0, [r7, #12]
 8007ef4:	f000 f81c 	bl	8007f30 <USBH_HandleControl>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007efc:	7dfb      	ldrb	r3, [r7, #23]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d002      	beq.n	8007f08 <USBH_CtlReq+0x54>
 8007f02:	7dfb      	ldrb	r3, [r7, #23]
 8007f04:	2b03      	cmp	r3, #3
 8007f06:	d106      	bne.n	8007f16 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2200      	movs	r2, #0
 8007f12:	761a      	strb	r2, [r3, #24]
      break;
 8007f14:	e005      	b.n	8007f22 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007f16:	7dfb      	ldrb	r3, [r7, #23]
 8007f18:	2b02      	cmp	r3, #2
 8007f1a:	d102      	bne.n	8007f22 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	2201      	movs	r2, #1
 8007f20:	709a      	strb	r2, [r3, #2]
      break;
 8007f22:	bf00      	nop
  }
  return status;
 8007f24:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	3718      	adds	r7, #24
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}
	...

08007f30 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b086      	sub	sp, #24
 8007f34:	af02      	add	r7, sp, #8
 8007f36:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007f38:	2301      	movs	r3, #1
 8007f3a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	7e1b      	ldrb	r3, [r3, #24]
 8007f44:	3b01      	subs	r3, #1
 8007f46:	2b0a      	cmp	r3, #10
 8007f48:	f200 8158 	bhi.w	80081fc <USBH_HandleControl+0x2cc>
 8007f4c:	a201      	add	r2, pc, #4	; (adr r2, 8007f54 <USBH_HandleControl+0x24>)
 8007f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f52:	bf00      	nop
 8007f54:	08007f81 	.word	0x08007f81
 8007f58:	08007f9b 	.word	0x08007f9b
 8007f5c:	08008005 	.word	0x08008005
 8007f60:	0800802b 	.word	0x0800802b
 8007f64:	08008063 	.word	0x08008063
 8007f68:	0800808f 	.word	0x0800808f
 8007f6c:	080080e1 	.word	0x080080e1
 8007f70:	08008103 	.word	0x08008103
 8007f74:	0800813f 	.word	0x0800813f
 8007f78:	08008167 	.word	0x08008167
 8007f7c:	080081a5 	.word	0x080081a5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f103 0110 	add.w	r1, r3, #16
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	795b      	ldrb	r3, [r3, #5]
 8007f8a:	461a      	mov	r2, r3
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f000 f945 	bl	800821c <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2202      	movs	r2, #2
 8007f96:	761a      	strb	r2, [r3, #24]
      break;
 8007f98:	e13b      	b.n	8008212 <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	795b      	ldrb	r3, [r3, #5]
 8007f9e:	4619      	mov	r1, r3
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f000 fc7f 	bl	80088a4 <USBH_LL_GetURBState>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007faa:	7bbb      	ldrb	r3, [r7, #14]
 8007fac:	2b01      	cmp	r3, #1
 8007fae:	d11e      	bne.n	8007fee <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	7c1b      	ldrb	r3, [r3, #16]
 8007fb4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007fb8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	8adb      	ldrh	r3, [r3, #22]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d00a      	beq.n	8007fd8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007fc2:	7b7b      	ldrb	r3, [r7, #13]
 8007fc4:	2b80      	cmp	r3, #128	; 0x80
 8007fc6:	d103      	bne.n	8007fd0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2203      	movs	r2, #3
 8007fcc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007fce:	e117      	b.n	8008200 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2205      	movs	r2, #5
 8007fd4:	761a      	strb	r2, [r3, #24]
      break;
 8007fd6:	e113      	b.n	8008200 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 8007fd8:	7b7b      	ldrb	r3, [r7, #13]
 8007fda:	2b80      	cmp	r3, #128	; 0x80
 8007fdc:	d103      	bne.n	8007fe6 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2209      	movs	r2, #9
 8007fe2:	761a      	strb	r2, [r3, #24]
      break;
 8007fe4:	e10c      	b.n	8008200 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2207      	movs	r2, #7
 8007fea:	761a      	strb	r2, [r3, #24]
      break;
 8007fec:	e108      	b.n	8008200 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007fee:	7bbb      	ldrb	r3, [r7, #14]
 8007ff0:	2b04      	cmp	r3, #4
 8007ff2:	d003      	beq.n	8007ffc <USBH_HandleControl+0xcc>
 8007ff4:	7bbb      	ldrb	r3, [r7, #14]
 8007ff6:	2b02      	cmp	r3, #2
 8007ff8:	f040 8102 	bne.w	8008200 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	220b      	movs	r2, #11
 8008000:	761a      	strb	r2, [r3, #24]
      break;
 8008002:	e0fd      	b.n	8008200 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800800a:	b29a      	uxth	r2, r3
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6899      	ldr	r1, [r3, #8]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	899a      	ldrh	r2, [r3, #12]
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	791b      	ldrb	r3, [r3, #4]
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f000 f93c 	bl	800829a <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2204      	movs	r2, #4
 8008026:	761a      	strb	r2, [r3, #24]
      break;
 8008028:	e0f3      	b.n	8008212 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	791b      	ldrb	r3, [r3, #4]
 800802e:	4619      	mov	r1, r3
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f000 fc37 	bl	80088a4 <USBH_LL_GetURBState>
 8008036:	4603      	mov	r3, r0
 8008038:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800803a:	7bbb      	ldrb	r3, [r7, #14]
 800803c:	2b01      	cmp	r3, #1
 800803e:	d102      	bne.n	8008046 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2209      	movs	r2, #9
 8008044:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008046:	7bbb      	ldrb	r3, [r7, #14]
 8008048:	2b05      	cmp	r3, #5
 800804a:	d102      	bne.n	8008052 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800804c:	2303      	movs	r3, #3
 800804e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008050:	e0d8      	b.n	8008204 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008052:	7bbb      	ldrb	r3, [r7, #14]
 8008054:	2b04      	cmp	r3, #4
 8008056:	f040 80d5 	bne.w	8008204 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	220b      	movs	r2, #11
 800805e:	761a      	strb	r2, [r3, #24]
      break;
 8008060:	e0d0      	b.n	8008204 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6899      	ldr	r1, [r3, #8]
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	899a      	ldrh	r2, [r3, #12]
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	7958      	ldrb	r0, [r3, #5]
 800806e:	2301      	movs	r3, #1
 8008070:	9300      	str	r3, [sp, #0]
 8008072:	4603      	mov	r3, r0
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f000 f8eb 	bl	8008250 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008080:	b29a      	uxth	r2, r3
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2206      	movs	r2, #6
 800808a:	761a      	strb	r2, [r3, #24]
      break;
 800808c:	e0c1      	b.n	8008212 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	795b      	ldrb	r3, [r3, #5]
 8008092:	4619      	mov	r1, r3
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f000 fc05 	bl	80088a4 <USBH_LL_GetURBState>
 800809a:	4603      	mov	r3, r0
 800809c:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800809e:	7bbb      	ldrb	r3, [r7, #14]
 80080a0:	2b01      	cmp	r3, #1
 80080a2:	d103      	bne.n	80080ac <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2207      	movs	r2, #7
 80080a8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80080aa:	e0ad      	b.n	8008208 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 80080ac:	7bbb      	ldrb	r3, [r7, #14]
 80080ae:	2b05      	cmp	r3, #5
 80080b0:	d105      	bne.n	80080be <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	220c      	movs	r2, #12
 80080b6:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80080b8:	2303      	movs	r3, #3
 80080ba:	73fb      	strb	r3, [r7, #15]
      break;
 80080bc:	e0a4      	b.n	8008208 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 80080be:	7bbb      	ldrb	r3, [r7, #14]
 80080c0:	2b02      	cmp	r3, #2
 80080c2:	d103      	bne.n	80080cc <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2205      	movs	r2, #5
 80080c8:	761a      	strb	r2, [r3, #24]
      break;
 80080ca:	e09d      	b.n	8008208 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 80080cc:	7bbb      	ldrb	r3, [r7, #14]
 80080ce:	2b04      	cmp	r3, #4
 80080d0:	f040 809a 	bne.w	8008208 <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	220b      	movs	r2, #11
 80080d8:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80080da:	2302      	movs	r3, #2
 80080dc:	73fb      	strb	r3, [r7, #15]
      break;
 80080de:	e093      	b.n	8008208 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	791b      	ldrb	r3, [r3, #4]
 80080e4:	2200      	movs	r2, #0
 80080e6:	2100      	movs	r1, #0
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f000 f8d6 	bl	800829a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80080f4:	b29a      	uxth	r2, r3
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2208      	movs	r2, #8
 80080fe:	761a      	strb	r2, [r3, #24]

      break;
 8008100:	e087      	b.n	8008212 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	791b      	ldrb	r3, [r3, #4]
 8008106:	4619      	mov	r1, r3
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f000 fbcb 	bl	80088a4 <USBH_LL_GetURBState>
 800810e:	4603      	mov	r3, r0
 8008110:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008112:	7bbb      	ldrb	r3, [r7, #14]
 8008114:	2b01      	cmp	r3, #1
 8008116:	d105      	bne.n	8008124 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	220d      	movs	r2, #13
 800811c:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800811e:	2300      	movs	r3, #0
 8008120:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008122:	e073      	b.n	800820c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 8008124:	7bbb      	ldrb	r3, [r7, #14]
 8008126:	2b04      	cmp	r3, #4
 8008128:	d103      	bne.n	8008132 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	220b      	movs	r2, #11
 800812e:	761a      	strb	r2, [r3, #24]
      break;
 8008130:	e06c      	b.n	800820c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 8008132:	7bbb      	ldrb	r3, [r7, #14]
 8008134:	2b05      	cmp	r3, #5
 8008136:	d169      	bne.n	800820c <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 8008138:	2303      	movs	r3, #3
 800813a:	73fb      	strb	r3, [r7, #15]
      break;
 800813c:	e066      	b.n	800820c <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	795a      	ldrb	r2, [r3, #5]
 8008142:	2301      	movs	r3, #1
 8008144:	9300      	str	r3, [sp, #0]
 8008146:	4613      	mov	r3, r2
 8008148:	2200      	movs	r2, #0
 800814a:	2100      	movs	r1, #0
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f000 f87f 	bl	8008250 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008158:	b29a      	uxth	r2, r3
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	220a      	movs	r2, #10
 8008162:	761a      	strb	r2, [r3, #24]
      break;
 8008164:	e055      	b.n	8008212 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	795b      	ldrb	r3, [r3, #5]
 800816a:	4619      	mov	r1, r3
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f000 fb99 	bl	80088a4 <USBH_LL_GetURBState>
 8008172:	4603      	mov	r3, r0
 8008174:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008176:	7bbb      	ldrb	r3, [r7, #14]
 8008178:	2b01      	cmp	r3, #1
 800817a:	d105      	bne.n	8008188 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 800817c:	2300      	movs	r3, #0
 800817e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	220d      	movs	r2, #13
 8008184:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008186:	e043      	b.n	8008210 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008188:	7bbb      	ldrb	r3, [r7, #14]
 800818a:	2b02      	cmp	r3, #2
 800818c:	d103      	bne.n	8008196 <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2209      	movs	r2, #9
 8008192:	761a      	strb	r2, [r3, #24]
      break;
 8008194:	e03c      	b.n	8008210 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 8008196:	7bbb      	ldrb	r3, [r7, #14]
 8008198:	2b04      	cmp	r3, #4
 800819a:	d139      	bne.n	8008210 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	220b      	movs	r2, #11
 80081a0:	761a      	strb	r2, [r3, #24]
      break;
 80081a2:	e035      	b.n	8008210 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	7e5b      	ldrb	r3, [r3, #25]
 80081a8:	3301      	adds	r3, #1
 80081aa:	b2da      	uxtb	r2, r3
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	765a      	strb	r2, [r3, #25]
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	7e5b      	ldrb	r3, [r3, #25]
 80081b4:	2b02      	cmp	r3, #2
 80081b6:	d806      	bhi.n	80081c6 <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2201      	movs	r2, #1
 80081bc:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2201      	movs	r2, #1
 80081c2:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80081c4:	e025      	b.n	8008212 <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80081cc:	2106      	movs	r1, #6
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2200      	movs	r2, #0
 80081d6:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	795b      	ldrb	r3, [r3, #5]
 80081dc:	4619      	mov	r1, r3
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f000 f90c 	bl	80083fc <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	791b      	ldrb	r3, [r3, #4]
 80081e8:	4619      	mov	r1, r3
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f000 f906 	bl	80083fc <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2200      	movs	r2, #0
 80081f4:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80081f6:	2302      	movs	r3, #2
 80081f8:	73fb      	strb	r3, [r7, #15]
      break;
 80081fa:	e00a      	b.n	8008212 <USBH_HandleControl+0x2e2>

    default:
      break;
 80081fc:	bf00      	nop
 80081fe:	e008      	b.n	8008212 <USBH_HandleControl+0x2e2>
      break;
 8008200:	bf00      	nop
 8008202:	e006      	b.n	8008212 <USBH_HandleControl+0x2e2>
      break;
 8008204:	bf00      	nop
 8008206:	e004      	b.n	8008212 <USBH_HandleControl+0x2e2>
      break;
 8008208:	bf00      	nop
 800820a:	e002      	b.n	8008212 <USBH_HandleControl+0x2e2>
      break;
 800820c:	bf00      	nop
 800820e:	e000      	b.n	8008212 <USBH_HandleControl+0x2e2>
      break;
 8008210:	bf00      	nop
  }

  return status;
 8008212:	7bfb      	ldrb	r3, [r7, #15]
}
 8008214:	4618      	mov	r0, r3
 8008216:	3710      	adds	r7, #16
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}

0800821c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b088      	sub	sp, #32
 8008220:	af04      	add	r7, sp, #16
 8008222:	60f8      	str	r0, [r7, #12]
 8008224:	60b9      	str	r1, [r7, #8]
 8008226:	4613      	mov	r3, r2
 8008228:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800822a:	79f9      	ldrb	r1, [r7, #7]
 800822c:	2300      	movs	r3, #0
 800822e:	9303      	str	r3, [sp, #12]
 8008230:	2308      	movs	r3, #8
 8008232:	9302      	str	r3, [sp, #8]
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	9301      	str	r3, [sp, #4]
 8008238:	2300      	movs	r3, #0
 800823a:	9300      	str	r3, [sp, #0]
 800823c:	2300      	movs	r3, #0
 800823e:	2200      	movs	r2, #0
 8008240:	68f8      	ldr	r0, [r7, #12]
 8008242:	f000 fafe 	bl	8008842 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8008246:	2300      	movs	r3, #0
}
 8008248:	4618      	mov	r0, r3
 800824a:	3710      	adds	r7, #16
 800824c:	46bd      	mov	sp, r7
 800824e:	bd80      	pop	{r7, pc}

08008250 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b088      	sub	sp, #32
 8008254:	af04      	add	r7, sp, #16
 8008256:	60f8      	str	r0, [r7, #12]
 8008258:	60b9      	str	r1, [r7, #8]
 800825a:	4611      	mov	r1, r2
 800825c:	461a      	mov	r2, r3
 800825e:	460b      	mov	r3, r1
 8008260:	80fb      	strh	r3, [r7, #6]
 8008262:	4613      	mov	r3, r2
 8008264:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800826c:	2b00      	cmp	r3, #0
 800826e:	d001      	beq.n	8008274 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008270:	2300      	movs	r3, #0
 8008272:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008274:	7979      	ldrb	r1, [r7, #5]
 8008276:	7e3b      	ldrb	r3, [r7, #24]
 8008278:	9303      	str	r3, [sp, #12]
 800827a:	88fb      	ldrh	r3, [r7, #6]
 800827c:	9302      	str	r3, [sp, #8]
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	9301      	str	r3, [sp, #4]
 8008282:	2301      	movs	r3, #1
 8008284:	9300      	str	r3, [sp, #0]
 8008286:	2300      	movs	r3, #0
 8008288:	2200      	movs	r2, #0
 800828a:	68f8      	ldr	r0, [r7, #12]
 800828c:	f000 fad9 	bl	8008842 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008290:	2300      	movs	r3, #0
}
 8008292:	4618      	mov	r0, r3
 8008294:	3710      	adds	r7, #16
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}

0800829a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800829a:	b580      	push	{r7, lr}
 800829c:	b088      	sub	sp, #32
 800829e:	af04      	add	r7, sp, #16
 80082a0:	60f8      	str	r0, [r7, #12]
 80082a2:	60b9      	str	r1, [r7, #8]
 80082a4:	4611      	mov	r1, r2
 80082a6:	461a      	mov	r2, r3
 80082a8:	460b      	mov	r3, r1
 80082aa:	80fb      	strh	r3, [r7, #6]
 80082ac:	4613      	mov	r3, r2
 80082ae:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80082b0:	7979      	ldrb	r1, [r7, #5]
 80082b2:	2300      	movs	r3, #0
 80082b4:	9303      	str	r3, [sp, #12]
 80082b6:	88fb      	ldrh	r3, [r7, #6]
 80082b8:	9302      	str	r3, [sp, #8]
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	9301      	str	r3, [sp, #4]
 80082be:	2301      	movs	r3, #1
 80082c0:	9300      	str	r3, [sp, #0]
 80082c2:	2300      	movs	r3, #0
 80082c4:	2201      	movs	r2, #1
 80082c6:	68f8      	ldr	r0, [r7, #12]
 80082c8:	f000 fabb 	bl	8008842 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80082cc:	2300      	movs	r3, #0

}
 80082ce:	4618      	mov	r0, r3
 80082d0:	3710      	adds	r7, #16
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}

080082d6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80082d6:	b580      	push	{r7, lr}
 80082d8:	b088      	sub	sp, #32
 80082da:	af04      	add	r7, sp, #16
 80082dc:	60f8      	str	r0, [r7, #12]
 80082de:	60b9      	str	r1, [r7, #8]
 80082e0:	4611      	mov	r1, r2
 80082e2:	461a      	mov	r2, r3
 80082e4:	460b      	mov	r3, r1
 80082e6:	80fb      	strh	r3, [r7, #6]
 80082e8:	4613      	mov	r3, r2
 80082ea:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d001      	beq.n	80082fa <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80082f6:	2300      	movs	r3, #0
 80082f8:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80082fa:	7979      	ldrb	r1, [r7, #5]
 80082fc:	7e3b      	ldrb	r3, [r7, #24]
 80082fe:	9303      	str	r3, [sp, #12]
 8008300:	88fb      	ldrh	r3, [r7, #6]
 8008302:	9302      	str	r3, [sp, #8]
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	9301      	str	r3, [sp, #4]
 8008308:	2301      	movs	r3, #1
 800830a:	9300      	str	r3, [sp, #0]
 800830c:	2302      	movs	r3, #2
 800830e:	2200      	movs	r2, #0
 8008310:	68f8      	ldr	r0, [r7, #12]
 8008312:	f000 fa96 	bl	8008842 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008316:	2300      	movs	r3, #0
}
 8008318:	4618      	mov	r0, r3
 800831a:	3710      	adds	r7, #16
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}

08008320 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b088      	sub	sp, #32
 8008324:	af04      	add	r7, sp, #16
 8008326:	60f8      	str	r0, [r7, #12]
 8008328:	60b9      	str	r1, [r7, #8]
 800832a:	4611      	mov	r1, r2
 800832c:	461a      	mov	r2, r3
 800832e:	460b      	mov	r3, r1
 8008330:	80fb      	strh	r3, [r7, #6]
 8008332:	4613      	mov	r3, r2
 8008334:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008336:	7979      	ldrb	r1, [r7, #5]
 8008338:	2300      	movs	r3, #0
 800833a:	9303      	str	r3, [sp, #12]
 800833c:	88fb      	ldrh	r3, [r7, #6]
 800833e:	9302      	str	r3, [sp, #8]
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	9301      	str	r3, [sp, #4]
 8008344:	2301      	movs	r3, #1
 8008346:	9300      	str	r3, [sp, #0]
 8008348:	2302      	movs	r3, #2
 800834a:	2201      	movs	r2, #1
 800834c:	68f8      	ldr	r0, [r7, #12]
 800834e:	f000 fa78 	bl	8008842 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008352:	2300      	movs	r3, #0
}
 8008354:	4618      	mov	r0, r3
 8008356:	3710      	adds	r7, #16
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}

0800835c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b086      	sub	sp, #24
 8008360:	af04      	add	r7, sp, #16
 8008362:	6078      	str	r0, [r7, #4]
 8008364:	4608      	mov	r0, r1
 8008366:	4611      	mov	r1, r2
 8008368:	461a      	mov	r2, r3
 800836a:	4603      	mov	r3, r0
 800836c:	70fb      	strb	r3, [r7, #3]
 800836e:	460b      	mov	r3, r1
 8008370:	70bb      	strb	r3, [r7, #2]
 8008372:	4613      	mov	r3, r2
 8008374:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008376:	7878      	ldrb	r0, [r7, #1]
 8008378:	78ba      	ldrb	r2, [r7, #2]
 800837a:	78f9      	ldrb	r1, [r7, #3]
 800837c:	8b3b      	ldrh	r3, [r7, #24]
 800837e:	9302      	str	r3, [sp, #8]
 8008380:	7d3b      	ldrb	r3, [r7, #20]
 8008382:	9301      	str	r3, [sp, #4]
 8008384:	7c3b      	ldrb	r3, [r7, #16]
 8008386:	9300      	str	r3, [sp, #0]
 8008388:	4603      	mov	r3, r0
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f000 fa0b 	bl	80087a6 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008390:	2300      	movs	r3, #0
}
 8008392:	4618      	mov	r0, r3
 8008394:	3708      	adds	r7, #8
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}

0800839a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800839a:	b580      	push	{r7, lr}
 800839c:	b082      	sub	sp, #8
 800839e:	af00      	add	r7, sp, #0
 80083a0:	6078      	str	r0, [r7, #4]
 80083a2:	460b      	mov	r3, r1
 80083a4:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 80083a6:	78fb      	ldrb	r3, [r7, #3]
 80083a8:	4619      	mov	r1, r3
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f000 fa2a 	bl	8008804 <USBH_LL_ClosePipe>

  return USBH_OK;
 80083b0:	2300      	movs	r3, #0
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3708      	adds	r7, #8
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}

080083ba <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80083ba:	b580      	push	{r7, lr}
 80083bc:	b084      	sub	sp, #16
 80083be:	af00      	add	r7, sp, #0
 80083c0:	6078      	str	r0, [r7, #4]
 80083c2:	460b      	mov	r3, r1
 80083c4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f000 f836 	bl	8008438 <USBH_GetFreePipe>
 80083cc:	4603      	mov	r3, r0
 80083ce:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80083d0:	89fb      	ldrh	r3, [r7, #14]
 80083d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d00a      	beq.n	80083f0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 80083da:	78fa      	ldrb	r2, [r7, #3]
 80083dc:	89fb      	ldrh	r3, [r7, #14]
 80083de:	f003 030f 	and.w	r3, r3, #15
 80083e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80083e6:	6879      	ldr	r1, [r7, #4]
 80083e8:	33e0      	adds	r3, #224	; 0xe0
 80083ea:	009b      	lsls	r3, r3, #2
 80083ec:	440b      	add	r3, r1
 80083ee:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80083f0:	89fb      	ldrh	r3, [r7, #14]
 80083f2:	b2db      	uxtb	r3, r3
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	3710      	adds	r7, #16
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}

080083fc <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80083fc:	b480      	push	{r7}
 80083fe:	b083      	sub	sp, #12
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
 8008404:	460b      	mov	r3, r1
 8008406:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8008408:	78fb      	ldrb	r3, [r7, #3]
 800840a:	2b0a      	cmp	r3, #10
 800840c:	d80d      	bhi.n	800842a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800840e:	78fb      	ldrb	r3, [r7, #3]
 8008410:	687a      	ldr	r2, [r7, #4]
 8008412:	33e0      	adds	r3, #224	; 0xe0
 8008414:	009b      	lsls	r3, r3, #2
 8008416:	4413      	add	r3, r2
 8008418:	685a      	ldr	r2, [r3, #4]
 800841a:	78fb      	ldrb	r3, [r7, #3]
 800841c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008420:	6879      	ldr	r1, [r7, #4]
 8008422:	33e0      	adds	r3, #224	; 0xe0
 8008424:	009b      	lsls	r3, r3, #2
 8008426:	440b      	add	r3, r1
 8008428:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800842a:	2300      	movs	r3, #0
}
 800842c:	4618      	mov	r0, r3
 800842e:	370c      	adds	r7, #12
 8008430:	46bd      	mov	sp, r7
 8008432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008436:	4770      	bx	lr

08008438 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008438:	b480      	push	{r7}
 800843a:	b085      	sub	sp, #20
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008440:	2300      	movs	r3, #0
 8008442:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8008444:	2300      	movs	r3, #0
 8008446:	73fb      	strb	r3, [r7, #15]
 8008448:	e00f      	b.n	800846a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800844a:	7bfb      	ldrb	r3, [r7, #15]
 800844c:	687a      	ldr	r2, [r7, #4]
 800844e:	33e0      	adds	r3, #224	; 0xe0
 8008450:	009b      	lsls	r3, r3, #2
 8008452:	4413      	add	r3, r2
 8008454:	685b      	ldr	r3, [r3, #4]
 8008456:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800845a:	2b00      	cmp	r3, #0
 800845c:	d102      	bne.n	8008464 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800845e:	7bfb      	ldrb	r3, [r7, #15]
 8008460:	b29b      	uxth	r3, r3
 8008462:	e007      	b.n	8008474 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8008464:	7bfb      	ldrb	r3, [r7, #15]
 8008466:	3301      	adds	r3, #1
 8008468:	73fb      	strb	r3, [r7, #15]
 800846a:	7bfb      	ldrb	r3, [r7, #15]
 800846c:	2b0a      	cmp	r3, #10
 800846e:	d9ec      	bls.n	800844a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008470:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008474:	4618      	mov	r0, r3
 8008476:	3714      	adds	r7, #20
 8008478:	46bd      	mov	sp, r7
 800847a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847e:	4770      	bx	lr

08008480 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008484:	2201      	movs	r2, #1
 8008486:	490e      	ldr	r1, [pc, #56]	; (80084c0 <MX_USB_HOST_Init+0x40>)
 8008488:	480e      	ldr	r0, [pc, #56]	; (80084c4 <MX_USB_HOST_Init+0x44>)
 800848a:	f7ff fb35 	bl	8007af8 <USBH_Init>
 800848e:	4603      	mov	r3, r0
 8008490:	2b00      	cmp	r3, #0
 8008492:	d001      	beq.n	8008498 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008494:	f7f8 fc16 	bl	8000cc4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008498:	490b      	ldr	r1, [pc, #44]	; (80084c8 <MX_USB_HOST_Init+0x48>)
 800849a:	480a      	ldr	r0, [pc, #40]	; (80084c4 <MX_USB_HOST_Init+0x44>)
 800849c:	f7ff fbba 	bl	8007c14 <USBH_RegisterClass>
 80084a0:	4603      	mov	r3, r0
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d001      	beq.n	80084aa <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80084a6:	f7f8 fc0d 	bl	8000cc4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80084aa:	4806      	ldr	r0, [pc, #24]	; (80084c4 <MX_USB_HOST_Init+0x44>)
 80084ac:	f7ff fc3e 	bl	8007d2c <USBH_Start>
 80084b0:	4603      	mov	r3, r0
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d001      	beq.n	80084ba <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80084b6:	f7f8 fc05 	bl	8000cc4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80084ba:	bf00      	nop
 80084bc:	bd80      	pop	{r7, pc}
 80084be:	bf00      	nop
 80084c0:	080084cd 	.word	0x080084cd
 80084c4:	200003cc 	.word	0x200003cc
 80084c8:	2000000c 	.word	0x2000000c

080084cc <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80084cc:	b480      	push	{r7}
 80084ce:	b083      	sub	sp, #12
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
 80084d4:	460b      	mov	r3, r1
 80084d6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80084d8:	78fb      	ldrb	r3, [r7, #3]
 80084da:	3b01      	subs	r3, #1
 80084dc:	2b04      	cmp	r3, #4
 80084de:	d819      	bhi.n	8008514 <USBH_UserProcess+0x48>
 80084e0:	a201      	add	r2, pc, #4	; (adr r2, 80084e8 <USBH_UserProcess+0x1c>)
 80084e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084e6:	bf00      	nop
 80084e8:	08008515 	.word	0x08008515
 80084ec:	08008505 	.word	0x08008505
 80084f0:	08008515 	.word	0x08008515
 80084f4:	0800850d 	.word	0x0800850d
 80084f8:	080084fd 	.word	0x080084fd
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80084fc:	4b09      	ldr	r3, [pc, #36]	; (8008524 <USBH_UserProcess+0x58>)
 80084fe:	2203      	movs	r2, #3
 8008500:	701a      	strb	r2, [r3, #0]
  break;
 8008502:	e008      	b.n	8008516 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008504:	4b07      	ldr	r3, [pc, #28]	; (8008524 <USBH_UserProcess+0x58>)
 8008506:	2202      	movs	r2, #2
 8008508:	701a      	strb	r2, [r3, #0]
  break;
 800850a:	e004      	b.n	8008516 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800850c:	4b05      	ldr	r3, [pc, #20]	; (8008524 <USBH_UserProcess+0x58>)
 800850e:	2201      	movs	r2, #1
 8008510:	701a      	strb	r2, [r3, #0]
  break;
 8008512:	e000      	b.n	8008516 <USBH_UserProcess+0x4a>

  default:
  break;
 8008514:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008516:	bf00      	nop
 8008518:	370c      	adds	r7, #12
 800851a:	46bd      	mov	sp, r7
 800851c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008520:	4770      	bx	lr
 8008522:	bf00      	nop
 8008524:	200000b8 	.word	0x200000b8

08008528 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b08a      	sub	sp, #40	; 0x28
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008530:	f107 0314 	add.w	r3, r7, #20
 8008534:	2200      	movs	r2, #0
 8008536:	601a      	str	r2, [r3, #0]
 8008538:	605a      	str	r2, [r3, #4]
 800853a:	609a      	str	r2, [r3, #8]
 800853c:	60da      	str	r2, [r3, #12]
 800853e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008548:	d14e      	bne.n	80085e8 <HAL_HCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800854a:	4b29      	ldr	r3, [pc, #164]	; (80085f0 <HAL_HCD_MspInit+0xc8>)
 800854c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800854e:	4a28      	ldr	r2, [pc, #160]	; (80085f0 <HAL_HCD_MspInit+0xc8>)
 8008550:	f043 0301 	orr.w	r3, r3, #1
 8008554:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008556:	4b26      	ldr	r3, [pc, #152]	; (80085f0 <HAL_HCD_MspInit+0xc8>)
 8008558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800855a:	f003 0301 	and.w	r3, r3, #1
 800855e:	613b      	str	r3, [r7, #16]
 8008560:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008562:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008566:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008568:	2302      	movs	r3, #2
 800856a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800856c:	2300      	movs	r3, #0
 800856e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008570:	2303      	movs	r3, #3
 8008572:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008574:	230a      	movs	r3, #10
 8008576:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008578:	f107 0314 	add.w	r3, r7, #20
 800857c:	4619      	mov	r1, r3
 800857e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008582:	f7f9 f8a3 	bl	80016cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008586:	4b1a      	ldr	r3, [pc, #104]	; (80085f0 <HAL_HCD_MspInit+0xc8>)
 8008588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800858a:	4a19      	ldr	r2, [pc, #100]	; (80085f0 <HAL_HCD_MspInit+0xc8>)
 800858c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008590:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008592:	4b17      	ldr	r3, [pc, #92]	; (80085f0 <HAL_HCD_MspInit+0xc8>)
 8008594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008596:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800859a:	60fb      	str	r3, [r7, #12]
 800859c:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800859e:	4b14      	ldr	r3, [pc, #80]	; (80085f0 <HAL_HCD_MspInit+0xc8>)
 80085a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d114      	bne.n	80085d4 <HAL_HCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80085aa:	4b11      	ldr	r3, [pc, #68]	; (80085f0 <HAL_HCD_MspInit+0xc8>)
 80085ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085ae:	4a10      	ldr	r2, [pc, #64]	; (80085f0 <HAL_HCD_MspInit+0xc8>)
 80085b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085b4:	6593      	str	r3, [r2, #88]	; 0x58
 80085b6:	4b0e      	ldr	r3, [pc, #56]	; (80085f0 <HAL_HCD_MspInit+0xc8>)
 80085b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085be:	60bb      	str	r3, [r7, #8]
 80085c0:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80085c2:	f7fb f967 	bl	8003894 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80085c6:	4b0a      	ldr	r3, [pc, #40]	; (80085f0 <HAL_HCD_MspInit+0xc8>)
 80085c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085ca:	4a09      	ldr	r2, [pc, #36]	; (80085f0 <HAL_HCD_MspInit+0xc8>)
 80085cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80085d0:	6593      	str	r3, [r2, #88]	; 0x58
 80085d2:	e001      	b.n	80085d8 <HAL_HCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 80085d4:	f7fb f95e 	bl	8003894 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80085d8:	2200      	movs	r2, #0
 80085da:	2100      	movs	r1, #0
 80085dc:	2043      	movs	r0, #67	; 0x43
 80085de:	f7f9 f83e 	bl	800165e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80085e2:	2043      	movs	r0, #67	; 0x43
 80085e4:	f7f9 f857 	bl	8001696 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80085e8:	bf00      	nop
 80085ea:	3728      	adds	r7, #40	; 0x28
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}
 80085f0:	40021000 	.word	0x40021000

080085f4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b082      	sub	sp, #8
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008602:	4618      	mov	r0, r3
 8008604:	f7ff fbb1 	bl	8007d6a <USBH_LL_IncTimer>
}
 8008608:	bf00      	nop
 800860a:	3708      	adds	r7, #8
 800860c:	46bd      	mov	sp, r7
 800860e:	bd80      	pop	{r7, pc}

08008610 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b082      	sub	sp, #8
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800861e:	4618      	mov	r0, r3
 8008620:	f7ff fbe9 	bl	8007df6 <USBH_LL_Connect>
}
 8008624:	bf00      	nop
 8008626:	3708      	adds	r7, #8
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}

0800862c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b082      	sub	sp, #8
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800863a:	4618      	mov	r0, r3
 800863c:	f7ff fbf2 	bl	8007e24 <USBH_LL_Disconnect>
}
 8008640:	bf00      	nop
 8008642:	3708      	adds	r7, #8
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}

08008648 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008648:	b480      	push	{r7}
 800864a:	b083      	sub	sp, #12
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
 8008650:	460b      	mov	r3, r1
 8008652:	70fb      	strb	r3, [r7, #3]
 8008654:	4613      	mov	r3, r2
 8008656:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008658:	bf00      	nop
 800865a:	370c      	adds	r7, #12
 800865c:	46bd      	mov	sp, r7
 800865e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008662:	4770      	bx	lr

08008664 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b082      	sub	sp, #8
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008672:	4618      	mov	r0, r3
 8008674:	f7ff fba3 	bl	8007dbe <USBH_LL_PortEnabled>
}
 8008678:	bf00      	nop
 800867a:	3708      	adds	r7, #8
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}

08008680 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b082      	sub	sp, #8
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800868e:	4618      	mov	r0, r3
 8008690:	f7ff fba3 	bl	8007dda <USBH_LL_PortDisabled>
}
 8008694:	bf00      	nop
 8008696:	3708      	adds	r7, #8
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}

0800869c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b082      	sub	sp, #8
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80086aa:	2b01      	cmp	r3, #1
 80086ac:	d12a      	bne.n	8008704 <USBH_LL_Init+0x68>
  /* Enable USB power on Pwrctrl CR2 register */
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80086ae:	4a18      	ldr	r2, [pc, #96]	; (8008710 <USBH_LL_Init+0x74>)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	4a15      	ldr	r2, [pc, #84]	; (8008710 <USBH_LL_Init+0x74>)
 80086ba:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80086be:	4b14      	ldr	r3, [pc, #80]	; (8008710 <USBH_LL_Init+0x74>)
 80086c0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80086c4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80086c6:	4b12      	ldr	r3, [pc, #72]	; (8008710 <USBH_LL_Init+0x74>)
 80086c8:	2208      	movs	r2, #8
 80086ca:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80086cc:	4b10      	ldr	r3, [pc, #64]	; (8008710 <USBH_LL_Init+0x74>)
 80086ce:	2201      	movs	r2, #1
 80086d0:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80086d2:	4b0f      	ldr	r3, [pc, #60]	; (8008710 <USBH_LL_Init+0x74>)
 80086d4:	2200      	movs	r2, #0
 80086d6:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80086d8:	4b0d      	ldr	r3, [pc, #52]	; (8008710 <USBH_LL_Init+0x74>)
 80086da:	2202      	movs	r2, #2
 80086dc:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80086de:	4b0c      	ldr	r3, [pc, #48]	; (8008710 <USBH_LL_Init+0x74>)
 80086e0:	2200      	movs	r2, #0
 80086e2:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80086e4:	480a      	ldr	r0, [pc, #40]	; (8008710 <USBH_LL_Init+0x74>)
 80086e6:	f7f9 f9cb 	bl	8001a80 <HAL_HCD_Init>
 80086ea:	4603      	mov	r3, r0
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d001      	beq.n	80086f4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80086f0:	f7f8 fae8 	bl	8000cc4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80086f4:	4806      	ldr	r0, [pc, #24]	; (8008710 <USBH_LL_Init+0x74>)
 80086f6:	f7f9 fdbd 	bl	8002274 <HAL_HCD_GetCurrentFrame>
 80086fa:	4603      	mov	r3, r0
 80086fc:	4619      	mov	r1, r3
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f7ff fb24 	bl	8007d4c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008704:	2300      	movs	r3, #0
}
 8008706:	4618      	mov	r0, r3
 8008708:	3708      	adds	r7, #8
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}
 800870e:	bf00      	nop
 8008710:	200007a4 	.word	0x200007a4

08008714 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b084      	sub	sp, #16
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800871c:	2300      	movs	r3, #0
 800871e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008720:	2300      	movs	r3, #0
 8008722:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800872a:	4618      	mov	r0, r3
 800872c:	f7f9 fd38 	bl	80021a0 <HAL_HCD_Start>
 8008730:	4603      	mov	r3, r0
 8008732:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008734:	7bfb      	ldrb	r3, [r7, #15]
 8008736:	4618      	mov	r0, r3
 8008738:	f000 f912 	bl	8008960 <USBH_Get_USB_Status>
 800873c:	4603      	mov	r3, r0
 800873e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008740:	7bbb      	ldrb	r3, [r7, #14]
}
 8008742:	4618      	mov	r0, r3
 8008744:	3710      	adds	r7, #16
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}

0800874a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800874a:	b580      	push	{r7, lr}
 800874c:	b084      	sub	sp, #16
 800874e:	af00      	add	r7, sp, #0
 8008750:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008752:	2300      	movs	r3, #0
 8008754:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008756:	2300      	movs	r3, #0
 8008758:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008760:	4618      	mov	r0, r3
 8008762:	f7f9 fd40 	bl	80021e6 <HAL_HCD_Stop>
 8008766:	4603      	mov	r3, r0
 8008768:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800876a:	7bfb      	ldrb	r3, [r7, #15]
 800876c:	4618      	mov	r0, r3
 800876e:	f000 f8f7 	bl	8008960 <USBH_Get_USB_Status>
 8008772:	4603      	mov	r3, r0
 8008774:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008776:	7bbb      	ldrb	r3, [r7, #14]
}
 8008778:	4618      	mov	r0, r3
 800877a:	3710      	adds	r7, #16
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}

08008780 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b082      	sub	sp, #8
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
 8008788:	460b      	mov	r3, r1
 800878a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008792:	78fa      	ldrb	r2, [r7, #3]
 8008794:	4611      	mov	r1, r2
 8008796:	4618      	mov	r0, r3
 8008798:	f7f9 fd57 	bl	800224a <HAL_HCD_HC_GetXferCount>
 800879c:	4603      	mov	r3, r0
}
 800879e:	4618      	mov	r0, r3
 80087a0:	3708      	adds	r7, #8
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}

080087a6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80087a6:	b590      	push	{r4, r7, lr}
 80087a8:	b089      	sub	sp, #36	; 0x24
 80087aa:	af04      	add	r7, sp, #16
 80087ac:	6078      	str	r0, [r7, #4]
 80087ae:	4608      	mov	r0, r1
 80087b0:	4611      	mov	r1, r2
 80087b2:	461a      	mov	r2, r3
 80087b4:	4603      	mov	r3, r0
 80087b6:	70fb      	strb	r3, [r7, #3]
 80087b8:	460b      	mov	r3, r1
 80087ba:	70bb      	strb	r3, [r7, #2]
 80087bc:	4613      	mov	r3, r2
 80087be:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087c0:	2300      	movs	r3, #0
 80087c2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80087c4:	2300      	movs	r3, #0
 80087c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80087ce:	787c      	ldrb	r4, [r7, #1]
 80087d0:	78ba      	ldrb	r2, [r7, #2]
 80087d2:	78f9      	ldrb	r1, [r7, #3]
 80087d4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80087d6:	9302      	str	r3, [sp, #8]
 80087d8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80087dc:	9301      	str	r3, [sp, #4]
 80087de:	f897 3020 	ldrb.w	r3, [r7, #32]
 80087e2:	9300      	str	r3, [sp, #0]
 80087e4:	4623      	mov	r3, r4
 80087e6:	f7f9 f9ad 	bl	8001b44 <HAL_HCD_HC_Init>
 80087ea:	4603      	mov	r3, r0
 80087ec:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80087ee:	7bfb      	ldrb	r3, [r7, #15]
 80087f0:	4618      	mov	r0, r3
 80087f2:	f000 f8b5 	bl	8008960 <USBH_Get_USB_Status>
 80087f6:	4603      	mov	r3, r0
 80087f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	3714      	adds	r7, #20
 8008800:	46bd      	mov	sp, r7
 8008802:	bd90      	pop	{r4, r7, pc}

08008804 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b084      	sub	sp, #16
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
 800880c:	460b      	mov	r3, r1
 800880e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008810:	2300      	movs	r3, #0
 8008812:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008814:	2300      	movs	r3, #0
 8008816:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800881e:	78fa      	ldrb	r2, [r7, #3]
 8008820:	4611      	mov	r1, r2
 8008822:	4618      	mov	r0, r3
 8008824:	f7f9 fa26 	bl	8001c74 <HAL_HCD_HC_Halt>
 8008828:	4603      	mov	r3, r0
 800882a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800882c:	7bfb      	ldrb	r3, [r7, #15]
 800882e:	4618      	mov	r0, r3
 8008830:	f000 f896 	bl	8008960 <USBH_Get_USB_Status>
 8008834:	4603      	mov	r3, r0
 8008836:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008838:	7bbb      	ldrb	r3, [r7, #14]
}
 800883a:	4618      	mov	r0, r3
 800883c:	3710      	adds	r7, #16
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}

08008842 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008842:	b590      	push	{r4, r7, lr}
 8008844:	b089      	sub	sp, #36	; 0x24
 8008846:	af04      	add	r7, sp, #16
 8008848:	6078      	str	r0, [r7, #4]
 800884a:	4608      	mov	r0, r1
 800884c:	4611      	mov	r1, r2
 800884e:	461a      	mov	r2, r3
 8008850:	4603      	mov	r3, r0
 8008852:	70fb      	strb	r3, [r7, #3]
 8008854:	460b      	mov	r3, r1
 8008856:	70bb      	strb	r3, [r7, #2]
 8008858:	4613      	mov	r3, r2
 800885a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800885c:	2300      	movs	r3, #0
 800885e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008860:	2300      	movs	r3, #0
 8008862:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800886a:	787c      	ldrb	r4, [r7, #1]
 800886c:	78ba      	ldrb	r2, [r7, #2]
 800886e:	78f9      	ldrb	r1, [r7, #3]
 8008870:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008874:	9303      	str	r3, [sp, #12]
 8008876:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008878:	9302      	str	r3, [sp, #8]
 800887a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800887c:	9301      	str	r3, [sp, #4]
 800887e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008882:	9300      	str	r3, [sp, #0]
 8008884:	4623      	mov	r3, r4
 8008886:	f7f9 fa19 	bl	8001cbc <HAL_HCD_HC_SubmitRequest>
 800888a:	4603      	mov	r3, r0
 800888c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);

  usb_status = USBH_Get_USB_Status(hal_status);
 800888e:	7bfb      	ldrb	r3, [r7, #15]
 8008890:	4618      	mov	r0, r3
 8008892:	f000 f865 	bl	8008960 <USBH_Get_USB_Status>
 8008896:	4603      	mov	r3, r0
 8008898:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800889a:	7bbb      	ldrb	r3, [r7, #14]
}
 800889c:	4618      	mov	r0, r3
 800889e:	3714      	adds	r7, #20
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd90      	pop	{r4, r7, pc}

080088a4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b082      	sub	sp, #8
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
 80088ac:	460b      	mov	r3, r1
 80088ae:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80088b6:	78fa      	ldrb	r2, [r7, #3]
 80088b8:	4611      	mov	r1, r2
 80088ba:	4618      	mov	r0, r3
 80088bc:	f7f9 fcb0 	bl	8002220 <HAL_HCD_HC_GetURBState>
 80088c0:	4603      	mov	r3, r0
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	3708      	adds	r7, #8
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}

080088ca <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80088ca:	b580      	push	{r7, lr}
 80088cc:	b082      	sub	sp, #8
 80088ce:	af00      	add	r7, sp, #0
 80088d0:	6078      	str	r0, [r7, #4]
 80088d2:	460b      	mov	r3, r1
 80088d4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80088dc:	2b01      	cmp	r3, #1
 80088de:	d103      	bne.n	80088e8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80088e0:	78fb      	ldrb	r3, [r7, #3]
 80088e2:	4618      	mov	r0, r3
 80088e4:	f000 f868 	bl	80089b8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80088e8:	20c8      	movs	r0, #200	; 0xc8
 80088ea:	f7f8 fdbb 	bl	8001464 <HAL_Delay>
  return USBH_OK;
 80088ee:	2300      	movs	r3, #0
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	3708      	adds	r7, #8
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}

080088f8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b085      	sub	sp, #20
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	460b      	mov	r3, r1
 8008902:	70fb      	strb	r3, [r7, #3]
 8008904:	4613      	mov	r3, r2
 8008906:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800890e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008910:	78fa      	ldrb	r2, [r7, #3]
 8008912:	68f9      	ldr	r1, [r7, #12]
 8008914:	4613      	mov	r3, r2
 8008916:	009b      	lsls	r3, r3, #2
 8008918:	4413      	add	r3, r2
 800891a:	00db      	lsls	r3, r3, #3
 800891c:	440b      	add	r3, r1
 800891e:	333b      	adds	r3, #59	; 0x3b
 8008920:	781b      	ldrb	r3, [r3, #0]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d00a      	beq.n	800893c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008926:	78fa      	ldrb	r2, [r7, #3]
 8008928:	68f9      	ldr	r1, [r7, #12]
 800892a:	4613      	mov	r3, r2
 800892c:	009b      	lsls	r3, r3, #2
 800892e:	4413      	add	r3, r2
 8008930:	00db      	lsls	r3, r3, #3
 8008932:	440b      	add	r3, r1
 8008934:	3350      	adds	r3, #80	; 0x50
 8008936:	78ba      	ldrb	r2, [r7, #2]
 8008938:	701a      	strb	r2, [r3, #0]
 800893a:	e009      	b.n	8008950 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800893c:	78fa      	ldrb	r2, [r7, #3]
 800893e:	68f9      	ldr	r1, [r7, #12]
 8008940:	4613      	mov	r3, r2
 8008942:	009b      	lsls	r3, r3, #2
 8008944:	4413      	add	r3, r2
 8008946:	00db      	lsls	r3, r3, #3
 8008948:	440b      	add	r3, r1
 800894a:	3351      	adds	r3, #81	; 0x51
 800894c:	78ba      	ldrb	r2, [r7, #2]
 800894e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008950:	2300      	movs	r3, #0
}
 8008952:	4618      	mov	r0, r3
 8008954:	3714      	adds	r7, #20
 8008956:	46bd      	mov	sp, r7
 8008958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895c:	4770      	bx	lr
	...

08008960 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008960:	b480      	push	{r7}
 8008962:	b085      	sub	sp, #20
 8008964:	af00      	add	r7, sp, #0
 8008966:	4603      	mov	r3, r0
 8008968:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800896a:	2300      	movs	r3, #0
 800896c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800896e:	79fb      	ldrb	r3, [r7, #7]
 8008970:	2b03      	cmp	r3, #3
 8008972:	d817      	bhi.n	80089a4 <USBH_Get_USB_Status+0x44>
 8008974:	a201      	add	r2, pc, #4	; (adr r2, 800897c <USBH_Get_USB_Status+0x1c>)
 8008976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800897a:	bf00      	nop
 800897c:	0800898d 	.word	0x0800898d
 8008980:	08008993 	.word	0x08008993
 8008984:	08008999 	.word	0x08008999
 8008988:	0800899f 	.word	0x0800899f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800898c:	2300      	movs	r3, #0
 800898e:	73fb      	strb	r3, [r7, #15]
    break;
 8008990:	e00b      	b.n	80089aa <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008992:	2302      	movs	r3, #2
 8008994:	73fb      	strb	r3, [r7, #15]
    break;
 8008996:	e008      	b.n	80089aa <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008998:	2301      	movs	r3, #1
 800899a:	73fb      	strb	r3, [r7, #15]
    break;
 800899c:	e005      	b.n	80089aa <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800899e:	2302      	movs	r3, #2
 80089a0:	73fb      	strb	r3, [r7, #15]
    break;
 80089a2:	e002      	b.n	80089aa <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80089a4:	2302      	movs	r3, #2
 80089a6:	73fb      	strb	r3, [r7, #15]
    break;
 80089a8:	bf00      	nop
  }
  return usb_status;
 80089aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	3714      	adds	r7, #20
 80089b0:	46bd      	mov	sp, r7
 80089b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b6:	4770      	bx	lr

080089b8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b084      	sub	sp, #16
 80089bc:	af00      	add	r7, sp, #0
 80089be:	4603      	mov	r3, r0
 80089c0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80089c2:	79fb      	ldrb	r3, [r7, #7]
 80089c4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80089c6:	79fb      	ldrb	r3, [r7, #7]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d102      	bne.n	80089d2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 80089cc:	2301      	movs	r3, #1
 80089ce:	73fb      	strb	r3, [r7, #15]
 80089d0:	e001      	b.n	80089d6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80089d2:	2300      	movs	r3, #0
 80089d4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_9,(GPIO_PinState)data);
 80089d6:	7bfb      	ldrb	r3, [r7, #15]
 80089d8:	461a      	mov	r2, r3
 80089da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80089de:	4803      	ldr	r0, [pc, #12]	; (80089ec <MX_DriverVbusFS+0x34>)
 80089e0:	f7f9 f81c 	bl	8001a1c <HAL_GPIO_WritePin>
}
 80089e4:	bf00      	nop
 80089e6:	3710      	adds	r7, #16
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}
 80089ec:	48000800 	.word	0x48000800

080089f0 <__errno>:
 80089f0:	4b01      	ldr	r3, [pc, #4]	; (80089f8 <__errno+0x8>)
 80089f2:	6818      	ldr	r0, [r3, #0]
 80089f4:	4770      	bx	lr
 80089f6:	bf00      	nop
 80089f8:	2000002c 	.word	0x2000002c

080089fc <__libc_init_array>:
 80089fc:	b570      	push	{r4, r5, r6, lr}
 80089fe:	4e0d      	ldr	r6, [pc, #52]	; (8008a34 <__libc_init_array+0x38>)
 8008a00:	4c0d      	ldr	r4, [pc, #52]	; (8008a38 <__libc_init_array+0x3c>)
 8008a02:	1ba4      	subs	r4, r4, r6
 8008a04:	10a4      	asrs	r4, r4, #2
 8008a06:	2500      	movs	r5, #0
 8008a08:	42a5      	cmp	r5, r4
 8008a0a:	d109      	bne.n	8008a20 <__libc_init_array+0x24>
 8008a0c:	4e0b      	ldr	r6, [pc, #44]	; (8008a3c <__libc_init_array+0x40>)
 8008a0e:	4c0c      	ldr	r4, [pc, #48]	; (8008a40 <__libc_init_array+0x44>)
 8008a10:	f000 f8ea 	bl	8008be8 <_init>
 8008a14:	1ba4      	subs	r4, r4, r6
 8008a16:	10a4      	asrs	r4, r4, #2
 8008a18:	2500      	movs	r5, #0
 8008a1a:	42a5      	cmp	r5, r4
 8008a1c:	d105      	bne.n	8008a2a <__libc_init_array+0x2e>
 8008a1e:	bd70      	pop	{r4, r5, r6, pc}
 8008a20:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008a24:	4798      	blx	r3
 8008a26:	3501      	adds	r5, #1
 8008a28:	e7ee      	b.n	8008a08 <__libc_init_array+0xc>
 8008a2a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008a2e:	4798      	blx	r3
 8008a30:	3501      	adds	r5, #1
 8008a32:	e7f2      	b.n	8008a1a <__libc_init_array+0x1e>
 8008a34:	08008c54 	.word	0x08008c54
 8008a38:	08008c54 	.word	0x08008c54
 8008a3c:	08008c54 	.word	0x08008c54
 8008a40:	08008c58 	.word	0x08008c58

08008a44 <malloc>:
 8008a44:	4b02      	ldr	r3, [pc, #8]	; (8008a50 <malloc+0xc>)
 8008a46:	4601      	mov	r1, r0
 8008a48:	6818      	ldr	r0, [r3, #0]
 8008a4a:	f000 b861 	b.w	8008b10 <_malloc_r>
 8008a4e:	bf00      	nop
 8008a50:	2000002c 	.word	0x2000002c

08008a54 <free>:
 8008a54:	4b02      	ldr	r3, [pc, #8]	; (8008a60 <free+0xc>)
 8008a56:	4601      	mov	r1, r0
 8008a58:	6818      	ldr	r0, [r3, #0]
 8008a5a:	f000 b80b 	b.w	8008a74 <_free_r>
 8008a5e:	bf00      	nop
 8008a60:	2000002c 	.word	0x2000002c

08008a64 <memset>:
 8008a64:	4402      	add	r2, r0
 8008a66:	4603      	mov	r3, r0
 8008a68:	4293      	cmp	r3, r2
 8008a6a:	d100      	bne.n	8008a6e <memset+0xa>
 8008a6c:	4770      	bx	lr
 8008a6e:	f803 1b01 	strb.w	r1, [r3], #1
 8008a72:	e7f9      	b.n	8008a68 <memset+0x4>

08008a74 <_free_r>:
 8008a74:	b538      	push	{r3, r4, r5, lr}
 8008a76:	4605      	mov	r5, r0
 8008a78:	2900      	cmp	r1, #0
 8008a7a:	d045      	beq.n	8008b08 <_free_r+0x94>
 8008a7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a80:	1f0c      	subs	r4, r1, #4
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	bfb8      	it	lt
 8008a86:	18e4      	addlt	r4, r4, r3
 8008a88:	f000 f8ac 	bl	8008be4 <__malloc_lock>
 8008a8c:	4a1f      	ldr	r2, [pc, #124]	; (8008b0c <_free_r+0x98>)
 8008a8e:	6813      	ldr	r3, [r2, #0]
 8008a90:	4610      	mov	r0, r2
 8008a92:	b933      	cbnz	r3, 8008aa2 <_free_r+0x2e>
 8008a94:	6063      	str	r3, [r4, #4]
 8008a96:	6014      	str	r4, [r2, #0]
 8008a98:	4628      	mov	r0, r5
 8008a9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a9e:	f000 b8a2 	b.w	8008be6 <__malloc_unlock>
 8008aa2:	42a3      	cmp	r3, r4
 8008aa4:	d90c      	bls.n	8008ac0 <_free_r+0x4c>
 8008aa6:	6821      	ldr	r1, [r4, #0]
 8008aa8:	1862      	adds	r2, r4, r1
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	bf04      	itt	eq
 8008aae:	681a      	ldreq	r2, [r3, #0]
 8008ab0:	685b      	ldreq	r3, [r3, #4]
 8008ab2:	6063      	str	r3, [r4, #4]
 8008ab4:	bf04      	itt	eq
 8008ab6:	1852      	addeq	r2, r2, r1
 8008ab8:	6022      	streq	r2, [r4, #0]
 8008aba:	6004      	str	r4, [r0, #0]
 8008abc:	e7ec      	b.n	8008a98 <_free_r+0x24>
 8008abe:	4613      	mov	r3, r2
 8008ac0:	685a      	ldr	r2, [r3, #4]
 8008ac2:	b10a      	cbz	r2, 8008ac8 <_free_r+0x54>
 8008ac4:	42a2      	cmp	r2, r4
 8008ac6:	d9fa      	bls.n	8008abe <_free_r+0x4a>
 8008ac8:	6819      	ldr	r1, [r3, #0]
 8008aca:	1858      	adds	r0, r3, r1
 8008acc:	42a0      	cmp	r0, r4
 8008ace:	d10b      	bne.n	8008ae8 <_free_r+0x74>
 8008ad0:	6820      	ldr	r0, [r4, #0]
 8008ad2:	4401      	add	r1, r0
 8008ad4:	1858      	adds	r0, r3, r1
 8008ad6:	4282      	cmp	r2, r0
 8008ad8:	6019      	str	r1, [r3, #0]
 8008ada:	d1dd      	bne.n	8008a98 <_free_r+0x24>
 8008adc:	6810      	ldr	r0, [r2, #0]
 8008ade:	6852      	ldr	r2, [r2, #4]
 8008ae0:	605a      	str	r2, [r3, #4]
 8008ae2:	4401      	add	r1, r0
 8008ae4:	6019      	str	r1, [r3, #0]
 8008ae6:	e7d7      	b.n	8008a98 <_free_r+0x24>
 8008ae8:	d902      	bls.n	8008af0 <_free_r+0x7c>
 8008aea:	230c      	movs	r3, #12
 8008aec:	602b      	str	r3, [r5, #0]
 8008aee:	e7d3      	b.n	8008a98 <_free_r+0x24>
 8008af0:	6820      	ldr	r0, [r4, #0]
 8008af2:	1821      	adds	r1, r4, r0
 8008af4:	428a      	cmp	r2, r1
 8008af6:	bf04      	itt	eq
 8008af8:	6811      	ldreq	r1, [r2, #0]
 8008afa:	6852      	ldreq	r2, [r2, #4]
 8008afc:	6062      	str	r2, [r4, #4]
 8008afe:	bf04      	itt	eq
 8008b00:	1809      	addeq	r1, r1, r0
 8008b02:	6021      	streq	r1, [r4, #0]
 8008b04:	605c      	str	r4, [r3, #4]
 8008b06:	e7c7      	b.n	8008a98 <_free_r+0x24>
 8008b08:	bd38      	pop	{r3, r4, r5, pc}
 8008b0a:	bf00      	nop
 8008b0c:	200000bc 	.word	0x200000bc

08008b10 <_malloc_r>:
 8008b10:	b570      	push	{r4, r5, r6, lr}
 8008b12:	1ccd      	adds	r5, r1, #3
 8008b14:	f025 0503 	bic.w	r5, r5, #3
 8008b18:	3508      	adds	r5, #8
 8008b1a:	2d0c      	cmp	r5, #12
 8008b1c:	bf38      	it	cc
 8008b1e:	250c      	movcc	r5, #12
 8008b20:	2d00      	cmp	r5, #0
 8008b22:	4606      	mov	r6, r0
 8008b24:	db01      	blt.n	8008b2a <_malloc_r+0x1a>
 8008b26:	42a9      	cmp	r1, r5
 8008b28:	d903      	bls.n	8008b32 <_malloc_r+0x22>
 8008b2a:	230c      	movs	r3, #12
 8008b2c:	6033      	str	r3, [r6, #0]
 8008b2e:	2000      	movs	r0, #0
 8008b30:	bd70      	pop	{r4, r5, r6, pc}
 8008b32:	f000 f857 	bl	8008be4 <__malloc_lock>
 8008b36:	4a21      	ldr	r2, [pc, #132]	; (8008bbc <_malloc_r+0xac>)
 8008b38:	6814      	ldr	r4, [r2, #0]
 8008b3a:	4621      	mov	r1, r4
 8008b3c:	b991      	cbnz	r1, 8008b64 <_malloc_r+0x54>
 8008b3e:	4c20      	ldr	r4, [pc, #128]	; (8008bc0 <_malloc_r+0xb0>)
 8008b40:	6823      	ldr	r3, [r4, #0]
 8008b42:	b91b      	cbnz	r3, 8008b4c <_malloc_r+0x3c>
 8008b44:	4630      	mov	r0, r6
 8008b46:	f000 f83d 	bl	8008bc4 <_sbrk_r>
 8008b4a:	6020      	str	r0, [r4, #0]
 8008b4c:	4629      	mov	r1, r5
 8008b4e:	4630      	mov	r0, r6
 8008b50:	f000 f838 	bl	8008bc4 <_sbrk_r>
 8008b54:	1c43      	adds	r3, r0, #1
 8008b56:	d124      	bne.n	8008ba2 <_malloc_r+0x92>
 8008b58:	230c      	movs	r3, #12
 8008b5a:	6033      	str	r3, [r6, #0]
 8008b5c:	4630      	mov	r0, r6
 8008b5e:	f000 f842 	bl	8008be6 <__malloc_unlock>
 8008b62:	e7e4      	b.n	8008b2e <_malloc_r+0x1e>
 8008b64:	680b      	ldr	r3, [r1, #0]
 8008b66:	1b5b      	subs	r3, r3, r5
 8008b68:	d418      	bmi.n	8008b9c <_malloc_r+0x8c>
 8008b6a:	2b0b      	cmp	r3, #11
 8008b6c:	d90f      	bls.n	8008b8e <_malloc_r+0x7e>
 8008b6e:	600b      	str	r3, [r1, #0]
 8008b70:	50cd      	str	r5, [r1, r3]
 8008b72:	18cc      	adds	r4, r1, r3
 8008b74:	4630      	mov	r0, r6
 8008b76:	f000 f836 	bl	8008be6 <__malloc_unlock>
 8008b7a:	f104 000b 	add.w	r0, r4, #11
 8008b7e:	1d23      	adds	r3, r4, #4
 8008b80:	f020 0007 	bic.w	r0, r0, #7
 8008b84:	1ac3      	subs	r3, r0, r3
 8008b86:	d0d3      	beq.n	8008b30 <_malloc_r+0x20>
 8008b88:	425a      	negs	r2, r3
 8008b8a:	50e2      	str	r2, [r4, r3]
 8008b8c:	e7d0      	b.n	8008b30 <_malloc_r+0x20>
 8008b8e:	428c      	cmp	r4, r1
 8008b90:	684b      	ldr	r3, [r1, #4]
 8008b92:	bf16      	itet	ne
 8008b94:	6063      	strne	r3, [r4, #4]
 8008b96:	6013      	streq	r3, [r2, #0]
 8008b98:	460c      	movne	r4, r1
 8008b9a:	e7eb      	b.n	8008b74 <_malloc_r+0x64>
 8008b9c:	460c      	mov	r4, r1
 8008b9e:	6849      	ldr	r1, [r1, #4]
 8008ba0:	e7cc      	b.n	8008b3c <_malloc_r+0x2c>
 8008ba2:	1cc4      	adds	r4, r0, #3
 8008ba4:	f024 0403 	bic.w	r4, r4, #3
 8008ba8:	42a0      	cmp	r0, r4
 8008baa:	d005      	beq.n	8008bb8 <_malloc_r+0xa8>
 8008bac:	1a21      	subs	r1, r4, r0
 8008bae:	4630      	mov	r0, r6
 8008bb0:	f000 f808 	bl	8008bc4 <_sbrk_r>
 8008bb4:	3001      	adds	r0, #1
 8008bb6:	d0cf      	beq.n	8008b58 <_malloc_r+0x48>
 8008bb8:	6025      	str	r5, [r4, #0]
 8008bba:	e7db      	b.n	8008b74 <_malloc_r+0x64>
 8008bbc:	200000bc 	.word	0x200000bc
 8008bc0:	200000c0 	.word	0x200000c0

08008bc4 <_sbrk_r>:
 8008bc4:	b538      	push	{r3, r4, r5, lr}
 8008bc6:	4c06      	ldr	r4, [pc, #24]	; (8008be0 <_sbrk_r+0x1c>)
 8008bc8:	2300      	movs	r3, #0
 8008bca:	4605      	mov	r5, r0
 8008bcc:	4608      	mov	r0, r1
 8008bce:	6023      	str	r3, [r4, #0]
 8008bd0:	f7f8 fb36 	bl	8001240 <_sbrk>
 8008bd4:	1c43      	adds	r3, r0, #1
 8008bd6:	d102      	bne.n	8008bde <_sbrk_r+0x1a>
 8008bd8:	6823      	ldr	r3, [r4, #0]
 8008bda:	b103      	cbz	r3, 8008bde <_sbrk_r+0x1a>
 8008bdc:	602b      	str	r3, [r5, #0]
 8008bde:	bd38      	pop	{r3, r4, r5, pc}
 8008be0:	20000a68 	.word	0x20000a68

08008be4 <__malloc_lock>:
 8008be4:	4770      	bx	lr

08008be6 <__malloc_unlock>:
 8008be6:	4770      	bx	lr

08008be8 <_init>:
 8008be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bea:	bf00      	nop
 8008bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bee:	bc08      	pop	{r3}
 8008bf0:	469e      	mov	lr, r3
 8008bf2:	4770      	bx	lr

08008bf4 <_fini>:
 8008bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bf6:	bf00      	nop
 8008bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bfa:	bc08      	pop	{r3}
 8008bfc:	469e      	mov	lr, r3
 8008bfe:	4770      	bx	lr
