
Debag_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a160  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  0800a2e8  0800a2e8  0001a2e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a334  0800a334  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800a334  0800a334  0001a334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a33c  0800a33c  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a33c  0800a33c  0001a33c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a340  0800a340  0001a340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800a344  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a6c  20000090  0800a3d4  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000afc  0800a3d4  00020afc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022d53  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004377  00000000  00000000  00042e13  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001900  00000000  00000000  00047190  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001720  00000000  00000000  00048a90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002b095  00000000  00000000  0004a1b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00016885  00000000  00000000  00075245  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f9961  00000000  00000000  0008baca  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0018542b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000069f0  00000000  00000000  001854a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800a2d0 	.word	0x0800a2d0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	0800a2d0 	.word	0x0800a2d0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <foo.8955>:
  /* USER CODE BEGIN 2 */

  uint32_t lsb = 0;
  uint32_t msb = 0;

  void foo(void){
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4663      	mov	r3, ip
 80004d0:	f8c7 c004 	str.w	ip, [r7, #4]
	  int local_variable;
	  ++lsb;
 80004d4:	685a      	ldr	r2, [r3, #4]
 80004d6:	3201      	adds	r2, #1
 80004d8:	605a      	str	r2, [r3, #4]
	  if(lsb > 4){
 80004da:	685a      	ldr	r2, [r3, #4]
 80004dc:	2a04      	cmp	r2, #4
 80004de:	d904      	bls.n	80004ea <foo.8955+0x22>
		  lsb = 0;
 80004e0:	2200      	movs	r2, #0
 80004e2:	605a      	str	r2, [r3, #4]
		  ++msb;
 80004e4:	681a      	ldr	r2, [r3, #0]
 80004e6:	3201      	adds	r2, #1
 80004e8:	601a      	str	r2, [r3, #0]
	  }
  }
 80004ea:	bf00      	nop
 80004ec:	370c      	adds	r7, #12
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr
	...

080004f8 <main>:
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b084      	sub	sp, #16
 80004fc:	af00      	add	r7, sp, #0
int main(void)
 80004fe:	f107 0318 	add.w	r3, r7, #24
 8000502:	60fb      	str	r3, [r7, #12]
  HAL_Init();
 8000504:	f001 f800 	bl	8001508 <HAL_Init>
  SystemClock_Config();
 8000508:	f000 f82a 	bl	8000560 <SystemClock_Config>
  MX_GPIO_Init();
 800050c:	f000 faec 	bl	8000ae8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000510:	f000 fac4 	bl	8000a9c <MX_DMA_Init>
  MX_I2C1_Init();
 8000514:	f000 f8ce 	bl	80006b4 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000518:	f000 f90c 	bl	8000734 <MX_I2C2_Init>
  MX_LCD_Init();
 800051c:	f000 f94a 	bl	80007b4 <MX_LCD_Init>
  MX_QUADSPI_Init();
 8000520:	f000 f980 	bl	8000824 <MX_QUADSPI_Init>
  MX_SAI1_Init();
 8000524:	f000 f9a4 	bl	8000870 <MX_SAI1_Init>
  MX_SPI2_Init();
 8000528:	f000 fa4a 	bl	80009c0 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 800052c:	f000 fa86 	bl	8000a3c <MX_USART2_UART_Init>
  MX_USB_HOST_Init();
 8000530:	f009 fac6 	bl	8009ac0 <MX_USB_HOST_Init>
  uint32_t lsb = 0;
 8000534:	2300      	movs	r3, #0
 8000536:	60bb      	str	r3, [r7, #8]
  uint32_t msb = 0;
 8000538:	2300      	movs	r3, #0
 800053a:	607b      	str	r3, [r7, #4]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_GPIO_TogglePin(LD_G_GPIO_Port, LD_G_Pin);
 800053c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000540:	4806      	ldr	r0, [pc, #24]	; (800055c <main+0x64>)
 8000542:	f001 fcf9 	bl	8001f38 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8000546:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800054a:	f001 f859 	bl	8001600 <HAL_Delay>
	  foo();
 800054e:	1d3b      	adds	r3, r7, #4
 8000550:	469c      	mov	ip, r3
 8000552:	f7ff ffb9 	bl	80004c8 <foo.8955>


    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000556:	f009 fad9 	bl	8009b0c <MX_USB_HOST_Process>
	  HAL_GPIO_TogglePin(LD_G_GPIO_Port, LD_G_Pin);
 800055a:	e7ef      	b.n	800053c <main+0x44>
 800055c:	48001000 	.word	0x48001000

08000560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b0b8      	sub	sp, #224	; 0xe0
 8000564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000566:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800056a:	2244      	movs	r2, #68	; 0x44
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f009 fdec 	bl	800a14c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000574:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]
 8000582:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000584:	463b      	mov	r3, r7
 8000586:	2288      	movs	r2, #136	; 0x88
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f009 fdde 	bl	800a14c <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000590:	f003 fb9e 	bl	8003cd0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000594:	4b45      	ldr	r3, [pc, #276]	; (80006ac <SystemClock_Config+0x14c>)
 8000596:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800059a:	4a44      	ldr	r2, [pc, #272]	; (80006ac <SystemClock_Config+0x14c>)
 800059c:	f023 0318 	bic.w	r3, r3, #24
 80005a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 80005a4:	231c      	movs	r3, #28
 80005a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005aa:	2301      	movs	r3, #1
 80005ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80005b0:	2301      	movs	r3, #1
 80005b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005b6:	2301      	movs	r3, #1
 80005b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005bc:	2300      	movs	r3, #0
 80005be:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005c2:	2360      	movs	r3, #96	; 0x60
 80005c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c8:	2302      	movs	r3, #2
 80005ca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005ce:	2301      	movs	r3, #1
 80005d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005d4:	2301      	movs	r3, #1
 80005d6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 20;
 80005da:	2314      	movs	r3, #20
 80005dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005e0:	2307      	movs	r3, #7
 80005e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005e6:	2302      	movs	r3, #2
 80005e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005ec:	2302      	movs	r3, #2
 80005ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80005f6:	4618      	mov	r0, r3
 80005f8:	f003 fcaa 	bl	8003f50 <HAL_RCC_OscConfig>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000602:	f000 fbad 	bl	8000d60 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000606:	230f      	movs	r3, #15
 8000608:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800060c:	2303      	movs	r3, #3
 800060e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000612:	2380      	movs	r3, #128	; 0x80
 8000614:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000618:	2300      	movs	r3, #0
 800061a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800061e:	2300      	movs	r3, #0
 8000620:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000624:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000628:	2101      	movs	r1, #1
 800062a:	4618      	mov	r0, r3
 800062c:	f004 f876 	bl	800471c <HAL_RCC_ClockConfig>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000636:	f000 fb93 	bl	8000d60 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2
 800063a:	4b1d      	ldr	r3, [pc, #116]	; (80006b0 <SystemClock_Config+0x150>)
 800063c:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800063e:	2300      	movs	r3, #0
 8000640:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000642:	2300      	movs	r3, #0
 8000644:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000646:	2300      	movs	r3, #0
 8000648:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 800064a:	2300      	movs	r3, #0
 800064c:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800064e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000652:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000656:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800065a:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800065c:	2301      	movs	r3, #1
 800065e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000660:	2301      	movs	r3, #1
 8000662:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000664:	2318      	movs	r3, #24
 8000666:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000668:	2307      	movs	r3, #7
 800066a:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800066c:	2302      	movs	r3, #2
 800066e:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000670:	2302      	movs	r3, #2
 8000672:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_48M2CLK;
 8000674:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000678:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800067a:	463b      	mov	r3, r7
 800067c:	4618      	mov	r0, r3
 800067e:	f004 fa51 	bl	8004b24 <HAL_RCCEx_PeriphCLKConfig>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <SystemClock_Config+0x12c>
  {
    Error_Handler();
 8000688:	f000 fb6a 	bl	8000d60 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800068c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000690:	f003 fb3c 	bl	8003d0c <HAL_PWREx_ControlVoltageScaling>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <SystemClock_Config+0x13e>
  {
    Error_Handler();
 800069a:	f000 fb61 	bl	8000d60 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800069e:	f005 f9ad 	bl	80059fc <HAL_RCCEx_EnableMSIPLLMode>
}
 80006a2:	bf00      	nop
 80006a4:	37e0      	adds	r7, #224	; 0xe0
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40021000 	.word	0x40021000
 80006b0:	000228c2 	.word	0x000228c2

080006b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006b8:	4b1b      	ldr	r3, [pc, #108]	; (8000728 <MX_I2C1_Init+0x74>)
 80006ba:	4a1c      	ldr	r2, [pc, #112]	; (800072c <MX_I2C1_Init+0x78>)
 80006bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00404C74;
 80006be:	4b1a      	ldr	r3, [pc, #104]	; (8000728 <MX_I2C1_Init+0x74>)
 80006c0:	4a1b      	ldr	r2, [pc, #108]	; (8000730 <MX_I2C1_Init+0x7c>)
 80006c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006c4:	4b18      	ldr	r3, [pc, #96]	; (8000728 <MX_I2C1_Init+0x74>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006ca:	4b17      	ldr	r3, [pc, #92]	; (8000728 <MX_I2C1_Init+0x74>)
 80006cc:	2201      	movs	r2, #1
 80006ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006d0:	4b15      	ldr	r3, [pc, #84]	; (8000728 <MX_I2C1_Init+0x74>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006d6:	4b14      	ldr	r3, [pc, #80]	; (8000728 <MX_I2C1_Init+0x74>)
 80006d8:	2200      	movs	r2, #0
 80006da:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006dc:	4b12      	ldr	r3, [pc, #72]	; (8000728 <MX_I2C1_Init+0x74>)
 80006de:	2200      	movs	r2, #0
 80006e0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006e2:	4b11      	ldr	r3, [pc, #68]	; (8000728 <MX_I2C1_Init+0x74>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006e8:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <MX_I2C1_Init+0x74>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006ee:	480e      	ldr	r0, [pc, #56]	; (8000728 <MX_I2C1_Init+0x74>)
 80006f0:	f003 f8e5 	bl	80038be <HAL_I2C_Init>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006fa:	f000 fb31 	bl	8000d60 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006fe:	2100      	movs	r1, #0
 8000700:	4809      	ldr	r0, [pc, #36]	; (8000728 <MX_I2C1_Init+0x74>)
 8000702:	f003 f96b 	bl	80039dc <HAL_I2CEx_ConfigAnalogFilter>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800070c:	f000 fb28 	bl	8000d60 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000710:	2100      	movs	r1, #0
 8000712:	4805      	ldr	r0, [pc, #20]	; (8000728 <MX_I2C1_Init+0x74>)
 8000714:	f003 f9ad 	bl	8003a72 <HAL_I2CEx_ConfigDigitalFilter>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800071e:	f000 fb1f 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	20000170 	.word	0x20000170
 800072c:	40005400 	.word	0x40005400
 8000730:	00404c74 	.word	0x00404c74

08000734 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000738:	4b1b      	ldr	r3, [pc, #108]	; (80007a8 <MX_I2C2_Init+0x74>)
 800073a:	4a1c      	ldr	r2, [pc, #112]	; (80007ac <MX_I2C2_Init+0x78>)
 800073c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00404C74;
 800073e:	4b1a      	ldr	r3, [pc, #104]	; (80007a8 <MX_I2C2_Init+0x74>)
 8000740:	4a1b      	ldr	r2, [pc, #108]	; (80007b0 <MX_I2C2_Init+0x7c>)
 8000742:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000744:	4b18      	ldr	r3, [pc, #96]	; (80007a8 <MX_I2C2_Init+0x74>)
 8000746:	2200      	movs	r2, #0
 8000748:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800074a:	4b17      	ldr	r3, [pc, #92]	; (80007a8 <MX_I2C2_Init+0x74>)
 800074c:	2201      	movs	r2, #1
 800074e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000750:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <MX_I2C2_Init+0x74>)
 8000752:	2200      	movs	r2, #0
 8000754:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000756:	4b14      	ldr	r3, [pc, #80]	; (80007a8 <MX_I2C2_Init+0x74>)
 8000758:	2200      	movs	r2, #0
 800075a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800075c:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <MX_I2C2_Init+0x74>)
 800075e:	2200      	movs	r2, #0
 8000760:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <MX_I2C2_Init+0x74>)
 8000764:	2200      	movs	r2, #0
 8000766:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <MX_I2C2_Init+0x74>)
 800076a:	2200      	movs	r2, #0
 800076c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800076e:	480e      	ldr	r0, [pc, #56]	; (80007a8 <MX_I2C2_Init+0x74>)
 8000770:	f003 f8a5 	bl	80038be <HAL_I2C_Init>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800077a:	f000 faf1 	bl	8000d60 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800077e:	2100      	movs	r1, #0
 8000780:	4809      	ldr	r0, [pc, #36]	; (80007a8 <MX_I2C2_Init+0x74>)
 8000782:	f003 f92b 	bl	80039dc <HAL_I2CEx_ConfigAnalogFilter>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800078c:	f000 fae8 	bl	8000d60 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000790:	2100      	movs	r1, #0
 8000792:	4805      	ldr	r0, [pc, #20]	; (80007a8 <MX_I2C2_Init+0x74>)
 8000794:	f003 f96d 	bl	8003a72 <HAL_I2CEx_ConfigDigitalFilter>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800079e:	f000 fadf 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	200001bc 	.word	0x200001bc
 80007ac:	40005800 	.word	0x40005800
 80007b0:	00404c74 	.word	0x00404c74

080007b4 <MX_LCD_Init>:
  * @brief LCD Initialization Function
  * @param None
  * @retval None
  */
static void MX_LCD_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE END LCD_Init 0 */

  /* USER CODE BEGIN LCD_Init 1 */

  /* USER CODE END LCD_Init 1 */
  hlcd.Instance = LCD;
 80007b8:	4b18      	ldr	r3, [pc, #96]	; (800081c <MX_LCD_Init+0x68>)
 80007ba:	4a19      	ldr	r2, [pc, #100]	; (8000820 <MX_LCD_Init+0x6c>)
 80007bc:	601a      	str	r2, [r3, #0]
  hlcd.Init.Prescaler = LCD_PRESCALER_1;
 80007be:	4b17      	ldr	r3, [pc, #92]	; (800081c <MX_LCD_Init+0x68>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	605a      	str	r2, [r3, #4]
  hlcd.Init.Divider = LCD_DIVIDER_16;
 80007c4:	4b15      	ldr	r3, [pc, #84]	; (800081c <MX_LCD_Init+0x68>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	609a      	str	r2, [r3, #8]
  hlcd.Init.Duty = LCD_DUTY_1_4;
 80007ca:	4b14      	ldr	r3, [pc, #80]	; (800081c <MX_LCD_Init+0x68>)
 80007cc:	220c      	movs	r2, #12
 80007ce:	60da      	str	r2, [r3, #12]
  hlcd.Init.Bias = LCD_BIAS_1_4;
 80007d0:	4b12      	ldr	r3, [pc, #72]	; (800081c <MX_LCD_Init+0x68>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	611a      	str	r2, [r3, #16]
  hlcd.Init.VoltageSource = LCD_VOLTAGESOURCE_INTERNAL;
 80007d6:	4b11      	ldr	r3, [pc, #68]	; (800081c <MX_LCD_Init+0x68>)
 80007d8:	2200      	movs	r2, #0
 80007da:	615a      	str	r2, [r3, #20]
  hlcd.Init.Contrast = LCD_CONTRASTLEVEL_0;
 80007dc:	4b0f      	ldr	r3, [pc, #60]	; (800081c <MX_LCD_Init+0x68>)
 80007de:	2200      	movs	r2, #0
 80007e0:	619a      	str	r2, [r3, #24]
  hlcd.Init.DeadTime = LCD_DEADTIME_0;
 80007e2:	4b0e      	ldr	r3, [pc, #56]	; (800081c <MX_LCD_Init+0x68>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	61da      	str	r2, [r3, #28]
  hlcd.Init.PulseOnDuration = LCD_PULSEONDURATION_0;
 80007e8:	4b0c      	ldr	r3, [pc, #48]	; (800081c <MX_LCD_Init+0x68>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	621a      	str	r2, [r3, #32]
  hlcd.Init.MuxSegment = LCD_MUXSEGMENT_DISABLE;
 80007ee:	4b0b      	ldr	r3, [pc, #44]	; (800081c <MX_LCD_Init+0x68>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	631a      	str	r2, [r3, #48]	; 0x30
  hlcd.Init.BlinkMode = LCD_BLINKMODE_OFF;
 80007f4:	4b09      	ldr	r3, [pc, #36]	; (800081c <MX_LCD_Init+0x68>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	629a      	str	r2, [r3, #40]	; 0x28
  hlcd.Init.BlinkFrequency = LCD_BLINKFREQUENCY_DIV8;
 80007fa:	4b08      	ldr	r3, [pc, #32]	; (800081c <MX_LCD_Init+0x68>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hlcd.Init.HighDrive = LCD_HIGHDRIVE_DISABLE;
 8000800:	4b06      	ldr	r3, [pc, #24]	; (800081c <MX_LCD_Init+0x68>)
 8000802:	2200      	movs	r2, #0
 8000804:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_LCD_Init(&hlcd) != HAL_OK)
 8000806:	4805      	ldr	r0, [pc, #20]	; (800081c <MX_LCD_Init+0x68>)
 8000808:	f003 f980 	bl	8003b0c <HAL_LCD_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_LCD_Init+0x62>
  {
    Error_Handler();
 8000812:	f000 faa5 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN LCD_Init 2 */

  /* USER CODE END LCD_Init 2 */

}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	200002d4 	.word	0x200002d4
 8000820:	40002400 	.word	0x40002400

08000824 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000828:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <MX_QUADSPI_Init+0x44>)
 800082a:	4a10      	ldr	r2, [pc, #64]	; (800086c <MX_QUADSPI_Init+0x48>)
 800082c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 800082e:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <MX_QUADSPI_Init+0x44>)
 8000830:	22ff      	movs	r2, #255	; 0xff
 8000832:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000834:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <MX_QUADSPI_Init+0x44>)
 8000836:	2201      	movs	r2, #1
 8000838:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800083a:	4b0b      	ldr	r3, [pc, #44]	; (8000868 <MX_QUADSPI_Init+0x44>)
 800083c:	2200      	movs	r2, #0
 800083e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000840:	4b09      	ldr	r3, [pc, #36]	; (8000868 <MX_QUADSPI_Init+0x44>)
 8000842:	2201      	movs	r2, #1
 8000844:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000846:	4b08      	ldr	r3, [pc, #32]	; (8000868 <MX_QUADSPI_Init+0x44>)
 8000848:	2200      	movs	r2, #0
 800084a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800084c:	4b06      	ldr	r3, [pc, #24]	; (8000868 <MX_QUADSPI_Init+0x44>)
 800084e:	2200      	movs	r2, #0
 8000850:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000852:	4805      	ldr	r0, [pc, #20]	; (8000868 <MX_QUADSPI_Init+0x44>)
 8000854:	f003 fac0 	bl	8003dd8 <HAL_QSPI_Init>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 800085e:	f000 fa7f 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	20000414 	.word	0x20000414
 800086c:	a0001000 	.word	0xa0001000

08000870 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000874:	4b4d      	ldr	r3, [pc, #308]	; (80009ac <MX_SAI1_Init+0x13c>)
 8000876:	4a4e      	ldr	r2, [pc, #312]	; (80009b0 <MX_SAI1_Init+0x140>)
 8000878:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 800087a:	4b4c      	ldr	r3, [pc, #304]	; (80009ac <MX_SAI1_Init+0x13c>)
 800087c:	2200      	movs	r2, #0
 800087e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000880:	4b4a      	ldr	r3, [pc, #296]	; (80009ac <MX_SAI1_Init+0x13c>)
 8000882:	2200      	movs	r2, #0
 8000884:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8000886:	4b49      	ldr	r3, [pc, #292]	; (80009ac <MX_SAI1_Init+0x13c>)
 8000888:	2240      	movs	r2, #64	; 0x40
 800088a:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800088c:	4b47      	ldr	r3, [pc, #284]	; (80009ac <MX_SAI1_Init+0x13c>)
 800088e:	2200      	movs	r2, #0
 8000890:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000892:	4b46      	ldr	r3, [pc, #280]	; (80009ac <MX_SAI1_Init+0x13c>)
 8000894:	2200      	movs	r2, #0
 8000896:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000898:	4b44      	ldr	r3, [pc, #272]	; (80009ac <MX_SAI1_Init+0x13c>)
 800089a:	2200      	movs	r2, #0
 800089c:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800089e:	4b43      	ldr	r3, [pc, #268]	; (80009ac <MX_SAI1_Init+0x13c>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80008a4:	4b41      	ldr	r3, [pc, #260]	; (80009ac <MX_SAI1_Init+0x13c>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80008aa:	4b40      	ldr	r3, [pc, #256]	; (80009ac <MX_SAI1_Init+0x13c>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80008b0:	4b3e      	ldr	r3, [pc, #248]	; (80009ac <MX_SAI1_Init+0x13c>)
 80008b2:	4a40      	ldr	r2, [pc, #256]	; (80009b4 <MX_SAI1_Init+0x144>)
 80008b4:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80008b6:	4b3d      	ldr	r3, [pc, #244]	; (80009ac <MX_SAI1_Init+0x13c>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 80008bc:	4b3b      	ldr	r3, [pc, #236]	; (80009ac <MX_SAI1_Init+0x13c>)
 80008be:	2200      	movs	r2, #0
 80008c0:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 80008c2:	4b3a      	ldr	r3, [pc, #232]	; (80009ac <MX_SAI1_Init+0x13c>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80008c8:	4b38      	ldr	r3, [pc, #224]	; (80009ac <MX_SAI1_Init+0x13c>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.FrameInit.FrameLength = 8;
 80008ce:	4b37      	ldr	r3, [pc, #220]	; (80009ac <MX_SAI1_Init+0x13c>)
 80008d0:	2208      	movs	r2, #8
 80008d2:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 80008d4:	4b35      	ldr	r3, [pc, #212]	; (80009ac <MX_SAI1_Init+0x13c>)
 80008d6:	2201      	movs	r2, #1
 80008d8:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80008da:	4b34      	ldr	r3, [pc, #208]	; (80009ac <MX_SAI1_Init+0x13c>)
 80008dc:	2200      	movs	r2, #0
 80008de:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80008e0:	4b32      	ldr	r3, [pc, #200]	; (80009ac <MX_SAI1_Init+0x13c>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80008e6:	4b31      	ldr	r3, [pc, #196]	; (80009ac <MX_SAI1_Init+0x13c>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 80008ec:	4b2f      	ldr	r3, [pc, #188]	; (80009ac <MX_SAI1_Init+0x13c>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80008f2:	4b2e      	ldr	r3, [pc, #184]	; (80009ac <MX_SAI1_Init+0x13c>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 80008f8:	4b2c      	ldr	r3, [pc, #176]	; (80009ac <MX_SAI1_Init+0x13c>)
 80008fa:	2201      	movs	r2, #1
 80008fc:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 80008fe:	4b2b      	ldr	r3, [pc, #172]	; (80009ac <MX_SAI1_Init+0x13c>)
 8000900:	2200      	movs	r2, #0
 8000902:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8000904:	4829      	ldr	r0, [pc, #164]	; (80009ac <MX_SAI1_Init+0x13c>)
 8000906:	f005 fb43 	bl	8005f90 <HAL_SAI_Init>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_SAI1_Init+0xa4>
  {
    Error_Handler();
 8000910:	f000 fa26 	bl	8000d60 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 8000914:	4b28      	ldr	r3, [pc, #160]	; (80009b8 <MX_SAI1_Init+0x148>)
 8000916:	4a29      	ldr	r2, [pc, #164]	; (80009bc <MX_SAI1_Init+0x14c>)
 8000918:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 800091a:	4b27      	ldr	r3, [pc, #156]	; (80009b8 <MX_SAI1_Init+0x148>)
 800091c:	2200      	movs	r2, #0
 800091e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8000920:	4b25      	ldr	r3, [pc, #148]	; (80009b8 <MX_SAI1_Init+0x148>)
 8000922:	2203      	movs	r2, #3
 8000924:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 8000926:	4b24      	ldr	r3, [pc, #144]	; (80009b8 <MX_SAI1_Init+0x148>)
 8000928:	2240      	movs	r2, #64	; 0x40
 800092a:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800092c:	4b22      	ldr	r3, [pc, #136]	; (80009b8 <MX_SAI1_Init+0x148>)
 800092e:	2200      	movs	r2, #0
 8000930:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000932:	4b21      	ldr	r3, [pc, #132]	; (80009b8 <MX_SAI1_Init+0x148>)
 8000934:	2200      	movs	r2, #0
 8000936:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8000938:	4b1f      	ldr	r3, [pc, #124]	; (80009b8 <MX_SAI1_Init+0x148>)
 800093a:	2201      	movs	r2, #1
 800093c:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800093e:	4b1e      	ldr	r3, [pc, #120]	; (80009b8 <MX_SAI1_Init+0x148>)
 8000940:	2200      	movs	r2, #0
 8000942:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000944:	4b1c      	ldr	r3, [pc, #112]	; (80009b8 <MX_SAI1_Init+0x148>)
 8000946:	2200      	movs	r2, #0
 8000948:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800094a:	4b1b      	ldr	r3, [pc, #108]	; (80009b8 <MX_SAI1_Init+0x148>)
 800094c:	2200      	movs	r2, #0
 800094e:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000950:	4b19      	ldr	r3, [pc, #100]	; (80009b8 <MX_SAI1_Init+0x148>)
 8000952:	2200      	movs	r2, #0
 8000954:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000956:	4b18      	ldr	r3, [pc, #96]	; (80009b8 <MX_SAI1_Init+0x148>)
 8000958:	2200      	movs	r2, #0
 800095a:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800095c:	4b16      	ldr	r3, [pc, #88]	; (80009b8 <MX_SAI1_Init+0x148>)
 800095e:	2200      	movs	r2, #0
 8000960:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.FrameInit.FrameLength = 8;
 8000962:	4b15      	ldr	r3, [pc, #84]	; (80009b8 <MX_SAI1_Init+0x148>)
 8000964:	2208      	movs	r2, #8
 8000966:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 8000968:	4b13      	ldr	r3, [pc, #76]	; (80009b8 <MX_SAI1_Init+0x148>)
 800096a:	2201      	movs	r2, #1
 800096c:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800096e:	4b12      	ldr	r3, [pc, #72]	; (80009b8 <MX_SAI1_Init+0x148>)
 8000970:	2200      	movs	r2, #0
 8000972:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000974:	4b10      	ldr	r3, [pc, #64]	; (80009b8 <MX_SAI1_Init+0x148>)
 8000976:	2200      	movs	r2, #0
 8000978:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800097a:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <MX_SAI1_Init+0x148>)
 800097c:	2200      	movs	r2, #0
 800097e:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 8000980:	4b0d      	ldr	r3, [pc, #52]	; (80009b8 <MX_SAI1_Init+0x148>)
 8000982:	2200      	movs	r2, #0
 8000984:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000986:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <MX_SAI1_Init+0x148>)
 8000988:	2200      	movs	r2, #0
 800098a:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 800098c:	4b0a      	ldr	r3, [pc, #40]	; (80009b8 <MX_SAI1_Init+0x148>)
 800098e:	2201      	movs	r2, #1
 8000990:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 8000992:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <MX_SAI1_Init+0x148>)
 8000994:	2200      	movs	r2, #0
 8000996:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8000998:	4807      	ldr	r0, [pc, #28]	; (80009b8 <MX_SAI1_Init+0x148>)
 800099a:	f005 faf9 	bl	8005f90 <HAL_SAI_Init>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_SAI1_Init+0x138>
  {
    Error_Handler();
 80009a4:	f000 f9dc 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 80009a8:	bf00      	nop
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	20000310 	.word	0x20000310
 80009b0:	40015404 	.word	0x40015404
 80009b4:	0002ee00 	.word	0x0002ee00
 80009b8:	20000208 	.word	0x20000208
 80009bc:	40015424 	.word	0x40015424

080009c0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80009c4:	4b1b      	ldr	r3, [pc, #108]	; (8000a34 <MX_SPI2_Init+0x74>)
 80009c6:	4a1c      	ldr	r2, [pc, #112]	; (8000a38 <MX_SPI2_Init+0x78>)
 80009c8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80009ca:	4b1a      	ldr	r3, [pc, #104]	; (8000a34 <MX_SPI2_Init+0x74>)
 80009cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009d0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80009d2:	4b18      	ldr	r3, [pc, #96]	; (8000a34 <MX_SPI2_Init+0x74>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80009d8:	4b16      	ldr	r3, [pc, #88]	; (8000a34 <MX_SPI2_Init+0x74>)
 80009da:	f44f 7240 	mov.w	r2, #768	; 0x300
 80009de:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009e0:	4b14      	ldr	r3, [pc, #80]	; (8000a34 <MX_SPI2_Init+0x74>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009e6:	4b13      	ldr	r3, [pc, #76]	; (8000a34 <MX_SPI2_Init+0x74>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80009ec:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <MX_SPI2_Init+0x74>)
 80009ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009f2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009f4:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <MX_SPI2_Init+0x74>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009fa:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <MX_SPI2_Init+0x74>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a00:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <MX_SPI2_Init+0x74>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a06:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <MX_SPI2_Init+0x74>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000a0c:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <MX_SPI2_Init+0x74>)
 8000a0e:	2207      	movs	r2, #7
 8000a10:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a12:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <MX_SPI2_Init+0x74>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a18:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <MX_SPI2_Init+0x74>)
 8000a1a:	2208      	movs	r2, #8
 8000a1c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a1e:	4805      	ldr	r0, [pc, #20]	; (8000a34 <MX_SPI2_Init+0x74>)
 8000a20:	f005 fc60 	bl	80062e4 <HAL_SPI_Init>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000a2a:	f000 f999 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	2000010c 	.word	0x2000010c
 8000a38:	40003800 	.word	0x40003800

08000a3c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a40:	4b14      	ldr	r3, [pc, #80]	; (8000a94 <MX_USART2_UART_Init+0x58>)
 8000a42:	4a15      	ldr	r2, [pc, #84]	; (8000a98 <MX_USART2_UART_Init+0x5c>)
 8000a44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a46:	4b13      	ldr	r3, [pc, #76]	; (8000a94 <MX_USART2_UART_Init+0x58>)
 8000a48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a4e:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <MX_USART2_UART_Init+0x58>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a54:	4b0f      	ldr	r3, [pc, #60]	; (8000a94 <MX_USART2_UART_Init+0x58>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a5a:	4b0e      	ldr	r3, [pc, #56]	; (8000a94 <MX_USART2_UART_Init+0x58>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a60:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <MX_USART2_UART_Init+0x58>)
 8000a62:	220c      	movs	r2, #12
 8000a64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a66:	4b0b      	ldr	r3, [pc, #44]	; (8000a94 <MX_USART2_UART_Init+0x58>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a6c:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <MX_USART2_UART_Init+0x58>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a72:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <MX_USART2_UART_Init+0x58>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a78:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <MX_USART2_UART_Init+0x58>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a7e:	4805      	ldr	r0, [pc, #20]	; (8000a94 <MX_USART2_UART_Init+0x58>)
 8000a80:	f005 fcd3 	bl	800642a <HAL_UART_Init>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a8a:	f000 f969 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	20000394 	.word	0x20000394
 8000a98:	40004400 	.word	0x40004400

08000a9c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000aa2:	4b10      	ldr	r3, [pc, #64]	; (8000ae4 <MX_DMA_Init+0x48>)
 8000aa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000aa6:	4a0f      	ldr	r2, [pc, #60]	; (8000ae4 <MX_DMA_Init+0x48>)
 8000aa8:	f043 0301 	orr.w	r3, r3, #1
 8000aac:	6493      	str	r3, [r2, #72]	; 0x48
 8000aae:	4b0d      	ldr	r3, [pc, #52]	; (8000ae4 <MX_DMA_Init+0x48>)
 8000ab0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ab2:	f003 0301 	and.w	r3, r3, #1
 8000ab6:	607b      	str	r3, [r7, #4]
 8000ab8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000aba:	2200      	movs	r2, #0
 8000abc:	2100      	movs	r1, #0
 8000abe:	2010      	movs	r0, #16
 8000ac0:	f000 fe9b 	bl	80017fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000ac4:	2010      	movs	r0, #16
 8000ac6:	f000 feb4 	bl	8001832 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000aca:	2200      	movs	r2, #0
 8000acc:	2100      	movs	r1, #0
 8000ace:	2011      	movs	r0, #17
 8000ad0:	f000 fe93 	bl	80017fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000ad4:	2011      	movs	r0, #17
 8000ad6:	f000 feac 	bl	8001832 <HAL_NVIC_EnableIRQ>

}
 8000ada:	bf00      	nop
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40021000 	.word	0x40021000

08000ae8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08c      	sub	sp, #48	; 0x30
 8000aec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aee:	f107 031c 	add.w	r3, r7, #28
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	605a      	str	r2, [r3, #4]
 8000af8:	609a      	str	r2, [r3, #8]
 8000afa:	60da      	str	r2, [r3, #12]
 8000afc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000afe:	4b92      	ldr	r3, [pc, #584]	; (8000d48 <MX_GPIO_Init+0x260>)
 8000b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b02:	4a91      	ldr	r2, [pc, #580]	; (8000d48 <MX_GPIO_Init+0x260>)
 8000b04:	f043 0310 	orr.w	r3, r3, #16
 8000b08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b0a:	4b8f      	ldr	r3, [pc, #572]	; (8000d48 <MX_GPIO_Init+0x260>)
 8000b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b0e:	f003 0310 	and.w	r3, r3, #16
 8000b12:	61bb      	str	r3, [r7, #24]
 8000b14:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b16:	4b8c      	ldr	r3, [pc, #560]	; (8000d48 <MX_GPIO_Init+0x260>)
 8000b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b1a:	4a8b      	ldr	r2, [pc, #556]	; (8000d48 <MX_GPIO_Init+0x260>)
 8000b1c:	f043 0304 	orr.w	r3, r3, #4
 8000b20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b22:	4b89      	ldr	r3, [pc, #548]	; (8000d48 <MX_GPIO_Init+0x260>)
 8000b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b26:	f003 0304 	and.w	r3, r3, #4
 8000b2a:	617b      	str	r3, [r7, #20]
 8000b2c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b2e:	4b86      	ldr	r3, [pc, #536]	; (8000d48 <MX_GPIO_Init+0x260>)
 8000b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b32:	4a85      	ldr	r2, [pc, #532]	; (8000d48 <MX_GPIO_Init+0x260>)
 8000b34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b3a:	4b83      	ldr	r3, [pc, #524]	; (8000d48 <MX_GPIO_Init+0x260>)
 8000b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b42:	613b      	str	r3, [r7, #16]
 8000b44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b46:	4b80      	ldr	r3, [pc, #512]	; (8000d48 <MX_GPIO_Init+0x260>)
 8000b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b4a:	4a7f      	ldr	r2, [pc, #508]	; (8000d48 <MX_GPIO_Init+0x260>)
 8000b4c:	f043 0301 	orr.w	r3, r3, #1
 8000b50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b52:	4b7d      	ldr	r3, [pc, #500]	; (8000d48 <MX_GPIO_Init+0x260>)
 8000b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5e:	4b7a      	ldr	r3, [pc, #488]	; (8000d48 <MX_GPIO_Init+0x260>)
 8000b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b62:	4a79      	ldr	r2, [pc, #484]	; (8000d48 <MX_GPIO_Init+0x260>)
 8000b64:	f043 0302 	orr.w	r3, r3, #2
 8000b68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b6a:	4b77      	ldr	r3, [pc, #476]	; (8000d48 <MX_GPIO_Init+0x260>)
 8000b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b6e:	f003 0302 	and.w	r3, r3, #2
 8000b72:	60bb      	str	r3, [r7, #8]
 8000b74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b76:	4b74      	ldr	r3, [pc, #464]	; (8000d48 <MX_GPIO_Init+0x260>)
 8000b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b7a:	4a73      	ldr	r2, [pc, #460]	; (8000d48 <MX_GPIO_Init+0x260>)
 8000b7c:	f043 0308 	orr.w	r3, r3, #8
 8000b80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b82:	4b71      	ldr	r3, [pc, #452]	; (8000d48 <MX_GPIO_Init+0x260>)
 8000b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b86:	f003 0308 	and.w	r3, r3, #8
 8000b8a:	607b      	str	r3, [r7, #4]
 8000b8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, AUDIO_RST_Pin|LD_G_Pin|XL_CS_Pin, GPIO_PIN_RESET);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	f240 1109 	movw	r1, #265	; 0x109
 8000b94:	486d      	ldr	r0, [pc, #436]	; (8000d4c <MX_GPIO_Init+0x264>)
 8000b96:	f001 f9b7 	bl	8001f08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD_R_Pin|M3V3_REG_ON_Pin, GPIO_PIN_RESET);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	210c      	movs	r1, #12
 8000b9e:	486c      	ldr	r0, [pc, #432]	; (8000d50 <MX_GPIO_Init+0x268>)
 8000ba0:	f001 f9b2 	bl	8001f08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000baa:	486a      	ldr	r0, [pc, #424]	; (8000d54 <MX_GPIO_Init+0x26c>)
 8000bac:	f001 f9ac 	bl	8001f08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_VBUS_GPIO_Port, OTG_FS_VBUS_Pin, GPIO_PIN_RESET);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bb6:	4867      	ldr	r0, [pc, #412]	; (8000d54 <MX_GPIO_Init+0x26c>)
 8000bb8:	f001 f9a6 	bl	8001f08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	2180      	movs	r1, #128	; 0x80
 8000bc0:	4865      	ldr	r0, [pc, #404]	; (8000d58 <MX_GPIO_Init+0x270>)
 8000bc2:	f001 f9a1 	bl	8001f08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : AUDIO_RST_Pin */
  GPIO_InitStruct.Pin = AUDIO_RST_Pin;
 8000bc6:	2308      	movs	r3, #8
 8000bc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AUDIO_RST_GPIO_Port, &GPIO_InitStruct);
 8000bd6:	f107 031c 	add.w	r3, r7, #28
 8000bda:	4619      	mov	r1, r3
 8000bdc:	485b      	ldr	r0, [pc, #364]	; (8000d4c <MX_GPIO_Init+0x264>)
 8000bde:	f000 ffeb 	bl	8001bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MFX_IRQ_OUT_Pin OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin|OTG_FS_OverCurrent_Pin;
 8000be2:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8000be6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000be8:	4b5c      	ldr	r3, [pc, #368]	; (8000d5c <MX_GPIO_Init+0x274>)
 8000bea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bf0:	f107 031c 	add.w	r3, r7, #28
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4857      	ldr	r0, [pc, #348]	; (8000d54 <MX_GPIO_Init+0x26c>)
 8000bf8:	f000 ffde 	bl	8001bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 MAG_INT_Pin MAG_DRDY_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|MAG_INT_Pin|MAG_DRDY_Pin;
 8000bfc:	2307      	movs	r3, #7
 8000bfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c00:	2300      	movs	r3, #0
 8000c02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c08:	f107 031c 	add.w	r3, r7, #28
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4851      	ldr	r0, [pc, #324]	; (8000d54 <MX_GPIO_Init+0x26c>)
 8000c10:	f000 ffd2 	bl	8001bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : JOY_CENTER_Pin JOY_LEFT_Pin JOY_RIGHT_Pin JOY_UP_Pin
                           JOY_DOWN_Pin */
  GPIO_InitStruct.Pin = JOY_CENTER_Pin|JOY_LEFT_Pin|JOY_RIGHT_Pin|JOY_UP_Pin
 8000c14:	232f      	movs	r3, #47	; 0x2f
 8000c16:	61fb      	str	r3, [r7, #28]
                          |JOY_DOWN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c20:	f107 031c 	add.w	r3, r7, #28
 8000c24:	4619      	mov	r1, r3
 8000c26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c2a:	f000 ffc5 	bl	8001bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_WAKEUP_Pin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
 8000c2e:	2310      	movs	r3, #16
 8000c30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c32:	4b4a      	ldr	r3, [pc, #296]	; (8000d5c <MX_GPIO_Init+0x274>)
 8000c34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8000c3a:	f107 031c 	add.w	r3, r7, #28
 8000c3e:	4619      	mov	r1, r3
 8000c40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c44:	f000 ffb8 	bl	8001bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD_R_Pin */
  GPIO_InitStruct.Pin = LD_R_Pin;
 8000c48:	2304      	movs	r3, #4
 8000c4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c50:	2301      	movs	r3, #1
 8000c52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c54:	2303      	movs	r3, #3
 8000c56:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_R_GPIO_Port, &GPIO_InitStruct);
 8000c58:	f107 031c 	add.w	r3, r7, #28
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	483c      	ldr	r0, [pc, #240]	; (8000d50 <MX_GPIO_Init+0x268>)
 8000c60:	f000 ffaa 	bl	8001bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD_G_Pin */
  GPIO_InitStruct.Pin = LD_G_Pin;
 8000c64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c72:	2303      	movs	r3, #3
 8000c74:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_G_GPIO_Port, &GPIO_InitStruct);
 8000c76:	f107 031c 	add.w	r3, r7, #28
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4833      	ldr	r0, [pc, #204]	; (8000d4c <MX_GPIO_Init+0x264>)
 8000c7e:	f000 ff9b 	bl	8001bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|OTG_FS_VBUS_Pin;
 8000c82:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8000c86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c90:	2300      	movs	r3, #0
 8000c92:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c94:	f107 031c 	add.w	r3, r7, #28
 8000c98:	4619      	mov	r1, r3
 8000c9a:	482e      	ldr	r0, [pc, #184]	; (8000d54 <MX_GPIO_Init+0x26c>)
 8000c9c:	f000 ff8c 	bl	8001bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXT_RST_Pin GYRO_INT1_Pin */
  GPIO_InitStruct.Pin = EXT_RST_Pin|GYRO_INT1_Pin;
 8000ca0:	2305      	movs	r3, #5
 8000ca2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ca4:	4b2d      	ldr	r3, [pc, #180]	; (8000d5c <MX_GPIO_Init+0x274>)
 8000ca6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cac:	f107 031c 	add.w	r3, r7, #28
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4829      	ldr	r0, [pc, #164]	; (8000d58 <MX_GPIO_Init+0x270>)
 8000cb4:	f000 ff80 	bl	8001bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : GYRO_CS_Pin */
  GPIO_InitStruct.Pin = GYRO_CS_Pin;
 8000cb8:	2380      	movs	r3, #128	; 0x80
 8000cba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GYRO_CS_GPIO_Port, &GPIO_InitStruct);
 8000cc8:	f107 031c 	add.w	r3, r7, #28
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4822      	ldr	r0, [pc, #136]	; (8000d58 <MX_GPIO_Init+0x270>)
 8000cd0:	f000 ff72 	bl	8001bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : M3V3_REG_ON_Pin */
  GPIO_InitStruct.Pin = M3V3_REG_ON_Pin;
 8000cd4:	2308      	movs	r3, #8
 8000cd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(M3V3_REG_ON_GPIO_Port, &GPIO_InitStruct);
 8000ce4:	f107 031c 	add.w	r3, r7, #28
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4819      	ldr	r0, [pc, #100]	; (8000d50 <MX_GPIO_Init+0x268>)
 8000cec:	f000 ff64 	bl	8001bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : GYRO_INT2_Pin */
  GPIO_InitStruct.Pin = GYRO_INT2_Pin;
 8000cf0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cf4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000cf6:	4b19      	ldr	r3, [pc, #100]	; (8000d5c <MX_GPIO_Init+0x274>)
 8000cf8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GYRO_INT2_GPIO_Port, &GPIO_InitStruct);
 8000cfe:	f107 031c 	add.w	r3, r7, #28
 8000d02:	4619      	mov	r1, r3
 8000d04:	4812      	ldr	r0, [pc, #72]	; (8000d50 <MX_GPIO_Init+0x268>)
 8000d06:	f000 ff57 	bl	8001bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : XL_CS_Pin */
  GPIO_InitStruct.Pin = XL_CS_Pin;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d12:	2300      	movs	r3, #0
 8000d14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d16:	2300      	movs	r3, #0
 8000d18:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(XL_CS_GPIO_Port, &GPIO_InitStruct);
 8000d1a:	f107 031c 	add.w	r3, r7, #28
 8000d1e:	4619      	mov	r1, r3
 8000d20:	480a      	ldr	r0, [pc, #40]	; (8000d4c <MX_GPIO_Init+0x264>)
 8000d22:	f000 ff49 	bl	8001bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : XL_INT_Pin */
  GPIO_InitStruct.Pin = XL_INT_Pin;
 8000d26:	2302      	movs	r3, #2
 8000d28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <MX_GPIO_Init+0x274>)
 8000d2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(XL_INT_GPIO_Port, &GPIO_InitStruct);
 8000d32:	f107 031c 	add.w	r3, r7, #28
 8000d36:	4619      	mov	r1, r3
 8000d38:	4804      	ldr	r0, [pc, #16]	; (8000d4c <MX_GPIO_Init+0x264>)
 8000d3a:	f000 ff3d 	bl	8001bb8 <HAL_GPIO_Init>

}
 8000d3e:	bf00      	nop
 8000d40:	3730      	adds	r7, #48	; 0x30
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40021000 	.word	0x40021000
 8000d4c:	48001000 	.word	0x48001000
 8000d50:	48000400 	.word	0x48000400
 8000d54:	48000800 	.word	0x48000800
 8000d58:	48000c00 	.word	0x48000c00
 8000d5c:	10120000 	.word	0x10120000

08000d60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d64:	bf00      	nop
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
	...

08000d70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d76:	4b0f      	ldr	r3, [pc, #60]	; (8000db4 <HAL_MspInit+0x44>)
 8000d78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d7a:	4a0e      	ldr	r2, [pc, #56]	; (8000db4 <HAL_MspInit+0x44>)
 8000d7c:	f043 0301 	orr.w	r3, r3, #1
 8000d80:	6613      	str	r3, [r2, #96]	; 0x60
 8000d82:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <HAL_MspInit+0x44>)
 8000d84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d86:	f003 0301 	and.w	r3, r3, #1
 8000d8a:	607b      	str	r3, [r7, #4]
 8000d8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d8e:	4b09      	ldr	r3, [pc, #36]	; (8000db4 <HAL_MspInit+0x44>)
 8000d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d92:	4a08      	ldr	r2, [pc, #32]	; (8000db4 <HAL_MspInit+0x44>)
 8000d94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d98:	6593      	str	r3, [r2, #88]	; 0x58
 8000d9a:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <HAL_MspInit+0x44>)
 8000d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da2:	603b      	str	r3, [r7, #0]
 8000da4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000da6:	bf00      	nop
 8000da8:	370c      	adds	r7, #12
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	40021000 	.word	0x40021000

08000db8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b08c      	sub	sp, #48	; 0x30
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc0:	f107 031c 	add.w	r3, r7, #28
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	609a      	str	r2, [r3, #8]
 8000dcc:	60da      	str	r2, [r3, #12]
 8000dce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a2e      	ldr	r2, [pc, #184]	; (8000e90 <HAL_I2C_MspInit+0xd8>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d128      	bne.n	8000e2c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dda:	4b2e      	ldr	r3, [pc, #184]	; (8000e94 <HAL_I2C_MspInit+0xdc>)
 8000ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dde:	4a2d      	ldr	r2, [pc, #180]	; (8000e94 <HAL_I2C_MspInit+0xdc>)
 8000de0:	f043 0302 	orr.w	r3, r3, #2
 8000de4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000de6:	4b2b      	ldr	r3, [pc, #172]	; (8000e94 <HAL_I2C_MspInit+0xdc>)
 8000de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dea:	f003 0302 	and.w	r3, r3, #2
 8000dee:	61bb      	str	r3, [r7, #24]
 8000df0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000df2:	23c0      	movs	r3, #192	; 0xc0
 8000df4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000df6:	2312      	movs	r3, #18
 8000df8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dfe:	2303      	movs	r3, #3
 8000e00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e02:	2304      	movs	r3, #4
 8000e04:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e06:	f107 031c 	add.w	r3, r7, #28
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4822      	ldr	r0, [pc, #136]	; (8000e98 <HAL_I2C_MspInit+0xe0>)
 8000e0e:	f000 fed3 	bl	8001bb8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e12:	4b20      	ldr	r3, [pc, #128]	; (8000e94 <HAL_I2C_MspInit+0xdc>)
 8000e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e16:	4a1f      	ldr	r2, [pc, #124]	; (8000e94 <HAL_I2C_MspInit+0xdc>)
 8000e18:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e1c:	6593      	str	r3, [r2, #88]	; 0x58
 8000e1e:	4b1d      	ldr	r3, [pc, #116]	; (8000e94 <HAL_I2C_MspInit+0xdc>)
 8000e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e26:	617b      	str	r3, [r7, #20]
 8000e28:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000e2a:	e02d      	b.n	8000e88 <HAL_I2C_MspInit+0xd0>
  else if(hi2c->Instance==I2C2)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a1a      	ldr	r2, [pc, #104]	; (8000e9c <HAL_I2C_MspInit+0xe4>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d128      	bne.n	8000e88 <HAL_I2C_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e36:	4b17      	ldr	r3, [pc, #92]	; (8000e94 <HAL_I2C_MspInit+0xdc>)
 8000e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e3a:	4a16      	ldr	r2, [pc, #88]	; (8000e94 <HAL_I2C_MspInit+0xdc>)
 8000e3c:	f043 0302 	orr.w	r3, r3, #2
 8000e40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e42:	4b14      	ldr	r3, [pc, #80]	; (8000e94 <HAL_I2C_MspInit+0xdc>)
 8000e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e46:	f003 0302 	and.w	r3, r3, #2
 8000e4a:	613b      	str	r3, [r7, #16]
 8000e4c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MFX_I2C_SLC_Pin|MFX_I2C_SDA_Pin;
 8000e4e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e54:	2312      	movs	r3, #18
 8000e56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e5c:	2303      	movs	r3, #3
 8000e5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000e60:	2304      	movs	r3, #4
 8000e62:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e64:	f107 031c 	add.w	r3, r7, #28
 8000e68:	4619      	mov	r1, r3
 8000e6a:	480b      	ldr	r0, [pc, #44]	; (8000e98 <HAL_I2C_MspInit+0xe0>)
 8000e6c:	f000 fea4 	bl	8001bb8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000e70:	4b08      	ldr	r3, [pc, #32]	; (8000e94 <HAL_I2C_MspInit+0xdc>)
 8000e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e74:	4a07      	ldr	r2, [pc, #28]	; (8000e94 <HAL_I2C_MspInit+0xdc>)
 8000e76:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e7a:	6593      	str	r3, [r2, #88]	; 0x58
 8000e7c:	4b05      	ldr	r3, [pc, #20]	; (8000e94 <HAL_I2C_MspInit+0xdc>)
 8000e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e84:	60fb      	str	r3, [r7, #12]
 8000e86:	68fb      	ldr	r3, [r7, #12]
}
 8000e88:	bf00      	nop
 8000e8a:	3730      	adds	r7, #48	; 0x30
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40005400 	.word	0x40005400
 8000e94:	40021000 	.word	0x40021000
 8000e98:	48000400 	.word	0x48000400
 8000e9c:	40005800 	.word	0x40005800

08000ea0 <HAL_LCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hlcd: LCD handle pointer
* @retval None
*/
void HAL_LCD_MspInit(LCD_HandleTypeDef* hlcd)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08c      	sub	sp, #48	; 0x30
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea8:	f107 031c 	add.w	r3, r7, #28
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]
 8000eb6:	611a      	str	r2, [r3, #16]
  if(hlcd->Instance==LCD)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a44      	ldr	r2, [pc, #272]	; (8000fd0 <HAL_LCD_MspInit+0x130>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	f040 8081 	bne.w	8000fc6 <HAL_LCD_MspInit+0x126>
  {
  /* USER CODE BEGIN LCD_MspInit 0 */

  /* USER CODE END LCD_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LCD_CLK_ENABLE();
 8000ec4:	4b43      	ldr	r3, [pc, #268]	; (8000fd4 <HAL_LCD_MspInit+0x134>)
 8000ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ec8:	4a42      	ldr	r2, [pc, #264]	; (8000fd4 <HAL_LCD_MspInit+0x134>)
 8000eca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ece:	6593      	str	r3, [r2, #88]	; 0x58
 8000ed0:	4b40      	ldr	r3, [pc, #256]	; (8000fd4 <HAL_LCD_MspInit+0x134>)
 8000ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ed4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ed8:	61bb      	str	r3, [r7, #24]
 8000eda:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000edc:	4b3d      	ldr	r3, [pc, #244]	; (8000fd4 <HAL_LCD_MspInit+0x134>)
 8000ede:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee0:	4a3c      	ldr	r2, [pc, #240]	; (8000fd4 <HAL_LCD_MspInit+0x134>)
 8000ee2:	f043 0304 	orr.w	r3, r3, #4
 8000ee6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ee8:	4b3a      	ldr	r3, [pc, #232]	; (8000fd4 <HAL_LCD_MspInit+0x134>)
 8000eea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eec:	f003 0304 	and.w	r3, r3, #4
 8000ef0:	617b      	str	r3, [r7, #20]
 8000ef2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef4:	4b37      	ldr	r3, [pc, #220]	; (8000fd4 <HAL_LCD_MspInit+0x134>)
 8000ef6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef8:	4a36      	ldr	r2, [pc, #216]	; (8000fd4 <HAL_LCD_MspInit+0x134>)
 8000efa:	f043 0301 	orr.w	r3, r3, #1
 8000efe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f00:	4b34      	ldr	r3, [pc, #208]	; (8000fd4 <HAL_LCD_MspInit+0x134>)
 8000f02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f04:	f003 0301 	and.w	r3, r3, #1
 8000f08:	613b      	str	r3, [r7, #16]
 8000f0a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f0c:	4b31      	ldr	r3, [pc, #196]	; (8000fd4 <HAL_LCD_MspInit+0x134>)
 8000f0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f10:	4a30      	ldr	r2, [pc, #192]	; (8000fd4 <HAL_LCD_MspInit+0x134>)
 8000f12:	f043 0302 	orr.w	r3, r3, #2
 8000f16:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f18:	4b2e      	ldr	r3, [pc, #184]	; (8000fd4 <HAL_LCD_MspInit+0x134>)
 8000f1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f1c:	f003 0302 	and.w	r3, r3, #2
 8000f20:	60fb      	str	r3, [r7, #12]
 8000f22:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f24:	4b2b      	ldr	r3, [pc, #172]	; (8000fd4 <HAL_LCD_MspInit+0x134>)
 8000f26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f28:	4a2a      	ldr	r2, [pc, #168]	; (8000fd4 <HAL_LCD_MspInit+0x134>)
 8000f2a:	f043 0308 	orr.w	r3, r3, #8
 8000f2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f30:	4b28      	ldr	r3, [pc, #160]	; (8000fd4 <HAL_LCD_MspInit+0x134>)
 8000f32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f34:	f003 0308 	and.w	r3, r3, #8
 8000f38:	60bb      	str	r3, [r7, #8]
 8000f3a:	68bb      	ldr	r3, [r7, #8]
    PA15 (JTDI)     ------> LCD_SEG17
    PB4 (NJTRST)     ------> LCD_SEG8
    PB5     ------> LCD_SEG9
    PB9     ------> LCD_COM3
    */
    GPIO_InitStruct.Pin = VLCD_Pin|SEG22_Pin|SEG1_Pin|SEG14_Pin
 8000f3c:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 8000f40:	61fb      	str	r3, [r7, #28]
                          |SEG9_Pin|SEG13_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f42:	2302      	movs	r3, #2
 8000f44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000f4e:	230b      	movs	r3, #11
 8000f50:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f52:	f107 031c 	add.w	r3, r7, #28
 8000f56:	4619      	mov	r1, r3
 8000f58:	481f      	ldr	r0, [pc, #124]	; (8000fd8 <HAL_LCD_MspInit+0x138>)
 8000f5a:	f000 fe2d 	bl	8001bb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG23_Pin|SEG0_Pin|COM0_Pin|COM1_Pin
 8000f5e:	f248 73c0 	movw	r3, #34752	; 0x87c0
 8000f62:	61fb      	str	r3, [r7, #28]
                          |COM2_Pin|SEG10_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f64:	2302      	movs	r3, #2
 8000f66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000f70:	230b      	movs	r3, #11
 8000f72:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f74:	f107 031c 	add.w	r3, r7, #28
 8000f78:	4619      	mov	r1, r3
 8000f7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f7e:	f000 fe1b 	bl	8001bb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG21_Pin|SEG2_Pin|SEG20_Pin|SEG3_Pin
 8000f82:	f24f 2333 	movw	r3, #62003	; 0xf233
 8000f86:	61fb      	str	r3, [r7, #28]
                          |SEG19_Pin|SEG4_Pin|SEG11_Pin|SEG12_Pin
                          |COM3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f90:	2300      	movs	r3, #0
 8000f92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000f94:	230b      	movs	r3, #11
 8000f96:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f98:	f107 031c 	add.w	r3, r7, #28
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	480f      	ldr	r0, [pc, #60]	; (8000fdc <HAL_LCD_MspInit+0x13c>)
 8000fa0:	f000 fe0a 	bl	8001bb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG18_Pin|SEG5_Pin|SEG17_Pin|SEG6_Pin
 8000fa4:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000fa8:	61fb      	str	r3, [r7, #28]
                          |SEG16_Pin|SEG7_Pin|SEG15_Pin|SEG8_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000faa:	2302      	movs	r3, #2
 8000fac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000fb6:	230b      	movs	r3, #11
 8000fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fba:	f107 031c 	add.w	r3, r7, #28
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4807      	ldr	r0, [pc, #28]	; (8000fe0 <HAL_LCD_MspInit+0x140>)
 8000fc2:	f000 fdf9 	bl	8001bb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN LCD_MspInit 1 */

  /* USER CODE END LCD_MspInit 1 */
  }

}
 8000fc6:	bf00      	nop
 8000fc8:	3730      	adds	r7, #48	; 0x30
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40002400 	.word	0x40002400
 8000fd4:	40021000 	.word	0x40021000
 8000fd8:	48000800 	.word	0x48000800
 8000fdc:	48000400 	.word	0x48000400
 8000fe0:	48000c00 	.word	0x48000c00

08000fe4 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b08a      	sub	sp, #40	; 0x28
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fec:	f107 0314 	add.w	r3, r7, #20
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]
 8000ffa:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a17      	ldr	r2, [pc, #92]	; (8001060 <HAL_QSPI_MspInit+0x7c>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d128      	bne.n	8001058 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001006:	4b17      	ldr	r3, [pc, #92]	; (8001064 <HAL_QSPI_MspInit+0x80>)
 8001008:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800100a:	4a16      	ldr	r2, [pc, #88]	; (8001064 <HAL_QSPI_MspInit+0x80>)
 800100c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001010:	6513      	str	r3, [r2, #80]	; 0x50
 8001012:	4b14      	ldr	r3, [pc, #80]	; (8001064 <HAL_QSPI_MspInit+0x80>)
 8001014:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800101a:	613b      	str	r3, [r7, #16]
 800101c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800101e:	4b11      	ldr	r3, [pc, #68]	; (8001064 <HAL_QSPI_MspInit+0x80>)
 8001020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001022:	4a10      	ldr	r2, [pc, #64]	; (8001064 <HAL_QSPI_MspInit+0x80>)
 8001024:	f043 0310 	orr.w	r3, r3, #16
 8001028:	64d3      	str	r3, [r2, #76]	; 0x4c
 800102a:	4b0e      	ldr	r3, [pc, #56]	; (8001064 <HAL_QSPI_MspInit+0x80>)
 800102c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102e:	f003 0310 	and.w	r3, r3, #16
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QSPI_CLK_Pin|QSPI_CS_Pin|QSPI_D0_Pin|QSPI_D1_Pin
 8001036:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800103a:	617b      	str	r3, [r7, #20]
                          |QSPI_D2_Pin|QSPI_D3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103c:	2302      	movs	r3, #2
 800103e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001044:	2303      	movs	r3, #3
 8001046:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001048:	230a      	movs	r3, #10
 800104a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800104c:	f107 0314 	add.w	r3, r7, #20
 8001050:	4619      	mov	r1, r3
 8001052:	4805      	ldr	r0, [pc, #20]	; (8001068 <HAL_QSPI_MspInit+0x84>)
 8001054:	f000 fdb0 	bl	8001bb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001058:	bf00      	nop
 800105a:	3728      	adds	r7, #40	; 0x28
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	a0001000 	.word	0xa0001000
 8001064:	40021000 	.word	0x40021000
 8001068:	48001000 	.word	0x48001000

0800106c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b08a      	sub	sp, #40	; 0x28
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001074:	f107 0314 	add.w	r3, r7, #20
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]
 8001082:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a17      	ldr	r2, [pc, #92]	; (80010e8 <HAL_SPI_MspInit+0x7c>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d127      	bne.n	80010de <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800108e:	4b17      	ldr	r3, [pc, #92]	; (80010ec <HAL_SPI_MspInit+0x80>)
 8001090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001092:	4a16      	ldr	r2, [pc, #88]	; (80010ec <HAL_SPI_MspInit+0x80>)
 8001094:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001098:	6593      	str	r3, [r2, #88]	; 0x58
 800109a:	4b14      	ldr	r3, [pc, #80]	; (80010ec <HAL_SPI_MspInit+0x80>)
 800109c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800109e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010a2:	613b      	str	r3, [r7, #16]
 80010a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010a6:	4b11      	ldr	r3, [pc, #68]	; (80010ec <HAL_SPI_MspInit+0x80>)
 80010a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010aa:	4a10      	ldr	r2, [pc, #64]	; (80010ec <HAL_SPI_MspInit+0x80>)
 80010ac:	f043 0308 	orr.w	r3, r3, #8
 80010b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010b2:	4b0e      	ldr	r3, [pc, #56]	; (80010ec <HAL_SPI_MspInit+0x80>)
 80010b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b6:	f003 0308 	and.w	r3, r3, #8
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PD1     ------> SPI2_SCK
    PD3     ------> SPI2_MISO
    PD4     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = MEMS_SCK_Pin|MEMS_MISO_Pin|MEMS_MOSI_Pin;
 80010be:	231a      	movs	r3, #26
 80010c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c2:	2302      	movs	r3, #2
 80010c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ca:	2303      	movs	r3, #3
 80010cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010ce:	2305      	movs	r3, #5
 80010d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010d2:	f107 0314 	add.w	r3, r7, #20
 80010d6:	4619      	mov	r1, r3
 80010d8:	4805      	ldr	r0, [pc, #20]	; (80010f0 <HAL_SPI_MspInit+0x84>)
 80010da:	f000 fd6d 	bl	8001bb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80010de:	bf00      	nop
 80010e0:	3728      	adds	r7, #40	; 0x28
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40003800 	.word	0x40003800
 80010ec:	40021000 	.word	0x40021000
 80010f0:	48000c00 	.word	0x48000c00

080010f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b08a      	sub	sp, #40	; 0x28
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fc:	f107 0314 	add.w	r3, r7, #20
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	60da      	str	r2, [r3, #12]
 800110a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a44      	ldr	r2, [pc, #272]	; (8001224 <HAL_UART_MspInit+0x130>)
 8001112:	4293      	cmp	r3, r2
 8001114:	f040 8082 	bne.w	800121c <HAL_UART_MspInit+0x128>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001118:	4b43      	ldr	r3, [pc, #268]	; (8001228 <HAL_UART_MspInit+0x134>)
 800111a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800111c:	4a42      	ldr	r2, [pc, #264]	; (8001228 <HAL_UART_MspInit+0x134>)
 800111e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001122:	6593      	str	r3, [r2, #88]	; 0x58
 8001124:	4b40      	ldr	r3, [pc, #256]	; (8001228 <HAL_UART_MspInit+0x134>)
 8001126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001128:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800112c:	613b      	str	r3, [r7, #16]
 800112e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001130:	4b3d      	ldr	r3, [pc, #244]	; (8001228 <HAL_UART_MspInit+0x134>)
 8001132:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001134:	4a3c      	ldr	r2, [pc, #240]	; (8001228 <HAL_UART_MspInit+0x134>)
 8001136:	f043 0308 	orr.w	r3, r3, #8
 800113a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800113c:	4b3a      	ldr	r3, [pc, #232]	; (8001228 <HAL_UART_MspInit+0x134>)
 800113e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001140:	f003 0308 	and.w	r3, r3, #8
 8001144:	60fb      	str	r3, [r7, #12]
 8001146:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001148:	2360      	movs	r3, #96	; 0x60
 800114a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114c:	2302      	movs	r3, #2
 800114e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001150:	2301      	movs	r3, #1
 8001152:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001154:	2303      	movs	r3, #3
 8001156:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001158:	2307      	movs	r3, #7
 800115a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800115c:	f107 0314 	add.w	r3, r7, #20
 8001160:	4619      	mov	r1, r3
 8001162:	4832      	ldr	r0, [pc, #200]	; (800122c <HAL_UART_MspInit+0x138>)
 8001164:	f000 fd28 	bl	8001bb8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001168:	4b31      	ldr	r3, [pc, #196]	; (8001230 <HAL_UART_MspInit+0x13c>)
 800116a:	4a32      	ldr	r2, [pc, #200]	; (8001234 <HAL_UART_MspInit+0x140>)
 800116c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 800116e:	4b30      	ldr	r3, [pc, #192]	; (8001230 <HAL_UART_MspInit+0x13c>)
 8001170:	2202      	movs	r2, #2
 8001172:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001174:	4b2e      	ldr	r3, [pc, #184]	; (8001230 <HAL_UART_MspInit+0x13c>)
 8001176:	2200      	movs	r2, #0
 8001178:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800117a:	4b2d      	ldr	r3, [pc, #180]	; (8001230 <HAL_UART_MspInit+0x13c>)
 800117c:	2200      	movs	r2, #0
 800117e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001180:	4b2b      	ldr	r3, [pc, #172]	; (8001230 <HAL_UART_MspInit+0x13c>)
 8001182:	2280      	movs	r2, #128	; 0x80
 8001184:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001186:	4b2a      	ldr	r3, [pc, #168]	; (8001230 <HAL_UART_MspInit+0x13c>)
 8001188:	2200      	movs	r2, #0
 800118a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800118c:	4b28      	ldr	r3, [pc, #160]	; (8001230 <HAL_UART_MspInit+0x13c>)
 800118e:	2200      	movs	r2, #0
 8001190:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001192:	4b27      	ldr	r3, [pc, #156]	; (8001230 <HAL_UART_MspInit+0x13c>)
 8001194:	2200      	movs	r2, #0
 8001196:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001198:	4b25      	ldr	r3, [pc, #148]	; (8001230 <HAL_UART_MspInit+0x13c>)
 800119a:	2200      	movs	r2, #0
 800119c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800119e:	4824      	ldr	r0, [pc, #144]	; (8001230 <HAL_UART_MspInit+0x13c>)
 80011a0:	f000 fb62 	bl	8001868 <HAL_DMA_Init>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <HAL_UART_MspInit+0xba>
    {
      Error_Handler();
 80011aa:	f7ff fdd9 	bl	8000d60 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a1f      	ldr	r2, [pc, #124]	; (8001230 <HAL_UART_MspInit+0x13c>)
 80011b2:	66da      	str	r2, [r3, #108]	; 0x6c
 80011b4:	4a1e      	ldr	r2, [pc, #120]	; (8001230 <HAL_UART_MspInit+0x13c>)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80011ba:	4b1f      	ldr	r3, [pc, #124]	; (8001238 <HAL_UART_MspInit+0x144>)
 80011bc:	4a1f      	ldr	r2, [pc, #124]	; (800123c <HAL_UART_MspInit+0x148>)
 80011be:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 80011c0:	4b1d      	ldr	r3, [pc, #116]	; (8001238 <HAL_UART_MspInit+0x144>)
 80011c2:	2202      	movs	r2, #2
 80011c4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011c6:	4b1c      	ldr	r3, [pc, #112]	; (8001238 <HAL_UART_MspInit+0x144>)
 80011c8:	2210      	movs	r2, #16
 80011ca:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011cc:	4b1a      	ldr	r3, [pc, #104]	; (8001238 <HAL_UART_MspInit+0x144>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80011d2:	4b19      	ldr	r3, [pc, #100]	; (8001238 <HAL_UART_MspInit+0x144>)
 80011d4:	2280      	movs	r2, #128	; 0x80
 80011d6:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011d8:	4b17      	ldr	r3, [pc, #92]	; (8001238 <HAL_UART_MspInit+0x144>)
 80011da:	2200      	movs	r2, #0
 80011dc:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011de:	4b16      	ldr	r3, [pc, #88]	; (8001238 <HAL_UART_MspInit+0x144>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80011e4:	4b14      	ldr	r3, [pc, #80]	; (8001238 <HAL_UART_MspInit+0x144>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80011ea:	4b13      	ldr	r3, [pc, #76]	; (8001238 <HAL_UART_MspInit+0x144>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80011f0:	4811      	ldr	r0, [pc, #68]	; (8001238 <HAL_UART_MspInit+0x144>)
 80011f2:	f000 fb39 	bl	8001868 <HAL_DMA_Init>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 80011fc:	f7ff fdb0 	bl	8000d60 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	4a0d      	ldr	r2, [pc, #52]	; (8001238 <HAL_UART_MspInit+0x144>)
 8001204:	669a      	str	r2, [r3, #104]	; 0x68
 8001206:	4a0c      	ldr	r2, [pc, #48]	; (8001238 <HAL_UART_MspInit+0x144>)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800120c:	2200      	movs	r2, #0
 800120e:	2100      	movs	r1, #0
 8001210:	2026      	movs	r0, #38	; 0x26
 8001212:	f000 faf2 	bl	80017fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001216:	2026      	movs	r0, #38	; 0x26
 8001218:	f000 fb0b 	bl	8001832 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800121c:	bf00      	nop
 800121e:	3728      	adds	r7, #40	; 0x28
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40004400 	.word	0x40004400
 8001228:	40021000 	.word	0x40021000
 800122c:	48000c00 	.word	0x48000c00
 8001230:	200000c4 	.word	0x200000c4
 8001234:	4002006c 	.word	0x4002006c
 8001238:	2000028c 	.word	0x2000028c
 800123c:	40020080 	.word	0x40020080

08001240 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b08a      	sub	sp, #40	; 0x28
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a33      	ldr	r2, [pc, #204]	; (800131c <HAL_SAI_MspInit+0xdc>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d135      	bne.n	80012be <HAL_SAI_MspInit+0x7e>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8001252:	4b33      	ldr	r3, [pc, #204]	; (8001320 <HAL_SAI_MspInit+0xe0>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d10b      	bne.n	8001272 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800125a:	4b32      	ldr	r3, [pc, #200]	; (8001324 <HAL_SAI_MspInit+0xe4>)
 800125c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800125e:	4a31      	ldr	r2, [pc, #196]	; (8001324 <HAL_SAI_MspInit+0xe4>)
 8001260:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001264:	6613      	str	r3, [r2, #96]	; 0x60
 8001266:	4b2f      	ldr	r3, [pc, #188]	; (8001324 <HAL_SAI_MspInit+0xe4>)
 8001268:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800126a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800126e:	613b      	str	r3, [r7, #16]
 8001270:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8001272:	4b2b      	ldr	r3, [pc, #172]	; (8001320 <HAL_SAI_MspInit+0xe0>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	3301      	adds	r3, #1
 8001278:	4a29      	ldr	r2, [pc, #164]	; (8001320 <HAL_SAI_MspInit+0xe0>)
 800127a:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    PE9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = SAI1_MCK_Pin|SAI1_FS_Pin|SAI1_SCK_Pin|SAI1_SD_Pin;
 800127c:	2374      	movs	r3, #116	; 0x74
 800127e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001280:	2302      	movs	r3, #2
 8001282:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001288:	2303      	movs	r3, #3
 800128a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800128c:	230d      	movs	r3, #13
 800128e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001290:	f107 0314 	add.w	r3, r7, #20
 8001294:	4619      	mov	r1, r3
 8001296:	4824      	ldr	r0, [pc, #144]	; (8001328 <HAL_SAI_MspInit+0xe8>)
 8001298:	f000 fc8e 	bl	8001bb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AUDIO_CLK_Pin;
 800129c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a2:	2302      	movs	r3, #2
 80012a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	2300      	movs	r3, #0
 80012a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012aa:	2300      	movs	r3, #0
 80012ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80012ae:	230d      	movs	r3, #13
 80012b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AUDIO_CLK_GPIO_Port, &GPIO_InitStruct);
 80012b2:	f107 0314 	add.w	r3, r7, #20
 80012b6:	4619      	mov	r1, r3
 80012b8:	481b      	ldr	r0, [pc, #108]	; (8001328 <HAL_SAI_MspInit+0xe8>)
 80012ba:	f000 fc7d 	bl	8001bb8 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a1a      	ldr	r2, [pc, #104]	; (800132c <HAL_SAI_MspInit+0xec>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d124      	bne.n	8001312 <HAL_SAI_MspInit+0xd2>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 80012c8:	4b15      	ldr	r3, [pc, #84]	; (8001320 <HAL_SAI_MspInit+0xe0>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d10b      	bne.n	80012e8 <HAL_SAI_MspInit+0xa8>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80012d0:	4b14      	ldr	r3, [pc, #80]	; (8001324 <HAL_SAI_MspInit+0xe4>)
 80012d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012d4:	4a13      	ldr	r2, [pc, #76]	; (8001324 <HAL_SAI_MspInit+0xe4>)
 80012d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012da:	6613      	str	r3, [r2, #96]	; 0x60
 80012dc:	4b11      	ldr	r3, [pc, #68]	; (8001324 <HAL_SAI_MspInit+0xe4>)
 80012de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 80012e8:	4b0d      	ldr	r3, [pc, #52]	; (8001320 <HAL_SAI_MspInit+0xe0>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	3301      	adds	r3, #1
 80012ee:	4a0c      	ldr	r2, [pc, #48]	; (8001320 <HAL_SAI_MspInit+0xe0>)
 80012f0:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE7     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = AUDIO_DIN_Pin;
 80012f2:	2380      	movs	r3, #128	; 0x80
 80012f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f6:	2302      	movs	r3, #2
 80012f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012fe:	2303      	movs	r3, #3
 8001300:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001302:	230d      	movs	r3, #13
 8001304:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AUDIO_DIN_GPIO_Port, &GPIO_InitStruct);
 8001306:	f107 0314 	add.w	r3, r7, #20
 800130a:	4619      	mov	r1, r3
 800130c:	4806      	ldr	r0, [pc, #24]	; (8001328 <HAL_SAI_MspInit+0xe8>)
 800130e:	f000 fc53 	bl	8001bb8 <HAL_GPIO_Init>

    }
}
 8001312:	bf00      	nop
 8001314:	3728      	adds	r7, #40	; 0x28
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40015404 	.word	0x40015404
 8001320:	200000ac 	.word	0x200000ac
 8001324:	40021000 	.word	0x40021000
 8001328:	48001000 	.word	0x48001000
 800132c:	40015424 	.word	0x40015424

08001330 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr

0800133e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800133e:	b480      	push	{r7}
 8001340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001342:	e7fe      	b.n	8001342 <HardFault_Handler+0x4>

08001344 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001348:	e7fe      	b.n	8001348 <MemManage_Handler+0x4>

0800134a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800134a:	b480      	push	{r7}
 800134c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800134e:	e7fe      	b.n	800134e <BusFault_Handler+0x4>

08001350 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001354:	e7fe      	b.n	8001354 <UsageFault_Handler+0x4>

08001356 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001356:	b480      	push	{r7}
 8001358:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800135a:	bf00      	nop
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001368:	bf00      	nop
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr

08001372 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001372:	b480      	push	{r7}
 8001374:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001376:	bf00      	nop
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001384:	f000 f91c 	bl	80015c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001388:	bf00      	nop
 800138a:	bd80      	pop	{r7, pc}

0800138c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001390:	4802      	ldr	r0, [pc, #8]	; (800139c <DMA1_Channel6_IRQHandler+0x10>)
 8001392:	f000 fb62 	bl	8001a5a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	200000c4 	.word	0x200000c4

080013a0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80013a4:	4802      	ldr	r0, [pc, #8]	; (80013b0 <DMA1_Channel7_IRQHandler+0x10>)
 80013a6:	f000 fb58 	bl	8001a5a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	2000028c 	.word	0x2000028c

080013b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80013b8:	4802      	ldr	r0, [pc, #8]	; (80013c4 <USART2_IRQHandler+0x10>)
 80013ba:	f005 f885 	bl	80064c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000394 	.word	0x20000394

080013c8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80013cc:	4802      	ldr	r0, [pc, #8]	; (80013d8 <OTG_FS_IRQHandler+0x10>)
 80013ce:	f001 f859 	bl	8002484 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	20000834 	.word	0x20000834

080013dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b086      	sub	sp, #24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013e4:	4a14      	ldr	r2, [pc, #80]	; (8001438 <_sbrk+0x5c>)
 80013e6:	4b15      	ldr	r3, [pc, #84]	; (800143c <_sbrk+0x60>)
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013f0:	4b13      	ldr	r3, [pc, #76]	; (8001440 <_sbrk+0x64>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d102      	bne.n	80013fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013f8:	4b11      	ldr	r3, [pc, #68]	; (8001440 <_sbrk+0x64>)
 80013fa:	4a12      	ldr	r2, [pc, #72]	; (8001444 <_sbrk+0x68>)
 80013fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013fe:	4b10      	ldr	r3, [pc, #64]	; (8001440 <_sbrk+0x64>)
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4413      	add	r3, r2
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	429a      	cmp	r2, r3
 800140a:	d207      	bcs.n	800141c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800140c:	f008 fe64 	bl	800a0d8 <__errno>
 8001410:	4602      	mov	r2, r0
 8001412:	230c      	movs	r3, #12
 8001414:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001416:	f04f 33ff 	mov.w	r3, #4294967295
 800141a:	e009      	b.n	8001430 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800141c:	4b08      	ldr	r3, [pc, #32]	; (8001440 <_sbrk+0x64>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001422:	4b07      	ldr	r3, [pc, #28]	; (8001440 <_sbrk+0x64>)
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4413      	add	r3, r2
 800142a:	4a05      	ldr	r2, [pc, #20]	; (8001440 <_sbrk+0x64>)
 800142c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800142e:	68fb      	ldr	r3, [r7, #12]
}
 8001430:	4618      	mov	r0, r3
 8001432:	3718      	adds	r7, #24
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	20018000 	.word	0x20018000
 800143c:	00000400 	.word	0x00000400
 8001440:	200000b0 	.word	0x200000b0
 8001444:	20000b00 	.word	0x20000b00

08001448 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800144c:	4b17      	ldr	r3, [pc, #92]	; (80014ac <SystemInit+0x64>)
 800144e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001452:	4a16      	ldr	r2, [pc, #88]	; (80014ac <SystemInit+0x64>)
 8001454:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001458:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800145c:	4b14      	ldr	r3, [pc, #80]	; (80014b0 <SystemInit+0x68>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a13      	ldr	r2, [pc, #76]	; (80014b0 <SystemInit+0x68>)
 8001462:	f043 0301 	orr.w	r3, r3, #1
 8001466:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001468:	4b11      	ldr	r3, [pc, #68]	; (80014b0 <SystemInit+0x68>)
 800146a:	2200      	movs	r2, #0
 800146c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800146e:	4b10      	ldr	r3, [pc, #64]	; (80014b0 <SystemInit+0x68>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a0f      	ldr	r2, [pc, #60]	; (80014b0 <SystemInit+0x68>)
 8001474:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001478:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800147c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800147e:	4b0c      	ldr	r3, [pc, #48]	; (80014b0 <SystemInit+0x68>)
 8001480:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001484:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001486:	4b0a      	ldr	r3, [pc, #40]	; (80014b0 <SystemInit+0x68>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a09      	ldr	r2, [pc, #36]	; (80014b0 <SystemInit+0x68>)
 800148c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001490:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001492:	4b07      	ldr	r3, [pc, #28]	; (80014b0 <SystemInit+0x68>)
 8001494:	2200      	movs	r2, #0
 8001496:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001498:	4b04      	ldr	r3, [pc, #16]	; (80014ac <SystemInit+0x64>)
 800149a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800149e:	609a      	str	r2, [r3, #8]
#endif
}
 80014a0:	bf00      	nop
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	e000ed00 	.word	0xe000ed00
 80014b0:	40021000 	.word	0x40021000

080014b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80014b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014ec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014b8:	f7ff ffc6 	bl	8001448 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80014bc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80014be:	e003      	b.n	80014c8 <LoopCopyDataInit>

080014c0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80014c0:	4b0b      	ldr	r3, [pc, #44]	; (80014f0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80014c2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80014c4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80014c6:	3104      	adds	r1, #4

080014c8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80014c8:	480a      	ldr	r0, [pc, #40]	; (80014f4 <LoopForever+0xa>)
	ldr	r3, =_edata
 80014ca:	4b0b      	ldr	r3, [pc, #44]	; (80014f8 <LoopForever+0xe>)
	adds	r2, r0, r1
 80014cc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80014ce:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80014d0:	d3f6      	bcc.n	80014c0 <CopyDataInit>
	ldr	r2, =_sbss
 80014d2:	4a0a      	ldr	r2, [pc, #40]	; (80014fc <LoopForever+0x12>)
	b	LoopFillZerobss
 80014d4:	e002      	b.n	80014dc <LoopFillZerobss>

080014d6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80014d6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80014d8:	f842 3b04 	str.w	r3, [r2], #4

080014dc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80014dc:	4b08      	ldr	r3, [pc, #32]	; (8001500 <LoopForever+0x16>)
	cmp	r2, r3
 80014de:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80014e0:	d3f9      	bcc.n	80014d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014e2:	f008 fdff 	bl	800a0e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014e6:	f7ff f807 	bl	80004f8 <main>

080014ea <LoopForever>:

LoopForever:
    b LoopForever
 80014ea:	e7fe      	b.n	80014ea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80014ec:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80014f0:	0800a344 	.word	0x0800a344
	ldr	r0, =_sdata
 80014f4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80014f8:	20000090 	.word	0x20000090
	ldr	r2, =_sbss
 80014fc:	20000090 	.word	0x20000090
	ldr	r3, = _ebss
 8001500:	20000afc 	.word	0x20000afc

08001504 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001504:	e7fe      	b.n	8001504 <ADC1_2_IRQHandler>
	...

08001508 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800150e:	2300      	movs	r3, #0
 8001510:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001512:	4b0c      	ldr	r3, [pc, #48]	; (8001544 <HAL_Init+0x3c>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a0b      	ldr	r2, [pc, #44]	; (8001544 <HAL_Init+0x3c>)
 8001518:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800151c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800151e:	2003      	movs	r0, #3
 8001520:	f000 f960 	bl	80017e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001524:	2000      	movs	r0, #0
 8001526:	f000 f80f 	bl	8001548 <HAL_InitTick>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d002      	beq.n	8001536 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	71fb      	strb	r3, [r7, #7]
 8001534:	e001      	b.n	800153a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001536:	f7ff fc1b 	bl	8000d70 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800153a:	79fb      	ldrb	r3, [r7, #7]
}
 800153c:	4618      	mov	r0, r3
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40022000 	.word	0x40022000

08001548 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001550:	2300      	movs	r3, #0
 8001552:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001554:	4b17      	ldr	r3, [pc, #92]	; (80015b4 <HAL_InitTick+0x6c>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d023      	beq.n	80015a4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800155c:	4b16      	ldr	r3, [pc, #88]	; (80015b8 <HAL_InitTick+0x70>)
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	4b14      	ldr	r3, [pc, #80]	; (80015b4 <HAL_InitTick+0x6c>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	4619      	mov	r1, r3
 8001566:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800156a:	fbb3 f3f1 	udiv	r3, r3, r1
 800156e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001572:	4618      	mov	r0, r3
 8001574:	f000 f96b 	bl	800184e <HAL_SYSTICK_Config>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d10f      	bne.n	800159e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2b0f      	cmp	r3, #15
 8001582:	d809      	bhi.n	8001598 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001584:	2200      	movs	r2, #0
 8001586:	6879      	ldr	r1, [r7, #4]
 8001588:	f04f 30ff 	mov.w	r0, #4294967295
 800158c:	f000 f935 	bl	80017fa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001590:	4a0a      	ldr	r2, [pc, #40]	; (80015bc <HAL_InitTick+0x74>)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6013      	str	r3, [r2, #0]
 8001596:	e007      	b.n	80015a8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	73fb      	strb	r3, [r7, #15]
 800159c:	e004      	b.n	80015a8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	73fb      	strb	r3, [r7, #15]
 80015a2:	e001      	b.n	80015a8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80015a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3710      	adds	r7, #16
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	20000008 	.word	0x20000008
 80015b8:	20000000 	.word	0x20000000
 80015bc:	20000004 	.word	0x20000004

080015c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015c4:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <HAL_IncTick+0x20>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	461a      	mov	r2, r3
 80015ca:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <HAL_IncTick+0x24>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4413      	add	r3, r2
 80015d0:	4a04      	ldr	r2, [pc, #16]	; (80015e4 <HAL_IncTick+0x24>)
 80015d2:	6013      	str	r3, [r2, #0]
}
 80015d4:	bf00      	nop
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	20000008 	.word	0x20000008
 80015e4:	20000458 	.word	0x20000458

080015e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  return uwTick;
 80015ec:	4b03      	ldr	r3, [pc, #12]	; (80015fc <HAL_GetTick+0x14>)
 80015ee:	681b      	ldr	r3, [r3, #0]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	20000458 	.word	0x20000458

08001600 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001608:	f7ff ffee 	bl	80015e8 <HAL_GetTick>
 800160c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001618:	d005      	beq.n	8001626 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800161a:	4b09      	ldr	r3, [pc, #36]	; (8001640 <HAL_Delay+0x40>)
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	461a      	mov	r2, r3
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	4413      	add	r3, r2
 8001624:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001626:	bf00      	nop
 8001628:	f7ff ffde 	bl	80015e8 <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	68fa      	ldr	r2, [r7, #12]
 8001634:	429a      	cmp	r2, r3
 8001636:	d8f7      	bhi.n	8001628 <HAL_Delay+0x28>
  {
  }
}
 8001638:	bf00      	nop
 800163a:	3710      	adds	r7, #16
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	20000008 	.word	0x20000008

08001644 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001644:	b480      	push	{r7}
 8001646:	b085      	sub	sp, #20
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f003 0307 	and.w	r3, r3, #7
 8001652:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001654:	4b0c      	ldr	r3, [pc, #48]	; (8001688 <__NVIC_SetPriorityGrouping+0x44>)
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800165a:	68ba      	ldr	r2, [r7, #8]
 800165c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001660:	4013      	ands	r3, r2
 8001662:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800166c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001670:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001674:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001676:	4a04      	ldr	r2, [pc, #16]	; (8001688 <__NVIC_SetPriorityGrouping+0x44>)
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	60d3      	str	r3, [r2, #12]
}
 800167c:	bf00      	nop
 800167e:	3714      	adds	r7, #20
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr
 8001688:	e000ed00 	.word	0xe000ed00

0800168c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001690:	4b04      	ldr	r3, [pc, #16]	; (80016a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	0a1b      	lsrs	r3, r3, #8
 8001696:	f003 0307 	and.w	r3, r3, #7
}
 800169a:	4618      	mov	r0, r3
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr
 80016a4:	e000ed00 	.word	0xe000ed00

080016a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	4603      	mov	r3, r0
 80016b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	db0b      	blt.n	80016d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016ba:	79fb      	ldrb	r3, [r7, #7]
 80016bc:	f003 021f 	and.w	r2, r3, #31
 80016c0:	4907      	ldr	r1, [pc, #28]	; (80016e0 <__NVIC_EnableIRQ+0x38>)
 80016c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c6:	095b      	lsrs	r3, r3, #5
 80016c8:	2001      	movs	r0, #1
 80016ca:	fa00 f202 	lsl.w	r2, r0, r2
 80016ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016d2:	bf00      	nop
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	e000e100 	.word	0xe000e100

080016e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	4603      	mov	r3, r0
 80016ec:	6039      	str	r1, [r7, #0]
 80016ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	db0a      	blt.n	800170e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	b2da      	uxtb	r2, r3
 80016fc:	490c      	ldr	r1, [pc, #48]	; (8001730 <__NVIC_SetPriority+0x4c>)
 80016fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001702:	0112      	lsls	r2, r2, #4
 8001704:	b2d2      	uxtb	r2, r2
 8001706:	440b      	add	r3, r1
 8001708:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800170c:	e00a      	b.n	8001724 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	b2da      	uxtb	r2, r3
 8001712:	4908      	ldr	r1, [pc, #32]	; (8001734 <__NVIC_SetPriority+0x50>)
 8001714:	79fb      	ldrb	r3, [r7, #7]
 8001716:	f003 030f 	and.w	r3, r3, #15
 800171a:	3b04      	subs	r3, #4
 800171c:	0112      	lsls	r2, r2, #4
 800171e:	b2d2      	uxtb	r2, r2
 8001720:	440b      	add	r3, r1
 8001722:	761a      	strb	r2, [r3, #24]
}
 8001724:	bf00      	nop
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr
 8001730:	e000e100 	.word	0xe000e100
 8001734:	e000ed00 	.word	0xe000ed00

08001738 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001738:	b480      	push	{r7}
 800173a:	b089      	sub	sp, #36	; 0x24
 800173c:	af00      	add	r7, sp, #0
 800173e:	60f8      	str	r0, [r7, #12]
 8001740:	60b9      	str	r1, [r7, #8]
 8001742:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	f003 0307 	and.w	r3, r3, #7
 800174a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	f1c3 0307 	rsb	r3, r3, #7
 8001752:	2b04      	cmp	r3, #4
 8001754:	bf28      	it	cs
 8001756:	2304      	movcs	r3, #4
 8001758:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	3304      	adds	r3, #4
 800175e:	2b06      	cmp	r3, #6
 8001760:	d902      	bls.n	8001768 <NVIC_EncodePriority+0x30>
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	3b03      	subs	r3, #3
 8001766:	e000      	b.n	800176a <NVIC_EncodePriority+0x32>
 8001768:	2300      	movs	r3, #0
 800176a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800176c:	f04f 32ff 	mov.w	r2, #4294967295
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
 8001776:	43da      	mvns	r2, r3
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	401a      	ands	r2, r3
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001780:	f04f 31ff 	mov.w	r1, #4294967295
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	fa01 f303 	lsl.w	r3, r1, r3
 800178a:	43d9      	mvns	r1, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001790:	4313      	orrs	r3, r2
         );
}
 8001792:	4618      	mov	r0, r3
 8001794:	3724      	adds	r7, #36	; 0x24
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
	...

080017a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	3b01      	subs	r3, #1
 80017ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017b0:	d301      	bcc.n	80017b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017b2:	2301      	movs	r3, #1
 80017b4:	e00f      	b.n	80017d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017b6:	4a0a      	ldr	r2, [pc, #40]	; (80017e0 <SysTick_Config+0x40>)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	3b01      	subs	r3, #1
 80017bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017be:	210f      	movs	r1, #15
 80017c0:	f04f 30ff 	mov.w	r0, #4294967295
 80017c4:	f7ff ff8e 	bl	80016e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017c8:	4b05      	ldr	r3, [pc, #20]	; (80017e0 <SysTick_Config+0x40>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017ce:	4b04      	ldr	r3, [pc, #16]	; (80017e0 <SysTick_Config+0x40>)
 80017d0:	2207      	movs	r2, #7
 80017d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	e000e010 	.word	0xe000e010

080017e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f7ff ff29 	bl	8001644 <__NVIC_SetPriorityGrouping>
}
 80017f2:	bf00      	nop
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}

080017fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b086      	sub	sp, #24
 80017fe:	af00      	add	r7, sp, #0
 8001800:	4603      	mov	r3, r0
 8001802:	60b9      	str	r1, [r7, #8]
 8001804:	607a      	str	r2, [r7, #4]
 8001806:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001808:	2300      	movs	r3, #0
 800180a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800180c:	f7ff ff3e 	bl	800168c <__NVIC_GetPriorityGrouping>
 8001810:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	68b9      	ldr	r1, [r7, #8]
 8001816:	6978      	ldr	r0, [r7, #20]
 8001818:	f7ff ff8e 	bl	8001738 <NVIC_EncodePriority>
 800181c:	4602      	mov	r2, r0
 800181e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001822:	4611      	mov	r1, r2
 8001824:	4618      	mov	r0, r3
 8001826:	f7ff ff5d 	bl	80016e4 <__NVIC_SetPriority>
}
 800182a:	bf00      	nop
 800182c:	3718      	adds	r7, #24
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}

08001832 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001832:	b580      	push	{r7, lr}
 8001834:	b082      	sub	sp, #8
 8001836:	af00      	add	r7, sp, #0
 8001838:	4603      	mov	r3, r0
 800183a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800183c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff ff31 	bl	80016a8 <__NVIC_EnableIRQ>
}
 8001846:	bf00      	nop
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800184e:	b580      	push	{r7, lr}
 8001850:	b082      	sub	sp, #8
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f7ff ffa2 	bl	80017a0 <SysTick_Config>
 800185c:	4603      	mov	r3, r0
}
 800185e:	4618      	mov	r0, r3
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
	...

08001868 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d101      	bne.n	800187a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e098      	b.n	80019ac <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	461a      	mov	r2, r3
 8001880:	4b4d      	ldr	r3, [pc, #308]	; (80019b8 <HAL_DMA_Init+0x150>)
 8001882:	429a      	cmp	r2, r3
 8001884:	d80f      	bhi.n	80018a6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	461a      	mov	r2, r3
 800188c:	4b4b      	ldr	r3, [pc, #300]	; (80019bc <HAL_DMA_Init+0x154>)
 800188e:	4413      	add	r3, r2
 8001890:	4a4b      	ldr	r2, [pc, #300]	; (80019c0 <HAL_DMA_Init+0x158>)
 8001892:	fba2 2303 	umull	r2, r3, r2, r3
 8001896:	091b      	lsrs	r3, r3, #4
 8001898:	009a      	lsls	r2, r3, #2
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a48      	ldr	r2, [pc, #288]	; (80019c4 <HAL_DMA_Init+0x15c>)
 80018a2:	641a      	str	r2, [r3, #64]	; 0x40
 80018a4:	e00e      	b.n	80018c4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	461a      	mov	r2, r3
 80018ac:	4b46      	ldr	r3, [pc, #280]	; (80019c8 <HAL_DMA_Init+0x160>)
 80018ae:	4413      	add	r3, r2
 80018b0:	4a43      	ldr	r2, [pc, #268]	; (80019c0 <HAL_DMA_Init+0x158>)
 80018b2:	fba2 2303 	umull	r2, r3, r2, r3
 80018b6:	091b      	lsrs	r3, r3, #4
 80018b8:	009a      	lsls	r2, r3, #2
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4a42      	ldr	r2, [pc, #264]	; (80019cc <HAL_DMA_Init+0x164>)
 80018c2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2202      	movs	r2, #2
 80018c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80018da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018de:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80018e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	691b      	ldr	r3, [r3, #16]
 80018ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	699b      	ldr	r3, [r3, #24]
 80018fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001900:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6a1b      	ldr	r3, [r3, #32]
 8001906:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001908:	68fa      	ldr	r2, [r7, #12]
 800190a:	4313      	orrs	r3, r2
 800190c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	68fa      	ldr	r2, [r7, #12]
 8001914:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800191e:	d039      	beq.n	8001994 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001924:	4a27      	ldr	r2, [pc, #156]	; (80019c4 <HAL_DMA_Init+0x15c>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d11a      	bne.n	8001960 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800192a:	4b29      	ldr	r3, [pc, #164]	; (80019d0 <HAL_DMA_Init+0x168>)
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001932:	f003 031c 	and.w	r3, r3, #28
 8001936:	210f      	movs	r1, #15
 8001938:	fa01 f303 	lsl.w	r3, r1, r3
 800193c:	43db      	mvns	r3, r3
 800193e:	4924      	ldr	r1, [pc, #144]	; (80019d0 <HAL_DMA_Init+0x168>)
 8001940:	4013      	ands	r3, r2
 8001942:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001944:	4b22      	ldr	r3, [pc, #136]	; (80019d0 <HAL_DMA_Init+0x168>)
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6859      	ldr	r1, [r3, #4]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001950:	f003 031c 	and.w	r3, r3, #28
 8001954:	fa01 f303 	lsl.w	r3, r1, r3
 8001958:	491d      	ldr	r1, [pc, #116]	; (80019d0 <HAL_DMA_Init+0x168>)
 800195a:	4313      	orrs	r3, r2
 800195c:	600b      	str	r3, [r1, #0]
 800195e:	e019      	b.n	8001994 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001960:	4b1c      	ldr	r3, [pc, #112]	; (80019d4 <HAL_DMA_Init+0x16c>)
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001968:	f003 031c 	and.w	r3, r3, #28
 800196c:	210f      	movs	r1, #15
 800196e:	fa01 f303 	lsl.w	r3, r1, r3
 8001972:	43db      	mvns	r3, r3
 8001974:	4917      	ldr	r1, [pc, #92]	; (80019d4 <HAL_DMA_Init+0x16c>)
 8001976:	4013      	ands	r3, r2
 8001978:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800197a:	4b16      	ldr	r3, [pc, #88]	; (80019d4 <HAL_DMA_Init+0x16c>)
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6859      	ldr	r1, [r3, #4]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001986:	f003 031c 	and.w	r3, r3, #28
 800198a:	fa01 f303 	lsl.w	r3, r1, r3
 800198e:	4911      	ldr	r1, [pc, #68]	; (80019d4 <HAL_DMA_Init+0x16c>)
 8001990:	4313      	orrs	r3, r2
 8001992:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2200      	movs	r2, #0
 8001998:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2201      	movs	r2, #1
 800199e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2200      	movs	r2, #0
 80019a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80019aa:	2300      	movs	r3, #0
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3714      	adds	r7, #20
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	40020407 	.word	0x40020407
 80019bc:	bffdfff8 	.word	0xbffdfff8
 80019c0:	cccccccd 	.word	0xcccccccd
 80019c4:	40020000 	.word	0x40020000
 80019c8:	bffdfbf8 	.word	0xbffdfbf8
 80019cc:	40020400 	.word	0x40020400
 80019d0:	400200a8 	.word	0x400200a8
 80019d4:	400204a8 	.word	0x400204a8

080019d8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019e0:	2300      	movs	r3, #0
 80019e2:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d005      	beq.n	80019fc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2204      	movs	r2, #4
 80019f4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	73fb      	strb	r3, [r7, #15]
 80019fa:	e029      	b.n	8001a50 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f022 020e 	bic.w	r2, r2, #14
 8001a0a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f022 0201 	bic.w	r2, r2, #1
 8001a1a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a20:	f003 021c 	and.w	r2, r3, #28
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a28:	2101      	movs	r1, #1
 8001a2a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a2e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2201      	movs	r2, #1
 8001a34:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d003      	beq.n	8001a50 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	4798      	blx	r3
    }
  }
  return status;
 8001a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3710      	adds	r7, #16
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b084      	sub	sp, #16
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a76:	f003 031c 	and.w	r3, r3, #28
 8001a7a:	2204      	movs	r2, #4
 8001a7c:	409a      	lsls	r2, r3
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	4013      	ands	r3, r2
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d026      	beq.n	8001ad4 <HAL_DMA_IRQHandler+0x7a>
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	f003 0304 	and.w	r3, r3, #4
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d021      	beq.n	8001ad4 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0320 	and.w	r3, r3, #32
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d107      	bne.n	8001aae <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f022 0204 	bic.w	r2, r2, #4
 8001aac:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab2:	f003 021c 	and.w	r2, r3, #28
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aba:	2104      	movs	r1, #4
 8001abc:	fa01 f202 	lsl.w	r2, r1, r2
 8001ac0:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d071      	beq.n	8001bae <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001ad2:	e06c      	b.n	8001bae <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad8:	f003 031c 	and.w	r3, r3, #28
 8001adc:	2202      	movs	r2, #2
 8001ade:	409a      	lsls	r2, r3
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d02e      	beq.n	8001b46 <HAL_DMA_IRQHandler+0xec>
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d029      	beq.n	8001b46 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0320 	and.w	r3, r3, #32
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d10b      	bne.n	8001b18 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f022 020a 	bic.w	r2, r2, #10
 8001b0e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2201      	movs	r2, #1
 8001b14:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b1c:	f003 021c 	and.w	r2, r3, #28
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b24:	2102      	movs	r1, #2
 8001b26:	fa01 f202 	lsl.w	r2, r1, r2
 8001b2a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d038      	beq.n	8001bae <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001b44:	e033      	b.n	8001bae <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4a:	f003 031c 	and.w	r3, r3, #28
 8001b4e:	2208      	movs	r2, #8
 8001b50:	409a      	lsls	r2, r3
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	4013      	ands	r3, r2
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d02a      	beq.n	8001bb0 <HAL_DMA_IRQHandler+0x156>
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	f003 0308 	and.w	r3, r3, #8
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d025      	beq.n	8001bb0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f022 020e 	bic.w	r2, r2, #14
 8001b72:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b78:	f003 021c 	and.w	r2, r3, #28
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b80:	2101      	movs	r1, #1
 8001b82:	fa01 f202 	lsl.w	r2, r1, r2
 8001b86:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2201      	movs	r2, #1
 8001b92:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d004      	beq.n	8001bb0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001bae:	bf00      	nop
 8001bb0:	bf00      	nop
}
 8001bb2:	3710      	adds	r7, #16
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b087      	sub	sp, #28
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bc6:	e17f      	b.n	8001ec8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	2101      	movs	r1, #1
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	f000 8171 	beq.w	8001ec2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d00b      	beq.n	8001c00 <HAL_GPIO_Init+0x48>
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d007      	beq.n	8001c00 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bf4:	2b11      	cmp	r3, #17
 8001bf6:	d003      	beq.n	8001c00 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	2b12      	cmp	r3, #18
 8001bfe:	d130      	bne.n	8001c62 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	2203      	movs	r2, #3
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	43db      	mvns	r3, r3
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	4013      	ands	r3, r2
 8001c16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	68da      	ldr	r2, [r3, #12]
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	693a      	ldr	r2, [r7, #16]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	693a      	ldr	r2, [r7, #16]
 8001c2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c36:	2201      	movs	r2, #1
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3e:	43db      	mvns	r3, r3
 8001c40:	693a      	ldr	r2, [r7, #16]
 8001c42:	4013      	ands	r3, r2
 8001c44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	091b      	lsrs	r3, r3, #4
 8001c4c:	f003 0201 	and.w	r2, r3, #1
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	fa02 f303 	lsl.w	r3, r2, r3
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	693a      	ldr	r2, [r7, #16]
 8001c60:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f003 0303 	and.w	r3, r3, #3
 8001c6a:	2b03      	cmp	r3, #3
 8001c6c:	d118      	bne.n	8001ca0 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001c74:	2201      	movs	r2, #1
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	4013      	ands	r3, r2
 8001c82:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	08db      	lsrs	r3, r3, #3
 8001c8a:	f003 0201 	and.w	r2, r3, #1
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	693a      	ldr	r2, [r7, #16]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	693a      	ldr	r2, [r7, #16]
 8001c9e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	2203      	movs	r2, #3
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	693a      	ldr	r2, [r7, #16]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	689a      	ldr	r2, [r3, #8]
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	005b      	lsls	r3, r3, #1
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	693a      	ldr	r2, [r7, #16]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	693a      	ldr	r2, [r7, #16]
 8001cce:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d003      	beq.n	8001ce0 <HAL_GPIO_Init+0x128>
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	2b12      	cmp	r3, #18
 8001cde:	d123      	bne.n	8001d28 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	08da      	lsrs	r2, r3, #3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	3208      	adds	r2, #8
 8001ce8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cec:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	f003 0307 	and.w	r3, r3, #7
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	220f      	movs	r2, #15
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	4013      	ands	r3, r2
 8001d02:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	691a      	ldr	r2, [r3, #16]
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	f003 0307 	and.w	r3, r3, #7
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	693a      	ldr	r2, [r7, #16]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	08da      	lsrs	r2, r3, #3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	3208      	adds	r2, #8
 8001d22:	6939      	ldr	r1, [r7, #16]
 8001d24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	2203      	movs	r2, #3
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f003 0203 	and.w	r2, r3, #3
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	693a      	ldr	r2, [r7, #16]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	693a      	ldr	r2, [r7, #16]
 8001d5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	f000 80ac 	beq.w	8001ec2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d6a:	4b5e      	ldr	r3, [pc, #376]	; (8001ee4 <HAL_GPIO_Init+0x32c>)
 8001d6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d6e:	4a5d      	ldr	r2, [pc, #372]	; (8001ee4 <HAL_GPIO_Init+0x32c>)
 8001d70:	f043 0301 	orr.w	r3, r3, #1
 8001d74:	6613      	str	r3, [r2, #96]	; 0x60
 8001d76:	4b5b      	ldr	r3, [pc, #364]	; (8001ee4 <HAL_GPIO_Init+0x32c>)
 8001d78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d7a:	f003 0301 	and.w	r3, r3, #1
 8001d7e:	60bb      	str	r3, [r7, #8]
 8001d80:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d82:	4a59      	ldr	r2, [pc, #356]	; (8001ee8 <HAL_GPIO_Init+0x330>)
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	089b      	lsrs	r3, r3, #2
 8001d88:	3302      	adds	r3, #2
 8001d8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	f003 0303 	and.w	r3, r3, #3
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	220f      	movs	r2, #15
 8001d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9e:	43db      	mvns	r3, r3
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	4013      	ands	r3, r2
 8001da4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001dac:	d025      	beq.n	8001dfa <HAL_GPIO_Init+0x242>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a4e      	ldr	r2, [pc, #312]	; (8001eec <HAL_GPIO_Init+0x334>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d01f      	beq.n	8001df6 <HAL_GPIO_Init+0x23e>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a4d      	ldr	r2, [pc, #308]	; (8001ef0 <HAL_GPIO_Init+0x338>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d019      	beq.n	8001df2 <HAL_GPIO_Init+0x23a>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a4c      	ldr	r2, [pc, #304]	; (8001ef4 <HAL_GPIO_Init+0x33c>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d013      	beq.n	8001dee <HAL_GPIO_Init+0x236>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a4b      	ldr	r2, [pc, #300]	; (8001ef8 <HAL_GPIO_Init+0x340>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d00d      	beq.n	8001dea <HAL_GPIO_Init+0x232>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a4a      	ldr	r2, [pc, #296]	; (8001efc <HAL_GPIO_Init+0x344>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d007      	beq.n	8001de6 <HAL_GPIO_Init+0x22e>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a49      	ldr	r2, [pc, #292]	; (8001f00 <HAL_GPIO_Init+0x348>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d101      	bne.n	8001de2 <HAL_GPIO_Init+0x22a>
 8001dde:	2306      	movs	r3, #6
 8001de0:	e00c      	b.n	8001dfc <HAL_GPIO_Init+0x244>
 8001de2:	2307      	movs	r3, #7
 8001de4:	e00a      	b.n	8001dfc <HAL_GPIO_Init+0x244>
 8001de6:	2305      	movs	r3, #5
 8001de8:	e008      	b.n	8001dfc <HAL_GPIO_Init+0x244>
 8001dea:	2304      	movs	r3, #4
 8001dec:	e006      	b.n	8001dfc <HAL_GPIO_Init+0x244>
 8001dee:	2303      	movs	r3, #3
 8001df0:	e004      	b.n	8001dfc <HAL_GPIO_Init+0x244>
 8001df2:	2302      	movs	r3, #2
 8001df4:	e002      	b.n	8001dfc <HAL_GPIO_Init+0x244>
 8001df6:	2301      	movs	r3, #1
 8001df8:	e000      	b.n	8001dfc <HAL_GPIO_Init+0x244>
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	697a      	ldr	r2, [r7, #20]
 8001dfe:	f002 0203 	and.w	r2, r2, #3
 8001e02:	0092      	lsls	r2, r2, #2
 8001e04:	4093      	lsls	r3, r2
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e0c:	4936      	ldr	r1, [pc, #216]	; (8001ee8 <HAL_GPIO_Init+0x330>)
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	089b      	lsrs	r3, r3, #2
 8001e12:	3302      	adds	r3, #2
 8001e14:	693a      	ldr	r2, [r7, #16]
 8001e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001e1a:	4b3a      	ldr	r3, [pc, #232]	; (8001f04 <HAL_GPIO_Init+0x34c>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	43db      	mvns	r3, r3
 8001e24:	693a      	ldr	r2, [r7, #16]
 8001e26:	4013      	ands	r3, r2
 8001e28:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d003      	beq.n	8001e3e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001e36:	693a      	ldr	r2, [r7, #16]
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e3e:	4a31      	ldr	r2, [pc, #196]	; (8001f04 <HAL_GPIO_Init+0x34c>)
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001e44:	4b2f      	ldr	r3, [pc, #188]	; (8001f04 <HAL_GPIO_Init+0x34c>)
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	43db      	mvns	r3, r3
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	4013      	ands	r3, r2
 8001e52:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d003      	beq.n	8001e68 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001e60:	693a      	ldr	r2, [r7, #16]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e68:	4a26      	ldr	r2, [pc, #152]	; (8001f04 <HAL_GPIO_Init+0x34c>)
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e6e:	4b25      	ldr	r3, [pc, #148]	; (8001f04 <HAL_GPIO_Init+0x34c>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	43db      	mvns	r3, r3
 8001e78:	693a      	ldr	r2, [r7, #16]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d003      	beq.n	8001e92 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001e8a:	693a      	ldr	r2, [r7, #16]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e92:	4a1c      	ldr	r2, [pc, #112]	; (8001f04 <HAL_GPIO_Init+0x34c>)
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e98:	4b1a      	ldr	r3, [pc, #104]	; (8001f04 <HAL_GPIO_Init+0x34c>)
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	693a      	ldr	r2, [r7, #16]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d003      	beq.n	8001ebc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001eb4:	693a      	ldr	r2, [r7, #16]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ebc:	4a11      	ldr	r2, [pc, #68]	; (8001f04 <HAL_GPIO_Init+0x34c>)
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	fa22 f303 	lsr.w	r3, r2, r3
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	f47f ae78 	bne.w	8001bc8 <HAL_GPIO_Init+0x10>
  }
}
 8001ed8:	bf00      	nop
 8001eda:	371c      	adds	r7, #28
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	40010000 	.word	0x40010000
 8001eec:	48000400 	.word	0x48000400
 8001ef0:	48000800 	.word	0x48000800
 8001ef4:	48000c00 	.word	0x48000c00
 8001ef8:	48001000 	.word	0x48001000
 8001efc:	48001400 	.word	0x48001400
 8001f00:	48001800 	.word	0x48001800
 8001f04:	40010400 	.word	0x40010400

08001f08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	460b      	mov	r3, r1
 8001f12:	807b      	strh	r3, [r7, #2]
 8001f14:	4613      	mov	r3, r2
 8001f16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f18:	787b      	ldrb	r3, [r7, #1]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d003      	beq.n	8001f26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f1e:	887a      	ldrh	r2, [r7, #2]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f24:	e002      	b.n	8001f2c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f26:	887a      	ldrh	r2, [r7, #2]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f2c:	bf00      	nop
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b085      	sub	sp, #20
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	460b      	mov	r3, r1
 8001f42:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	695b      	ldr	r3, [r3, #20]
 8001f48:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f4a:	887a      	ldrh	r2, [r7, #2]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	041a      	lsls	r2, r3, #16
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	43d9      	mvns	r1, r3
 8001f56:	887b      	ldrh	r3, [r7, #2]
 8001f58:	400b      	ands	r3, r1
 8001f5a:	431a      	orrs	r2, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	619a      	str	r2, [r3, #24]
}
 8001f60:	bf00      	nop
 8001f62:	3714      	adds	r7, #20
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f6e:	b08f      	sub	sp, #60	; 0x3c
 8001f70:	af0a      	add	r7, sp, #40	; 0x28
 8001f72:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d101      	bne.n	8001f7e <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e054      	b.n	8002028 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d106      	bne.n	8001f9e <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f007 fdef 	bl	8009b7c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2203      	movs	r2, #3
 8001fa2:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d102      	bne.n	8001fb8 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f005 f887 	bl	80070d0 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	603b      	str	r3, [r7, #0]
 8001fc8:	687e      	ldr	r6, [r7, #4]
 8001fca:	466d      	mov	r5, sp
 8001fcc:	f106 0410 	add.w	r4, r6, #16
 8001fd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fd8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001fdc:	e885 0003 	stmia.w	r5, {r0, r1}
 8001fe0:	1d33      	adds	r3, r6, #4
 8001fe2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fe4:	6838      	ldr	r0, [r7, #0]
 8001fe6:	f005 f810 	bl	800700a <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	2101      	movs	r1, #1
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f005 f87e 	bl	80070f2 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	603b      	str	r3, [r7, #0]
 8001ffc:	687e      	ldr	r6, [r7, #4]
 8001ffe:	466d      	mov	r5, sp
 8002000:	f106 0410 	add.w	r4, r6, #16
 8002004:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002006:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002008:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800200a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800200c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002010:	e885 0003 	stmia.w	r5, {r0, r1}
 8002014:	1d33      	adds	r3, r6, #4
 8002016:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002018:	6838      	ldr	r0, [r7, #0]
 800201a:	f005 f98d 	bl	8007338 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2201      	movs	r2, #1
 8002022:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8002026:	2300      	movs	r3, #0
}
 8002028:	4618      	mov	r0, r3
 800202a:	3714      	adds	r7, #20
 800202c:	46bd      	mov	sp, r7
 800202e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002030 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002030:	b590      	push	{r4, r7, lr}
 8002032:	b089      	sub	sp, #36	; 0x24
 8002034:	af04      	add	r7, sp, #16
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	4608      	mov	r0, r1
 800203a:	4611      	mov	r1, r2
 800203c:	461a      	mov	r2, r3
 800203e:	4603      	mov	r3, r0
 8002040:	70fb      	strb	r3, [r7, #3]
 8002042:	460b      	mov	r3, r1
 8002044:	70bb      	strb	r3, [r7, #2]
 8002046:	4613      	mov	r3, r2
 8002048:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002050:	2b01      	cmp	r3, #1
 8002052:	d101      	bne.n	8002058 <HAL_HCD_HC_Init+0x28>
 8002054:	2302      	movs	r3, #2
 8002056:	e07f      	b.n	8002158 <HAL_HCD_HC_Init+0x128>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2201      	movs	r2, #1
 800205c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8002060:	78fa      	ldrb	r2, [r7, #3]
 8002062:	6879      	ldr	r1, [r7, #4]
 8002064:	4613      	mov	r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	4413      	add	r3, r2
 800206a:	00db      	lsls	r3, r3, #3
 800206c:	440b      	add	r3, r1
 800206e:	333d      	adds	r3, #61	; 0x3d
 8002070:	2200      	movs	r2, #0
 8002072:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002074:	78fa      	ldrb	r2, [r7, #3]
 8002076:	6879      	ldr	r1, [r7, #4]
 8002078:	4613      	mov	r3, r2
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	4413      	add	r3, r2
 800207e:	00db      	lsls	r3, r3, #3
 8002080:	440b      	add	r3, r1
 8002082:	3338      	adds	r3, #56	; 0x38
 8002084:	787a      	ldrb	r2, [r7, #1]
 8002086:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002088:	78fa      	ldrb	r2, [r7, #3]
 800208a:	6879      	ldr	r1, [r7, #4]
 800208c:	4613      	mov	r3, r2
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	4413      	add	r3, r2
 8002092:	00db      	lsls	r3, r3, #3
 8002094:	440b      	add	r3, r1
 8002096:	3340      	adds	r3, #64	; 0x40
 8002098:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800209a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800209c:	78fa      	ldrb	r2, [r7, #3]
 800209e:	6879      	ldr	r1, [r7, #4]
 80020a0:	4613      	mov	r3, r2
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	4413      	add	r3, r2
 80020a6:	00db      	lsls	r3, r3, #3
 80020a8:	440b      	add	r3, r1
 80020aa:	3339      	adds	r3, #57	; 0x39
 80020ac:	78fa      	ldrb	r2, [r7, #3]
 80020ae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80020b0:	78fa      	ldrb	r2, [r7, #3]
 80020b2:	6879      	ldr	r1, [r7, #4]
 80020b4:	4613      	mov	r3, r2
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	4413      	add	r3, r2
 80020ba:	00db      	lsls	r3, r3, #3
 80020bc:	440b      	add	r3, r1
 80020be:	333f      	adds	r3, #63	; 0x3f
 80020c0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80020c4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80020c6:	78fa      	ldrb	r2, [r7, #3]
 80020c8:	78bb      	ldrb	r3, [r7, #2]
 80020ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80020ce:	b2d8      	uxtb	r0, r3
 80020d0:	6879      	ldr	r1, [r7, #4]
 80020d2:	4613      	mov	r3, r2
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	4413      	add	r3, r2
 80020d8:	00db      	lsls	r3, r3, #3
 80020da:	440b      	add	r3, r1
 80020dc:	333a      	adds	r3, #58	; 0x3a
 80020de:	4602      	mov	r2, r0
 80020e0:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80020e2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	da0a      	bge.n	8002100 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80020ea:	78fa      	ldrb	r2, [r7, #3]
 80020ec:	6879      	ldr	r1, [r7, #4]
 80020ee:	4613      	mov	r3, r2
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	4413      	add	r3, r2
 80020f4:	00db      	lsls	r3, r3, #3
 80020f6:	440b      	add	r3, r1
 80020f8:	333b      	adds	r3, #59	; 0x3b
 80020fa:	2201      	movs	r2, #1
 80020fc:	701a      	strb	r2, [r3, #0]
 80020fe:	e009      	b.n	8002114 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002100:	78fa      	ldrb	r2, [r7, #3]
 8002102:	6879      	ldr	r1, [r7, #4]
 8002104:	4613      	mov	r3, r2
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	4413      	add	r3, r2
 800210a:	00db      	lsls	r3, r3, #3
 800210c:	440b      	add	r3, r1
 800210e:	333b      	adds	r3, #59	; 0x3b
 8002110:	2200      	movs	r2, #0
 8002112:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002114:	78fa      	ldrb	r2, [r7, #3]
 8002116:	6879      	ldr	r1, [r7, #4]
 8002118:	4613      	mov	r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	4413      	add	r3, r2
 800211e:	00db      	lsls	r3, r3, #3
 8002120:	440b      	add	r3, r1
 8002122:	333c      	adds	r3, #60	; 0x3c
 8002124:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002128:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6818      	ldr	r0, [r3, #0]
 800212e:	787c      	ldrb	r4, [r7, #1]
 8002130:	78ba      	ldrb	r2, [r7, #2]
 8002132:	78f9      	ldrb	r1, [r7, #3]
 8002134:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002136:	9302      	str	r3, [sp, #8]
 8002138:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800213c:	9301      	str	r3, [sp, #4]
 800213e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002142:	9300      	str	r3, [sp, #0]
 8002144:	4623      	mov	r3, r4
 8002146:	f005 fa3b 	bl	80075c0 <USB_HC_Init>
 800214a:	4603      	mov	r3, r0
 800214c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8002156:	7bfb      	ldrb	r3, [r7, #15]
}
 8002158:	4618      	mov	r0, r3
 800215a:	3714      	adds	r7, #20
 800215c:	46bd      	mov	sp, r7
 800215e:	bd90      	pop	{r4, r7, pc}

08002160 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	460b      	mov	r3, r1
 800216a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800216c:	2300      	movs	r3, #0
 800216e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002176:	2b01      	cmp	r3, #1
 8002178:	d101      	bne.n	800217e <HAL_HCD_HC_Halt+0x1e>
 800217a:	2302      	movs	r3, #2
 800217c:	e00f      	b.n	800219e <HAL_HCD_HC_Halt+0x3e>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2201      	movs	r2, #1
 8002182:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	78fa      	ldrb	r2, [r7, #3]
 800218c:	4611      	mov	r1, r2
 800218e:	4618      	mov	r0, r3
 8002190:	f005 fc19 	bl	80079c6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800219c:	7bfb      	ldrb	r3, [r7, #15]
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3710      	adds	r7, #16
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
	...

080021a8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	4608      	mov	r0, r1
 80021b2:	4611      	mov	r1, r2
 80021b4:	461a      	mov	r2, r3
 80021b6:	4603      	mov	r3, r0
 80021b8:	70fb      	strb	r3, [r7, #3]
 80021ba:	460b      	mov	r3, r1
 80021bc:	70bb      	strb	r3, [r7, #2]
 80021be:	4613      	mov	r3, r2
 80021c0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80021c2:	78fa      	ldrb	r2, [r7, #3]
 80021c4:	6879      	ldr	r1, [r7, #4]
 80021c6:	4613      	mov	r3, r2
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	4413      	add	r3, r2
 80021cc:	00db      	lsls	r3, r3, #3
 80021ce:	440b      	add	r3, r1
 80021d0:	333b      	adds	r3, #59	; 0x3b
 80021d2:	78ba      	ldrb	r2, [r7, #2]
 80021d4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80021d6:	78fa      	ldrb	r2, [r7, #3]
 80021d8:	6879      	ldr	r1, [r7, #4]
 80021da:	4613      	mov	r3, r2
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	4413      	add	r3, r2
 80021e0:	00db      	lsls	r3, r3, #3
 80021e2:	440b      	add	r3, r1
 80021e4:	333f      	adds	r3, #63	; 0x3f
 80021e6:	787a      	ldrb	r2, [r7, #1]
 80021e8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80021ea:	7c3b      	ldrb	r3, [r7, #16]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d114      	bne.n	800221a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80021f0:	78fa      	ldrb	r2, [r7, #3]
 80021f2:	6879      	ldr	r1, [r7, #4]
 80021f4:	4613      	mov	r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	4413      	add	r3, r2
 80021fa:	00db      	lsls	r3, r3, #3
 80021fc:	440b      	add	r3, r1
 80021fe:	3342      	adds	r3, #66	; 0x42
 8002200:	2203      	movs	r2, #3
 8002202:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002204:	78fa      	ldrb	r2, [r7, #3]
 8002206:	6879      	ldr	r1, [r7, #4]
 8002208:	4613      	mov	r3, r2
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	4413      	add	r3, r2
 800220e:	00db      	lsls	r3, r3, #3
 8002210:	440b      	add	r3, r1
 8002212:	333d      	adds	r3, #61	; 0x3d
 8002214:	7f3a      	ldrb	r2, [r7, #28]
 8002216:	701a      	strb	r2, [r3, #0]
 8002218:	e009      	b.n	800222e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800221a:	78fa      	ldrb	r2, [r7, #3]
 800221c:	6879      	ldr	r1, [r7, #4]
 800221e:	4613      	mov	r3, r2
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	4413      	add	r3, r2
 8002224:	00db      	lsls	r3, r3, #3
 8002226:	440b      	add	r3, r1
 8002228:	3342      	adds	r3, #66	; 0x42
 800222a:	2202      	movs	r2, #2
 800222c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800222e:	787b      	ldrb	r3, [r7, #1]
 8002230:	2b03      	cmp	r3, #3
 8002232:	f200 80d6 	bhi.w	80023e2 <HAL_HCD_HC_SubmitRequest+0x23a>
 8002236:	a201      	add	r2, pc, #4	; (adr r2, 800223c <HAL_HCD_HC_SubmitRequest+0x94>)
 8002238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800223c:	0800224d 	.word	0x0800224d
 8002240:	080023cd 	.word	0x080023cd
 8002244:	080022b9 	.word	0x080022b9
 8002248:	08002343 	.word	0x08002343
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800224c:	7c3b      	ldrb	r3, [r7, #16]
 800224e:	2b01      	cmp	r3, #1
 8002250:	f040 80c9 	bne.w	80023e6 <HAL_HCD_HC_SubmitRequest+0x23e>
 8002254:	78bb      	ldrb	r3, [r7, #2]
 8002256:	2b00      	cmp	r3, #0
 8002258:	f040 80c5 	bne.w	80023e6 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 800225c:	8b3b      	ldrh	r3, [r7, #24]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d109      	bne.n	8002276 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002262:	78fa      	ldrb	r2, [r7, #3]
 8002264:	6879      	ldr	r1, [r7, #4]
 8002266:	4613      	mov	r3, r2
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	4413      	add	r3, r2
 800226c:	00db      	lsls	r3, r3, #3
 800226e:	440b      	add	r3, r1
 8002270:	3351      	adds	r3, #81	; 0x51
 8002272:	2201      	movs	r2, #1
 8002274:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002276:	78fa      	ldrb	r2, [r7, #3]
 8002278:	6879      	ldr	r1, [r7, #4]
 800227a:	4613      	mov	r3, r2
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	4413      	add	r3, r2
 8002280:	00db      	lsls	r3, r3, #3
 8002282:	440b      	add	r3, r1
 8002284:	3351      	adds	r3, #81	; 0x51
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d10a      	bne.n	80022a2 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800228c:	78fa      	ldrb	r2, [r7, #3]
 800228e:	6879      	ldr	r1, [r7, #4]
 8002290:	4613      	mov	r3, r2
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	4413      	add	r3, r2
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	440b      	add	r3, r1
 800229a:	3342      	adds	r3, #66	; 0x42
 800229c:	2200      	movs	r2, #0
 800229e:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80022a0:	e0a1      	b.n	80023e6 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80022a2:	78fa      	ldrb	r2, [r7, #3]
 80022a4:	6879      	ldr	r1, [r7, #4]
 80022a6:	4613      	mov	r3, r2
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	4413      	add	r3, r2
 80022ac:	00db      	lsls	r3, r3, #3
 80022ae:	440b      	add	r3, r1
 80022b0:	3342      	adds	r3, #66	; 0x42
 80022b2:	2202      	movs	r2, #2
 80022b4:	701a      	strb	r2, [r3, #0]
      break;
 80022b6:	e096      	b.n	80023e6 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80022b8:	78bb      	ldrb	r3, [r7, #2]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d120      	bne.n	8002300 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80022be:	78fa      	ldrb	r2, [r7, #3]
 80022c0:	6879      	ldr	r1, [r7, #4]
 80022c2:	4613      	mov	r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	4413      	add	r3, r2
 80022c8:	00db      	lsls	r3, r3, #3
 80022ca:	440b      	add	r3, r1
 80022cc:	3351      	adds	r3, #81	; 0x51
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d10a      	bne.n	80022ea <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80022d4:	78fa      	ldrb	r2, [r7, #3]
 80022d6:	6879      	ldr	r1, [r7, #4]
 80022d8:	4613      	mov	r3, r2
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	4413      	add	r3, r2
 80022de:	00db      	lsls	r3, r3, #3
 80022e0:	440b      	add	r3, r1
 80022e2:	3342      	adds	r3, #66	; 0x42
 80022e4:	2200      	movs	r2, #0
 80022e6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80022e8:	e07e      	b.n	80023e8 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80022ea:	78fa      	ldrb	r2, [r7, #3]
 80022ec:	6879      	ldr	r1, [r7, #4]
 80022ee:	4613      	mov	r3, r2
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	4413      	add	r3, r2
 80022f4:	00db      	lsls	r3, r3, #3
 80022f6:	440b      	add	r3, r1
 80022f8:	3342      	adds	r3, #66	; 0x42
 80022fa:	2202      	movs	r2, #2
 80022fc:	701a      	strb	r2, [r3, #0]
      break;
 80022fe:	e073      	b.n	80023e8 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002300:	78fa      	ldrb	r2, [r7, #3]
 8002302:	6879      	ldr	r1, [r7, #4]
 8002304:	4613      	mov	r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	4413      	add	r3, r2
 800230a:	00db      	lsls	r3, r3, #3
 800230c:	440b      	add	r3, r1
 800230e:	3350      	adds	r3, #80	; 0x50
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d10a      	bne.n	800232c <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002316:	78fa      	ldrb	r2, [r7, #3]
 8002318:	6879      	ldr	r1, [r7, #4]
 800231a:	4613      	mov	r3, r2
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	4413      	add	r3, r2
 8002320:	00db      	lsls	r3, r3, #3
 8002322:	440b      	add	r3, r1
 8002324:	3342      	adds	r3, #66	; 0x42
 8002326:	2200      	movs	r2, #0
 8002328:	701a      	strb	r2, [r3, #0]
      break;
 800232a:	e05d      	b.n	80023e8 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800232c:	78fa      	ldrb	r2, [r7, #3]
 800232e:	6879      	ldr	r1, [r7, #4]
 8002330:	4613      	mov	r3, r2
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	4413      	add	r3, r2
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	440b      	add	r3, r1
 800233a:	3342      	adds	r3, #66	; 0x42
 800233c:	2202      	movs	r2, #2
 800233e:	701a      	strb	r2, [r3, #0]
      break;
 8002340:	e052      	b.n	80023e8 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002342:	78bb      	ldrb	r3, [r7, #2]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d120      	bne.n	800238a <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002348:	78fa      	ldrb	r2, [r7, #3]
 800234a:	6879      	ldr	r1, [r7, #4]
 800234c:	4613      	mov	r3, r2
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	4413      	add	r3, r2
 8002352:	00db      	lsls	r3, r3, #3
 8002354:	440b      	add	r3, r1
 8002356:	3351      	adds	r3, #81	; 0x51
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d10a      	bne.n	8002374 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800235e:	78fa      	ldrb	r2, [r7, #3]
 8002360:	6879      	ldr	r1, [r7, #4]
 8002362:	4613      	mov	r3, r2
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	4413      	add	r3, r2
 8002368:	00db      	lsls	r3, r3, #3
 800236a:	440b      	add	r3, r1
 800236c:	3342      	adds	r3, #66	; 0x42
 800236e:	2200      	movs	r2, #0
 8002370:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002372:	e039      	b.n	80023e8 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002374:	78fa      	ldrb	r2, [r7, #3]
 8002376:	6879      	ldr	r1, [r7, #4]
 8002378:	4613      	mov	r3, r2
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	4413      	add	r3, r2
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	440b      	add	r3, r1
 8002382:	3342      	adds	r3, #66	; 0x42
 8002384:	2202      	movs	r2, #2
 8002386:	701a      	strb	r2, [r3, #0]
      break;
 8002388:	e02e      	b.n	80023e8 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800238a:	78fa      	ldrb	r2, [r7, #3]
 800238c:	6879      	ldr	r1, [r7, #4]
 800238e:	4613      	mov	r3, r2
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	4413      	add	r3, r2
 8002394:	00db      	lsls	r3, r3, #3
 8002396:	440b      	add	r3, r1
 8002398:	3350      	adds	r3, #80	; 0x50
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d10a      	bne.n	80023b6 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80023a0:	78fa      	ldrb	r2, [r7, #3]
 80023a2:	6879      	ldr	r1, [r7, #4]
 80023a4:	4613      	mov	r3, r2
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	4413      	add	r3, r2
 80023aa:	00db      	lsls	r3, r3, #3
 80023ac:	440b      	add	r3, r1
 80023ae:	3342      	adds	r3, #66	; 0x42
 80023b0:	2200      	movs	r2, #0
 80023b2:	701a      	strb	r2, [r3, #0]
      break;
 80023b4:	e018      	b.n	80023e8 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023b6:	78fa      	ldrb	r2, [r7, #3]
 80023b8:	6879      	ldr	r1, [r7, #4]
 80023ba:	4613      	mov	r3, r2
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	4413      	add	r3, r2
 80023c0:	00db      	lsls	r3, r3, #3
 80023c2:	440b      	add	r3, r1
 80023c4:	3342      	adds	r3, #66	; 0x42
 80023c6:	2202      	movs	r2, #2
 80023c8:	701a      	strb	r2, [r3, #0]
      break;
 80023ca:	e00d      	b.n	80023e8 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80023cc:	78fa      	ldrb	r2, [r7, #3]
 80023ce:	6879      	ldr	r1, [r7, #4]
 80023d0:	4613      	mov	r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	4413      	add	r3, r2
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	440b      	add	r3, r1
 80023da:	3342      	adds	r3, #66	; 0x42
 80023dc:	2200      	movs	r2, #0
 80023de:	701a      	strb	r2, [r3, #0]
      break;
 80023e0:	e002      	b.n	80023e8 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 80023e2:	bf00      	nop
 80023e4:	e000      	b.n	80023e8 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 80023e6:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80023e8:	78fa      	ldrb	r2, [r7, #3]
 80023ea:	6879      	ldr	r1, [r7, #4]
 80023ec:	4613      	mov	r3, r2
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	4413      	add	r3, r2
 80023f2:	00db      	lsls	r3, r3, #3
 80023f4:	440b      	add	r3, r1
 80023f6:	3344      	adds	r3, #68	; 0x44
 80023f8:	697a      	ldr	r2, [r7, #20]
 80023fa:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80023fc:	78fa      	ldrb	r2, [r7, #3]
 80023fe:	8b39      	ldrh	r1, [r7, #24]
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	4613      	mov	r3, r2
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	4413      	add	r3, r2
 8002408:	00db      	lsls	r3, r3, #3
 800240a:	4403      	add	r3, r0
 800240c:	3348      	adds	r3, #72	; 0x48
 800240e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002410:	78fa      	ldrb	r2, [r7, #3]
 8002412:	6879      	ldr	r1, [r7, #4]
 8002414:	4613      	mov	r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	4413      	add	r3, r2
 800241a:	00db      	lsls	r3, r3, #3
 800241c:	440b      	add	r3, r1
 800241e:	335c      	adds	r3, #92	; 0x5c
 8002420:	2200      	movs	r2, #0
 8002422:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002424:	78fa      	ldrb	r2, [r7, #3]
 8002426:	6879      	ldr	r1, [r7, #4]
 8002428:	4613      	mov	r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	4413      	add	r3, r2
 800242e:	00db      	lsls	r3, r3, #3
 8002430:	440b      	add	r3, r1
 8002432:	334c      	adds	r3, #76	; 0x4c
 8002434:	2200      	movs	r2, #0
 8002436:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002438:	78fa      	ldrb	r2, [r7, #3]
 800243a:	6879      	ldr	r1, [r7, #4]
 800243c:	4613      	mov	r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	4413      	add	r3, r2
 8002442:	00db      	lsls	r3, r3, #3
 8002444:	440b      	add	r3, r1
 8002446:	3339      	adds	r3, #57	; 0x39
 8002448:	78fa      	ldrb	r2, [r7, #3]
 800244a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800244c:	78fa      	ldrb	r2, [r7, #3]
 800244e:	6879      	ldr	r1, [r7, #4]
 8002450:	4613      	mov	r3, r2
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	4413      	add	r3, r2
 8002456:	00db      	lsls	r3, r3, #3
 8002458:	440b      	add	r3, r1
 800245a:	335d      	adds	r3, #93	; 0x5d
 800245c:	2200      	movs	r2, #0
 800245e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num]);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6818      	ldr	r0, [r3, #0]
 8002464:	78fa      	ldrb	r2, [r7, #3]
 8002466:	4613      	mov	r3, r2
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	4413      	add	r3, r2
 800246c:	00db      	lsls	r3, r3, #3
 800246e:	3338      	adds	r3, #56	; 0x38
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	4413      	add	r3, r2
 8002474:	4619      	mov	r1, r3
 8002476:	f005 f995 	bl	80077a4 <USB_HC_StartXfer>
 800247a:	4603      	mov	r3, r0
}
 800247c:	4618      	mov	r0, r3
 800247e:	3708      	adds	r7, #8
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b086      	sub	sp, #24
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4618      	mov	r0, r3
 800249c:	f004 ff09 	bl	80072b2 <USB_GetMode>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	f040 80ef 	bne.w	8002686 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4618      	mov	r0, r3
 80024ae:	f004 feed 	bl	800728c <USB_ReadInterrupts>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	f000 80e5 	beq.w	8002684 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4618      	mov	r0, r3
 80024c0:	f004 fee4 	bl	800728c <USB_ReadInterrupts>
 80024c4:	4603      	mov	r3, r0
 80024c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80024ce:	d104      	bne.n	80024da <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80024d8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4618      	mov	r0, r3
 80024e0:	f004 fed4 	bl	800728c <USB_ReadInterrupts>
 80024e4:	4603      	mov	r3, r0
 80024e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024ee:	d104      	bne.n	80024fa <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80024f8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4618      	mov	r0, r3
 8002500:	f004 fec4 	bl	800728c <USB_ReadInterrupts>
 8002504:	4603      	mov	r3, r0
 8002506:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800250a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800250e:	d104      	bne.n	800251a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002518:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4618      	mov	r0, r3
 8002520:	f004 feb4 	bl	800728c <USB_ReadInterrupts>
 8002524:	4603      	mov	r3, r0
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	2b02      	cmp	r3, #2
 800252c:	d103      	bne.n	8002536 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2202      	movs	r2, #2
 8002534:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4618      	mov	r0, r3
 800253c:	f004 fea6 	bl	800728c <USB_ReadInterrupts>
 8002540:	4603      	mov	r3, r0
 8002542:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002546:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800254a:	d115      	bne.n	8002578 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002554:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	2b00      	cmp	r3, #0
 8002564:	d108      	bne.n	8002578 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f007 fb8a 	bl	8009c80 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2101      	movs	r1, #1
 8002572:	4618      	mov	r0, r3
 8002574:	f004 ff5e 	bl	8007434 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4618      	mov	r0, r3
 800257e:	f004 fe85 	bl	800728c <USB_ReadInterrupts>
 8002582:	4603      	mov	r3, r0
 8002584:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002588:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800258c:	d102      	bne.n	8002594 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f001 f922 	bl	80037d8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4618      	mov	r0, r3
 800259a:	f004 fe77 	bl	800728c <USB_ReadInterrupts>
 800259e:	4603      	mov	r3, r0
 80025a0:	f003 0308 	and.w	r3, r3, #8
 80025a4:	2b08      	cmp	r3, #8
 80025a6:	d106      	bne.n	80025b6 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f007 fb4d 	bl	8009c48 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2208      	movs	r2, #8
 80025b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f004 fe66 	bl	800728c <USB_ReadInterrupts>
 80025c0:	4603      	mov	r3, r0
 80025c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80025ca:	d138      	bne.n	800263e <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4618      	mov	r0, r3
 80025d2:	f005 f9e7 	bl	80079a4 <USB_HC_ReadInterrupt>
 80025d6:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80025d8:	2300      	movs	r3, #0
 80025da:	617b      	str	r3, [r7, #20]
 80025dc:	e025      	b.n	800262a <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	f003 030f 	and.w	r3, r3, #15
 80025e4:	68ba      	ldr	r2, [r7, #8]
 80025e6:	fa22 f303 	lsr.w	r3, r2, r3
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d018      	beq.n	8002624 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	015a      	lsls	r2, r3, #5
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	4413      	add	r3, r2
 80025fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002604:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002608:	d106      	bne.n	8002618 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	b2db      	uxtb	r3, r3
 800260e:	4619      	mov	r1, r3
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f000 f8cf 	bl	80027b4 <HCD_HC_IN_IRQHandler>
 8002616:	e005      	b.n	8002624 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	b2db      	uxtb	r3, r3
 800261c:	4619      	mov	r1, r3
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f000 fcd9 	bl	8002fd6 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	3301      	adds	r3, #1
 8002628:	617b      	str	r3, [r7, #20]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	697a      	ldr	r2, [r7, #20]
 8002630:	429a      	cmp	r2, r3
 8002632:	d3d4      	bcc.n	80025de <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800263c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4618      	mov	r0, r3
 8002644:	f004 fe22 	bl	800728c <USB_ReadInterrupts>
 8002648:	4603      	mov	r3, r0
 800264a:	f003 0310 	and.w	r3, r3, #16
 800264e:	2b10      	cmp	r3, #16
 8002650:	d101      	bne.n	8002656 <HAL_HCD_IRQHandler+0x1d2>
 8002652:	2301      	movs	r3, #1
 8002654:	e000      	b.n	8002658 <HAL_HCD_IRQHandler+0x1d4>
 8002656:	2300      	movs	r3, #0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d014      	beq.n	8002686 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	699a      	ldr	r2, [r3, #24]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f022 0210 	bic.w	r2, r2, #16
 800266a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f001 f807 	bl	8003680 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	699a      	ldr	r2, [r3, #24]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f042 0210 	orr.w	r2, r2, #16
 8002680:	619a      	str	r2, [r3, #24]
 8002682:	e000      	b.n	8002686 <HAL_HCD_IRQHandler+0x202>
      return;
 8002684:	bf00      	nop
    }
  }
}
 8002686:	3718      	adds	r7, #24
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}

0800268c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800269a:	2b01      	cmp	r3, #1
 800269c:	d101      	bne.n	80026a2 <HAL_HCD_Start+0x16>
 800269e:	2302      	movs	r3, #2
 80026a0:	e013      	b.n	80026ca <HAL_HCD_Start+0x3e>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2201      	movs	r2, #1
 80026a6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f004 fcfd 	bl	80070ae <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2101      	movs	r1, #1
 80026ba:	4618      	mov	r0, r3
 80026bc:	f004 ff1e 	bl	80074fc <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3708      	adds	r7, #8
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80026d2:	b580      	push	{r7, lr}
 80026d4:	b082      	sub	sp, #8
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d101      	bne.n	80026e8 <HAL_HCD_Stop+0x16>
 80026e4:	2302      	movs	r3, #2
 80026e6:	e00d      	b.n	8002704 <HAL_HCD_Stop+0x32>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2201      	movs	r2, #1
 80026ec:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4618      	mov	r0, r3
 80026f6:	f005 fa65 	bl	8007bc4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	3708      	adds	r7, #8
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4618      	mov	r0, r3
 800271a:	f004 fec5 	bl	80074a8 <USB_ResetPort>
 800271e:	4603      	mov	r3, r0
}
 8002720:	4618      	mov	r0, r3
 8002722:	3708      	adds	r7, #8
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	460b      	mov	r3, r1
 8002732:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002734:	78fa      	ldrb	r2, [r7, #3]
 8002736:	6879      	ldr	r1, [r7, #4]
 8002738:	4613      	mov	r3, r2
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	4413      	add	r3, r2
 800273e:	00db      	lsls	r3, r3, #3
 8002740:	440b      	add	r3, r1
 8002742:	335c      	adds	r3, #92	; 0x5c
 8002744:	781b      	ldrb	r3, [r3, #0]
}
 8002746:	4618      	mov	r0, r3
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr

08002752 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002752:	b480      	push	{r7}
 8002754:	b083      	sub	sp, #12
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
 800275a:	460b      	mov	r3, r1
 800275c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800275e:	78fa      	ldrb	r2, [r7, #3]
 8002760:	6879      	ldr	r1, [r7, #4]
 8002762:	4613      	mov	r3, r2
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	4413      	add	r3, r2
 8002768:	00db      	lsls	r3, r3, #3
 800276a:	440b      	add	r3, r1
 800276c:	334c      	adds	r3, #76	; 0x4c
 800276e:	681b      	ldr	r3, [r3, #0]
}
 8002770:	4618      	mov	r0, r3
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr

0800277c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4618      	mov	r0, r3
 800278a:	f004 ff07 	bl	800759c <USB_GetCurrentFrame>
 800278e:	4603      	mov	r3, r0
}
 8002790:	4618      	mov	r0, r3
 8002792:	3708      	adds	r7, #8
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4618      	mov	r0, r3
 80027a6:	f004 fee2 	bl	800756e <USB_GetHostSpeed>
 80027aa:	4603      	mov	r3, r0
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3708      	adds	r7, #8
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b086      	sub	sp, #24
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	460b      	mov	r3, r1
 80027be:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80027ca:	78fb      	ldrb	r3, [r7, #3]
 80027cc:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	015a      	lsls	r2, r3, #5
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	4413      	add	r3, r2
 80027d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	f003 0304 	and.w	r3, r3, #4
 80027e0:	2b04      	cmp	r3, #4
 80027e2:	d119      	bne.n	8002818 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	015a      	lsls	r2, r3, #5
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	4413      	add	r3, r2
 80027ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027f0:	461a      	mov	r2, r3
 80027f2:	2304      	movs	r3, #4
 80027f4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	015a      	lsls	r2, r3, #5
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	4413      	add	r3, r2
 80027fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	68fa      	ldr	r2, [r7, #12]
 8002806:	0151      	lsls	r1, r2, #5
 8002808:	693a      	ldr	r2, [r7, #16]
 800280a:	440a      	add	r2, r1
 800280c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002810:	f043 0302 	orr.w	r3, r3, #2
 8002814:	60d3      	str	r3, [r2, #12]
 8002816:	e0ce      	b.n	80029b6 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	015a      	lsls	r2, r3, #5
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	4413      	add	r3, r2
 8002820:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800282a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800282e:	d12c      	bne.n	800288a <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	015a      	lsls	r2, r3, #5
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	4413      	add	r3, r2
 8002838:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800283c:	461a      	mov	r2, r3
 800283e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002842:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002844:	6879      	ldr	r1, [r7, #4]
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	4613      	mov	r3, r2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	4413      	add	r3, r2
 800284e:	00db      	lsls	r3, r3, #3
 8002850:	440b      	add	r3, r1
 8002852:	335d      	adds	r3, #93	; 0x5d
 8002854:	2207      	movs	r2, #7
 8002856:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	015a      	lsls	r2, r3, #5
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	4413      	add	r3, r2
 8002860:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	0151      	lsls	r1, r2, #5
 800286a:	693a      	ldr	r2, [r7, #16]
 800286c:	440a      	add	r2, r1
 800286e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002872:	f043 0302 	orr.w	r3, r3, #2
 8002876:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	68fa      	ldr	r2, [r7, #12]
 800287e:	b2d2      	uxtb	r2, r2
 8002880:	4611      	mov	r1, r2
 8002882:	4618      	mov	r0, r3
 8002884:	f005 f89f 	bl	80079c6 <USB_HC_Halt>
 8002888:	e095      	b.n	80029b6 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	015a      	lsls	r2, r3, #5
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	4413      	add	r3, r2
 8002892:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f003 0320 	and.w	r3, r3, #32
 800289c:	2b20      	cmp	r3, #32
 800289e:	d109      	bne.n	80028b4 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	015a      	lsls	r2, r3, #5
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	4413      	add	r3, r2
 80028a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ac:	461a      	mov	r2, r3
 80028ae:	2320      	movs	r3, #32
 80028b0:	6093      	str	r3, [r2, #8]
 80028b2:	e080      	b.n	80029b6 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	015a      	lsls	r2, r3, #5
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	4413      	add	r3, r2
 80028bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f003 0308 	and.w	r3, r3, #8
 80028c6:	2b08      	cmp	r3, #8
 80028c8:	d134      	bne.n	8002934 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	015a      	lsls	r2, r3, #5
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	4413      	add	r3, r2
 80028d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	68fa      	ldr	r2, [r7, #12]
 80028da:	0151      	lsls	r1, r2, #5
 80028dc:	693a      	ldr	r2, [r7, #16]
 80028de:	440a      	add	r2, r1
 80028e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028e4:	f043 0302 	orr.w	r3, r3, #2
 80028e8:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80028ea:	6879      	ldr	r1, [r7, #4]
 80028ec:	68fa      	ldr	r2, [r7, #12]
 80028ee:	4613      	mov	r3, r2
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	4413      	add	r3, r2
 80028f4:	00db      	lsls	r3, r3, #3
 80028f6:	440b      	add	r3, r1
 80028f8:	335d      	adds	r3, #93	; 0x5d
 80028fa:	2205      	movs	r2, #5
 80028fc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	015a      	lsls	r2, r3, #5
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	4413      	add	r3, r2
 8002906:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800290a:	461a      	mov	r2, r3
 800290c:	2310      	movs	r3, #16
 800290e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	015a      	lsls	r2, r3, #5
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	4413      	add	r3, r2
 8002918:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800291c:	461a      	mov	r2, r3
 800291e:	2308      	movs	r3, #8
 8002920:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	68fa      	ldr	r2, [r7, #12]
 8002928:	b2d2      	uxtb	r2, r2
 800292a:	4611      	mov	r1, r2
 800292c:	4618      	mov	r0, r3
 800292e:	f005 f84a 	bl	80079c6 <USB_HC_Halt>
 8002932:	e040      	b.n	80029b6 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	015a      	lsls	r2, r3, #5
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	4413      	add	r3, r2
 800293c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002946:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800294a:	d134      	bne.n	80029b6 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	015a      	lsls	r2, r3, #5
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	4413      	add	r3, r2
 8002954:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	68fa      	ldr	r2, [r7, #12]
 800295c:	0151      	lsls	r1, r2, #5
 800295e:	693a      	ldr	r2, [r7, #16]
 8002960:	440a      	add	r2, r1
 8002962:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002966:	f043 0302 	orr.w	r3, r3, #2
 800296a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	68fa      	ldr	r2, [r7, #12]
 8002972:	b2d2      	uxtb	r2, r2
 8002974:	4611      	mov	r1, r2
 8002976:	4618      	mov	r0, r3
 8002978:	f005 f825 	bl	80079c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	015a      	lsls	r2, r3, #5
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	4413      	add	r3, r2
 8002984:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002988:	461a      	mov	r2, r3
 800298a:	2310      	movs	r3, #16
 800298c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800298e:	6879      	ldr	r1, [r7, #4]
 8002990:	68fa      	ldr	r2, [r7, #12]
 8002992:	4613      	mov	r3, r2
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	4413      	add	r3, r2
 8002998:	00db      	lsls	r3, r3, #3
 800299a:	440b      	add	r3, r1
 800299c:	335d      	adds	r3, #93	; 0x5d
 800299e:	2208      	movs	r2, #8
 80029a0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	015a      	lsls	r2, r3, #5
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	4413      	add	r3, r2
 80029aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ae:	461a      	mov	r2, r3
 80029b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029b4:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	015a      	lsls	r2, r3, #5
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	4413      	add	r3, r2
 80029be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029cc:	d122      	bne.n	8002a14 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	015a      	lsls	r2, r3, #5
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	4413      	add	r3, r2
 80029d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	68fa      	ldr	r2, [r7, #12]
 80029de:	0151      	lsls	r1, r2, #5
 80029e0:	693a      	ldr	r2, [r7, #16]
 80029e2:	440a      	add	r2, r1
 80029e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029e8:	f043 0302 	orr.w	r3, r3, #2
 80029ec:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	68fa      	ldr	r2, [r7, #12]
 80029f4:	b2d2      	uxtb	r2, r2
 80029f6:	4611      	mov	r1, r2
 80029f8:	4618      	mov	r0, r3
 80029fa:	f004 ffe4 	bl	80079c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	015a      	lsls	r2, r3, #5
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	4413      	add	r3, r2
 8002a06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a10:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002a12:	e2dc      	b.n	8002fce <HCD_HC_IN_IRQHandler+0x81a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	015a      	lsls	r2, r3, #5
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f003 0301 	and.w	r3, r3, #1
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	f040 80dd 	bne.w	8002be6 <HCD_HC_IN_IRQHandler+0x432>
    hhcd->hc[ch_num].state = HC_XFRC;
 8002a2c:	6879      	ldr	r1, [r7, #4]
 8002a2e:	68fa      	ldr	r2, [r7, #12]
 8002a30:	4613      	mov	r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	4413      	add	r3, r2
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	440b      	add	r3, r1
 8002a3a:	335d      	adds	r3, #93	; 0x5d
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002a40:	6879      	ldr	r1, [r7, #4]
 8002a42:	68fa      	ldr	r2, [r7, #12]
 8002a44:	4613      	mov	r3, r2
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	4413      	add	r3, r2
 8002a4a:	00db      	lsls	r3, r3, #3
 8002a4c:	440b      	add	r3, r1
 8002a4e:	3358      	adds	r3, #88	; 0x58
 8002a50:	2200      	movs	r2, #0
 8002a52:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	015a      	lsls	r2, r3, #5
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a60:	461a      	mov	r2, r3
 8002a62:	2301      	movs	r3, #1
 8002a64:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002a66:	6879      	ldr	r1, [r7, #4]
 8002a68:	68fa      	ldr	r2, [r7, #12]
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	4413      	add	r3, r2
 8002a70:	00db      	lsls	r3, r3, #3
 8002a72:	440b      	add	r3, r1
 8002a74:	333f      	adds	r3, #63	; 0x3f
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d00a      	beq.n	8002a92 <HCD_HC_IN_IRQHandler+0x2de>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002a7c:	6879      	ldr	r1, [r7, #4]
 8002a7e:	68fa      	ldr	r2, [r7, #12]
 8002a80:	4613      	mov	r3, r2
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	4413      	add	r3, r2
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	440b      	add	r3, r1
 8002a8a:	333f      	adds	r3, #63	; 0x3f
 8002a8c:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d121      	bne.n	8002ad6 <HCD_HC_IN_IRQHandler+0x322>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	015a      	lsls	r2, r3, #5
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	4413      	add	r3, r2
 8002a9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	68fa      	ldr	r2, [r7, #12]
 8002aa2:	0151      	lsls	r1, r2, #5
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	440a      	add	r2, r1
 8002aa8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002aac:	f043 0302 	orr.w	r3, r3, #2
 8002ab0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	68fa      	ldr	r2, [r7, #12]
 8002ab8:	b2d2      	uxtb	r2, r2
 8002aba:	4611      	mov	r1, r2
 8002abc:	4618      	mov	r0, r3
 8002abe:	f004 ff82 	bl	80079c6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	015a      	lsls	r2, r3, #5
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	4413      	add	r3, r2
 8002aca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ace:	461a      	mov	r2, r3
 8002ad0:	2310      	movs	r3, #16
 8002ad2:	6093      	str	r3, [r2, #8]
 8002ad4:	e070      	b.n	8002bb8 <HCD_HC_IN_IRQHandler+0x404>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002ad6:	6879      	ldr	r1, [r7, #4]
 8002ad8:	68fa      	ldr	r2, [r7, #12]
 8002ada:	4613      	mov	r3, r2
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	4413      	add	r3, r2
 8002ae0:	00db      	lsls	r3, r3, #3
 8002ae2:	440b      	add	r3, r1
 8002ae4:	333f      	adds	r3, #63	; 0x3f
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	2b03      	cmp	r3, #3
 8002aea:	d12a      	bne.n	8002b42 <HCD_HC_IN_IRQHandler+0x38e>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	015a      	lsls	r2, r3, #5
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	4413      	add	r3, r2
 8002af4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	0151      	lsls	r1, r2, #5
 8002afe:	693a      	ldr	r2, [r7, #16]
 8002b00:	440a      	add	r2, r1
 8002b02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b06:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002b0a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002b0c:	6879      	ldr	r1, [r7, #4]
 8002b0e:	68fa      	ldr	r2, [r7, #12]
 8002b10:	4613      	mov	r3, r2
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	4413      	add	r3, r2
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	440b      	add	r3, r1
 8002b1a:	335c      	adds	r3, #92	; 0x5c
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	b2d8      	uxtb	r0, r3
 8002b24:	6879      	ldr	r1, [r7, #4]
 8002b26:	68fa      	ldr	r2, [r7, #12]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	4413      	add	r3, r2
 8002b2e:	00db      	lsls	r3, r3, #3
 8002b30:	440b      	add	r3, r1
 8002b32:	335c      	adds	r3, #92	; 0x5c
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	461a      	mov	r2, r3
 8002b38:	4601      	mov	r1, r0
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f007 f8ae 	bl	8009c9c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002b40:	e03a      	b.n	8002bb8 <HCD_HC_IN_IRQHandler+0x404>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002b42:	6879      	ldr	r1, [r7, #4]
 8002b44:	68fa      	ldr	r2, [r7, #12]
 8002b46:	4613      	mov	r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	4413      	add	r3, r2
 8002b4c:	00db      	lsls	r3, r3, #3
 8002b4e:	440b      	add	r3, r1
 8002b50:	333f      	adds	r3, #63	; 0x3f
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d12f      	bne.n	8002bb8 <HCD_HC_IN_IRQHandler+0x404>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002b58:	6879      	ldr	r1, [r7, #4]
 8002b5a:	68fa      	ldr	r2, [r7, #12]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	4413      	add	r3, r2
 8002b62:	00db      	lsls	r3, r3, #3
 8002b64:	440b      	add	r3, r1
 8002b66:	335c      	adds	r3, #92	; 0x5c
 8002b68:	2201      	movs	r2, #1
 8002b6a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002b6c:	6879      	ldr	r1, [r7, #4]
 8002b6e:	68fa      	ldr	r2, [r7, #12]
 8002b70:	4613      	mov	r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	4413      	add	r3, r2
 8002b76:	00db      	lsls	r3, r3, #3
 8002b78:	440b      	add	r3, r1
 8002b7a:	3350      	adds	r3, #80	; 0x50
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	f083 0301 	eor.w	r3, r3, #1
 8002b82:	b2d8      	uxtb	r0, r3
 8002b84:	6879      	ldr	r1, [r7, #4]
 8002b86:	68fa      	ldr	r2, [r7, #12]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	4413      	add	r3, r2
 8002b8e:	00db      	lsls	r3, r3, #3
 8002b90:	440b      	add	r3, r1
 8002b92:	3350      	adds	r3, #80	; 0x50
 8002b94:	4602      	mov	r2, r0
 8002b96:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	b2d8      	uxtb	r0, r3
 8002b9c:	6879      	ldr	r1, [r7, #4]
 8002b9e:	68fa      	ldr	r2, [r7, #12]
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	4413      	add	r3, r2
 8002ba6:	00db      	lsls	r3, r3, #3
 8002ba8:	440b      	add	r3, r1
 8002baa:	335c      	adds	r3, #92	; 0x5c
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	461a      	mov	r2, r3
 8002bb0:	4601      	mov	r1, r0
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f007 f872 	bl	8009c9c <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8002bb8:	6879      	ldr	r1, [r7, #4]
 8002bba:	68fa      	ldr	r2, [r7, #12]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	4413      	add	r3, r2
 8002bc2:	00db      	lsls	r3, r3, #3
 8002bc4:	440b      	add	r3, r1
 8002bc6:	3350      	adds	r3, #80	; 0x50
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	f083 0301 	eor.w	r3, r3, #1
 8002bce:	b2d8      	uxtb	r0, r3
 8002bd0:	6879      	ldr	r1, [r7, #4]
 8002bd2:	68fa      	ldr	r2, [r7, #12]
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	4413      	add	r3, r2
 8002bda:	00db      	lsls	r3, r3, #3
 8002bdc:	440b      	add	r3, r1
 8002bde:	3350      	adds	r3, #80	; 0x50
 8002be0:	4602      	mov	r2, r0
 8002be2:	701a      	strb	r2, [r3, #0]
}
 8002be4:	e1f3      	b.n	8002fce <HCD_HC_IN_IRQHandler+0x81a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	015a      	lsls	r2, r3, #5
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	4413      	add	r3, r2
 8002bee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f003 0302 	and.w	r3, r3, #2
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	f040 811a 	bne.w	8002e32 <HCD_HC_IN_IRQHandler+0x67e>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	015a      	lsls	r2, r3, #5
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	4413      	add	r3, r2
 8002c06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	68fa      	ldr	r2, [r7, #12]
 8002c0e:	0151      	lsls	r1, r2, #5
 8002c10:	693a      	ldr	r2, [r7, #16]
 8002c12:	440a      	add	r2, r1
 8002c14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c18:	f023 0302 	bic.w	r3, r3, #2
 8002c1c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002c1e:	6879      	ldr	r1, [r7, #4]
 8002c20:	68fa      	ldr	r2, [r7, #12]
 8002c22:	4613      	mov	r3, r2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	4413      	add	r3, r2
 8002c28:	00db      	lsls	r3, r3, #3
 8002c2a:	440b      	add	r3, r1
 8002c2c:	335d      	adds	r3, #93	; 0x5d
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d10a      	bne.n	8002c4a <HCD_HC_IN_IRQHandler+0x496>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002c34:	6879      	ldr	r1, [r7, #4]
 8002c36:	68fa      	ldr	r2, [r7, #12]
 8002c38:	4613      	mov	r3, r2
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	4413      	add	r3, r2
 8002c3e:	00db      	lsls	r3, r3, #3
 8002c40:	440b      	add	r3, r1
 8002c42:	335c      	adds	r3, #92	; 0x5c
 8002c44:	2201      	movs	r2, #1
 8002c46:	701a      	strb	r2, [r3, #0]
 8002c48:	e0d9      	b.n	8002dfe <HCD_HC_IN_IRQHandler+0x64a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002c4a:	6879      	ldr	r1, [r7, #4]
 8002c4c:	68fa      	ldr	r2, [r7, #12]
 8002c4e:	4613      	mov	r3, r2
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	4413      	add	r3, r2
 8002c54:	00db      	lsls	r3, r3, #3
 8002c56:	440b      	add	r3, r1
 8002c58:	335d      	adds	r3, #93	; 0x5d
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	2b05      	cmp	r3, #5
 8002c5e:	d10a      	bne.n	8002c76 <HCD_HC_IN_IRQHandler+0x4c2>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002c60:	6879      	ldr	r1, [r7, #4]
 8002c62:	68fa      	ldr	r2, [r7, #12]
 8002c64:	4613      	mov	r3, r2
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	4413      	add	r3, r2
 8002c6a:	00db      	lsls	r3, r3, #3
 8002c6c:	440b      	add	r3, r1
 8002c6e:	335c      	adds	r3, #92	; 0x5c
 8002c70:	2205      	movs	r2, #5
 8002c72:	701a      	strb	r2, [r3, #0]
 8002c74:	e0c3      	b.n	8002dfe <HCD_HC_IN_IRQHandler+0x64a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002c76:	6879      	ldr	r1, [r7, #4]
 8002c78:	68fa      	ldr	r2, [r7, #12]
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	4413      	add	r3, r2
 8002c80:	00db      	lsls	r3, r3, #3
 8002c82:	440b      	add	r3, r1
 8002c84:	335d      	adds	r3, #93	; 0x5d
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	2b06      	cmp	r3, #6
 8002c8a:	d00a      	beq.n	8002ca2 <HCD_HC_IN_IRQHandler+0x4ee>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002c8c:	6879      	ldr	r1, [r7, #4]
 8002c8e:	68fa      	ldr	r2, [r7, #12]
 8002c90:	4613      	mov	r3, r2
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	4413      	add	r3, r2
 8002c96:	00db      	lsls	r3, r3, #3
 8002c98:	440b      	add	r3, r1
 8002c9a:	335d      	adds	r3, #93	; 0x5d
 8002c9c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002c9e:	2b08      	cmp	r3, #8
 8002ca0:	d156      	bne.n	8002d50 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].ErrCnt++;
 8002ca2:	6879      	ldr	r1, [r7, #4]
 8002ca4:	68fa      	ldr	r2, [r7, #12]
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	4413      	add	r3, r2
 8002cac:	00db      	lsls	r3, r3, #3
 8002cae:	440b      	add	r3, r1
 8002cb0:	3358      	adds	r3, #88	; 0x58
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	1c59      	adds	r1, r3, #1
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	68fa      	ldr	r2, [r7, #12]
 8002cba:	4613      	mov	r3, r2
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	4413      	add	r3, r2
 8002cc0:	00db      	lsls	r3, r3, #3
 8002cc2:	4403      	add	r3, r0
 8002cc4:	3358      	adds	r3, #88	; 0x58
 8002cc6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002cc8:	6879      	ldr	r1, [r7, #4]
 8002cca:	68fa      	ldr	r2, [r7, #12]
 8002ccc:	4613      	mov	r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	4413      	add	r3, r2
 8002cd2:	00db      	lsls	r3, r3, #3
 8002cd4:	440b      	add	r3, r1
 8002cd6:	3358      	adds	r3, #88	; 0x58
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	2b03      	cmp	r3, #3
 8002cdc:	d914      	bls.n	8002d08 <HCD_HC_IN_IRQHandler+0x554>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002cde:	6879      	ldr	r1, [r7, #4]
 8002ce0:	68fa      	ldr	r2, [r7, #12]
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	4413      	add	r3, r2
 8002ce8:	00db      	lsls	r3, r3, #3
 8002cea:	440b      	add	r3, r1
 8002cec:	3358      	adds	r3, #88	; 0x58
 8002cee:	2200      	movs	r2, #0
 8002cf0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002cf2:	6879      	ldr	r1, [r7, #4]
 8002cf4:	68fa      	ldr	r2, [r7, #12]
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	4413      	add	r3, r2
 8002cfc:	00db      	lsls	r3, r3, #3
 8002cfe:	440b      	add	r3, r1
 8002d00:	335c      	adds	r3, #92	; 0x5c
 8002d02:	2204      	movs	r2, #4
 8002d04:	701a      	strb	r2, [r3, #0]
 8002d06:	e009      	b.n	8002d1c <HCD_HC_IN_IRQHandler+0x568>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002d08:	6879      	ldr	r1, [r7, #4]
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	4413      	add	r3, r2
 8002d12:	00db      	lsls	r3, r3, #3
 8002d14:	440b      	add	r3, r1
 8002d16:	335c      	adds	r3, #92	; 0x5c
 8002d18:	2202      	movs	r2, #2
 8002d1a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	015a      	lsls	r2, r3, #5
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	4413      	add	r3, r2
 8002d24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d32:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d3a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	015a      	lsls	r2, r3, #5
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	4413      	add	r3, r2
 8002d44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d48:	461a      	mov	r2, r3
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	6013      	str	r3, [r2, #0]
 8002d4e:	e056      	b.n	8002dfe <HCD_HC_IN_IRQHandler+0x64a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002d50:	6879      	ldr	r1, [r7, #4]
 8002d52:	68fa      	ldr	r2, [r7, #12]
 8002d54:	4613      	mov	r3, r2
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	4413      	add	r3, r2
 8002d5a:	00db      	lsls	r3, r3, #3
 8002d5c:	440b      	add	r3, r1
 8002d5e:	335d      	adds	r3, #93	; 0x5d
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	2b03      	cmp	r3, #3
 8002d64:	d123      	bne.n	8002dae <HCD_HC_IN_IRQHandler+0x5fa>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002d66:	6879      	ldr	r1, [r7, #4]
 8002d68:	68fa      	ldr	r2, [r7, #12]
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	4413      	add	r3, r2
 8002d70:	00db      	lsls	r3, r3, #3
 8002d72:	440b      	add	r3, r1
 8002d74:	335c      	adds	r3, #92	; 0x5c
 8002d76:	2202      	movs	r2, #2
 8002d78:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	015a      	lsls	r2, r3, #5
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	4413      	add	r3, r2
 8002d82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d90:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d98:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	015a      	lsls	r2, r3, #5
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	4413      	add	r3, r2
 8002da2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002da6:	461a      	mov	r2, r3
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	6013      	str	r3, [r2, #0]
 8002dac:	e027      	b.n	8002dfe <HCD_HC_IN_IRQHandler+0x64a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002dae:	6879      	ldr	r1, [r7, #4]
 8002db0:	68fa      	ldr	r2, [r7, #12]
 8002db2:	4613      	mov	r3, r2
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	4413      	add	r3, r2
 8002db8:	00db      	lsls	r3, r3, #3
 8002dba:	440b      	add	r3, r1
 8002dbc:	335d      	adds	r3, #93	; 0x5d
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	2b07      	cmp	r3, #7
 8002dc2:	d11c      	bne.n	8002dfe <HCD_HC_IN_IRQHandler+0x64a>
      hhcd->hc[ch_num].ErrCnt++;
 8002dc4:	6879      	ldr	r1, [r7, #4]
 8002dc6:	68fa      	ldr	r2, [r7, #12]
 8002dc8:	4613      	mov	r3, r2
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	4413      	add	r3, r2
 8002dce:	00db      	lsls	r3, r3, #3
 8002dd0:	440b      	add	r3, r1
 8002dd2:	3358      	adds	r3, #88	; 0x58
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	1c59      	adds	r1, r3, #1
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	68fa      	ldr	r2, [r7, #12]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	4413      	add	r3, r2
 8002de2:	00db      	lsls	r3, r3, #3
 8002de4:	4403      	add	r3, r0
 8002de6:	3358      	adds	r3, #88	; 0x58
 8002de8:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002dea:	6879      	ldr	r1, [r7, #4]
 8002dec:	68fa      	ldr	r2, [r7, #12]
 8002dee:	4613      	mov	r3, r2
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	4413      	add	r3, r2
 8002df4:	00db      	lsls	r3, r3, #3
 8002df6:	440b      	add	r3, r1
 8002df8:	335c      	adds	r3, #92	; 0x5c
 8002dfa:	2204      	movs	r2, #4
 8002dfc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	015a      	lsls	r2, r3, #5
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	4413      	add	r3, r2
 8002e06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	2302      	movs	r3, #2
 8002e0e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	b2d8      	uxtb	r0, r3
 8002e14:	6879      	ldr	r1, [r7, #4]
 8002e16:	68fa      	ldr	r2, [r7, #12]
 8002e18:	4613      	mov	r3, r2
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	4413      	add	r3, r2
 8002e1e:	00db      	lsls	r3, r3, #3
 8002e20:	440b      	add	r3, r1
 8002e22:	335c      	adds	r3, #92	; 0x5c
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	461a      	mov	r2, r3
 8002e28:	4601      	mov	r1, r0
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f006 ff36 	bl	8009c9c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002e30:	e0cd      	b.n	8002fce <HCD_HC_IN_IRQHandler+0x81a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	015a      	lsls	r2, r3, #5
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	4413      	add	r3, r2
 8002e3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e44:	2b80      	cmp	r3, #128	; 0x80
 8002e46:	d13e      	bne.n	8002ec6 <HCD_HC_IN_IRQHandler+0x712>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	015a      	lsls	r2, r3, #5
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	4413      	add	r3, r2
 8002e50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	68fa      	ldr	r2, [r7, #12]
 8002e58:	0151      	lsls	r1, r2, #5
 8002e5a:	693a      	ldr	r2, [r7, #16]
 8002e5c:	440a      	add	r2, r1
 8002e5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e62:	f043 0302 	orr.w	r3, r3, #2
 8002e66:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002e68:	6879      	ldr	r1, [r7, #4]
 8002e6a:	68fa      	ldr	r2, [r7, #12]
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	4413      	add	r3, r2
 8002e72:	00db      	lsls	r3, r3, #3
 8002e74:	440b      	add	r3, r1
 8002e76:	3358      	adds	r3, #88	; 0x58
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	1c59      	adds	r1, r3, #1
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	68fa      	ldr	r2, [r7, #12]
 8002e80:	4613      	mov	r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	4413      	add	r3, r2
 8002e86:	00db      	lsls	r3, r3, #3
 8002e88:	4403      	add	r3, r0
 8002e8a:	3358      	adds	r3, #88	; 0x58
 8002e8c:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002e8e:	6879      	ldr	r1, [r7, #4]
 8002e90:	68fa      	ldr	r2, [r7, #12]
 8002e92:	4613      	mov	r3, r2
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	4413      	add	r3, r2
 8002e98:	00db      	lsls	r3, r3, #3
 8002e9a:	440b      	add	r3, r1
 8002e9c:	335d      	adds	r3, #93	; 0x5d
 8002e9e:	2206      	movs	r2, #6
 8002ea0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	68fa      	ldr	r2, [r7, #12]
 8002ea8:	b2d2      	uxtb	r2, r2
 8002eaa:	4611      	mov	r1, r2
 8002eac:	4618      	mov	r0, r3
 8002eae:	f004 fd8a 	bl	80079c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	015a      	lsls	r2, r3, #5
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	4413      	add	r3, r2
 8002eba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	2380      	movs	r3, #128	; 0x80
 8002ec2:	6093      	str	r3, [r2, #8]
}
 8002ec4:	e083      	b.n	8002fce <HCD_HC_IN_IRQHandler+0x81a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	015a      	lsls	r2, r3, #5
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	4413      	add	r3, r2
 8002ece:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f003 0310 	and.w	r3, r3, #16
 8002ed8:	2b10      	cmp	r3, #16
 8002eda:	d178      	bne.n	8002fce <HCD_HC_IN_IRQHandler+0x81a>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002edc:	6879      	ldr	r1, [r7, #4]
 8002ede:	68fa      	ldr	r2, [r7, #12]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	4413      	add	r3, r2
 8002ee6:	00db      	lsls	r3, r3, #3
 8002ee8:	440b      	add	r3, r1
 8002eea:	333f      	adds	r3, #63	; 0x3f
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	2b03      	cmp	r3, #3
 8002ef0:	d122      	bne.n	8002f38 <HCD_HC_IN_IRQHandler+0x784>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002ef2:	6879      	ldr	r1, [r7, #4]
 8002ef4:	68fa      	ldr	r2, [r7, #12]
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	4413      	add	r3, r2
 8002efc:	00db      	lsls	r3, r3, #3
 8002efe:	440b      	add	r3, r1
 8002f00:	3358      	adds	r3, #88	; 0x58
 8002f02:	2200      	movs	r2, #0
 8002f04:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	015a      	lsls	r2, r3, #5
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	4413      	add	r3, r2
 8002f0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	68fa      	ldr	r2, [r7, #12]
 8002f16:	0151      	lsls	r1, r2, #5
 8002f18:	693a      	ldr	r2, [r7, #16]
 8002f1a:	440a      	add	r2, r1
 8002f1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f20:	f043 0302 	orr.w	r3, r3, #2
 8002f24:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	68fa      	ldr	r2, [r7, #12]
 8002f2c:	b2d2      	uxtb	r2, r2
 8002f2e:	4611      	mov	r1, r2
 8002f30:	4618      	mov	r0, r3
 8002f32:	f004 fd48 	bl	80079c6 <USB_HC_Halt>
 8002f36:	e041      	b.n	8002fbc <HCD_HC_IN_IRQHandler+0x808>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002f38:	6879      	ldr	r1, [r7, #4]
 8002f3a:	68fa      	ldr	r2, [r7, #12]
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	4413      	add	r3, r2
 8002f42:	00db      	lsls	r3, r3, #3
 8002f44:	440b      	add	r3, r1
 8002f46:	333f      	adds	r3, #63	; 0x3f
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d00a      	beq.n	8002f64 <HCD_HC_IN_IRQHandler+0x7b0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002f4e:	6879      	ldr	r1, [r7, #4]
 8002f50:	68fa      	ldr	r2, [r7, #12]
 8002f52:	4613      	mov	r3, r2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	4413      	add	r3, r2
 8002f58:	00db      	lsls	r3, r3, #3
 8002f5a:	440b      	add	r3, r1
 8002f5c:	333f      	adds	r3, #63	; 0x3f
 8002f5e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d12b      	bne.n	8002fbc <HCD_HC_IN_IRQHandler+0x808>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002f64:	6879      	ldr	r1, [r7, #4]
 8002f66:	68fa      	ldr	r2, [r7, #12]
 8002f68:	4613      	mov	r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	4413      	add	r3, r2
 8002f6e:	00db      	lsls	r3, r3, #3
 8002f70:	440b      	add	r3, r1
 8002f72:	3358      	adds	r3, #88	; 0x58
 8002f74:	2200      	movs	r2, #0
 8002f76:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 8002f78:	6879      	ldr	r1, [r7, #4]
 8002f7a:	68fa      	ldr	r2, [r7, #12]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	4413      	add	r3, r2
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	440b      	add	r3, r1
 8002f86:	335d      	adds	r3, #93	; 0x5d
 8002f88:	2203      	movs	r2, #3
 8002f8a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	015a      	lsls	r2, r3, #5
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	4413      	add	r3, r2
 8002f94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	68fa      	ldr	r2, [r7, #12]
 8002f9c:	0151      	lsls	r1, r2, #5
 8002f9e:	693a      	ldr	r2, [r7, #16]
 8002fa0:	440a      	add	r2, r1
 8002fa2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002fa6:	f043 0302 	orr.w	r3, r3, #2
 8002faa:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	68fa      	ldr	r2, [r7, #12]
 8002fb2:	b2d2      	uxtb	r2, r2
 8002fb4:	4611      	mov	r1, r2
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f004 fd05 	bl	80079c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	015a      	lsls	r2, r3, #5
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	4413      	add	r3, r2
 8002fc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fc8:	461a      	mov	r2, r3
 8002fca:	2310      	movs	r3, #16
 8002fcc:	6093      	str	r3, [r2, #8]
}
 8002fce:	bf00      	nop
 8002fd0:	3718      	adds	r7, #24
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}

08002fd6 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002fd6:	b580      	push	{r7, lr}
 8002fd8:	b086      	sub	sp, #24
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6078      	str	r0, [r7, #4]
 8002fde:	460b      	mov	r3, r1
 8002fe0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002fec:	78fb      	ldrb	r3, [r7, #3]
 8002fee:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	015a      	lsls	r2, r3, #5
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f003 0304 	and.w	r3, r3, #4
 8003002:	2b04      	cmp	r3, #4
 8003004:	d119      	bne.n	800303a <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	015a      	lsls	r2, r3, #5
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	4413      	add	r3, r2
 800300e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003012:	461a      	mov	r2, r3
 8003014:	2304      	movs	r3, #4
 8003016:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	015a      	lsls	r2, r3, #5
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	4413      	add	r3, r2
 8003020:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	68fa      	ldr	r2, [r7, #12]
 8003028:	0151      	lsls	r1, r2, #5
 800302a:	693a      	ldr	r2, [r7, #16]
 800302c:	440a      	add	r2, r1
 800302e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003032:	f043 0302 	orr.w	r3, r3, #2
 8003036:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003038:	e31e      	b.n	8003678 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	015a      	lsls	r2, r3, #5
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	4413      	add	r3, r2
 8003042:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	f003 0320 	and.w	r3, r3, #32
 800304c:	2b20      	cmp	r3, #32
 800304e:	d141      	bne.n	80030d4 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	015a      	lsls	r2, r3, #5
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	4413      	add	r3, r2
 8003058:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800305c:	461a      	mov	r2, r3
 800305e:	2320      	movs	r3, #32
 8003060:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003062:	6879      	ldr	r1, [r7, #4]
 8003064:	68fa      	ldr	r2, [r7, #12]
 8003066:	4613      	mov	r3, r2
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	4413      	add	r3, r2
 800306c:	00db      	lsls	r3, r3, #3
 800306e:	440b      	add	r3, r1
 8003070:	333d      	adds	r3, #61	; 0x3d
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	2b01      	cmp	r3, #1
 8003076:	f040 82ff 	bne.w	8003678 <HCD_HC_OUT_IRQHandler+0x6a2>
      hhcd->hc[ch_num].do_ping = 0U;
 800307a:	6879      	ldr	r1, [r7, #4]
 800307c:	68fa      	ldr	r2, [r7, #12]
 800307e:	4613      	mov	r3, r2
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	4413      	add	r3, r2
 8003084:	00db      	lsls	r3, r3, #3
 8003086:	440b      	add	r3, r1
 8003088:	333d      	adds	r3, #61	; 0x3d
 800308a:	2200      	movs	r2, #0
 800308c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800308e:	6879      	ldr	r1, [r7, #4]
 8003090:	68fa      	ldr	r2, [r7, #12]
 8003092:	4613      	mov	r3, r2
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	4413      	add	r3, r2
 8003098:	00db      	lsls	r3, r3, #3
 800309a:	440b      	add	r3, r1
 800309c:	335c      	adds	r3, #92	; 0x5c
 800309e:	2202      	movs	r2, #2
 80030a0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	015a      	lsls	r2, r3, #5
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	4413      	add	r3, r2
 80030aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	68fa      	ldr	r2, [r7, #12]
 80030b2:	0151      	lsls	r1, r2, #5
 80030b4:	693a      	ldr	r2, [r7, #16]
 80030b6:	440a      	add	r2, r1
 80030b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030bc:	f043 0302 	orr.w	r3, r3, #2
 80030c0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	b2d2      	uxtb	r2, r2
 80030ca:	4611      	mov	r1, r2
 80030cc:	4618      	mov	r0, r3
 80030ce:	f004 fc7a 	bl	80079c6 <USB_HC_Halt>
}
 80030d2:	e2d1      	b.n	8003678 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	015a      	lsls	r2, r3, #5
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	4413      	add	r3, r2
 80030dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030e6:	2b40      	cmp	r3, #64	; 0x40
 80030e8:	d13f      	bne.n	800316a <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80030ea:	6879      	ldr	r1, [r7, #4]
 80030ec:	68fa      	ldr	r2, [r7, #12]
 80030ee:	4613      	mov	r3, r2
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	4413      	add	r3, r2
 80030f4:	00db      	lsls	r3, r3, #3
 80030f6:	440b      	add	r3, r1
 80030f8:	335d      	adds	r3, #93	; 0x5d
 80030fa:	2204      	movs	r2, #4
 80030fc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80030fe:	6879      	ldr	r1, [r7, #4]
 8003100:	68fa      	ldr	r2, [r7, #12]
 8003102:	4613      	mov	r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	4413      	add	r3, r2
 8003108:	00db      	lsls	r3, r3, #3
 800310a:	440b      	add	r3, r1
 800310c:	333d      	adds	r3, #61	; 0x3d
 800310e:	2201      	movs	r2, #1
 8003110:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003112:	6879      	ldr	r1, [r7, #4]
 8003114:	68fa      	ldr	r2, [r7, #12]
 8003116:	4613      	mov	r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	4413      	add	r3, r2
 800311c:	00db      	lsls	r3, r3, #3
 800311e:	440b      	add	r3, r1
 8003120:	3358      	adds	r3, #88	; 0x58
 8003122:	2200      	movs	r2, #0
 8003124:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	015a      	lsls	r2, r3, #5
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	4413      	add	r3, r2
 800312e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	68fa      	ldr	r2, [r7, #12]
 8003136:	0151      	lsls	r1, r2, #5
 8003138:	693a      	ldr	r2, [r7, #16]
 800313a:	440a      	add	r2, r1
 800313c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003140:	f043 0302 	orr.w	r3, r3, #2
 8003144:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	68fa      	ldr	r2, [r7, #12]
 800314c:	b2d2      	uxtb	r2, r2
 800314e:	4611      	mov	r1, r2
 8003150:	4618      	mov	r0, r3
 8003152:	f004 fc38 	bl	80079c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	015a      	lsls	r2, r3, #5
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	4413      	add	r3, r2
 800315e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003162:	461a      	mov	r2, r3
 8003164:	2340      	movs	r3, #64	; 0x40
 8003166:	6093      	str	r3, [r2, #8]
}
 8003168:	e286      	b.n	8003678 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	015a      	lsls	r2, r3, #5
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	4413      	add	r3, r2
 8003172:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800317c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003180:	d122      	bne.n	80031c8 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	015a      	lsls	r2, r3, #5
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	4413      	add	r3, r2
 800318a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	68fa      	ldr	r2, [r7, #12]
 8003192:	0151      	lsls	r1, r2, #5
 8003194:	693a      	ldr	r2, [r7, #16]
 8003196:	440a      	add	r2, r1
 8003198:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800319c:	f043 0302 	orr.w	r3, r3, #2
 80031a0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	68fa      	ldr	r2, [r7, #12]
 80031a8:	b2d2      	uxtb	r2, r2
 80031aa:	4611      	mov	r1, r2
 80031ac:	4618      	mov	r0, r3
 80031ae:	f004 fc0a 	bl	80079c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	015a      	lsls	r2, r3, #5
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	4413      	add	r3, r2
 80031ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031be:	461a      	mov	r2, r3
 80031c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031c4:	6093      	str	r3, [r2, #8]
}
 80031c6:	e257      	b.n	8003678 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	015a      	lsls	r2, r3, #5
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	4413      	add	r3, r2
 80031d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f003 0301 	and.w	r3, r3, #1
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d135      	bne.n	800324a <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80031de:	6879      	ldr	r1, [r7, #4]
 80031e0:	68fa      	ldr	r2, [r7, #12]
 80031e2:	4613      	mov	r3, r2
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	4413      	add	r3, r2
 80031e8:	00db      	lsls	r3, r3, #3
 80031ea:	440b      	add	r3, r1
 80031ec:	3358      	adds	r3, #88	; 0x58
 80031ee:	2200      	movs	r2, #0
 80031f0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	015a      	lsls	r2, r3, #5
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	4413      	add	r3, r2
 80031fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	68fa      	ldr	r2, [r7, #12]
 8003202:	0151      	lsls	r1, r2, #5
 8003204:	693a      	ldr	r2, [r7, #16]
 8003206:	440a      	add	r2, r1
 8003208:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800320c:	f043 0302 	orr.w	r3, r3, #2
 8003210:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	68fa      	ldr	r2, [r7, #12]
 8003218:	b2d2      	uxtb	r2, r2
 800321a:	4611      	mov	r1, r2
 800321c:	4618      	mov	r0, r3
 800321e:	f004 fbd2 	bl	80079c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	015a      	lsls	r2, r3, #5
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	4413      	add	r3, r2
 800322a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800322e:	461a      	mov	r2, r3
 8003230:	2301      	movs	r3, #1
 8003232:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003234:	6879      	ldr	r1, [r7, #4]
 8003236:	68fa      	ldr	r2, [r7, #12]
 8003238:	4613      	mov	r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	4413      	add	r3, r2
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	440b      	add	r3, r1
 8003242:	335d      	adds	r3, #93	; 0x5d
 8003244:	2201      	movs	r2, #1
 8003246:	701a      	strb	r2, [r3, #0]
}
 8003248:	e216      	b.n	8003678 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	015a      	lsls	r2, r3, #5
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	4413      	add	r3, r2
 8003252:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f003 0308 	and.w	r3, r3, #8
 800325c:	2b08      	cmp	r3, #8
 800325e:	d12b      	bne.n	80032b8 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	015a      	lsls	r2, r3, #5
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	4413      	add	r3, r2
 8003268:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800326c:	461a      	mov	r2, r3
 800326e:	2308      	movs	r3, #8
 8003270:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	015a      	lsls	r2, r3, #5
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	4413      	add	r3, r2
 800327a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	68fa      	ldr	r2, [r7, #12]
 8003282:	0151      	lsls	r1, r2, #5
 8003284:	693a      	ldr	r2, [r7, #16]
 8003286:	440a      	add	r2, r1
 8003288:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800328c:	f043 0302 	orr.w	r3, r3, #2
 8003290:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	68fa      	ldr	r2, [r7, #12]
 8003298:	b2d2      	uxtb	r2, r2
 800329a:	4611      	mov	r1, r2
 800329c:	4618      	mov	r0, r3
 800329e:	f004 fb92 	bl	80079c6 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80032a2:	6879      	ldr	r1, [r7, #4]
 80032a4:	68fa      	ldr	r2, [r7, #12]
 80032a6:	4613      	mov	r3, r2
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	4413      	add	r3, r2
 80032ac:	00db      	lsls	r3, r3, #3
 80032ae:	440b      	add	r3, r1
 80032b0:	335d      	adds	r3, #93	; 0x5d
 80032b2:	2205      	movs	r2, #5
 80032b4:	701a      	strb	r2, [r3, #0]
}
 80032b6:	e1df      	b.n	8003678 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	015a      	lsls	r2, r3, #5
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	4413      	add	r3, r2
 80032c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f003 0310 	and.w	r3, r3, #16
 80032ca:	2b10      	cmp	r3, #16
 80032cc:	d135      	bne.n	800333a <HCD_HC_OUT_IRQHandler+0x364>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80032ce:	6879      	ldr	r1, [r7, #4]
 80032d0:	68fa      	ldr	r2, [r7, #12]
 80032d2:	4613      	mov	r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	4413      	add	r3, r2
 80032d8:	00db      	lsls	r3, r3, #3
 80032da:	440b      	add	r3, r1
 80032dc:	3358      	adds	r3, #88	; 0x58
 80032de:	2200      	movs	r2, #0
 80032e0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80032e2:	6879      	ldr	r1, [r7, #4]
 80032e4:	68fa      	ldr	r2, [r7, #12]
 80032e6:	4613      	mov	r3, r2
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	4413      	add	r3, r2
 80032ec:	00db      	lsls	r3, r3, #3
 80032ee:	440b      	add	r3, r1
 80032f0:	335d      	adds	r3, #93	; 0x5d
 80032f2:	2203      	movs	r2, #3
 80032f4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	015a      	lsls	r2, r3, #5
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	4413      	add	r3, r2
 80032fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	68fa      	ldr	r2, [r7, #12]
 8003306:	0151      	lsls	r1, r2, #5
 8003308:	693a      	ldr	r2, [r7, #16]
 800330a:	440a      	add	r2, r1
 800330c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003310:	f043 0302 	orr.w	r3, r3, #2
 8003314:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	68fa      	ldr	r2, [r7, #12]
 800331c:	b2d2      	uxtb	r2, r2
 800331e:	4611      	mov	r1, r2
 8003320:	4618      	mov	r0, r3
 8003322:	f004 fb50 	bl	80079c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	015a      	lsls	r2, r3, #5
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	4413      	add	r3, r2
 800332e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003332:	461a      	mov	r2, r3
 8003334:	2310      	movs	r3, #16
 8003336:	6093      	str	r3, [r2, #8]
}
 8003338:	e19e      	b.n	8003678 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	015a      	lsls	r2, r3, #5
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	4413      	add	r3, r2
 8003342:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800334c:	2b80      	cmp	r3, #128	; 0x80
 800334e:	d12b      	bne.n	80033a8 <HCD_HC_OUT_IRQHandler+0x3d2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	015a      	lsls	r2, r3, #5
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	4413      	add	r3, r2
 8003358:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	68fa      	ldr	r2, [r7, #12]
 8003360:	0151      	lsls	r1, r2, #5
 8003362:	693a      	ldr	r2, [r7, #16]
 8003364:	440a      	add	r2, r1
 8003366:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800336a:	f043 0302 	orr.w	r3, r3, #2
 800336e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	68fa      	ldr	r2, [r7, #12]
 8003376:	b2d2      	uxtb	r2, r2
 8003378:	4611      	mov	r1, r2
 800337a:	4618      	mov	r0, r3
 800337c:	f004 fb23 	bl	80079c6 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003380:	6879      	ldr	r1, [r7, #4]
 8003382:	68fa      	ldr	r2, [r7, #12]
 8003384:	4613      	mov	r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	4413      	add	r3, r2
 800338a:	00db      	lsls	r3, r3, #3
 800338c:	440b      	add	r3, r1
 800338e:	335d      	adds	r3, #93	; 0x5d
 8003390:	2206      	movs	r2, #6
 8003392:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	015a      	lsls	r2, r3, #5
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	4413      	add	r3, r2
 800339c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033a0:	461a      	mov	r2, r3
 80033a2:	2380      	movs	r3, #128	; 0x80
 80033a4:	6093      	str	r3, [r2, #8]
}
 80033a6:	e167      	b.n	8003678 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	015a      	lsls	r2, r3, #5
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	4413      	add	r3, r2
 80033b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033be:	d135      	bne.n	800342c <HCD_HC_OUT_IRQHandler+0x456>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	015a      	lsls	r2, r3, #5
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	4413      	add	r3, r2
 80033c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	68fa      	ldr	r2, [r7, #12]
 80033d0:	0151      	lsls	r1, r2, #5
 80033d2:	693a      	ldr	r2, [r7, #16]
 80033d4:	440a      	add	r2, r1
 80033d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80033da:	f043 0302 	orr.w	r3, r3, #2
 80033de:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	68fa      	ldr	r2, [r7, #12]
 80033e6:	b2d2      	uxtb	r2, r2
 80033e8:	4611      	mov	r1, r2
 80033ea:	4618      	mov	r0, r3
 80033ec:	f004 faeb 	bl	80079c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	015a      	lsls	r2, r3, #5
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	4413      	add	r3, r2
 80033f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033fc:	461a      	mov	r2, r3
 80033fe:	2310      	movs	r3, #16
 8003400:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	015a      	lsls	r2, r3, #5
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	4413      	add	r3, r2
 800340a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800340e:	461a      	mov	r2, r3
 8003410:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003414:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003416:	6879      	ldr	r1, [r7, #4]
 8003418:	68fa      	ldr	r2, [r7, #12]
 800341a:	4613      	mov	r3, r2
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	4413      	add	r3, r2
 8003420:	00db      	lsls	r3, r3, #3
 8003422:	440b      	add	r3, r1
 8003424:	335d      	adds	r3, #93	; 0x5d
 8003426:	2208      	movs	r2, #8
 8003428:	701a      	strb	r2, [r3, #0]
}
 800342a:	e125      	b.n	8003678 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	015a      	lsls	r2, r3, #5
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	4413      	add	r3, r2
 8003434:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	2b02      	cmp	r3, #2
 8003440:	f040 811a 	bne.w	8003678 <HCD_HC_OUT_IRQHandler+0x6a2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	015a      	lsls	r2, r3, #5
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	4413      	add	r3, r2
 800344c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	68fa      	ldr	r2, [r7, #12]
 8003454:	0151      	lsls	r1, r2, #5
 8003456:	693a      	ldr	r2, [r7, #16]
 8003458:	440a      	add	r2, r1
 800345a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800345e:	f023 0302 	bic.w	r3, r3, #2
 8003462:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003464:	6879      	ldr	r1, [r7, #4]
 8003466:	68fa      	ldr	r2, [r7, #12]
 8003468:	4613      	mov	r3, r2
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	4413      	add	r3, r2
 800346e:	00db      	lsls	r3, r3, #3
 8003470:	440b      	add	r3, r1
 8003472:	335d      	adds	r3, #93	; 0x5d
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	2b01      	cmp	r3, #1
 8003478:	d137      	bne.n	80034ea <HCD_HC_OUT_IRQHandler+0x514>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800347a:	6879      	ldr	r1, [r7, #4]
 800347c:	68fa      	ldr	r2, [r7, #12]
 800347e:	4613      	mov	r3, r2
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	4413      	add	r3, r2
 8003484:	00db      	lsls	r3, r3, #3
 8003486:	440b      	add	r3, r1
 8003488:	335c      	adds	r3, #92	; 0x5c
 800348a:	2201      	movs	r2, #1
 800348c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800348e:	6879      	ldr	r1, [r7, #4]
 8003490:	68fa      	ldr	r2, [r7, #12]
 8003492:	4613      	mov	r3, r2
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	4413      	add	r3, r2
 8003498:	00db      	lsls	r3, r3, #3
 800349a:	440b      	add	r3, r1
 800349c:	333f      	adds	r3, #63	; 0x3f
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d00b      	beq.n	80034bc <HCD_HC_OUT_IRQHandler+0x4e6>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80034a4:	6879      	ldr	r1, [r7, #4]
 80034a6:	68fa      	ldr	r2, [r7, #12]
 80034a8:	4613      	mov	r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	4413      	add	r3, r2
 80034ae:	00db      	lsls	r3, r3, #3
 80034b0:	440b      	add	r3, r1
 80034b2:	333f      	adds	r3, #63	; 0x3f
 80034b4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80034b6:	2b03      	cmp	r3, #3
 80034b8:	f040 80c5 	bne.w	8003646 <HCD_HC_OUT_IRQHandler+0x670>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80034bc:	6879      	ldr	r1, [r7, #4]
 80034be:	68fa      	ldr	r2, [r7, #12]
 80034c0:	4613      	mov	r3, r2
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	4413      	add	r3, r2
 80034c6:	00db      	lsls	r3, r3, #3
 80034c8:	440b      	add	r3, r1
 80034ca:	3351      	adds	r3, #81	; 0x51
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	f083 0301 	eor.w	r3, r3, #1
 80034d2:	b2d8      	uxtb	r0, r3
 80034d4:	6879      	ldr	r1, [r7, #4]
 80034d6:	68fa      	ldr	r2, [r7, #12]
 80034d8:	4613      	mov	r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	4413      	add	r3, r2
 80034de:	00db      	lsls	r3, r3, #3
 80034e0:	440b      	add	r3, r1
 80034e2:	3351      	adds	r3, #81	; 0x51
 80034e4:	4602      	mov	r2, r0
 80034e6:	701a      	strb	r2, [r3, #0]
 80034e8:	e0ad      	b.n	8003646 <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80034ea:	6879      	ldr	r1, [r7, #4]
 80034ec:	68fa      	ldr	r2, [r7, #12]
 80034ee:	4613      	mov	r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	4413      	add	r3, r2
 80034f4:	00db      	lsls	r3, r3, #3
 80034f6:	440b      	add	r3, r1
 80034f8:	335d      	adds	r3, #93	; 0x5d
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	2b03      	cmp	r3, #3
 80034fe:	d10a      	bne.n	8003516 <HCD_HC_OUT_IRQHandler+0x540>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003500:	6879      	ldr	r1, [r7, #4]
 8003502:	68fa      	ldr	r2, [r7, #12]
 8003504:	4613      	mov	r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	4413      	add	r3, r2
 800350a:	00db      	lsls	r3, r3, #3
 800350c:	440b      	add	r3, r1
 800350e:	335c      	adds	r3, #92	; 0x5c
 8003510:	2202      	movs	r2, #2
 8003512:	701a      	strb	r2, [r3, #0]
 8003514:	e097      	b.n	8003646 <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003516:	6879      	ldr	r1, [r7, #4]
 8003518:	68fa      	ldr	r2, [r7, #12]
 800351a:	4613      	mov	r3, r2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	4413      	add	r3, r2
 8003520:	00db      	lsls	r3, r3, #3
 8003522:	440b      	add	r3, r1
 8003524:	335d      	adds	r3, #93	; 0x5d
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	2b04      	cmp	r3, #4
 800352a:	d10a      	bne.n	8003542 <HCD_HC_OUT_IRQHandler+0x56c>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800352c:	6879      	ldr	r1, [r7, #4]
 800352e:	68fa      	ldr	r2, [r7, #12]
 8003530:	4613      	mov	r3, r2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	4413      	add	r3, r2
 8003536:	00db      	lsls	r3, r3, #3
 8003538:	440b      	add	r3, r1
 800353a:	335c      	adds	r3, #92	; 0x5c
 800353c:	2202      	movs	r2, #2
 800353e:	701a      	strb	r2, [r3, #0]
 8003540:	e081      	b.n	8003646 <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003542:	6879      	ldr	r1, [r7, #4]
 8003544:	68fa      	ldr	r2, [r7, #12]
 8003546:	4613      	mov	r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	4413      	add	r3, r2
 800354c:	00db      	lsls	r3, r3, #3
 800354e:	440b      	add	r3, r1
 8003550:	335d      	adds	r3, #93	; 0x5d
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	2b05      	cmp	r3, #5
 8003556:	d10a      	bne.n	800356e <HCD_HC_OUT_IRQHandler+0x598>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003558:	6879      	ldr	r1, [r7, #4]
 800355a:	68fa      	ldr	r2, [r7, #12]
 800355c:	4613      	mov	r3, r2
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	4413      	add	r3, r2
 8003562:	00db      	lsls	r3, r3, #3
 8003564:	440b      	add	r3, r1
 8003566:	335c      	adds	r3, #92	; 0x5c
 8003568:	2205      	movs	r2, #5
 800356a:	701a      	strb	r2, [r3, #0]
 800356c:	e06b      	b.n	8003646 <HCD_HC_OUT_IRQHandler+0x670>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800356e:	6879      	ldr	r1, [r7, #4]
 8003570:	68fa      	ldr	r2, [r7, #12]
 8003572:	4613      	mov	r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	4413      	add	r3, r2
 8003578:	00db      	lsls	r3, r3, #3
 800357a:	440b      	add	r3, r1
 800357c:	335d      	adds	r3, #93	; 0x5d
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	2b06      	cmp	r3, #6
 8003582:	d00a      	beq.n	800359a <HCD_HC_OUT_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003584:	6879      	ldr	r1, [r7, #4]
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	4613      	mov	r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	4413      	add	r3, r2
 800358e:	00db      	lsls	r3, r3, #3
 8003590:	440b      	add	r3, r1
 8003592:	335d      	adds	r3, #93	; 0x5d
 8003594:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003596:	2b08      	cmp	r3, #8
 8003598:	d155      	bne.n	8003646 <HCD_HC_OUT_IRQHandler+0x670>
      hhcd->hc[ch_num].ErrCnt++;
 800359a:	6879      	ldr	r1, [r7, #4]
 800359c:	68fa      	ldr	r2, [r7, #12]
 800359e:	4613      	mov	r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	4413      	add	r3, r2
 80035a4:	00db      	lsls	r3, r3, #3
 80035a6:	440b      	add	r3, r1
 80035a8:	3358      	adds	r3, #88	; 0x58
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	1c59      	adds	r1, r3, #1
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	68fa      	ldr	r2, [r7, #12]
 80035b2:	4613      	mov	r3, r2
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	4413      	add	r3, r2
 80035b8:	00db      	lsls	r3, r3, #3
 80035ba:	4403      	add	r3, r0
 80035bc:	3358      	adds	r3, #88	; 0x58
 80035be:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80035c0:	6879      	ldr	r1, [r7, #4]
 80035c2:	68fa      	ldr	r2, [r7, #12]
 80035c4:	4613      	mov	r3, r2
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	4413      	add	r3, r2
 80035ca:	00db      	lsls	r3, r3, #3
 80035cc:	440b      	add	r3, r1
 80035ce:	3358      	adds	r3, #88	; 0x58
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2b03      	cmp	r3, #3
 80035d4:	d914      	bls.n	8003600 <HCD_HC_OUT_IRQHandler+0x62a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80035d6:	6879      	ldr	r1, [r7, #4]
 80035d8:	68fa      	ldr	r2, [r7, #12]
 80035da:	4613      	mov	r3, r2
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	4413      	add	r3, r2
 80035e0:	00db      	lsls	r3, r3, #3
 80035e2:	440b      	add	r3, r1
 80035e4:	3358      	adds	r3, #88	; 0x58
 80035e6:	2200      	movs	r2, #0
 80035e8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80035ea:	6879      	ldr	r1, [r7, #4]
 80035ec:	68fa      	ldr	r2, [r7, #12]
 80035ee:	4613      	mov	r3, r2
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	4413      	add	r3, r2
 80035f4:	00db      	lsls	r3, r3, #3
 80035f6:	440b      	add	r3, r1
 80035f8:	335c      	adds	r3, #92	; 0x5c
 80035fa:	2204      	movs	r2, #4
 80035fc:	701a      	strb	r2, [r3, #0]
 80035fe:	e009      	b.n	8003614 <HCD_HC_OUT_IRQHandler+0x63e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003600:	6879      	ldr	r1, [r7, #4]
 8003602:	68fa      	ldr	r2, [r7, #12]
 8003604:	4613      	mov	r3, r2
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	4413      	add	r3, r2
 800360a:	00db      	lsls	r3, r3, #3
 800360c:	440b      	add	r3, r1
 800360e:	335c      	adds	r3, #92	; 0x5c
 8003610:	2202      	movs	r2, #2
 8003612:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	015a      	lsls	r2, r3, #5
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	4413      	add	r3, r2
 800361c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800362a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003632:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	015a      	lsls	r2, r3, #5
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	4413      	add	r3, r2
 800363c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003640:	461a      	mov	r2, r3
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	015a      	lsls	r2, r3, #5
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	4413      	add	r3, r2
 800364e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003652:	461a      	mov	r2, r3
 8003654:	2302      	movs	r3, #2
 8003656:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	b2d8      	uxtb	r0, r3
 800365c:	6879      	ldr	r1, [r7, #4]
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	4613      	mov	r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	4413      	add	r3, r2
 8003666:	00db      	lsls	r3, r3, #3
 8003668:	440b      	add	r3, r1
 800366a:	335c      	adds	r3, #92	; 0x5c
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	461a      	mov	r2, r3
 8003670:	4601      	mov	r1, r0
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f006 fb12 	bl	8009c9c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003678:	bf00      	nop
 800367a:	3718      	adds	r7, #24
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b08a      	sub	sp, #40	; 0x28
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800368e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003690:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	6a1b      	ldr	r3, [r3, #32]
 8003698:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	f003 030f 	and.w	r3, r3, #15
 80036a0:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	0c5b      	lsrs	r3, r3, #17
 80036a6:	f003 030f 	and.w	r3, r3, #15
 80036aa:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	091b      	lsrs	r3, r3, #4
 80036b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036b4:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d003      	beq.n	80036c4 <HCD_RXQLVL_IRQHandler+0x44>
 80036bc:	2b05      	cmp	r3, #5
 80036be:	f000 8082 	beq.w	80037c6 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80036c2:	e083      	b.n	80037cc <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d07f      	beq.n	80037ca <HCD_RXQLVL_IRQHandler+0x14a>
 80036ca:	6879      	ldr	r1, [r7, #4]
 80036cc:	69ba      	ldr	r2, [r7, #24]
 80036ce:	4613      	mov	r3, r2
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	4413      	add	r3, r2
 80036d4:	00db      	lsls	r3, r3, #3
 80036d6:	440b      	add	r3, r1
 80036d8:	3344      	adds	r3, #68	; 0x44
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d074      	beq.n	80037ca <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6818      	ldr	r0, [r3, #0]
 80036e4:	6879      	ldr	r1, [r7, #4]
 80036e6:	69ba      	ldr	r2, [r7, #24]
 80036e8:	4613      	mov	r3, r2
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	4413      	add	r3, r2
 80036ee:	00db      	lsls	r3, r3, #3
 80036f0:	440b      	add	r3, r1
 80036f2:	3344      	adds	r3, #68	; 0x44
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	693a      	ldr	r2, [r7, #16]
 80036f8:	b292      	uxth	r2, r2
 80036fa:	4619      	mov	r1, r3
 80036fc:	f003 fd9d 	bl	800723a <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003700:	6879      	ldr	r1, [r7, #4]
 8003702:	69ba      	ldr	r2, [r7, #24]
 8003704:	4613      	mov	r3, r2
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	4413      	add	r3, r2
 800370a:	00db      	lsls	r3, r3, #3
 800370c:	440b      	add	r3, r1
 800370e:	3344      	adds	r3, #68	; 0x44
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	18d1      	adds	r1, r2, r3
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	69ba      	ldr	r2, [r7, #24]
 800371a:	4613      	mov	r3, r2
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	4413      	add	r3, r2
 8003720:	00db      	lsls	r3, r3, #3
 8003722:	4403      	add	r3, r0
 8003724:	3344      	adds	r3, #68	; 0x44
 8003726:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8003728:	6879      	ldr	r1, [r7, #4]
 800372a:	69ba      	ldr	r2, [r7, #24]
 800372c:	4613      	mov	r3, r2
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	4413      	add	r3, r2
 8003732:	00db      	lsls	r3, r3, #3
 8003734:	440b      	add	r3, r1
 8003736:	334c      	adds	r3, #76	; 0x4c
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	18d1      	adds	r1, r2, r3
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	69ba      	ldr	r2, [r7, #24]
 8003742:	4613      	mov	r3, r2
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	4413      	add	r3, r2
 8003748:	00db      	lsls	r3, r3, #3
 800374a:	4403      	add	r3, r0
 800374c:	334c      	adds	r3, #76	; 0x4c
 800374e:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	015a      	lsls	r2, r3, #5
 8003754:	6a3b      	ldr	r3, [r7, #32]
 8003756:	4413      	add	r3, r2
 8003758:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800375c:	691a      	ldr	r2, [r3, #16]
 800375e:	4b1d      	ldr	r3, [pc, #116]	; (80037d4 <HCD_RXQLVL_IRQHandler+0x154>)
 8003760:	4013      	ands	r3, r2
 8003762:	2b00      	cmp	r3, #0
 8003764:	d031      	beq.n	80037ca <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	015a      	lsls	r2, r3, #5
 800376a:	6a3b      	ldr	r3, [r7, #32]
 800376c:	4413      	add	r3, r2
 800376e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800377c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003784:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	015a      	lsls	r2, r3, #5
 800378a:	6a3b      	ldr	r3, [r7, #32]
 800378c:	4413      	add	r3, r2
 800378e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003792:	461a      	mov	r2, r3
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8003798:	6879      	ldr	r1, [r7, #4]
 800379a:	69ba      	ldr	r2, [r7, #24]
 800379c:	4613      	mov	r3, r2
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	4413      	add	r3, r2
 80037a2:	00db      	lsls	r3, r3, #3
 80037a4:	440b      	add	r3, r1
 80037a6:	3350      	adds	r3, #80	; 0x50
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	f083 0301 	eor.w	r3, r3, #1
 80037ae:	b2d8      	uxtb	r0, r3
 80037b0:	6879      	ldr	r1, [r7, #4]
 80037b2:	69ba      	ldr	r2, [r7, #24]
 80037b4:	4613      	mov	r3, r2
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	4413      	add	r3, r2
 80037ba:	00db      	lsls	r3, r3, #3
 80037bc:	440b      	add	r3, r1
 80037be:	3350      	adds	r3, #80	; 0x50
 80037c0:	4602      	mov	r2, r0
 80037c2:	701a      	strb	r2, [r3, #0]
      break;
 80037c4:	e001      	b.n	80037ca <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 80037c6:	bf00      	nop
 80037c8:	e000      	b.n	80037cc <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80037ca:	bf00      	nop
  }
}
 80037cc:	bf00      	nop
 80037ce:	3728      	adds	r7, #40	; 0x28
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	1ff80000 	.word	0x1ff80000

080037d8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b086      	sub	sp, #24
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003804:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f003 0302 	and.w	r3, r3, #2
 800380c:	2b02      	cmp	r3, #2
 800380e:	d10b      	bne.n	8003828 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f003 0301 	and.w	r3, r3, #1
 8003816:	2b01      	cmp	r3, #1
 8003818:	d102      	bne.n	8003820 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f006 fa22 	bl	8009c64 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	f043 0302 	orr.w	r3, r3, #2
 8003826:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f003 0308 	and.w	r3, r3, #8
 800382e:	2b08      	cmp	r3, #8
 8003830:	d132      	bne.n	8003898 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	f043 0308 	orr.w	r3, r3, #8
 8003838:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f003 0304 	and.w	r3, r3, #4
 8003840:	2b04      	cmp	r3, #4
 8003842:	d126      	bne.n	8003892 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	699b      	ldr	r3, [r3, #24]
 8003848:	2b02      	cmp	r3, #2
 800384a:	d113      	bne.n	8003874 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003852:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003856:	d106      	bne.n	8003866 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2102      	movs	r1, #2
 800385e:	4618      	mov	r0, r3
 8003860:	f003 fde8 	bl	8007434 <USB_InitFSLSPClkSel>
 8003864:	e011      	b.n	800388a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2101      	movs	r1, #1
 800386c:	4618      	mov	r0, r3
 800386e:	f003 fde1 	bl	8007434 <USB_InitFSLSPClkSel>
 8003872:	e00a      	b.n	800388a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	2b01      	cmp	r3, #1
 800387a:	d106      	bne.n	800388a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003882:	461a      	mov	r2, r3
 8003884:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003888:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f006 fa14 	bl	8009cb8 <HAL_HCD_PortEnabled_Callback>
 8003890:	e002      	b.n	8003898 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f006 fa1e 	bl	8009cd4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f003 0320 	and.w	r3, r3, #32
 800389e:	2b20      	cmp	r3, #32
 80038a0:	d103      	bne.n	80038aa <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	f043 0320 	orr.w	r3, r3, #32
 80038a8:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80038b0:	461a      	mov	r2, r3
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	6013      	str	r3, [r2, #0]
}
 80038b6:	bf00      	nop
 80038b8:	3718      	adds	r7, #24
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}

080038be <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038be:	b580      	push	{r7, lr}
 80038c0:	b082      	sub	sp, #8
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d101      	bne.n	80038d0 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e081      	b.n	80039d4 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d106      	bne.n	80038ea <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f7fd fa67 	bl	8000db8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2224      	movs	r2, #36	; 0x24
 80038ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f022 0201 	bic.w	r2, r2, #1
 8003900:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685a      	ldr	r2, [r3, #4]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800390e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	689a      	ldr	r2, [r3, #8]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800391e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	2b01      	cmp	r3, #1
 8003926:	d107      	bne.n	8003938 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	689a      	ldr	r2, [r3, #8]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003934:	609a      	str	r2, [r3, #8]
 8003936:	e006      	b.n	8003946 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	689a      	ldr	r2, [r3, #8]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003944:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	2b02      	cmp	r3, #2
 800394c:	d104      	bne.n	8003958 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003956:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	6812      	ldr	r2, [r2, #0]
 8003962:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003966:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800396a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	68da      	ldr	r2, [r3, #12]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800397a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	691a      	ldr	r2, [r3, #16]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	695b      	ldr	r3, [r3, #20]
 8003984:	ea42 0103 	orr.w	r1, r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	699b      	ldr	r3, [r3, #24]
 800398c:	021a      	lsls	r2, r3, #8
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	430a      	orrs	r2, r1
 8003994:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	69d9      	ldr	r1, [r3, #28]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a1a      	ldr	r2, [r3, #32]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	430a      	orrs	r2, r1
 80039a4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f042 0201 	orr.w	r2, r2, #1
 80039b4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2220      	movs	r2, #32
 80039c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80039d2:	2300      	movs	r3, #0
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3708      	adds	r7, #8
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	2b20      	cmp	r3, #32
 80039f0:	d138      	bne.n	8003a64 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d101      	bne.n	8003a00 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80039fc:	2302      	movs	r3, #2
 80039fe:	e032      	b.n	8003a66 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2224      	movs	r2, #36	; 0x24
 8003a0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f022 0201 	bic.w	r2, r2, #1
 8003a1e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003a2e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	6819      	ldr	r1, [r3, #0]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	683a      	ldr	r2, [r7, #0]
 8003a3c:	430a      	orrs	r2, r1
 8003a3e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f042 0201 	orr.w	r2, r2, #1
 8003a4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2220      	movs	r2, #32
 8003a54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a60:	2300      	movs	r3, #0
 8003a62:	e000      	b.n	8003a66 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003a64:	2302      	movs	r3, #2
  }
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	370c      	adds	r7, #12
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr

08003a72 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003a72:	b480      	push	{r7}
 8003a74:	b085      	sub	sp, #20
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
 8003a7a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	2b20      	cmp	r3, #32
 8003a86:	d139      	bne.n	8003afc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d101      	bne.n	8003a96 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003a92:	2302      	movs	r3, #2
 8003a94:	e033      	b.n	8003afe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2224      	movs	r2, #36	; 0x24
 8003aa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f022 0201 	bic.w	r2, r2, #1
 8003ab4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003ac4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	021b      	lsls	r3, r3, #8
 8003aca:	68fa      	ldr	r2, [r7, #12]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68fa      	ldr	r2, [r7, #12]
 8003ad6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f042 0201 	orr.w	r2, r2, #1
 8003ae6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2220      	movs	r2, #32
 8003aec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003af8:	2300      	movs	r3, #0
 8003afa:	e000      	b.n	8003afe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003afc:	2302      	movs	r3, #2
  }
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3714      	adds	r7, #20
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
	...

08003b0c <HAL_LCD_Init>:
  * @note   This function can be used only when the LCD is disabled.
  * @param hlcd LCD handle
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Init(LCD_HandleTypeDef *hlcd)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b086      	sub	sp, #24
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t counter;
  HAL_StatusTypeDef status;

  /* Check the LCD handle allocation */
  if (hlcd == NULL)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d101      	bne.n	8003b1e <HAL_LCD_Init+0x12>
  {
    return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e0af      	b.n	8003c7e <HAL_LCD_Init+0x172>
  assert_param(IS_LCD_CONTRAST(hlcd->Init.Contrast));
  assert_param(IS_LCD_BLINK_FREQUENCY(hlcd->Init.BlinkFrequency));
  assert_param(IS_LCD_BLINK_MODE(hlcd->Init.BlinkMode));
  assert_param(IS_LCD_MUX_SEGMENT(hlcd->Init.MuxSegment));

  if (hlcd->State == HAL_LCD_STATE_RESET)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d106      	bne.n	8003b38 <HAL_LCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hlcd->Lock = HAL_UNLOCKED;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize the low level hardware (MSP) */
    HAL_LCD_MspInit(hlcd);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f7fd f9b4 	bl	8000ea0 <HAL_LCD_MspInit>
  }

  hlcd->State = HAL_LCD_STATE_BUSY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2202      	movs	r2, #2
 8003b3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable the peripheral */
  __HAL_LCD_DISABLE(hlcd);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f022 0201 	bic.w	r2, r2, #1
 8003b4e:	601a      	str	r2, [r3, #0]

  /* Clear the LCD_RAM registers and enable the display request by setting the UDR bit
     in the LCD_SR register */
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8003b50:	2300      	movs	r3, #0
 8003b52:	617b      	str	r3, [r7, #20]
 8003b54:	e00a      	b.n	8003b6c <HAL_LCD_Init+0x60>
  {
    hlcd->Instance->RAM[counter] = 0;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	3304      	adds	r3, #4
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	4413      	add	r3, r2
 8003b62:	2200      	movs	r2, #0
 8003b64:	605a      	str	r2, [r3, #4]
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	3301      	adds	r3, #1
 8003b6a:	617b      	str	r3, [r7, #20]
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	2b0f      	cmp	r3, #15
 8003b70:	d9f1      	bls.n	8003b56 <HAL_LCD_Init+0x4a>
  }
  /* Enable the display request */
  hlcd->Instance->SR |= LCD_SR_UDR;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	689a      	ldr	r2, [r3, #8]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f042 0204 	orr.w	r2, r2, #4
 8003b80:	609a      	str	r2, [r3, #8]
     Set BLINKF[2:0] bits according to hlcd->Init.BlinkFrequency value
     Set DEAD[2:0] bits according to hlcd->Init.DeadTime value
     Set PON[2:0] bits according to hlcd->Init.PulseOnDuration value
     Set CC[2:0] bits according to hlcd->Init.Contrast value
     Set HD bit according to hlcd->Init.HighDrive value */
  MODIFY_REG(hlcd->Instance->FCR, \
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	685a      	ldr	r2, [r3, #4]
 8003b88:	4b3f      	ldr	r3, [pc, #252]	; (8003c88 <HAL_LCD_Init+0x17c>)
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	6851      	ldr	r1, [r2, #4]
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	6892      	ldr	r2, [r2, #8]
 8003b94:	4311      	orrs	r1, r2
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003b9a:	4311      	orrs	r1, r2
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003ba0:	4311      	orrs	r1, r2
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	69d2      	ldr	r2, [r2, #28]
 8003ba6:	4311      	orrs	r1, r2
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	6a12      	ldr	r2, [r2, #32]
 8003bac:	4311      	orrs	r1, r2
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	6992      	ldr	r2, [r2, #24]
 8003bb2:	4311      	orrs	r1, r2
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003bb8:	4311      	orrs	r1, r2
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	6812      	ldr	r2, [r2, #0]
 8003bbe:	430b      	orrs	r3, r1
 8003bc0:	6053      	str	r3, [r2, #4]
              hlcd->Init.DeadTime | hlcd->Init.PulseOnDuration | hlcd->Init.Contrast | hlcd->Init.HighDrive));

  /* Wait until LCD Frame Control Register Synchronization flag (FCRSF) is set in the LCD_SR register
     This bit is set by hardware each time the LCD_FCR register is updated in the LCDCLK
     domain. It is cleared by hardware when writing to the LCD_FCR register.*/
  status = LCD_WaitForSynchro(hlcd);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 f862 	bl	8003c8c <LCD_WaitForSynchro>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	74fb      	strb	r3, [r7, #19]
  if (status != HAL_OK)
 8003bcc:	7cfb      	ldrb	r3, [r7, #19]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d001      	beq.n	8003bd6 <HAL_LCD_Init+0xca>
  {
    return status;
 8003bd2:	7cfb      	ldrb	r3, [r7, #19]
 8003bd4:	e053      	b.n	8003c7e <HAL_LCD_Init+0x172>
  /* Configure the LCD Duty, Bias, Voltage Source, Dead Time, Pulse On Duration and Contrast:
     Set DUTY[2:0] bits according to hlcd->Init.Duty value
     Set BIAS[1:0] bits according to hlcd->Init.Bias value
     Set VSEL bit according to hlcd->Init.VoltageSource value
     Set MUX_SEG bit according to hlcd->Init.MuxSegment value */
  MODIFY_REG(hlcd->Instance->CR, \
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f023 01fe 	bic.w	r1, r3, #254	; 0xfe
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	68da      	ldr	r2, [r3, #12]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	691b      	ldr	r3, [r3, #16]
 8003be8:	431a      	orrs	r2, r3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	695b      	ldr	r3, [r3, #20]
 8003bee:	431a      	orrs	r2, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf4:	431a      	orrs	r2, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	430a      	orrs	r2, r1
 8003bfc:	601a      	str	r2, [r3, #0]
             (LCD_CR_DUTY | LCD_CR_BIAS | LCD_CR_VSEL | LCD_CR_MUX_SEG), \
             (hlcd->Init.Duty | hlcd->Init.Bias | hlcd->Init.VoltageSource | hlcd->Init.MuxSegment));

  /* Enable the peripheral */
  __HAL_LCD_ENABLE(hlcd);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f042 0201 	orr.w	r2, r2, #1
 8003c0c:	601a      	str	r2, [r3, #0]

  /* Get timeout */
  tickstart = HAL_GetTick();
 8003c0e:	f7fd fceb 	bl	80015e8 <HAL_GetTick>
 8003c12:	60f8      	str	r0, [r7, #12]

  /* Wait Until the LCD is enabled */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 8003c14:	e00c      	b.n	8003c30 <HAL_LCD_Init+0x124>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8003c16:	f7fd fce7 	bl	80015e8 <HAL_GetTick>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c24:	d904      	bls.n	8003c30 <HAL_LCD_Init+0x124>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_ENS;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2208      	movs	r2, #8
 8003c2a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	e026      	b.n	8003c7e <HAL_LCD_Init+0x172>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f003 0301 	and.w	r3, r3, #1
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d1eb      	bne.n	8003c16 <HAL_LCD_Init+0x10a>
    }
  }

  /* Get timeout */
  tickstart = HAL_GetTick();
 8003c3e:	f7fd fcd3 	bl	80015e8 <HAL_GetTick>
 8003c42:	60f8      	str	r0, [r7, #12]

  /*!< Wait Until the LCD Booster is ready */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 8003c44:	e00c      	b.n	8003c60 <HAL_LCD_Init+0x154>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8003c46:	f7fd fccf 	bl	80015e8 <HAL_GetTick>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c54:	d904      	bls.n	8003c60 <HAL_LCD_Init+0x154>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_RDY;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2210      	movs	r2, #16
 8003c5a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	e00e      	b.n	8003c7e <HAL_LCD_Init+0x172>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	f003 0310 	and.w	r3, r3, #16
 8003c6a:	2b10      	cmp	r3, #16
 8003c6c:	d1eb      	bne.n	8003c46 <HAL_LCD_Init+0x13a>
    }
  }

  /* Initialize the LCD state */
  hlcd->ErrorCode = HAL_LCD_ERROR_NONE;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	639a      	str	r2, [r3, #56]	; 0x38
  hlcd->State = HAL_LCD_STATE_READY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return status;
 8003c7c:	7cfb      	ldrb	r3, [r7, #19]
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3718      	adds	r7, #24
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	fc00000e 	.word	0xfc00000e

08003c8c <LCD_WaitForSynchro>:
  * @brief  Wait until the LCD FCR register is synchronized in the LCDCLK domain.
  *   This function must be called after any write operation to LCD_FCR register.
  * @retval None
  */
HAL_StatusTypeDef LCD_WaitForSynchro(LCD_HandleTypeDef *hlcd)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Get timeout */
  tickstart = HAL_GetTick();
 8003c94:	f7fd fca8 	bl	80015e8 <HAL_GetTick>
 8003c98:	60f8      	str	r0, [r7, #12]

  /* Loop until FCRSF flag is set */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 8003c9a:	e00c      	b.n	8003cb6 <LCD_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8003c9c:	f7fd fca4 	bl	80015e8 <HAL_GetTick>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003caa:	d904      	bls.n	8003cb6 <LCD_WaitForSynchro+0x2a>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_FCRSF;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e007      	b.n	8003cc6 <LCD_WaitForSynchro+0x3a>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	f003 0320 	and.w	r3, r3, #32
 8003cc0:	2b20      	cmp	r3, #32
 8003cc2:	d1eb      	bne.n	8003c9c <LCD_WaitForSynchro+0x10>
    }
  }

  return HAL_OK;
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3710      	adds	r7, #16
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
	...

08003cd0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cd4:	4b05      	ldr	r3, [pc, #20]	; (8003cec <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a04      	ldr	r2, [pc, #16]	; (8003cec <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003cda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cde:	6013      	str	r3, [r2, #0]
}
 8003ce0:	bf00      	nop
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	40007000 	.word	0x40007000

08003cf0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003cf4:	4b04      	ldr	r3, [pc, #16]	; (8003d08 <HAL_PWREx_GetVoltageRange+0x18>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
 8003d06:	bf00      	nop
 8003d08:	40007000 	.word	0x40007000

08003d0c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b085      	sub	sp, #20
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d1a:	d130      	bne.n	8003d7e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d1c:	4b23      	ldr	r3, [pc, #140]	; (8003dac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d28:	d038      	beq.n	8003d9c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d2a:	4b20      	ldr	r3, [pc, #128]	; (8003dac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d32:	4a1e      	ldr	r2, [pc, #120]	; (8003dac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d34:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d38:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003d3a:	4b1d      	ldr	r3, [pc, #116]	; (8003db0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2232      	movs	r2, #50	; 0x32
 8003d40:	fb02 f303 	mul.w	r3, r2, r3
 8003d44:	4a1b      	ldr	r2, [pc, #108]	; (8003db4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003d46:	fba2 2303 	umull	r2, r3, r2, r3
 8003d4a:	0c9b      	lsrs	r3, r3, #18
 8003d4c:	3301      	adds	r3, #1
 8003d4e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d50:	e002      	b.n	8003d58 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	3b01      	subs	r3, #1
 8003d56:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d58:	4b14      	ldr	r3, [pc, #80]	; (8003dac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d5a:	695b      	ldr	r3, [r3, #20]
 8003d5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d64:	d102      	bne.n	8003d6c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d1f2      	bne.n	8003d52 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d6c:	4b0f      	ldr	r3, [pc, #60]	; (8003dac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d6e:	695b      	ldr	r3, [r3, #20]
 8003d70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d78:	d110      	bne.n	8003d9c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e00f      	b.n	8003d9e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d7e:	4b0b      	ldr	r3, [pc, #44]	; (8003dac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d8a:	d007      	beq.n	8003d9c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003d8c:	4b07      	ldr	r3, [pc, #28]	; (8003dac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d94:	4a05      	ldr	r2, [pc, #20]	; (8003dac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d9a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003d9c:	2300      	movs	r3, #0
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3714      	adds	r7, #20
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop
 8003dac:	40007000 	.word	0x40007000
 8003db0:	20000000 	.word	0x20000000
 8003db4:	431bde83 	.word	0x431bde83

08003db8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003db8:	b480      	push	{r7}
 8003dba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003dbc:	4b05      	ldr	r3, [pc, #20]	; (8003dd4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	4a04      	ldr	r2, [pc, #16]	; (8003dd4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003dc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003dc6:	6053      	str	r3, [r2, #4]
}
 8003dc8:	bf00      	nop
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr
 8003dd2:	bf00      	nop
 8003dd4:	40007000 	.word	0x40007000

08003dd8 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b086      	sub	sp, #24
 8003ddc:	af02      	add	r7, sp, #8
 8003dde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003de0:	f7fd fc02 	bl	80015e8 <HAL_GetTick>
 8003de4:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d101      	bne.n	8003df0 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e063      	b.n	8003eb8 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d10b      	bne.n	8003e14 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f7fd f8ed 	bl	8000fe4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8003e0a:	f241 3188 	movw	r1, #5000	; 0x1388
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 f858 	bl	8003ec4 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	3b01      	subs	r3, #1
 8003e24:	021a      	lsls	r2, r3, #8
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	430a      	orrs	r2, r1
 8003e2c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e32:	9300      	str	r3, [sp, #0]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2200      	movs	r2, #0
 8003e38:	2120      	movs	r1, #32
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 f850 	bl	8003ee0 <QSPI_WaitFlagStateUntilTimeout>
 8003e40:	4603      	mov	r3, r0
 8003e42:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8003e44:	7afb      	ldrb	r3, [r7, #11]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d131      	bne.n	8003eae <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003e54:	f023 0310 	bic.w	r3, r3, #16
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	6852      	ldr	r2, [r2, #4]
 8003e5c:	0611      	lsls	r1, r2, #24
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	68d2      	ldr	r2, [r2, #12]
 8003e62:	4311      	orrs	r1, r2
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	6812      	ldr	r2, [r2, #0]
 8003e68:	430b      	orrs	r3, r1
 8003e6a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	685a      	ldr	r2, [r3, #4]
 8003e72:	4b13      	ldr	r3, [pc, #76]	; (8003ec0 <HAL_QSPI_Init+0xe8>)
 8003e74:	4013      	ands	r3, r2
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	6912      	ldr	r2, [r2, #16]
 8003e7a:	0411      	lsls	r1, r2, #16
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	6952      	ldr	r2, [r2, #20]
 8003e80:	4311      	orrs	r1, r2
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	6992      	ldr	r2, [r2, #24]
 8003e86:	4311      	orrs	r1, r2
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	6812      	ldr	r2, [r2, #0]
 8003e8c:	430b      	orrs	r3, r1
 8003e8e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f042 0201 	orr.w	r2, r2, #1
 8003e9e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8003eb6:	7afb      	ldrb	r3, [r7, #11]
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3710      	adds	r7, #16
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	ffe0f8fe 	.word	0xffe0f8fe

08003ec4 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b083      	sub	sp, #12
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	683a      	ldr	r2, [r7, #0]
 8003ed2:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003ed4:	bf00      	nop
 8003ed6:	370c      	adds	r7, #12
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr

08003ee0 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	603b      	str	r3, [r7, #0]
 8003eec:	4613      	mov	r3, r2
 8003eee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003ef0:	e01a      	b.n	8003f28 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ef2:	69bb      	ldr	r3, [r7, #24]
 8003ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ef8:	d016      	beq.n	8003f28 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003efa:	f7fd fb75 	bl	80015e8 <HAL_GetTick>
 8003efe:	4602      	mov	r2, r0
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	69ba      	ldr	r2, [r7, #24]
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d302      	bcc.n	8003f10 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8003f0a:	69bb      	ldr	r3, [r7, #24]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d10b      	bne.n	8003f28 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2204      	movs	r2, #4
 8003f14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f1c:	f043 0201 	orr.w	r2, r3, #1
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e00e      	b.n	8003f46 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	689a      	ldr	r2, [r3, #8]
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	4013      	ands	r3, r2
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	bf14      	ite	ne
 8003f36:	2301      	movne	r3, #1
 8003f38:	2300      	moveq	r3, #0
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	79fb      	ldrb	r3, [r7, #7]
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d1d6      	bne.n	8003ef2 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3710      	adds	r7, #16
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
	...

08003f50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b088      	sub	sp, #32
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d101      	bne.n	8003f62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e3d4      	b.n	800470c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f62:	4ba1      	ldr	r3, [pc, #644]	; (80041e8 <HAL_RCC_OscConfig+0x298>)
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	f003 030c 	and.w	r3, r3, #12
 8003f6a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f6c:	4b9e      	ldr	r3, [pc, #632]	; (80041e8 <HAL_RCC_OscConfig+0x298>)
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	f003 0303 	and.w	r3, r3, #3
 8003f74:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0310 	and.w	r3, r3, #16
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	f000 80e4 	beq.w	800414c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003f84:	69bb      	ldr	r3, [r7, #24]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d007      	beq.n	8003f9a <HAL_RCC_OscConfig+0x4a>
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	2b0c      	cmp	r3, #12
 8003f8e:	f040 808b 	bne.w	80040a8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	f040 8087 	bne.w	80040a8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003f9a:	4b93      	ldr	r3, [pc, #588]	; (80041e8 <HAL_RCC_OscConfig+0x298>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0302 	and.w	r3, r3, #2
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d005      	beq.n	8003fb2 <HAL_RCC_OscConfig+0x62>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	699b      	ldr	r3, [r3, #24]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d101      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e3ac      	b.n	800470c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a1a      	ldr	r2, [r3, #32]
 8003fb6:	4b8c      	ldr	r3, [pc, #560]	; (80041e8 <HAL_RCC_OscConfig+0x298>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0308 	and.w	r3, r3, #8
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d004      	beq.n	8003fcc <HAL_RCC_OscConfig+0x7c>
 8003fc2:	4b89      	ldr	r3, [pc, #548]	; (80041e8 <HAL_RCC_OscConfig+0x298>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fca:	e005      	b.n	8003fd8 <HAL_RCC_OscConfig+0x88>
 8003fcc:	4b86      	ldr	r3, [pc, #536]	; (80041e8 <HAL_RCC_OscConfig+0x298>)
 8003fce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fd2:	091b      	lsrs	r3, r3, #4
 8003fd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d223      	bcs.n	8004024 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a1b      	ldr	r3, [r3, #32]
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f000 fd3f 	bl	8004a64 <RCC_SetFlashLatencyFromMSIRange>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d001      	beq.n	8003ff0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e38d      	b.n	800470c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ff0:	4b7d      	ldr	r3, [pc, #500]	; (80041e8 <HAL_RCC_OscConfig+0x298>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a7c      	ldr	r2, [pc, #496]	; (80041e8 <HAL_RCC_OscConfig+0x298>)
 8003ff6:	f043 0308 	orr.w	r3, r3, #8
 8003ffa:	6013      	str	r3, [r2, #0]
 8003ffc:	4b7a      	ldr	r3, [pc, #488]	; (80041e8 <HAL_RCC_OscConfig+0x298>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6a1b      	ldr	r3, [r3, #32]
 8004008:	4977      	ldr	r1, [pc, #476]	; (80041e8 <HAL_RCC_OscConfig+0x298>)
 800400a:	4313      	orrs	r3, r2
 800400c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800400e:	4b76      	ldr	r3, [pc, #472]	; (80041e8 <HAL_RCC_OscConfig+0x298>)
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	69db      	ldr	r3, [r3, #28]
 800401a:	021b      	lsls	r3, r3, #8
 800401c:	4972      	ldr	r1, [pc, #456]	; (80041e8 <HAL_RCC_OscConfig+0x298>)
 800401e:	4313      	orrs	r3, r2
 8004020:	604b      	str	r3, [r1, #4]
 8004022:	e025      	b.n	8004070 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004024:	4b70      	ldr	r3, [pc, #448]	; (80041e8 <HAL_RCC_OscConfig+0x298>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a6f      	ldr	r2, [pc, #444]	; (80041e8 <HAL_RCC_OscConfig+0x298>)
 800402a:	f043 0308 	orr.w	r3, r3, #8
 800402e:	6013      	str	r3, [r2, #0]
 8004030:	4b6d      	ldr	r3, [pc, #436]	; (80041e8 <HAL_RCC_OscConfig+0x298>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6a1b      	ldr	r3, [r3, #32]
 800403c:	496a      	ldr	r1, [pc, #424]	; (80041e8 <HAL_RCC_OscConfig+0x298>)
 800403e:	4313      	orrs	r3, r2
 8004040:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004042:	4b69      	ldr	r3, [pc, #420]	; (80041e8 <HAL_RCC_OscConfig+0x298>)
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	69db      	ldr	r3, [r3, #28]
 800404e:	021b      	lsls	r3, r3, #8
 8004050:	4965      	ldr	r1, [pc, #404]	; (80041e8 <HAL_RCC_OscConfig+0x298>)
 8004052:	4313      	orrs	r3, r2
 8004054:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d109      	bne.n	8004070 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a1b      	ldr	r3, [r3, #32]
 8004060:	4618      	mov	r0, r3
 8004062:	f000 fcff 	bl	8004a64 <RCC_SetFlashLatencyFromMSIRange>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d001      	beq.n	8004070 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e34d      	b.n	800470c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004070:	f000 fc36 	bl	80048e0 <HAL_RCC_GetSysClockFreq>
 8004074:	4601      	mov	r1, r0
 8004076:	4b5c      	ldr	r3, [pc, #368]	; (80041e8 <HAL_RCC_OscConfig+0x298>)
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	091b      	lsrs	r3, r3, #4
 800407c:	f003 030f 	and.w	r3, r3, #15
 8004080:	4a5a      	ldr	r2, [pc, #360]	; (80041ec <HAL_RCC_OscConfig+0x29c>)
 8004082:	5cd3      	ldrb	r3, [r2, r3]
 8004084:	f003 031f 	and.w	r3, r3, #31
 8004088:	fa21 f303 	lsr.w	r3, r1, r3
 800408c:	4a58      	ldr	r2, [pc, #352]	; (80041f0 <HAL_RCC_OscConfig+0x2a0>)
 800408e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004090:	4b58      	ldr	r3, [pc, #352]	; (80041f4 <HAL_RCC_OscConfig+0x2a4>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4618      	mov	r0, r3
 8004096:	f7fd fa57 	bl	8001548 <HAL_InitTick>
 800409a:	4603      	mov	r3, r0
 800409c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800409e:	7bfb      	ldrb	r3, [r7, #15]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d052      	beq.n	800414a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80040a4:	7bfb      	ldrb	r3, [r7, #15]
 80040a6:	e331      	b.n	800470c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	699b      	ldr	r3, [r3, #24]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d032      	beq.n	8004116 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80040b0:	4b4d      	ldr	r3, [pc, #308]	; (80041e8 <HAL_RCC_OscConfig+0x298>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a4c      	ldr	r2, [pc, #304]	; (80041e8 <HAL_RCC_OscConfig+0x298>)
 80040b6:	f043 0301 	orr.w	r3, r3, #1
 80040ba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80040bc:	f7fd fa94 	bl	80015e8 <HAL_GetTick>
 80040c0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80040c2:	e008      	b.n	80040d6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80040c4:	f7fd fa90 	bl	80015e8 <HAL_GetTick>
 80040c8:	4602      	mov	r2, r0
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d901      	bls.n	80040d6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e31a      	b.n	800470c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80040d6:	4b44      	ldr	r3, [pc, #272]	; (80041e8 <HAL_RCC_OscConfig+0x298>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 0302 	and.w	r3, r3, #2
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d0f0      	beq.n	80040c4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80040e2:	4b41      	ldr	r3, [pc, #260]	; (80041e8 <HAL_RCC_OscConfig+0x298>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a40      	ldr	r2, [pc, #256]	; (80041e8 <HAL_RCC_OscConfig+0x298>)
 80040e8:	f043 0308 	orr.w	r3, r3, #8
 80040ec:	6013      	str	r3, [r2, #0]
 80040ee:	4b3e      	ldr	r3, [pc, #248]	; (80041e8 <HAL_RCC_OscConfig+0x298>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a1b      	ldr	r3, [r3, #32]
 80040fa:	493b      	ldr	r1, [pc, #236]	; (80041e8 <HAL_RCC_OscConfig+0x298>)
 80040fc:	4313      	orrs	r3, r2
 80040fe:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004100:	4b39      	ldr	r3, [pc, #228]	; (80041e8 <HAL_RCC_OscConfig+0x298>)
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	69db      	ldr	r3, [r3, #28]
 800410c:	021b      	lsls	r3, r3, #8
 800410e:	4936      	ldr	r1, [pc, #216]	; (80041e8 <HAL_RCC_OscConfig+0x298>)
 8004110:	4313      	orrs	r3, r2
 8004112:	604b      	str	r3, [r1, #4]
 8004114:	e01a      	b.n	800414c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004116:	4b34      	ldr	r3, [pc, #208]	; (80041e8 <HAL_RCC_OscConfig+0x298>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a33      	ldr	r2, [pc, #204]	; (80041e8 <HAL_RCC_OscConfig+0x298>)
 800411c:	f023 0301 	bic.w	r3, r3, #1
 8004120:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004122:	f7fd fa61 	bl	80015e8 <HAL_GetTick>
 8004126:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004128:	e008      	b.n	800413c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800412a:	f7fd fa5d 	bl	80015e8 <HAL_GetTick>
 800412e:	4602      	mov	r2, r0
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	2b02      	cmp	r3, #2
 8004136:	d901      	bls.n	800413c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004138:	2303      	movs	r3, #3
 800413a:	e2e7      	b.n	800470c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800413c:	4b2a      	ldr	r3, [pc, #168]	; (80041e8 <HAL_RCC_OscConfig+0x298>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0302 	and.w	r3, r3, #2
 8004144:	2b00      	cmp	r3, #0
 8004146:	d1f0      	bne.n	800412a <HAL_RCC_OscConfig+0x1da>
 8004148:	e000      	b.n	800414c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800414a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0301 	and.w	r3, r3, #1
 8004154:	2b00      	cmp	r3, #0
 8004156:	d074      	beq.n	8004242 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004158:	69bb      	ldr	r3, [r7, #24]
 800415a:	2b08      	cmp	r3, #8
 800415c:	d005      	beq.n	800416a <HAL_RCC_OscConfig+0x21a>
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	2b0c      	cmp	r3, #12
 8004162:	d10e      	bne.n	8004182 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	2b03      	cmp	r3, #3
 8004168:	d10b      	bne.n	8004182 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800416a:	4b1f      	ldr	r3, [pc, #124]	; (80041e8 <HAL_RCC_OscConfig+0x298>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d064      	beq.n	8004240 <HAL_RCC_OscConfig+0x2f0>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d160      	bne.n	8004240 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e2c4      	b.n	800470c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800418a:	d106      	bne.n	800419a <HAL_RCC_OscConfig+0x24a>
 800418c:	4b16      	ldr	r3, [pc, #88]	; (80041e8 <HAL_RCC_OscConfig+0x298>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a15      	ldr	r2, [pc, #84]	; (80041e8 <HAL_RCC_OscConfig+0x298>)
 8004192:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004196:	6013      	str	r3, [r2, #0]
 8004198:	e01d      	b.n	80041d6 <HAL_RCC_OscConfig+0x286>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041a2:	d10c      	bne.n	80041be <HAL_RCC_OscConfig+0x26e>
 80041a4:	4b10      	ldr	r3, [pc, #64]	; (80041e8 <HAL_RCC_OscConfig+0x298>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a0f      	ldr	r2, [pc, #60]	; (80041e8 <HAL_RCC_OscConfig+0x298>)
 80041aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041ae:	6013      	str	r3, [r2, #0]
 80041b0:	4b0d      	ldr	r3, [pc, #52]	; (80041e8 <HAL_RCC_OscConfig+0x298>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a0c      	ldr	r2, [pc, #48]	; (80041e8 <HAL_RCC_OscConfig+0x298>)
 80041b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041ba:	6013      	str	r3, [r2, #0]
 80041bc:	e00b      	b.n	80041d6 <HAL_RCC_OscConfig+0x286>
 80041be:	4b0a      	ldr	r3, [pc, #40]	; (80041e8 <HAL_RCC_OscConfig+0x298>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a09      	ldr	r2, [pc, #36]	; (80041e8 <HAL_RCC_OscConfig+0x298>)
 80041c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041c8:	6013      	str	r3, [r2, #0]
 80041ca:	4b07      	ldr	r3, [pc, #28]	; (80041e8 <HAL_RCC_OscConfig+0x298>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a06      	ldr	r2, [pc, #24]	; (80041e8 <HAL_RCC_OscConfig+0x298>)
 80041d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041d4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d01c      	beq.n	8004218 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041de:	f7fd fa03 	bl	80015e8 <HAL_GetTick>
 80041e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041e4:	e011      	b.n	800420a <HAL_RCC_OscConfig+0x2ba>
 80041e6:	bf00      	nop
 80041e8:	40021000 	.word	0x40021000
 80041ec:	0800a2ec 	.word	0x0800a2ec
 80041f0:	20000000 	.word	0x20000000
 80041f4:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041f8:	f7fd f9f6 	bl	80015e8 <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	2b64      	cmp	r3, #100	; 0x64
 8004204:	d901      	bls.n	800420a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e280      	b.n	800470c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800420a:	4baf      	ldr	r3, [pc, #700]	; (80044c8 <HAL_RCC_OscConfig+0x578>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004212:	2b00      	cmp	r3, #0
 8004214:	d0f0      	beq.n	80041f8 <HAL_RCC_OscConfig+0x2a8>
 8004216:	e014      	b.n	8004242 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004218:	f7fd f9e6 	bl	80015e8 <HAL_GetTick>
 800421c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800421e:	e008      	b.n	8004232 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004220:	f7fd f9e2 	bl	80015e8 <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	2b64      	cmp	r3, #100	; 0x64
 800422c:	d901      	bls.n	8004232 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	e26c      	b.n	800470c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004232:	4ba5      	ldr	r3, [pc, #660]	; (80044c8 <HAL_RCC_OscConfig+0x578>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d1f0      	bne.n	8004220 <HAL_RCC_OscConfig+0x2d0>
 800423e:	e000      	b.n	8004242 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004240:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0302 	and.w	r3, r3, #2
 800424a:	2b00      	cmp	r3, #0
 800424c:	d060      	beq.n	8004310 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	2b04      	cmp	r3, #4
 8004252:	d005      	beq.n	8004260 <HAL_RCC_OscConfig+0x310>
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	2b0c      	cmp	r3, #12
 8004258:	d119      	bne.n	800428e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	2b02      	cmp	r3, #2
 800425e:	d116      	bne.n	800428e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004260:	4b99      	ldr	r3, [pc, #612]	; (80044c8 <HAL_RCC_OscConfig+0x578>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004268:	2b00      	cmp	r3, #0
 800426a:	d005      	beq.n	8004278 <HAL_RCC_OscConfig+0x328>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d101      	bne.n	8004278 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e249      	b.n	800470c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004278:	4b93      	ldr	r3, [pc, #588]	; (80044c8 <HAL_RCC_OscConfig+0x578>)
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	691b      	ldr	r3, [r3, #16]
 8004284:	061b      	lsls	r3, r3, #24
 8004286:	4990      	ldr	r1, [pc, #576]	; (80044c8 <HAL_RCC_OscConfig+0x578>)
 8004288:	4313      	orrs	r3, r2
 800428a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800428c:	e040      	b.n	8004310 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	68db      	ldr	r3, [r3, #12]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d023      	beq.n	80042de <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004296:	4b8c      	ldr	r3, [pc, #560]	; (80044c8 <HAL_RCC_OscConfig+0x578>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a8b      	ldr	r2, [pc, #556]	; (80044c8 <HAL_RCC_OscConfig+0x578>)
 800429c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042a2:	f7fd f9a1 	bl	80015e8 <HAL_GetTick>
 80042a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042a8:	e008      	b.n	80042bc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042aa:	f7fd f99d 	bl	80015e8 <HAL_GetTick>
 80042ae:	4602      	mov	r2, r0
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	2b02      	cmp	r3, #2
 80042b6:	d901      	bls.n	80042bc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80042b8:	2303      	movs	r3, #3
 80042ba:	e227      	b.n	800470c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042bc:	4b82      	ldr	r3, [pc, #520]	; (80044c8 <HAL_RCC_OscConfig+0x578>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d0f0      	beq.n	80042aa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042c8:	4b7f      	ldr	r3, [pc, #508]	; (80044c8 <HAL_RCC_OscConfig+0x578>)
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	691b      	ldr	r3, [r3, #16]
 80042d4:	061b      	lsls	r3, r3, #24
 80042d6:	497c      	ldr	r1, [pc, #496]	; (80044c8 <HAL_RCC_OscConfig+0x578>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	604b      	str	r3, [r1, #4]
 80042dc:	e018      	b.n	8004310 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042de:	4b7a      	ldr	r3, [pc, #488]	; (80044c8 <HAL_RCC_OscConfig+0x578>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a79      	ldr	r2, [pc, #484]	; (80044c8 <HAL_RCC_OscConfig+0x578>)
 80042e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ea:	f7fd f97d 	bl	80015e8 <HAL_GetTick>
 80042ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80042f0:	e008      	b.n	8004304 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042f2:	f7fd f979 	bl	80015e8 <HAL_GetTick>
 80042f6:	4602      	mov	r2, r0
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	2b02      	cmp	r3, #2
 80042fe:	d901      	bls.n	8004304 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004300:	2303      	movs	r3, #3
 8004302:	e203      	b.n	800470c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004304:	4b70      	ldr	r3, [pc, #448]	; (80044c8 <HAL_RCC_OscConfig+0x578>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800430c:	2b00      	cmp	r3, #0
 800430e:	d1f0      	bne.n	80042f2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0308 	and.w	r3, r3, #8
 8004318:	2b00      	cmp	r3, #0
 800431a:	d03c      	beq.n	8004396 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	695b      	ldr	r3, [r3, #20]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d01c      	beq.n	800435e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004324:	4b68      	ldr	r3, [pc, #416]	; (80044c8 <HAL_RCC_OscConfig+0x578>)
 8004326:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800432a:	4a67      	ldr	r2, [pc, #412]	; (80044c8 <HAL_RCC_OscConfig+0x578>)
 800432c:	f043 0301 	orr.w	r3, r3, #1
 8004330:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004334:	f7fd f958 	bl	80015e8 <HAL_GetTick>
 8004338:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800433a:	e008      	b.n	800434e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800433c:	f7fd f954 	bl	80015e8 <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	2b02      	cmp	r3, #2
 8004348:	d901      	bls.n	800434e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e1de      	b.n	800470c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800434e:	4b5e      	ldr	r3, [pc, #376]	; (80044c8 <HAL_RCC_OscConfig+0x578>)
 8004350:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004354:	f003 0302 	and.w	r3, r3, #2
 8004358:	2b00      	cmp	r3, #0
 800435a:	d0ef      	beq.n	800433c <HAL_RCC_OscConfig+0x3ec>
 800435c:	e01b      	b.n	8004396 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800435e:	4b5a      	ldr	r3, [pc, #360]	; (80044c8 <HAL_RCC_OscConfig+0x578>)
 8004360:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004364:	4a58      	ldr	r2, [pc, #352]	; (80044c8 <HAL_RCC_OscConfig+0x578>)
 8004366:	f023 0301 	bic.w	r3, r3, #1
 800436a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800436e:	f7fd f93b 	bl	80015e8 <HAL_GetTick>
 8004372:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004374:	e008      	b.n	8004388 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004376:	f7fd f937 	bl	80015e8 <HAL_GetTick>
 800437a:	4602      	mov	r2, r0
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	2b02      	cmp	r3, #2
 8004382:	d901      	bls.n	8004388 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004384:	2303      	movs	r3, #3
 8004386:	e1c1      	b.n	800470c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004388:	4b4f      	ldr	r3, [pc, #316]	; (80044c8 <HAL_RCC_OscConfig+0x578>)
 800438a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800438e:	f003 0302 	and.w	r3, r3, #2
 8004392:	2b00      	cmp	r3, #0
 8004394:	d1ef      	bne.n	8004376 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0304 	and.w	r3, r3, #4
 800439e:	2b00      	cmp	r3, #0
 80043a0:	f000 80a6 	beq.w	80044f0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043a4:	2300      	movs	r3, #0
 80043a6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80043a8:	4b47      	ldr	r3, [pc, #284]	; (80044c8 <HAL_RCC_OscConfig+0x578>)
 80043aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d10d      	bne.n	80043d0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043b4:	4b44      	ldr	r3, [pc, #272]	; (80044c8 <HAL_RCC_OscConfig+0x578>)
 80043b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043b8:	4a43      	ldr	r2, [pc, #268]	; (80044c8 <HAL_RCC_OscConfig+0x578>)
 80043ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043be:	6593      	str	r3, [r2, #88]	; 0x58
 80043c0:	4b41      	ldr	r3, [pc, #260]	; (80044c8 <HAL_RCC_OscConfig+0x578>)
 80043c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043c8:	60bb      	str	r3, [r7, #8]
 80043ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043cc:	2301      	movs	r3, #1
 80043ce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043d0:	4b3e      	ldr	r3, [pc, #248]	; (80044cc <HAL_RCC_OscConfig+0x57c>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d118      	bne.n	800440e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043dc:	4b3b      	ldr	r3, [pc, #236]	; (80044cc <HAL_RCC_OscConfig+0x57c>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a3a      	ldr	r2, [pc, #232]	; (80044cc <HAL_RCC_OscConfig+0x57c>)
 80043e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043e8:	f7fd f8fe 	bl	80015e8 <HAL_GetTick>
 80043ec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043ee:	e008      	b.n	8004402 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043f0:	f7fd f8fa 	bl	80015e8 <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d901      	bls.n	8004402 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e184      	b.n	800470c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004402:	4b32      	ldr	r3, [pc, #200]	; (80044cc <HAL_RCC_OscConfig+0x57c>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800440a:	2b00      	cmp	r3, #0
 800440c:	d0f0      	beq.n	80043f0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	2b01      	cmp	r3, #1
 8004414:	d108      	bne.n	8004428 <HAL_RCC_OscConfig+0x4d8>
 8004416:	4b2c      	ldr	r3, [pc, #176]	; (80044c8 <HAL_RCC_OscConfig+0x578>)
 8004418:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800441c:	4a2a      	ldr	r2, [pc, #168]	; (80044c8 <HAL_RCC_OscConfig+0x578>)
 800441e:	f043 0301 	orr.w	r3, r3, #1
 8004422:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004426:	e024      	b.n	8004472 <HAL_RCC_OscConfig+0x522>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	2b05      	cmp	r3, #5
 800442e:	d110      	bne.n	8004452 <HAL_RCC_OscConfig+0x502>
 8004430:	4b25      	ldr	r3, [pc, #148]	; (80044c8 <HAL_RCC_OscConfig+0x578>)
 8004432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004436:	4a24      	ldr	r2, [pc, #144]	; (80044c8 <HAL_RCC_OscConfig+0x578>)
 8004438:	f043 0304 	orr.w	r3, r3, #4
 800443c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004440:	4b21      	ldr	r3, [pc, #132]	; (80044c8 <HAL_RCC_OscConfig+0x578>)
 8004442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004446:	4a20      	ldr	r2, [pc, #128]	; (80044c8 <HAL_RCC_OscConfig+0x578>)
 8004448:	f043 0301 	orr.w	r3, r3, #1
 800444c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004450:	e00f      	b.n	8004472 <HAL_RCC_OscConfig+0x522>
 8004452:	4b1d      	ldr	r3, [pc, #116]	; (80044c8 <HAL_RCC_OscConfig+0x578>)
 8004454:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004458:	4a1b      	ldr	r2, [pc, #108]	; (80044c8 <HAL_RCC_OscConfig+0x578>)
 800445a:	f023 0301 	bic.w	r3, r3, #1
 800445e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004462:	4b19      	ldr	r3, [pc, #100]	; (80044c8 <HAL_RCC_OscConfig+0x578>)
 8004464:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004468:	4a17      	ldr	r2, [pc, #92]	; (80044c8 <HAL_RCC_OscConfig+0x578>)
 800446a:	f023 0304 	bic.w	r3, r3, #4
 800446e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d016      	beq.n	80044a8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800447a:	f7fd f8b5 	bl	80015e8 <HAL_GetTick>
 800447e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004480:	e00a      	b.n	8004498 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004482:	f7fd f8b1 	bl	80015e8 <HAL_GetTick>
 8004486:	4602      	mov	r2, r0
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004490:	4293      	cmp	r3, r2
 8004492:	d901      	bls.n	8004498 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	e139      	b.n	800470c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004498:	4b0b      	ldr	r3, [pc, #44]	; (80044c8 <HAL_RCC_OscConfig+0x578>)
 800449a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800449e:	f003 0302 	and.w	r3, r3, #2
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d0ed      	beq.n	8004482 <HAL_RCC_OscConfig+0x532>
 80044a6:	e01a      	b.n	80044de <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044a8:	f7fd f89e 	bl	80015e8 <HAL_GetTick>
 80044ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80044ae:	e00f      	b.n	80044d0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044b0:	f7fd f89a 	bl	80015e8 <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80044be:	4293      	cmp	r3, r2
 80044c0:	d906      	bls.n	80044d0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e122      	b.n	800470c <HAL_RCC_OscConfig+0x7bc>
 80044c6:	bf00      	nop
 80044c8:	40021000 	.word	0x40021000
 80044cc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80044d0:	4b90      	ldr	r3, [pc, #576]	; (8004714 <HAL_RCC_OscConfig+0x7c4>)
 80044d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044d6:	f003 0302 	and.w	r3, r3, #2
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d1e8      	bne.n	80044b0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044de:	7ffb      	ldrb	r3, [r7, #31]
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d105      	bne.n	80044f0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044e4:	4b8b      	ldr	r3, [pc, #556]	; (8004714 <HAL_RCC_OscConfig+0x7c4>)
 80044e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044e8:	4a8a      	ldr	r2, [pc, #552]	; (8004714 <HAL_RCC_OscConfig+0x7c4>)
 80044ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044ee:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	f000 8108 	beq.w	800470a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044fe:	2b02      	cmp	r3, #2
 8004500:	f040 80d0 	bne.w	80046a4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004504:	4b83      	ldr	r3, [pc, #524]	; (8004714 <HAL_RCC_OscConfig+0x7c4>)
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	f003 0203 	and.w	r2, r3, #3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004514:	429a      	cmp	r2, r3
 8004516:	d130      	bne.n	800457a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004522:	3b01      	subs	r3, #1
 8004524:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004526:	429a      	cmp	r2, r3
 8004528:	d127      	bne.n	800457a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004534:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004536:	429a      	cmp	r2, r3
 8004538:	d11f      	bne.n	800457a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004544:	2a07      	cmp	r2, #7
 8004546:	bf14      	ite	ne
 8004548:	2201      	movne	r2, #1
 800454a:	2200      	moveq	r2, #0
 800454c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800454e:	4293      	cmp	r3, r2
 8004550:	d113      	bne.n	800457a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800455c:	085b      	lsrs	r3, r3, #1
 800455e:	3b01      	subs	r3, #1
 8004560:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004562:	429a      	cmp	r2, r3
 8004564:	d109      	bne.n	800457a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004570:	085b      	lsrs	r3, r3, #1
 8004572:	3b01      	subs	r3, #1
 8004574:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004576:	429a      	cmp	r2, r3
 8004578:	d06e      	beq.n	8004658 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	2b0c      	cmp	r3, #12
 800457e:	d069      	beq.n	8004654 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004580:	4b64      	ldr	r3, [pc, #400]	; (8004714 <HAL_RCC_OscConfig+0x7c4>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004588:	2b00      	cmp	r3, #0
 800458a:	d105      	bne.n	8004598 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800458c:	4b61      	ldr	r3, [pc, #388]	; (8004714 <HAL_RCC_OscConfig+0x7c4>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004594:	2b00      	cmp	r3, #0
 8004596:	d001      	beq.n	800459c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e0b7      	b.n	800470c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800459c:	4b5d      	ldr	r3, [pc, #372]	; (8004714 <HAL_RCC_OscConfig+0x7c4>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a5c      	ldr	r2, [pc, #368]	; (8004714 <HAL_RCC_OscConfig+0x7c4>)
 80045a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045a6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80045a8:	f7fd f81e 	bl	80015e8 <HAL_GetTick>
 80045ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045ae:	e008      	b.n	80045c2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045b0:	f7fd f81a 	bl	80015e8 <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d901      	bls.n	80045c2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e0a4      	b.n	800470c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045c2:	4b54      	ldr	r3, [pc, #336]	; (8004714 <HAL_RCC_OscConfig+0x7c4>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d1f0      	bne.n	80045b0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045ce:	4b51      	ldr	r3, [pc, #324]	; (8004714 <HAL_RCC_OscConfig+0x7c4>)
 80045d0:	68da      	ldr	r2, [r3, #12]
 80045d2:	4b51      	ldr	r3, [pc, #324]	; (8004718 <HAL_RCC_OscConfig+0x7c8>)
 80045d4:	4013      	ands	r3, r2
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80045de:	3a01      	subs	r2, #1
 80045e0:	0112      	lsls	r2, r2, #4
 80045e2:	4311      	orrs	r1, r2
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80045e8:	0212      	lsls	r2, r2, #8
 80045ea:	4311      	orrs	r1, r2
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80045f0:	0852      	lsrs	r2, r2, #1
 80045f2:	3a01      	subs	r2, #1
 80045f4:	0552      	lsls	r2, r2, #21
 80045f6:	4311      	orrs	r1, r2
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80045fc:	0852      	lsrs	r2, r2, #1
 80045fe:	3a01      	subs	r2, #1
 8004600:	0652      	lsls	r2, r2, #25
 8004602:	4311      	orrs	r1, r2
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004608:	0912      	lsrs	r2, r2, #4
 800460a:	0452      	lsls	r2, r2, #17
 800460c:	430a      	orrs	r2, r1
 800460e:	4941      	ldr	r1, [pc, #260]	; (8004714 <HAL_RCC_OscConfig+0x7c4>)
 8004610:	4313      	orrs	r3, r2
 8004612:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004614:	4b3f      	ldr	r3, [pc, #252]	; (8004714 <HAL_RCC_OscConfig+0x7c4>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a3e      	ldr	r2, [pc, #248]	; (8004714 <HAL_RCC_OscConfig+0x7c4>)
 800461a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800461e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004620:	4b3c      	ldr	r3, [pc, #240]	; (8004714 <HAL_RCC_OscConfig+0x7c4>)
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	4a3b      	ldr	r2, [pc, #236]	; (8004714 <HAL_RCC_OscConfig+0x7c4>)
 8004626:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800462a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800462c:	f7fc ffdc 	bl	80015e8 <HAL_GetTick>
 8004630:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004632:	e008      	b.n	8004646 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004634:	f7fc ffd8 	bl	80015e8 <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	2b02      	cmp	r3, #2
 8004640:	d901      	bls.n	8004646 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e062      	b.n	800470c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004646:	4b33      	ldr	r3, [pc, #204]	; (8004714 <HAL_RCC_OscConfig+0x7c4>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d0f0      	beq.n	8004634 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004652:	e05a      	b.n	800470a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	e059      	b.n	800470c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004658:	4b2e      	ldr	r3, [pc, #184]	; (8004714 <HAL_RCC_OscConfig+0x7c4>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004660:	2b00      	cmp	r3, #0
 8004662:	d152      	bne.n	800470a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004664:	4b2b      	ldr	r3, [pc, #172]	; (8004714 <HAL_RCC_OscConfig+0x7c4>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a2a      	ldr	r2, [pc, #168]	; (8004714 <HAL_RCC_OscConfig+0x7c4>)
 800466a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800466e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004670:	4b28      	ldr	r3, [pc, #160]	; (8004714 <HAL_RCC_OscConfig+0x7c4>)
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	4a27      	ldr	r2, [pc, #156]	; (8004714 <HAL_RCC_OscConfig+0x7c4>)
 8004676:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800467a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800467c:	f7fc ffb4 	bl	80015e8 <HAL_GetTick>
 8004680:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004682:	e008      	b.n	8004696 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004684:	f7fc ffb0 	bl	80015e8 <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	2b02      	cmp	r3, #2
 8004690:	d901      	bls.n	8004696 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e03a      	b.n	800470c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004696:	4b1f      	ldr	r3, [pc, #124]	; (8004714 <HAL_RCC_OscConfig+0x7c4>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d0f0      	beq.n	8004684 <HAL_RCC_OscConfig+0x734>
 80046a2:	e032      	b.n	800470a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80046a4:	69bb      	ldr	r3, [r7, #24]
 80046a6:	2b0c      	cmp	r3, #12
 80046a8:	d02d      	beq.n	8004706 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046aa:	4b1a      	ldr	r3, [pc, #104]	; (8004714 <HAL_RCC_OscConfig+0x7c4>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a19      	ldr	r2, [pc, #100]	; (8004714 <HAL_RCC_OscConfig+0x7c4>)
 80046b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046b4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80046b6:	4b17      	ldr	r3, [pc, #92]	; (8004714 <HAL_RCC_OscConfig+0x7c4>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d105      	bne.n	80046ce <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80046c2:	4b14      	ldr	r3, [pc, #80]	; (8004714 <HAL_RCC_OscConfig+0x7c4>)
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	4a13      	ldr	r2, [pc, #76]	; (8004714 <HAL_RCC_OscConfig+0x7c4>)
 80046c8:	f023 0303 	bic.w	r3, r3, #3
 80046cc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80046ce:	4b11      	ldr	r3, [pc, #68]	; (8004714 <HAL_RCC_OscConfig+0x7c4>)
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	4a10      	ldr	r2, [pc, #64]	; (8004714 <HAL_RCC_OscConfig+0x7c4>)
 80046d4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80046d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046dc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046de:	f7fc ff83 	bl	80015e8 <HAL_GetTick>
 80046e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046e4:	e008      	b.n	80046f8 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046e6:	f7fc ff7f 	bl	80015e8 <HAL_GetTick>
 80046ea:	4602      	mov	r2, r0
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	1ad3      	subs	r3, r2, r3
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	d901      	bls.n	80046f8 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	e009      	b.n	800470c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046f8:	4b06      	ldr	r3, [pc, #24]	; (8004714 <HAL_RCC_OscConfig+0x7c4>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d1f0      	bne.n	80046e6 <HAL_RCC_OscConfig+0x796>
 8004704:	e001      	b.n	800470a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e000      	b.n	800470c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800470a:	2300      	movs	r3, #0
}
 800470c:	4618      	mov	r0, r3
 800470e:	3720      	adds	r7, #32
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}
 8004714:	40021000 	.word	0x40021000
 8004718:	f99d808c 	.word	0xf99d808c

0800471c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d101      	bne.n	8004730 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e0c8      	b.n	80048c2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004730:	4b66      	ldr	r3, [pc, #408]	; (80048cc <HAL_RCC_ClockConfig+0x1b0>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 0307 	and.w	r3, r3, #7
 8004738:	683a      	ldr	r2, [r7, #0]
 800473a:	429a      	cmp	r2, r3
 800473c:	d910      	bls.n	8004760 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800473e:	4b63      	ldr	r3, [pc, #396]	; (80048cc <HAL_RCC_ClockConfig+0x1b0>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f023 0207 	bic.w	r2, r3, #7
 8004746:	4961      	ldr	r1, [pc, #388]	; (80048cc <HAL_RCC_ClockConfig+0x1b0>)
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	4313      	orrs	r3, r2
 800474c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800474e:	4b5f      	ldr	r3, [pc, #380]	; (80048cc <HAL_RCC_ClockConfig+0x1b0>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 0307 	and.w	r3, r3, #7
 8004756:	683a      	ldr	r2, [r7, #0]
 8004758:	429a      	cmp	r2, r3
 800475a:	d001      	beq.n	8004760 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e0b0      	b.n	80048c2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0301 	and.w	r3, r3, #1
 8004768:	2b00      	cmp	r3, #0
 800476a:	d04c      	beq.n	8004806 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	2b03      	cmp	r3, #3
 8004772:	d107      	bne.n	8004784 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004774:	4b56      	ldr	r3, [pc, #344]	; (80048d0 <HAL_RCC_ClockConfig+0x1b4>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800477c:	2b00      	cmp	r3, #0
 800477e:	d121      	bne.n	80047c4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e09e      	b.n	80048c2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	2b02      	cmp	r3, #2
 800478a:	d107      	bne.n	800479c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800478c:	4b50      	ldr	r3, [pc, #320]	; (80048d0 <HAL_RCC_ClockConfig+0x1b4>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004794:	2b00      	cmp	r3, #0
 8004796:	d115      	bne.n	80047c4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e092      	b.n	80048c2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d107      	bne.n	80047b4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80047a4:	4b4a      	ldr	r3, [pc, #296]	; (80048d0 <HAL_RCC_ClockConfig+0x1b4>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 0302 	and.w	r3, r3, #2
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d109      	bne.n	80047c4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e086      	b.n	80048c2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047b4:	4b46      	ldr	r3, [pc, #280]	; (80048d0 <HAL_RCC_ClockConfig+0x1b4>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d101      	bne.n	80047c4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e07e      	b.n	80048c2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80047c4:	4b42      	ldr	r3, [pc, #264]	; (80048d0 <HAL_RCC_ClockConfig+0x1b4>)
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	f023 0203 	bic.w	r2, r3, #3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	493f      	ldr	r1, [pc, #252]	; (80048d0 <HAL_RCC_ClockConfig+0x1b4>)
 80047d2:	4313      	orrs	r3, r2
 80047d4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047d6:	f7fc ff07 	bl	80015e8 <HAL_GetTick>
 80047da:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047dc:	e00a      	b.n	80047f4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047de:	f7fc ff03 	bl	80015e8 <HAL_GetTick>
 80047e2:	4602      	mov	r2, r0
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d901      	bls.n	80047f4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80047f0:	2303      	movs	r3, #3
 80047f2:	e066      	b.n	80048c2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047f4:	4b36      	ldr	r3, [pc, #216]	; (80048d0 <HAL_RCC_ClockConfig+0x1b4>)
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	f003 020c 	and.w	r2, r3, #12
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	429a      	cmp	r2, r3
 8004804:	d1eb      	bne.n	80047de <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0302 	and.w	r3, r3, #2
 800480e:	2b00      	cmp	r3, #0
 8004810:	d008      	beq.n	8004824 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004812:	4b2f      	ldr	r3, [pc, #188]	; (80048d0 <HAL_RCC_ClockConfig+0x1b4>)
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	492c      	ldr	r1, [pc, #176]	; (80048d0 <HAL_RCC_ClockConfig+0x1b4>)
 8004820:	4313      	orrs	r3, r2
 8004822:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004824:	4b29      	ldr	r3, [pc, #164]	; (80048cc <HAL_RCC_ClockConfig+0x1b0>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 0307 	and.w	r3, r3, #7
 800482c:	683a      	ldr	r2, [r7, #0]
 800482e:	429a      	cmp	r2, r3
 8004830:	d210      	bcs.n	8004854 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004832:	4b26      	ldr	r3, [pc, #152]	; (80048cc <HAL_RCC_ClockConfig+0x1b0>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f023 0207 	bic.w	r2, r3, #7
 800483a:	4924      	ldr	r1, [pc, #144]	; (80048cc <HAL_RCC_ClockConfig+0x1b0>)
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	4313      	orrs	r3, r2
 8004840:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004842:	4b22      	ldr	r3, [pc, #136]	; (80048cc <HAL_RCC_ClockConfig+0x1b0>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 0307 	and.w	r3, r3, #7
 800484a:	683a      	ldr	r2, [r7, #0]
 800484c:	429a      	cmp	r2, r3
 800484e:	d001      	beq.n	8004854 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	e036      	b.n	80048c2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0304 	and.w	r3, r3, #4
 800485c:	2b00      	cmp	r3, #0
 800485e:	d008      	beq.n	8004872 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004860:	4b1b      	ldr	r3, [pc, #108]	; (80048d0 <HAL_RCC_ClockConfig+0x1b4>)
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	4918      	ldr	r1, [pc, #96]	; (80048d0 <HAL_RCC_ClockConfig+0x1b4>)
 800486e:	4313      	orrs	r3, r2
 8004870:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 0308 	and.w	r3, r3, #8
 800487a:	2b00      	cmp	r3, #0
 800487c:	d009      	beq.n	8004892 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800487e:	4b14      	ldr	r3, [pc, #80]	; (80048d0 <HAL_RCC_ClockConfig+0x1b4>)
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	691b      	ldr	r3, [r3, #16]
 800488a:	00db      	lsls	r3, r3, #3
 800488c:	4910      	ldr	r1, [pc, #64]	; (80048d0 <HAL_RCC_ClockConfig+0x1b4>)
 800488e:	4313      	orrs	r3, r2
 8004890:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004892:	f000 f825 	bl	80048e0 <HAL_RCC_GetSysClockFreq>
 8004896:	4601      	mov	r1, r0
 8004898:	4b0d      	ldr	r3, [pc, #52]	; (80048d0 <HAL_RCC_ClockConfig+0x1b4>)
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	091b      	lsrs	r3, r3, #4
 800489e:	f003 030f 	and.w	r3, r3, #15
 80048a2:	4a0c      	ldr	r2, [pc, #48]	; (80048d4 <HAL_RCC_ClockConfig+0x1b8>)
 80048a4:	5cd3      	ldrb	r3, [r2, r3]
 80048a6:	f003 031f 	and.w	r3, r3, #31
 80048aa:	fa21 f303 	lsr.w	r3, r1, r3
 80048ae:	4a0a      	ldr	r2, [pc, #40]	; (80048d8 <HAL_RCC_ClockConfig+0x1bc>)
 80048b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80048b2:	4b0a      	ldr	r3, [pc, #40]	; (80048dc <HAL_RCC_ClockConfig+0x1c0>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4618      	mov	r0, r3
 80048b8:	f7fc fe46 	bl	8001548 <HAL_InitTick>
 80048bc:	4603      	mov	r3, r0
 80048be:	72fb      	strb	r3, [r7, #11]

  return status;
 80048c0:	7afb      	ldrb	r3, [r7, #11]
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3710      	adds	r7, #16
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	40022000 	.word	0x40022000
 80048d0:	40021000 	.word	0x40021000
 80048d4:	0800a2ec 	.word	0x0800a2ec
 80048d8:	20000000 	.word	0x20000000
 80048dc:	20000004 	.word	0x20000004

080048e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b089      	sub	sp, #36	; 0x24
 80048e4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80048e6:	2300      	movs	r3, #0
 80048e8:	61fb      	str	r3, [r7, #28]
 80048ea:	2300      	movs	r3, #0
 80048ec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048ee:	4b3d      	ldr	r3, [pc, #244]	; (80049e4 <HAL_RCC_GetSysClockFreq+0x104>)
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	f003 030c 	and.w	r3, r3, #12
 80048f6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048f8:	4b3a      	ldr	r3, [pc, #232]	; (80049e4 <HAL_RCC_GetSysClockFreq+0x104>)
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	f003 0303 	and.w	r3, r3, #3
 8004900:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d005      	beq.n	8004914 <HAL_RCC_GetSysClockFreq+0x34>
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	2b0c      	cmp	r3, #12
 800490c:	d121      	bne.n	8004952 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2b01      	cmp	r3, #1
 8004912:	d11e      	bne.n	8004952 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004914:	4b33      	ldr	r3, [pc, #204]	; (80049e4 <HAL_RCC_GetSysClockFreq+0x104>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 0308 	and.w	r3, r3, #8
 800491c:	2b00      	cmp	r3, #0
 800491e:	d107      	bne.n	8004930 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004920:	4b30      	ldr	r3, [pc, #192]	; (80049e4 <HAL_RCC_GetSysClockFreq+0x104>)
 8004922:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004926:	0a1b      	lsrs	r3, r3, #8
 8004928:	f003 030f 	and.w	r3, r3, #15
 800492c:	61fb      	str	r3, [r7, #28]
 800492e:	e005      	b.n	800493c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004930:	4b2c      	ldr	r3, [pc, #176]	; (80049e4 <HAL_RCC_GetSysClockFreq+0x104>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	091b      	lsrs	r3, r3, #4
 8004936:	f003 030f 	and.w	r3, r3, #15
 800493a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800493c:	4a2a      	ldr	r2, [pc, #168]	; (80049e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004944:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d10d      	bne.n	8004968 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800494c:	69fb      	ldr	r3, [r7, #28]
 800494e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004950:	e00a      	b.n	8004968 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	2b04      	cmp	r3, #4
 8004956:	d102      	bne.n	800495e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004958:	4b24      	ldr	r3, [pc, #144]	; (80049ec <HAL_RCC_GetSysClockFreq+0x10c>)
 800495a:	61bb      	str	r3, [r7, #24]
 800495c:	e004      	b.n	8004968 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	2b08      	cmp	r3, #8
 8004962:	d101      	bne.n	8004968 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004964:	4b22      	ldr	r3, [pc, #136]	; (80049f0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004966:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	2b0c      	cmp	r3, #12
 800496c:	d133      	bne.n	80049d6 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800496e:	4b1d      	ldr	r3, [pc, #116]	; (80049e4 <HAL_RCC_GetSysClockFreq+0x104>)
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	f003 0303 	and.w	r3, r3, #3
 8004976:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	2b02      	cmp	r3, #2
 800497c:	d002      	beq.n	8004984 <HAL_RCC_GetSysClockFreq+0xa4>
 800497e:	2b03      	cmp	r3, #3
 8004980:	d003      	beq.n	800498a <HAL_RCC_GetSysClockFreq+0xaa>
 8004982:	e005      	b.n	8004990 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004984:	4b19      	ldr	r3, [pc, #100]	; (80049ec <HAL_RCC_GetSysClockFreq+0x10c>)
 8004986:	617b      	str	r3, [r7, #20]
      break;
 8004988:	e005      	b.n	8004996 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800498a:	4b19      	ldr	r3, [pc, #100]	; (80049f0 <HAL_RCC_GetSysClockFreq+0x110>)
 800498c:	617b      	str	r3, [r7, #20]
      break;
 800498e:	e002      	b.n	8004996 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	617b      	str	r3, [r7, #20]
      break;
 8004994:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004996:	4b13      	ldr	r3, [pc, #76]	; (80049e4 <HAL_RCC_GetSysClockFreq+0x104>)
 8004998:	68db      	ldr	r3, [r3, #12]
 800499a:	091b      	lsrs	r3, r3, #4
 800499c:	f003 0307 	and.w	r3, r3, #7
 80049a0:	3301      	adds	r3, #1
 80049a2:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80049a4:	4b0f      	ldr	r3, [pc, #60]	; (80049e4 <HAL_RCC_GetSysClockFreq+0x104>)
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	0a1b      	lsrs	r3, r3, #8
 80049aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049ae:	697a      	ldr	r2, [r7, #20]
 80049b0:	fb02 f203 	mul.w	r2, r2, r3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ba:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80049bc:	4b09      	ldr	r3, [pc, #36]	; (80049e4 <HAL_RCC_GetSysClockFreq+0x104>)
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	0e5b      	lsrs	r3, r3, #25
 80049c2:	f003 0303 	and.w	r3, r3, #3
 80049c6:	3301      	adds	r3, #1
 80049c8:	005b      	lsls	r3, r3, #1
 80049ca:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80049cc:	697a      	ldr	r2, [r7, #20]
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049d4:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80049d6:	69bb      	ldr	r3, [r7, #24]
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3724      	adds	r7, #36	; 0x24
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr
 80049e4:	40021000 	.word	0x40021000
 80049e8:	0800a304 	.word	0x0800a304
 80049ec:	00f42400 	.word	0x00f42400
 80049f0:	007a1200 	.word	0x007a1200

080049f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049f4:	b480      	push	{r7}
 80049f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049f8:	4b03      	ldr	r3, [pc, #12]	; (8004a08 <HAL_RCC_GetHCLKFreq+0x14>)
 80049fa:	681b      	ldr	r3, [r3, #0]
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr
 8004a06:	bf00      	nop
 8004a08:	20000000 	.word	0x20000000

08004a0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004a10:	f7ff fff0 	bl	80049f4 <HAL_RCC_GetHCLKFreq>
 8004a14:	4601      	mov	r1, r0
 8004a16:	4b06      	ldr	r3, [pc, #24]	; (8004a30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	0a1b      	lsrs	r3, r3, #8
 8004a1c:	f003 0307 	and.w	r3, r3, #7
 8004a20:	4a04      	ldr	r2, [pc, #16]	; (8004a34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004a22:	5cd3      	ldrb	r3, [r2, r3]
 8004a24:	f003 031f 	and.w	r3, r3, #31
 8004a28:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	40021000 	.word	0x40021000
 8004a34:	0800a2fc 	.word	0x0800a2fc

08004a38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004a3c:	f7ff ffda 	bl	80049f4 <HAL_RCC_GetHCLKFreq>
 8004a40:	4601      	mov	r1, r0
 8004a42:	4b06      	ldr	r3, [pc, #24]	; (8004a5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	0adb      	lsrs	r3, r3, #11
 8004a48:	f003 0307 	and.w	r3, r3, #7
 8004a4c:	4a04      	ldr	r2, [pc, #16]	; (8004a60 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004a4e:	5cd3      	ldrb	r3, [r2, r3]
 8004a50:	f003 031f 	and.w	r3, r3, #31
 8004a54:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	40021000 	.word	0x40021000
 8004a60:	0800a2fc 	.word	0x0800a2fc

08004a64 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b086      	sub	sp, #24
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004a70:	4b2a      	ldr	r3, [pc, #168]	; (8004b1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d003      	beq.n	8004a84 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004a7c:	f7ff f938 	bl	8003cf0 <HAL_PWREx_GetVoltageRange>
 8004a80:	6178      	str	r0, [r7, #20]
 8004a82:	e014      	b.n	8004aae <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a84:	4b25      	ldr	r3, [pc, #148]	; (8004b1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a88:	4a24      	ldr	r2, [pc, #144]	; (8004b1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a8e:	6593      	str	r3, [r2, #88]	; 0x58
 8004a90:	4b22      	ldr	r3, [pc, #136]	; (8004b1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a98:	60fb      	str	r3, [r7, #12]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004a9c:	f7ff f928 	bl	8003cf0 <HAL_PWREx_GetVoltageRange>
 8004aa0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004aa2:	4b1e      	ldr	r3, [pc, #120]	; (8004b1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aa6:	4a1d      	ldr	r2, [pc, #116]	; (8004b1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004aa8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004aac:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ab4:	d10b      	bne.n	8004ace <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2b80      	cmp	r3, #128	; 0x80
 8004aba:	d919      	bls.n	8004af0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2ba0      	cmp	r3, #160	; 0xa0
 8004ac0:	d902      	bls.n	8004ac8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004ac2:	2302      	movs	r3, #2
 8004ac4:	613b      	str	r3, [r7, #16]
 8004ac6:	e013      	b.n	8004af0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004ac8:	2301      	movs	r3, #1
 8004aca:	613b      	str	r3, [r7, #16]
 8004acc:	e010      	b.n	8004af0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2b80      	cmp	r3, #128	; 0x80
 8004ad2:	d902      	bls.n	8004ada <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004ad4:	2303      	movs	r3, #3
 8004ad6:	613b      	str	r3, [r7, #16]
 8004ad8:	e00a      	b.n	8004af0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2b80      	cmp	r3, #128	; 0x80
 8004ade:	d102      	bne.n	8004ae6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004ae0:	2302      	movs	r3, #2
 8004ae2:	613b      	str	r3, [r7, #16]
 8004ae4:	e004      	b.n	8004af0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2b70      	cmp	r3, #112	; 0x70
 8004aea:	d101      	bne.n	8004af0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004aec:	2301      	movs	r3, #1
 8004aee:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004af0:	4b0b      	ldr	r3, [pc, #44]	; (8004b20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f023 0207 	bic.w	r2, r3, #7
 8004af8:	4909      	ldr	r1, [pc, #36]	; (8004b20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004b00:	4b07      	ldr	r3, [pc, #28]	; (8004b20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0307 	and.w	r3, r3, #7
 8004b08:	693a      	ldr	r2, [r7, #16]
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d001      	beq.n	8004b12 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e000      	b.n	8004b14 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004b12:	2300      	movs	r3, #0
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3718      	adds	r7, #24
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}
 8004b1c:	40021000 	.word	0x40021000
 8004b20:	40022000 	.word	0x40022000

08004b24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b086      	sub	sp, #24
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004b30:	2300      	movs	r3, #0
 8004b32:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d03f      	beq.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b48:	d01c      	beq.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8004b4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b4e:	d802      	bhi.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d00e      	beq.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8004b54:	e01f      	b.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8004b56:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004b5a:	d003      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004b5c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004b60:	d01c      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8004b62:	e018      	b.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004b64:	4b85      	ldr	r3, [pc, #532]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	4a84      	ldr	r2, [pc, #528]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004b6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b6e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004b70:	e015      	b.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	3304      	adds	r3, #4
 8004b76:	2100      	movs	r1, #0
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f000 ff4f 	bl	8005a1c <RCCEx_PLLSAI1_Config>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004b82:	e00c      	b.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	3320      	adds	r3, #32
 8004b88:	2100      	movs	r1, #0
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f001 f836 	bl	8005bfc <RCCEx_PLLSAI2_Config>
 8004b90:	4603      	mov	r3, r0
 8004b92:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004b94:	e003      	b.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	74fb      	strb	r3, [r7, #19]
      break;
 8004b9a:	e000      	b.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8004b9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b9e:	7cfb      	ldrb	r3, [r7, #19]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d10b      	bne.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ba4:	4b75      	ldr	r3, [pc, #468]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004baa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bb2:	4972      	ldr	r1, [pc, #456]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004bba:	e001      	b.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bbc:	7cfb      	ldrb	r3, [r7, #19]
 8004bbe:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d03f      	beq.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004bd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004bd4:	d01c      	beq.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004bd6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004bda:	d802      	bhi.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d00e      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0xda>
 8004be0:	e01f      	b.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004be2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004be6:	d003      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8004be8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004bec:	d01c      	beq.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8004bee:	e018      	b.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004bf0:	4b62      	ldr	r3, [pc, #392]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	4a61      	ldr	r2, [pc, #388]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004bf6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bfa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004bfc:	e015      	b.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	3304      	adds	r3, #4
 8004c02:	2100      	movs	r1, #0
 8004c04:	4618      	mov	r0, r3
 8004c06:	f000 ff09 	bl	8005a1c <RCCEx_PLLSAI1_Config>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004c0e:	e00c      	b.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	3320      	adds	r3, #32
 8004c14:	2100      	movs	r1, #0
 8004c16:	4618      	mov	r0, r3
 8004c18:	f000 fff0 	bl	8005bfc <RCCEx_PLLSAI2_Config>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004c20:	e003      	b.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	74fb      	strb	r3, [r7, #19]
      break;
 8004c26:	e000      	b.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004c28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c2a:	7cfb      	ldrb	r3, [r7, #19]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d10b      	bne.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004c30:	4b52      	ldr	r3, [pc, #328]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c36:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c3e:	494f      	ldr	r1, [pc, #316]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004c40:	4313      	orrs	r3, r2
 8004c42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004c46:	e001      	b.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c48:	7cfb      	ldrb	r3, [r7, #19]
 8004c4a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	f000 80a0 	beq.w	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004c5e:	4b47      	ldr	r3, [pc, #284]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d101      	bne.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e000      	b.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8004c6e:	2300      	movs	r3, #0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d00d      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c74:	4b41      	ldr	r3, [pc, #260]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c78:	4a40      	ldr	r2, [pc, #256]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004c7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c7e:	6593      	str	r3, [r2, #88]	; 0x58
 8004c80:	4b3e      	ldr	r3, [pc, #248]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c88:	60bb      	str	r3, [r7, #8]
 8004c8a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c90:	4b3b      	ldr	r3, [pc, #236]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a3a      	ldr	r2, [pc, #232]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004c96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c9a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c9c:	f7fc fca4 	bl	80015e8 <HAL_GetTick>
 8004ca0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004ca2:	e009      	b.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ca4:	f7fc fca0 	bl	80015e8 <HAL_GetTick>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	2b02      	cmp	r3, #2
 8004cb0:	d902      	bls.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	74fb      	strb	r3, [r7, #19]
        break;
 8004cb6:	e005      	b.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004cb8:	4b31      	ldr	r3, [pc, #196]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d0ef      	beq.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8004cc4:	7cfb      	ldrb	r3, [r7, #19]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d15c      	bne.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004cca:	4b2c      	ldr	r3, [pc, #176]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cd4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d01f      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ce2:	697a      	ldr	r2, [r7, #20]
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d019      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004ce8:	4b24      	ldr	r3, [pc, #144]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cf2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004cf4:	4b21      	ldr	r3, [pc, #132]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cfa:	4a20      	ldr	r2, [pc, #128]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004cfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004d04:	4b1d      	ldr	r3, [pc, #116]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d0a:	4a1c      	ldr	r2, [pc, #112]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004d0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004d14:	4a19      	ldr	r2, [pc, #100]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	f003 0301 	and.w	r3, r3, #1
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d016      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d26:	f7fc fc5f 	bl	80015e8 <HAL_GetTick>
 8004d2a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d2c:	e00b      	b.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d2e:	f7fc fc5b 	bl	80015e8 <HAL_GetTick>
 8004d32:	4602      	mov	r2, r0
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d902      	bls.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8004d40:	2303      	movs	r3, #3
 8004d42:	74fb      	strb	r3, [r7, #19]
            break;
 8004d44:	e006      	b.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d46:	4b0d      	ldr	r3, [pc, #52]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d4c:	f003 0302 	and.w	r3, r3, #2
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d0ec      	beq.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8004d54:	7cfb      	ldrb	r3, [r7, #19]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d10c      	bne.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d5a:	4b08      	ldr	r3, [pc, #32]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d6a:	4904      	ldr	r1, [pc, #16]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004d72:	e009      	b.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004d74:	7cfb      	ldrb	r3, [r7, #19]
 8004d76:	74bb      	strb	r3, [r7, #18]
 8004d78:	e006      	b.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8004d7a:	bf00      	nop
 8004d7c:	40021000 	.word	0x40021000
 8004d80:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d84:	7cfb      	ldrb	r3, [r7, #19]
 8004d86:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d88:	7c7b      	ldrb	r3, [r7, #17]
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d105      	bne.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d8e:	4b9e      	ldr	r3, [pc, #632]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d92:	4a9d      	ldr	r2, [pc, #628]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d98:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 0301 	and.w	r3, r3, #1
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d00a      	beq.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004da6:	4b98      	ldr	r3, [pc, #608]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dac:	f023 0203 	bic.w	r2, r3, #3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db4:	4994      	ldr	r1, [pc, #592]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004db6:	4313      	orrs	r3, r2
 8004db8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 0302 	and.w	r3, r3, #2
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d00a      	beq.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004dc8:	4b8f      	ldr	r3, [pc, #572]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dce:	f023 020c 	bic.w	r2, r3, #12
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dd6:	498c      	ldr	r1, [pc, #560]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 0304 	and.w	r3, r3, #4
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d00a      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004dea:	4b87      	ldr	r3, [pc, #540]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004df0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df8:	4983      	ldr	r1, [pc, #524]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 0308 	and.w	r3, r3, #8
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d00a      	beq.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004e0c:	4b7e      	ldr	r3, [pc, #504]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e12:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e1a:	497b      	ldr	r1, [pc, #492]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 0310 	and.w	r3, r3, #16
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d00a      	beq.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004e2e:	4b76      	ldr	r3, [pc, #472]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e3c:	4972      	ldr	r1, [pc, #456]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 0320 	and.w	r3, r3, #32
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d00a      	beq.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004e50:	4b6d      	ldr	r3, [pc, #436]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e56:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e5e:	496a      	ldr	r1, [pc, #424]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004e60:	4313      	orrs	r3, r2
 8004e62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d00a      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e72:	4b65      	ldr	r3, [pc, #404]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e78:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e80:	4961      	ldr	r1, [pc, #388]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004e82:	4313      	orrs	r3, r2
 8004e84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d00a      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004e94:	4b5c      	ldr	r3, [pc, #368]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e9a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ea2:	4959      	ldr	r1, [pc, #356]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00a      	beq.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004eb6:	4b54      	ldr	r3, [pc, #336]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ebc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ec4:	4950      	ldr	r1, [pc, #320]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d00a      	beq.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004ed8:	4b4b      	ldr	r3, [pc, #300]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ede:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ee6:	4948      	ldr	r1, [pc, #288]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00a      	beq.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004efa:	4b43      	ldr	r3, [pc, #268]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f00:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f08:	493f      	ldr	r1, [pc, #252]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d028      	beq.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f1c:	4b3a      	ldr	r3, [pc, #232]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f22:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f2a:	4937      	ldr	r1, [pc, #220]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f3a:	d106      	bne.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f3c:	4b32      	ldr	r3, [pc, #200]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	4a31      	ldr	r2, [pc, #196]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004f42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f46:	60d3      	str	r3, [r2, #12]
 8004f48:	e011      	b.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f4e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f52:	d10c      	bne.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	3304      	adds	r3, #4
 8004f58:	2101      	movs	r1, #1
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f000 fd5e 	bl	8005a1c <RCCEx_PLLSAI1_Config>
 8004f60:	4603      	mov	r3, r0
 8004f62:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004f64:	7cfb      	ldrb	r3, [r7, #19]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d001      	beq.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8004f6a:	7cfb      	ldrb	r3, [r7, #19]
 8004f6c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d028      	beq.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004f7a:	4b23      	ldr	r3, [pc, #140]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f80:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f88:	491f      	ldr	r1, [pc, #124]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f98:	d106      	bne.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f9a:	4b1b      	ldr	r3, [pc, #108]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	4a1a      	ldr	r2, [pc, #104]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004fa0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fa4:	60d3      	str	r3, [r2, #12]
 8004fa6:	e011      	b.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004fb0:	d10c      	bne.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	3304      	adds	r3, #4
 8004fb6:	2101      	movs	r1, #1
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f000 fd2f 	bl	8005a1c <RCCEx_PLLSAI1_Config>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004fc2:	7cfb      	ldrb	r3, [r7, #19]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d001      	beq.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8004fc8:	7cfb      	ldrb	r3, [r7, #19]
 8004fca:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d02b      	beq.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004fd8:	4b0b      	ldr	r3, [pc, #44]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fde:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fe6:	4908      	ldr	r1, [pc, #32]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ff2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ff6:	d109      	bne.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ff8:	4b03      	ldr	r3, [pc, #12]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	4a02      	ldr	r2, [pc, #8]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004ffe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005002:	60d3      	str	r3, [r2, #12]
 8005004:	e014      	b.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8005006:	bf00      	nop
 8005008:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005010:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005014:	d10c      	bne.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	3304      	adds	r3, #4
 800501a:	2101      	movs	r1, #1
 800501c:	4618      	mov	r0, r3
 800501e:	f000 fcfd 	bl	8005a1c <RCCEx_PLLSAI1_Config>
 8005022:	4603      	mov	r3, r0
 8005024:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005026:	7cfb      	ldrb	r3, [r7, #19]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d001      	beq.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 800502c:	7cfb      	ldrb	r3, [r7, #19]
 800502e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005038:	2b00      	cmp	r3, #0
 800503a:	d02f      	beq.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800503c:	4b2b      	ldr	r3, [pc, #172]	; (80050ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800503e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005042:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800504a:	4928      	ldr	r1, [pc, #160]	; (80050ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800504c:	4313      	orrs	r3, r2
 800504e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005056:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800505a:	d10d      	bne.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	3304      	adds	r3, #4
 8005060:	2102      	movs	r1, #2
 8005062:	4618      	mov	r0, r3
 8005064:	f000 fcda 	bl	8005a1c <RCCEx_PLLSAI1_Config>
 8005068:	4603      	mov	r3, r0
 800506a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800506c:	7cfb      	ldrb	r3, [r7, #19]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d014      	beq.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8005072:	7cfb      	ldrb	r3, [r7, #19]
 8005074:	74bb      	strb	r3, [r7, #18]
 8005076:	e011      	b.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800507c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005080:	d10c      	bne.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	3320      	adds	r3, #32
 8005086:	2102      	movs	r1, #2
 8005088:	4618      	mov	r0, r3
 800508a:	f000 fdb7 	bl	8005bfc <RCCEx_PLLSAI2_Config>
 800508e:	4603      	mov	r3, r0
 8005090:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005092:	7cfb      	ldrb	r3, [r7, #19]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d001      	beq.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8005098:	7cfb      	ldrb	r3, [r7, #19]
 800509a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d00a      	beq.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80050a8:	4b10      	ldr	r3, [pc, #64]	; (80050ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80050aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ae:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050b6:	490d      	ldr	r1, [pc, #52]	; (80050ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80050b8:	4313      	orrs	r3, r2
 80050ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d00b      	beq.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80050ca:	4b08      	ldr	r3, [pc, #32]	; (80050ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80050cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050d0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050da:	4904      	ldr	r1, [pc, #16]	; (80050ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80050dc:	4313      	orrs	r3, r2
 80050de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80050e2:	7cbb      	ldrb	r3, [r7, #18]
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3718      	adds	r7, #24
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}
 80050ec:	40021000 	.word	0x40021000

080050f0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b088      	sub	sp, #32
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80050f8:	2300      	movs	r3, #0
 80050fa:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005102:	d137      	bne.n	8005174 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005104:	4bb8      	ldr	r3, [pc, #736]	; (80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800510a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800510e:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005116:	d014      	beq.n	8005142 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8005118:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800511c:	d01e      	beq.n	800515c <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
 800511e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005122:	d001      	beq.n	8005128 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8005124:	f000 bc60 	b.w	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005128:	4baf      	ldr	r3, [pc, #700]	; (80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800512a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800512e:	f003 0302 	and.w	r3, r3, #2
 8005132:	2b02      	cmp	r3, #2
 8005134:	f040 8453 	bne.w	80059de <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
        frequency = LSE_VALUE;
 8005138:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800513c:	61fb      	str	r3, [r7, #28]
      break;
 800513e:	f000 bc4e 	b.w	80059de <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005142:	4ba9      	ldr	r3, [pc, #676]	; (80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005144:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005148:	f003 0302 	and.w	r3, r3, #2
 800514c:	2b02      	cmp	r3, #2
 800514e:	f040 8448 	bne.w	80059e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          frequency = LSI_VALUE;
 8005152:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005156:	61fb      	str	r3, [r7, #28]
      break;
 8005158:	f000 bc43 	b.w	80059e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800515c:	4ba2      	ldr	r3, [pc, #648]	; (80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005164:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005168:	f040 843d 	bne.w	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
        frequency = HSE_VALUE / 32U;
 800516c:	4b9f      	ldr	r3, [pc, #636]	; (80053ec <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800516e:	61fb      	str	r3, [r7, #28]
      break;
 8005170:	f000 bc39 	b.w	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005174:	4b9c      	ldr	r3, [pc, #624]	; (80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	f003 0303 	and.w	r3, r3, #3
 800517c:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	2b02      	cmp	r3, #2
 8005182:	d023      	beq.n	80051cc <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8005184:	2b03      	cmp	r3, #3
 8005186:	d02e      	beq.n	80051e6 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8005188:	2b01      	cmp	r3, #1
 800518a:	d139      	bne.n	8005200 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800518c:	4b96      	ldr	r3, [pc, #600]	; (80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 0302 	and.w	r3, r3, #2
 8005194:	2b02      	cmp	r3, #2
 8005196:	d116      	bne.n	80051c6 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005198:	4b93      	ldr	r3, [pc, #588]	; (80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 0308 	and.w	r3, r3, #8
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d005      	beq.n	80051b0 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
 80051a4:	4b90      	ldr	r3, [pc, #576]	; (80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	091b      	lsrs	r3, r3, #4
 80051aa:	f003 030f 	and.w	r3, r3, #15
 80051ae:	e005      	b.n	80051bc <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 80051b0:	4b8d      	ldr	r3, [pc, #564]	; (80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80051b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051b6:	0a1b      	lsrs	r3, r3, #8
 80051b8:	f003 030f 	and.w	r3, r3, #15
 80051bc:	4a8c      	ldr	r2, [pc, #560]	; (80053f0 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 80051be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051c2:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80051c4:	e01f      	b.n	8005206 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 80051c6:	2300      	movs	r3, #0
 80051c8:	61bb      	str	r3, [r7, #24]
      break;
 80051ca:	e01c      	b.n	8005206 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80051cc:	4b86      	ldr	r3, [pc, #536]	; (80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051d8:	d102      	bne.n	80051e0 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        pllvco = HSI_VALUE;
 80051da:	4b86      	ldr	r3, [pc, #536]	; (80053f4 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 80051dc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80051de:	e012      	b.n	8005206 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 80051e0:	2300      	movs	r3, #0
 80051e2:	61bb      	str	r3, [r7, #24]
      break;
 80051e4:	e00f      	b.n	8005206 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80051e6:	4b80      	ldr	r3, [pc, #512]	; (80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051f2:	d102      	bne.n	80051fa <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSE_VALUE;
 80051f4:	4b80      	ldr	r3, [pc, #512]	; (80053f8 <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 80051f6:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80051f8:	e005      	b.n	8005206 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 80051fa:	2300      	movs	r3, #0
 80051fc:	61bb      	str	r3, [r7, #24]
      break;
 80051fe:	e002      	b.n	8005206 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    default:
      /* No source */
      pllvco = 0U;
 8005200:	2300      	movs	r3, #0
 8005202:	61bb      	str	r3, [r7, #24]
      break;
 8005204:	bf00      	nop
    }

    switch(PeriphClk)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800520c:	f000 8345 	beq.w	800589a <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
 8005210:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005214:	d825      	bhi.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x172>
 8005216:	2b10      	cmp	r3, #16
 8005218:	f000 81df 	beq.w	80055da <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800521c:	2b10      	cmp	r3, #16
 800521e:	d80f      	bhi.n	8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 8005220:	2b02      	cmp	r3, #2
 8005222:	f000 8128 	beq.w	8005476 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8005226:	2b02      	cmp	r3, #2
 8005228:	d803      	bhi.n	8005232 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 800522a:	2b01      	cmp	r3, #1
 800522c:	f000 80ec 	beq.w	8005408 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8005230:	e3da      	b.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
    switch(PeriphClk)
 8005232:	2b04      	cmp	r3, #4
 8005234:	f000 8169 	beq.w	800550a <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
 8005238:	2b08      	cmp	r3, #8
 800523a:	f000 819a 	beq.w	8005572 <HAL_RCCEx_GetPeriphCLKFreq+0x482>
      break;
 800523e:	e3d3      	b.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
    switch(PeriphClk)
 8005240:	2b40      	cmp	r3, #64	; 0x40
 8005242:	f000 82c1 	beq.w	80057c8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8005246:	2b40      	cmp	r3, #64	; 0x40
 8005248:	d803      	bhi.n	8005252 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 800524a:	2b20      	cmp	r3, #32
 800524c:	f000 81fd 	beq.w	800564a <HAL_RCCEx_GetPeriphCLKFreq+0x55a>
      break;
 8005250:	e3ca      	b.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
    switch(PeriphClk)
 8005252:	2b80      	cmp	r3, #128	; 0x80
 8005254:	f000 82db 	beq.w	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
 8005258:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800525c:	f000 82fa 	beq.w	8005854 <HAL_RCCEx_GetPeriphCLKFreq+0x764>
      break;
 8005260:	e3c2      	b.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
    switch(PeriphClk)
 8005262:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005266:	f000 822d 	beq.w	80056c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 800526a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800526e:	d811      	bhi.n	8005294 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8005270:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005274:	d021      	beq.n	80052ba <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
 8005276:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800527a:	d804      	bhi.n	8005286 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800527c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005280:	f000 834c 	beq.w	800591c <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      break;
 8005284:	e3b0      	b.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
    switch(PeriphClk)
 8005286:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800528a:	d01d      	beq.n	80052c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 800528c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005290:	d021      	beq.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
      break;
 8005292:	e3a9      	b.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
    switch(PeriphClk)
 8005294:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005298:	f000 8285 	beq.w	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 800529c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052a0:	d804      	bhi.n	80052ac <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80052a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052a6:	f000 837e 	beq.w	80059a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8b6>
      break;
 80052aa:	e39d      	b.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
    switch(PeriphClk)
 80052ac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80052b0:	d011      	beq.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80052b2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80052b6:	d00e      	beq.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
      break;
 80052b8:	e396      	b.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 80052ba:	69b9      	ldr	r1, [r7, #24]
 80052bc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80052c0:	f000 fd76 	bl	8005db0 <RCCEx_GetSAIxPeriphCLKFreq>
 80052c4:	61f8      	str	r0, [r7, #28]
      break;
 80052c6:	e38f      	b.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 80052c8:	69b9      	ldr	r1, [r7, #24]
 80052ca:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80052ce:	f000 fd6f 	bl	8005db0 <RCCEx_GetSAIxPeriphCLKFreq>
 80052d2:	61f8      	str	r0, [r7, #28]
      break;
 80052d4:	e388      	b.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80052d6:	4b44      	ldr	r3, [pc, #272]	; (80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80052d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052dc:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80052e0:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052e8:	d023      	beq.n	8005332 <HAL_RCCEx_GetPeriphCLKFreq+0x242>
 80052ea:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80052ee:	d003      	beq.n	80052f8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80052f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80052f4:	d04a      	beq.n	800538c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
          break;
 80052f6:	e086      	b.n	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x316>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80052f8:	4b3b      	ldr	r3, [pc, #236]	; (80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 0302 	and.w	r3, r3, #2
 8005300:	2b02      	cmp	r3, #2
 8005302:	d17b      	bne.n	80053fc <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005304:	4b38      	ldr	r3, [pc, #224]	; (80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 0308 	and.w	r3, r3, #8
 800530c:	2b00      	cmp	r3, #0
 800530e:	d005      	beq.n	800531c <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8005310:	4b35      	ldr	r3, [pc, #212]	; (80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	091b      	lsrs	r3, r3, #4
 8005316:	f003 030f 	and.w	r3, r3, #15
 800531a:	e005      	b.n	8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
 800531c:	4b32      	ldr	r3, [pc, #200]	; (80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800531e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005322:	0a1b      	lsrs	r3, r3, #8
 8005324:	f003 030f 	and.w	r3, r3, #15
 8005328:	4a31      	ldr	r2, [pc, #196]	; (80053f0 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 800532a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800532e:	61fb      	str	r3, [r7, #28]
          break;
 8005330:	e064      	b.n	80053fc <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005332:	4b2d      	ldr	r3, [pc, #180]	; (80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800533a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800533e:	d15f      	bne.n	8005400 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8005340:	4b29      	ldr	r3, [pc, #164]	; (80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005348:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800534c:	d158      	bne.n	8005400 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800534e:	4b26      	ldr	r3, [pc, #152]	; (80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	0a1b      	lsrs	r3, r3, #8
 8005354:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005358:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800535a:	69bb      	ldr	r3, [r7, #24]
 800535c:	68fa      	ldr	r2, [r7, #12]
 800535e:	fb02 f203 	mul.w	r2, r2, r3
 8005362:	4b21      	ldr	r3, [pc, #132]	; (80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005364:	68db      	ldr	r3, [r3, #12]
 8005366:	091b      	lsrs	r3, r3, #4
 8005368:	f003 0307 	and.w	r3, r3, #7
 800536c:	3301      	adds	r3, #1
 800536e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005372:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8005374:	4b1c      	ldr	r3, [pc, #112]	; (80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	0d5b      	lsrs	r3, r3, #21
 800537a:	f003 0303 	and.w	r3, r3, #3
 800537e:	3301      	adds	r3, #1
 8005380:	005b      	lsls	r3, r3, #1
 8005382:	69ba      	ldr	r2, [r7, #24]
 8005384:	fbb2 f3f3 	udiv	r3, r2, r3
 8005388:	61fb      	str	r3, [r7, #28]
          break;
 800538a:	e039      	b.n	8005400 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800538c:	4b16      	ldr	r3, [pc, #88]	; (80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005394:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005398:	d134      	bne.n	8005404 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800539a:	4b13      	ldr	r3, [pc, #76]	; (80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800539c:	691b      	ldr	r3, [r3, #16]
 800539e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053a6:	d12d      	bne.n	8005404 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80053a8:	4b0f      	ldr	r3, [pc, #60]	; (80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80053aa:	691b      	ldr	r3, [r3, #16]
 80053ac:	0a1b      	lsrs	r3, r3, #8
 80053ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053b2:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80053b4:	69bb      	ldr	r3, [r7, #24]
 80053b6:	68fa      	ldr	r2, [r7, #12]
 80053b8:	fb02 f203 	mul.w	r2, r2, r3
 80053bc:	4b0a      	ldr	r3, [pc, #40]	; (80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	091b      	lsrs	r3, r3, #4
 80053c2:	f003 0307 	and.w	r3, r3, #7
 80053c6:	3301      	adds	r3, #1
 80053c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80053cc:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80053ce:	4b06      	ldr	r3, [pc, #24]	; (80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80053d0:	691b      	ldr	r3, [r3, #16]
 80053d2:	0d5b      	lsrs	r3, r3, #21
 80053d4:	f003 0303 	and.w	r3, r3, #3
 80053d8:	3301      	adds	r3, #1
 80053da:	005b      	lsls	r3, r3, #1
 80053dc:	69ba      	ldr	r2, [r7, #24]
 80053de:	fbb2 f3f3 	udiv	r3, r2, r3
 80053e2:	61fb      	str	r3, [r7, #28]
          break;
 80053e4:	e00e      	b.n	8005404 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 80053e6:	bf00      	nop
 80053e8:	40021000 	.word	0x40021000
 80053ec:	0003d090 	.word	0x0003d090
 80053f0:	0800a304 	.word	0x0800a304
 80053f4:	00f42400 	.word	0x00f42400
 80053f8:	007a1200 	.word	0x007a1200
          break;
 80053fc:	bf00      	nop
 80053fe:	e2f3      	b.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 8005400:	bf00      	nop
 8005402:	e2f1      	b.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 8005404:	bf00      	nop
        break;
 8005406:	e2ef      	b.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005408:	4bac      	ldr	r3, [pc, #688]	; (80056bc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800540a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800540e:	f003 0303 	and.w	r3, r3, #3
 8005412:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	2b03      	cmp	r3, #3
 8005418:	d827      	bhi.n	800546a <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 800541a:	a201      	add	r2, pc, #4	; (adr r2, 8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 800541c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005420:	08005431 	.word	0x08005431
 8005424:	08005439 	.word	0x08005439
 8005428:	08005441 	.word	0x08005441
 800542c:	08005455 	.word	0x08005455
          frequency = HAL_RCC_GetPCLK2Freq();
 8005430:	f7ff fb02 	bl	8004a38 <HAL_RCC_GetPCLK2Freq>
 8005434:	61f8      	str	r0, [r7, #28]
          break;
 8005436:	e01d      	b.n	8005474 <HAL_RCCEx_GetPeriphCLKFreq+0x384>
          frequency = HAL_RCC_GetSysClockFreq();
 8005438:	f7ff fa52 	bl	80048e0 <HAL_RCC_GetSysClockFreq>
 800543c:	61f8      	str	r0, [r7, #28]
          break;
 800543e:	e019      	b.n	8005474 <HAL_RCCEx_GetPeriphCLKFreq+0x384>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005440:	4b9e      	ldr	r3, [pc, #632]	; (80056bc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005448:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800544c:	d10f      	bne.n	800546e <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
            frequency = HSI_VALUE;
 800544e:	4b9c      	ldr	r3, [pc, #624]	; (80056c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8005450:	61fb      	str	r3, [r7, #28]
          break;
 8005452:	e00c      	b.n	800546e <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005454:	4b99      	ldr	r3, [pc, #612]	; (80056bc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8005456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800545a:	f003 0302 	and.w	r3, r3, #2
 800545e:	2b02      	cmp	r3, #2
 8005460:	d107      	bne.n	8005472 <HAL_RCCEx_GetPeriphCLKFreq+0x382>
            frequency = LSE_VALUE;
 8005462:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005466:	61fb      	str	r3, [r7, #28]
          break;
 8005468:	e003      	b.n	8005472 <HAL_RCCEx_GetPeriphCLKFreq+0x382>
          break;
 800546a:	bf00      	nop
 800546c:	e2bc      	b.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 800546e:	bf00      	nop
 8005470:	e2ba      	b.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 8005472:	bf00      	nop
        break;
 8005474:	e2b8      	b.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8005476:	4b91      	ldr	r3, [pc, #580]	; (80056bc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8005478:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800547c:	f003 030c 	and.w	r3, r3, #12
 8005480:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	2b0c      	cmp	r3, #12
 8005486:	d83a      	bhi.n	80054fe <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 8005488:	a201      	add	r2, pc, #4	; (adr r2, 8005490 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>)
 800548a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800548e:	bf00      	nop
 8005490:	080054c5 	.word	0x080054c5
 8005494:	080054ff 	.word	0x080054ff
 8005498:	080054ff 	.word	0x080054ff
 800549c:	080054ff 	.word	0x080054ff
 80054a0:	080054cd 	.word	0x080054cd
 80054a4:	080054ff 	.word	0x080054ff
 80054a8:	080054ff 	.word	0x080054ff
 80054ac:	080054ff 	.word	0x080054ff
 80054b0:	080054d5 	.word	0x080054d5
 80054b4:	080054ff 	.word	0x080054ff
 80054b8:	080054ff 	.word	0x080054ff
 80054bc:	080054ff 	.word	0x080054ff
 80054c0:	080054e9 	.word	0x080054e9
          frequency = HAL_RCC_GetPCLK1Freq();
 80054c4:	f7ff faa2 	bl	8004a0c <HAL_RCC_GetPCLK1Freq>
 80054c8:	61f8      	str	r0, [r7, #28]
          break;
 80054ca:	e01d      	b.n	8005508 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          frequency = HAL_RCC_GetSysClockFreq();
 80054cc:	f7ff fa08 	bl	80048e0 <HAL_RCC_GetSysClockFreq>
 80054d0:	61f8      	str	r0, [r7, #28]
          break;
 80054d2:	e019      	b.n	8005508 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80054d4:	4b79      	ldr	r3, [pc, #484]	; (80056bc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054e0:	d10f      	bne.n	8005502 <HAL_RCCEx_GetPeriphCLKFreq+0x412>
            frequency = HSI_VALUE;
 80054e2:	4b77      	ldr	r3, [pc, #476]	; (80056c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 80054e4:	61fb      	str	r3, [r7, #28]
          break;
 80054e6:	e00c      	b.n	8005502 <HAL_RCCEx_GetPeriphCLKFreq+0x412>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80054e8:	4b74      	ldr	r3, [pc, #464]	; (80056bc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80054ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ee:	f003 0302 	and.w	r3, r3, #2
 80054f2:	2b02      	cmp	r3, #2
 80054f4:	d107      	bne.n	8005506 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
            frequency = LSE_VALUE;
 80054f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054fa:	61fb      	str	r3, [r7, #28]
          break;
 80054fc:	e003      	b.n	8005506 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
          break;
 80054fe:	bf00      	nop
 8005500:	e272      	b.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 8005502:	bf00      	nop
 8005504:	e270      	b.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 8005506:	bf00      	nop
        break;
 8005508:	e26e      	b.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800550a:	4b6c      	ldr	r3, [pc, #432]	; (80056bc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800550c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005510:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005514:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	2b10      	cmp	r3, #16
 800551a:	d00d      	beq.n	8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x448>
 800551c:	2b10      	cmp	r3, #16
 800551e:	d802      	bhi.n	8005526 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8005520:	2b00      	cmp	r3, #0
 8005522:	d005      	beq.n	8005530 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
          break;
 8005524:	e024      	b.n	8005570 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
        switch(srcclk)
 8005526:	2b20      	cmp	r3, #32
 8005528:	d00a      	beq.n	8005540 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 800552a:	2b30      	cmp	r3, #48	; 0x30
 800552c:	d012      	beq.n	8005554 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          break;
 800552e:	e01f      	b.n	8005570 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005530:	f7ff fa6c 	bl	8004a0c <HAL_RCC_GetPCLK1Freq>
 8005534:	61f8      	str	r0, [r7, #28]
          break;
 8005536:	e01b      	b.n	8005570 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
          frequency = HAL_RCC_GetSysClockFreq();
 8005538:	f7ff f9d2 	bl	80048e0 <HAL_RCC_GetSysClockFreq>
 800553c:	61f8      	str	r0, [r7, #28]
          break;
 800553e:	e017      	b.n	8005570 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005540:	4b5e      	ldr	r3, [pc, #376]	; (80056bc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005548:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800554c:	d10d      	bne.n	800556a <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
            frequency = HSI_VALUE;
 800554e:	4b5c      	ldr	r3, [pc, #368]	; (80056c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8005550:	61fb      	str	r3, [r7, #28]
          break;
 8005552:	e00a      	b.n	800556a <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005554:	4b59      	ldr	r3, [pc, #356]	; (80056bc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8005556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800555a:	f003 0302 	and.w	r3, r3, #2
 800555e:	2b02      	cmp	r3, #2
 8005560:	d105      	bne.n	800556e <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = LSE_VALUE;
 8005562:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005566:	61fb      	str	r3, [r7, #28]
          break;
 8005568:	e001      	b.n	800556e <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 800556a:	bf00      	nop
 800556c:	e23c      	b.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 800556e:	bf00      	nop
        break;
 8005570:	e23a      	b.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8005572:	4b52      	ldr	r3, [pc, #328]	; (80056bc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8005574:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005578:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800557c:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	2b40      	cmp	r3, #64	; 0x40
 8005582:	d00d      	beq.n	80055a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>
 8005584:	2b40      	cmp	r3, #64	; 0x40
 8005586:	d802      	bhi.n	800558e <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 8005588:	2b00      	cmp	r3, #0
 800558a:	d005      	beq.n	8005598 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
          break;
 800558c:	e024      	b.n	80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
        switch(srcclk)
 800558e:	2b80      	cmp	r3, #128	; 0x80
 8005590:	d00a      	beq.n	80055a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8005592:	2bc0      	cmp	r3, #192	; 0xc0
 8005594:	d012      	beq.n	80055bc <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
          break;
 8005596:	e01f      	b.n	80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005598:	f7ff fa38 	bl	8004a0c <HAL_RCC_GetPCLK1Freq>
 800559c:	61f8      	str	r0, [r7, #28]
          break;
 800559e:	e01b      	b.n	80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          frequency = HAL_RCC_GetSysClockFreq();
 80055a0:	f7ff f99e 	bl	80048e0 <HAL_RCC_GetSysClockFreq>
 80055a4:	61f8      	str	r0, [r7, #28]
          break;
 80055a6:	e017      	b.n	80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80055a8:	4b44      	ldr	r3, [pc, #272]	; (80056bc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055b4:	d10d      	bne.n	80055d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4e2>
            frequency = HSI_VALUE;
 80055b6:	4b42      	ldr	r3, [pc, #264]	; (80056c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 80055b8:	61fb      	str	r3, [r7, #28]
          break;
 80055ba:	e00a      	b.n	80055d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4e2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80055bc:	4b3f      	ldr	r3, [pc, #252]	; (80056bc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80055be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055c2:	f003 0302 	and.w	r3, r3, #2
 80055c6:	2b02      	cmp	r3, #2
 80055c8:	d105      	bne.n	80055d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
            frequency = LSE_VALUE;
 80055ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055ce:	61fb      	str	r3, [r7, #28]
          break;
 80055d0:	e001      	b.n	80055d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
          break;
 80055d2:	bf00      	nop
 80055d4:	e208      	b.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 80055d6:	bf00      	nop
        break;
 80055d8:	e206      	b.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80055da:	4b38      	ldr	r3, [pc, #224]	; (80056bc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80055dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055e4:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055ec:	d010      	beq.n	8005610 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
 80055ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055f2:	d802      	bhi.n	80055fa <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d007      	beq.n	8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
          break;
 80055f8:	e026      	b.n	8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
        switch(srcclk)
 80055fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055fe:	d00b      	beq.n	8005618 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8005600:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005604:	d012      	beq.n	800562c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>
          break;
 8005606:	e01f      	b.n	8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005608:	f7ff fa00 	bl	8004a0c <HAL_RCC_GetPCLK1Freq>
 800560c:	61f8      	str	r0, [r7, #28]
          break;
 800560e:	e01b      	b.n	8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          frequency = HAL_RCC_GetSysClockFreq();
 8005610:	f7ff f966 	bl	80048e0 <HAL_RCC_GetSysClockFreq>
 8005614:	61f8      	str	r0, [r7, #28]
          break;
 8005616:	e017      	b.n	8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005618:	4b28      	ldr	r3, [pc, #160]	; (80056bc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005620:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005624:	d10d      	bne.n	8005642 <HAL_RCCEx_GetPeriphCLKFreq+0x552>
            frequency = HSI_VALUE;
 8005626:	4b26      	ldr	r3, [pc, #152]	; (80056c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8005628:	61fb      	str	r3, [r7, #28]
          break;
 800562a:	e00a      	b.n	8005642 <HAL_RCCEx_GetPeriphCLKFreq+0x552>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800562c:	4b23      	ldr	r3, [pc, #140]	; (80056bc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800562e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005632:	f003 0302 	and.w	r3, r3, #2
 8005636:	2b02      	cmp	r3, #2
 8005638:	d105      	bne.n	8005646 <HAL_RCCEx_GetPeriphCLKFreq+0x556>
            frequency = LSE_VALUE;
 800563a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800563e:	61fb      	str	r3, [r7, #28]
          break;
 8005640:	e001      	b.n	8005646 <HAL_RCCEx_GetPeriphCLKFreq+0x556>
          break;
 8005642:	bf00      	nop
 8005644:	e1d0      	b.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 8005646:	bf00      	nop
        break;
 8005648:	e1ce      	b.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800564a:	4b1c      	ldr	r3, [pc, #112]	; (80056bc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800564c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005650:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005654:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800565c:	d010      	beq.n	8005680 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
 800565e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005662:	d802      	bhi.n	800566a <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 8005664:	2b00      	cmp	r3, #0
 8005666:	d007      	beq.n	8005678 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
          break;
 8005668:	e026      	b.n	80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
        switch(srcclk)
 800566a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800566e:	d00b      	beq.n	8005688 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8005670:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005674:	d012      	beq.n	800569c <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>
          break;
 8005676:	e01f      	b.n	80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005678:	f7ff f9c8 	bl	8004a0c <HAL_RCC_GetPCLK1Freq>
 800567c:	61f8      	str	r0, [r7, #28]
          break;
 800567e:	e01b      	b.n	80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          frequency = HAL_RCC_GetSysClockFreq();
 8005680:	f7ff f92e 	bl	80048e0 <HAL_RCC_GetSysClockFreq>
 8005684:	61f8      	str	r0, [r7, #28]
          break;
 8005686:	e017      	b.n	80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005688:	4b0c      	ldr	r3, [pc, #48]	; (80056bc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005690:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005694:	d10d      	bne.n	80056b2 <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
            frequency = HSI_VALUE;
 8005696:	4b0a      	ldr	r3, [pc, #40]	; (80056c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8005698:	61fb      	str	r3, [r7, #28]
          break;
 800569a:	e00a      	b.n	80056b2 <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800569c:	4b07      	ldr	r3, [pc, #28]	; (80056bc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800569e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056a2:	f003 0302 	and.w	r3, r3, #2
 80056a6:	2b02      	cmp	r3, #2
 80056a8:	d105      	bne.n	80056b6 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
            frequency = LSE_VALUE;
 80056aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056ae:	61fb      	str	r3, [r7, #28]
          break;
 80056b0:	e001      	b.n	80056b6 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
          break;
 80056b2:	bf00      	nop
 80056b4:	e198      	b.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 80056b6:	bf00      	nop
        break;
 80056b8:	e196      	b.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 80056ba:	bf00      	nop
 80056bc:	40021000 	.word	0x40021000
 80056c0:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80056c4:	4bad      	ldr	r3, [pc, #692]	; (800597c <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 80056c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80056ce:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056d6:	d036      	beq.n	8005746 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
 80056d8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80056dc:	d003      	beq.n	80056e6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 80056de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80056e2:	d004      	beq.n	80056ee <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          break;
 80056e4:	e05e      	b.n	80057a4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          frequency = HAL_RCC_GetSysClockFreq();
 80056e6:	f7ff f8fb 	bl	80048e0 <HAL_RCC_GetSysClockFreq>
 80056ea:	61f8      	str	r0, [r7, #28]
          break;
 80056ec:	e05a      	b.n	80057a4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 80056ee:	4ba3      	ldr	r3, [pc, #652]	; (800597c <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056fa:	d150      	bne.n	800579e <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 80056fc:	4b9f      	ldr	r3, [pc, #636]	; (800597c <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 80056fe:	691b      	ldr	r3, [r3, #16]
 8005700:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005704:	2b00      	cmp	r3, #0
 8005706:	d04a      	beq.n	800579e <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005708:	4b9c      	ldr	r3, [pc, #624]	; (800597c <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 800570a:	691b      	ldr	r3, [r3, #16]
 800570c:	0a1b      	lsrs	r3, r3, #8
 800570e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005712:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005714:	69bb      	ldr	r3, [r7, #24]
 8005716:	68fa      	ldr	r2, [r7, #12]
 8005718:	fb02 f203 	mul.w	r2, r2, r3
 800571c:	4b97      	ldr	r3, [pc, #604]	; (800597c <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	091b      	lsrs	r3, r3, #4
 8005722:	f003 0307 	and.w	r3, r3, #7
 8005726:	3301      	adds	r3, #1
 8005728:	fbb2 f3f3 	udiv	r3, r2, r3
 800572c:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800572e:	4b93      	ldr	r3, [pc, #588]	; (800597c <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8005730:	691b      	ldr	r3, [r3, #16]
 8005732:	0e5b      	lsrs	r3, r3, #25
 8005734:	f003 0303 	and.w	r3, r3, #3
 8005738:	3301      	adds	r3, #1
 800573a:	005b      	lsls	r3, r3, #1
 800573c:	69ba      	ldr	r2, [r7, #24]
 800573e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005742:	61fb      	str	r3, [r7, #28]
          break;
 8005744:	e02b      	b.n	800579e <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 8005746:	4b8d      	ldr	r3, [pc, #564]	; (800597c <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800574e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005752:	d126      	bne.n	80057a2 <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
 8005754:	4b89      	ldr	r3, [pc, #548]	; (800597c <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8005756:	695b      	ldr	r3, [r3, #20]
 8005758:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800575c:	2b00      	cmp	r3, #0
 800575e:	d020      	beq.n	80057a2 <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8005760:	4b86      	ldr	r3, [pc, #536]	; (800597c <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8005762:	695b      	ldr	r3, [r3, #20]
 8005764:	0a1b      	lsrs	r3, r3, #8
 8005766:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800576a:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	68fa      	ldr	r2, [r7, #12]
 8005770:	fb02 f203 	mul.w	r2, r2, r3
 8005774:	4b81      	ldr	r3, [pc, #516]	; (800597c <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8005776:	68db      	ldr	r3, [r3, #12]
 8005778:	091b      	lsrs	r3, r3, #4
 800577a:	f003 0307 	and.w	r3, r3, #7
 800577e:	3301      	adds	r3, #1
 8005780:	fbb2 f3f3 	udiv	r3, r2, r3
 8005784:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 8005786:	4b7d      	ldr	r3, [pc, #500]	; (800597c <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8005788:	695b      	ldr	r3, [r3, #20]
 800578a:	0e5b      	lsrs	r3, r3, #25
 800578c:	f003 0303 	and.w	r3, r3, #3
 8005790:	3301      	adds	r3, #1
 8005792:	005b      	lsls	r3, r3, #1
 8005794:	69ba      	ldr	r2, [r7, #24]
 8005796:	fbb2 f3f3 	udiv	r3, r2, r3
 800579a:	61fb      	str	r3, [r7, #28]
          break;
 800579c:	e001      	b.n	80057a2 <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
          break;
 800579e:	bf00      	nop
 80057a0:	e122      	b.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 80057a2:	bf00      	nop
        break;
 80057a4:	e120      	b.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 80057a6:	4b75      	ldr	r3, [pc, #468]	; (800597c <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 80057a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057b0:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d103      	bne.n	80057c0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
          frequency = HAL_RCC_GetPCLK2Freq();
 80057b8:	f7ff f93e 	bl	8004a38 <HAL_RCC_GetPCLK2Freq>
 80057bc:	61f8      	str	r0, [r7, #28]
        break;
 80057be:	e113      	b.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = HAL_RCC_GetSysClockFreq();
 80057c0:	f7ff f88e 	bl	80048e0 <HAL_RCC_GetSysClockFreq>
 80057c4:	61f8      	str	r0, [r7, #28]
        break;
 80057c6:	e10f      	b.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80057c8:	4b6c      	ldr	r3, [pc, #432]	; (800597c <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 80057ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057ce:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80057d2:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057da:	d009      	beq.n	80057f0 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 80057dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057e0:	d00a      	beq.n	80057f8 <HAL_RCCEx_GetPeriphCLKFreq+0x708>
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d000      	beq.n	80057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
          break;
 80057e6:	e011      	b.n	800580c <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          frequency = HAL_RCC_GetPCLK1Freq();
 80057e8:	f7ff f910 	bl	8004a0c <HAL_RCC_GetPCLK1Freq>
 80057ec:	61f8      	str	r0, [r7, #28]
          break;
 80057ee:	e00d      	b.n	800580c <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          frequency = HAL_RCC_GetSysClockFreq();
 80057f0:	f7ff f876 	bl	80048e0 <HAL_RCC_GetSysClockFreq>
 80057f4:	61f8      	str	r0, [r7, #28]
          break;
 80057f6:	e009      	b.n	800580c <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80057f8:	4b60      	ldr	r3, [pc, #384]	; (800597c <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005800:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005804:	d101      	bne.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x71a>
            frequency = HSI_VALUE;
 8005806:	4b5e      	ldr	r3, [pc, #376]	; (8005980 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8005808:	61fb      	str	r3, [r7, #28]
          break;
 800580a:	bf00      	nop
        break;
 800580c:	e0ec      	b.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800580e:	4b5b      	ldr	r3, [pc, #364]	; (800597c <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8005810:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005814:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005818:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005820:	d009      	beq.n	8005836 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8005822:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005826:	d00a      	beq.n	800583e <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8005828:	2b00      	cmp	r3, #0
 800582a:	d000      	beq.n	800582e <HAL_RCCEx_GetPeriphCLKFreq+0x73e>
          break;
 800582c:	e011      	b.n	8005852 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
          frequency = HAL_RCC_GetPCLK1Freq();
 800582e:	f7ff f8ed 	bl	8004a0c <HAL_RCC_GetPCLK1Freq>
 8005832:	61f8      	str	r0, [r7, #28]
          break;
 8005834:	e00d      	b.n	8005852 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
          frequency = HAL_RCC_GetSysClockFreq();
 8005836:	f7ff f853 	bl	80048e0 <HAL_RCC_GetSysClockFreq>
 800583a:	61f8      	str	r0, [r7, #28]
          break;
 800583c:	e009      	b.n	8005852 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800583e:	4b4f      	ldr	r3, [pc, #316]	; (800597c <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005846:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800584a:	d101      	bne.n	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
            frequency = HSI_VALUE;
 800584c:	4b4c      	ldr	r3, [pc, #304]	; (8005980 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 800584e:	61fb      	str	r3, [r7, #28]
          break;
 8005850:	bf00      	nop
        break;
 8005852:	e0c9      	b.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8005854:	4b49      	ldr	r3, [pc, #292]	; (800597c <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8005856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800585a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800585e:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005866:	d009      	beq.n	800587c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8005868:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800586c:	d00a      	beq.n	8005884 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800586e:	2b00      	cmp	r3, #0
 8005870:	d000      	beq.n	8005874 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
          break;
 8005872:	e011      	b.n	8005898 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005874:	f7ff f8ca 	bl	8004a0c <HAL_RCC_GetPCLK1Freq>
 8005878:	61f8      	str	r0, [r7, #28]
          break;
 800587a:	e00d      	b.n	8005898 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
          frequency = HAL_RCC_GetSysClockFreq();
 800587c:	f7ff f830 	bl	80048e0 <HAL_RCC_GetSysClockFreq>
 8005880:	61f8      	str	r0, [r7, #28]
          break;
 8005882:	e009      	b.n	8005898 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005884:	4b3d      	ldr	r3, [pc, #244]	; (800597c <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800588c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005890:	d101      	bne.n	8005896 <HAL_RCCEx_GetPeriphCLKFreq+0x7a6>
            frequency = HSI_VALUE;
 8005892:	4b3b      	ldr	r3, [pc, #236]	; (8005980 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8005894:	61fb      	str	r3, [r7, #28]
          break;
 8005896:	bf00      	nop
        break;
 8005898:	e0a6      	b.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800589a:	4b38      	ldr	r3, [pc, #224]	; (800597c <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 800589c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058a0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80058a4:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80058ac:	d010      	beq.n	80058d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7e0>
 80058ae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80058b2:	d802      	bhi.n	80058ba <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d007      	beq.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7d8>
          break;
 80058b8:	e02f      	b.n	800591a <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
        switch(srcclk)
 80058ba:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80058be:	d012      	beq.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
 80058c0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80058c4:	d019      	beq.n	80058fa <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          break;
 80058c6:	e028      	b.n	800591a <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
          frequency = HAL_RCC_GetPCLK1Freq();
 80058c8:	f7ff f8a0 	bl	8004a0c <HAL_RCC_GetPCLK1Freq>
 80058cc:	61f8      	str	r0, [r7, #28]
          break;
 80058ce:	e024      	b.n	800591a <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80058d0:	4b2a      	ldr	r3, [pc, #168]	; (800597c <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 80058d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058d6:	f003 0302 	and.w	r3, r3, #2
 80058da:	2b02      	cmp	r3, #2
 80058dc:	d118      	bne.n	8005910 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
              frequency = LSI_VALUE;
 80058de:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80058e2:	61fb      	str	r3, [r7, #28]
          break;
 80058e4:	e014      	b.n	8005910 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80058e6:	4b25      	ldr	r3, [pc, #148]	; (800597c <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058f2:	d10f      	bne.n	8005914 <HAL_RCCEx_GetPeriphCLKFreq+0x824>
            frequency = HSI_VALUE;
 80058f4:	4b22      	ldr	r3, [pc, #136]	; (8005980 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80058f6:	61fb      	str	r3, [r7, #28]
          break;
 80058f8:	e00c      	b.n	8005914 <HAL_RCCEx_GetPeriphCLKFreq+0x824>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80058fa:	4b20      	ldr	r3, [pc, #128]	; (800597c <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 80058fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005900:	f003 0302 	and.w	r3, r3, #2
 8005904:	2b02      	cmp	r3, #2
 8005906:	d107      	bne.n	8005918 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
            frequency = LSE_VALUE;
 8005908:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800590c:	61fb      	str	r3, [r7, #28]
          break;
 800590e:	e003      	b.n	8005918 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
          break;
 8005910:	bf00      	nop
 8005912:	e069      	b.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 8005914:	bf00      	nop
 8005916:	e067      	b.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 8005918:	bf00      	nop
        break;
 800591a:	e065      	b.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800591c:	4b17      	ldr	r3, [pc, #92]	; (800597c <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 800591e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005922:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005926:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800592e:	d010      	beq.n	8005952 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
 8005930:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005934:	d802      	bhi.n	800593c <HAL_RCCEx_GetPeriphCLKFreq+0x84c>
 8005936:	2b00      	cmp	r3, #0
 8005938:	d007      	beq.n	800594a <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
          break;
 800593a:	e033      	b.n	80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
        switch(srcclk)
 800593c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005940:	d012      	beq.n	8005968 <HAL_RCCEx_GetPeriphCLKFreq+0x878>
 8005942:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005946:	d01d      	beq.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          break;
 8005948:	e02c      	b.n	80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
          frequency = HAL_RCC_GetPCLK1Freq();
 800594a:	f7ff f85f 	bl	8004a0c <HAL_RCC_GetPCLK1Freq>
 800594e:	61f8      	str	r0, [r7, #28]
          break;
 8005950:	e028      	b.n	80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005952:	4b0a      	ldr	r3, [pc, #40]	; (800597c <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8005954:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005958:	f003 0302 	and.w	r3, r3, #2
 800595c:	2b02      	cmp	r3, #2
 800595e:	d11c      	bne.n	800599a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
              frequency = LSI_VALUE;
 8005960:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005964:	61fb      	str	r3, [r7, #28]
          break;
 8005966:	e018      	b.n	800599a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005968:	4b04      	ldr	r3, [pc, #16]	; (800597c <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005970:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005974:	d113      	bne.n	800599e <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
            frequency = HSI_VALUE;
 8005976:	4b02      	ldr	r3, [pc, #8]	; (8005980 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8005978:	61fb      	str	r3, [r7, #28]
          break;
 800597a:	e010      	b.n	800599e <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800597c:	40021000 	.word	0x40021000
 8005980:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005984:	4b1b      	ldr	r3, [pc, #108]	; (80059f4 <HAL_RCCEx_GetPeriphCLKFreq+0x904>)
 8005986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800598a:	f003 0302 	and.w	r3, r3, #2
 800598e:	2b02      	cmp	r3, #2
 8005990:	d107      	bne.n	80059a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
            frequency = LSE_VALUE;
 8005992:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005996:	61fb      	str	r3, [r7, #28]
          break;
 8005998:	e003      	b.n	80059a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
          break;
 800599a:	bf00      	nop
 800599c:	e024      	b.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 800599e:	bf00      	nop
 80059a0:	e022      	b.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 80059a2:	bf00      	nop
        break;
 80059a4:	e020      	b.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 80059a6:	4b13      	ldr	r3, [pc, #76]	; (80059f4 <HAL_RCCEx_GetPeriphCLKFreq+0x904>)
 80059a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059ac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80059b0:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d003      	beq.n	80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
 80059b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059bc:	d004      	beq.n	80059c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>
          break;
 80059be:	e00d      	b.n	80059dc <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 80059c0:	f7ff f824 	bl	8004a0c <HAL_RCC_GetPCLK1Freq>
 80059c4:	61f8      	str	r0, [r7, #28]
          break;
 80059c6:	e009      	b.n	80059dc <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80059c8:	4b0a      	ldr	r3, [pc, #40]	; (80059f4 <HAL_RCCEx_GetPeriphCLKFreq+0x904>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059d4:	d101      	bne.n	80059da <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
            frequency = HSI_VALUE;
 80059d6:	4b08      	ldr	r3, [pc, #32]	; (80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
 80059d8:	61fb      	str	r3, [r7, #28]
          break;
 80059da:	bf00      	nop
        break;
 80059dc:	e004      	b.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
      break;
 80059de:	bf00      	nop
 80059e0:	e002      	b.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
      break;
 80059e2:	bf00      	nop
 80059e4:	e000      	b.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
      break;
 80059e6:	bf00      	nop
    }
  }

  return(frequency);
 80059e8:	69fb      	ldr	r3, [r7, #28]
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3720      	adds	r7, #32
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
 80059f2:	bf00      	nop
 80059f4:	40021000 	.word	0x40021000
 80059f8:	00f42400 	.word	0x00f42400

080059fc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80059fc:	b480      	push	{r7}
 80059fe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005a00:	4b05      	ldr	r3, [pc, #20]	; (8005a18 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a04      	ldr	r2, [pc, #16]	; (8005a18 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005a06:	f043 0304 	orr.w	r3, r3, #4
 8005a0a:	6013      	str	r3, [r2, #0]
}
 8005a0c:	bf00      	nop
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a14:	4770      	bx	lr
 8005a16:	bf00      	nop
 8005a18:	40021000 	.word	0x40021000

08005a1c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a26:	2300      	movs	r3, #0
 8005a28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005a2a:	4b73      	ldr	r3, [pc, #460]	; (8005bf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	f003 0303 	and.w	r3, r3, #3
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d018      	beq.n	8005a68 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005a36:	4b70      	ldr	r3, [pc, #448]	; (8005bf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	f003 0203 	and.w	r2, r3, #3
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d10d      	bne.n	8005a62 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
       ||
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d009      	beq.n	8005a62 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005a4e:	4b6a      	ldr	r3, [pc, #424]	; (8005bf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005a50:	68db      	ldr	r3, [r3, #12]
 8005a52:	091b      	lsrs	r3, r3, #4
 8005a54:	f003 0307 	and.w	r3, r3, #7
 8005a58:	1c5a      	adds	r2, r3, #1
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	685b      	ldr	r3, [r3, #4]
       ||
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d044      	beq.n	8005aec <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	73fb      	strb	r3, [r7, #15]
 8005a66:	e041      	b.n	8005aec <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	2b02      	cmp	r3, #2
 8005a6e:	d00c      	beq.n	8005a8a <RCCEx_PLLSAI1_Config+0x6e>
 8005a70:	2b03      	cmp	r3, #3
 8005a72:	d013      	beq.n	8005a9c <RCCEx_PLLSAI1_Config+0x80>
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d120      	bne.n	8005aba <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005a78:	4b5f      	ldr	r3, [pc, #380]	; (8005bf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f003 0302 	and.w	r3, r3, #2
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d11d      	bne.n	8005ac0 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a88:	e01a      	b.n	8005ac0 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005a8a:	4b5b      	ldr	r3, [pc, #364]	; (8005bf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d116      	bne.n	8005ac4 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a9a:	e013      	b.n	8005ac4 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005a9c:	4b56      	ldr	r3, [pc, #344]	; (8005bf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d10f      	bne.n	8005ac8 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005aa8:	4b53      	ldr	r3, [pc, #332]	; (8005bf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d109      	bne.n	8005ac8 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005ab8:	e006      	b.n	8005ac8 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	73fb      	strb	r3, [r7, #15]
      break;
 8005abe:	e004      	b.n	8005aca <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005ac0:	bf00      	nop
 8005ac2:	e002      	b.n	8005aca <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005ac4:	bf00      	nop
 8005ac6:	e000      	b.n	8005aca <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005ac8:	bf00      	nop
    }

    if(status == HAL_OK)
 8005aca:	7bfb      	ldrb	r3, [r7, #15]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d10d      	bne.n	8005aec <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005ad0:	4b49      	ldr	r3, [pc, #292]	; (8005bf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005ad2:	68db      	ldr	r3, [r3, #12]
 8005ad4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6819      	ldr	r1, [r3, #0]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	3b01      	subs	r3, #1
 8005ae2:	011b      	lsls	r3, r3, #4
 8005ae4:	430b      	orrs	r3, r1
 8005ae6:	4944      	ldr	r1, [pc, #272]	; (8005bf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005aec:	7bfb      	ldrb	r3, [r7, #15]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d17d      	bne.n	8005bee <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005af2:	4b41      	ldr	r3, [pc, #260]	; (8005bf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a40      	ldr	r2, [pc, #256]	; (8005bf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005af8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005afc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005afe:	f7fb fd73 	bl	80015e8 <HAL_GetTick>
 8005b02:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005b04:	e009      	b.n	8005b1a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005b06:	f7fb fd6f 	bl	80015e8 <HAL_GetTick>
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	1ad3      	subs	r3, r2, r3
 8005b10:	2b02      	cmp	r3, #2
 8005b12:	d902      	bls.n	8005b1a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8005b14:	2303      	movs	r3, #3
 8005b16:	73fb      	strb	r3, [r7, #15]
        break;
 8005b18:	e005      	b.n	8005b26 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005b1a:	4b37      	ldr	r3, [pc, #220]	; (8005bf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d1ef      	bne.n	8005b06 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8005b26:	7bfb      	ldrb	r3, [r7, #15]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d160      	bne.n	8005bee <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d111      	bne.n	8005b56 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005b32:	4b31      	ldr	r3, [pc, #196]	; (8005bf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005b34:	691b      	ldr	r3, [r3, #16]
 8005b36:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005b3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	6892      	ldr	r2, [r2, #8]
 8005b42:	0211      	lsls	r1, r2, #8
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	68d2      	ldr	r2, [r2, #12]
 8005b48:	0912      	lsrs	r2, r2, #4
 8005b4a:	0452      	lsls	r2, r2, #17
 8005b4c:	430a      	orrs	r2, r1
 8005b4e:	492a      	ldr	r1, [pc, #168]	; (8005bf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005b50:	4313      	orrs	r3, r2
 8005b52:	610b      	str	r3, [r1, #16]
 8005b54:	e027      	b.n	8005ba6 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d112      	bne.n	8005b82 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005b5c:	4b26      	ldr	r3, [pc, #152]	; (8005bf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005b5e:	691b      	ldr	r3, [r3, #16]
 8005b60:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005b64:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	6892      	ldr	r2, [r2, #8]
 8005b6c:	0211      	lsls	r1, r2, #8
 8005b6e:	687a      	ldr	r2, [r7, #4]
 8005b70:	6912      	ldr	r2, [r2, #16]
 8005b72:	0852      	lsrs	r2, r2, #1
 8005b74:	3a01      	subs	r2, #1
 8005b76:	0552      	lsls	r2, r2, #21
 8005b78:	430a      	orrs	r2, r1
 8005b7a:	491f      	ldr	r1, [pc, #124]	; (8005bf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	610b      	str	r3, [r1, #16]
 8005b80:	e011      	b.n	8005ba6 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005b82:	4b1d      	ldr	r3, [pc, #116]	; (8005bf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005b84:	691b      	ldr	r3, [r3, #16]
 8005b86:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005b8a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	6892      	ldr	r2, [r2, #8]
 8005b92:	0211      	lsls	r1, r2, #8
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	6952      	ldr	r2, [r2, #20]
 8005b98:	0852      	lsrs	r2, r2, #1
 8005b9a:	3a01      	subs	r2, #1
 8005b9c:	0652      	lsls	r2, r2, #25
 8005b9e:	430a      	orrs	r2, r1
 8005ba0:	4915      	ldr	r1, [pc, #84]	; (8005bf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005ba6:	4b14      	ldr	r3, [pc, #80]	; (8005bf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a13      	ldr	r2, [pc, #76]	; (8005bf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005bac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005bb0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bb2:	f7fb fd19 	bl	80015e8 <HAL_GetTick>
 8005bb6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005bb8:	e009      	b.n	8005bce <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005bba:	f7fb fd15 	bl	80015e8 <HAL_GetTick>
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	1ad3      	subs	r3, r2, r3
 8005bc4:	2b02      	cmp	r3, #2
 8005bc6:	d902      	bls.n	8005bce <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8005bc8:	2303      	movs	r3, #3
 8005bca:	73fb      	strb	r3, [r7, #15]
          break;
 8005bcc:	e005      	b.n	8005bda <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005bce:	4b0a      	ldr	r3, [pc, #40]	; (8005bf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d0ef      	beq.n	8005bba <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8005bda:	7bfb      	ldrb	r3, [r7, #15]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d106      	bne.n	8005bee <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005be0:	4b05      	ldr	r3, [pc, #20]	; (8005bf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005be2:	691a      	ldr	r2, [r3, #16]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	699b      	ldr	r3, [r3, #24]
 8005be8:	4903      	ldr	r1, [pc, #12]	; (8005bf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005bea:	4313      	orrs	r3, r2
 8005bec:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005bee:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3710      	adds	r7, #16
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}
 8005bf8:	40021000 	.word	0x40021000

08005bfc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b084      	sub	sp, #16
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c06:	2300      	movs	r3, #0
 8005c08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005c0a:	4b68      	ldr	r3, [pc, #416]	; (8005dac <RCCEx_PLLSAI2_Config+0x1b0>)
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	f003 0303 	and.w	r3, r3, #3
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d018      	beq.n	8005c48 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005c16:	4b65      	ldr	r3, [pc, #404]	; (8005dac <RCCEx_PLLSAI2_Config+0x1b0>)
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	f003 0203 	and.w	r2, r3, #3
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d10d      	bne.n	8005c42 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
       ||
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d009      	beq.n	8005c42 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005c2e:	4b5f      	ldr	r3, [pc, #380]	; (8005dac <RCCEx_PLLSAI2_Config+0x1b0>)
 8005c30:	68db      	ldr	r3, [r3, #12]
 8005c32:	091b      	lsrs	r3, r3, #4
 8005c34:	f003 0307 	and.w	r3, r3, #7
 8005c38:	1c5a      	adds	r2, r3, #1
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	685b      	ldr	r3, [r3, #4]
       ||
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d044      	beq.n	8005ccc <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	73fb      	strb	r3, [r7, #15]
 8005c46:	e041      	b.n	8005ccc <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	2b02      	cmp	r3, #2
 8005c4e:	d00c      	beq.n	8005c6a <RCCEx_PLLSAI2_Config+0x6e>
 8005c50:	2b03      	cmp	r3, #3
 8005c52:	d013      	beq.n	8005c7c <RCCEx_PLLSAI2_Config+0x80>
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d120      	bne.n	8005c9a <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005c58:	4b54      	ldr	r3, [pc, #336]	; (8005dac <RCCEx_PLLSAI2_Config+0x1b0>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f003 0302 	and.w	r3, r3, #2
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d11d      	bne.n	8005ca0 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c68:	e01a      	b.n	8005ca0 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005c6a:	4b50      	ldr	r3, [pc, #320]	; (8005dac <RCCEx_PLLSAI2_Config+0x1b0>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d116      	bne.n	8005ca4 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c7a:	e013      	b.n	8005ca4 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005c7c:	4b4b      	ldr	r3, [pc, #300]	; (8005dac <RCCEx_PLLSAI2_Config+0x1b0>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d10f      	bne.n	8005ca8 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005c88:	4b48      	ldr	r3, [pc, #288]	; (8005dac <RCCEx_PLLSAI2_Config+0x1b0>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d109      	bne.n	8005ca8 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005c98:	e006      	b.n	8005ca8 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	73fb      	strb	r3, [r7, #15]
      break;
 8005c9e:	e004      	b.n	8005caa <RCCEx_PLLSAI2_Config+0xae>
      break;
 8005ca0:	bf00      	nop
 8005ca2:	e002      	b.n	8005caa <RCCEx_PLLSAI2_Config+0xae>
      break;
 8005ca4:	bf00      	nop
 8005ca6:	e000      	b.n	8005caa <RCCEx_PLLSAI2_Config+0xae>
      break;
 8005ca8:	bf00      	nop
    }

    if(status == HAL_OK)
 8005caa:	7bfb      	ldrb	r3, [r7, #15]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d10d      	bne.n	8005ccc <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005cb0:	4b3e      	ldr	r3, [pc, #248]	; (8005dac <RCCEx_PLLSAI2_Config+0x1b0>)
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6819      	ldr	r1, [r3, #0]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	3b01      	subs	r3, #1
 8005cc2:	011b      	lsls	r3, r3, #4
 8005cc4:	430b      	orrs	r3, r1
 8005cc6:	4939      	ldr	r1, [pc, #228]	; (8005dac <RCCEx_PLLSAI2_Config+0x1b0>)
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005ccc:	7bfb      	ldrb	r3, [r7, #15]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d167      	bne.n	8005da2 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005cd2:	4b36      	ldr	r3, [pc, #216]	; (8005dac <RCCEx_PLLSAI2_Config+0x1b0>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a35      	ldr	r2, [pc, #212]	; (8005dac <RCCEx_PLLSAI2_Config+0x1b0>)
 8005cd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cdc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cde:	f7fb fc83 	bl	80015e8 <HAL_GetTick>
 8005ce2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005ce4:	e009      	b.n	8005cfa <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005ce6:	f7fb fc7f 	bl	80015e8 <HAL_GetTick>
 8005cea:	4602      	mov	r2, r0
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	1ad3      	subs	r3, r2, r3
 8005cf0:	2b02      	cmp	r3, #2
 8005cf2:	d902      	bls.n	8005cfa <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8005cf4:	2303      	movs	r3, #3
 8005cf6:	73fb      	strb	r3, [r7, #15]
        break;
 8005cf8:	e005      	b.n	8005d06 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005cfa:	4b2c      	ldr	r3, [pc, #176]	; (8005dac <RCCEx_PLLSAI2_Config+0x1b0>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d1ef      	bne.n	8005ce6 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8005d06:	7bfb      	ldrb	r3, [r7, #15]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d14a      	bne.n	8005da2 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d111      	bne.n	8005d36 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005d12:	4b26      	ldr	r3, [pc, #152]	; (8005dac <RCCEx_PLLSAI2_Config+0x1b0>)
 8005d14:	695b      	ldr	r3, [r3, #20]
 8005d16:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005d1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	6892      	ldr	r2, [r2, #8]
 8005d22:	0211      	lsls	r1, r2, #8
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	68d2      	ldr	r2, [r2, #12]
 8005d28:	0912      	lsrs	r2, r2, #4
 8005d2a:	0452      	lsls	r2, r2, #17
 8005d2c:	430a      	orrs	r2, r1
 8005d2e:	491f      	ldr	r1, [pc, #124]	; (8005dac <RCCEx_PLLSAI2_Config+0x1b0>)
 8005d30:	4313      	orrs	r3, r2
 8005d32:	614b      	str	r3, [r1, #20]
 8005d34:	e011      	b.n	8005d5a <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005d36:	4b1d      	ldr	r3, [pc, #116]	; (8005dac <RCCEx_PLLSAI2_Config+0x1b0>)
 8005d38:	695b      	ldr	r3, [r3, #20]
 8005d3a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005d3e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005d42:	687a      	ldr	r2, [r7, #4]
 8005d44:	6892      	ldr	r2, [r2, #8]
 8005d46:	0211      	lsls	r1, r2, #8
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	6912      	ldr	r2, [r2, #16]
 8005d4c:	0852      	lsrs	r2, r2, #1
 8005d4e:	3a01      	subs	r2, #1
 8005d50:	0652      	lsls	r2, r2, #25
 8005d52:	430a      	orrs	r2, r1
 8005d54:	4915      	ldr	r1, [pc, #84]	; (8005dac <RCCEx_PLLSAI2_Config+0x1b0>)
 8005d56:	4313      	orrs	r3, r2
 8005d58:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005d5a:	4b14      	ldr	r3, [pc, #80]	; (8005dac <RCCEx_PLLSAI2_Config+0x1b0>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a13      	ldr	r2, [pc, #76]	; (8005dac <RCCEx_PLLSAI2_Config+0x1b0>)
 8005d60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d64:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d66:	f7fb fc3f 	bl	80015e8 <HAL_GetTick>
 8005d6a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005d6c:	e009      	b.n	8005d82 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005d6e:	f7fb fc3b 	bl	80015e8 <HAL_GetTick>
 8005d72:	4602      	mov	r2, r0
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	1ad3      	subs	r3, r2, r3
 8005d78:	2b02      	cmp	r3, #2
 8005d7a:	d902      	bls.n	8005d82 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8005d7c:	2303      	movs	r3, #3
 8005d7e:	73fb      	strb	r3, [r7, #15]
          break;
 8005d80:	e005      	b.n	8005d8e <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005d82:	4b0a      	ldr	r3, [pc, #40]	; (8005dac <RCCEx_PLLSAI2_Config+0x1b0>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d0ef      	beq.n	8005d6e <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8005d8e:	7bfb      	ldrb	r3, [r7, #15]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d106      	bne.n	8005da2 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005d94:	4b05      	ldr	r3, [pc, #20]	; (8005dac <RCCEx_PLLSAI2_Config+0x1b0>)
 8005d96:	695a      	ldr	r2, [r3, #20]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	695b      	ldr	r3, [r3, #20]
 8005d9c:	4903      	ldr	r1, [pc, #12]	; (8005dac <RCCEx_PLLSAI2_Config+0x1b0>)
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3710      	adds	r7, #16
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}
 8005dac:	40021000 	.word	0x40021000

08005db0 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b089      	sub	sp, #36	; 0x24
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005dcc:	d10c      	bne.n	8005de8 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8005dce:	4b6e      	ldr	r3, [pc, #440]	; (8005f88 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dd4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005dd8:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8005dda:	69bb      	ldr	r3, [r7, #24]
 8005ddc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005de0:	d112      	bne.n	8005e08 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005de2:	4b6a      	ldr	r3, [pc, #424]	; (8005f8c <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8005de4:	61fb      	str	r3, [r7, #28]
 8005de6:	e00f      	b.n	8005e08 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dee:	d10b      	bne.n	8005e08 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8005df0:	4b65      	ldr	r3, [pc, #404]	; (8005f88 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005df6:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8005dfa:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8005dfc:	69bb      	ldr	r3, [r7, #24]
 8005dfe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005e02:	d101      	bne.n	8005e08 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8005e04:	4b61      	ldr	r3, [pc, #388]	; (8005f8c <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8005e06:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	f040 80b4 	bne.w	8005f78 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8005e14:	69bb      	ldr	r3, [r7, #24]
 8005e16:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005e1a:	d003      	beq.n	8005e24 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 8005e1c:	69bb      	ldr	r3, [r7, #24]
 8005e1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005e22:	d135      	bne.n	8005e90 <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8005e24:	4b58      	ldr	r3, [pc, #352]	; (8005f88 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e2c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005e30:	f040 80a1 	bne.w	8005f76 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 8005e34:	4b54      	ldr	r3, [pc, #336]	; (8005f88 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	f000 809a 	beq.w	8005f76 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005e42:	4b51      	ldr	r3, [pc, #324]	; (8005f88 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005e44:	68db      	ldr	r3, [r3, #12]
 8005e46:	091b      	lsrs	r3, r3, #4
 8005e48:	f003 0307 	and.w	r3, r3, #7
 8005e4c:	3301      	adds	r3, #1
 8005e4e:	693a      	ldr	r2, [r7, #16]
 8005e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e54:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005e56:	4b4c      	ldr	r3, [pc, #304]	; (8005f88 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	0a1b      	lsrs	r3, r3, #8
 8005e5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e60:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d10a      	bne.n	8005e7e <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8005e68:	4b47      	ldr	r3, [pc, #284]	; (8005f88 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005e6a:	68db      	ldr	r3, [r3, #12]
 8005e6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d002      	beq.n	8005e7a <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 8005e74:	2311      	movs	r3, #17
 8005e76:	617b      	str	r3, [r7, #20]
 8005e78:	e001      	b.n	8005e7e <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 8005e7a:	2307      	movs	r3, #7
 8005e7c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	68fa      	ldr	r2, [r7, #12]
 8005e82:	fb02 f203 	mul.w	r2, r2, r3
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e8c:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8005e8e:	e072      	b.n	8005f76 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8005e90:	69bb      	ldr	r3, [r7, #24]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d133      	bne.n	8005efe <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8005e96:	4b3c      	ldr	r3, [pc, #240]	; (8005f88 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ea2:	d169      	bne.n	8005f78 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8005ea4:	4b38      	ldr	r3, [pc, #224]	; (8005f88 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005ea6:	691b      	ldr	r3, [r3, #16]
 8005ea8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d063      	beq.n	8005f78 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005eb0:	4b35      	ldr	r3, [pc, #212]	; (8005f88 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	091b      	lsrs	r3, r3, #4
 8005eb6:	f003 0307 	and.w	r3, r3, #7
 8005eba:	3301      	adds	r3, #1
 8005ebc:	693a      	ldr	r2, [r7, #16]
 8005ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ec2:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005ec4:	4b30      	ldr	r3, [pc, #192]	; (8005f88 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005ec6:	691b      	ldr	r3, [r3, #16]
 8005ec8:	0a1b      	lsrs	r3, r3, #8
 8005eca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ece:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d10a      	bne.n	8005eec <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8005ed6:	4b2c      	ldr	r3, [pc, #176]	; (8005f88 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005ed8:	691b      	ldr	r3, [r3, #16]
 8005eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d002      	beq.n	8005ee8 <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 8005ee2:	2311      	movs	r3, #17
 8005ee4:	617b      	str	r3, [r7, #20]
 8005ee6:	e001      	b.n	8005eec <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 8005ee8:	2307      	movs	r3, #7
 8005eea:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	68fa      	ldr	r2, [r7, #12]
 8005ef0:	fb02 f203 	mul.w	r2, r2, r3
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005efa:	61fb      	str	r3, [r7, #28]
 8005efc:	e03c      	b.n	8005f78 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8005efe:	69bb      	ldr	r3, [r7, #24]
 8005f00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f04:	d003      	beq.n	8005f0e <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 8005f06:	69bb      	ldr	r3, [r7, #24]
 8005f08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005f0c:	d134      	bne.n	8005f78 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8005f0e:	4b1e      	ldr	r3, [pc, #120]	; (8005f88 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f1a:	d12d      	bne.n	8005f78 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8005f1c:	4b1a      	ldr	r3, [pc, #104]	; (8005f88 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005f1e:	695b      	ldr	r3, [r3, #20]
 8005f20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d027      	beq.n	8005f78 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005f28:	4b17      	ldr	r3, [pc, #92]	; (8005f88 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	091b      	lsrs	r3, r3, #4
 8005f2e:	f003 0307 	and.w	r3, r3, #7
 8005f32:	3301      	adds	r3, #1
 8005f34:	693a      	ldr	r2, [r7, #16]
 8005f36:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f3a:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8005f3c:	4b12      	ldr	r3, [pc, #72]	; (8005f88 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005f3e:	695b      	ldr	r3, [r3, #20]
 8005f40:	0a1b      	lsrs	r3, r3, #8
 8005f42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f46:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d10a      	bne.n	8005f64 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8005f4e:	4b0e      	ldr	r3, [pc, #56]	; (8005f88 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005f50:	695b      	ldr	r3, [r3, #20]
 8005f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d002      	beq.n	8005f60 <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 8005f5a:	2311      	movs	r3, #17
 8005f5c:	617b      	str	r3, [r7, #20]
 8005f5e:	e001      	b.n	8005f64 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 8005f60:	2307      	movs	r3, #7
 8005f62:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	68fa      	ldr	r2, [r7, #12]
 8005f68:	fb02 f203 	mul.w	r2, r2, r3
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f72:	61fb      	str	r3, [r7, #28]
 8005f74:	e000      	b.n	8005f78 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8005f76:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8005f78:	69fb      	ldr	r3, [r7, #28]
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3724      	adds	r7, #36	; 0x24
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr
 8005f86:	bf00      	nop
 8005f88:	40021000 	.word	0x40021000
 8005f8c:	001fff68 	.word	0x001fff68

08005f90 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b088      	sub	sp, #32
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d101      	bne.n	8005fa2 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e153      	b.n	800624a <HAL_SAI_Init+0x2ba>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8005fa8:	b2db      	uxtb	r3, r3
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d106      	bne.n	8005fbc <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f7fb f942 	bl	8001240 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f000 f957 	bl	8006270 <SAI_Disable>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d001      	beq.n	8005fcc <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e13e      	b.n	800624a <HAL_SAI_Init+0x2ba>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2202      	movs	r2, #2
 8005fd0:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	68db      	ldr	r3, [r3, #12]
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d007      	beq.n	8005fec <HAL_SAI_Init+0x5c>
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d302      	bcc.n	8005fe6 <HAL_SAI_Init+0x56>
 8005fe0:	2b02      	cmp	r3, #2
 8005fe2:	d006      	beq.n	8005ff2 <HAL_SAI_Init+0x62>
 8005fe4:	e008      	b.n	8005ff8 <HAL_SAI_Init+0x68>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	61fb      	str	r3, [r7, #28]
      break;
 8005fea:	e008      	b.n	8005ffe <HAL_SAI_Init+0x6e>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8005fec:	2310      	movs	r3, #16
 8005fee:	61fb      	str	r3, [r7, #28]
      break;
 8005ff0:	e005      	b.n	8005ffe <HAL_SAI_Init+0x6e>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8005ff2:	2320      	movs	r3, #32
 8005ff4:	61fb      	str	r3, [r7, #28]
      break;
 8005ff6:	e002      	b.n	8005ffe <HAL_SAI_Init+0x6e>
    default :
      tmpregisterGCR = 0;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	61fb      	str	r3, [r7, #28]
      break;
 8005ffc:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	2b03      	cmp	r3, #3
 8006004:	d81d      	bhi.n	8006042 <HAL_SAI_Init+0xb2>
 8006006:	a201      	add	r2, pc, #4	; (adr r2, 800600c <HAL_SAI_Init+0x7c>)
 8006008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800600c:	0800601d 	.word	0x0800601d
 8006010:	08006023 	.word	0x08006023
 8006014:	0800602b 	.word	0x0800602b
 8006018:	08006033 	.word	0x08006033
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800601c:	2300      	movs	r3, #0
 800601e:	617b      	str	r3, [r7, #20]
      break;
 8006020:	e012      	b.n	8006048 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8006022:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006026:	617b      	str	r3, [r7, #20]
      break;
 8006028:	e00e      	b.n	8006048 <HAL_SAI_Init+0xb8>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800602a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800602e:	617b      	str	r3, [r7, #20]
      break;
 8006030:	e00a      	b.n	8006048 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8006032:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006036:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8006038:	69fb      	ldr	r3, [r7, #28]
 800603a:	f043 0301 	orr.w	r3, r3, #1
 800603e:	61fb      	str	r3, [r7, #28]
      break;
 8006040:	e002      	b.n	8006048 <HAL_SAI_Init+0xb8>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 8006042:	2300      	movs	r3, #0
 8006044:	617b      	str	r3, [r7, #20]
      break;
 8006046:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a81      	ldr	r2, [pc, #516]	; (8006254 <HAL_SAI_Init+0x2c4>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d004      	beq.n	800605c <HAL_SAI_Init+0xcc>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a80      	ldr	r2, [pc, #512]	; (8006258 <HAL_SAI_Init+0x2c8>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d103      	bne.n	8006064 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800605c:	4a7f      	ldr	r2, [pc, #508]	; (800625c <HAL_SAI_Init+0x2cc>)
 800605e:	69fb      	ldr	r3, [r7, #28]
 8006060:	6013      	str	r3, [r2, #0]
 8006062:	e002      	b.n	800606a <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8006064:	4a7e      	ldr	r2, [pc, #504]	; (8006260 <HAL_SAI_Init+0x2d0>)
 8006066:	69fb      	ldr	r3, [r7, #28]
 8006068:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	69db      	ldr	r3, [r3, #28]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d041      	beq.n	80060f6 <HAL_SAI_Init+0x166>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a77      	ldr	r2, [pc, #476]	; (8006254 <HAL_SAI_Init+0x2c4>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d004      	beq.n	8006086 <HAL_SAI_Init+0xf6>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a75      	ldr	r2, [pc, #468]	; (8006258 <HAL_SAI_Init+0x2c8>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d105      	bne.n	8006092 <HAL_SAI_Init+0x102>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8006086:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800608a:	f7ff f831 	bl	80050f0 <HAL_RCCEx_GetPeriphCLKFreq>
 800608e:	6138      	str	r0, [r7, #16]
 8006090:	e004      	b.n	800609c <HAL_SAI_Init+0x10c>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8006092:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006096:	f7ff f82b 	bl	80050f0 <HAL_RCCEx_GetPeriphCLKFreq>
 800609a:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 800609c:	693a      	ldr	r2, [r7, #16]
 800609e:	4613      	mov	r3, r2
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	4413      	add	r3, r2
 80060a4:	005b      	lsls	r3, r3, #1
 80060a6:	461a      	mov	r2, r3
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	69db      	ldr	r3, [r3, #28]
 80060ac:	025b      	lsls	r3, r3, #9
 80060ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80060b2:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	4a6b      	ldr	r2, [pc, #428]	; (8006264 <HAL_SAI_Init+0x2d4>)
 80060b8:	fba2 2303 	umull	r2, r3, r2, r3
 80060bc:	08da      	lsrs	r2, r3, #3
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 80060c2:	68f9      	ldr	r1, [r7, #12]
 80060c4:	4b67      	ldr	r3, [pc, #412]	; (8006264 <HAL_SAI_Init+0x2d4>)
 80060c6:	fba3 2301 	umull	r2, r3, r3, r1
 80060ca:	08da      	lsrs	r2, r3, #3
 80060cc:	4613      	mov	r3, r2
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	4413      	add	r3, r2
 80060d2:	005b      	lsls	r3, r3, #1
 80060d4:	1aca      	subs	r2, r1, r3
 80060d6:	2a08      	cmp	r2, #8
 80060d8:	d904      	bls.n	80060e4 <HAL_SAI_Init+0x154>
    {
      hsai->Init.Mckdiv += 1U;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6a1b      	ldr	r3, [r3, #32]
 80060de:	1c5a      	adds	r2, r3, #1
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060e8:	2b04      	cmp	r3, #4
 80060ea:	d104      	bne.n	80060f6 <HAL_SAI_Init+0x166>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6a1b      	ldr	r3, [r3, #32]
 80060f0:	085a      	lsrs	r2, r3, #1
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d003      	beq.n	8006106 <HAL_SAI_Init+0x176>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	2b02      	cmp	r3, #2
 8006104:	d109      	bne.n	800611a <HAL_SAI_Init+0x18a>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800610a:	2b01      	cmp	r3, #1
 800610c:	d101      	bne.n	8006112 <HAL_SAI_Init+0x182>
 800610e:	2300      	movs	r3, #0
 8006110:	e001      	b.n	8006116 <HAL_SAI_Init+0x186>
 8006112:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006116:	61bb      	str	r3, [r7, #24]
 8006118:	e008      	b.n	800612c <HAL_SAI_Init+0x19c>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800611e:	2b01      	cmp	r3, #1
 8006120:	d102      	bne.n	8006128 <HAL_SAI_Init+0x198>
 8006122:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006126:	e000      	b.n	800612a <HAL_SAI_Init+0x19a>
 8006128:	2300      	movs	r3, #0
 800612a:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	6819      	ldr	r1, [r3, #0]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	4b4c      	ldr	r3, [pc, #304]	; (8006268 <HAL_SAI_Init+0x2d8>)
 8006138:	400b      	ands	r3, r1
 800613a:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	6819      	ldr	r1, [r3, #0]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	685a      	ldr	r2, [r3, #4]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800614a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006150:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006156:	431a      	orrs	r2, r3
 8006158:	69bb      	ldr	r3, [r7, #24]
 800615a:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                             \
 8006164:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	691b      	ldr	r3, [r3, #16]
 800616a:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006170:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6a1b      	ldr	r3, [r3, #32]
 8006176:	051b      	lsls	r3, r3, #20
 8006178:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	430a      	orrs	r2, r1
 8006180:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	687a      	ldr	r2, [r7, #4]
 800618a:	6812      	ldr	r2, [r2, #0]
 800618c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8006190:	f023 030f 	bic.w	r3, r3, #15
 8006194:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	6859      	ldr	r1, [r3, #4]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	699a      	ldr	r2, [r3, #24]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061a4:	431a      	orrs	r2, r3
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061aa:	431a      	orrs	r2, r3
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	430a      	orrs	r2, r1
 80061b2:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	6899      	ldr	r1, [r3, #8]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	4b2b      	ldr	r3, [pc, #172]	; (800626c <HAL_SAI_Init+0x2dc>)
 80061c0:	400b      	ands	r3, r1
 80061c2:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	6899      	ldr	r1, [r3, #8]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ce:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80061d4:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 80061da:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 80061e0:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061e6:	3b01      	subs	r3, #1
 80061e8:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 80061ea:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	430a      	orrs	r2, r1
 80061f2:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	68d9      	ldr	r1, [r3, #12]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	f24f 0320 	movw	r3, #61472	; 0xf020
 8006202:	400b      	ands	r3, r1
 8006204:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	68d9      	ldr	r1, [r3, #12]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006214:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800621a:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800621c:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006222:	3b01      	subs	r3, #1
 8006224:	021b      	lsls	r3, r3, #8
 8006226:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	430a      	orrs	r2, r1
 800622e:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2200      	movs	r2, #0
 8006234:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2201      	movs	r2, #1
 800623c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2200      	movs	r2, #0
 8006244:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006248:	2300      	movs	r3, #0
}
 800624a:	4618      	mov	r0, r3
 800624c:	3720      	adds	r7, #32
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}
 8006252:	bf00      	nop
 8006254:	40015404 	.word	0x40015404
 8006258:	40015424 	.word	0x40015424
 800625c:	40015400 	.word	0x40015400
 8006260:	40015800 	.word	0x40015800
 8006264:	cccccccd 	.word	0xcccccccd
 8006268:	ff05c010 	.word	0xff05c010
 800626c:	fff88000 	.word	0xfff88000

08006270 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8006270:	b480      	push	{r7}
 8006272:	b085      	sub	sp, #20
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8006278:	4b18      	ldr	r3, [pc, #96]	; (80062dc <SAI_Disable+0x6c>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a18      	ldr	r2, [pc, #96]	; (80062e0 <SAI_Disable+0x70>)
 800627e:	fba2 2303 	umull	r2, r3, r2, r3
 8006282:	0b1b      	lsrs	r3, r3, #12
 8006284:	009b      	lsls	r3, r3, #2
 8006286:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8006288:	2300      	movs	r3, #0
 800628a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800629a:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d10a      	bne.n	80062b8 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062a8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 80062b2:	2303      	movs	r3, #3
 80062b4:	72fb      	strb	r3, [r7, #11]
      break;
 80062b6:	e009      	b.n	80062cc <SAI_Disable+0x5c>
    }
    count--;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	3b01      	subs	r3, #1
 80062bc:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d1e7      	bne.n	800629c <SAI_Disable+0x2c>

  return status;
 80062cc:	7afb      	ldrb	r3, [r7, #11]
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3714      	adds	r7, #20
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr
 80062da:	bf00      	nop
 80062dc:	20000000 	.word	0x20000000
 80062e0:	95cbec1b 	.word	0x95cbec1b

080062e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b084      	sub	sp, #16
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d101      	bne.n	80062f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	e095      	b.n	8006422 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d108      	bne.n	8006310 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006306:	d009      	beq.n	800631c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2200      	movs	r2, #0
 800630c:	61da      	str	r2, [r3, #28]
 800630e:	e005      	b.n	800631c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2200      	movs	r2, #0
 8006314:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2200      	movs	r2, #0
 800631a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2200      	movs	r2, #0
 8006320:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006328:	b2db      	uxtb	r3, r3
 800632a:	2b00      	cmp	r3, #0
 800632c:	d106      	bne.n	800633c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2200      	movs	r2, #0
 8006332:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f7fa fe98 	bl	800106c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2202      	movs	r2, #2
 8006340:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006352:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	68db      	ldr	r3, [r3, #12]
 8006358:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800635c:	d902      	bls.n	8006364 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800635e:	2300      	movs	r3, #0
 8006360:	60fb      	str	r3, [r7, #12]
 8006362:	e002      	b.n	800636a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006364:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006368:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	68db      	ldr	r3, [r3, #12]
 800636e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006372:	d007      	beq.n	8006384 <HAL_SPI_Init+0xa0>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	68db      	ldr	r3, [r3, #12]
 8006378:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800637c:	d002      	beq.n	8006384 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2200      	movs	r2, #0
 8006382:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006394:	431a      	orrs	r2, r3
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	691b      	ldr	r3, [r3, #16]
 800639a:	f003 0302 	and.w	r3, r3, #2
 800639e:	431a      	orrs	r2, r3
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	695b      	ldr	r3, [r3, #20]
 80063a4:	f003 0301 	and.w	r3, r3, #1
 80063a8:	431a      	orrs	r2, r3
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	699b      	ldr	r3, [r3, #24]
 80063ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063b2:	431a      	orrs	r2, r3
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	69db      	ldr	r3, [r3, #28]
 80063b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80063bc:	431a      	orrs	r2, r3
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6a1b      	ldr	r3, [r3, #32]
 80063c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063c6:	ea42 0103 	orr.w	r1, r2, r3
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ce:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	430a      	orrs	r2, r1
 80063d8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	699b      	ldr	r3, [r3, #24]
 80063de:	0c1b      	lsrs	r3, r3, #16
 80063e0:	f003 0204 	and.w	r2, r3, #4
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e8:	f003 0310 	and.w	r3, r3, #16
 80063ec:	431a      	orrs	r2, r3
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063f2:	f003 0308 	and.w	r3, r3, #8
 80063f6:	431a      	orrs	r2, r3
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	68db      	ldr	r3, [r3, #12]
 80063fc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006400:	ea42 0103 	orr.w	r1, r2, r3
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	430a      	orrs	r2, r1
 8006410:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2200      	movs	r2, #0
 8006416:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2201      	movs	r2, #1
 800641c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006420:	2300      	movs	r3, #0
}
 8006422:	4618      	mov	r0, r3
 8006424:	3710      	adds	r7, #16
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}

0800642a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800642a:	b580      	push	{r7, lr}
 800642c:	b082      	sub	sp, #8
 800642e:	af00      	add	r7, sp, #0
 8006430:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d101      	bne.n	800643c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006438:	2301      	movs	r3, #1
 800643a:	e040      	b.n	80064be <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006440:	2b00      	cmp	r3, #0
 8006442:	d106      	bne.n	8006452 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2200      	movs	r2, #0
 8006448:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f7fa fe51 	bl	80010f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2224      	movs	r2, #36	; 0x24
 8006456:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f022 0201 	bic.w	r2, r2, #1
 8006466:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f000 f989 	bl	8006780 <UART_SetConfig>
 800646e:	4603      	mov	r3, r0
 8006470:	2b01      	cmp	r3, #1
 8006472:	d101      	bne.n	8006478 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006474:	2301      	movs	r3, #1
 8006476:	e022      	b.n	80064be <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800647c:	2b00      	cmp	r3, #0
 800647e:	d002      	beq.n	8006486 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f000 fc07 	bl	8006c94 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	685a      	ldr	r2, [r3, #4]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006494:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	689a      	ldr	r2, [r3, #8]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80064a4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f042 0201 	orr.w	r2, r2, #1
 80064b4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f000 fc8e 	bl	8006dd8 <UART_CheckIdleState>
 80064bc:	4603      	mov	r3, r0
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3708      	adds	r7, #8
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}
	...

080064c8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b088      	sub	sp, #32
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	69db      	ldr	r3, [r3, #28]
 80064d6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80064e8:	69fa      	ldr	r2, [r7, #28]
 80064ea:	f640 030f 	movw	r3, #2063	; 0x80f
 80064ee:	4013      	ands	r3, r2
 80064f0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d113      	bne.n	8006520 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80064f8:	69fb      	ldr	r3, [r7, #28]
 80064fa:	f003 0320 	and.w	r3, r3, #32
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d00e      	beq.n	8006520 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006502:	69bb      	ldr	r3, [r7, #24]
 8006504:	f003 0320 	and.w	r3, r3, #32
 8006508:	2b00      	cmp	r3, #0
 800650a:	d009      	beq.n	8006520 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006510:	2b00      	cmp	r3, #0
 8006512:	f000 8114 	beq.w	800673e <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	4798      	blx	r3
      }
      return;
 800651e:	e10e      	b.n	800673e <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	2b00      	cmp	r3, #0
 8006524:	f000 80d6 	beq.w	80066d4 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	f003 0301 	and.w	r3, r3, #1
 800652e:	2b00      	cmp	r3, #0
 8006530:	d105      	bne.n	800653e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006532:	69ba      	ldr	r2, [r7, #24]
 8006534:	4b86      	ldr	r3, [pc, #536]	; (8006750 <HAL_UART_IRQHandler+0x288>)
 8006536:	4013      	ands	r3, r2
 8006538:	2b00      	cmp	r3, #0
 800653a:	f000 80cb 	beq.w	80066d4 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800653e:	69fb      	ldr	r3, [r7, #28]
 8006540:	f003 0301 	and.w	r3, r3, #1
 8006544:	2b00      	cmp	r3, #0
 8006546:	d00e      	beq.n	8006566 <HAL_UART_IRQHandler+0x9e>
 8006548:	69bb      	ldr	r3, [r7, #24]
 800654a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800654e:	2b00      	cmp	r3, #0
 8006550:	d009      	beq.n	8006566 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	2201      	movs	r2, #1
 8006558:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800655e:	f043 0201 	orr.w	r2, r3, #1
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006566:	69fb      	ldr	r3, [r7, #28]
 8006568:	f003 0302 	and.w	r3, r3, #2
 800656c:	2b00      	cmp	r3, #0
 800656e:	d00e      	beq.n	800658e <HAL_UART_IRQHandler+0xc6>
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	f003 0301 	and.w	r3, r3, #1
 8006576:	2b00      	cmp	r3, #0
 8006578:	d009      	beq.n	800658e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	2202      	movs	r2, #2
 8006580:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006586:	f043 0204 	orr.w	r2, r3, #4
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800658e:	69fb      	ldr	r3, [r7, #28]
 8006590:	f003 0304 	and.w	r3, r3, #4
 8006594:	2b00      	cmp	r3, #0
 8006596:	d00e      	beq.n	80065b6 <HAL_UART_IRQHandler+0xee>
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	f003 0301 	and.w	r3, r3, #1
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d009      	beq.n	80065b6 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	2204      	movs	r2, #4
 80065a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065ae:	f043 0202 	orr.w	r2, r3, #2
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80065b6:	69fb      	ldr	r3, [r7, #28]
 80065b8:	f003 0308 	and.w	r3, r3, #8
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d013      	beq.n	80065e8 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80065c0:	69bb      	ldr	r3, [r7, #24]
 80065c2:	f003 0320 	and.w	r3, r3, #32
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d104      	bne.n	80065d4 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d009      	beq.n	80065e8 <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	2208      	movs	r2, #8
 80065da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065e0:	f043 0208 	orr.w	r2, r3, #8
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80065e8:	69fb      	ldr	r3, [r7, #28]
 80065ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d00f      	beq.n	8006612 <HAL_UART_IRQHandler+0x14a>
 80065f2:	69bb      	ldr	r3, [r7, #24]
 80065f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d00a      	beq.n	8006612 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006604:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800660a:	f043 0220 	orr.w	r2, r3, #32
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006616:	2b00      	cmp	r3, #0
 8006618:	f000 8093 	beq.w	8006742 <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800661c:	69fb      	ldr	r3, [r7, #28]
 800661e:	f003 0320 	and.w	r3, r3, #32
 8006622:	2b00      	cmp	r3, #0
 8006624:	d00c      	beq.n	8006640 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006626:	69bb      	ldr	r3, [r7, #24]
 8006628:	f003 0320 	and.w	r3, r3, #32
 800662c:	2b00      	cmp	r3, #0
 800662e:	d007      	beq.n	8006640 <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006634:	2b00      	cmp	r3, #0
 8006636:	d003      	beq.n	8006640 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006644:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006650:	2b40      	cmp	r3, #64	; 0x40
 8006652:	d004      	beq.n	800665e <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800665a:	2b00      	cmp	r3, #0
 800665c:	d031      	beq.n	80066c2 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f000 fc7a 	bl	8006f58 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	689b      	ldr	r3, [r3, #8]
 800666a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800666e:	2b40      	cmp	r3, #64	; 0x40
 8006670:	d123      	bne.n	80066ba <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	689a      	ldr	r2, [r3, #8]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006680:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006686:	2b00      	cmp	r3, #0
 8006688:	d013      	beq.n	80066b2 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800668e:	4a31      	ldr	r2, [pc, #196]	; (8006754 <HAL_UART_IRQHandler+0x28c>)
 8006690:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006696:	4618      	mov	r0, r3
 8006698:	f7fb f99e 	bl	80019d8 <HAL_DMA_Abort_IT>
 800669c:	4603      	mov	r3, r0
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d016      	beq.n	80066d0 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a8:	687a      	ldr	r2, [r7, #4]
 80066aa:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80066ac:	4610      	mov	r0, r2
 80066ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066b0:	e00e      	b.n	80066d0 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f000 f85a 	bl	800676c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066b8:	e00a      	b.n	80066d0 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f000 f856 	bl	800676c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066c0:	e006      	b.n	80066d0 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f000 f852 	bl	800676c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80066ce:	e038      	b.n	8006742 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066d0:	bf00      	nop
    return;
 80066d2:	e036      	b.n	8006742 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80066d4:	69fb      	ldr	r3, [r7, #28]
 80066d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d00d      	beq.n	80066fa <HAL_UART_IRQHandler+0x232>
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d008      	beq.n	80066fa <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80066f0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 fc7f 	bl	8006ff6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80066f8:	e026      	b.n	8006748 <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80066fa:	69fb      	ldr	r3, [r7, #28]
 80066fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006700:	2b00      	cmp	r3, #0
 8006702:	d00d      	beq.n	8006720 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006704:	69bb      	ldr	r3, [r7, #24]
 8006706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800670a:	2b00      	cmp	r3, #0
 800670c:	d008      	beq.n	8006720 <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006712:	2b00      	cmp	r3, #0
 8006714:	d017      	beq.n	8006746 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	4798      	blx	r3
    }
    return;
 800671e:	e012      	b.n	8006746 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006720:	69fb      	ldr	r3, [r7, #28]
 8006722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006726:	2b00      	cmp	r3, #0
 8006728:	d00e      	beq.n	8006748 <HAL_UART_IRQHandler+0x280>
 800672a:	69bb      	ldr	r3, [r7, #24]
 800672c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006730:	2b00      	cmp	r3, #0
 8006732:	d009      	beq.n	8006748 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f000 fc45 	bl	8006fc4 <UART_EndTransmit_IT>
    return;
 800673a:	bf00      	nop
 800673c:	e004      	b.n	8006748 <HAL_UART_IRQHandler+0x280>
      return;
 800673e:	bf00      	nop
 8006740:	e002      	b.n	8006748 <HAL_UART_IRQHandler+0x280>
    return;
 8006742:	bf00      	nop
 8006744:	e000      	b.n	8006748 <HAL_UART_IRQHandler+0x280>
    return;
 8006746:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006748:	3720      	adds	r7, #32
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}
 800674e:	bf00      	nop
 8006750:	04000120 	.word	0x04000120
 8006754:	08006f99 	.word	0x08006f99

08006758 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006758:	b480      	push	{r7}
 800675a:	b083      	sub	sp, #12
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006760:	bf00      	nop
 8006762:	370c      	adds	r7, #12
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr

0800676c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800676c:	b480      	push	{r7}
 800676e:	b083      	sub	sp, #12
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006774:	bf00      	nop
 8006776:	370c      	adds	r7, #12
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr

08006780 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006780:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8006784:	b088      	sub	sp, #32
 8006786:	af00      	add	r7, sp, #0
 8006788:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800678a:	2300      	movs	r3, #0
 800678c:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	689a      	ldr	r2, [r3, #8]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	691b      	ldr	r3, [r3, #16]
 8006796:	431a      	orrs	r2, r3
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	695b      	ldr	r3, [r3, #20]
 800679c:	431a      	orrs	r2, r3
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	69db      	ldr	r3, [r3, #28]
 80067a2:	4313      	orrs	r3, r2
 80067a4:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	4bac      	ldr	r3, [pc, #688]	; (8006a60 <UART_SetConfig+0x2e0>)
 80067ae:	4013      	ands	r3, r2
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	6812      	ldr	r2, [r2, #0]
 80067b4:	69f9      	ldr	r1, [r7, #28]
 80067b6:	430b      	orrs	r3, r1
 80067b8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	68da      	ldr	r2, [r3, #12]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	430a      	orrs	r2, r1
 80067ce:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	699b      	ldr	r3, [r3, #24]
 80067d4:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4aa2      	ldr	r2, [pc, #648]	; (8006a64 <UART_SetConfig+0x2e4>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d004      	beq.n	80067ea <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6a1b      	ldr	r3, [r3, #32]
 80067e4:	69fa      	ldr	r2, [r7, #28]
 80067e6:	4313      	orrs	r3, r2
 80067e8:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	69fa      	ldr	r2, [r7, #28]
 80067fa:	430a      	orrs	r2, r1
 80067fc:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a99      	ldr	r2, [pc, #612]	; (8006a68 <UART_SetConfig+0x2e8>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d121      	bne.n	800684c <UART_SetConfig+0xcc>
 8006808:	4b98      	ldr	r3, [pc, #608]	; (8006a6c <UART_SetConfig+0x2ec>)
 800680a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800680e:	f003 0303 	and.w	r3, r3, #3
 8006812:	2b03      	cmp	r3, #3
 8006814:	d816      	bhi.n	8006844 <UART_SetConfig+0xc4>
 8006816:	a201      	add	r2, pc, #4	; (adr r2, 800681c <UART_SetConfig+0x9c>)
 8006818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800681c:	0800682d 	.word	0x0800682d
 8006820:	08006839 	.word	0x08006839
 8006824:	08006833 	.word	0x08006833
 8006828:	0800683f 	.word	0x0800683f
 800682c:	2301      	movs	r3, #1
 800682e:	76fb      	strb	r3, [r7, #27]
 8006830:	e0e8      	b.n	8006a04 <UART_SetConfig+0x284>
 8006832:	2302      	movs	r3, #2
 8006834:	76fb      	strb	r3, [r7, #27]
 8006836:	e0e5      	b.n	8006a04 <UART_SetConfig+0x284>
 8006838:	2304      	movs	r3, #4
 800683a:	76fb      	strb	r3, [r7, #27]
 800683c:	e0e2      	b.n	8006a04 <UART_SetConfig+0x284>
 800683e:	2308      	movs	r3, #8
 8006840:	76fb      	strb	r3, [r7, #27]
 8006842:	e0df      	b.n	8006a04 <UART_SetConfig+0x284>
 8006844:	2310      	movs	r3, #16
 8006846:	76fb      	strb	r3, [r7, #27]
 8006848:	bf00      	nop
 800684a:	e0db      	b.n	8006a04 <UART_SetConfig+0x284>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a87      	ldr	r2, [pc, #540]	; (8006a70 <UART_SetConfig+0x2f0>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d134      	bne.n	80068c0 <UART_SetConfig+0x140>
 8006856:	4b85      	ldr	r3, [pc, #532]	; (8006a6c <UART_SetConfig+0x2ec>)
 8006858:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800685c:	f003 030c 	and.w	r3, r3, #12
 8006860:	2b0c      	cmp	r3, #12
 8006862:	d829      	bhi.n	80068b8 <UART_SetConfig+0x138>
 8006864:	a201      	add	r2, pc, #4	; (adr r2, 800686c <UART_SetConfig+0xec>)
 8006866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800686a:	bf00      	nop
 800686c:	080068a1 	.word	0x080068a1
 8006870:	080068b9 	.word	0x080068b9
 8006874:	080068b9 	.word	0x080068b9
 8006878:	080068b9 	.word	0x080068b9
 800687c:	080068ad 	.word	0x080068ad
 8006880:	080068b9 	.word	0x080068b9
 8006884:	080068b9 	.word	0x080068b9
 8006888:	080068b9 	.word	0x080068b9
 800688c:	080068a7 	.word	0x080068a7
 8006890:	080068b9 	.word	0x080068b9
 8006894:	080068b9 	.word	0x080068b9
 8006898:	080068b9 	.word	0x080068b9
 800689c:	080068b3 	.word	0x080068b3
 80068a0:	2300      	movs	r3, #0
 80068a2:	76fb      	strb	r3, [r7, #27]
 80068a4:	e0ae      	b.n	8006a04 <UART_SetConfig+0x284>
 80068a6:	2302      	movs	r3, #2
 80068a8:	76fb      	strb	r3, [r7, #27]
 80068aa:	e0ab      	b.n	8006a04 <UART_SetConfig+0x284>
 80068ac:	2304      	movs	r3, #4
 80068ae:	76fb      	strb	r3, [r7, #27]
 80068b0:	e0a8      	b.n	8006a04 <UART_SetConfig+0x284>
 80068b2:	2308      	movs	r3, #8
 80068b4:	76fb      	strb	r3, [r7, #27]
 80068b6:	e0a5      	b.n	8006a04 <UART_SetConfig+0x284>
 80068b8:	2310      	movs	r3, #16
 80068ba:	76fb      	strb	r3, [r7, #27]
 80068bc:	bf00      	nop
 80068be:	e0a1      	b.n	8006a04 <UART_SetConfig+0x284>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a6b      	ldr	r2, [pc, #428]	; (8006a74 <UART_SetConfig+0x2f4>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d120      	bne.n	800690c <UART_SetConfig+0x18c>
 80068ca:	4b68      	ldr	r3, [pc, #416]	; (8006a6c <UART_SetConfig+0x2ec>)
 80068cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068d0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80068d4:	2b10      	cmp	r3, #16
 80068d6:	d00f      	beq.n	80068f8 <UART_SetConfig+0x178>
 80068d8:	2b10      	cmp	r3, #16
 80068da:	d802      	bhi.n	80068e2 <UART_SetConfig+0x162>
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d005      	beq.n	80068ec <UART_SetConfig+0x16c>
 80068e0:	e010      	b.n	8006904 <UART_SetConfig+0x184>
 80068e2:	2b20      	cmp	r3, #32
 80068e4:	d005      	beq.n	80068f2 <UART_SetConfig+0x172>
 80068e6:	2b30      	cmp	r3, #48	; 0x30
 80068e8:	d009      	beq.n	80068fe <UART_SetConfig+0x17e>
 80068ea:	e00b      	b.n	8006904 <UART_SetConfig+0x184>
 80068ec:	2300      	movs	r3, #0
 80068ee:	76fb      	strb	r3, [r7, #27]
 80068f0:	e088      	b.n	8006a04 <UART_SetConfig+0x284>
 80068f2:	2302      	movs	r3, #2
 80068f4:	76fb      	strb	r3, [r7, #27]
 80068f6:	e085      	b.n	8006a04 <UART_SetConfig+0x284>
 80068f8:	2304      	movs	r3, #4
 80068fa:	76fb      	strb	r3, [r7, #27]
 80068fc:	e082      	b.n	8006a04 <UART_SetConfig+0x284>
 80068fe:	2308      	movs	r3, #8
 8006900:	76fb      	strb	r3, [r7, #27]
 8006902:	e07f      	b.n	8006a04 <UART_SetConfig+0x284>
 8006904:	2310      	movs	r3, #16
 8006906:	76fb      	strb	r3, [r7, #27]
 8006908:	bf00      	nop
 800690a:	e07b      	b.n	8006a04 <UART_SetConfig+0x284>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a59      	ldr	r2, [pc, #356]	; (8006a78 <UART_SetConfig+0x2f8>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d120      	bne.n	8006958 <UART_SetConfig+0x1d8>
 8006916:	4b55      	ldr	r3, [pc, #340]	; (8006a6c <UART_SetConfig+0x2ec>)
 8006918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800691c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006920:	2b40      	cmp	r3, #64	; 0x40
 8006922:	d00f      	beq.n	8006944 <UART_SetConfig+0x1c4>
 8006924:	2b40      	cmp	r3, #64	; 0x40
 8006926:	d802      	bhi.n	800692e <UART_SetConfig+0x1ae>
 8006928:	2b00      	cmp	r3, #0
 800692a:	d005      	beq.n	8006938 <UART_SetConfig+0x1b8>
 800692c:	e010      	b.n	8006950 <UART_SetConfig+0x1d0>
 800692e:	2b80      	cmp	r3, #128	; 0x80
 8006930:	d005      	beq.n	800693e <UART_SetConfig+0x1be>
 8006932:	2bc0      	cmp	r3, #192	; 0xc0
 8006934:	d009      	beq.n	800694a <UART_SetConfig+0x1ca>
 8006936:	e00b      	b.n	8006950 <UART_SetConfig+0x1d0>
 8006938:	2300      	movs	r3, #0
 800693a:	76fb      	strb	r3, [r7, #27]
 800693c:	e062      	b.n	8006a04 <UART_SetConfig+0x284>
 800693e:	2302      	movs	r3, #2
 8006940:	76fb      	strb	r3, [r7, #27]
 8006942:	e05f      	b.n	8006a04 <UART_SetConfig+0x284>
 8006944:	2304      	movs	r3, #4
 8006946:	76fb      	strb	r3, [r7, #27]
 8006948:	e05c      	b.n	8006a04 <UART_SetConfig+0x284>
 800694a:	2308      	movs	r3, #8
 800694c:	76fb      	strb	r3, [r7, #27]
 800694e:	e059      	b.n	8006a04 <UART_SetConfig+0x284>
 8006950:	2310      	movs	r3, #16
 8006952:	76fb      	strb	r3, [r7, #27]
 8006954:	bf00      	nop
 8006956:	e055      	b.n	8006a04 <UART_SetConfig+0x284>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a47      	ldr	r2, [pc, #284]	; (8006a7c <UART_SetConfig+0x2fc>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d124      	bne.n	80069ac <UART_SetConfig+0x22c>
 8006962:	4b42      	ldr	r3, [pc, #264]	; (8006a6c <UART_SetConfig+0x2ec>)
 8006964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006968:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800696c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006970:	d012      	beq.n	8006998 <UART_SetConfig+0x218>
 8006972:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006976:	d802      	bhi.n	800697e <UART_SetConfig+0x1fe>
 8006978:	2b00      	cmp	r3, #0
 800697a:	d007      	beq.n	800698c <UART_SetConfig+0x20c>
 800697c:	e012      	b.n	80069a4 <UART_SetConfig+0x224>
 800697e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006982:	d006      	beq.n	8006992 <UART_SetConfig+0x212>
 8006984:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006988:	d009      	beq.n	800699e <UART_SetConfig+0x21e>
 800698a:	e00b      	b.n	80069a4 <UART_SetConfig+0x224>
 800698c:	2300      	movs	r3, #0
 800698e:	76fb      	strb	r3, [r7, #27]
 8006990:	e038      	b.n	8006a04 <UART_SetConfig+0x284>
 8006992:	2302      	movs	r3, #2
 8006994:	76fb      	strb	r3, [r7, #27]
 8006996:	e035      	b.n	8006a04 <UART_SetConfig+0x284>
 8006998:	2304      	movs	r3, #4
 800699a:	76fb      	strb	r3, [r7, #27]
 800699c:	e032      	b.n	8006a04 <UART_SetConfig+0x284>
 800699e:	2308      	movs	r3, #8
 80069a0:	76fb      	strb	r3, [r7, #27]
 80069a2:	e02f      	b.n	8006a04 <UART_SetConfig+0x284>
 80069a4:	2310      	movs	r3, #16
 80069a6:	76fb      	strb	r3, [r7, #27]
 80069a8:	bf00      	nop
 80069aa:	e02b      	b.n	8006a04 <UART_SetConfig+0x284>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a2c      	ldr	r2, [pc, #176]	; (8006a64 <UART_SetConfig+0x2e4>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d124      	bne.n	8006a00 <UART_SetConfig+0x280>
 80069b6:	4b2d      	ldr	r3, [pc, #180]	; (8006a6c <UART_SetConfig+0x2ec>)
 80069b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069bc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80069c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069c4:	d012      	beq.n	80069ec <UART_SetConfig+0x26c>
 80069c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069ca:	d802      	bhi.n	80069d2 <UART_SetConfig+0x252>
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d007      	beq.n	80069e0 <UART_SetConfig+0x260>
 80069d0:	e012      	b.n	80069f8 <UART_SetConfig+0x278>
 80069d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069d6:	d006      	beq.n	80069e6 <UART_SetConfig+0x266>
 80069d8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80069dc:	d009      	beq.n	80069f2 <UART_SetConfig+0x272>
 80069de:	e00b      	b.n	80069f8 <UART_SetConfig+0x278>
 80069e0:	2300      	movs	r3, #0
 80069e2:	76fb      	strb	r3, [r7, #27]
 80069e4:	e00e      	b.n	8006a04 <UART_SetConfig+0x284>
 80069e6:	2302      	movs	r3, #2
 80069e8:	76fb      	strb	r3, [r7, #27]
 80069ea:	e00b      	b.n	8006a04 <UART_SetConfig+0x284>
 80069ec:	2304      	movs	r3, #4
 80069ee:	76fb      	strb	r3, [r7, #27]
 80069f0:	e008      	b.n	8006a04 <UART_SetConfig+0x284>
 80069f2:	2308      	movs	r3, #8
 80069f4:	76fb      	strb	r3, [r7, #27]
 80069f6:	e005      	b.n	8006a04 <UART_SetConfig+0x284>
 80069f8:	2310      	movs	r3, #16
 80069fa:	76fb      	strb	r3, [r7, #27]
 80069fc:	bf00      	nop
 80069fe:	e001      	b.n	8006a04 <UART_SetConfig+0x284>
 8006a00:	2310      	movs	r3, #16
 8006a02:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a16      	ldr	r2, [pc, #88]	; (8006a64 <UART_SetConfig+0x2e4>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	f040 8087 	bne.w	8006b1e <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006a10:	7efb      	ldrb	r3, [r7, #27]
 8006a12:	2b08      	cmp	r3, #8
 8006a14:	d836      	bhi.n	8006a84 <UART_SetConfig+0x304>
 8006a16:	a201      	add	r2, pc, #4	; (adr r2, 8006a1c <UART_SetConfig+0x29c>)
 8006a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a1c:	08006a41 	.word	0x08006a41
 8006a20:	08006a85 	.word	0x08006a85
 8006a24:	08006a49 	.word	0x08006a49
 8006a28:	08006a85 	.word	0x08006a85
 8006a2c:	08006a4f 	.word	0x08006a4f
 8006a30:	08006a85 	.word	0x08006a85
 8006a34:	08006a85 	.word	0x08006a85
 8006a38:	08006a85 	.word	0x08006a85
 8006a3c:	08006a57 	.word	0x08006a57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a40:	f7fd ffe4 	bl	8004a0c <HAL_RCC_GetPCLK1Freq>
 8006a44:	6178      	str	r0, [r7, #20]
        break;
 8006a46:	e022      	b.n	8006a8e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a48:	4b0d      	ldr	r3, [pc, #52]	; (8006a80 <UART_SetConfig+0x300>)
 8006a4a:	617b      	str	r3, [r7, #20]
        break;
 8006a4c:	e01f      	b.n	8006a8e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a4e:	f7fd ff47 	bl	80048e0 <HAL_RCC_GetSysClockFreq>
 8006a52:	6178      	str	r0, [r7, #20]
        break;
 8006a54:	e01b      	b.n	8006a8e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a5a:	617b      	str	r3, [r7, #20]
        break;
 8006a5c:	e017      	b.n	8006a8e <UART_SetConfig+0x30e>
 8006a5e:	bf00      	nop
 8006a60:	efff69f3 	.word	0xefff69f3
 8006a64:	40008000 	.word	0x40008000
 8006a68:	40013800 	.word	0x40013800
 8006a6c:	40021000 	.word	0x40021000
 8006a70:	40004400 	.word	0x40004400
 8006a74:	40004800 	.word	0x40004800
 8006a78:	40004c00 	.word	0x40004c00
 8006a7c:	40005000 	.word	0x40005000
 8006a80:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006a84:	2300      	movs	r3, #0
 8006a86:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	76bb      	strb	r3, [r7, #26]
        break;
 8006a8c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	f000 80f1 	beq.w	8006c78 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	685a      	ldr	r2, [r3, #4]
 8006a9a:	4613      	mov	r3, r2
 8006a9c:	005b      	lsls	r3, r3, #1
 8006a9e:	4413      	add	r3, r2
 8006aa0:	697a      	ldr	r2, [r7, #20]
 8006aa2:	429a      	cmp	r2, r3
 8006aa4:	d305      	bcc.n	8006ab2 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006aac:	697a      	ldr	r2, [r7, #20]
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	d902      	bls.n	8006ab8 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	76bb      	strb	r3, [r7, #26]
 8006ab6:	e0df      	b.n	8006c78 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	4619      	mov	r1, r3
 8006abc:	f04f 0200 	mov.w	r2, #0
 8006ac0:	f04f 0300 	mov.w	r3, #0
 8006ac4:	f04f 0400 	mov.w	r4, #0
 8006ac8:	0214      	lsls	r4, r2, #8
 8006aca:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006ace:	020b      	lsls	r3, r1, #8
 8006ad0:	687a      	ldr	r2, [r7, #4]
 8006ad2:	6852      	ldr	r2, [r2, #4]
 8006ad4:	0852      	lsrs	r2, r2, #1
 8006ad6:	4611      	mov	r1, r2
 8006ad8:	f04f 0200 	mov.w	r2, #0
 8006adc:	eb13 0b01 	adds.w	fp, r3, r1
 8006ae0:	eb44 0c02 	adc.w	ip, r4, r2
 8006ae4:	4658      	mov	r0, fp
 8006ae6:	4661      	mov	r1, ip
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	f04f 0400 	mov.w	r4, #0
 8006af0:	461a      	mov	r2, r3
 8006af2:	4623      	mov	r3, r4
 8006af4:	f7f9 fb68 	bl	80001c8 <__aeabi_uldivmod>
 8006af8:	4603      	mov	r3, r0
 8006afa:	460c      	mov	r4, r1
 8006afc:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b04:	d308      	bcc.n	8006b18 <UART_SetConfig+0x398>
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b0c:	d204      	bcs.n	8006b18 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	693a      	ldr	r2, [r7, #16]
 8006b14:	60da      	str	r2, [r3, #12]
 8006b16:	e0af      	b.n	8006c78 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	76bb      	strb	r3, [r7, #26]
 8006b1c:	e0ac      	b.n	8006c78 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	69db      	ldr	r3, [r3, #28]
 8006b22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b26:	d15b      	bne.n	8006be0 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8006b28:	7efb      	ldrb	r3, [r7, #27]
 8006b2a:	2b08      	cmp	r3, #8
 8006b2c:	d827      	bhi.n	8006b7e <UART_SetConfig+0x3fe>
 8006b2e:	a201      	add	r2, pc, #4	; (adr r2, 8006b34 <UART_SetConfig+0x3b4>)
 8006b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b34:	08006b59 	.word	0x08006b59
 8006b38:	08006b61 	.word	0x08006b61
 8006b3c:	08006b69 	.word	0x08006b69
 8006b40:	08006b7f 	.word	0x08006b7f
 8006b44:	08006b6f 	.word	0x08006b6f
 8006b48:	08006b7f 	.word	0x08006b7f
 8006b4c:	08006b7f 	.word	0x08006b7f
 8006b50:	08006b7f 	.word	0x08006b7f
 8006b54:	08006b77 	.word	0x08006b77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b58:	f7fd ff58 	bl	8004a0c <HAL_RCC_GetPCLK1Freq>
 8006b5c:	6178      	str	r0, [r7, #20]
        break;
 8006b5e:	e013      	b.n	8006b88 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b60:	f7fd ff6a 	bl	8004a38 <HAL_RCC_GetPCLK2Freq>
 8006b64:	6178      	str	r0, [r7, #20]
        break;
 8006b66:	e00f      	b.n	8006b88 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b68:	4b49      	ldr	r3, [pc, #292]	; (8006c90 <UART_SetConfig+0x510>)
 8006b6a:	617b      	str	r3, [r7, #20]
        break;
 8006b6c:	e00c      	b.n	8006b88 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b6e:	f7fd feb7 	bl	80048e0 <HAL_RCC_GetSysClockFreq>
 8006b72:	6178      	str	r0, [r7, #20]
        break;
 8006b74:	e008      	b.n	8006b88 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b7a:	617b      	str	r3, [r7, #20]
        break;
 8006b7c:	e004      	b.n	8006b88 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006b82:	2301      	movs	r3, #1
 8006b84:	76bb      	strb	r3, [r7, #26]
        break;
 8006b86:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d074      	beq.n	8006c78 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	005a      	lsls	r2, r3, #1
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	085b      	lsrs	r3, r3, #1
 8006b98:	441a      	add	r2, r3
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ba2:	b29b      	uxth	r3, r3
 8006ba4:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	2b0f      	cmp	r3, #15
 8006baa:	d916      	bls.n	8006bda <UART_SetConfig+0x45a>
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bb2:	d212      	bcs.n	8006bda <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	f023 030f 	bic.w	r3, r3, #15
 8006bbc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	085b      	lsrs	r3, r3, #1
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	f003 0307 	and.w	r3, r3, #7
 8006bc8:	b29a      	uxth	r2, r3
 8006bca:	89fb      	ldrh	r3, [r7, #14]
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	89fa      	ldrh	r2, [r7, #14]
 8006bd6:	60da      	str	r2, [r3, #12]
 8006bd8:	e04e      	b.n	8006c78 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	76bb      	strb	r3, [r7, #26]
 8006bde:	e04b      	b.n	8006c78 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006be0:	7efb      	ldrb	r3, [r7, #27]
 8006be2:	2b08      	cmp	r3, #8
 8006be4:	d827      	bhi.n	8006c36 <UART_SetConfig+0x4b6>
 8006be6:	a201      	add	r2, pc, #4	; (adr r2, 8006bec <UART_SetConfig+0x46c>)
 8006be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bec:	08006c11 	.word	0x08006c11
 8006bf0:	08006c19 	.word	0x08006c19
 8006bf4:	08006c21 	.word	0x08006c21
 8006bf8:	08006c37 	.word	0x08006c37
 8006bfc:	08006c27 	.word	0x08006c27
 8006c00:	08006c37 	.word	0x08006c37
 8006c04:	08006c37 	.word	0x08006c37
 8006c08:	08006c37 	.word	0x08006c37
 8006c0c:	08006c2f 	.word	0x08006c2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c10:	f7fd fefc 	bl	8004a0c <HAL_RCC_GetPCLK1Freq>
 8006c14:	6178      	str	r0, [r7, #20]
        break;
 8006c16:	e013      	b.n	8006c40 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c18:	f7fd ff0e 	bl	8004a38 <HAL_RCC_GetPCLK2Freq>
 8006c1c:	6178      	str	r0, [r7, #20]
        break;
 8006c1e:	e00f      	b.n	8006c40 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c20:	4b1b      	ldr	r3, [pc, #108]	; (8006c90 <UART_SetConfig+0x510>)
 8006c22:	617b      	str	r3, [r7, #20]
        break;
 8006c24:	e00c      	b.n	8006c40 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c26:	f7fd fe5b 	bl	80048e0 <HAL_RCC_GetSysClockFreq>
 8006c2a:	6178      	str	r0, [r7, #20]
        break;
 8006c2c:	e008      	b.n	8006c40 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c32:	617b      	str	r3, [r7, #20]
        break;
 8006c34:	e004      	b.n	8006c40 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8006c36:	2300      	movs	r3, #0
 8006c38:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	76bb      	strb	r3, [r7, #26]
        break;
 8006c3e:	bf00      	nop
    }

    if (pclk != 0U)
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d018      	beq.n	8006c78 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	085a      	lsrs	r2, r3, #1
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	441a      	add	r2, r3
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	2b0f      	cmp	r3, #15
 8006c60:	d908      	bls.n	8006c74 <UART_SetConfig+0x4f4>
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c68:	d204      	bcs.n	8006c74 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	693a      	ldr	r2, [r7, #16]
 8006c70:	60da      	str	r2, [r3, #12]
 8006c72:	e001      	b.n	8006c78 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8006c74:	2301      	movs	r3, #1
 8006c76:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2200      	movs	r2, #0
 8006c82:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006c84:	7ebb      	ldrb	r3, [r7, #26]
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3720      	adds	r7, #32
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8006c90:	00f42400 	.word	0x00f42400

08006c94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b083      	sub	sp, #12
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca0:	f003 0301 	and.w	r3, r3, #1
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d00a      	beq.n	8006cbe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	430a      	orrs	r2, r1
 8006cbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc2:	f003 0302 	and.w	r3, r3, #2
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d00a      	beq.n	8006ce0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	430a      	orrs	r2, r1
 8006cde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce4:	f003 0304 	and.w	r3, r3, #4
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d00a      	beq.n	8006d02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	430a      	orrs	r2, r1
 8006d00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d06:	f003 0308 	and.w	r3, r3, #8
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d00a      	beq.n	8006d24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	430a      	orrs	r2, r1
 8006d22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d28:	f003 0310 	and.w	r3, r3, #16
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d00a      	beq.n	8006d46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	689b      	ldr	r3, [r3, #8]
 8006d36:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	430a      	orrs	r2, r1
 8006d44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d4a:	f003 0320 	and.w	r3, r3, #32
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d00a      	beq.n	8006d68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	430a      	orrs	r2, r1
 8006d66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d01a      	beq.n	8006daa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	430a      	orrs	r2, r1
 8006d88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d92:	d10a      	bne.n	8006daa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	430a      	orrs	r2, r1
 8006da8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d00a      	beq.n	8006dcc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	430a      	orrs	r2, r1
 8006dca:	605a      	str	r2, [r3, #4]
  }
}
 8006dcc:	bf00      	nop
 8006dce:	370c      	adds	r7, #12
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr

08006dd8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b086      	sub	sp, #24
 8006ddc:	af02      	add	r7, sp, #8
 8006dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2200      	movs	r2, #0
 8006de4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006de6:	f7fa fbff 	bl	80015e8 <HAL_GetTick>
 8006dea:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f003 0308 	and.w	r3, r3, #8
 8006df6:	2b08      	cmp	r3, #8
 8006df8:	d10e      	bne.n	8006e18 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006dfa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006dfe:	9300      	str	r3, [sp, #0]
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2200      	movs	r2, #0
 8006e04:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 f82a 	bl	8006e62 <UART_WaitOnFlagUntilTimeout>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d001      	beq.n	8006e18 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e14:	2303      	movs	r3, #3
 8006e16:	e020      	b.n	8006e5a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f003 0304 	and.w	r3, r3, #4
 8006e22:	2b04      	cmp	r3, #4
 8006e24:	d10e      	bne.n	8006e44 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e26:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e2a:	9300      	str	r3, [sp, #0]
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f000 f814 	bl	8006e62 <UART_WaitOnFlagUntilTimeout>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d001      	beq.n	8006e44 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e40:	2303      	movs	r3, #3
 8006e42:	e00a      	b.n	8006e5a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2220      	movs	r2, #32
 8006e48:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2220      	movs	r2, #32
 8006e4e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2200      	movs	r2, #0
 8006e54:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006e58:	2300      	movs	r3, #0
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3710      	adds	r7, #16
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}

08006e62 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006e62:	b580      	push	{r7, lr}
 8006e64:	b084      	sub	sp, #16
 8006e66:	af00      	add	r7, sp, #0
 8006e68:	60f8      	str	r0, [r7, #12]
 8006e6a:	60b9      	str	r1, [r7, #8]
 8006e6c:	603b      	str	r3, [r7, #0]
 8006e6e:	4613      	mov	r3, r2
 8006e70:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e72:	e05d      	b.n	8006f30 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e74:	69bb      	ldr	r3, [r7, #24]
 8006e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e7a:	d059      	beq.n	8006f30 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e7c:	f7fa fbb4 	bl	80015e8 <HAL_GetTick>
 8006e80:	4602      	mov	r2, r0
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	1ad3      	subs	r3, r2, r3
 8006e86:	69ba      	ldr	r2, [r7, #24]
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	d302      	bcc.n	8006e92 <UART_WaitOnFlagUntilTimeout+0x30>
 8006e8c:	69bb      	ldr	r3, [r7, #24]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d11b      	bne.n	8006eca <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	681a      	ldr	r2, [r3, #0]
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006ea0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	689a      	ldr	r2, [r3, #8]
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f022 0201 	bic.w	r2, r2, #1
 8006eb0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2220      	movs	r2, #32
 8006eb6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2220      	movs	r2, #32
 8006ebc:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8006ec6:	2303      	movs	r3, #3
 8006ec8:	e042      	b.n	8006f50 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f003 0304 	and.w	r3, r3, #4
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d02b      	beq.n	8006f30 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	69db      	ldr	r3, [r3, #28]
 8006ede:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ee2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ee6:	d123      	bne.n	8006f30 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ef0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	681a      	ldr	r2, [r3, #0]
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006f00:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	689a      	ldr	r2, [r3, #8]
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f022 0201 	bic.w	r2, r2, #1
 8006f10:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2220      	movs	r2, #32
 8006f16:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2220      	movs	r2, #32
 8006f1c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2220      	movs	r2, #32
 8006f22:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	2200      	movs	r2, #0
 8006f28:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8006f2c:	2303      	movs	r3, #3
 8006f2e:	e00f      	b.n	8006f50 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	69da      	ldr	r2, [r3, #28]
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	4013      	ands	r3, r2
 8006f3a:	68ba      	ldr	r2, [r7, #8]
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	bf0c      	ite	eq
 8006f40:	2301      	moveq	r3, #1
 8006f42:	2300      	movne	r3, #0
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	461a      	mov	r2, r3
 8006f48:	79fb      	ldrb	r3, [r7, #7]
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d092      	beq.n	8006e74 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f4e:	2300      	movs	r3, #0
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	3710      	adds	r7, #16
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}

08006f58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b083      	sub	sp, #12
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	681a      	ldr	r2, [r3, #0]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006f6e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	689a      	ldr	r2, [r3, #8]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f022 0201 	bic.w	r2, r2, #1
 8006f7e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2220      	movs	r2, #32
 8006f84:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	661a      	str	r2, [r3, #96]	; 0x60
}
 8006f8c:	bf00      	nop
 8006f8e:	370c      	adds	r7, #12
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr

08006f98 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b084      	sub	sp, #16
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fa4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006fb6:	68f8      	ldr	r0, [r7, #12]
 8006fb8:	f7ff fbd8 	bl	800676c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006fbc:	bf00      	nop
 8006fbe:	3710      	adds	r7, #16
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}

08006fc4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b082      	sub	sp, #8
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	681a      	ldr	r2, [r3, #0]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fda:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2220      	movs	r2, #32
 8006fe0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f7ff fbb5 	bl	8006758 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006fee:	bf00      	nop
 8006ff0:	3708      	adds	r7, #8
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}

08006ff6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006ff6:	b480      	push	{r7}
 8006ff8:	b083      	sub	sp, #12
 8006ffa:	af00      	add	r7, sp, #0
 8006ffc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006ffe:	bf00      	nop
 8007000:	370c      	adds	r7, #12
 8007002:	46bd      	mov	sp, r7
 8007004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007008:	4770      	bx	lr

0800700a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800700a:	b084      	sub	sp, #16
 800700c:	b580      	push	{r7, lr}
 800700e:	b084      	sub	sp, #16
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
 8007014:	f107 001c 	add.w	r0, r7, #28
 8007018:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800701c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800701e:	2b01      	cmp	r3, #1
 8007020:	d122      	bne.n	8007068 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007026:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	68db      	ldr	r3, [r3, #12]
 8007032:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007036:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800703a:	687a      	ldr	r2, [r7, #4]
 800703c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	68db      	ldr	r3, [r3, #12]
 8007042:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800704a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800704c:	2b01      	cmp	r3, #1
 800704e:	d105      	bne.n	800705c <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	68db      	ldr	r3, [r3, #12]
 8007054:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f000 f937 	bl	80072d0 <USB_CoreReset>
 8007062:	4603      	mov	r3, r0
 8007064:	73fb      	strb	r3, [r7, #15]
 8007066:	e01a      	b.n	800709e <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	68db      	ldr	r3, [r3, #12]
 800706c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f000 f92b 	bl	80072d0 <USB_CoreReset>
 800707a:	4603      	mov	r3, r0
 800707c:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800707e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007080:	2b00      	cmp	r3, #0
 8007082:	d106      	bne.n	8007092 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007088:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	639a      	str	r2, [r3, #56]	; 0x38
 8007090:	e005      	b.n	800709e <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007096:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 800709e:	7bfb      	ldrb	r3, [r7, #15]
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3710      	adds	r7, #16
 80070a4:	46bd      	mov	sp, r7
 80070a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80070aa:	b004      	add	sp, #16
 80070ac:	4770      	bx	lr

080070ae <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80070ae:	b480      	push	{r7}
 80070b0:	b083      	sub	sp, #12
 80070b2:	af00      	add	r7, sp, #0
 80070b4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	689b      	ldr	r3, [r3, #8]
 80070ba:	f043 0201 	orr.w	r2, r3, #1
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80070c2:	2300      	movs	r3, #0
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	370c      	adds	r7, #12
 80070c8:	46bd      	mov	sp, r7
 80070ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ce:	4770      	bx	lr

080070d0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b083      	sub	sp, #12
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	689b      	ldr	r3, [r3, #8]
 80070dc:	f023 0201 	bic.w	r2, r3, #1
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80070e4:	2300      	movs	r3, #0
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	370c      	adds	r7, #12
 80070ea:	46bd      	mov	sp, r7
 80070ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f0:	4770      	bx	lr

080070f2 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80070f2:	b580      	push	{r7, lr}
 80070f4:	b082      	sub	sp, #8
 80070f6:	af00      	add	r7, sp, #0
 80070f8:	6078      	str	r0, [r7, #4]
 80070fa:	460b      	mov	r3, r1
 80070fc:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	68db      	ldr	r3, [r3, #12]
 8007102:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800710a:	78fb      	ldrb	r3, [r7, #3]
 800710c:	2b01      	cmp	r3, #1
 800710e:	d106      	bne.n	800711e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	68db      	ldr	r3, [r3, #12]
 8007114:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	60da      	str	r2, [r3, #12]
 800711c:	e00b      	b.n	8007136 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800711e:	78fb      	ldrb	r3, [r7, #3]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d106      	bne.n	8007132 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	68db      	ldr	r3, [r3, #12]
 8007128:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	60da      	str	r2, [r3, #12]
 8007130:	e001      	b.n	8007136 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007132:	2301      	movs	r3, #1
 8007134:	e003      	b.n	800713e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007136:	2032      	movs	r0, #50	; 0x32
 8007138:	f7fa fa62 	bl	8001600 <HAL_Delay>

  return HAL_OK;
 800713c:	2300      	movs	r3, #0
}
 800713e:	4618      	mov	r0, r3
 8007140:	3708      	adds	r7, #8
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}
	...

08007148 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007148:	b480      	push	{r7}
 800714a:	b085      	sub	sp, #20
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007152:	2300      	movs	r3, #0
 8007154:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	019b      	lsls	r3, r3, #6
 800715a:	f043 0220 	orr.w	r2, r3, #32
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	3301      	adds	r3, #1
 8007166:	60fb      	str	r3, [r7, #12]
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	4a09      	ldr	r2, [pc, #36]	; (8007190 <USB_FlushTxFifo+0x48>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d901      	bls.n	8007174 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007170:	2303      	movs	r3, #3
 8007172:	e006      	b.n	8007182 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	691b      	ldr	r3, [r3, #16]
 8007178:	f003 0320 	and.w	r3, r3, #32
 800717c:	2b20      	cmp	r3, #32
 800717e:	d0f0      	beq.n	8007162 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007180:	2300      	movs	r3, #0
}
 8007182:	4618      	mov	r0, r3
 8007184:	3714      	adds	r7, #20
 8007186:	46bd      	mov	sp, r7
 8007188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718c:	4770      	bx	lr
 800718e:	bf00      	nop
 8007190:	00030d40 	.word	0x00030d40

08007194 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007194:	b480      	push	{r7}
 8007196:	b085      	sub	sp, #20
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800719c:	2300      	movs	r3, #0
 800719e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2210      	movs	r2, #16
 80071a4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	3301      	adds	r3, #1
 80071aa:	60fb      	str	r3, [r7, #12]
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	4a09      	ldr	r2, [pc, #36]	; (80071d4 <USB_FlushRxFifo+0x40>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d901      	bls.n	80071b8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80071b4:	2303      	movs	r3, #3
 80071b6:	e006      	b.n	80071c6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	691b      	ldr	r3, [r3, #16]
 80071bc:	f003 0310 	and.w	r3, r3, #16
 80071c0:	2b10      	cmp	r3, #16
 80071c2:	d0f0      	beq.n	80071a6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80071c4:	2300      	movs	r3, #0
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3714      	adds	r7, #20
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr
 80071d2:	bf00      	nop
 80071d4:	00030d40 	.word	0x00030d40

080071d8 <USB_WritePacket>:
  * @param  ch_ep_num  endpoint or host channel number
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len)
{
 80071d8:	b480      	push	{r7}
 80071da:	b089      	sub	sp, #36	; 0x24
 80071dc:	af00      	add	r7, sp, #0
 80071de:	60f8      	str	r0, [r7, #12]
 80071e0:	60b9      	str	r1, [r7, #8]
 80071e2:	4611      	mov	r1, r2
 80071e4:	461a      	mov	r2, r3
 80071e6:	460b      	mov	r3, r1
 80071e8:	71fb      	strb	r3, [r7, #7]
 80071ea:	4613      	mov	r3, r2
 80071ec:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 80071f6:	88bb      	ldrh	r3, [r7, #4]
 80071f8:	3303      	adds	r3, #3
 80071fa:	089b      	lsrs	r3, r3, #2
 80071fc:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 80071fe:	2300      	movs	r3, #0
 8007200:	61bb      	str	r3, [r7, #24]
 8007202:	e00f      	b.n	8007224 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007204:	79fb      	ldrb	r3, [r7, #7]
 8007206:	031a      	lsls	r2, r3, #12
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	4413      	add	r3, r2
 800720c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007210:	461a      	mov	r2, r3
 8007212:	69fb      	ldr	r3, [r7, #28]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	6013      	str	r3, [r2, #0]
    pSrc++;
 8007218:	69fb      	ldr	r3, [r7, #28]
 800721a:	3304      	adds	r3, #4
 800721c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800721e:	69bb      	ldr	r3, [r7, #24]
 8007220:	3301      	adds	r3, #1
 8007222:	61bb      	str	r3, [r7, #24]
 8007224:	69ba      	ldr	r2, [r7, #24]
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	429a      	cmp	r2, r3
 800722a:	d3eb      	bcc.n	8007204 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800722c:	2300      	movs	r3, #0
}
 800722e:	4618      	mov	r0, r3
 8007230:	3724      	adds	r7, #36	; 0x24
 8007232:	46bd      	mov	sp, r7
 8007234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007238:	4770      	bx	lr

0800723a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800723a:	b480      	push	{r7}
 800723c:	b089      	sub	sp, #36	; 0x24
 800723e:	af00      	add	r7, sp, #0
 8007240:	60f8      	str	r0, [r7, #12]
 8007242:	60b9      	str	r1, [r7, #8]
 8007244:	4613      	mov	r3, r2
 8007246:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8007250:	88fb      	ldrh	r3, [r7, #6]
 8007252:	3303      	adds	r3, #3
 8007254:	089b      	lsrs	r3, r3, #2
 8007256:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8007258:	2300      	movs	r3, #0
 800725a:	61bb      	str	r3, [r7, #24]
 800725c:	e00b      	b.n	8007276 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007264:	681a      	ldr	r2, [r3, #0]
 8007266:	69fb      	ldr	r3, [r7, #28]
 8007268:	601a      	str	r2, [r3, #0]
    pDest++;
 800726a:	69fb      	ldr	r3, [r7, #28]
 800726c:	3304      	adds	r3, #4
 800726e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007270:	69bb      	ldr	r3, [r7, #24]
 8007272:	3301      	adds	r3, #1
 8007274:	61bb      	str	r3, [r7, #24]
 8007276:	69ba      	ldr	r2, [r7, #24]
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	429a      	cmp	r2, r3
 800727c:	d3ef      	bcc.n	800725e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800727e:	69fb      	ldr	r3, [r7, #28]
}
 8007280:	4618      	mov	r0, r3
 8007282:	3724      	adds	r7, #36	; 0x24
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr

0800728c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800728c:	b480      	push	{r7}
 800728e:	b085      	sub	sp, #20
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	695b      	ldr	r3, [r3, #20]
 8007298:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	699b      	ldr	r3, [r3, #24]
 800729e:	68fa      	ldr	r2, [r7, #12]
 80072a0:	4013      	ands	r3, r2
 80072a2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80072a4:	68fb      	ldr	r3, [r7, #12]
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	3714      	adds	r7, #20
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr

080072b2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80072b2:	b480      	push	{r7}
 80072b4:	b083      	sub	sp, #12
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	695b      	ldr	r3, [r3, #20]
 80072be:	f003 0301 	and.w	r3, r3, #1
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	370c      	adds	r7, #12
 80072c6:	46bd      	mov	sp, r7
 80072c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072cc:	4770      	bx	lr
	...

080072d0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b085      	sub	sp, #20
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80072d8:	2300      	movs	r3, #0
 80072da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	3301      	adds	r3, #1
 80072e0:	60fb      	str	r3, [r7, #12]
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	4a13      	ldr	r2, [pc, #76]	; (8007334 <USB_CoreReset+0x64>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d901      	bls.n	80072ee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80072ea:	2303      	movs	r3, #3
 80072ec:	e01b      	b.n	8007326 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	691b      	ldr	r3, [r3, #16]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	daf2      	bge.n	80072dc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80072f6:	2300      	movs	r3, #0
 80072f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	691b      	ldr	r3, [r3, #16]
 80072fe:	f043 0201 	orr.w	r2, r3, #1
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	3301      	adds	r3, #1
 800730a:	60fb      	str	r3, [r7, #12]
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	4a09      	ldr	r2, [pc, #36]	; (8007334 <USB_CoreReset+0x64>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d901      	bls.n	8007318 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007314:	2303      	movs	r3, #3
 8007316:	e006      	b.n	8007326 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	691b      	ldr	r3, [r3, #16]
 800731c:	f003 0301 	and.w	r3, r3, #1
 8007320:	2b01      	cmp	r3, #1
 8007322:	d0f0      	beq.n	8007306 <USB_CoreReset+0x36>

  return HAL_OK;
 8007324:	2300      	movs	r3, #0
}
 8007326:	4618      	mov	r0, r3
 8007328:	3714      	adds	r7, #20
 800732a:	46bd      	mov	sp, r7
 800732c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007330:	4770      	bx	lr
 8007332:	bf00      	nop
 8007334:	00030d40 	.word	0x00030d40

08007338 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007338:	b084      	sub	sp, #16
 800733a:	b580      	push	{r7, lr}
 800733c:	b084      	sub	sp, #16
 800733e:	af00      	add	r7, sp, #0
 8007340:	6078      	str	r0, [r7, #4]
 8007342:	f107 001c 	add.w	r0, r7, #28
 8007346:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007354:	461a      	mov	r2, r3
 8007356:	2300      	movs	r3, #0
 8007358:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800735e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800736a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	639a      	str	r2, [r3, #56]	; 0x38

  /* Set default Max speed support */
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	68ba      	ldr	r2, [r7, #8]
 800737c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007380:	f023 0304 	bic.w	r3, r3, #4
 8007384:	6013      	str	r3, [r2, #0]

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8007386:	2110      	movs	r1, #16
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f7ff fedd 	bl	8007148 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f7ff ff00 	bl	8007194 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007394:	2300      	movs	r3, #0
 8007396:	60fb      	str	r3, [r7, #12]
 8007398:	e015      	b.n	80073c6 <USB_HostInit+0x8e>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	015a      	lsls	r2, r3, #5
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	4413      	add	r3, r2
 80073a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073a6:	461a      	mov	r2, r3
 80073a8:	f04f 33ff 	mov.w	r3, #4294967295
 80073ac:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	015a      	lsls	r2, r3, #5
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	4413      	add	r3, r2
 80073b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073ba:	461a      	mov	r2, r3
 80073bc:	2300      	movs	r3, #0
 80073be:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	3301      	adds	r3, #1
 80073c4:	60fb      	str	r3, [r7, #12]
 80073c6:	6a3b      	ldr	r3, [r7, #32]
 80073c8:	68fa      	ldr	r2, [r7, #12]
 80073ca:	429a      	cmp	r2, r3
 80073cc:	d3e5      	bcc.n	800739a <USB_HostInit+0x62>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 80073ce:	2101      	movs	r1, #1
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f000 f893 	bl	80074fc <USB_DriveVbus>

  HAL_Delay(200U);
 80073d6:	20c8      	movs	r0, #200	; 0xc8
 80073d8:	f7fa f912 	bl	8001600 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2200      	movs	r2, #0
 80073e0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f04f 32ff 	mov.w	r2, #4294967295
 80073e8:	615a      	str	r2, [r3, #20]

  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x80U;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2280      	movs	r2, #128	; 0x80
 80073ee:	625a      	str	r2, [r3, #36]	; 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	4a0d      	ldr	r2, [pc, #52]	; (8007428 <USB_HostInit+0xf0>)
 80073f4:	629a      	str	r2, [r3, #40]	; 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	4a0c      	ldr	r2, [pc, #48]	; (800742c <USB_HostInit+0xf4>)
 80073fa:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	699b      	ldr	r3, [r3, #24]
 8007402:	f043 0210 	orr.w	r2, r3, #16
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	699a      	ldr	r2, [r3, #24]
 800740e:	4b08      	ldr	r3, [pc, #32]	; (8007430 <USB_HostInit+0xf8>)
 8007410:	4313      	orrs	r3, r2
 8007412:	687a      	ldr	r2, [r7, #4]
 8007414:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8007416:	2300      	movs	r3, #0
}
 8007418:	4618      	mov	r0, r3
 800741a:	3710      	adds	r7, #16
 800741c:	46bd      	mov	sp, r7
 800741e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007422:	b004      	add	sp, #16
 8007424:	4770      	bx	lr
 8007426:	bf00      	nop
 8007428:	00600080 	.word	0x00600080
 800742c:	004000e0 	.word	0x004000e0
 8007430:	a3200008 	.word	0xa3200008

08007434 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007434:	b480      	push	{r7}
 8007436:	b085      	sub	sp, #20
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
 800743c:	460b      	mov	r3, r1
 800743e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	68fa      	ldr	r2, [r7, #12]
 800744e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007452:	f023 0303 	bic.w	r3, r3, #3
 8007456:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800745e:	681a      	ldr	r2, [r3, #0]
 8007460:	78fb      	ldrb	r3, [r7, #3]
 8007462:	f003 0303 	and.w	r3, r3, #3
 8007466:	68f9      	ldr	r1, [r7, #12]
 8007468:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800746c:	4313      	orrs	r3, r2
 800746e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007470:	78fb      	ldrb	r3, [r7, #3]
 8007472:	2b01      	cmp	r3, #1
 8007474:	d107      	bne.n	8007486 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800747c:	461a      	mov	r2, r3
 800747e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007482:	6053      	str	r3, [r2, #4]
 8007484:	e009      	b.n	800749a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8007486:	78fb      	ldrb	r3, [r7, #3]
 8007488:	2b02      	cmp	r3, #2
 800748a:	d106      	bne.n	800749a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007492:	461a      	mov	r2, r3
 8007494:	f241 7370 	movw	r3, #6000	; 0x1770
 8007498:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800749a:	2300      	movs	r3, #0
}
 800749c:	4618      	mov	r0, r3
 800749e:	3714      	adds	r7, #20
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr

080074a8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b084      	sub	sp, #16
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80074b4:	2300      	movs	r3, #0
 80074b6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80074c8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	68fa      	ldr	r2, [r7, #12]
 80074ce:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80074d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074d6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80074d8:	2064      	movs	r0, #100	; 0x64
 80074da:	f7fa f891 	bl	8001600 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	68fa      	ldr	r2, [r7, #12]
 80074e2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80074e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074ea:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80074ec:	200a      	movs	r0, #10
 80074ee:	f7fa f887 	bl	8001600 <HAL_Delay>

  return HAL_OK;
 80074f2:	2300      	movs	r3, #0
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3710      	adds	r7, #16
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}

080074fc <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b085      	sub	sp, #20
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	460b      	mov	r3, r1
 8007506:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800750c:	2300      	movs	r3, #0
 800750e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007520:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007528:	2b00      	cmp	r3, #0
 800752a:	d109      	bne.n	8007540 <USB_DriveVbus+0x44>
 800752c:	78fb      	ldrb	r3, [r7, #3]
 800752e:	2b01      	cmp	r3, #1
 8007530:	d106      	bne.n	8007540 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	68fa      	ldr	r2, [r7, #12]
 8007536:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800753a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800753e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007546:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800754a:	d109      	bne.n	8007560 <USB_DriveVbus+0x64>
 800754c:	78fb      	ldrb	r3, [r7, #3]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d106      	bne.n	8007560 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	68fa      	ldr	r2, [r7, #12]
 8007556:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800755a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800755e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007560:	2300      	movs	r3, #0
}
 8007562:	4618      	mov	r0, r3
 8007564:	3714      	adds	r7, #20
 8007566:	46bd      	mov	sp, r7
 8007568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756c:	4770      	bx	lr

0800756e <USB_GetHostSpeed>:
  *          This parameter can be one of these values:
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800756e:	b480      	push	{r7}
 8007570:	b085      	sub	sp, #20
 8007572:	af00      	add	r7, sp, #0
 8007574:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800757a:	2300      	movs	r3, #0
 800757c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	0c5b      	lsrs	r3, r3, #17
 800758c:	f003 0303 	and.w	r3, r3, #3
}
 8007590:	4618      	mov	r0, r3
 8007592:	3714      	adds	r7, #20
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr

0800759c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800759c:	b480      	push	{r7}
 800759e:	b085      	sub	sp, #20
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80075ae:	689b      	ldr	r3, [r3, #8]
 80075b0:	b29b      	uxth	r3, r3
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3714      	adds	r7, #20
 80075b6:	46bd      	mov	sp, r7
 80075b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075bc:	4770      	bx	lr
	...

080075c0 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b087      	sub	sp, #28
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
 80075c8:	4608      	mov	r0, r1
 80075ca:	4611      	mov	r1, r2
 80075cc:	461a      	mov	r2, r3
 80075ce:	4603      	mov	r3, r0
 80075d0:	70fb      	strb	r3, [r7, #3]
 80075d2:	460b      	mov	r3, r1
 80075d4:	70bb      	strb	r3, [r7, #2]
 80075d6:	4613      	mov	r3, r2
 80075d8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80075da:	2300      	movs	r3, #0
 80075dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80075e2:	78fb      	ldrb	r3, [r7, #3]
 80075e4:	015a      	lsls	r2, r3, #5
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	4413      	add	r3, r2
 80075ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075ee:	461a      	mov	r2, r3
 80075f0:	f04f 33ff 	mov.w	r3, #4294967295
 80075f4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80075f6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80075fa:	2b03      	cmp	r3, #3
 80075fc:	d867      	bhi.n	80076ce <USB_HC_Init+0x10e>
 80075fe:	a201      	add	r2, pc, #4	; (adr r2, 8007604 <USB_HC_Init+0x44>)
 8007600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007604:	08007615 	.word	0x08007615
 8007608:	08007691 	.word	0x08007691
 800760c:	08007615 	.word	0x08007615
 8007610:	08007653 	.word	0x08007653
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007614:	78fb      	ldrb	r3, [r7, #3]
 8007616:	015a      	lsls	r2, r3, #5
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	4413      	add	r3, r2
 800761c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007620:	461a      	mov	r2, r3
 8007622:	f240 439d 	movw	r3, #1181	; 0x49d
 8007626:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007628:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800762c:	2b00      	cmp	r3, #0
 800762e:	da51      	bge.n	80076d4 <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007630:	78fb      	ldrb	r3, [r7, #3]
 8007632:	015a      	lsls	r2, r3, #5
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	4413      	add	r3, r2
 8007638:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800763c:	68db      	ldr	r3, [r3, #12]
 800763e:	78fa      	ldrb	r2, [r7, #3]
 8007640:	0151      	lsls	r1, r2, #5
 8007642:	68ba      	ldr	r2, [r7, #8]
 8007644:	440a      	add	r2, r1
 8007646:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800764a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800764e:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007650:	e040      	b.n	80076d4 <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007652:	78fb      	ldrb	r3, [r7, #3]
 8007654:	015a      	lsls	r2, r3, #5
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	4413      	add	r3, r2
 800765a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800765e:	461a      	mov	r2, r3
 8007660:	f240 639d 	movw	r3, #1693	; 0x69d
 8007664:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007666:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800766a:	2b00      	cmp	r3, #0
 800766c:	da34      	bge.n	80076d8 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800766e:	78fb      	ldrb	r3, [r7, #3]
 8007670:	015a      	lsls	r2, r3, #5
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	4413      	add	r3, r2
 8007676:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800767a:	68db      	ldr	r3, [r3, #12]
 800767c:	78fa      	ldrb	r2, [r7, #3]
 800767e:	0151      	lsls	r1, r2, #5
 8007680:	68ba      	ldr	r2, [r7, #8]
 8007682:	440a      	add	r2, r1
 8007684:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007688:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800768c:	60d3      	str	r3, [r2, #12]
      }

      break;
 800768e:	e023      	b.n	80076d8 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007690:	78fb      	ldrb	r3, [r7, #3]
 8007692:	015a      	lsls	r2, r3, #5
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	4413      	add	r3, r2
 8007698:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800769c:	461a      	mov	r2, r3
 800769e:	f240 2325 	movw	r3, #549	; 0x225
 80076a2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80076a4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	da17      	bge.n	80076dc <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80076ac:	78fb      	ldrb	r3, [r7, #3]
 80076ae:	015a      	lsls	r2, r3, #5
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	4413      	add	r3, r2
 80076b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076b8:	68db      	ldr	r3, [r3, #12]
 80076ba:	78fa      	ldrb	r2, [r7, #3]
 80076bc:	0151      	lsls	r1, r2, #5
 80076be:	68ba      	ldr	r2, [r7, #8]
 80076c0:	440a      	add	r2, r1
 80076c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80076c6:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80076ca:	60d3      	str	r3, [r2, #12]
      }
      break;
 80076cc:	e006      	b.n	80076dc <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 80076ce:	2301      	movs	r3, #1
 80076d0:	75fb      	strb	r3, [r7, #23]
      break;
 80076d2:	e004      	b.n	80076de <USB_HC_Init+0x11e>
      break;
 80076d4:	bf00      	nop
 80076d6:	e002      	b.n	80076de <USB_HC_Init+0x11e>
      break;
 80076d8:	bf00      	nop
 80076da:	e000      	b.n	80076de <USB_HC_Init+0x11e>
      break;
 80076dc:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80076e4:	699a      	ldr	r2, [r3, #24]
 80076e6:	78fb      	ldrb	r3, [r7, #3]
 80076e8:	f003 030f 	and.w	r3, r3, #15
 80076ec:	2101      	movs	r1, #1
 80076ee:	fa01 f303 	lsl.w	r3, r1, r3
 80076f2:	68b9      	ldr	r1, [r7, #8]
 80076f4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80076f8:	4313      	orrs	r3, r2
 80076fa:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	699b      	ldr	r3, [r3, #24]
 8007700:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007708:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800770c:	2b00      	cmp	r3, #0
 800770e:	da03      	bge.n	8007718 <USB_HC_Init+0x158>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007710:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007714:	613b      	str	r3, [r7, #16]
 8007716:	e001      	b.n	800771c <USB_HC_Init+0x15c>
  }
  else
  {
    HCcharEpDir = 0U;
 8007718:	2300      	movs	r3, #0
 800771a:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800771c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007720:	2b02      	cmp	r3, #2
 8007722:	d103      	bne.n	800772c <USB_HC_Init+0x16c>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007724:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007728:	60fb      	str	r3, [r7, #12]
 800772a:	e001      	b.n	8007730 <USB_HC_Init+0x170>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800772c:	2300      	movs	r3, #0
 800772e:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007730:	787b      	ldrb	r3, [r7, #1]
 8007732:	059b      	lsls	r3, r3, #22
 8007734:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007738:	78bb      	ldrb	r3, [r7, #2]
 800773a:	02db      	lsls	r3, r3, #11
 800773c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007740:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007742:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007746:	049b      	lsls	r3, r3, #18
 8007748:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800774c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800774e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007750:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007754:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800775a:	78fb      	ldrb	r3, [r7, #3]
 800775c:	0159      	lsls	r1, r3, #5
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	440b      	add	r3, r1
 8007762:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007766:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800776c:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800776e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007772:	2b03      	cmp	r3, #3
 8007774:	d10f      	bne.n	8007796 <USB_HC_Init+0x1d6>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8007776:	78fb      	ldrb	r3, [r7, #3]
 8007778:	015a      	lsls	r2, r3, #5
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	4413      	add	r3, r2
 800777e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	78fa      	ldrb	r2, [r7, #3]
 8007786:	0151      	lsls	r1, r2, #5
 8007788:	68ba      	ldr	r2, [r7, #8]
 800778a:	440a      	add	r2, r1
 800778c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007790:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007794:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007796:	7dfb      	ldrb	r3, [r7, #23]
}
 8007798:	4618      	mov	r0, r3
 800779a:	371c      	adds	r7, #28
 800779c:	46bd      	mov	sp, r7
 800779e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a2:	4770      	bx	lr

080077a4 <USB_HC_StartXfer>:
  * @param  USBx  Selected device
  * @param  hc  pointer to host channel structure
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b088      	sub	sp, #32
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	785b      	ldrb	r3, [r3, #1]
 80077b6:	617b      	str	r3, [r7, #20]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80077b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80077bc:	827b      	strh	r3, [r7, #18]

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	691b      	ldr	r3, [r3, #16]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d018      	beq.n	80077f8 <USB_HC_StartXfer+0x54>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	691b      	ldr	r3, [r3, #16]
 80077ca:	683a      	ldr	r2, [r7, #0]
 80077cc:	8912      	ldrh	r2, [r2, #8]
 80077ce:	4413      	add	r3, r2
 80077d0:	3b01      	subs	r3, #1
 80077d2:	683a      	ldr	r2, [r7, #0]
 80077d4:	8912      	ldrh	r2, [r2, #8]
 80077d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80077da:	83fb      	strh	r3, [r7, #30]

    if (num_packets > max_hc_pkt_count)
 80077dc:	8bfa      	ldrh	r2, [r7, #30]
 80077de:	8a7b      	ldrh	r3, [r7, #18]
 80077e0:	429a      	cmp	r2, r3
 80077e2:	d90b      	bls.n	80077fc <USB_HC_StartXfer+0x58>
    {
      num_packets = max_hc_pkt_count;
 80077e4:	8a7b      	ldrh	r3, [r7, #18]
 80077e6:	83fb      	strh	r3, [r7, #30]
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80077e8:	8bfb      	ldrh	r3, [r7, #30]
 80077ea:	683a      	ldr	r2, [r7, #0]
 80077ec:	8912      	ldrh	r2, [r2, #8]
 80077ee:	fb02 f203 	mul.w	r2, r2, r3
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	611a      	str	r2, [r3, #16]
 80077f6:	e001      	b.n	80077fc <USB_HC_StartXfer+0x58>
    }
  }
  else
  {
    num_packets = 1U;
 80077f8:	2301      	movs	r3, #1
 80077fa:	83fb      	strh	r3, [r7, #30]
  }
  if (hc->ep_is_in != 0U)
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	78db      	ldrb	r3, [r3, #3]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d006      	beq.n	8007812 <USB_HC_StartXfer+0x6e>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8007804:	8bfb      	ldrh	r3, [r7, #30]
 8007806:	683a      	ldr	r2, [r7, #0]
 8007808:	8912      	ldrh	r2, [r2, #8]
 800780a:	fb02 f203 	mul.w	r2, r2, r3
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	691b      	ldr	r3, [r3, #16]
 8007816:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800781a:	8bfb      	ldrh	r3, [r7, #30]
 800781c:	04d9      	lsls	r1, r3, #19
 800781e:	4b5f      	ldr	r3, [pc, #380]	; (800799c <USB_HC_StartXfer+0x1f8>)
 8007820:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8007822:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	7a9b      	ldrb	r3, [r3, #10]
 8007828:	075b      	lsls	r3, r3, #29
 800782a:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800782e:	6979      	ldr	r1, [r7, #20]
 8007830:	0148      	lsls	r0, r1, #5
 8007832:	69b9      	ldr	r1, [r7, #24]
 8007834:	4401      	add	r1, r0
 8007836:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800783a:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800783c:	610b      	str	r3, [r1, #16]

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800783e:	69bb      	ldr	r3, [r7, #24]
 8007840:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007844:	689b      	ldr	r3, [r3, #8]
 8007846:	f003 0301 	and.w	r3, r3, #1
 800784a:	2b00      	cmp	r3, #0
 800784c:	bf0c      	ite	eq
 800784e:	2301      	moveq	r3, #1
 8007850:	2300      	movne	r3, #0
 8007852:	b2db      	uxtb	r3, r3
 8007854:	747b      	strb	r3, [r7, #17]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	015a      	lsls	r2, r3, #5
 800785a:	69bb      	ldr	r3, [r7, #24]
 800785c:	4413      	add	r3, r2
 800785e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	697a      	ldr	r2, [r7, #20]
 8007866:	0151      	lsls	r1, r2, #5
 8007868:	69ba      	ldr	r2, [r7, #24]
 800786a:	440a      	add	r2, r1
 800786c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007870:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007874:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	015a      	lsls	r2, r3, #5
 800787a:	69bb      	ldr	r3, [r7, #24]
 800787c:	4413      	add	r3, r2
 800787e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007882:	681a      	ldr	r2, [r3, #0]
 8007884:	7c7b      	ldrb	r3, [r7, #17]
 8007886:	075b      	lsls	r3, r3, #29
 8007888:	6979      	ldr	r1, [r7, #20]
 800788a:	0148      	lsls	r0, r1, #5
 800788c:	69b9      	ldr	r1, [r7, #24]
 800788e:	4401      	add	r1, r0
 8007890:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007894:	4313      	orrs	r3, r2
 8007896:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	015a      	lsls	r2, r3, #5
 800789c:	69bb      	ldr	r3, [r7, #24]
 800789e:	4413      	add	r3, r2
 80078a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4a3e      	ldr	r2, [pc, #248]	; (80079a0 <USB_HC_StartXfer+0x1fc>)
 80078a8:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80078aa:	4b3d      	ldr	r3, [pc, #244]	; (80079a0 <USB_HC_StartXfer+0x1fc>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80078b2:	4a3b      	ldr	r2, [pc, #236]	; (80079a0 <USB_HC_StartXfer+0x1fc>)
 80078b4:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	78db      	ldrb	r3, [r3, #3]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d006      	beq.n	80078cc <USB_HC_StartXfer+0x128>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80078be:	4b38      	ldr	r3, [pc, #224]	; (80079a0 <USB_HC_StartXfer+0x1fc>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078c6:	4a36      	ldr	r2, [pc, #216]	; (80079a0 <USB_HC_StartXfer+0x1fc>)
 80078c8:	6013      	str	r3, [r2, #0]
 80078ca:	e005      	b.n	80078d8 <USB_HC_StartXfer+0x134>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80078cc:	4b34      	ldr	r3, [pc, #208]	; (80079a0 <USB_HC_StartXfer+0x1fc>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80078d4:	4a32      	ldr	r2, [pc, #200]	; (80079a0 <USB_HC_StartXfer+0x1fc>)
 80078d6:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80078d8:	4b31      	ldr	r3, [pc, #196]	; (80079a0 <USB_HC_StartXfer+0x1fc>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80078e0:	4a2f      	ldr	r2, [pc, #188]	; (80079a0 <USB_HC_StartXfer+0x1fc>)
 80078e2:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	015a      	lsls	r2, r3, #5
 80078e8:	69bb      	ldr	r3, [r7, #24]
 80078ea:	4413      	add	r3, r2
 80078ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078f0:	461a      	mov	r2, r3
 80078f2:	4b2b      	ldr	r3, [pc, #172]	; (80079a0 <USB_HC_StartXfer+0x1fc>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	6013      	str	r3, [r2, #0]

    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	78db      	ldrb	r3, [r3, #3]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d148      	bne.n	8007992 <USB_HC_StartXfer+0x1ee>
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	691b      	ldr	r3, [r3, #16]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d044      	beq.n	8007992 <USB_HC_StartXfer+0x1ee>
    {
      switch (hc->ep_type)
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	79db      	ldrb	r3, [r3, #7]
 800790c:	2b03      	cmp	r3, #3
 800790e:	d831      	bhi.n	8007974 <USB_HC_StartXfer+0x1d0>
 8007910:	a201      	add	r2, pc, #4	; (adr r2, 8007918 <USB_HC_StartXfer+0x174>)
 8007912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007916:	bf00      	nop
 8007918:	08007929 	.word	0x08007929
 800791c:	0800794d 	.word	0x0800794d
 8007920:	08007929 	.word	0x08007929
 8007924:	0800794d 	.word	0x0800794d
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	691b      	ldr	r3, [r3, #16]
 800792c:	3303      	adds	r3, #3
 800792e:	089b      	lsrs	r3, r3, #2
 8007930:	81fb      	strh	r3, [r7, #14]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007932:	89fa      	ldrh	r2, [r7, #14]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007938:	b29b      	uxth	r3, r3
 800793a:	429a      	cmp	r2, r3
 800793c:	d91c      	bls.n	8007978 <USB_HC_StartXfer+0x1d4>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	699b      	ldr	r3, [r3, #24]
 8007942:	f043 0220 	orr.w	r2, r3, #32
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	619a      	str	r2, [r3, #24]
          }
          break;
 800794a:	e015      	b.n	8007978 <USB_HC_StartXfer+0x1d4>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	691b      	ldr	r3, [r3, #16]
 8007950:	3303      	adds	r3, #3
 8007952:	089b      	lsrs	r3, r3, #2
 8007954:	81fb      	strh	r3, [r7, #14]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007956:	89fa      	ldrh	r2, [r7, #14]
 8007958:	69bb      	ldr	r3, [r7, #24]
 800795a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800795e:	691b      	ldr	r3, [r3, #16]
 8007960:	b29b      	uxth	r3, r3
 8007962:	429a      	cmp	r2, r3
 8007964:	d90a      	bls.n	800797c <USB_HC_StartXfer+0x1d8>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	699b      	ldr	r3, [r3, #24]
 800796a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	619a      	str	r2, [r3, #24]
          }
          break;
 8007972:	e003      	b.n	800797c <USB_HC_StartXfer+0x1d8>

        default:
          break;
 8007974:	bf00      	nop
 8007976:	e002      	b.n	800797e <USB_HC_StartXfer+0x1da>
          break;
 8007978:	bf00      	nop
 800797a:	e000      	b.n	800797e <USB_HC_StartXfer+0x1da>
          break;
 800797c:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len);
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	68d9      	ldr	r1, [r3, #12]
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	785a      	ldrb	r2, [r3, #1]
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	691b      	ldr	r3, [r3, #16]
 800798a:	b29b      	uxth	r3, r3
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f7ff fc23 	bl	80071d8 <USB_WritePacket>
    }

  return HAL_OK;
 8007992:	2300      	movs	r3, #0
}
 8007994:	4618      	mov	r0, r3
 8007996:	3720      	adds	r7, #32
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}
 800799c:	1ff80000 	.word	0x1ff80000
 80079a0:	200000b4 	.word	0x200000b4

080079a4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b085      	sub	sp, #20
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80079b6:	695b      	ldr	r3, [r3, #20]
 80079b8:	b29b      	uxth	r3, r3
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3714      	adds	r7, #20
 80079be:	46bd      	mov	sp, r7
 80079c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c4:	4770      	bx	lr

080079c6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80079c6:	b480      	push	{r7}
 80079c8:	b087      	sub	sp, #28
 80079ca:	af00      	add	r7, sp, #0
 80079cc:	6078      	str	r0, [r7, #4]
 80079ce:	460b      	mov	r3, r1
 80079d0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 80079d6:	78fb      	ldrb	r3, [r7, #3]
 80079d8:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80079da:	2300      	movs	r3, #0
 80079dc:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	015a      	lsls	r2, r3, #5
 80079e2:	693b      	ldr	r3, [r7, #16]
 80079e4:	4413      	add	r3, r2
 80079e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	0c9b      	lsrs	r3, r3, #18
 80079ee:	f003 0303 	and.w	r3, r3, #3
 80079f2:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d002      	beq.n	8007a00 <USB_HC_Halt+0x3a>
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	2b02      	cmp	r3, #2
 80079fe:	d16c      	bne.n	8007ada <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	015a      	lsls	r2, r3, #5
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	4413      	add	r3, r2
 8007a08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	68fa      	ldr	r2, [r7, #12]
 8007a10:	0151      	lsls	r1, r2, #5
 8007a12:	693a      	ldr	r2, [r7, #16]
 8007a14:	440a      	add	r2, r1
 8007a16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a1a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007a1e:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a24:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d143      	bne.n	8007ab4 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	015a      	lsls	r2, r3, #5
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	4413      	add	r3, r2
 8007a34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	68fa      	ldr	r2, [r7, #12]
 8007a3c:	0151      	lsls	r1, r2, #5
 8007a3e:	693a      	ldr	r2, [r7, #16]
 8007a40:	440a      	add	r2, r1
 8007a42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a46:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007a4a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	015a      	lsls	r2, r3, #5
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	4413      	add	r3, r2
 8007a54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	68fa      	ldr	r2, [r7, #12]
 8007a5c:	0151      	lsls	r1, r2, #5
 8007a5e:	693a      	ldr	r2, [r7, #16]
 8007a60:	440a      	add	r2, r1
 8007a62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007a6a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	015a      	lsls	r2, r3, #5
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	4413      	add	r3, r2
 8007a74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	68fa      	ldr	r2, [r7, #12]
 8007a7c:	0151      	lsls	r1, r2, #5
 8007a7e:	693a      	ldr	r2, [r7, #16]
 8007a80:	440a      	add	r2, r1
 8007a82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a86:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007a8a:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	3301      	adds	r3, #1
 8007a90:	617b      	str	r3, [r7, #20]
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007a98:	d81d      	bhi.n	8007ad6 <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	015a      	lsls	r2, r3, #5
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	4413      	add	r3, r2
 8007aa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007aac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ab0:	d0ec      	beq.n	8007a8c <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007ab2:	e080      	b.n	8007bb6 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	015a      	lsls	r2, r3, #5
 8007ab8:	693b      	ldr	r3, [r7, #16]
 8007aba:	4413      	add	r3, r2
 8007abc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	68fa      	ldr	r2, [r7, #12]
 8007ac4:	0151      	lsls	r1, r2, #5
 8007ac6:	693a      	ldr	r2, [r7, #16]
 8007ac8:	440a      	add	r2, r1
 8007aca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007ace:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007ad2:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007ad4:	e06f      	b.n	8007bb6 <USB_HC_Halt+0x1f0>
          break;
 8007ad6:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007ad8:	e06d      	b.n	8007bb6 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	015a      	lsls	r2, r3, #5
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	4413      	add	r3, r2
 8007ae2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	68fa      	ldr	r2, [r7, #12]
 8007aea:	0151      	lsls	r1, r2, #5
 8007aec:	693a      	ldr	r2, [r7, #16]
 8007aee:	440a      	add	r2, r1
 8007af0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007af4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007af8:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b00:	691b      	ldr	r3, [r3, #16]
 8007b02:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d143      	bne.n	8007b92 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	015a      	lsls	r2, r3, #5
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	4413      	add	r3, r2
 8007b12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	68fa      	ldr	r2, [r7, #12]
 8007b1a:	0151      	lsls	r1, r2, #5
 8007b1c:	693a      	ldr	r2, [r7, #16]
 8007b1e:	440a      	add	r2, r1
 8007b20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007b28:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	015a      	lsls	r2, r3, #5
 8007b2e:	693b      	ldr	r3, [r7, #16]
 8007b30:	4413      	add	r3, r2
 8007b32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	68fa      	ldr	r2, [r7, #12]
 8007b3a:	0151      	lsls	r1, r2, #5
 8007b3c:	693a      	ldr	r2, [r7, #16]
 8007b3e:	440a      	add	r2, r1
 8007b40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b44:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007b48:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	015a      	lsls	r2, r3, #5
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	4413      	add	r3, r2
 8007b52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	68fa      	ldr	r2, [r7, #12]
 8007b5a:	0151      	lsls	r1, r2, #5
 8007b5c:	693a      	ldr	r2, [r7, #16]
 8007b5e:	440a      	add	r2, r1
 8007b60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b64:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007b68:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	3301      	adds	r3, #1
 8007b6e:	617b      	str	r3, [r7, #20]
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007b76:	d81d      	bhi.n	8007bb4 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	015a      	lsls	r2, r3, #5
 8007b7c:	693b      	ldr	r3, [r7, #16]
 8007b7e:	4413      	add	r3, r2
 8007b80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007b8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b8e:	d0ec      	beq.n	8007b6a <USB_HC_Halt+0x1a4>
 8007b90:	e011      	b.n	8007bb6 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	015a      	lsls	r2, r3, #5
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	4413      	add	r3, r2
 8007b9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	68fa      	ldr	r2, [r7, #12]
 8007ba2:	0151      	lsls	r1, r2, #5
 8007ba4:	693a      	ldr	r2, [r7, #16]
 8007ba6:	440a      	add	r2, r1
 8007ba8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007bac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007bb0:	6013      	str	r3, [r2, #0]
 8007bb2:	e000      	b.n	8007bb6 <USB_HC_Halt+0x1f0>
          break;
 8007bb4:	bf00      	nop
    }
  }

  return HAL_OK;
 8007bb6:	2300      	movs	r3, #0
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	371c      	adds	r7, #28
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr

08007bc4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b086      	sub	sp, #24
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f7ff fa7b 	bl	80070d0 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8007bda:	2110      	movs	r1, #16
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f7ff fab3 	bl	8007148 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f7ff fad6 	bl	8007194 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007be8:	2300      	movs	r3, #0
 8007bea:	613b      	str	r3, [r7, #16]
 8007bec:	e01f      	b.n	8007c2e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	015a      	lsls	r2, r3, #5
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	4413      	add	r3, r2
 8007bf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007c04:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007c0c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007c14:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	015a      	lsls	r2, r3, #5
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	4413      	add	r3, r2
 8007c1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c22:	461a      	mov	r2, r3
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007c28:	693b      	ldr	r3, [r7, #16]
 8007c2a:	3301      	adds	r3, #1
 8007c2c:	613b      	str	r3, [r7, #16]
 8007c2e:	693b      	ldr	r3, [r7, #16]
 8007c30:	2b0f      	cmp	r3, #15
 8007c32:	d9dc      	bls.n	8007bee <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007c34:	2300      	movs	r3, #0
 8007c36:	613b      	str	r3, [r7, #16]
 8007c38:	e034      	b.n	8007ca4 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8007c3a:	693b      	ldr	r3, [r7, #16]
 8007c3c:	015a      	lsls	r2, r3, #5
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	4413      	add	r3, r2
 8007c42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007c50:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007c58:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007c60:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8007c62:	693b      	ldr	r3, [r7, #16]
 8007c64:	015a      	lsls	r2, r3, #5
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	4413      	add	r3, r2
 8007c6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c6e:	461a      	mov	r2, r3
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8007c74:	697b      	ldr	r3, [r7, #20]
 8007c76:	3301      	adds	r3, #1
 8007c78:	617b      	str	r3, [r7, #20]
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007c80:	d80c      	bhi.n	8007c9c <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	015a      	lsls	r2, r3, #5
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	4413      	add	r3, r2
 8007c8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c98:	d0ec      	beq.n	8007c74 <USB_StopHost+0xb0>
 8007c9a:	e000      	b.n	8007c9e <USB_StopHost+0xda>
        break;
 8007c9c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	3301      	adds	r3, #1
 8007ca2:	613b      	str	r3, [r7, #16]
 8007ca4:	693b      	ldr	r3, [r7, #16]
 8007ca6:	2b0f      	cmp	r3, #15
 8007ca8:	d9c7      	bls.n	8007c3a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007cb0:	461a      	mov	r2, r3
 8007cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8007cb6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f04f 32ff 	mov.w	r2, #4294967295
 8007cbe:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f7ff f9f4 	bl	80070ae <USB_EnableGlobalInt>

  return HAL_OK;
 8007cc6:	2300      	movs	r3, #0
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	3718      	adds	r7, #24
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}

08007cd0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007cd0:	b590      	push	{r4, r7, lr}
 8007cd2:	b089      	sub	sp, #36	; 0x24
 8007cd4:	af04      	add	r7, sp, #16
 8007cd6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007cd8:	2301      	movs	r3, #1
 8007cda:	2202      	movs	r2, #2
 8007cdc:	2102      	movs	r1, #2
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f000 fc68 	bl	80085b4 <USBH_FindInterface>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007ce8:	7bfb      	ldrb	r3, [r7, #15]
 8007cea:	2bff      	cmp	r3, #255	; 0xff
 8007cec:	d002      	beq.n	8007cf4 <USBH_CDC_InterfaceInit+0x24>
 8007cee:	7bfb      	ldrb	r3, [r7, #15]
 8007cf0:	2b01      	cmp	r3, #1
 8007cf2:	d901      	bls.n	8007cf8 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007cf4:	2302      	movs	r3, #2
 8007cf6:	e13d      	b.n	8007f74 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007cf8:	7bfb      	ldrb	r3, [r7, #15]
 8007cfa:	4619      	mov	r1, r3
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f000 fc3d 	bl	800857c <USBH_SelectInterface>
 8007d02:	4603      	mov	r3, r0
 8007d04:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007d06:	7bbb      	ldrb	r3, [r7, #14]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d001      	beq.n	8007d10 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007d0c:	2302      	movs	r3, #2
 8007d0e:	e131      	b.n	8007f74 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8007d16:	2050      	movs	r0, #80	; 0x50
 8007d18:	f002 fa08 	bl	800a12c <malloc>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d26:	69db      	ldr	r3, [r3, #28]
 8007d28:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d101      	bne.n	8007d34 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007d30:	2302      	movs	r3, #2
 8007d32:	e11f      	b.n	8007f74 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007d34:	2250      	movs	r2, #80	; 0x50
 8007d36:	2100      	movs	r1, #0
 8007d38:	68b8      	ldr	r0, [r7, #8]
 8007d3a:	f002 fa07 	bl	800a14c <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8007d3e:	7bfb      	ldrb	r3, [r7, #15]
 8007d40:	687a      	ldr	r2, [r7, #4]
 8007d42:	211a      	movs	r1, #26
 8007d44:	fb01 f303 	mul.w	r3, r1, r3
 8007d48:	4413      	add	r3, r2
 8007d4a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007d4e:	781b      	ldrb	r3, [r3, #0]
 8007d50:	b25b      	sxtb	r3, r3
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	da15      	bge.n	8007d82 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007d56:	7bfb      	ldrb	r3, [r7, #15]
 8007d58:	687a      	ldr	r2, [r7, #4]
 8007d5a:	211a      	movs	r1, #26
 8007d5c:	fb01 f303 	mul.w	r3, r1, r3
 8007d60:	4413      	add	r3, r2
 8007d62:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007d66:	781a      	ldrb	r2, [r3, #0]
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007d6c:	7bfb      	ldrb	r3, [r7, #15]
 8007d6e:	687a      	ldr	r2, [r7, #4]
 8007d70:	211a      	movs	r1, #26
 8007d72:	fb01 f303 	mul.w	r3, r1, r3
 8007d76:	4413      	add	r3, r2
 8007d78:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007d7c:	881a      	ldrh	r2, [r3, #0]
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	785b      	ldrb	r3, [r3, #1]
 8007d86:	4619      	mov	r1, r3
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f001 fe36 	bl	80099fa <USBH_AllocPipe>
 8007d8e:	4603      	mov	r3, r0
 8007d90:	461a      	mov	r2, r3
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	7819      	ldrb	r1, [r3, #0]
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	7858      	ldrb	r0, [r3, #1]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007daa:	68ba      	ldr	r2, [r7, #8]
 8007dac:	8952      	ldrh	r2, [r2, #10]
 8007dae:	9202      	str	r2, [sp, #8]
 8007db0:	2203      	movs	r2, #3
 8007db2:	9201      	str	r2, [sp, #4]
 8007db4:	9300      	str	r3, [sp, #0]
 8007db6:	4623      	mov	r3, r4
 8007db8:	4602      	mov	r2, r0
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f001 fdee 	bl	800999c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	781b      	ldrb	r3, [r3, #0]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	4619      	mov	r1, r3
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f002 f8ff 	bl	8009fcc <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8007dce:	2300      	movs	r3, #0
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	210a      	movs	r1, #10
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f000 fbed 	bl	80085b4 <USBH_FindInterface>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007dde:	7bfb      	ldrb	r3, [r7, #15]
 8007de0:	2bff      	cmp	r3, #255	; 0xff
 8007de2:	d002      	beq.n	8007dea <USBH_CDC_InterfaceInit+0x11a>
 8007de4:	7bfb      	ldrb	r3, [r7, #15]
 8007de6:	2b01      	cmp	r3, #1
 8007de8:	d901      	bls.n	8007dee <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007dea:	2302      	movs	r3, #2
 8007dec:	e0c2      	b.n	8007f74 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8007dee:	7bfb      	ldrb	r3, [r7, #15]
 8007df0:	687a      	ldr	r2, [r7, #4]
 8007df2:	211a      	movs	r1, #26
 8007df4:	fb01 f303 	mul.w	r3, r1, r3
 8007df8:	4413      	add	r3, r2
 8007dfa:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007dfe:	781b      	ldrb	r3, [r3, #0]
 8007e00:	b25b      	sxtb	r3, r3
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	da16      	bge.n	8007e34 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007e06:	7bfb      	ldrb	r3, [r7, #15]
 8007e08:	687a      	ldr	r2, [r7, #4]
 8007e0a:	211a      	movs	r1, #26
 8007e0c:	fb01 f303 	mul.w	r3, r1, r3
 8007e10:	4413      	add	r3, r2
 8007e12:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007e16:	781a      	ldrb	r2, [r3, #0]
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007e1c:	7bfb      	ldrb	r3, [r7, #15]
 8007e1e:	687a      	ldr	r2, [r7, #4]
 8007e20:	211a      	movs	r1, #26
 8007e22:	fb01 f303 	mul.w	r3, r1, r3
 8007e26:	4413      	add	r3, r2
 8007e28:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007e2c:	881a      	ldrh	r2, [r3, #0]
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	835a      	strh	r2, [r3, #26]
 8007e32:	e015      	b.n	8007e60 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007e34:	7bfb      	ldrb	r3, [r7, #15]
 8007e36:	687a      	ldr	r2, [r7, #4]
 8007e38:	211a      	movs	r1, #26
 8007e3a:	fb01 f303 	mul.w	r3, r1, r3
 8007e3e:	4413      	add	r3, r2
 8007e40:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007e44:	781a      	ldrb	r2, [r3, #0]
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007e4a:	7bfb      	ldrb	r3, [r7, #15]
 8007e4c:	687a      	ldr	r2, [r7, #4]
 8007e4e:	211a      	movs	r1, #26
 8007e50:	fb01 f303 	mul.w	r3, r1, r3
 8007e54:	4413      	add	r3, r2
 8007e56:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007e5a:	881a      	ldrh	r2, [r3, #0]
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8007e60:	7bfb      	ldrb	r3, [r7, #15]
 8007e62:	687a      	ldr	r2, [r7, #4]
 8007e64:	211a      	movs	r1, #26
 8007e66:	fb01 f303 	mul.w	r3, r1, r3
 8007e6a:	4413      	add	r3, r2
 8007e6c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007e70:	781b      	ldrb	r3, [r3, #0]
 8007e72:	b25b      	sxtb	r3, r3
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	da16      	bge.n	8007ea6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007e78:	7bfb      	ldrb	r3, [r7, #15]
 8007e7a:	687a      	ldr	r2, [r7, #4]
 8007e7c:	211a      	movs	r1, #26
 8007e7e:	fb01 f303 	mul.w	r3, r1, r3
 8007e82:	4413      	add	r3, r2
 8007e84:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007e88:	781a      	ldrb	r2, [r3, #0]
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007e8e:	7bfb      	ldrb	r3, [r7, #15]
 8007e90:	687a      	ldr	r2, [r7, #4]
 8007e92:	211a      	movs	r1, #26
 8007e94:	fb01 f303 	mul.w	r3, r1, r3
 8007e98:	4413      	add	r3, r2
 8007e9a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007e9e:	881a      	ldrh	r2, [r3, #0]
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	835a      	strh	r2, [r3, #26]
 8007ea4:	e015      	b.n	8007ed2 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007ea6:	7bfb      	ldrb	r3, [r7, #15]
 8007ea8:	687a      	ldr	r2, [r7, #4]
 8007eaa:	211a      	movs	r1, #26
 8007eac:	fb01 f303 	mul.w	r3, r1, r3
 8007eb0:	4413      	add	r3, r2
 8007eb2:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007eb6:	781a      	ldrb	r2, [r3, #0]
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007ebc:	7bfb      	ldrb	r3, [r7, #15]
 8007ebe:	687a      	ldr	r2, [r7, #4]
 8007ec0:	211a      	movs	r1, #26
 8007ec2:	fb01 f303 	mul.w	r3, r1, r3
 8007ec6:	4413      	add	r3, r2
 8007ec8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007ecc:	881a      	ldrh	r2, [r3, #0]
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	7b9b      	ldrb	r3, [r3, #14]
 8007ed6:	4619      	mov	r1, r3
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f001 fd8e 	bl	80099fa <USBH_AllocPipe>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	461a      	mov	r2, r3
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	7bdb      	ldrb	r3, [r3, #15]
 8007eea:	4619      	mov	r1, r3
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f001 fd84 	bl	80099fa <USBH_AllocPipe>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	461a      	mov	r2, r3
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	7b59      	ldrb	r1, [r3, #13]
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	7b98      	ldrb	r0, [r3, #14]
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007f0e:	68ba      	ldr	r2, [r7, #8]
 8007f10:	8b12      	ldrh	r2, [r2, #24]
 8007f12:	9202      	str	r2, [sp, #8]
 8007f14:	2202      	movs	r2, #2
 8007f16:	9201      	str	r2, [sp, #4]
 8007f18:	9300      	str	r3, [sp, #0]
 8007f1a:	4623      	mov	r3, r4
 8007f1c:	4602      	mov	r2, r0
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f001 fd3c 	bl	800999c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	7b19      	ldrb	r1, [r3, #12]
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	7bd8      	ldrb	r0, [r3, #15]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007f38:	68ba      	ldr	r2, [r7, #8]
 8007f3a:	8b52      	ldrh	r2, [r2, #26]
 8007f3c:	9202      	str	r2, [sp, #8]
 8007f3e:	2202      	movs	r2, #2
 8007f40:	9201      	str	r2, [sp, #4]
 8007f42:	9300      	str	r3, [sp, #0]
 8007f44:	4623      	mov	r3, r4
 8007f46:	4602      	mov	r2, r0
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f001 fd27 	bl	800999c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	2200      	movs	r2, #0
 8007f52:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	7b5b      	ldrb	r3, [r3, #13]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	4619      	mov	r1, r3
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f002 f834 	bl	8009fcc <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	7b1b      	ldrb	r3, [r3, #12]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	4619      	mov	r1, r3
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f002 f82d 	bl	8009fcc <USBH_LL_SetToggle>

  return USBH_OK;
 8007f72:	2300      	movs	r3, #0
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	3714      	adds	r7, #20
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd90      	pop	{r4, r7, pc}

08007f7c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b084      	sub	sp, #16
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f8a:	69db      	ldr	r3, [r3, #28]
 8007f8c:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	781b      	ldrb	r3, [r3, #0]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d00e      	beq.n	8007fb4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	781b      	ldrb	r3, [r3, #0]
 8007f9a:	4619      	mov	r1, r3
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f001 fd1c 	bl	80099da <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	781b      	ldrb	r3, [r3, #0]
 8007fa6:	4619      	mov	r1, r3
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f001 fd47 	bl	8009a3c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	7b1b      	ldrb	r3, [r3, #12]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d00e      	beq.n	8007fda <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	7b1b      	ldrb	r3, [r3, #12]
 8007fc0:	4619      	mov	r1, r3
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f001 fd09 	bl	80099da <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	7b1b      	ldrb	r3, [r3, #12]
 8007fcc:	4619      	mov	r1, r3
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f001 fd34 	bl	8009a3c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	7b5b      	ldrb	r3, [r3, #13]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d00e      	beq.n	8008000 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	7b5b      	ldrb	r3, [r3, #13]
 8007fe6:	4619      	mov	r1, r3
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f001 fcf6 	bl	80099da <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	7b5b      	ldrb	r3, [r3, #13]
 8007ff2:	4619      	mov	r1, r3
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f001 fd21 	bl	8009a3c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008006:	69db      	ldr	r3, [r3, #28]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d00b      	beq.n	8008024 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008012:	69db      	ldr	r3, [r3, #28]
 8008014:	4618      	mov	r0, r3
 8008016:	f002 f891 	bl	800a13c <free>
    phost->pActiveClass->pData = 0U;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008020:	2200      	movs	r2, #0
 8008022:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008024:	2300      	movs	r3, #0
}
 8008026:	4618      	mov	r0, r3
 8008028:	3710      	adds	r7, #16
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}

0800802e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800802e:	b580      	push	{r7, lr}
 8008030:	b084      	sub	sp, #16
 8008032:	af00      	add	r7, sp, #0
 8008034:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800803c:	69db      	ldr	r3, [r3, #28]
 800803e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	3340      	adds	r3, #64	; 0x40
 8008044:	4619      	mov	r1, r3
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f000 f8b1 	bl	80081ae <GetLineCoding>
 800804c:	4603      	mov	r3, r0
 800804e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008050:	7afb      	ldrb	r3, [r7, #11]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d105      	bne.n	8008062 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800805c:	2102      	movs	r1, #2
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8008062:	7afb      	ldrb	r3, [r7, #11]
}
 8008064:	4618      	mov	r0, r3
 8008066:	3710      	adds	r7, #16
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}

0800806c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b084      	sub	sp, #16
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008074:	2301      	movs	r3, #1
 8008076:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8008078:	2300      	movs	r3, #0
 800807a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008082:	69db      	ldr	r3, [r3, #28]
 8008084:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800808c:	2b04      	cmp	r3, #4
 800808e:	d877      	bhi.n	8008180 <USBH_CDC_Process+0x114>
 8008090:	a201      	add	r2, pc, #4	; (adr r2, 8008098 <USBH_CDC_Process+0x2c>)
 8008092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008096:	bf00      	nop
 8008098:	080080ad 	.word	0x080080ad
 800809c:	080080b3 	.word	0x080080b3
 80080a0:	080080e3 	.word	0x080080e3
 80080a4:	08008157 	.word	0x08008157
 80080a8:	08008165 	.word	0x08008165
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80080ac:	2300      	movs	r3, #0
 80080ae:	73fb      	strb	r3, [r7, #15]
      break;
 80080b0:	e06d      	b.n	800818e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080b6:	4619      	mov	r1, r3
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f000 f897 	bl	80081ec <SetLineCoding>
 80080be:	4603      	mov	r3, r0
 80080c0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80080c2:	7bbb      	ldrb	r3, [r7, #14]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d104      	bne.n	80080d2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	2202      	movs	r2, #2
 80080cc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80080d0:	e058      	b.n	8008184 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80080d2:	7bbb      	ldrb	r3, [r7, #14]
 80080d4:	2b01      	cmp	r3, #1
 80080d6:	d055      	beq.n	8008184 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	2204      	movs	r2, #4
 80080dc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80080e0:	e050      	b.n	8008184 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	3340      	adds	r3, #64	; 0x40
 80080e6:	4619      	mov	r1, r3
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f000 f860 	bl	80081ae <GetLineCoding>
 80080ee:	4603      	mov	r3, r0
 80080f0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80080f2:	7bbb      	ldrb	r3, [r7, #14]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d126      	bne.n	8008146 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	2200      	movs	r2, #0
 80080fc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800810a:	791b      	ldrb	r3, [r3, #4]
 800810c:	429a      	cmp	r2, r3
 800810e:	d13b      	bne.n	8008188 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800811a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800811c:	429a      	cmp	r2, r3
 800811e:	d133      	bne.n	8008188 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800812a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800812c:	429a      	cmp	r2, r3
 800812e:	d12b      	bne.n	8008188 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008138:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800813a:	429a      	cmp	r2, r3
 800813c:	d124      	bne.n	8008188 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f000 f95a 	bl	80083f8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008144:	e020      	b.n	8008188 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8008146:	7bbb      	ldrb	r3, [r7, #14]
 8008148:	2b01      	cmp	r3, #1
 800814a:	d01d      	beq.n	8008188 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	2204      	movs	r2, #4
 8008150:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008154:	e018      	b.n	8008188 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f000 f867 	bl	800822a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f000 f8dc 	bl	800831a <CDC_ProcessReception>
      break;
 8008162:	e014      	b.n	800818e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8008164:	2100      	movs	r1, #0
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f000 ffe5 	bl	8009136 <USBH_ClrFeature>
 800816c:	4603      	mov	r3, r0
 800816e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008170:	7bbb      	ldrb	r3, [r7, #14]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d10a      	bne.n	800818c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	2200      	movs	r2, #0
 800817a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800817e:	e005      	b.n	800818c <USBH_CDC_Process+0x120>

    default:
      break;
 8008180:	bf00      	nop
 8008182:	e004      	b.n	800818e <USBH_CDC_Process+0x122>
      break;
 8008184:	bf00      	nop
 8008186:	e002      	b.n	800818e <USBH_CDC_Process+0x122>
      break;
 8008188:	bf00      	nop
 800818a:	e000      	b.n	800818e <USBH_CDC_Process+0x122>
      break;
 800818c:	bf00      	nop

  }

  return status;
 800818e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008190:	4618      	mov	r0, r3
 8008192:	3710      	adds	r7, #16
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}

08008198 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008198:	b480      	push	{r7}
 800819a:	b083      	sub	sp, #12
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80081a0:	2300      	movs	r3, #0
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	370c      	adds	r7, #12
 80081a6:	46bd      	mov	sp, r7
 80081a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ac:	4770      	bx	lr

080081ae <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80081ae:	b580      	push	{r7, lr}
 80081b0:	b082      	sub	sp, #8
 80081b2:	af00      	add	r7, sp, #0
 80081b4:	6078      	str	r0, [r7, #4]
 80081b6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	22a1      	movs	r2, #161	; 0xa1
 80081bc:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2221      	movs	r2, #33	; 0x21
 80081c2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2200      	movs	r2, #0
 80081c8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2200      	movs	r2, #0
 80081ce:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2207      	movs	r2, #7
 80081d4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	2207      	movs	r2, #7
 80081da:	4619      	mov	r1, r3
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f001 f98a 	bl	80094f6 <USBH_CtlReq>
 80081e2:	4603      	mov	r3, r0
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	3708      	adds	r7, #8
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}

080081ec <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b082      	sub	sp, #8
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
 80081f4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2221      	movs	r2, #33	; 0x21
 80081fa:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2220      	movs	r2, #32
 8008200:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2200      	movs	r2, #0
 8008206:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2200      	movs	r2, #0
 800820c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2207      	movs	r2, #7
 8008212:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	2207      	movs	r2, #7
 8008218:	4619      	mov	r1, r3
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f001 f96b 	bl	80094f6 <USBH_CtlReq>
 8008220:	4603      	mov	r3, r0
}
 8008222:	4618      	mov	r0, r3
 8008224:	3708      	adds	r7, #8
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}

0800822a <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800822a:	b580      	push	{r7, lr}
 800822c:	b086      	sub	sp, #24
 800822e:	af02      	add	r7, sp, #8
 8008230:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008238:	69db      	ldr	r3, [r3, #28]
 800823a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800823c:	2300      	movs	r3, #0
 800823e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8008246:	2b01      	cmp	r3, #1
 8008248:	d002      	beq.n	8008250 <CDC_ProcessTransmission+0x26>
 800824a:	2b02      	cmp	r3, #2
 800824c:	d025      	beq.n	800829a <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 800824e:	e060      	b.n	8008312 <CDC_ProcessTransmission+0xe8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008254:	68fa      	ldr	r2, [r7, #12]
 8008256:	8b12      	ldrh	r2, [r2, #24]
 8008258:	4293      	cmp	r3, r2
 800825a:	d90c      	bls.n	8008276 <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	69d9      	ldr	r1, [r3, #28]
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	8b1a      	ldrh	r2, [r3, #24]
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	7b58      	ldrb	r0, [r3, #13]
 8008268:	2301      	movs	r3, #1
 800826a:	9300      	str	r3, [sp, #0]
 800826c:	4603      	mov	r3, r0
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f001 fb51 	bl	8009916 <USBH_BulkSendData>
 8008274:	e00c      	b.n	8008290 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800827e:	b29a      	uxth	r2, r3
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	7b58      	ldrb	r0, [r3, #13]
 8008284:	2301      	movs	r3, #1
 8008286:	9300      	str	r3, [sp, #0]
 8008288:	4603      	mov	r3, r0
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f001 fb43 	bl	8009916 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	2202      	movs	r2, #2
 8008294:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008298:	e03b      	b.n	8008312 <CDC_ProcessTransmission+0xe8>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	7b5b      	ldrb	r3, [r3, #13]
 800829e:	4619      	mov	r1, r3
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f001 fe69 	bl	8009f78 <USBH_LL_GetURBState>
 80082a6:	4603      	mov	r3, r0
 80082a8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80082aa:	7afb      	ldrb	r3, [r7, #11]
 80082ac:	2b01      	cmp	r3, #1
 80082ae:	d128      	bne.n	8008302 <CDC_ProcessTransmission+0xd8>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b4:	68fa      	ldr	r2, [r7, #12]
 80082b6:	8b12      	ldrh	r2, [r2, #24]
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d90e      	bls.n	80082da <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c0:	68fa      	ldr	r2, [r7, #12]
 80082c2:	8b12      	ldrh	r2, [r2, #24]
 80082c4:	1a9a      	subs	r2, r3, r2
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	69db      	ldr	r3, [r3, #28]
 80082ce:	68fa      	ldr	r2, [r7, #12]
 80082d0:	8b12      	ldrh	r2, [r2, #24]
 80082d2:	441a      	add	r2, r3
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	61da      	str	r2, [r3, #28]
 80082d8:	e002      	b.n	80082e0 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	2200      	movs	r2, #0
 80082de:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d004      	beq.n	80082f2 <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	2201      	movs	r2, #1
 80082ec:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80082f0:	e00e      	b.n	8008310 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2200      	movs	r2, #0
 80082f6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f000 f868 	bl	80083d0 <USBH_CDC_TransmitCallback>
      break;
 8008300:	e006      	b.n	8008310 <CDC_ProcessTransmission+0xe6>
        if (URB_Status == USBH_URB_NOTREADY)
 8008302:	7afb      	ldrb	r3, [r7, #11]
 8008304:	2b02      	cmp	r3, #2
 8008306:	d103      	bne.n	8008310 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	2201      	movs	r2, #1
 800830c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008310:	bf00      	nop
  }
}
 8008312:	bf00      	nop
 8008314:	3710      	adds	r7, #16
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}

0800831a <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800831a:	b580      	push	{r7, lr}
 800831c:	b086      	sub	sp, #24
 800831e:	af00      	add	r7, sp, #0
 8008320:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008328:	69db      	ldr	r3, [r3, #28]
 800832a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800832c:	2300      	movs	r3, #0
 800832e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8008336:	2b03      	cmp	r3, #3
 8008338:	d002      	beq.n	8008340 <CDC_ProcessReception+0x26>
 800833a:	2b04      	cmp	r3, #4
 800833c:	d00e      	beq.n	800835c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800833e:	e043      	b.n	80083c8 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	6a19      	ldr	r1, [r3, #32]
 8008344:	697b      	ldr	r3, [r7, #20]
 8008346:	8b5a      	ldrh	r2, [r3, #26]
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	7b1b      	ldrb	r3, [r3, #12]
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f001 fb07 	bl	8009960 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	2204      	movs	r2, #4
 8008356:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800835a:	e035      	b.n	80083c8 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	7b1b      	ldrb	r3, [r3, #12]
 8008360:	4619      	mov	r1, r3
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f001 fe08 	bl	8009f78 <USBH_LL_GetURBState>
 8008368:	4603      	mov	r3, r0
 800836a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800836c:	7cfb      	ldrb	r3, [r7, #19]
 800836e:	2b01      	cmp	r3, #1
 8008370:	d129      	bne.n	80083c6 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	7b1b      	ldrb	r3, [r3, #12]
 8008376:	4619      	mov	r1, r3
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f001 fd6b 	bl	8009e54 <USBH_LL_GetLastXferSize>
 800837e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8008380:	697b      	ldr	r3, [r7, #20]
 8008382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008384:	68fa      	ldr	r2, [r7, #12]
 8008386:	429a      	cmp	r2, r3
 8008388:	d016      	beq.n	80083b8 <CDC_ProcessReception+0x9e>
 800838a:	697b      	ldr	r3, [r7, #20]
 800838c:	8b5b      	ldrh	r3, [r3, #26]
 800838e:	461a      	mov	r2, r3
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	4293      	cmp	r3, r2
 8008394:	d910      	bls.n	80083b8 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8008396:	697b      	ldr	r3, [r7, #20]
 8008398:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	1ad2      	subs	r2, r2, r3
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	6a1a      	ldr	r2, [r3, #32]
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	441a      	add	r2, r3
 80083aa:	697b      	ldr	r3, [r7, #20]
 80083ac:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	2203      	movs	r2, #3
 80083b2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80083b6:	e006      	b.n	80083c6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	2200      	movs	r2, #0
 80083bc:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f000 f80f 	bl	80083e4 <USBH_CDC_ReceiveCallback>
      break;
 80083c6:	bf00      	nop
  }
}
 80083c8:	bf00      	nop
 80083ca:	3718      	adds	r7, #24
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}

080083d0 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80083d0:	b480      	push	{r7}
 80083d2:	b083      	sub	sp, #12
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80083d8:	bf00      	nop
 80083da:	370c      	adds	r7, #12
 80083dc:	46bd      	mov	sp, r7
 80083de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e2:	4770      	bx	lr

080083e4 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b083      	sub	sp, #12
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80083ec:	bf00      	nop
 80083ee:	370c      	adds	r7, #12
 80083f0:	46bd      	mov	sp, r7
 80083f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f6:	4770      	bx	lr

080083f8 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80083f8:	b480      	push	{r7}
 80083fa:	b083      	sub	sp, #12
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008400:	bf00      	nop
 8008402:	370c      	adds	r7, #12
 8008404:	46bd      	mov	sp, r7
 8008406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840a:	4770      	bx	lr

0800840c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b084      	sub	sp, #16
 8008410:	af00      	add	r7, sp, #0
 8008412:	60f8      	str	r0, [r7, #12]
 8008414:	60b9      	str	r1, [r7, #8]
 8008416:	4613      	mov	r3, r2
 8008418:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d101      	bne.n	8008424 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008420:	2302      	movs	r3, #2
 8008422:	e029      	b.n	8008478 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	79fa      	ldrb	r2, [r7, #7]
 8008428:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	2200      	movs	r2, #0
 8008430:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	2200      	movs	r2, #0
 8008438:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800843c:	68f8      	ldr	r0, [r7, #12]
 800843e:	f000 f81f 	bl	8008480 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2200      	movs	r2, #0
 8008446:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2200      	movs	r2, #0
 800844e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	2200      	movs	r2, #0
 8008456:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	2200      	movs	r2, #0
 800845e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d003      	beq.n	8008470 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	68ba      	ldr	r2, [r7, #8]
 800846c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8008470:	68f8      	ldr	r0, [r7, #12]
 8008472:	f001 fc3d 	bl	8009cf0 <USBH_LL_Init>

  return USBH_OK;
 8008476:	2300      	movs	r3, #0
}
 8008478:	4618      	mov	r0, r3
 800847a:	3710      	adds	r7, #16
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}

08008480 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008480:	b480      	push	{r7}
 8008482:	b085      	sub	sp, #20
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008488:	2300      	movs	r3, #0
 800848a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800848c:	2300      	movs	r3, #0
 800848e:	60fb      	str	r3, [r7, #12]
 8008490:	e009      	b.n	80084a6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8008492:	687a      	ldr	r2, [r7, #4]
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	33e0      	adds	r3, #224	; 0xe0
 8008498:	009b      	lsls	r3, r3, #2
 800849a:	4413      	add	r3, r2
 800849c:	2200      	movs	r2, #0
 800849e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	3301      	adds	r3, #1
 80084a4:	60fb      	str	r3, [r7, #12]
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	2b0e      	cmp	r3, #14
 80084aa:	d9f2      	bls.n	8008492 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80084ac:	2300      	movs	r3, #0
 80084ae:	60fb      	str	r3, [r7, #12]
 80084b0:	e009      	b.n	80084c6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80084b2:	687a      	ldr	r2, [r7, #4]
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	4413      	add	r3, r2
 80084b8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80084bc:	2200      	movs	r2, #0
 80084be:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	3301      	adds	r3, #1
 80084c4:	60fb      	str	r3, [r7, #12]
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80084cc:	d3f1      	bcc.n	80084b2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2200      	movs	r2, #0
 80084d2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2200      	movs	r2, #0
 80084d8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2201      	movs	r2, #1
 80084de:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2200      	movs	r2, #0
 80084e4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2201      	movs	r2, #1
 80084ec:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2240      	movs	r2, #64	; 0x40
 80084f2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2200      	movs	r2, #0
 80084f8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2200      	movs	r2, #0
 80084fe:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2201      	movs	r2, #1
 8008506:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2200      	movs	r2, #0
 800850e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2200      	movs	r2, #0
 8008516:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800851a:	2300      	movs	r3, #0
}
 800851c:	4618      	mov	r0, r3
 800851e:	3714      	adds	r7, #20
 8008520:	46bd      	mov	sp, r7
 8008522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008526:	4770      	bx	lr

08008528 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008528:	b480      	push	{r7}
 800852a:	b085      	sub	sp, #20
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008532:	2300      	movs	r3, #0
 8008534:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d016      	beq.n	800856a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008542:	2b00      	cmp	r3, #0
 8008544:	d10e      	bne.n	8008564 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800854c:	1c59      	adds	r1, r3, #1
 800854e:	687a      	ldr	r2, [r7, #4]
 8008550:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8008554:	687a      	ldr	r2, [r7, #4]
 8008556:	33de      	adds	r3, #222	; 0xde
 8008558:	6839      	ldr	r1, [r7, #0]
 800855a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800855e:	2300      	movs	r3, #0
 8008560:	73fb      	strb	r3, [r7, #15]
 8008562:	e004      	b.n	800856e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008564:	2302      	movs	r3, #2
 8008566:	73fb      	strb	r3, [r7, #15]
 8008568:	e001      	b.n	800856e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800856a:	2302      	movs	r3, #2
 800856c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800856e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008570:	4618      	mov	r0, r3
 8008572:	3714      	adds	r7, #20
 8008574:	46bd      	mov	sp, r7
 8008576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857a:	4770      	bx	lr

0800857c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800857c:	b480      	push	{r7}
 800857e:	b085      	sub	sp, #20
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
 8008584:	460b      	mov	r3, r1
 8008586:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008588:	2300      	movs	r3, #0
 800858a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8008592:	78fa      	ldrb	r2, [r7, #3]
 8008594:	429a      	cmp	r2, r3
 8008596:	d204      	bcs.n	80085a2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	78fa      	ldrb	r2, [r7, #3]
 800859c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80085a0:	e001      	b.n	80085a6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80085a2:	2302      	movs	r3, #2
 80085a4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80085a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	3714      	adds	r7, #20
 80085ac:	46bd      	mov	sp, r7
 80085ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b2:	4770      	bx	lr

080085b4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b087      	sub	sp, #28
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
 80085bc:	4608      	mov	r0, r1
 80085be:	4611      	mov	r1, r2
 80085c0:	461a      	mov	r2, r3
 80085c2:	4603      	mov	r3, r0
 80085c4:	70fb      	strb	r3, [r7, #3]
 80085c6:	460b      	mov	r3, r1
 80085c8:	70bb      	strb	r3, [r7, #2]
 80085ca:	4613      	mov	r3, r2
 80085cc:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80085ce:	2300      	movs	r3, #0
 80085d0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 80085d2:	2300      	movs	r3, #0
 80085d4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80085dc:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80085de:	e025      	b.n	800862c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80085e0:	7dfb      	ldrb	r3, [r7, #23]
 80085e2:	221a      	movs	r2, #26
 80085e4:	fb02 f303 	mul.w	r3, r2, r3
 80085e8:	3308      	adds	r3, #8
 80085ea:	68fa      	ldr	r2, [r7, #12]
 80085ec:	4413      	add	r3, r2
 80085ee:	3302      	adds	r3, #2
 80085f0:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80085f2:	693b      	ldr	r3, [r7, #16]
 80085f4:	795b      	ldrb	r3, [r3, #5]
 80085f6:	78fa      	ldrb	r2, [r7, #3]
 80085f8:	429a      	cmp	r2, r3
 80085fa:	d002      	beq.n	8008602 <USBH_FindInterface+0x4e>
 80085fc:	78fb      	ldrb	r3, [r7, #3]
 80085fe:	2bff      	cmp	r3, #255	; 0xff
 8008600:	d111      	bne.n	8008626 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008602:	693b      	ldr	r3, [r7, #16]
 8008604:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008606:	78ba      	ldrb	r2, [r7, #2]
 8008608:	429a      	cmp	r2, r3
 800860a:	d002      	beq.n	8008612 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800860c:	78bb      	ldrb	r3, [r7, #2]
 800860e:	2bff      	cmp	r3, #255	; 0xff
 8008610:	d109      	bne.n	8008626 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008612:	693b      	ldr	r3, [r7, #16]
 8008614:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008616:	787a      	ldrb	r2, [r7, #1]
 8008618:	429a      	cmp	r2, r3
 800861a:	d002      	beq.n	8008622 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800861c:	787b      	ldrb	r3, [r7, #1]
 800861e:	2bff      	cmp	r3, #255	; 0xff
 8008620:	d101      	bne.n	8008626 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008622:	7dfb      	ldrb	r3, [r7, #23]
 8008624:	e006      	b.n	8008634 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008626:	7dfb      	ldrb	r3, [r7, #23]
 8008628:	3301      	adds	r3, #1
 800862a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800862c:	7dfb      	ldrb	r3, [r7, #23]
 800862e:	2b01      	cmp	r3, #1
 8008630:	d9d6      	bls.n	80085e0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008632:	23ff      	movs	r3, #255	; 0xff
}
 8008634:	4618      	mov	r0, r3
 8008636:	371c      	adds	r7, #28
 8008638:	46bd      	mov	sp, r7
 800863a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863e:	4770      	bx	lr

08008640 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b082      	sub	sp, #8
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f001 fb8d 	bl	8009d68 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800864e:	2101      	movs	r1, #1
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f001 fca4 	bl	8009f9e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008656:	2300      	movs	r3, #0
}
 8008658:	4618      	mov	r0, r3
 800865a:	3708      	adds	r7, #8
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}

08008660 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b088      	sub	sp, #32
 8008664:	af04      	add	r7, sp, #16
 8008666:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008668:	2302      	movs	r3, #2
 800866a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800866c:	2300      	movs	r3, #0
 800866e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8008676:	b2db      	uxtb	r3, r3
 8008678:	2b01      	cmp	r3, #1
 800867a:	d102      	bne.n	8008682 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2203      	movs	r2, #3
 8008680:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	781b      	ldrb	r3, [r3, #0]
 8008686:	b2db      	uxtb	r3, r3
 8008688:	2b0b      	cmp	r3, #11
 800868a:	f200 81b3 	bhi.w	80089f4 <USBH_Process+0x394>
 800868e:	a201      	add	r2, pc, #4	; (adr r2, 8008694 <USBH_Process+0x34>)
 8008690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008694:	080086c5 	.word	0x080086c5
 8008698:	080086f7 	.word	0x080086f7
 800869c:	0800875f 	.word	0x0800875f
 80086a0:	0800898f 	.word	0x0800898f
 80086a4:	080089f5 	.word	0x080089f5
 80086a8:	08008803 	.word	0x08008803
 80086ac:	08008935 	.word	0x08008935
 80086b0:	08008839 	.word	0x08008839
 80086b4:	08008859 	.word	0x08008859
 80086b8:	08008879 	.word	0x08008879
 80086bc:	080088a7 	.word	0x080088a7
 80086c0:	08008977 	.word	0x08008977
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80086ca:	b2db      	uxtb	r3, r3
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	f000 8193 	beq.w	80089f8 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2201      	movs	r2, #1
 80086d6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80086d8:	20c8      	movs	r0, #200	; 0xc8
 80086da:	f001 fcaa 	bl	800a032 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f001 fb9d 	bl	8009e1e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2200      	movs	r2, #0
 80086e8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2200      	movs	r2, #0
 80086f0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80086f4:	e180      	b.n	80089f8 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80086fc:	2b01      	cmp	r3, #1
 80086fe:	d107      	bne.n	8008710 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2200      	movs	r2, #0
 8008704:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2202      	movs	r2, #2
 800870c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800870e:	e182      	b.n	8008a16 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008716:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800871a:	d914      	bls.n	8008746 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008722:	3301      	adds	r3, #1
 8008724:	b2da      	uxtb	r2, r3
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008732:	2b03      	cmp	r3, #3
 8008734:	d903      	bls.n	800873e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	220d      	movs	r2, #13
 800873a:	701a      	strb	r2, [r3, #0]
      break;
 800873c:	e16b      	b.n	8008a16 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2200      	movs	r2, #0
 8008742:	701a      	strb	r2, [r3, #0]
      break;
 8008744:	e167      	b.n	8008a16 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800874c:	f103 020a 	add.w	r2, r3, #10
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8008756:	200a      	movs	r0, #10
 8008758:	f001 fc6b 	bl	800a032 <USBH_Delay>
      break;
 800875c:	e15b      	b.n	8008a16 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008764:	2b00      	cmp	r3, #0
 8008766:	d005      	beq.n	8008774 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800876e:	2104      	movs	r1, #4
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008774:	2064      	movs	r0, #100	; 0x64
 8008776:	f001 fc5c 	bl	800a032 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f001 fb2a 	bl	8009dd4 <USBH_LL_GetSpeed>
 8008780:	4603      	mov	r3, r0
 8008782:	461a      	mov	r2, r3
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2205      	movs	r2, #5
 800878e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008790:	2100      	movs	r1, #0
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f001 f931 	bl	80099fa <USBH_AllocPipe>
 8008798:	4603      	mov	r3, r0
 800879a:	461a      	mov	r2, r3
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80087a0:	2180      	movs	r1, #128	; 0x80
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f001 f929 	bl	80099fa <USBH_AllocPipe>
 80087a8:	4603      	mov	r3, r0
 80087aa:	461a      	mov	r2, r3
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	7919      	ldrb	r1, [r3, #4]
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80087c0:	687a      	ldr	r2, [r7, #4]
 80087c2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80087c4:	b292      	uxth	r2, r2
 80087c6:	9202      	str	r2, [sp, #8]
 80087c8:	2200      	movs	r2, #0
 80087ca:	9201      	str	r2, [sp, #4]
 80087cc:	9300      	str	r3, [sp, #0]
 80087ce:	4603      	mov	r3, r0
 80087d0:	2280      	movs	r2, #128	; 0x80
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f001 f8e2 	bl	800999c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	7959      	ldrb	r1, [r3, #5]
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80087e8:	687a      	ldr	r2, [r7, #4]
 80087ea:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80087ec:	b292      	uxth	r2, r2
 80087ee:	9202      	str	r2, [sp, #8]
 80087f0:	2200      	movs	r2, #0
 80087f2:	9201      	str	r2, [sp, #4]
 80087f4:	9300      	str	r3, [sp, #0]
 80087f6:	4603      	mov	r3, r0
 80087f8:	2200      	movs	r2, #0
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f001 f8ce 	bl	800999c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008800:	e109      	b.n	8008a16 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f000 f90c 	bl	8008a20 <USBH_HandleEnum>
 8008808:	4603      	mov	r3, r0
 800880a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800880c:	7bbb      	ldrb	r3, [r7, #14]
 800880e:	b2db      	uxtb	r3, r3
 8008810:	2b00      	cmp	r3, #0
 8008812:	f040 80f3 	bne.w	80089fc <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2200      	movs	r2, #0
 800881a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8008824:	2b01      	cmp	r3, #1
 8008826:	d103      	bne.n	8008830 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2208      	movs	r2, #8
 800882c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800882e:	e0e5      	b.n	80089fc <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2207      	movs	r2, #7
 8008834:	701a      	strb	r2, [r3, #0]
      break;
 8008836:	e0e1      	b.n	80089fc <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800883e:	2b00      	cmp	r3, #0
 8008840:	f000 80de 	beq.w	8008a00 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800884a:	2101      	movs	r1, #1
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2208      	movs	r2, #8
 8008854:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8008856:	e0d3      	b.n	8008a00 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800885e:	b29b      	uxth	r3, r3
 8008860:	4619      	mov	r1, r3
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f000 fc20 	bl	80090a8 <USBH_SetCfg>
 8008868:	4603      	mov	r3, r0
 800886a:	2b00      	cmp	r3, #0
 800886c:	f040 80ca 	bne.w	8008a04 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2209      	movs	r2, #9
 8008874:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008876:	e0c5      	b.n	8008a04 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800887e:	f003 0320 	and.w	r3, r3, #32
 8008882:	2b00      	cmp	r3, #0
 8008884:	d00b      	beq.n	800889e <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8008886:	2101      	movs	r1, #1
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f000 fc30 	bl	80090ee <USBH_SetFeature>
 800888e:	4603      	mov	r3, r0
 8008890:	2b00      	cmp	r3, #0
 8008892:	f040 80b9 	bne.w	8008a08 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	220a      	movs	r2, #10
 800889a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800889c:	e0b4      	b.n	8008a08 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	220a      	movs	r2, #10
 80088a2:	701a      	strb	r2, [r3, #0]
      break;
 80088a4:	e0b0      	b.n	8008a08 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	f000 80ad 	beq.w	8008a0c <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2200      	movs	r2, #0
 80088b6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80088ba:	2300      	movs	r3, #0
 80088bc:	73fb      	strb	r3, [r7, #15]
 80088be:	e016      	b.n	80088ee <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80088c0:	7bfa      	ldrb	r2, [r7, #15]
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	32de      	adds	r2, #222	; 0xde
 80088c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088ca:	791a      	ldrb	r2, [r3, #4]
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80088d2:	429a      	cmp	r2, r3
 80088d4:	d108      	bne.n	80088e8 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 80088d6:	7bfa      	ldrb	r2, [r7, #15]
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	32de      	adds	r2, #222	; 0xde
 80088dc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80088e6:	e005      	b.n	80088f4 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80088e8:	7bfb      	ldrb	r3, [r7, #15]
 80088ea:	3301      	adds	r3, #1
 80088ec:	73fb      	strb	r3, [r7, #15]
 80088ee:	7bfb      	ldrb	r3, [r7, #15]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d0e5      	beq.n	80088c0 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d016      	beq.n	800892c <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008904:	689b      	ldr	r3, [r3, #8]
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	4798      	blx	r3
 800890a:	4603      	mov	r3, r0
 800890c:	2b00      	cmp	r3, #0
 800890e:	d109      	bne.n	8008924 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2206      	movs	r2, #6
 8008914:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800891c:	2103      	movs	r1, #3
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008922:	e073      	b.n	8008a0c <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	220d      	movs	r2, #13
 8008928:	701a      	strb	r2, [r3, #0]
      break;
 800892a:	e06f      	b.n	8008a0c <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	220d      	movs	r2, #13
 8008930:	701a      	strb	r2, [r3, #0]
      break;
 8008932:	e06b      	b.n	8008a0c <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800893a:	2b00      	cmp	r3, #0
 800893c:	d017      	beq.n	800896e <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008944:	691b      	ldr	r3, [r3, #16]
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	4798      	blx	r3
 800894a:	4603      	mov	r3, r0
 800894c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800894e:	7bbb      	ldrb	r3, [r7, #14]
 8008950:	b2db      	uxtb	r3, r3
 8008952:	2b00      	cmp	r3, #0
 8008954:	d103      	bne.n	800895e <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	220b      	movs	r2, #11
 800895a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800895c:	e058      	b.n	8008a10 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800895e:	7bbb      	ldrb	r3, [r7, #14]
 8008960:	b2db      	uxtb	r3, r3
 8008962:	2b02      	cmp	r3, #2
 8008964:	d154      	bne.n	8008a10 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	220d      	movs	r2, #13
 800896a:	701a      	strb	r2, [r3, #0]
      break;
 800896c:	e050      	b.n	8008a10 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	220d      	movs	r2, #13
 8008972:	701a      	strb	r2, [r3, #0]
      break;
 8008974:	e04c      	b.n	8008a10 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800897c:	2b00      	cmp	r3, #0
 800897e:	d049      	beq.n	8008a14 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008986:	695b      	ldr	r3, [r3, #20]
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	4798      	blx	r3
      }
      break;
 800898c:	e042      	b.n	8008a14 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2200      	movs	r2, #0
 8008992:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f7ff fd72 	bl	8008480 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d009      	beq.n	80089ba <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80089ac:	68db      	ldr	r3, [r3, #12]
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2200      	movs	r2, #0
 80089b6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d005      	beq.n	80089d0 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80089ca:	2105      	movs	r1, #5
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80089d6:	b2db      	uxtb	r3, r3
 80089d8:	2b01      	cmp	r3, #1
 80089da:	d107      	bne.n	80089ec <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2200      	movs	r2, #0
 80089e0:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f7ff fe2b 	bl	8008640 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80089ea:	e014      	b.n	8008a16 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f001 f9bb 	bl	8009d68 <USBH_LL_Start>
      break;
 80089f2:	e010      	b.n	8008a16 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 80089f4:	bf00      	nop
 80089f6:	e00e      	b.n	8008a16 <USBH_Process+0x3b6>
      break;
 80089f8:	bf00      	nop
 80089fa:	e00c      	b.n	8008a16 <USBH_Process+0x3b6>
      break;
 80089fc:	bf00      	nop
 80089fe:	e00a      	b.n	8008a16 <USBH_Process+0x3b6>
    break;
 8008a00:	bf00      	nop
 8008a02:	e008      	b.n	8008a16 <USBH_Process+0x3b6>
      break;
 8008a04:	bf00      	nop
 8008a06:	e006      	b.n	8008a16 <USBH_Process+0x3b6>
      break;
 8008a08:	bf00      	nop
 8008a0a:	e004      	b.n	8008a16 <USBH_Process+0x3b6>
      break;
 8008a0c:	bf00      	nop
 8008a0e:	e002      	b.n	8008a16 <USBH_Process+0x3b6>
      break;
 8008a10:	bf00      	nop
 8008a12:	e000      	b.n	8008a16 <USBH_Process+0x3b6>
      break;
 8008a14:	bf00      	nop
  }
  return USBH_OK;
 8008a16:	2300      	movs	r3, #0
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	3710      	adds	r7, #16
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	bd80      	pop	{r7, pc}

08008a20 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b088      	sub	sp, #32
 8008a24:	af04      	add	r7, sp, #16
 8008a26:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008a28:	2301      	movs	r3, #1
 8008a2a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	785b      	ldrb	r3, [r3, #1]
 8008a34:	2b07      	cmp	r3, #7
 8008a36:	f200 81c1 	bhi.w	8008dbc <USBH_HandleEnum+0x39c>
 8008a3a:	a201      	add	r2, pc, #4	; (adr r2, 8008a40 <USBH_HandleEnum+0x20>)
 8008a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a40:	08008a61 	.word	0x08008a61
 8008a44:	08008b1f 	.word	0x08008b1f
 8008a48:	08008b89 	.word	0x08008b89
 8008a4c:	08008c17 	.word	0x08008c17
 8008a50:	08008c81 	.word	0x08008c81
 8008a54:	08008cf1 	.word	0x08008cf1
 8008a58:	08008d37 	.word	0x08008d37
 8008a5c:	08008d7d 	.word	0x08008d7d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008a60:	2108      	movs	r1, #8
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f000 fa50 	bl	8008f08 <USBH_Get_DevDesc>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008a6c:	7bbb      	ldrb	r3, [r7, #14]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d130      	bne.n	8008ad4 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2201      	movs	r2, #1
 8008a80:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	7919      	ldrb	r1, [r3, #4]
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008a92:	687a      	ldr	r2, [r7, #4]
 8008a94:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008a96:	b292      	uxth	r2, r2
 8008a98:	9202      	str	r2, [sp, #8]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	9201      	str	r2, [sp, #4]
 8008a9e:	9300      	str	r3, [sp, #0]
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	2280      	movs	r2, #128	; 0x80
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f000 ff79 	bl	800999c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	7959      	ldrb	r1, [r3, #5]
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008aba:	687a      	ldr	r2, [r7, #4]
 8008abc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008abe:	b292      	uxth	r2, r2
 8008ac0:	9202      	str	r2, [sp, #8]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	9201      	str	r2, [sp, #4]
 8008ac6:	9300      	str	r3, [sp, #0]
 8008ac8:	4603      	mov	r3, r0
 8008aca:	2200      	movs	r2, #0
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f000 ff65 	bl	800999c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008ad2:	e175      	b.n	8008dc0 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008ad4:	7bbb      	ldrb	r3, [r7, #14]
 8008ad6:	2b03      	cmp	r3, #3
 8008ad8:	f040 8172 	bne.w	8008dc0 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008ae2:	3301      	adds	r3, #1
 8008ae4:	b2da      	uxtb	r2, r3
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008af2:	2b03      	cmp	r3, #3
 8008af4:	d903      	bls.n	8008afe <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	220d      	movs	r2, #13
 8008afa:	701a      	strb	r2, [r3, #0]
      break;
 8008afc:	e160      	b.n	8008dc0 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	795b      	ldrb	r3, [r3, #5]
 8008b02:	4619      	mov	r1, r3
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f000 ff99 	bl	8009a3c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	791b      	ldrb	r3, [r3, #4]
 8008b0e:	4619      	mov	r1, r3
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f000 ff93 	bl	8009a3c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2200      	movs	r2, #0
 8008b1a:	701a      	strb	r2, [r3, #0]
      break;
 8008b1c:	e150      	b.n	8008dc0 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8008b1e:	2112      	movs	r1, #18
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f000 f9f1 	bl	8008f08 <USBH_Get_DevDesc>
 8008b26:	4603      	mov	r3, r0
 8008b28:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008b2a:	7bbb      	ldrb	r3, [r7, #14]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d103      	bne.n	8008b38 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2202      	movs	r2, #2
 8008b34:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008b36:	e145      	b.n	8008dc4 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008b38:	7bbb      	ldrb	r3, [r7, #14]
 8008b3a:	2b03      	cmp	r3, #3
 8008b3c:	f040 8142 	bne.w	8008dc4 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008b46:	3301      	adds	r3, #1
 8008b48:	b2da      	uxtb	r2, r3
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008b56:	2b03      	cmp	r3, #3
 8008b58:	d903      	bls.n	8008b62 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	220d      	movs	r2, #13
 8008b5e:	701a      	strb	r2, [r3, #0]
      break;
 8008b60:	e130      	b.n	8008dc4 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	795b      	ldrb	r3, [r3, #5]
 8008b66:	4619      	mov	r1, r3
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f000 ff67 	bl	8009a3c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	791b      	ldrb	r3, [r3, #4]
 8008b72:	4619      	mov	r1, r3
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f000 ff61 	bl	8009a3c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2200      	movs	r2, #0
 8008b84:	701a      	strb	r2, [r3, #0]
      break;
 8008b86:	e11d      	b.n	8008dc4 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008b88:	2101      	movs	r1, #1
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f000 fa68 	bl	8009060 <USBH_SetAddress>
 8008b90:	4603      	mov	r3, r0
 8008b92:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008b94:	7bbb      	ldrb	r3, [r7, #14]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d132      	bne.n	8008c00 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8008b9a:	2002      	movs	r0, #2
 8008b9c:	f001 fa49 	bl	800a032 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2203      	movs	r2, #3
 8008bac:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	7919      	ldrb	r1, [r3, #4]
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008bbe:	687a      	ldr	r2, [r7, #4]
 8008bc0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008bc2:	b292      	uxth	r2, r2
 8008bc4:	9202      	str	r2, [sp, #8]
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	9201      	str	r2, [sp, #4]
 8008bca:	9300      	str	r3, [sp, #0]
 8008bcc:	4603      	mov	r3, r0
 8008bce:	2280      	movs	r2, #128	; 0x80
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f000 fee3 	bl	800999c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	7959      	ldrb	r1, [r3, #5]
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008be6:	687a      	ldr	r2, [r7, #4]
 8008be8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008bea:	b292      	uxth	r2, r2
 8008bec:	9202      	str	r2, [sp, #8]
 8008bee:	2200      	movs	r2, #0
 8008bf0:	9201      	str	r2, [sp, #4]
 8008bf2:	9300      	str	r3, [sp, #0]
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	f000 fecf 	bl	800999c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008bfe:	e0e3      	b.n	8008dc8 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008c00:	7bbb      	ldrb	r3, [r7, #14]
 8008c02:	2b03      	cmp	r3, #3
 8008c04:	f040 80e0 	bne.w	8008dc8 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	220d      	movs	r2, #13
 8008c0c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2200      	movs	r2, #0
 8008c12:	705a      	strb	r2, [r3, #1]
      break;
 8008c14:	e0d8      	b.n	8008dc8 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008c16:	2109      	movs	r1, #9
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f000 f99d 	bl	8008f58 <USBH_Get_CfgDesc>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008c22:	7bbb      	ldrb	r3, [r7, #14]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d103      	bne.n	8008c30 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2204      	movs	r2, #4
 8008c2c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008c2e:	e0cd      	b.n	8008dcc <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008c30:	7bbb      	ldrb	r3, [r7, #14]
 8008c32:	2b03      	cmp	r3, #3
 8008c34:	f040 80ca 	bne.w	8008dcc <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008c3e:	3301      	adds	r3, #1
 8008c40:	b2da      	uxtb	r2, r3
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008c4e:	2b03      	cmp	r3, #3
 8008c50:	d903      	bls.n	8008c5a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	220d      	movs	r2, #13
 8008c56:	701a      	strb	r2, [r3, #0]
      break;
 8008c58:	e0b8      	b.n	8008dcc <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	795b      	ldrb	r3, [r3, #5]
 8008c5e:	4619      	mov	r1, r3
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f000 feeb 	bl	8009a3c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	791b      	ldrb	r3, [r3, #4]
 8008c6a:	4619      	mov	r1, r3
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f000 fee5 	bl	8009a3c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2200      	movs	r2, #0
 8008c76:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	701a      	strb	r2, [r3, #0]
      break;
 8008c7e:	e0a5      	b.n	8008dcc <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8008c86:	4619      	mov	r1, r3
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f000 f965 	bl	8008f58 <USBH_Get_CfgDesc>
 8008c8e:	4603      	mov	r3, r0
 8008c90:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008c92:	7bbb      	ldrb	r3, [r7, #14]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d103      	bne.n	8008ca0 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2205      	movs	r2, #5
 8008c9c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008c9e:	e097      	b.n	8008dd0 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008ca0:	7bbb      	ldrb	r3, [r7, #14]
 8008ca2:	2b03      	cmp	r3, #3
 8008ca4:	f040 8094 	bne.w	8008dd0 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008cae:	3301      	adds	r3, #1
 8008cb0:	b2da      	uxtb	r2, r3
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008cbe:	2b03      	cmp	r3, #3
 8008cc0:	d903      	bls.n	8008cca <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	220d      	movs	r2, #13
 8008cc6:	701a      	strb	r2, [r3, #0]
      break;
 8008cc8:	e082      	b.n	8008dd0 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	795b      	ldrb	r3, [r3, #5]
 8008cce:	4619      	mov	r1, r3
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f000 feb3 	bl	8009a3c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	791b      	ldrb	r3, [r3, #4]
 8008cda:	4619      	mov	r1, r3
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f000 fead 	bl	8009a3c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2200      	movs	r2, #0
 8008cec:	701a      	strb	r2, [r3, #0]
      break;
 8008cee:	e06f      	b.n	8008dd0 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d019      	beq.n	8008d2e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008d06:	23ff      	movs	r3, #255	; 0xff
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f000 f949 	bl	8008fa0 <USBH_Get_StringDesc>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008d12:	7bbb      	ldrb	r3, [r7, #14]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d103      	bne.n	8008d20 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2206      	movs	r2, #6
 8008d1c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008d1e:	e059      	b.n	8008dd4 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008d20:	7bbb      	ldrb	r3, [r7, #14]
 8008d22:	2b03      	cmp	r3, #3
 8008d24:	d156      	bne.n	8008dd4 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2206      	movs	r2, #6
 8008d2a:	705a      	strb	r2, [r3, #1]
      break;
 8008d2c:	e052      	b.n	8008dd4 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2206      	movs	r2, #6
 8008d32:	705a      	strb	r2, [r3, #1]
      break;
 8008d34:	e04e      	b.n	8008dd4 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d019      	beq.n	8008d74 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008d4c:	23ff      	movs	r3, #255	; 0xff
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f000 f926 	bl	8008fa0 <USBH_Get_StringDesc>
 8008d54:	4603      	mov	r3, r0
 8008d56:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008d58:	7bbb      	ldrb	r3, [r7, #14]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d103      	bne.n	8008d66 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2207      	movs	r2, #7
 8008d62:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008d64:	e038      	b.n	8008dd8 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008d66:	7bbb      	ldrb	r3, [r7, #14]
 8008d68:	2b03      	cmp	r3, #3
 8008d6a:	d135      	bne.n	8008dd8 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2207      	movs	r2, #7
 8008d70:	705a      	strb	r2, [r3, #1]
      break;
 8008d72:	e031      	b.n	8008dd8 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2207      	movs	r2, #7
 8008d78:	705a      	strb	r2, [r3, #1]
      break;
 8008d7a:	e02d      	b.n	8008dd8 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d017      	beq.n	8008db6 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008d92:	23ff      	movs	r3, #255	; 0xff
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f000 f903 	bl	8008fa0 <USBH_Get_StringDesc>
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008d9e:	7bbb      	ldrb	r3, [r7, #14]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d102      	bne.n	8008daa <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008da4:	2300      	movs	r3, #0
 8008da6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008da8:	e018      	b.n	8008ddc <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008daa:	7bbb      	ldrb	r3, [r7, #14]
 8008dac:	2b03      	cmp	r3, #3
 8008dae:	d115      	bne.n	8008ddc <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8008db0:	2300      	movs	r3, #0
 8008db2:	73fb      	strb	r3, [r7, #15]
      break;
 8008db4:	e012      	b.n	8008ddc <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8008db6:	2300      	movs	r3, #0
 8008db8:	73fb      	strb	r3, [r7, #15]
      break;
 8008dba:	e00f      	b.n	8008ddc <USBH_HandleEnum+0x3bc>

    default:
      break;
 8008dbc:	bf00      	nop
 8008dbe:	e00e      	b.n	8008dde <USBH_HandleEnum+0x3be>
      break;
 8008dc0:	bf00      	nop
 8008dc2:	e00c      	b.n	8008dde <USBH_HandleEnum+0x3be>
      break;
 8008dc4:	bf00      	nop
 8008dc6:	e00a      	b.n	8008dde <USBH_HandleEnum+0x3be>
      break;
 8008dc8:	bf00      	nop
 8008dca:	e008      	b.n	8008dde <USBH_HandleEnum+0x3be>
      break;
 8008dcc:	bf00      	nop
 8008dce:	e006      	b.n	8008dde <USBH_HandleEnum+0x3be>
      break;
 8008dd0:	bf00      	nop
 8008dd2:	e004      	b.n	8008dde <USBH_HandleEnum+0x3be>
      break;
 8008dd4:	bf00      	nop
 8008dd6:	e002      	b.n	8008dde <USBH_HandleEnum+0x3be>
      break;
 8008dd8:	bf00      	nop
 8008dda:	e000      	b.n	8008dde <USBH_HandleEnum+0x3be>
      break;
 8008ddc:	bf00      	nop
  }
  return Status;
 8008dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	3710      	adds	r7, #16
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}

08008de8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008de8:	b480      	push	{r7}
 8008dea:	b083      	sub	sp, #12
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
 8008df0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	683a      	ldr	r2, [r7, #0]
 8008df6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8008dfa:	bf00      	nop
 8008dfc:	370c      	adds	r7, #12
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e04:	4770      	bx	lr

08008e06 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008e06:	b580      	push	{r7, lr}
 8008e08:	b082      	sub	sp, #8
 8008e0a:	af00      	add	r7, sp, #0
 8008e0c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008e14:	1c5a      	adds	r2, r3, #1
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f000 f804 	bl	8008e2a <USBH_HandleSof>
}
 8008e22:	bf00      	nop
 8008e24:	3708      	adds	r7, #8
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd80      	pop	{r7, pc}

08008e2a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008e2a:	b580      	push	{r7, lr}
 8008e2c:	b082      	sub	sp, #8
 8008e2e:	af00      	add	r7, sp, #0
 8008e30:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	781b      	ldrb	r3, [r3, #0]
 8008e36:	b2db      	uxtb	r3, r3
 8008e38:	2b0b      	cmp	r3, #11
 8008e3a:	d10a      	bne.n	8008e52 <USBH_HandleSof+0x28>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d005      	beq.n	8008e52 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008e4c:	699b      	ldr	r3, [r3, #24]
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	4798      	blx	r3
  }
}
 8008e52:	bf00      	nop
 8008e54:	3708      	adds	r7, #8
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}

08008e5a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008e5a:	b480      	push	{r7}
 8008e5c:	b083      	sub	sp, #12
 8008e5e:	af00      	add	r7, sp, #0
 8008e60:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2201      	movs	r2, #1
 8008e66:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8008e6a:	bf00      	nop
}
 8008e6c:	370c      	adds	r7, #12
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e74:	4770      	bx	lr

08008e76 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008e76:	b480      	push	{r7}
 8008e78:	b083      	sub	sp, #12
 8008e7a:	af00      	add	r7, sp, #0
 8008e7c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2200      	movs	r2, #0
 8008e82:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8008e86:	bf00      	nop
}
 8008e88:	370c      	adds	r7, #12
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e90:	4770      	bx	lr

08008e92 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008e92:	b480      	push	{r7}
 8008e94:	b083      	sub	sp, #12
 8008e96:	af00      	add	r7, sp, #0
 8008e98:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2201      	movs	r2, #1
 8008e9e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2200      	movs	r2, #0
 8008eae:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8008eb2:	2300      	movs	r3, #0
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	370c      	adds	r7, #12
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebe:	4770      	bx	lr

08008ec0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b082      	sub	sp, #8
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2201      	movs	r2, #1
 8008ecc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2200      	movs	r2, #0
 8008edc:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	f000 ff5c 	bl	8009d9e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	791b      	ldrb	r3, [r3, #4]
 8008eea:	4619      	mov	r1, r3
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	f000 fda5 	bl	8009a3c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	795b      	ldrb	r3, [r3, #5]
 8008ef6:	4619      	mov	r1, r3
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f000 fd9f 	bl	8009a3c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8008efe:	2300      	movs	r3, #0
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	3708      	adds	r7, #8
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}

08008f08 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b086      	sub	sp, #24
 8008f0c:	af02      	add	r7, sp, #8
 8008f0e:	6078      	str	r0, [r7, #4]
 8008f10:	460b      	mov	r3, r1
 8008f12:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8008f1a:	78fb      	ldrb	r3, [r7, #3]
 8008f1c:	b29b      	uxth	r3, r3
 8008f1e:	9300      	str	r3, [sp, #0]
 8008f20:	4613      	mov	r3, r2
 8008f22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008f26:	2100      	movs	r1, #0
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	f000 f864 	bl	8008ff6 <USBH_GetDescriptor>
 8008f2e:	4603      	mov	r3, r0
 8008f30:	73fb      	strb	r3, [r7, #15]
 8008f32:	7bfb      	ldrb	r3, [r7, #15]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d10a      	bne.n	8008f4e <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f203 3026 	addw	r0, r3, #806	; 0x326
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008f44:	78fa      	ldrb	r2, [r7, #3]
 8008f46:	b292      	uxth	r2, r2
 8008f48:	4619      	mov	r1, r3
 8008f4a:	f000 f918 	bl	800917e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8008f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	3710      	adds	r7, #16
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}

08008f58 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b086      	sub	sp, #24
 8008f5c:	af02      	add	r7, sp, #8
 8008f5e:	6078      	str	r0, [r7, #4]
 8008f60:	460b      	mov	r3, r1
 8008f62:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	331c      	adds	r3, #28
 8008f68:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008f6a:	887b      	ldrh	r3, [r7, #2]
 8008f6c:	9300      	str	r3, [sp, #0]
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f74:	2100      	movs	r1, #0
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f000 f83d 	bl	8008ff6 <USBH_GetDescriptor>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	72fb      	strb	r3, [r7, #11]
 8008f80:	7afb      	ldrb	r3, [r7, #11]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d107      	bne.n	8008f96 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008f8c:	887a      	ldrh	r2, [r7, #2]
 8008f8e:	68f9      	ldr	r1, [r7, #12]
 8008f90:	4618      	mov	r0, r3
 8008f92:	f000 f964 	bl	800925e <USBH_ParseCfgDesc>
  }

  return status;
 8008f96:	7afb      	ldrb	r3, [r7, #11]
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	3710      	adds	r7, #16
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd80      	pop	{r7, pc}

08008fa0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b088      	sub	sp, #32
 8008fa4:	af02      	add	r7, sp, #8
 8008fa6:	60f8      	str	r0, [r7, #12]
 8008fa8:	607a      	str	r2, [r7, #4]
 8008faa:	461a      	mov	r2, r3
 8008fac:	460b      	mov	r3, r1
 8008fae:	72fb      	strb	r3, [r7, #11]
 8008fb0:	4613      	mov	r3, r2
 8008fb2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8008fb4:	7afb      	ldrb	r3, [r7, #11]
 8008fb6:	b29b      	uxth	r3, r3
 8008fb8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008fbc:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8008fc4:	893b      	ldrh	r3, [r7, #8]
 8008fc6:	9300      	str	r3, [sp, #0]
 8008fc8:	460b      	mov	r3, r1
 8008fca:	2100      	movs	r1, #0
 8008fcc:	68f8      	ldr	r0, [r7, #12]
 8008fce:	f000 f812 	bl	8008ff6 <USBH_GetDescriptor>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	75fb      	strb	r3, [r7, #23]
 8008fd6:	7dfb      	ldrb	r3, [r7, #23]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d107      	bne.n	8008fec <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008fe2:	893a      	ldrh	r2, [r7, #8]
 8008fe4:	6879      	ldr	r1, [r7, #4]
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f000 fa37 	bl	800945a <USBH_ParseStringDesc>
  }

  return status;
 8008fec:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fee:	4618      	mov	r0, r3
 8008ff0:	3718      	adds	r7, #24
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}

08008ff6 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8008ff6:	b580      	push	{r7, lr}
 8008ff8:	b084      	sub	sp, #16
 8008ffa:	af00      	add	r7, sp, #0
 8008ffc:	60f8      	str	r0, [r7, #12]
 8008ffe:	607b      	str	r3, [r7, #4]
 8009000:	460b      	mov	r3, r1
 8009002:	72fb      	strb	r3, [r7, #11]
 8009004:	4613      	mov	r3, r2
 8009006:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	789b      	ldrb	r3, [r3, #2]
 800900c:	2b01      	cmp	r3, #1
 800900e:	d11c      	bne.n	800904a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009010:	7afb      	ldrb	r3, [r7, #11]
 8009012:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009016:	b2da      	uxtb	r2, r3
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	2206      	movs	r2, #6
 8009020:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	893a      	ldrh	r2, [r7, #8]
 8009026:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009028:	893b      	ldrh	r3, [r7, #8]
 800902a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800902e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009032:	d104      	bne.n	800903e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	f240 4209 	movw	r2, #1033	; 0x409
 800903a:	829a      	strh	r2, [r3, #20]
 800903c:	e002      	b.n	8009044 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	2200      	movs	r2, #0
 8009042:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	8b3a      	ldrh	r2, [r7, #24]
 8009048:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800904a:	8b3b      	ldrh	r3, [r7, #24]
 800904c:	461a      	mov	r2, r3
 800904e:	6879      	ldr	r1, [r7, #4]
 8009050:	68f8      	ldr	r0, [r7, #12]
 8009052:	f000 fa50 	bl	80094f6 <USBH_CtlReq>
 8009056:	4603      	mov	r3, r0
}
 8009058:	4618      	mov	r0, r3
 800905a:	3710      	adds	r7, #16
 800905c:	46bd      	mov	sp, r7
 800905e:	bd80      	pop	{r7, pc}

08009060 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b082      	sub	sp, #8
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
 8009068:	460b      	mov	r3, r1
 800906a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	789b      	ldrb	r3, [r3, #2]
 8009070:	2b01      	cmp	r3, #1
 8009072:	d10f      	bne.n	8009094 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2200      	movs	r2, #0
 8009078:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2205      	movs	r2, #5
 800907e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009080:	78fb      	ldrb	r3, [r7, #3]
 8009082:	b29a      	uxth	r2, r3
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2200      	movs	r2, #0
 800908c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2200      	movs	r2, #0
 8009092:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009094:	2200      	movs	r2, #0
 8009096:	2100      	movs	r1, #0
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f000 fa2c 	bl	80094f6 <USBH_CtlReq>
 800909e:	4603      	mov	r3, r0
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	3708      	adds	r7, #8
 80090a4:	46bd      	mov	sp, r7
 80090a6:	bd80      	pop	{r7, pc}

080090a8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b082      	sub	sp, #8
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
 80090b0:	460b      	mov	r3, r1
 80090b2:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	789b      	ldrb	r3, [r3, #2]
 80090b8:	2b01      	cmp	r3, #1
 80090ba:	d10e      	bne.n	80090da <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2200      	movs	r2, #0
 80090c0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2209      	movs	r2, #9
 80090c6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	887a      	ldrh	r2, [r7, #2]
 80090cc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2200      	movs	r2, #0
 80090d2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2200      	movs	r2, #0
 80090d8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80090da:	2200      	movs	r2, #0
 80090dc:	2100      	movs	r1, #0
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f000 fa09 	bl	80094f6 <USBH_CtlReq>
 80090e4:	4603      	mov	r3, r0
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	3708      	adds	r7, #8
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}

080090ee <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80090ee:	b580      	push	{r7, lr}
 80090f0:	b082      	sub	sp, #8
 80090f2:	af00      	add	r7, sp, #0
 80090f4:	6078      	str	r0, [r7, #4]
 80090f6:	460b      	mov	r3, r1
 80090f8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	789b      	ldrb	r3, [r3, #2]
 80090fe:	2b01      	cmp	r3, #1
 8009100:	d10f      	bne.n	8009122 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2200      	movs	r2, #0
 8009106:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2203      	movs	r2, #3
 800910c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800910e:	78fb      	ldrb	r3, [r7, #3]
 8009110:	b29a      	uxth	r2, r3
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2200      	movs	r2, #0
 800911a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2200      	movs	r2, #0
 8009120:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009122:	2200      	movs	r2, #0
 8009124:	2100      	movs	r1, #0
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f000 f9e5 	bl	80094f6 <USBH_CtlReq>
 800912c:	4603      	mov	r3, r0
}
 800912e:	4618      	mov	r0, r3
 8009130:	3708      	adds	r7, #8
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}

08009136 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009136:	b580      	push	{r7, lr}
 8009138:	b082      	sub	sp, #8
 800913a:	af00      	add	r7, sp, #0
 800913c:	6078      	str	r0, [r7, #4]
 800913e:	460b      	mov	r3, r1
 8009140:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	789b      	ldrb	r3, [r3, #2]
 8009146:	2b01      	cmp	r3, #1
 8009148:	d10f      	bne.n	800916a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2202      	movs	r2, #2
 800914e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2201      	movs	r2, #1
 8009154:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2200      	movs	r2, #0
 800915a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800915c:	78fb      	ldrb	r3, [r7, #3]
 800915e:	b29a      	uxth	r2, r3
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2200      	movs	r2, #0
 8009168:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800916a:	2200      	movs	r2, #0
 800916c:	2100      	movs	r1, #0
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f000 f9c1 	bl	80094f6 <USBH_CtlReq>
 8009174:	4603      	mov	r3, r0
}
 8009176:	4618      	mov	r0, r3
 8009178:	3708      	adds	r7, #8
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}

0800917e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800917e:	b480      	push	{r7}
 8009180:	b085      	sub	sp, #20
 8009182:	af00      	add	r7, sp, #0
 8009184:	60f8      	str	r0, [r7, #12]
 8009186:	60b9      	str	r1, [r7, #8]
 8009188:	4613      	mov	r3, r2
 800918a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	781a      	ldrb	r2, [r3, #0]
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	785a      	ldrb	r2, [r3, #1]
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	3302      	adds	r3, #2
 80091a0:	781b      	ldrb	r3, [r3, #0]
 80091a2:	b29a      	uxth	r2, r3
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	3303      	adds	r3, #3
 80091a8:	781b      	ldrb	r3, [r3, #0]
 80091aa:	b29b      	uxth	r3, r3
 80091ac:	021b      	lsls	r3, r3, #8
 80091ae:	b29b      	uxth	r3, r3
 80091b0:	4313      	orrs	r3, r2
 80091b2:	b29a      	uxth	r2, r3
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	791a      	ldrb	r2, [r3, #4]
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	795a      	ldrb	r2, [r3, #5]
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	799a      	ldrb	r2, [r3, #6]
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	79da      	ldrb	r2, [r3, #7]
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 80091d8:	88fb      	ldrh	r3, [r7, #6]
 80091da:	2b08      	cmp	r3, #8
 80091dc:	d939      	bls.n	8009252 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80091de:	68bb      	ldr	r3, [r7, #8]
 80091e0:	3308      	adds	r3, #8
 80091e2:	781b      	ldrb	r3, [r3, #0]
 80091e4:	b29a      	uxth	r2, r3
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	3309      	adds	r3, #9
 80091ea:	781b      	ldrb	r3, [r3, #0]
 80091ec:	b29b      	uxth	r3, r3
 80091ee:	021b      	lsls	r3, r3, #8
 80091f0:	b29b      	uxth	r3, r3
 80091f2:	4313      	orrs	r3, r2
 80091f4:	b29a      	uxth	r2, r3
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80091fa:	68bb      	ldr	r3, [r7, #8]
 80091fc:	330a      	adds	r3, #10
 80091fe:	781b      	ldrb	r3, [r3, #0]
 8009200:	b29a      	uxth	r2, r3
 8009202:	68bb      	ldr	r3, [r7, #8]
 8009204:	330b      	adds	r3, #11
 8009206:	781b      	ldrb	r3, [r3, #0]
 8009208:	b29b      	uxth	r3, r3
 800920a:	021b      	lsls	r3, r3, #8
 800920c:	b29b      	uxth	r3, r3
 800920e:	4313      	orrs	r3, r2
 8009210:	b29a      	uxth	r2, r3
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	330c      	adds	r3, #12
 800921a:	781b      	ldrb	r3, [r3, #0]
 800921c:	b29a      	uxth	r2, r3
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	330d      	adds	r3, #13
 8009222:	781b      	ldrb	r3, [r3, #0]
 8009224:	b29b      	uxth	r3, r3
 8009226:	021b      	lsls	r3, r3, #8
 8009228:	b29b      	uxth	r3, r3
 800922a:	4313      	orrs	r3, r2
 800922c:	b29a      	uxth	r2, r3
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	7b9a      	ldrb	r2, [r3, #14]
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800923a:	68bb      	ldr	r3, [r7, #8]
 800923c:	7bda      	ldrb	r2, [r3, #15]
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	7c1a      	ldrb	r2, [r3, #16]
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	7c5a      	ldrb	r2, [r3, #17]
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	745a      	strb	r2, [r3, #17]
  }
}
 8009252:	bf00      	nop
 8009254:	3714      	adds	r7, #20
 8009256:	46bd      	mov	sp, r7
 8009258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925c:	4770      	bx	lr

0800925e <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800925e:	b580      	push	{r7, lr}
 8009260:	b08a      	sub	sp, #40	; 0x28
 8009262:	af00      	add	r7, sp, #0
 8009264:	60f8      	str	r0, [r7, #12]
 8009266:	60b9      	str	r1, [r7, #8]
 8009268:	4613      	mov	r3, r2
 800926a:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009270:	2300      	movs	r3, #0
 8009272:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8009276:	2300      	movs	r3, #0
 8009278:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8009280:	68bb      	ldr	r3, [r7, #8]
 8009282:	781a      	ldrb	r2, [r3, #0]
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	785a      	ldrb	r2, [r3, #1]
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	3302      	adds	r3, #2
 8009294:	781b      	ldrb	r3, [r3, #0]
 8009296:	b29a      	uxth	r2, r3
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	3303      	adds	r3, #3
 800929c:	781b      	ldrb	r3, [r3, #0]
 800929e:	b29b      	uxth	r3, r3
 80092a0:	021b      	lsls	r3, r3, #8
 80092a2:	b29b      	uxth	r3, r3
 80092a4:	4313      	orrs	r3, r2
 80092a6:	b29a      	uxth	r2, r3
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	791a      	ldrb	r2, [r3, #4]
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	795a      	ldrb	r2, [r3, #5]
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	799a      	ldrb	r2, [r3, #6]
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	79da      	ldrb	r2, [r3, #7]
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	7a1a      	ldrb	r2, [r3, #8]
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80092d4:	88fb      	ldrh	r3, [r7, #6]
 80092d6:	2b09      	cmp	r3, #9
 80092d8:	d95f      	bls.n	800939a <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 80092da:	2309      	movs	r3, #9
 80092dc:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 80092de:	2300      	movs	r3, #0
 80092e0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80092e2:	e051      	b.n	8009388 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80092e4:	f107 0316 	add.w	r3, r7, #22
 80092e8:	4619      	mov	r1, r3
 80092ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80092ec:	f000 f8e8 	bl	80094c0 <USBH_GetNextDesc>
 80092f0:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 80092f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092f4:	785b      	ldrb	r3, [r3, #1]
 80092f6:	2b04      	cmp	r3, #4
 80092f8:	d146      	bne.n	8009388 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 80092fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80092fe:	221a      	movs	r2, #26
 8009300:	fb02 f303 	mul.w	r3, r2, r3
 8009304:	3308      	adds	r3, #8
 8009306:	68fa      	ldr	r2, [r7, #12]
 8009308:	4413      	add	r3, r2
 800930a:	3302      	adds	r3, #2
 800930c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800930e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009310:	69f8      	ldr	r0, [r7, #28]
 8009312:	f000 f846 	bl	80093a2 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009316:	2300      	movs	r3, #0
 8009318:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800931c:	2300      	movs	r3, #0
 800931e:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009320:	e022      	b.n	8009368 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009322:	f107 0316 	add.w	r3, r7, #22
 8009326:	4619      	mov	r1, r3
 8009328:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800932a:	f000 f8c9 	bl	80094c0 <USBH_GetNextDesc>
 800932e:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8009330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009332:	785b      	ldrb	r3, [r3, #1]
 8009334:	2b05      	cmp	r3, #5
 8009336:	d117      	bne.n	8009368 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009338:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800933c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8009340:	3201      	adds	r2, #1
 8009342:	00d2      	lsls	r2, r2, #3
 8009344:	211a      	movs	r1, #26
 8009346:	fb01 f303 	mul.w	r3, r1, r3
 800934a:	4413      	add	r3, r2
 800934c:	3308      	adds	r3, #8
 800934e:	68fa      	ldr	r2, [r7, #12]
 8009350:	4413      	add	r3, r2
 8009352:	3304      	adds	r3, #4
 8009354:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8009356:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009358:	69b8      	ldr	r0, [r7, #24]
 800935a:	f000 f851 	bl	8009400 <USBH_ParseEPDesc>
            ep_ix++;
 800935e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009362:	3301      	adds	r3, #1
 8009364:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009368:	69fb      	ldr	r3, [r7, #28]
 800936a:	791b      	ldrb	r3, [r3, #4]
 800936c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8009370:	429a      	cmp	r2, r3
 8009372:	d204      	bcs.n	800937e <USBH_ParseCfgDesc+0x120>
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	885a      	ldrh	r2, [r3, #2]
 8009378:	8afb      	ldrh	r3, [r7, #22]
 800937a:	429a      	cmp	r2, r3
 800937c:	d8d1      	bhi.n	8009322 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800937e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009382:	3301      	adds	r3, #1
 8009384:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009388:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800938c:	2b01      	cmp	r3, #1
 800938e:	d804      	bhi.n	800939a <USBH_ParseCfgDesc+0x13c>
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	885a      	ldrh	r2, [r3, #2]
 8009394:	8afb      	ldrh	r3, [r7, #22]
 8009396:	429a      	cmp	r2, r3
 8009398:	d8a4      	bhi.n	80092e4 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800939a:	bf00      	nop
 800939c:	3728      	adds	r7, #40	; 0x28
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}

080093a2 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80093a2:	b480      	push	{r7}
 80093a4:	b083      	sub	sp, #12
 80093a6:	af00      	add	r7, sp, #0
 80093a8:	6078      	str	r0, [r7, #4]
 80093aa:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	781a      	ldrb	r2, [r3, #0]
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	785a      	ldrb	r2, [r3, #1]
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	789a      	ldrb	r2, [r3, #2]
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80093c4:	683b      	ldr	r3, [r7, #0]
 80093c6:	78da      	ldrb	r2, [r3, #3]
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	791a      	ldrb	r2, [r3, #4]
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	795a      	ldrb	r2, [r3, #5]
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	799a      	ldrb	r2, [r3, #6]
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	79da      	ldrb	r2, [r3, #7]
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	7a1a      	ldrb	r2, [r3, #8]
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	721a      	strb	r2, [r3, #8]
}
 80093f4:	bf00      	nop
 80093f6:	370c      	adds	r7, #12
 80093f8:	46bd      	mov	sp, r7
 80093fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fe:	4770      	bx	lr

08009400 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8009400:	b480      	push	{r7}
 8009402:	b083      	sub	sp, #12
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
 8009408:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	781a      	ldrb	r2, [r3, #0]
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	785a      	ldrb	r2, [r3, #1]
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	789a      	ldrb	r2, [r3, #2]
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	78da      	ldrb	r2, [r3, #3]
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	3304      	adds	r3, #4
 800942e:	781b      	ldrb	r3, [r3, #0]
 8009430:	b29a      	uxth	r2, r3
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	3305      	adds	r3, #5
 8009436:	781b      	ldrb	r3, [r3, #0]
 8009438:	b29b      	uxth	r3, r3
 800943a:	021b      	lsls	r3, r3, #8
 800943c:	b29b      	uxth	r3, r3
 800943e:	4313      	orrs	r3, r2
 8009440:	b29a      	uxth	r2, r3
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	799a      	ldrb	r2, [r3, #6]
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	719a      	strb	r2, [r3, #6]
}
 800944e:	bf00      	nop
 8009450:	370c      	adds	r7, #12
 8009452:	46bd      	mov	sp, r7
 8009454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009458:	4770      	bx	lr

0800945a <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800945a:	b480      	push	{r7}
 800945c:	b087      	sub	sp, #28
 800945e:	af00      	add	r7, sp, #0
 8009460:	60f8      	str	r0, [r7, #12]
 8009462:	60b9      	str	r1, [r7, #8]
 8009464:	4613      	mov	r3, r2
 8009466:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	3301      	adds	r3, #1
 800946c:	781b      	ldrb	r3, [r3, #0]
 800946e:	2b03      	cmp	r3, #3
 8009470:	d120      	bne.n	80094b4 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	781b      	ldrb	r3, [r3, #0]
 8009476:	1e9a      	subs	r2, r3, #2
 8009478:	88fb      	ldrh	r3, [r7, #6]
 800947a:	4293      	cmp	r3, r2
 800947c:	bf28      	it	cs
 800947e:	4613      	movcs	r3, r2
 8009480:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	3302      	adds	r3, #2
 8009486:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009488:	2300      	movs	r3, #0
 800948a:	82fb      	strh	r3, [r7, #22]
 800948c:	e00b      	b.n	80094a6 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800948e:	8afb      	ldrh	r3, [r7, #22]
 8009490:	68fa      	ldr	r2, [r7, #12]
 8009492:	4413      	add	r3, r2
 8009494:	781a      	ldrb	r2, [r3, #0]
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	701a      	strb	r2, [r3, #0]
      pdest++;
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	3301      	adds	r3, #1
 800949e:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80094a0:	8afb      	ldrh	r3, [r7, #22]
 80094a2:	3302      	adds	r3, #2
 80094a4:	82fb      	strh	r3, [r7, #22]
 80094a6:	8afa      	ldrh	r2, [r7, #22]
 80094a8:	8abb      	ldrh	r3, [r7, #20]
 80094aa:	429a      	cmp	r2, r3
 80094ac:	d3ef      	bcc.n	800948e <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	2200      	movs	r2, #0
 80094b2:	701a      	strb	r2, [r3, #0]
  }
}
 80094b4:	bf00      	nop
 80094b6:	371c      	adds	r7, #28
 80094b8:	46bd      	mov	sp, r7
 80094ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094be:	4770      	bx	lr

080094c0 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80094c0:	b480      	push	{r7}
 80094c2:	b085      	sub	sp, #20
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
 80094c8:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	881a      	ldrh	r2, [r3, #0]
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	781b      	ldrb	r3, [r3, #0]
 80094d2:	b29b      	uxth	r3, r3
 80094d4:	4413      	add	r3, r2
 80094d6:	b29a      	uxth	r2, r3
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	781b      	ldrb	r3, [r3, #0]
 80094e0:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	4413      	add	r3, r2
 80094e6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80094e8:	68fb      	ldr	r3, [r7, #12]
}
 80094ea:	4618      	mov	r0, r3
 80094ec:	3714      	adds	r7, #20
 80094ee:	46bd      	mov	sp, r7
 80094f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f4:	4770      	bx	lr

080094f6 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80094f6:	b580      	push	{r7, lr}
 80094f8:	b086      	sub	sp, #24
 80094fa:	af00      	add	r7, sp, #0
 80094fc:	60f8      	str	r0, [r7, #12]
 80094fe:	60b9      	str	r1, [r7, #8]
 8009500:	4613      	mov	r3, r2
 8009502:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009504:	2301      	movs	r3, #1
 8009506:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	789b      	ldrb	r3, [r3, #2]
 800950c:	2b01      	cmp	r3, #1
 800950e:	d002      	beq.n	8009516 <USBH_CtlReq+0x20>
 8009510:	2b02      	cmp	r3, #2
 8009512:	d00f      	beq.n	8009534 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8009514:	e027      	b.n	8009566 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	68ba      	ldr	r2, [r7, #8]
 800951a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	88fa      	ldrh	r2, [r7, #6]
 8009520:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	2201      	movs	r2, #1
 8009526:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	2202      	movs	r2, #2
 800952c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800952e:	2301      	movs	r3, #1
 8009530:	75fb      	strb	r3, [r7, #23]
      break;
 8009532:	e018      	b.n	8009566 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8009534:	68f8      	ldr	r0, [r7, #12]
 8009536:	f000 f81b 	bl	8009570 <USBH_HandleControl>
 800953a:	4603      	mov	r3, r0
 800953c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800953e:	7dfb      	ldrb	r3, [r7, #23]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d002      	beq.n	800954a <USBH_CtlReq+0x54>
 8009544:	7dfb      	ldrb	r3, [r7, #23]
 8009546:	2b03      	cmp	r3, #3
 8009548:	d106      	bne.n	8009558 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	2201      	movs	r2, #1
 800954e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	2200      	movs	r2, #0
 8009554:	761a      	strb	r2, [r3, #24]
      break;
 8009556:	e005      	b.n	8009564 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8009558:	7dfb      	ldrb	r3, [r7, #23]
 800955a:	2b02      	cmp	r3, #2
 800955c:	d102      	bne.n	8009564 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	2201      	movs	r2, #1
 8009562:	709a      	strb	r2, [r3, #2]
      break;
 8009564:	bf00      	nop
  }
  return status;
 8009566:	7dfb      	ldrb	r3, [r7, #23]
}
 8009568:	4618      	mov	r0, r3
 800956a:	3718      	adds	r7, #24
 800956c:	46bd      	mov	sp, r7
 800956e:	bd80      	pop	{r7, pc}

08009570 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b086      	sub	sp, #24
 8009574:	af02      	add	r7, sp, #8
 8009576:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009578:	2301      	movs	r3, #1
 800957a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800957c:	2300      	movs	r3, #0
 800957e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	7e1b      	ldrb	r3, [r3, #24]
 8009584:	3b01      	subs	r3, #1
 8009586:	2b0a      	cmp	r3, #10
 8009588:	f200 8158 	bhi.w	800983c <USBH_HandleControl+0x2cc>
 800958c:	a201      	add	r2, pc, #4	; (adr r2, 8009594 <USBH_HandleControl+0x24>)
 800958e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009592:	bf00      	nop
 8009594:	080095c1 	.word	0x080095c1
 8009598:	080095db 	.word	0x080095db
 800959c:	08009645 	.word	0x08009645
 80095a0:	0800966b 	.word	0x0800966b
 80095a4:	080096a3 	.word	0x080096a3
 80095a8:	080096cf 	.word	0x080096cf
 80095ac:	08009721 	.word	0x08009721
 80095b0:	08009743 	.word	0x08009743
 80095b4:	0800977f 	.word	0x0800977f
 80095b8:	080097a7 	.word	0x080097a7
 80095bc:	080097e5 	.word	0x080097e5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f103 0110 	add.w	r1, r3, #16
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	795b      	ldrb	r3, [r3, #5]
 80095ca:	461a      	mov	r2, r3
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f000 f945 	bl	800985c <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2202      	movs	r2, #2
 80095d6:	761a      	strb	r2, [r3, #24]
      break;
 80095d8:	e13b      	b.n	8009852 <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	795b      	ldrb	r3, [r3, #5]
 80095de:	4619      	mov	r1, r3
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f000 fcc9 	bl	8009f78 <USBH_LL_GetURBState>
 80095e6:	4603      	mov	r3, r0
 80095e8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80095ea:	7bbb      	ldrb	r3, [r7, #14]
 80095ec:	2b01      	cmp	r3, #1
 80095ee:	d11e      	bne.n	800962e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	7c1b      	ldrb	r3, [r3, #16]
 80095f4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80095f8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	8adb      	ldrh	r3, [r3, #22]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d00a      	beq.n	8009618 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009602:	7b7b      	ldrb	r3, [r7, #13]
 8009604:	2b80      	cmp	r3, #128	; 0x80
 8009606:	d103      	bne.n	8009610 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2203      	movs	r2, #3
 800960c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800960e:	e117      	b.n	8009840 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2205      	movs	r2, #5
 8009614:	761a      	strb	r2, [r3, #24]
      break;
 8009616:	e113      	b.n	8009840 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 8009618:	7b7b      	ldrb	r3, [r7, #13]
 800961a:	2b80      	cmp	r3, #128	; 0x80
 800961c:	d103      	bne.n	8009626 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2209      	movs	r2, #9
 8009622:	761a      	strb	r2, [r3, #24]
      break;
 8009624:	e10c      	b.n	8009840 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2207      	movs	r2, #7
 800962a:	761a      	strb	r2, [r3, #24]
      break;
 800962c:	e108      	b.n	8009840 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800962e:	7bbb      	ldrb	r3, [r7, #14]
 8009630:	2b04      	cmp	r3, #4
 8009632:	d003      	beq.n	800963c <USBH_HandleControl+0xcc>
 8009634:	7bbb      	ldrb	r3, [r7, #14]
 8009636:	2b02      	cmp	r3, #2
 8009638:	f040 8102 	bne.w	8009840 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	220b      	movs	r2, #11
 8009640:	761a      	strb	r2, [r3, #24]
      break;
 8009642:	e0fd      	b.n	8009840 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800964a:	b29a      	uxth	r2, r3
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	6899      	ldr	r1, [r3, #8]
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	899a      	ldrh	r2, [r3, #12]
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	791b      	ldrb	r3, [r3, #4]
 800965c:	6878      	ldr	r0, [r7, #4]
 800965e:	f000 f93c 	bl	80098da <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2204      	movs	r2, #4
 8009666:	761a      	strb	r2, [r3, #24]
      break;
 8009668:	e0f3      	b.n	8009852 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	791b      	ldrb	r3, [r3, #4]
 800966e:	4619      	mov	r1, r3
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f000 fc81 	bl	8009f78 <USBH_LL_GetURBState>
 8009676:	4603      	mov	r3, r0
 8009678:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800967a:	7bbb      	ldrb	r3, [r7, #14]
 800967c:	2b01      	cmp	r3, #1
 800967e:	d102      	bne.n	8009686 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2209      	movs	r2, #9
 8009684:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8009686:	7bbb      	ldrb	r3, [r7, #14]
 8009688:	2b05      	cmp	r3, #5
 800968a:	d102      	bne.n	8009692 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800968c:	2303      	movs	r3, #3
 800968e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009690:	e0d8      	b.n	8009844 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8009692:	7bbb      	ldrb	r3, [r7, #14]
 8009694:	2b04      	cmp	r3, #4
 8009696:	f040 80d5 	bne.w	8009844 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	220b      	movs	r2, #11
 800969e:	761a      	strb	r2, [r3, #24]
      break;
 80096a0:	e0d0      	b.n	8009844 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6899      	ldr	r1, [r3, #8]
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	899a      	ldrh	r2, [r3, #12]
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	7958      	ldrb	r0, [r3, #5]
 80096ae:	2301      	movs	r3, #1
 80096b0:	9300      	str	r3, [sp, #0]
 80096b2:	4603      	mov	r3, r0
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	f000 f8eb 	bl	8009890 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80096c0:	b29a      	uxth	r2, r3
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2206      	movs	r2, #6
 80096ca:	761a      	strb	r2, [r3, #24]
      break;
 80096cc:	e0c1      	b.n	8009852 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	795b      	ldrb	r3, [r3, #5]
 80096d2:	4619      	mov	r1, r3
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	f000 fc4f 	bl	8009f78 <USBH_LL_GetURBState>
 80096da:	4603      	mov	r3, r0
 80096dc:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80096de:	7bbb      	ldrb	r3, [r7, #14]
 80096e0:	2b01      	cmp	r3, #1
 80096e2:	d103      	bne.n	80096ec <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2207      	movs	r2, #7
 80096e8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80096ea:	e0ad      	b.n	8009848 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 80096ec:	7bbb      	ldrb	r3, [r7, #14]
 80096ee:	2b05      	cmp	r3, #5
 80096f0:	d105      	bne.n	80096fe <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	220c      	movs	r2, #12
 80096f6:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80096f8:	2303      	movs	r3, #3
 80096fa:	73fb      	strb	r3, [r7, #15]
      break;
 80096fc:	e0a4      	b.n	8009848 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 80096fe:	7bbb      	ldrb	r3, [r7, #14]
 8009700:	2b02      	cmp	r3, #2
 8009702:	d103      	bne.n	800970c <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2205      	movs	r2, #5
 8009708:	761a      	strb	r2, [r3, #24]
      break;
 800970a:	e09d      	b.n	8009848 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 800970c:	7bbb      	ldrb	r3, [r7, #14]
 800970e:	2b04      	cmp	r3, #4
 8009710:	f040 809a 	bne.w	8009848 <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	220b      	movs	r2, #11
 8009718:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800971a:	2302      	movs	r3, #2
 800971c:	73fb      	strb	r3, [r7, #15]
      break;
 800971e:	e093      	b.n	8009848 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	791b      	ldrb	r3, [r3, #4]
 8009724:	2200      	movs	r2, #0
 8009726:	2100      	movs	r1, #0
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	f000 f8d6 	bl	80098da <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009734:	b29a      	uxth	r2, r3
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2208      	movs	r2, #8
 800973e:	761a      	strb	r2, [r3, #24]

      break;
 8009740:	e087      	b.n	8009852 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	791b      	ldrb	r3, [r3, #4]
 8009746:	4619      	mov	r1, r3
 8009748:	6878      	ldr	r0, [r7, #4]
 800974a:	f000 fc15 	bl	8009f78 <USBH_LL_GetURBState>
 800974e:	4603      	mov	r3, r0
 8009750:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009752:	7bbb      	ldrb	r3, [r7, #14]
 8009754:	2b01      	cmp	r3, #1
 8009756:	d105      	bne.n	8009764 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	220d      	movs	r2, #13
 800975c:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800975e:	2300      	movs	r3, #0
 8009760:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009762:	e073      	b.n	800984c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 8009764:	7bbb      	ldrb	r3, [r7, #14]
 8009766:	2b04      	cmp	r3, #4
 8009768:	d103      	bne.n	8009772 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	220b      	movs	r2, #11
 800976e:	761a      	strb	r2, [r3, #24]
      break;
 8009770:	e06c      	b.n	800984c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 8009772:	7bbb      	ldrb	r3, [r7, #14]
 8009774:	2b05      	cmp	r3, #5
 8009776:	d169      	bne.n	800984c <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 8009778:	2303      	movs	r3, #3
 800977a:	73fb      	strb	r3, [r7, #15]
      break;
 800977c:	e066      	b.n	800984c <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	795a      	ldrb	r2, [r3, #5]
 8009782:	2301      	movs	r3, #1
 8009784:	9300      	str	r3, [sp, #0]
 8009786:	4613      	mov	r3, r2
 8009788:	2200      	movs	r2, #0
 800978a:	2100      	movs	r1, #0
 800978c:	6878      	ldr	r0, [r7, #4]
 800978e:	f000 f87f 	bl	8009890 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009798:	b29a      	uxth	r2, r3
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	220a      	movs	r2, #10
 80097a2:	761a      	strb	r2, [r3, #24]
      break;
 80097a4:	e055      	b.n	8009852 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	795b      	ldrb	r3, [r3, #5]
 80097aa:	4619      	mov	r1, r3
 80097ac:	6878      	ldr	r0, [r7, #4]
 80097ae:	f000 fbe3 	bl	8009f78 <USBH_LL_GetURBState>
 80097b2:	4603      	mov	r3, r0
 80097b4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80097b6:	7bbb      	ldrb	r3, [r7, #14]
 80097b8:	2b01      	cmp	r3, #1
 80097ba:	d105      	bne.n	80097c8 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 80097bc:	2300      	movs	r3, #0
 80097be:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	220d      	movs	r2, #13
 80097c4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80097c6:	e043      	b.n	8009850 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 80097c8:	7bbb      	ldrb	r3, [r7, #14]
 80097ca:	2b02      	cmp	r3, #2
 80097cc:	d103      	bne.n	80097d6 <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	2209      	movs	r2, #9
 80097d2:	761a      	strb	r2, [r3, #24]
      break;
 80097d4:	e03c      	b.n	8009850 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 80097d6:	7bbb      	ldrb	r3, [r7, #14]
 80097d8:	2b04      	cmp	r3, #4
 80097da:	d139      	bne.n	8009850 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	220b      	movs	r2, #11
 80097e0:	761a      	strb	r2, [r3, #24]
      break;
 80097e2:	e035      	b.n	8009850 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	7e5b      	ldrb	r3, [r3, #25]
 80097e8:	3301      	adds	r3, #1
 80097ea:	b2da      	uxtb	r2, r3
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	765a      	strb	r2, [r3, #25]
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	7e5b      	ldrb	r3, [r3, #25]
 80097f4:	2b02      	cmp	r3, #2
 80097f6:	d806      	bhi.n	8009806 <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2201      	movs	r2, #1
 80097fc:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2201      	movs	r2, #1
 8009802:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009804:	e025      	b.n	8009852 <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800980c:	2106      	movs	r1, #6
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2200      	movs	r2, #0
 8009816:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	795b      	ldrb	r3, [r3, #5]
 800981c:	4619      	mov	r1, r3
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	f000 f90c 	bl	8009a3c <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	791b      	ldrb	r3, [r3, #4]
 8009828:	4619      	mov	r1, r3
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f000 f906 	bl	8009a3c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2200      	movs	r2, #0
 8009834:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009836:	2302      	movs	r3, #2
 8009838:	73fb      	strb	r3, [r7, #15]
      break;
 800983a:	e00a      	b.n	8009852 <USBH_HandleControl+0x2e2>

    default:
      break;
 800983c:	bf00      	nop
 800983e:	e008      	b.n	8009852 <USBH_HandleControl+0x2e2>
      break;
 8009840:	bf00      	nop
 8009842:	e006      	b.n	8009852 <USBH_HandleControl+0x2e2>
      break;
 8009844:	bf00      	nop
 8009846:	e004      	b.n	8009852 <USBH_HandleControl+0x2e2>
      break;
 8009848:	bf00      	nop
 800984a:	e002      	b.n	8009852 <USBH_HandleControl+0x2e2>
      break;
 800984c:	bf00      	nop
 800984e:	e000      	b.n	8009852 <USBH_HandleControl+0x2e2>
      break;
 8009850:	bf00      	nop
  }

  return status;
 8009852:	7bfb      	ldrb	r3, [r7, #15]
}
 8009854:	4618      	mov	r0, r3
 8009856:	3710      	adds	r7, #16
 8009858:	46bd      	mov	sp, r7
 800985a:	bd80      	pop	{r7, pc}

0800985c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800985c:	b580      	push	{r7, lr}
 800985e:	b088      	sub	sp, #32
 8009860:	af04      	add	r7, sp, #16
 8009862:	60f8      	str	r0, [r7, #12]
 8009864:	60b9      	str	r1, [r7, #8]
 8009866:	4613      	mov	r3, r2
 8009868:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800986a:	79f9      	ldrb	r1, [r7, #7]
 800986c:	2300      	movs	r3, #0
 800986e:	9303      	str	r3, [sp, #12]
 8009870:	2308      	movs	r3, #8
 8009872:	9302      	str	r3, [sp, #8]
 8009874:	68bb      	ldr	r3, [r7, #8]
 8009876:	9301      	str	r3, [sp, #4]
 8009878:	2300      	movs	r3, #0
 800987a:	9300      	str	r3, [sp, #0]
 800987c:	2300      	movs	r3, #0
 800987e:	2200      	movs	r2, #0
 8009880:	68f8      	ldr	r0, [r7, #12]
 8009882:	f000 fb48 	bl	8009f16 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8009886:	2300      	movs	r3, #0
}
 8009888:	4618      	mov	r0, r3
 800988a:	3710      	adds	r7, #16
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}

08009890 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b088      	sub	sp, #32
 8009894:	af04      	add	r7, sp, #16
 8009896:	60f8      	str	r0, [r7, #12]
 8009898:	60b9      	str	r1, [r7, #8]
 800989a:	4611      	mov	r1, r2
 800989c:	461a      	mov	r2, r3
 800989e:	460b      	mov	r3, r1
 80098a0:	80fb      	strh	r3, [r7, #6]
 80098a2:	4613      	mov	r3, r2
 80098a4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d001      	beq.n	80098b4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80098b0:	2300      	movs	r3, #0
 80098b2:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80098b4:	7979      	ldrb	r1, [r7, #5]
 80098b6:	7e3b      	ldrb	r3, [r7, #24]
 80098b8:	9303      	str	r3, [sp, #12]
 80098ba:	88fb      	ldrh	r3, [r7, #6]
 80098bc:	9302      	str	r3, [sp, #8]
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	9301      	str	r3, [sp, #4]
 80098c2:	2301      	movs	r3, #1
 80098c4:	9300      	str	r3, [sp, #0]
 80098c6:	2300      	movs	r3, #0
 80098c8:	2200      	movs	r2, #0
 80098ca:	68f8      	ldr	r0, [r7, #12]
 80098cc:	f000 fb23 	bl	8009f16 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80098d0:	2300      	movs	r3, #0
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	3710      	adds	r7, #16
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}

080098da <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80098da:	b580      	push	{r7, lr}
 80098dc:	b088      	sub	sp, #32
 80098de:	af04      	add	r7, sp, #16
 80098e0:	60f8      	str	r0, [r7, #12]
 80098e2:	60b9      	str	r1, [r7, #8]
 80098e4:	4611      	mov	r1, r2
 80098e6:	461a      	mov	r2, r3
 80098e8:	460b      	mov	r3, r1
 80098ea:	80fb      	strh	r3, [r7, #6]
 80098ec:	4613      	mov	r3, r2
 80098ee:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80098f0:	7979      	ldrb	r1, [r7, #5]
 80098f2:	2300      	movs	r3, #0
 80098f4:	9303      	str	r3, [sp, #12]
 80098f6:	88fb      	ldrh	r3, [r7, #6]
 80098f8:	9302      	str	r3, [sp, #8]
 80098fa:	68bb      	ldr	r3, [r7, #8]
 80098fc:	9301      	str	r3, [sp, #4]
 80098fe:	2301      	movs	r3, #1
 8009900:	9300      	str	r3, [sp, #0]
 8009902:	2300      	movs	r3, #0
 8009904:	2201      	movs	r2, #1
 8009906:	68f8      	ldr	r0, [r7, #12]
 8009908:	f000 fb05 	bl	8009f16 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800990c:	2300      	movs	r3, #0

}
 800990e:	4618      	mov	r0, r3
 8009910:	3710      	adds	r7, #16
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}

08009916 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009916:	b580      	push	{r7, lr}
 8009918:	b088      	sub	sp, #32
 800991a:	af04      	add	r7, sp, #16
 800991c:	60f8      	str	r0, [r7, #12]
 800991e:	60b9      	str	r1, [r7, #8]
 8009920:	4611      	mov	r1, r2
 8009922:	461a      	mov	r2, r3
 8009924:	460b      	mov	r3, r1
 8009926:	80fb      	strh	r3, [r7, #6]
 8009928:	4613      	mov	r3, r2
 800992a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009932:	2b00      	cmp	r3, #0
 8009934:	d001      	beq.n	800993a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009936:	2300      	movs	r3, #0
 8009938:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800993a:	7979      	ldrb	r1, [r7, #5]
 800993c:	7e3b      	ldrb	r3, [r7, #24]
 800993e:	9303      	str	r3, [sp, #12]
 8009940:	88fb      	ldrh	r3, [r7, #6]
 8009942:	9302      	str	r3, [sp, #8]
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	9301      	str	r3, [sp, #4]
 8009948:	2301      	movs	r3, #1
 800994a:	9300      	str	r3, [sp, #0]
 800994c:	2302      	movs	r3, #2
 800994e:	2200      	movs	r2, #0
 8009950:	68f8      	ldr	r0, [r7, #12]
 8009952:	f000 fae0 	bl	8009f16 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009956:	2300      	movs	r3, #0
}
 8009958:	4618      	mov	r0, r3
 800995a:	3710      	adds	r7, #16
 800995c:	46bd      	mov	sp, r7
 800995e:	bd80      	pop	{r7, pc}

08009960 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b088      	sub	sp, #32
 8009964:	af04      	add	r7, sp, #16
 8009966:	60f8      	str	r0, [r7, #12]
 8009968:	60b9      	str	r1, [r7, #8]
 800996a:	4611      	mov	r1, r2
 800996c:	461a      	mov	r2, r3
 800996e:	460b      	mov	r3, r1
 8009970:	80fb      	strh	r3, [r7, #6]
 8009972:	4613      	mov	r3, r2
 8009974:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009976:	7979      	ldrb	r1, [r7, #5]
 8009978:	2300      	movs	r3, #0
 800997a:	9303      	str	r3, [sp, #12]
 800997c:	88fb      	ldrh	r3, [r7, #6]
 800997e:	9302      	str	r3, [sp, #8]
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	9301      	str	r3, [sp, #4]
 8009984:	2301      	movs	r3, #1
 8009986:	9300      	str	r3, [sp, #0]
 8009988:	2302      	movs	r3, #2
 800998a:	2201      	movs	r2, #1
 800998c:	68f8      	ldr	r0, [r7, #12]
 800998e:	f000 fac2 	bl	8009f16 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8009992:	2300      	movs	r3, #0
}
 8009994:	4618      	mov	r0, r3
 8009996:	3710      	adds	r7, #16
 8009998:	46bd      	mov	sp, r7
 800999a:	bd80      	pop	{r7, pc}

0800999c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b086      	sub	sp, #24
 80099a0:	af04      	add	r7, sp, #16
 80099a2:	6078      	str	r0, [r7, #4]
 80099a4:	4608      	mov	r0, r1
 80099a6:	4611      	mov	r1, r2
 80099a8:	461a      	mov	r2, r3
 80099aa:	4603      	mov	r3, r0
 80099ac:	70fb      	strb	r3, [r7, #3]
 80099ae:	460b      	mov	r3, r1
 80099b0:	70bb      	strb	r3, [r7, #2]
 80099b2:	4613      	mov	r3, r2
 80099b4:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80099b6:	7878      	ldrb	r0, [r7, #1]
 80099b8:	78ba      	ldrb	r2, [r7, #2]
 80099ba:	78f9      	ldrb	r1, [r7, #3]
 80099bc:	8b3b      	ldrh	r3, [r7, #24]
 80099be:	9302      	str	r3, [sp, #8]
 80099c0:	7d3b      	ldrb	r3, [r7, #20]
 80099c2:	9301      	str	r3, [sp, #4]
 80099c4:	7c3b      	ldrb	r3, [r7, #16]
 80099c6:	9300      	str	r3, [sp, #0]
 80099c8:	4603      	mov	r3, r0
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f000 fa55 	bl	8009e7a <USBH_LL_OpenPipe>

  return USBH_OK;
 80099d0:	2300      	movs	r3, #0
}
 80099d2:	4618      	mov	r0, r3
 80099d4:	3708      	adds	r7, #8
 80099d6:	46bd      	mov	sp, r7
 80099d8:	bd80      	pop	{r7, pc}

080099da <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80099da:	b580      	push	{r7, lr}
 80099dc:	b082      	sub	sp, #8
 80099de:	af00      	add	r7, sp, #0
 80099e0:	6078      	str	r0, [r7, #4]
 80099e2:	460b      	mov	r3, r1
 80099e4:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 80099e6:	78fb      	ldrb	r3, [r7, #3]
 80099e8:	4619      	mov	r1, r3
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	f000 fa74 	bl	8009ed8 <USBH_LL_ClosePipe>

  return USBH_OK;
 80099f0:	2300      	movs	r3, #0
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	3708      	adds	r7, #8
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd80      	pop	{r7, pc}

080099fa <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80099fa:	b580      	push	{r7, lr}
 80099fc:	b084      	sub	sp, #16
 80099fe:	af00      	add	r7, sp, #0
 8009a00:	6078      	str	r0, [r7, #4]
 8009a02:	460b      	mov	r3, r1
 8009a04:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	f000 f836 	bl	8009a78 <USBH_GetFreePipe>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009a10:	89fb      	ldrh	r3, [r7, #14]
 8009a12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009a16:	4293      	cmp	r3, r2
 8009a18:	d00a      	beq.n	8009a30 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8009a1a:	78fa      	ldrb	r2, [r7, #3]
 8009a1c:	89fb      	ldrh	r3, [r7, #14]
 8009a1e:	f003 030f 	and.w	r3, r3, #15
 8009a22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009a26:	6879      	ldr	r1, [r7, #4]
 8009a28:	33e0      	adds	r3, #224	; 0xe0
 8009a2a:	009b      	lsls	r3, r3, #2
 8009a2c:	440b      	add	r3, r1
 8009a2e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009a30:	89fb      	ldrh	r3, [r7, #14]
 8009a32:	b2db      	uxtb	r3, r3
}
 8009a34:	4618      	mov	r0, r3
 8009a36:	3710      	adds	r7, #16
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd80      	pop	{r7, pc}

08009a3c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009a3c:	b480      	push	{r7}
 8009a3e:	b083      	sub	sp, #12
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
 8009a44:	460b      	mov	r3, r1
 8009a46:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8009a48:	78fb      	ldrb	r3, [r7, #3]
 8009a4a:	2b0a      	cmp	r3, #10
 8009a4c:	d80d      	bhi.n	8009a6a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009a4e:	78fb      	ldrb	r3, [r7, #3]
 8009a50:	687a      	ldr	r2, [r7, #4]
 8009a52:	33e0      	adds	r3, #224	; 0xe0
 8009a54:	009b      	lsls	r3, r3, #2
 8009a56:	4413      	add	r3, r2
 8009a58:	685a      	ldr	r2, [r3, #4]
 8009a5a:	78fb      	ldrb	r3, [r7, #3]
 8009a5c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009a60:	6879      	ldr	r1, [r7, #4]
 8009a62:	33e0      	adds	r3, #224	; 0xe0
 8009a64:	009b      	lsls	r3, r3, #2
 8009a66:	440b      	add	r3, r1
 8009a68:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009a6a:	2300      	movs	r3, #0
}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	370c      	adds	r7, #12
 8009a70:	46bd      	mov	sp, r7
 8009a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a76:	4770      	bx	lr

08009a78 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009a78:	b480      	push	{r7}
 8009a7a:	b085      	sub	sp, #20
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009a80:	2300      	movs	r3, #0
 8009a82:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8009a84:	2300      	movs	r3, #0
 8009a86:	73fb      	strb	r3, [r7, #15]
 8009a88:	e00f      	b.n	8009aaa <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009a8a:	7bfb      	ldrb	r3, [r7, #15]
 8009a8c:	687a      	ldr	r2, [r7, #4]
 8009a8e:	33e0      	adds	r3, #224	; 0xe0
 8009a90:	009b      	lsls	r3, r3, #2
 8009a92:	4413      	add	r3, r2
 8009a94:	685b      	ldr	r3, [r3, #4]
 8009a96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d102      	bne.n	8009aa4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009a9e:	7bfb      	ldrb	r3, [r7, #15]
 8009aa0:	b29b      	uxth	r3, r3
 8009aa2:	e007      	b.n	8009ab4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8009aa4:	7bfb      	ldrb	r3, [r7, #15]
 8009aa6:	3301      	adds	r3, #1
 8009aa8:	73fb      	strb	r3, [r7, #15]
 8009aaa:	7bfb      	ldrb	r3, [r7, #15]
 8009aac:	2b0a      	cmp	r3, #10
 8009aae:	d9ec      	bls.n	8009a8a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009ab0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	3714      	adds	r7, #20
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abe:	4770      	bx	lr

08009ac0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009ac4:	2201      	movs	r2, #1
 8009ac6:	490e      	ldr	r1, [pc, #56]	; (8009b00 <MX_USB_HOST_Init+0x40>)
 8009ac8:	480e      	ldr	r0, [pc, #56]	; (8009b04 <MX_USB_HOST_Init+0x44>)
 8009aca:	f7fe fc9f 	bl	800840c <USBH_Init>
 8009ace:	4603      	mov	r3, r0
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d001      	beq.n	8009ad8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009ad4:	f7f7 f944 	bl	8000d60 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009ad8:	490b      	ldr	r1, [pc, #44]	; (8009b08 <MX_USB_HOST_Init+0x48>)
 8009ada:	480a      	ldr	r0, [pc, #40]	; (8009b04 <MX_USB_HOST_Init+0x44>)
 8009adc:	f7fe fd24 	bl	8008528 <USBH_RegisterClass>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d001      	beq.n	8009aea <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8009ae6:	f7f7 f93b 	bl	8000d60 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8009aea:	4806      	ldr	r0, [pc, #24]	; (8009b04 <MX_USB_HOST_Init+0x44>)
 8009aec:	f7fe fda8 	bl	8008640 <USBH_Start>
 8009af0:	4603      	mov	r3, r0
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d001      	beq.n	8009afa <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8009af6:	f7f7 f933 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8009afa:	bf00      	nop
 8009afc:	bd80      	pop	{r7, pc}
 8009afe:	bf00      	nop
 8009b00:	08009b21 	.word	0x08009b21
 8009b04:	2000045c 	.word	0x2000045c
 8009b08:	2000000c 	.word	0x2000000c

08009b0c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8009b10:	4802      	ldr	r0, [pc, #8]	; (8009b1c <MX_USB_HOST_Process+0x10>)
 8009b12:	f7fe fda5 	bl	8008660 <USBH_Process>
}
 8009b16:	bf00      	nop
 8009b18:	bd80      	pop	{r7, pc}
 8009b1a:	bf00      	nop
 8009b1c:	2000045c 	.word	0x2000045c

08009b20 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009b20:	b480      	push	{r7}
 8009b22:	b083      	sub	sp, #12
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
 8009b28:	460b      	mov	r3, r1
 8009b2a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009b2c:	78fb      	ldrb	r3, [r7, #3]
 8009b2e:	3b01      	subs	r3, #1
 8009b30:	2b04      	cmp	r3, #4
 8009b32:	d819      	bhi.n	8009b68 <USBH_UserProcess+0x48>
 8009b34:	a201      	add	r2, pc, #4	; (adr r2, 8009b3c <USBH_UserProcess+0x1c>)
 8009b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b3a:	bf00      	nop
 8009b3c:	08009b69 	.word	0x08009b69
 8009b40:	08009b59 	.word	0x08009b59
 8009b44:	08009b69 	.word	0x08009b69
 8009b48:	08009b61 	.word	0x08009b61
 8009b4c:	08009b51 	.word	0x08009b51
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009b50:	4b09      	ldr	r3, [pc, #36]	; (8009b78 <USBH_UserProcess+0x58>)
 8009b52:	2203      	movs	r2, #3
 8009b54:	701a      	strb	r2, [r3, #0]
  break;
 8009b56:	e008      	b.n	8009b6a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009b58:	4b07      	ldr	r3, [pc, #28]	; (8009b78 <USBH_UserProcess+0x58>)
 8009b5a:	2202      	movs	r2, #2
 8009b5c:	701a      	strb	r2, [r3, #0]
  break;
 8009b5e:	e004      	b.n	8009b6a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009b60:	4b05      	ldr	r3, [pc, #20]	; (8009b78 <USBH_UserProcess+0x58>)
 8009b62:	2201      	movs	r2, #1
 8009b64:	701a      	strb	r2, [r3, #0]
  break;
 8009b66:	e000      	b.n	8009b6a <USBH_UserProcess+0x4a>

  default:
  break;
 8009b68:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8009b6a:	bf00      	nop
 8009b6c:	370c      	adds	r7, #12
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b74:	4770      	bx	lr
 8009b76:	bf00      	nop
 8009b78:	200000b8 	.word	0x200000b8

08009b7c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b08a      	sub	sp, #40	; 0x28
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009b84:	f107 0314 	add.w	r3, r7, #20
 8009b88:	2200      	movs	r2, #0
 8009b8a:	601a      	str	r2, [r3, #0]
 8009b8c:	605a      	str	r2, [r3, #4]
 8009b8e:	609a      	str	r2, [r3, #8]
 8009b90:	60da      	str	r2, [r3, #12]
 8009b92:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009b9c:	d14e      	bne.n	8009c3c <HAL_HCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009b9e:	4b29      	ldr	r3, [pc, #164]	; (8009c44 <HAL_HCD_MspInit+0xc8>)
 8009ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ba2:	4a28      	ldr	r2, [pc, #160]	; (8009c44 <HAL_HCD_MspInit+0xc8>)
 8009ba4:	f043 0301 	orr.w	r3, r3, #1
 8009ba8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009baa:	4b26      	ldr	r3, [pc, #152]	; (8009c44 <HAL_HCD_MspInit+0xc8>)
 8009bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bae:	f003 0301 	and.w	r3, r3, #1
 8009bb2:	613b      	str	r3, [r7, #16]
 8009bb4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009bb6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009bba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009bbc:	2302      	movs	r3, #2
 8009bbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009bc4:	2303      	movs	r3, #3
 8009bc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009bc8:	230a      	movs	r3, #10
 8009bca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009bcc:	f107 0314 	add.w	r3, r7, #20
 8009bd0:	4619      	mov	r1, r3
 8009bd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009bd6:	f7f7 ffef 	bl	8001bb8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009bda:	4b1a      	ldr	r3, [pc, #104]	; (8009c44 <HAL_HCD_MspInit+0xc8>)
 8009bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bde:	4a19      	ldr	r2, [pc, #100]	; (8009c44 <HAL_HCD_MspInit+0xc8>)
 8009be0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009be4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009be6:	4b17      	ldr	r3, [pc, #92]	; (8009c44 <HAL_HCD_MspInit+0xc8>)
 8009be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009bee:	60fb      	str	r3, [r7, #12]
 8009bf0:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009bf2:	4b14      	ldr	r3, [pc, #80]	; (8009c44 <HAL_HCD_MspInit+0xc8>)
 8009bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d114      	bne.n	8009c28 <HAL_HCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009bfe:	4b11      	ldr	r3, [pc, #68]	; (8009c44 <HAL_HCD_MspInit+0xc8>)
 8009c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c02:	4a10      	ldr	r2, [pc, #64]	; (8009c44 <HAL_HCD_MspInit+0xc8>)
 8009c04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c08:	6593      	str	r3, [r2, #88]	; 0x58
 8009c0a:	4b0e      	ldr	r3, [pc, #56]	; (8009c44 <HAL_HCD_MspInit+0xc8>)
 8009c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009c12:	60bb      	str	r3, [r7, #8]
 8009c14:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8009c16:	f7fa f8cf 	bl	8003db8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8009c1a:	4b0a      	ldr	r3, [pc, #40]	; (8009c44 <HAL_HCD_MspInit+0xc8>)
 8009c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c1e:	4a09      	ldr	r2, [pc, #36]	; (8009c44 <HAL_HCD_MspInit+0xc8>)
 8009c20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009c24:	6593      	str	r3, [r2, #88]	; 0x58
 8009c26:	e001      	b.n	8009c2c <HAL_HCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8009c28:	f7fa f8c6 	bl	8003db8 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	2100      	movs	r1, #0
 8009c30:	2043      	movs	r0, #67	; 0x43
 8009c32:	f7f7 fde2 	bl	80017fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009c36:	2043      	movs	r0, #67	; 0x43
 8009c38:	f7f7 fdfb 	bl	8001832 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009c3c:	bf00      	nop
 8009c3e:	3728      	adds	r7, #40	; 0x28
 8009c40:	46bd      	mov	sp, r7
 8009c42:	bd80      	pop	{r7, pc}
 8009c44:	40021000 	.word	0x40021000

08009c48 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b082      	sub	sp, #8
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009c56:	4618      	mov	r0, r3
 8009c58:	f7ff f8d5 	bl	8008e06 <USBH_LL_IncTimer>
}
 8009c5c:	bf00      	nop
 8009c5e:	3708      	adds	r7, #8
 8009c60:	46bd      	mov	sp, r7
 8009c62:	bd80      	pop	{r7, pc}

08009c64 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b082      	sub	sp, #8
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009c72:	4618      	mov	r0, r3
 8009c74:	f7ff f90d 	bl	8008e92 <USBH_LL_Connect>
}
 8009c78:	bf00      	nop
 8009c7a:	3708      	adds	r7, #8
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	bd80      	pop	{r7, pc}

08009c80 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b082      	sub	sp, #8
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009c8e:	4618      	mov	r0, r3
 8009c90:	f7ff f916 	bl	8008ec0 <USBH_LL_Disconnect>
}
 8009c94:	bf00      	nop
 8009c96:	3708      	adds	r7, #8
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd80      	pop	{r7, pc}

08009c9c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009c9c:	b480      	push	{r7}
 8009c9e:	b083      	sub	sp, #12
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
 8009ca4:	460b      	mov	r3, r1
 8009ca6:	70fb      	strb	r3, [r7, #3]
 8009ca8:	4613      	mov	r3, r2
 8009caa:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009cac:	bf00      	nop
 8009cae:	370c      	adds	r7, #12
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb6:	4770      	bx	lr

08009cb8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b082      	sub	sp, #8
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	f7ff f8c7 	bl	8008e5a <USBH_LL_PortEnabled>
}
 8009ccc:	bf00      	nop
 8009cce:	3708      	adds	r7, #8
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	bd80      	pop	{r7, pc}

08009cd4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b082      	sub	sp, #8
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	f7ff f8c7 	bl	8008e76 <USBH_LL_PortDisabled>
}
 8009ce8:	bf00      	nop
 8009cea:	3708      	adds	r7, #8
 8009cec:	46bd      	mov	sp, r7
 8009cee:	bd80      	pop	{r7, pc}

08009cf0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b082      	sub	sp, #8
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009cfe:	2b01      	cmp	r3, #1
 8009d00:	d12a      	bne.n	8009d58 <USBH_LL_Init+0x68>
  /* Enable USB power on Pwrctrl CR2 register */
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009d02:	4a18      	ldr	r2, [pc, #96]	; (8009d64 <USBH_LL_Init+0x74>)
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	4a15      	ldr	r2, [pc, #84]	; (8009d64 <USBH_LL_Init+0x74>)
 8009d0e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009d12:	4b14      	ldr	r3, [pc, #80]	; (8009d64 <USBH_LL_Init+0x74>)
 8009d14:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009d18:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8009d1a:	4b12      	ldr	r3, [pc, #72]	; (8009d64 <USBH_LL_Init+0x74>)
 8009d1c:	2208      	movs	r2, #8
 8009d1e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009d20:	4b10      	ldr	r3, [pc, #64]	; (8009d64 <USBH_LL_Init+0x74>)
 8009d22:	2201      	movs	r2, #1
 8009d24:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009d26:	4b0f      	ldr	r3, [pc, #60]	; (8009d64 <USBH_LL_Init+0x74>)
 8009d28:	2200      	movs	r2, #0
 8009d2a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009d2c:	4b0d      	ldr	r3, [pc, #52]	; (8009d64 <USBH_LL_Init+0x74>)
 8009d2e:	2202      	movs	r2, #2
 8009d30:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009d32:	4b0c      	ldr	r3, [pc, #48]	; (8009d64 <USBH_LL_Init+0x74>)
 8009d34:	2200      	movs	r2, #0
 8009d36:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009d38:	480a      	ldr	r0, [pc, #40]	; (8009d64 <USBH_LL_Init+0x74>)
 8009d3a:	f7f8 f917 	bl	8001f6c <HAL_HCD_Init>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d001      	beq.n	8009d48 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009d44:	f7f7 f80c 	bl	8000d60 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009d48:	4806      	ldr	r0, [pc, #24]	; (8009d64 <USBH_LL_Init+0x74>)
 8009d4a:	f7f8 fd17 	bl	800277c <HAL_HCD_GetCurrentFrame>
 8009d4e:	4603      	mov	r3, r0
 8009d50:	4619      	mov	r1, r3
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	f7ff f848 	bl	8008de8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009d58:	2300      	movs	r3, #0
}
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	3708      	adds	r7, #8
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd80      	pop	{r7, pc}
 8009d62:	bf00      	nop
 8009d64:	20000834 	.word	0x20000834

08009d68 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b084      	sub	sp, #16
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d70:	2300      	movs	r3, #0
 8009d72:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009d74:	2300      	movs	r3, #0
 8009d76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009d7e:	4618      	mov	r0, r3
 8009d80:	f7f8 fc84 	bl	800268c <HAL_HCD_Start>
 8009d84:	4603      	mov	r3, r0
 8009d86:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009d88:	7bfb      	ldrb	r3, [r7, #15]
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	f000 f95c 	bl	800a048 <USBH_Get_USB_Status>
 8009d90:	4603      	mov	r3, r0
 8009d92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d94:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3710      	adds	r7, #16
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}

08009d9e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009d9e:	b580      	push	{r7, lr}
 8009da0:	b084      	sub	sp, #16
 8009da2:	af00      	add	r7, sp, #0
 8009da4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009da6:	2300      	movs	r3, #0
 8009da8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009daa:	2300      	movs	r3, #0
 8009dac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009db4:	4618      	mov	r0, r3
 8009db6:	f7f8 fc8c 	bl	80026d2 <HAL_HCD_Stop>
 8009dba:	4603      	mov	r3, r0
 8009dbc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009dbe:	7bfb      	ldrb	r3, [r7, #15]
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	f000 f941 	bl	800a048 <USBH_Get_USB_Status>
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009dca:	7bbb      	ldrb	r3, [r7, #14]
}
 8009dcc:	4618      	mov	r0, r3
 8009dce:	3710      	adds	r7, #16
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bd80      	pop	{r7, pc}

08009dd4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b084      	sub	sp, #16
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009ddc:	2301      	movs	r3, #1
 8009dde:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009de6:	4618      	mov	r0, r3
 8009de8:	f7f8 fcd6 	bl	8002798 <HAL_HCD_GetCurrentSpeed>
 8009dec:	4603      	mov	r3, r0
 8009dee:	2b01      	cmp	r3, #1
 8009df0:	d007      	beq.n	8009e02 <USBH_LL_GetSpeed+0x2e>
 8009df2:	2b01      	cmp	r3, #1
 8009df4:	d302      	bcc.n	8009dfc <USBH_LL_GetSpeed+0x28>
 8009df6:	2b02      	cmp	r3, #2
 8009df8:	d006      	beq.n	8009e08 <USBH_LL_GetSpeed+0x34>
 8009dfa:	e008      	b.n	8009e0e <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	73fb      	strb	r3, [r7, #15]
    break;
 8009e00:	e008      	b.n	8009e14 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8009e02:	2301      	movs	r3, #1
 8009e04:	73fb      	strb	r3, [r7, #15]
    break;
 8009e06:	e005      	b.n	8009e14 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009e08:	2302      	movs	r3, #2
 8009e0a:	73fb      	strb	r3, [r7, #15]
    break;
 8009e0c:	e002      	b.n	8009e14 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8009e0e:	2301      	movs	r3, #1
 8009e10:	73fb      	strb	r3, [r7, #15]
    break;
 8009e12:	bf00      	nop
  }
  return  speed;
 8009e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e16:	4618      	mov	r0, r3
 8009e18:	3710      	adds	r7, #16
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	bd80      	pop	{r7, pc}

08009e1e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8009e1e:	b580      	push	{r7, lr}
 8009e20:	b084      	sub	sp, #16
 8009e22:	af00      	add	r7, sp, #0
 8009e24:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e26:	2300      	movs	r3, #0
 8009e28:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009e34:	4618      	mov	r0, r3
 8009e36:	f7f8 fc69 	bl	800270c <HAL_HCD_ResetPort>
 8009e3a:	4603      	mov	r3, r0
 8009e3c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009e3e:	7bfb      	ldrb	r3, [r7, #15]
 8009e40:	4618      	mov	r0, r3
 8009e42:	f000 f901 	bl	800a048 <USBH_Get_USB_Status>
 8009e46:	4603      	mov	r3, r0
 8009e48:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e4a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	3710      	adds	r7, #16
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd80      	pop	{r7, pc}

08009e54 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b082      	sub	sp, #8
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
 8009e5c:	460b      	mov	r3, r1
 8009e5e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009e66:	78fa      	ldrb	r2, [r7, #3]
 8009e68:	4611      	mov	r1, r2
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	f7f8 fc71 	bl	8002752 <HAL_HCD_HC_GetXferCount>
 8009e70:	4603      	mov	r3, r0
}
 8009e72:	4618      	mov	r0, r3
 8009e74:	3708      	adds	r7, #8
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bd80      	pop	{r7, pc}

08009e7a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009e7a:	b590      	push	{r4, r7, lr}
 8009e7c:	b089      	sub	sp, #36	; 0x24
 8009e7e:	af04      	add	r7, sp, #16
 8009e80:	6078      	str	r0, [r7, #4]
 8009e82:	4608      	mov	r0, r1
 8009e84:	4611      	mov	r1, r2
 8009e86:	461a      	mov	r2, r3
 8009e88:	4603      	mov	r3, r0
 8009e8a:	70fb      	strb	r3, [r7, #3]
 8009e8c:	460b      	mov	r3, r1
 8009e8e:	70bb      	strb	r3, [r7, #2]
 8009e90:	4613      	mov	r3, r2
 8009e92:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e94:	2300      	movs	r3, #0
 8009e96:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009e98:	2300      	movs	r3, #0
 8009e9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009ea2:	787c      	ldrb	r4, [r7, #1]
 8009ea4:	78ba      	ldrb	r2, [r7, #2]
 8009ea6:	78f9      	ldrb	r1, [r7, #3]
 8009ea8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009eaa:	9302      	str	r3, [sp, #8]
 8009eac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009eb0:	9301      	str	r3, [sp, #4]
 8009eb2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009eb6:	9300      	str	r3, [sp, #0]
 8009eb8:	4623      	mov	r3, r4
 8009eba:	f7f8 f8b9 	bl	8002030 <HAL_HCD_HC_Init>
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009ec2:	7bfb      	ldrb	r3, [r7, #15]
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	f000 f8bf 	bl	800a048 <USBH_Get_USB_Status>
 8009eca:	4603      	mov	r3, r0
 8009ecc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ece:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	3714      	adds	r7, #20
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bd90      	pop	{r4, r7, pc}

08009ed8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b084      	sub	sp, #16
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
 8009ee0:	460b      	mov	r3, r1
 8009ee2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009ee8:	2300      	movs	r3, #0
 8009eea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009ef2:	78fa      	ldrb	r2, [r7, #3]
 8009ef4:	4611      	mov	r1, r2
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f7f8 f932 	bl	8002160 <HAL_HCD_HC_Halt>
 8009efc:	4603      	mov	r3, r0
 8009efe:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009f00:	7bfb      	ldrb	r3, [r7, #15]
 8009f02:	4618      	mov	r0, r3
 8009f04:	f000 f8a0 	bl	800a048 <USBH_Get_USB_Status>
 8009f08:	4603      	mov	r3, r0
 8009f0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f0c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f0e:	4618      	mov	r0, r3
 8009f10:	3710      	adds	r7, #16
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bd80      	pop	{r7, pc}

08009f16 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009f16:	b590      	push	{r4, r7, lr}
 8009f18:	b089      	sub	sp, #36	; 0x24
 8009f1a:	af04      	add	r7, sp, #16
 8009f1c:	6078      	str	r0, [r7, #4]
 8009f1e:	4608      	mov	r0, r1
 8009f20:	4611      	mov	r1, r2
 8009f22:	461a      	mov	r2, r3
 8009f24:	4603      	mov	r3, r0
 8009f26:	70fb      	strb	r3, [r7, #3]
 8009f28:	460b      	mov	r3, r1
 8009f2a:	70bb      	strb	r3, [r7, #2]
 8009f2c:	4613      	mov	r3, r2
 8009f2e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f30:	2300      	movs	r3, #0
 8009f32:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009f34:	2300      	movs	r3, #0
 8009f36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009f3e:	787c      	ldrb	r4, [r7, #1]
 8009f40:	78ba      	ldrb	r2, [r7, #2]
 8009f42:	78f9      	ldrb	r1, [r7, #3]
 8009f44:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009f48:	9303      	str	r3, [sp, #12]
 8009f4a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009f4c:	9302      	str	r3, [sp, #8]
 8009f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f50:	9301      	str	r3, [sp, #4]
 8009f52:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009f56:	9300      	str	r3, [sp, #0]
 8009f58:	4623      	mov	r3, r4
 8009f5a:	f7f8 f925 	bl	80021a8 <HAL_HCD_HC_SubmitRequest>
 8009f5e:	4603      	mov	r3, r0
 8009f60:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009f62:	7bfb      	ldrb	r3, [r7, #15]
 8009f64:	4618      	mov	r0, r3
 8009f66:	f000 f86f 	bl	800a048 <USBH_Get_USB_Status>
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f6e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f70:	4618      	mov	r0, r3
 8009f72:	3714      	adds	r7, #20
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bd90      	pop	{r4, r7, pc}

08009f78 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b082      	sub	sp, #8
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
 8009f80:	460b      	mov	r3, r1
 8009f82:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009f8a:	78fa      	ldrb	r2, [r7, #3]
 8009f8c:	4611      	mov	r1, r2
 8009f8e:	4618      	mov	r0, r3
 8009f90:	f7f8 fbca 	bl	8002728 <HAL_HCD_HC_GetURBState>
 8009f94:	4603      	mov	r3, r0
}
 8009f96:	4618      	mov	r0, r3
 8009f98:	3708      	adds	r7, #8
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	bd80      	pop	{r7, pc}

08009f9e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009f9e:	b580      	push	{r7, lr}
 8009fa0:	b082      	sub	sp, #8
 8009fa2:	af00      	add	r7, sp, #0
 8009fa4:	6078      	str	r0, [r7, #4]
 8009fa6:	460b      	mov	r3, r1
 8009fa8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009fb0:	2b01      	cmp	r3, #1
 8009fb2:	d103      	bne.n	8009fbc <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009fb4:	78fb      	ldrb	r3, [r7, #3]
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	f000 f872 	bl	800a0a0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009fbc:	20c8      	movs	r0, #200	; 0xc8
 8009fbe:	f7f7 fb1f 	bl	8001600 <HAL_Delay>
  return USBH_OK;
 8009fc2:	2300      	movs	r3, #0
}
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	3708      	adds	r7, #8
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	bd80      	pop	{r7, pc}

08009fcc <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009fcc:	b480      	push	{r7}
 8009fce:	b085      	sub	sp, #20
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
 8009fd4:	460b      	mov	r3, r1
 8009fd6:	70fb      	strb	r3, [r7, #3]
 8009fd8:	4613      	mov	r3, r2
 8009fda:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009fe2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009fe4:	78fa      	ldrb	r2, [r7, #3]
 8009fe6:	68f9      	ldr	r1, [r7, #12]
 8009fe8:	4613      	mov	r3, r2
 8009fea:	009b      	lsls	r3, r3, #2
 8009fec:	4413      	add	r3, r2
 8009fee:	00db      	lsls	r3, r3, #3
 8009ff0:	440b      	add	r3, r1
 8009ff2:	333b      	adds	r3, #59	; 0x3b
 8009ff4:	781b      	ldrb	r3, [r3, #0]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d00a      	beq.n	800a010 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009ffa:	78fa      	ldrb	r2, [r7, #3]
 8009ffc:	68f9      	ldr	r1, [r7, #12]
 8009ffe:	4613      	mov	r3, r2
 800a000:	009b      	lsls	r3, r3, #2
 800a002:	4413      	add	r3, r2
 800a004:	00db      	lsls	r3, r3, #3
 800a006:	440b      	add	r3, r1
 800a008:	3350      	adds	r3, #80	; 0x50
 800a00a:	78ba      	ldrb	r2, [r7, #2]
 800a00c:	701a      	strb	r2, [r3, #0]
 800a00e:	e009      	b.n	800a024 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800a010:	78fa      	ldrb	r2, [r7, #3]
 800a012:	68f9      	ldr	r1, [r7, #12]
 800a014:	4613      	mov	r3, r2
 800a016:	009b      	lsls	r3, r3, #2
 800a018:	4413      	add	r3, r2
 800a01a:	00db      	lsls	r3, r3, #3
 800a01c:	440b      	add	r3, r1
 800a01e:	3351      	adds	r3, #81	; 0x51
 800a020:	78ba      	ldrb	r2, [r7, #2]
 800a022:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800a024:	2300      	movs	r3, #0
}
 800a026:	4618      	mov	r0, r3
 800a028:	3714      	adds	r7, #20
 800a02a:	46bd      	mov	sp, r7
 800a02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a030:	4770      	bx	lr

0800a032 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800a032:	b580      	push	{r7, lr}
 800a034:	b082      	sub	sp, #8
 800a036:	af00      	add	r7, sp, #0
 800a038:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	f7f7 fae0 	bl	8001600 <HAL_Delay>
}
 800a040:	bf00      	nop
 800a042:	3708      	adds	r7, #8
 800a044:	46bd      	mov	sp, r7
 800a046:	bd80      	pop	{r7, pc}

0800a048 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a048:	b480      	push	{r7}
 800a04a:	b085      	sub	sp, #20
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	4603      	mov	r3, r0
 800a050:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a052:	2300      	movs	r3, #0
 800a054:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a056:	79fb      	ldrb	r3, [r7, #7]
 800a058:	2b03      	cmp	r3, #3
 800a05a:	d817      	bhi.n	800a08c <USBH_Get_USB_Status+0x44>
 800a05c:	a201      	add	r2, pc, #4	; (adr r2, 800a064 <USBH_Get_USB_Status+0x1c>)
 800a05e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a062:	bf00      	nop
 800a064:	0800a075 	.word	0x0800a075
 800a068:	0800a07b 	.word	0x0800a07b
 800a06c:	0800a081 	.word	0x0800a081
 800a070:	0800a087 	.word	0x0800a087
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a074:	2300      	movs	r3, #0
 800a076:	73fb      	strb	r3, [r7, #15]
    break;
 800a078:	e00b      	b.n	800a092 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a07a:	2302      	movs	r3, #2
 800a07c:	73fb      	strb	r3, [r7, #15]
    break;
 800a07e:	e008      	b.n	800a092 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a080:	2301      	movs	r3, #1
 800a082:	73fb      	strb	r3, [r7, #15]
    break;
 800a084:	e005      	b.n	800a092 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a086:	2302      	movs	r3, #2
 800a088:	73fb      	strb	r3, [r7, #15]
    break;
 800a08a:	e002      	b.n	800a092 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a08c:	2302      	movs	r3, #2
 800a08e:	73fb      	strb	r3, [r7, #15]
    break;
 800a090:	bf00      	nop
  }
  return usb_status;
 800a092:	7bfb      	ldrb	r3, [r7, #15]
}
 800a094:	4618      	mov	r0, r3
 800a096:	3714      	adds	r7, #20
 800a098:	46bd      	mov	sp, r7
 800a09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09e:	4770      	bx	lr

0800a0a0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b084      	sub	sp, #16
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800a0aa:	79fb      	ldrb	r3, [r7, #7]
 800a0ac:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800a0ae:	79fb      	ldrb	r3, [r7, #7]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d102      	bne.n	800a0ba <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800a0b4:	2301      	movs	r3, #1
 800a0b6:	73fb      	strb	r3, [r7, #15]
 800a0b8:	e001      	b.n	800a0be <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_9,(GPIO_PinState)data);
 800a0be:	7bfb      	ldrb	r3, [r7, #15]
 800a0c0:	461a      	mov	r2, r3
 800a0c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a0c6:	4803      	ldr	r0, [pc, #12]	; (800a0d4 <MX_DriverVbusFS+0x34>)
 800a0c8:	f7f7 ff1e 	bl	8001f08 <HAL_GPIO_WritePin>
}
 800a0cc:	bf00      	nop
 800a0ce:	3710      	adds	r7, #16
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	bd80      	pop	{r7, pc}
 800a0d4:	48000800 	.word	0x48000800

0800a0d8 <__errno>:
 800a0d8:	4b01      	ldr	r3, [pc, #4]	; (800a0e0 <__errno+0x8>)
 800a0da:	6818      	ldr	r0, [r3, #0]
 800a0dc:	4770      	bx	lr
 800a0de:	bf00      	nop
 800a0e0:	2000002c 	.word	0x2000002c

0800a0e4 <__libc_init_array>:
 800a0e4:	b570      	push	{r4, r5, r6, lr}
 800a0e6:	4e0d      	ldr	r6, [pc, #52]	; (800a11c <__libc_init_array+0x38>)
 800a0e8:	4c0d      	ldr	r4, [pc, #52]	; (800a120 <__libc_init_array+0x3c>)
 800a0ea:	1ba4      	subs	r4, r4, r6
 800a0ec:	10a4      	asrs	r4, r4, #2
 800a0ee:	2500      	movs	r5, #0
 800a0f0:	42a5      	cmp	r5, r4
 800a0f2:	d109      	bne.n	800a108 <__libc_init_array+0x24>
 800a0f4:	4e0b      	ldr	r6, [pc, #44]	; (800a124 <__libc_init_array+0x40>)
 800a0f6:	4c0c      	ldr	r4, [pc, #48]	; (800a128 <__libc_init_array+0x44>)
 800a0f8:	f000 f8ea 	bl	800a2d0 <_init>
 800a0fc:	1ba4      	subs	r4, r4, r6
 800a0fe:	10a4      	asrs	r4, r4, #2
 800a100:	2500      	movs	r5, #0
 800a102:	42a5      	cmp	r5, r4
 800a104:	d105      	bne.n	800a112 <__libc_init_array+0x2e>
 800a106:	bd70      	pop	{r4, r5, r6, pc}
 800a108:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a10c:	4798      	blx	r3
 800a10e:	3501      	adds	r5, #1
 800a110:	e7ee      	b.n	800a0f0 <__libc_init_array+0xc>
 800a112:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a116:	4798      	blx	r3
 800a118:	3501      	adds	r5, #1
 800a11a:	e7f2      	b.n	800a102 <__libc_init_array+0x1e>
 800a11c:	0800a33c 	.word	0x0800a33c
 800a120:	0800a33c 	.word	0x0800a33c
 800a124:	0800a33c 	.word	0x0800a33c
 800a128:	0800a340 	.word	0x0800a340

0800a12c <malloc>:
 800a12c:	4b02      	ldr	r3, [pc, #8]	; (800a138 <malloc+0xc>)
 800a12e:	4601      	mov	r1, r0
 800a130:	6818      	ldr	r0, [r3, #0]
 800a132:	f000 b861 	b.w	800a1f8 <_malloc_r>
 800a136:	bf00      	nop
 800a138:	2000002c 	.word	0x2000002c

0800a13c <free>:
 800a13c:	4b02      	ldr	r3, [pc, #8]	; (800a148 <free+0xc>)
 800a13e:	4601      	mov	r1, r0
 800a140:	6818      	ldr	r0, [r3, #0]
 800a142:	f000 b80b 	b.w	800a15c <_free_r>
 800a146:	bf00      	nop
 800a148:	2000002c 	.word	0x2000002c

0800a14c <memset>:
 800a14c:	4402      	add	r2, r0
 800a14e:	4603      	mov	r3, r0
 800a150:	4293      	cmp	r3, r2
 800a152:	d100      	bne.n	800a156 <memset+0xa>
 800a154:	4770      	bx	lr
 800a156:	f803 1b01 	strb.w	r1, [r3], #1
 800a15a:	e7f9      	b.n	800a150 <memset+0x4>

0800a15c <_free_r>:
 800a15c:	b538      	push	{r3, r4, r5, lr}
 800a15e:	4605      	mov	r5, r0
 800a160:	2900      	cmp	r1, #0
 800a162:	d045      	beq.n	800a1f0 <_free_r+0x94>
 800a164:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a168:	1f0c      	subs	r4, r1, #4
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	bfb8      	it	lt
 800a16e:	18e4      	addlt	r4, r4, r3
 800a170:	f000 f8ac 	bl	800a2cc <__malloc_lock>
 800a174:	4a1f      	ldr	r2, [pc, #124]	; (800a1f4 <_free_r+0x98>)
 800a176:	6813      	ldr	r3, [r2, #0]
 800a178:	4610      	mov	r0, r2
 800a17a:	b933      	cbnz	r3, 800a18a <_free_r+0x2e>
 800a17c:	6063      	str	r3, [r4, #4]
 800a17e:	6014      	str	r4, [r2, #0]
 800a180:	4628      	mov	r0, r5
 800a182:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a186:	f000 b8a2 	b.w	800a2ce <__malloc_unlock>
 800a18a:	42a3      	cmp	r3, r4
 800a18c:	d90c      	bls.n	800a1a8 <_free_r+0x4c>
 800a18e:	6821      	ldr	r1, [r4, #0]
 800a190:	1862      	adds	r2, r4, r1
 800a192:	4293      	cmp	r3, r2
 800a194:	bf04      	itt	eq
 800a196:	681a      	ldreq	r2, [r3, #0]
 800a198:	685b      	ldreq	r3, [r3, #4]
 800a19a:	6063      	str	r3, [r4, #4]
 800a19c:	bf04      	itt	eq
 800a19e:	1852      	addeq	r2, r2, r1
 800a1a0:	6022      	streq	r2, [r4, #0]
 800a1a2:	6004      	str	r4, [r0, #0]
 800a1a4:	e7ec      	b.n	800a180 <_free_r+0x24>
 800a1a6:	4613      	mov	r3, r2
 800a1a8:	685a      	ldr	r2, [r3, #4]
 800a1aa:	b10a      	cbz	r2, 800a1b0 <_free_r+0x54>
 800a1ac:	42a2      	cmp	r2, r4
 800a1ae:	d9fa      	bls.n	800a1a6 <_free_r+0x4a>
 800a1b0:	6819      	ldr	r1, [r3, #0]
 800a1b2:	1858      	adds	r0, r3, r1
 800a1b4:	42a0      	cmp	r0, r4
 800a1b6:	d10b      	bne.n	800a1d0 <_free_r+0x74>
 800a1b8:	6820      	ldr	r0, [r4, #0]
 800a1ba:	4401      	add	r1, r0
 800a1bc:	1858      	adds	r0, r3, r1
 800a1be:	4282      	cmp	r2, r0
 800a1c0:	6019      	str	r1, [r3, #0]
 800a1c2:	d1dd      	bne.n	800a180 <_free_r+0x24>
 800a1c4:	6810      	ldr	r0, [r2, #0]
 800a1c6:	6852      	ldr	r2, [r2, #4]
 800a1c8:	605a      	str	r2, [r3, #4]
 800a1ca:	4401      	add	r1, r0
 800a1cc:	6019      	str	r1, [r3, #0]
 800a1ce:	e7d7      	b.n	800a180 <_free_r+0x24>
 800a1d0:	d902      	bls.n	800a1d8 <_free_r+0x7c>
 800a1d2:	230c      	movs	r3, #12
 800a1d4:	602b      	str	r3, [r5, #0]
 800a1d6:	e7d3      	b.n	800a180 <_free_r+0x24>
 800a1d8:	6820      	ldr	r0, [r4, #0]
 800a1da:	1821      	adds	r1, r4, r0
 800a1dc:	428a      	cmp	r2, r1
 800a1de:	bf04      	itt	eq
 800a1e0:	6811      	ldreq	r1, [r2, #0]
 800a1e2:	6852      	ldreq	r2, [r2, #4]
 800a1e4:	6062      	str	r2, [r4, #4]
 800a1e6:	bf04      	itt	eq
 800a1e8:	1809      	addeq	r1, r1, r0
 800a1ea:	6021      	streq	r1, [r4, #0]
 800a1ec:	605c      	str	r4, [r3, #4]
 800a1ee:	e7c7      	b.n	800a180 <_free_r+0x24>
 800a1f0:	bd38      	pop	{r3, r4, r5, pc}
 800a1f2:	bf00      	nop
 800a1f4:	200000bc 	.word	0x200000bc

0800a1f8 <_malloc_r>:
 800a1f8:	b570      	push	{r4, r5, r6, lr}
 800a1fa:	1ccd      	adds	r5, r1, #3
 800a1fc:	f025 0503 	bic.w	r5, r5, #3
 800a200:	3508      	adds	r5, #8
 800a202:	2d0c      	cmp	r5, #12
 800a204:	bf38      	it	cc
 800a206:	250c      	movcc	r5, #12
 800a208:	2d00      	cmp	r5, #0
 800a20a:	4606      	mov	r6, r0
 800a20c:	db01      	blt.n	800a212 <_malloc_r+0x1a>
 800a20e:	42a9      	cmp	r1, r5
 800a210:	d903      	bls.n	800a21a <_malloc_r+0x22>
 800a212:	230c      	movs	r3, #12
 800a214:	6033      	str	r3, [r6, #0]
 800a216:	2000      	movs	r0, #0
 800a218:	bd70      	pop	{r4, r5, r6, pc}
 800a21a:	f000 f857 	bl	800a2cc <__malloc_lock>
 800a21e:	4a21      	ldr	r2, [pc, #132]	; (800a2a4 <_malloc_r+0xac>)
 800a220:	6814      	ldr	r4, [r2, #0]
 800a222:	4621      	mov	r1, r4
 800a224:	b991      	cbnz	r1, 800a24c <_malloc_r+0x54>
 800a226:	4c20      	ldr	r4, [pc, #128]	; (800a2a8 <_malloc_r+0xb0>)
 800a228:	6823      	ldr	r3, [r4, #0]
 800a22a:	b91b      	cbnz	r3, 800a234 <_malloc_r+0x3c>
 800a22c:	4630      	mov	r0, r6
 800a22e:	f000 f83d 	bl	800a2ac <_sbrk_r>
 800a232:	6020      	str	r0, [r4, #0]
 800a234:	4629      	mov	r1, r5
 800a236:	4630      	mov	r0, r6
 800a238:	f000 f838 	bl	800a2ac <_sbrk_r>
 800a23c:	1c43      	adds	r3, r0, #1
 800a23e:	d124      	bne.n	800a28a <_malloc_r+0x92>
 800a240:	230c      	movs	r3, #12
 800a242:	6033      	str	r3, [r6, #0]
 800a244:	4630      	mov	r0, r6
 800a246:	f000 f842 	bl	800a2ce <__malloc_unlock>
 800a24a:	e7e4      	b.n	800a216 <_malloc_r+0x1e>
 800a24c:	680b      	ldr	r3, [r1, #0]
 800a24e:	1b5b      	subs	r3, r3, r5
 800a250:	d418      	bmi.n	800a284 <_malloc_r+0x8c>
 800a252:	2b0b      	cmp	r3, #11
 800a254:	d90f      	bls.n	800a276 <_malloc_r+0x7e>
 800a256:	600b      	str	r3, [r1, #0]
 800a258:	50cd      	str	r5, [r1, r3]
 800a25a:	18cc      	adds	r4, r1, r3
 800a25c:	4630      	mov	r0, r6
 800a25e:	f000 f836 	bl	800a2ce <__malloc_unlock>
 800a262:	f104 000b 	add.w	r0, r4, #11
 800a266:	1d23      	adds	r3, r4, #4
 800a268:	f020 0007 	bic.w	r0, r0, #7
 800a26c:	1ac3      	subs	r3, r0, r3
 800a26e:	d0d3      	beq.n	800a218 <_malloc_r+0x20>
 800a270:	425a      	negs	r2, r3
 800a272:	50e2      	str	r2, [r4, r3]
 800a274:	e7d0      	b.n	800a218 <_malloc_r+0x20>
 800a276:	428c      	cmp	r4, r1
 800a278:	684b      	ldr	r3, [r1, #4]
 800a27a:	bf16      	itet	ne
 800a27c:	6063      	strne	r3, [r4, #4]
 800a27e:	6013      	streq	r3, [r2, #0]
 800a280:	460c      	movne	r4, r1
 800a282:	e7eb      	b.n	800a25c <_malloc_r+0x64>
 800a284:	460c      	mov	r4, r1
 800a286:	6849      	ldr	r1, [r1, #4]
 800a288:	e7cc      	b.n	800a224 <_malloc_r+0x2c>
 800a28a:	1cc4      	adds	r4, r0, #3
 800a28c:	f024 0403 	bic.w	r4, r4, #3
 800a290:	42a0      	cmp	r0, r4
 800a292:	d005      	beq.n	800a2a0 <_malloc_r+0xa8>
 800a294:	1a21      	subs	r1, r4, r0
 800a296:	4630      	mov	r0, r6
 800a298:	f000 f808 	bl	800a2ac <_sbrk_r>
 800a29c:	3001      	adds	r0, #1
 800a29e:	d0cf      	beq.n	800a240 <_malloc_r+0x48>
 800a2a0:	6025      	str	r5, [r4, #0]
 800a2a2:	e7db      	b.n	800a25c <_malloc_r+0x64>
 800a2a4:	200000bc 	.word	0x200000bc
 800a2a8:	200000c0 	.word	0x200000c0

0800a2ac <_sbrk_r>:
 800a2ac:	b538      	push	{r3, r4, r5, lr}
 800a2ae:	4c06      	ldr	r4, [pc, #24]	; (800a2c8 <_sbrk_r+0x1c>)
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	4605      	mov	r5, r0
 800a2b4:	4608      	mov	r0, r1
 800a2b6:	6023      	str	r3, [r4, #0]
 800a2b8:	f7f7 f890 	bl	80013dc <_sbrk>
 800a2bc:	1c43      	adds	r3, r0, #1
 800a2be:	d102      	bne.n	800a2c6 <_sbrk_r+0x1a>
 800a2c0:	6823      	ldr	r3, [r4, #0]
 800a2c2:	b103      	cbz	r3, 800a2c6 <_sbrk_r+0x1a>
 800a2c4:	602b      	str	r3, [r5, #0]
 800a2c6:	bd38      	pop	{r3, r4, r5, pc}
 800a2c8:	20000af8 	.word	0x20000af8

0800a2cc <__malloc_lock>:
 800a2cc:	4770      	bx	lr

0800a2ce <__malloc_unlock>:
 800a2ce:	4770      	bx	lr

0800a2d0 <_init>:
 800a2d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2d2:	bf00      	nop
 800a2d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2d6:	bc08      	pop	{r3}
 800a2d8:	469e      	mov	lr, r3
 800a2da:	4770      	bx	lr

0800a2dc <_fini>:
 800a2dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2de:	bf00      	nop
 800a2e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2e2:	bc08      	pop	{r3}
 800a2e4:	469e      	mov	lr, r3
 800a2e6:	4770      	bx	lr
