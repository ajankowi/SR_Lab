
test_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000511c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  080052a8  080052a8  000152a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005518  08005518  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08005518  08005518  00015518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005520  08005520  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005520  08005520  00015520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005524  08005524  00015524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08005528  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  200001dc  08005704  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000028c  08005704  0002028c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009df6  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000188e  00000000  00000000  0002a002  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008c0  00000000  00000000  0002b890  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007d8  00000000  00000000  0002c150  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002558c  00000000  00000000  0002c928  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007e6d  00000000  00000000  00051eb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e6ee4  00000000  00000000  00059d21  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00140c05  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a40  00000000  00000000  00140c80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001dc 	.word	0x200001dc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800528c 	.word	0x0800528c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001e0 	.word	0x200001e0
 80001c4:	0800528c 	.word	0x0800528c

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_uldivmod>:
 8000b00:	b953      	cbnz	r3, 8000b18 <__aeabi_uldivmod+0x18>
 8000b02:	b94a      	cbnz	r2, 8000b18 <__aeabi_uldivmod+0x18>
 8000b04:	2900      	cmp	r1, #0
 8000b06:	bf08      	it	eq
 8000b08:	2800      	cmpeq	r0, #0
 8000b0a:	bf1c      	itt	ne
 8000b0c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b10:	f04f 30ff 	movne.w	r0, #4294967295
 8000b14:	f000 b972 	b.w	8000dfc <__aeabi_idiv0>
 8000b18:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b1c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b20:	f000 f806 	bl	8000b30 <__udivmoddi4>
 8000b24:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b2c:	b004      	add	sp, #16
 8000b2e:	4770      	bx	lr

08000b30 <__udivmoddi4>:
 8000b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b34:	9e08      	ldr	r6, [sp, #32]
 8000b36:	4604      	mov	r4, r0
 8000b38:	4688      	mov	r8, r1
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d14b      	bne.n	8000bd6 <__udivmoddi4+0xa6>
 8000b3e:	428a      	cmp	r2, r1
 8000b40:	4615      	mov	r5, r2
 8000b42:	d967      	bls.n	8000c14 <__udivmoddi4+0xe4>
 8000b44:	fab2 f282 	clz	r2, r2
 8000b48:	b14a      	cbz	r2, 8000b5e <__udivmoddi4+0x2e>
 8000b4a:	f1c2 0720 	rsb	r7, r2, #32
 8000b4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000b52:	fa20 f707 	lsr.w	r7, r0, r7
 8000b56:	4095      	lsls	r5, r2
 8000b58:	ea47 0803 	orr.w	r8, r7, r3
 8000b5c:	4094      	lsls	r4, r2
 8000b5e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b62:	0c23      	lsrs	r3, r4, #16
 8000b64:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b68:	fa1f fc85 	uxth.w	ip, r5
 8000b6c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b70:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b74:	fb07 f10c 	mul.w	r1, r7, ip
 8000b78:	4299      	cmp	r1, r3
 8000b7a:	d909      	bls.n	8000b90 <__udivmoddi4+0x60>
 8000b7c:	18eb      	adds	r3, r5, r3
 8000b7e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b82:	f080 811b 	bcs.w	8000dbc <__udivmoddi4+0x28c>
 8000b86:	4299      	cmp	r1, r3
 8000b88:	f240 8118 	bls.w	8000dbc <__udivmoddi4+0x28c>
 8000b8c:	3f02      	subs	r7, #2
 8000b8e:	442b      	add	r3, r5
 8000b90:	1a5b      	subs	r3, r3, r1
 8000b92:	b2a4      	uxth	r4, r4
 8000b94:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b98:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ba0:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ba4:	45a4      	cmp	ip, r4
 8000ba6:	d909      	bls.n	8000bbc <__udivmoddi4+0x8c>
 8000ba8:	192c      	adds	r4, r5, r4
 8000baa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bae:	f080 8107 	bcs.w	8000dc0 <__udivmoddi4+0x290>
 8000bb2:	45a4      	cmp	ip, r4
 8000bb4:	f240 8104 	bls.w	8000dc0 <__udivmoddi4+0x290>
 8000bb8:	3802      	subs	r0, #2
 8000bba:	442c      	add	r4, r5
 8000bbc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bc0:	eba4 040c 	sub.w	r4, r4, ip
 8000bc4:	2700      	movs	r7, #0
 8000bc6:	b11e      	cbz	r6, 8000bd0 <__udivmoddi4+0xa0>
 8000bc8:	40d4      	lsrs	r4, r2
 8000bca:	2300      	movs	r3, #0
 8000bcc:	e9c6 4300 	strd	r4, r3, [r6]
 8000bd0:	4639      	mov	r1, r7
 8000bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd6:	428b      	cmp	r3, r1
 8000bd8:	d909      	bls.n	8000bee <__udivmoddi4+0xbe>
 8000bda:	2e00      	cmp	r6, #0
 8000bdc:	f000 80eb 	beq.w	8000db6 <__udivmoddi4+0x286>
 8000be0:	2700      	movs	r7, #0
 8000be2:	e9c6 0100 	strd	r0, r1, [r6]
 8000be6:	4638      	mov	r0, r7
 8000be8:	4639      	mov	r1, r7
 8000bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bee:	fab3 f783 	clz	r7, r3
 8000bf2:	2f00      	cmp	r7, #0
 8000bf4:	d147      	bne.n	8000c86 <__udivmoddi4+0x156>
 8000bf6:	428b      	cmp	r3, r1
 8000bf8:	d302      	bcc.n	8000c00 <__udivmoddi4+0xd0>
 8000bfa:	4282      	cmp	r2, r0
 8000bfc:	f200 80fa 	bhi.w	8000df4 <__udivmoddi4+0x2c4>
 8000c00:	1a84      	subs	r4, r0, r2
 8000c02:	eb61 0303 	sbc.w	r3, r1, r3
 8000c06:	2001      	movs	r0, #1
 8000c08:	4698      	mov	r8, r3
 8000c0a:	2e00      	cmp	r6, #0
 8000c0c:	d0e0      	beq.n	8000bd0 <__udivmoddi4+0xa0>
 8000c0e:	e9c6 4800 	strd	r4, r8, [r6]
 8000c12:	e7dd      	b.n	8000bd0 <__udivmoddi4+0xa0>
 8000c14:	b902      	cbnz	r2, 8000c18 <__udivmoddi4+0xe8>
 8000c16:	deff      	udf	#255	; 0xff
 8000c18:	fab2 f282 	clz	r2, r2
 8000c1c:	2a00      	cmp	r2, #0
 8000c1e:	f040 808f 	bne.w	8000d40 <__udivmoddi4+0x210>
 8000c22:	1b49      	subs	r1, r1, r5
 8000c24:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c28:	fa1f f885 	uxth.w	r8, r5
 8000c2c:	2701      	movs	r7, #1
 8000c2e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c32:	0c23      	lsrs	r3, r4, #16
 8000c34:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3c:	fb08 f10c 	mul.w	r1, r8, ip
 8000c40:	4299      	cmp	r1, r3
 8000c42:	d907      	bls.n	8000c54 <__udivmoddi4+0x124>
 8000c44:	18eb      	adds	r3, r5, r3
 8000c46:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c4a:	d202      	bcs.n	8000c52 <__udivmoddi4+0x122>
 8000c4c:	4299      	cmp	r1, r3
 8000c4e:	f200 80cd 	bhi.w	8000dec <__udivmoddi4+0x2bc>
 8000c52:	4684      	mov	ip, r0
 8000c54:	1a59      	subs	r1, r3, r1
 8000c56:	b2a3      	uxth	r3, r4
 8000c58:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c5c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c60:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c64:	fb08 f800 	mul.w	r8, r8, r0
 8000c68:	45a0      	cmp	r8, r4
 8000c6a:	d907      	bls.n	8000c7c <__udivmoddi4+0x14c>
 8000c6c:	192c      	adds	r4, r5, r4
 8000c6e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c72:	d202      	bcs.n	8000c7a <__udivmoddi4+0x14a>
 8000c74:	45a0      	cmp	r8, r4
 8000c76:	f200 80b6 	bhi.w	8000de6 <__udivmoddi4+0x2b6>
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	eba4 0408 	sub.w	r4, r4, r8
 8000c80:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c84:	e79f      	b.n	8000bc6 <__udivmoddi4+0x96>
 8000c86:	f1c7 0c20 	rsb	ip, r7, #32
 8000c8a:	40bb      	lsls	r3, r7
 8000c8c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c90:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c94:	fa01 f407 	lsl.w	r4, r1, r7
 8000c98:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c9c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ca0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ca4:	4325      	orrs	r5, r4
 8000ca6:	fbb3 f9f8 	udiv	r9, r3, r8
 8000caa:	0c2c      	lsrs	r4, r5, #16
 8000cac:	fb08 3319 	mls	r3, r8, r9, r3
 8000cb0:	fa1f fa8e 	uxth.w	sl, lr
 8000cb4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cb8:	fb09 f40a 	mul.w	r4, r9, sl
 8000cbc:	429c      	cmp	r4, r3
 8000cbe:	fa02 f207 	lsl.w	r2, r2, r7
 8000cc2:	fa00 f107 	lsl.w	r1, r0, r7
 8000cc6:	d90b      	bls.n	8000ce0 <__udivmoddi4+0x1b0>
 8000cc8:	eb1e 0303 	adds.w	r3, lr, r3
 8000ccc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cd0:	f080 8087 	bcs.w	8000de2 <__udivmoddi4+0x2b2>
 8000cd4:	429c      	cmp	r4, r3
 8000cd6:	f240 8084 	bls.w	8000de2 <__udivmoddi4+0x2b2>
 8000cda:	f1a9 0902 	sub.w	r9, r9, #2
 8000cde:	4473      	add	r3, lr
 8000ce0:	1b1b      	subs	r3, r3, r4
 8000ce2:	b2ad      	uxth	r5, r5
 8000ce4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce8:	fb08 3310 	mls	r3, r8, r0, r3
 8000cec:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cf0:	fb00 fa0a 	mul.w	sl, r0, sl
 8000cf4:	45a2      	cmp	sl, r4
 8000cf6:	d908      	bls.n	8000d0a <__udivmoddi4+0x1da>
 8000cf8:	eb1e 0404 	adds.w	r4, lr, r4
 8000cfc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d00:	d26b      	bcs.n	8000dda <__udivmoddi4+0x2aa>
 8000d02:	45a2      	cmp	sl, r4
 8000d04:	d969      	bls.n	8000dda <__udivmoddi4+0x2aa>
 8000d06:	3802      	subs	r0, #2
 8000d08:	4474      	add	r4, lr
 8000d0a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d0e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d12:	eba4 040a 	sub.w	r4, r4, sl
 8000d16:	454c      	cmp	r4, r9
 8000d18:	46c2      	mov	sl, r8
 8000d1a:	464b      	mov	r3, r9
 8000d1c:	d354      	bcc.n	8000dc8 <__udivmoddi4+0x298>
 8000d1e:	d051      	beq.n	8000dc4 <__udivmoddi4+0x294>
 8000d20:	2e00      	cmp	r6, #0
 8000d22:	d069      	beq.n	8000df8 <__udivmoddi4+0x2c8>
 8000d24:	ebb1 050a 	subs.w	r5, r1, sl
 8000d28:	eb64 0403 	sbc.w	r4, r4, r3
 8000d2c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d30:	40fd      	lsrs	r5, r7
 8000d32:	40fc      	lsrs	r4, r7
 8000d34:	ea4c 0505 	orr.w	r5, ip, r5
 8000d38:	e9c6 5400 	strd	r5, r4, [r6]
 8000d3c:	2700      	movs	r7, #0
 8000d3e:	e747      	b.n	8000bd0 <__udivmoddi4+0xa0>
 8000d40:	f1c2 0320 	rsb	r3, r2, #32
 8000d44:	fa20 f703 	lsr.w	r7, r0, r3
 8000d48:	4095      	lsls	r5, r2
 8000d4a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4e:	fa21 f303 	lsr.w	r3, r1, r3
 8000d52:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d56:	4338      	orrs	r0, r7
 8000d58:	0c01      	lsrs	r1, r0, #16
 8000d5a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d5e:	fa1f f885 	uxth.w	r8, r5
 8000d62:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d66:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d6a:	fb07 f308 	mul.w	r3, r7, r8
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	fa04 f402 	lsl.w	r4, r4, r2
 8000d74:	d907      	bls.n	8000d86 <__udivmoddi4+0x256>
 8000d76:	1869      	adds	r1, r5, r1
 8000d78:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d7c:	d22f      	bcs.n	8000dde <__udivmoddi4+0x2ae>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d92d      	bls.n	8000dde <__udivmoddi4+0x2ae>
 8000d82:	3f02      	subs	r7, #2
 8000d84:	4429      	add	r1, r5
 8000d86:	1acb      	subs	r3, r1, r3
 8000d88:	b281      	uxth	r1, r0
 8000d8a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d8e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d92:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d96:	fb00 f308 	mul.w	r3, r0, r8
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	d907      	bls.n	8000dae <__udivmoddi4+0x27e>
 8000d9e:	1869      	adds	r1, r5, r1
 8000da0:	f100 3cff 	add.w	ip, r0, #4294967295
 8000da4:	d217      	bcs.n	8000dd6 <__udivmoddi4+0x2a6>
 8000da6:	428b      	cmp	r3, r1
 8000da8:	d915      	bls.n	8000dd6 <__udivmoddi4+0x2a6>
 8000daa:	3802      	subs	r0, #2
 8000dac:	4429      	add	r1, r5
 8000dae:	1ac9      	subs	r1, r1, r3
 8000db0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000db4:	e73b      	b.n	8000c2e <__udivmoddi4+0xfe>
 8000db6:	4637      	mov	r7, r6
 8000db8:	4630      	mov	r0, r6
 8000dba:	e709      	b.n	8000bd0 <__udivmoddi4+0xa0>
 8000dbc:	4607      	mov	r7, r0
 8000dbe:	e6e7      	b.n	8000b90 <__udivmoddi4+0x60>
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	e6fb      	b.n	8000bbc <__udivmoddi4+0x8c>
 8000dc4:	4541      	cmp	r1, r8
 8000dc6:	d2ab      	bcs.n	8000d20 <__udivmoddi4+0x1f0>
 8000dc8:	ebb8 0a02 	subs.w	sl, r8, r2
 8000dcc:	eb69 020e 	sbc.w	r2, r9, lr
 8000dd0:	3801      	subs	r0, #1
 8000dd2:	4613      	mov	r3, r2
 8000dd4:	e7a4      	b.n	8000d20 <__udivmoddi4+0x1f0>
 8000dd6:	4660      	mov	r0, ip
 8000dd8:	e7e9      	b.n	8000dae <__udivmoddi4+0x27e>
 8000dda:	4618      	mov	r0, r3
 8000ddc:	e795      	b.n	8000d0a <__udivmoddi4+0x1da>
 8000dde:	4667      	mov	r7, ip
 8000de0:	e7d1      	b.n	8000d86 <__udivmoddi4+0x256>
 8000de2:	4681      	mov	r9, r0
 8000de4:	e77c      	b.n	8000ce0 <__udivmoddi4+0x1b0>
 8000de6:	3802      	subs	r0, #2
 8000de8:	442c      	add	r4, r5
 8000dea:	e747      	b.n	8000c7c <__udivmoddi4+0x14c>
 8000dec:	f1ac 0c02 	sub.w	ip, ip, #2
 8000df0:	442b      	add	r3, r5
 8000df2:	e72f      	b.n	8000c54 <__udivmoddi4+0x124>
 8000df4:	4638      	mov	r0, r7
 8000df6:	e708      	b.n	8000c0a <__udivmoddi4+0xda>
 8000df8:	4637      	mov	r7, r6
 8000dfa:	e6e9      	b.n	8000bd0 <__udivmoddi4+0xa0>

08000dfc <__aeabi_idiv0>:
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop

08000e00 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b08a      	sub	sp, #40	; 0x28
 8000e04:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e06:	f107 0314 	add.w	r3, r7, #20
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	605a      	str	r2, [r3, #4]
 8000e10:	609a      	str	r2, [r3, #8]
 8000e12:	60da      	str	r2, [r3, #12]
 8000e14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e16:	4b2b      	ldr	r3, [pc, #172]	; (8000ec4 <MX_GPIO_Init+0xc4>)
 8000e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1a:	4a2a      	ldr	r2, [pc, #168]	; (8000ec4 <MX_GPIO_Init+0xc4>)
 8000e1c:	f043 0304 	orr.w	r3, r3, #4
 8000e20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e22:	4b28      	ldr	r3, [pc, #160]	; (8000ec4 <MX_GPIO_Init+0xc4>)
 8000e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e26:	f003 0304 	and.w	r3, r3, #4
 8000e2a:	613b      	str	r3, [r7, #16]
 8000e2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e2e:	4b25      	ldr	r3, [pc, #148]	; (8000ec4 <MX_GPIO_Init+0xc4>)
 8000e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e32:	4a24      	ldr	r2, [pc, #144]	; (8000ec4 <MX_GPIO_Init+0xc4>)
 8000e34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e3a:	4b22      	ldr	r3, [pc, #136]	; (8000ec4 <MX_GPIO_Init+0xc4>)
 8000e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e46:	4b1f      	ldr	r3, [pc, #124]	; (8000ec4 <MX_GPIO_Init+0xc4>)
 8000e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e4a:	4a1e      	ldr	r2, [pc, #120]	; (8000ec4 <MX_GPIO_Init+0xc4>)
 8000e4c:	f043 0301 	orr.w	r3, r3, #1
 8000e50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e52:	4b1c      	ldr	r3, [pc, #112]	; (8000ec4 <MX_GPIO_Init+0xc4>)
 8000e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	60bb      	str	r3, [r7, #8]
 8000e5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e5e:	4b19      	ldr	r3, [pc, #100]	; (8000ec4 <MX_GPIO_Init+0xc4>)
 8000e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e62:	4a18      	ldr	r2, [pc, #96]	; (8000ec4 <MX_GPIO_Init+0xc4>)
 8000e64:	f043 0302 	orr.w	r3, r3, #2
 8000e68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e6a:	4b16      	ldr	r3, [pc, #88]	; (8000ec4 <MX_GPIO_Init+0xc4>)
 8000e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e6e:	f003 0302 	and.w	r3, r3, #2
 8000e72:	607b      	str	r3, [r7, #4]
 8000e74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e76:	2200      	movs	r2, #0
 8000e78:	2120      	movs	r1, #32
 8000e7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e7e:	f000 fd43 	bl	8001908 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e88:	4b0f      	ldr	r3, [pc, #60]	; (8000ec8 <MX_GPIO_Init+0xc8>)
 8000e8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e90:	f107 0314 	add.w	r3, r7, #20
 8000e94:	4619      	mov	r1, r3
 8000e96:	480d      	ldr	r0, [pc, #52]	; (8000ecc <MX_GPIO_Init+0xcc>)
 8000e98:	f000 fb8e 	bl	80015b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000e9c:	2320      	movs	r3, #32
 8000e9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000eac:	f107 0314 	add.w	r3, r7, #20
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eb6:	f000 fb7f 	bl	80015b8 <HAL_GPIO_Init>

}
 8000eba:	bf00      	nop
 8000ebc:	3728      	adds	r7, #40	; 0x28
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40021000 	.word	0x40021000
 8000ec8:	10210000 	.word	0x10210000
 8000ecc:	48000800 	.word	0x48000800

08000ed0 <delay>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay(int time)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b085      	sub	sp, #20
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
    int i;
    for (i = 0; i < time * 4000; i++) {}
 8000ed8:	2300      	movs	r3, #0
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	e002      	b.n	8000ee4 <delay+0x14>
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000eea:	fb02 f303 	mul.w	r3, r2, r3
 8000eee:	68fa      	ldr	r2, [r7, #12]
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	dbf4      	blt.n	8000ede <delay+0xe>
}
 8000ef4:	bf00      	nop
 8000ef6:	3714      	adds	r7, #20
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f06:	f000 f9f5 	bl	80012f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f0a:	f000 f81c 	bl	8000f46 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f0e:	f7ff ff77 	bl	8000e00 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f12:	f000 f953 	bl	80011bc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  uint16_t heh = 0;
 8000f16:	2300      	movs	r3, #0
 8000f18:	80fb      	strh	r3, [r7, #6]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 8000f1a:	2120      	movs	r1, #32
 8000f1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f20:	f000 fd0a 	bl	8001938 <HAL_GPIO_TogglePin>
	 //HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);

	  delay(1000);
 8000f24:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f28:	f7ff ffd2 	bl	8000ed0 <delay>
	  heh++;
 8000f2c:	88fb      	ldrh	r3, [r7, #6]
 8000f2e:	3301      	adds	r3, #1
 8000f30:	80fb      	strh	r3, [r7, #6]
	  HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 8000f32:	2120      	movs	r1, #32
 8000f34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f38:	f000 fcfe 	bl	8001938 <HAL_GPIO_TogglePin>

	  delay(1000);
 8000f3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f40:	f7ff ffc6 	bl	8000ed0 <delay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 8000f44:	e7e9      	b.n	8000f1a <main+0x1a>

08000f46 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b0b8      	sub	sp, #224	; 0xe0
 8000f4a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f4c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f50:	2244      	movs	r2, #68	; 0x44
 8000f52:	2100      	movs	r1, #0
 8000f54:	4618      	mov	r0, r3
 8000f56:	f002 fc6b 	bl	8003830 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f5a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000f5e:	2200      	movs	r2, #0
 8000f60:	601a      	str	r2, [r3, #0]
 8000f62:	605a      	str	r2, [r3, #4]
 8000f64:	609a      	str	r2, [r3, #8]
 8000f66:	60da      	str	r2, [r3, #12]
 8000f68:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f6a:	463b      	mov	r3, r7
 8000f6c:	2288      	movs	r2, #136	; 0x88
 8000f6e:	2100      	movs	r1, #0
 8000f70:	4618      	mov	r0, r3
 8000f72:	f002 fc5d 	bl	8003830 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f76:	2302      	movs	r3, #2
 8000f78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f80:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f84:	2310      	movs	r3, #16
 8000f86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f90:	2302      	movs	r3, #2
 8000f92:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f96:	2301      	movs	r3, #1
 8000f98:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000f9c:	230a      	movs	r3, #10
 8000f9e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000fa2:	2307      	movs	r3, #7
 8000fa4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fb4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f000 fd3b 	bl	8001a34 <HAL_RCC_OscConfig>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000fc4:	f000 f834 	bl	8001030 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fc8:	230f      	movs	r3, #15
 8000fca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fce:	2303      	movs	r3, #3
 8000fd0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000fe6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000fea:	2104      	movs	r1, #4
 8000fec:	4618      	mov	r0, r3
 8000fee:	f001 f907 	bl	8002200 <HAL_RCC_ClockConfig>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000ff8:	f000 f81a 	bl	8001030 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001000:	2300      	movs	r3, #0
 8001002:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001004:	463b      	mov	r3, r7
 8001006:	4618      	mov	r0, r3
 8001008:	f001 fafe 	bl	8002608 <HAL_RCCEx_PeriphCLKConfig>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001012:	f000 f80d 	bl	8001030 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001016:	f44f 7000 	mov.w	r0, #512	; 0x200
 800101a:	f000 fcb5 	bl	8001988 <HAL_PWREx_ControlVoltageScaling>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8001024:	f000 f804 	bl	8001030 <Error_Handler>
  }
}
 8001028:	bf00      	nop
 800102a:	37e0      	adds	r7, #224	; 0xe0
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
	...

08001040 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001046:	4b0f      	ldr	r3, [pc, #60]	; (8001084 <HAL_MspInit+0x44>)
 8001048:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800104a:	4a0e      	ldr	r2, [pc, #56]	; (8001084 <HAL_MspInit+0x44>)
 800104c:	f043 0301 	orr.w	r3, r3, #1
 8001050:	6613      	str	r3, [r2, #96]	; 0x60
 8001052:	4b0c      	ldr	r3, [pc, #48]	; (8001084 <HAL_MspInit+0x44>)
 8001054:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001056:	f003 0301 	and.w	r3, r3, #1
 800105a:	607b      	str	r3, [r7, #4]
 800105c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800105e:	4b09      	ldr	r3, [pc, #36]	; (8001084 <HAL_MspInit+0x44>)
 8001060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001062:	4a08      	ldr	r2, [pc, #32]	; (8001084 <HAL_MspInit+0x44>)
 8001064:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001068:	6593      	str	r3, [r2, #88]	; 0x58
 800106a:	4b06      	ldr	r3, [pc, #24]	; (8001084 <HAL_MspInit+0x44>)
 800106c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800106e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001072:	603b      	str	r3, [r7, #0]
 8001074:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001076:	bf00      	nop
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	40021000 	.word	0x40021000

08001088 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800108c:	bf00      	nop
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr

08001096 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001096:	b480      	push	{r7}
 8001098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800109a:	e7fe      	b.n	800109a <HardFault_Handler+0x4>

0800109c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010a0:	e7fe      	b.n	80010a0 <MemManage_Handler+0x4>

080010a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010a2:	b480      	push	{r7}
 80010a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010a6:	e7fe      	b.n	80010a6 <BusFault_Handler+0x4>

080010a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010ac:	e7fe      	b.n	80010ac <UsageFault_Handler+0x4>

080010ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010ae:	b480      	push	{r7}
 80010b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010b2:	bf00      	nop
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010c0:	bf00      	nop
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr

080010ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ca:	b480      	push	{r7}
 80010cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010ce:	bf00      	nop
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010dc:	f000 f966 	bl	80013ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010e0:	bf00      	nop
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b086      	sub	sp, #24
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010ec:	4a14      	ldr	r2, [pc, #80]	; (8001140 <_sbrk+0x5c>)
 80010ee:	4b15      	ldr	r3, [pc, #84]	; (8001144 <_sbrk+0x60>)
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010f8:	4b13      	ldr	r3, [pc, #76]	; (8001148 <_sbrk+0x64>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d102      	bne.n	8001106 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001100:	4b11      	ldr	r3, [pc, #68]	; (8001148 <_sbrk+0x64>)
 8001102:	4a12      	ldr	r2, [pc, #72]	; (800114c <_sbrk+0x68>)
 8001104:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001106:	4b10      	ldr	r3, [pc, #64]	; (8001148 <_sbrk+0x64>)
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4413      	add	r3, r2
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	429a      	cmp	r2, r3
 8001112:	d207      	bcs.n	8001124 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001114:	f002 fb62 	bl	80037dc <__errno>
 8001118:	4602      	mov	r2, r0
 800111a:	230c      	movs	r3, #12
 800111c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800111e:	f04f 33ff 	mov.w	r3, #4294967295
 8001122:	e009      	b.n	8001138 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001124:	4b08      	ldr	r3, [pc, #32]	; (8001148 <_sbrk+0x64>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800112a:	4b07      	ldr	r3, [pc, #28]	; (8001148 <_sbrk+0x64>)
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4413      	add	r3, r2
 8001132:	4a05      	ldr	r2, [pc, #20]	; (8001148 <_sbrk+0x64>)
 8001134:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001136:	68fb      	ldr	r3, [r7, #12]
}
 8001138:	4618      	mov	r0, r3
 800113a:	3718      	adds	r7, #24
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	20018000 	.word	0x20018000
 8001144:	00000400 	.word	0x00000400
 8001148:	200001f8 	.word	0x200001f8
 800114c:	20000290 	.word	0x20000290

08001150 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001154:	4b17      	ldr	r3, [pc, #92]	; (80011b4 <SystemInit+0x64>)
 8001156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800115a:	4a16      	ldr	r2, [pc, #88]	; (80011b4 <SystemInit+0x64>)
 800115c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001160:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001164:	4b14      	ldr	r3, [pc, #80]	; (80011b8 <SystemInit+0x68>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a13      	ldr	r2, [pc, #76]	; (80011b8 <SystemInit+0x68>)
 800116a:	f043 0301 	orr.w	r3, r3, #1
 800116e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001170:	4b11      	ldr	r3, [pc, #68]	; (80011b8 <SystemInit+0x68>)
 8001172:	2200      	movs	r2, #0
 8001174:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001176:	4b10      	ldr	r3, [pc, #64]	; (80011b8 <SystemInit+0x68>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a0f      	ldr	r2, [pc, #60]	; (80011b8 <SystemInit+0x68>)
 800117c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001180:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001184:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001186:	4b0c      	ldr	r3, [pc, #48]	; (80011b8 <SystemInit+0x68>)
 8001188:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800118c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800118e:	4b0a      	ldr	r3, [pc, #40]	; (80011b8 <SystemInit+0x68>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a09      	ldr	r2, [pc, #36]	; (80011b8 <SystemInit+0x68>)
 8001194:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001198:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800119a:	4b07      	ldr	r3, [pc, #28]	; (80011b8 <SystemInit+0x68>)
 800119c:	2200      	movs	r2, #0
 800119e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80011a0:	4b04      	ldr	r3, [pc, #16]	; (80011b4 <SystemInit+0x64>)
 80011a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011a6:	609a      	str	r2, [r3, #8]
#endif
}
 80011a8:	bf00      	nop
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	e000ed00 	.word	0xe000ed00
 80011b8:	40021000 	.word	0x40021000

080011bc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80011c0:	4b14      	ldr	r3, [pc, #80]	; (8001214 <MX_USART2_UART_Init+0x58>)
 80011c2:	4a15      	ldr	r2, [pc, #84]	; (8001218 <MX_USART2_UART_Init+0x5c>)
 80011c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011c6:	4b13      	ldr	r3, [pc, #76]	; (8001214 <MX_USART2_UART_Init+0x58>)
 80011c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011ce:	4b11      	ldr	r3, [pc, #68]	; (8001214 <MX_USART2_UART_Init+0x58>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011d4:	4b0f      	ldr	r3, [pc, #60]	; (8001214 <MX_USART2_UART_Init+0x58>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011da:	4b0e      	ldr	r3, [pc, #56]	; (8001214 <MX_USART2_UART_Init+0x58>)
 80011dc:	2200      	movs	r2, #0
 80011de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011e0:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <MX_USART2_UART_Init+0x58>)
 80011e2:	220c      	movs	r2, #12
 80011e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011e6:	4b0b      	ldr	r3, [pc, #44]	; (8001214 <MX_USART2_UART_Init+0x58>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011ec:	4b09      	ldr	r3, [pc, #36]	; (8001214 <MX_USART2_UART_Init+0x58>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011f2:	4b08      	ldr	r3, [pc, #32]	; (8001214 <MX_USART2_UART_Init+0x58>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011f8:	4b06      	ldr	r3, [pc, #24]	; (8001214 <MX_USART2_UART_Init+0x58>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011fe:	4805      	ldr	r0, [pc, #20]	; (8001214 <MX_USART2_UART_Init+0x58>)
 8001200:	f001 feb2 	bl	8002f68 <HAL_UART_Init>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800120a:	f7ff ff11 	bl	8001030 <Error_Handler>
  }

}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20000204 	.word	0x20000204
 8001218:	40004400 	.word	0x40004400

0800121c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b08a      	sub	sp, #40	; 0x28
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001224:	f107 0314 	add.w	r3, r7, #20
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
 8001232:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a17      	ldr	r2, [pc, #92]	; (8001298 <HAL_UART_MspInit+0x7c>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d128      	bne.n	8001290 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800123e:	4b17      	ldr	r3, [pc, #92]	; (800129c <HAL_UART_MspInit+0x80>)
 8001240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001242:	4a16      	ldr	r2, [pc, #88]	; (800129c <HAL_UART_MspInit+0x80>)
 8001244:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001248:	6593      	str	r3, [r2, #88]	; 0x58
 800124a:	4b14      	ldr	r3, [pc, #80]	; (800129c <HAL_UART_MspInit+0x80>)
 800124c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800124e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001252:	613b      	str	r3, [r7, #16]
 8001254:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001256:	4b11      	ldr	r3, [pc, #68]	; (800129c <HAL_UART_MspInit+0x80>)
 8001258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125a:	4a10      	ldr	r2, [pc, #64]	; (800129c <HAL_UART_MspInit+0x80>)
 800125c:	f043 0301 	orr.w	r3, r3, #1
 8001260:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001262:	4b0e      	ldr	r3, [pc, #56]	; (800129c <HAL_UART_MspInit+0x80>)
 8001264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800126e:	230c      	movs	r3, #12
 8001270:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001272:	2302      	movs	r3, #2
 8001274:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	2300      	movs	r3, #0
 8001278:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800127a:	2303      	movs	r3, #3
 800127c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800127e:	2307      	movs	r3, #7
 8001280:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001282:	f107 0314 	add.w	r3, r7, #20
 8001286:	4619      	mov	r1, r3
 8001288:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800128c:	f000 f994 	bl	80015b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001290:	bf00      	nop
 8001292:	3728      	adds	r7, #40	; 0x28
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	40004400 	.word	0x40004400
 800129c:	40021000 	.word	0x40021000

080012a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80012a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012d8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012a4:	f7ff ff54 	bl	8001150 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80012a8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80012aa:	e003      	b.n	80012b4 <LoopCopyDataInit>

080012ac <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80012ac:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80012ae:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80012b0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80012b2:	3104      	adds	r1, #4

080012b4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80012b4:	480a      	ldr	r0, [pc, #40]	; (80012e0 <LoopForever+0xa>)
	ldr	r3, =_edata
 80012b6:	4b0b      	ldr	r3, [pc, #44]	; (80012e4 <LoopForever+0xe>)
	adds	r2, r0, r1
 80012b8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80012ba:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80012bc:	d3f6      	bcc.n	80012ac <CopyDataInit>
	ldr	r2, =_sbss
 80012be:	4a0a      	ldr	r2, [pc, #40]	; (80012e8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80012c0:	e002      	b.n	80012c8 <LoopFillZerobss>

080012c2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80012c2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80012c4:	f842 3b04 	str.w	r3, [r2], #4

080012c8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80012c8:	4b08      	ldr	r3, [pc, #32]	; (80012ec <LoopForever+0x16>)
	cmp	r2, r3
 80012ca:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80012cc:	d3f9      	bcc.n	80012c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012ce:	f002 fa8b 	bl	80037e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012d2:	f7ff fe15 	bl	8000f00 <main>

080012d6 <LoopForever>:

LoopForever:
    b LoopForever
 80012d6:	e7fe      	b.n	80012d6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80012d8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80012dc:	08005528 	.word	0x08005528
	ldr	r0, =_sdata
 80012e0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80012e4:	200001dc 	.word	0x200001dc
	ldr	r2, =_sbss
 80012e8:	200001dc 	.word	0x200001dc
	ldr	r3, = _ebss
 80012ec:	2000028c 	.word	0x2000028c

080012f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012f0:	e7fe      	b.n	80012f0 <ADC1_2_IRQHandler>
	...

080012f4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012fa:	2300      	movs	r3, #0
 80012fc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012fe:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <HAL_Init+0x3c>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a0b      	ldr	r2, [pc, #44]	; (8001330 <HAL_Init+0x3c>)
 8001304:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001308:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800130a:	2003      	movs	r0, #3
 800130c:	f000 f920 	bl	8001550 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001310:	2000      	movs	r0, #0
 8001312:	f000 f80f 	bl	8001334 <HAL_InitTick>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d002      	beq.n	8001322 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800131c:	2301      	movs	r3, #1
 800131e:	71fb      	strb	r3, [r7, #7]
 8001320:	e001      	b.n	8001326 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001322:	f7ff fe8d 	bl	8001040 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001326:	79fb      	ldrb	r3, [r7, #7]
}
 8001328:	4618      	mov	r0, r3
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	40022000 	.word	0x40022000

08001334 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800133c:	2300      	movs	r3, #0
 800133e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001340:	4b17      	ldr	r3, [pc, #92]	; (80013a0 <HAL_InitTick+0x6c>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d023      	beq.n	8001390 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001348:	4b16      	ldr	r3, [pc, #88]	; (80013a4 <HAL_InitTick+0x70>)
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	4b14      	ldr	r3, [pc, #80]	; (80013a0 <HAL_InitTick+0x6c>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	4619      	mov	r1, r3
 8001352:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001356:	fbb3 f3f1 	udiv	r3, r3, r1
 800135a:	fbb2 f3f3 	udiv	r3, r2, r3
 800135e:	4618      	mov	r0, r3
 8001360:	f000 f91d 	bl	800159e <HAL_SYSTICK_Config>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d10f      	bne.n	800138a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2b0f      	cmp	r3, #15
 800136e:	d809      	bhi.n	8001384 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001370:	2200      	movs	r2, #0
 8001372:	6879      	ldr	r1, [r7, #4]
 8001374:	f04f 30ff 	mov.w	r0, #4294967295
 8001378:	f000 f8f5 	bl	8001566 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800137c:	4a0a      	ldr	r2, [pc, #40]	; (80013a8 <HAL_InitTick+0x74>)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6013      	str	r3, [r2, #0]
 8001382:	e007      	b.n	8001394 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	73fb      	strb	r3, [r7, #15]
 8001388:	e004      	b.n	8001394 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	73fb      	strb	r3, [r7, #15]
 800138e:	e001      	b.n	8001394 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001394:	7bfb      	ldrb	r3, [r7, #15]
}
 8001396:	4618      	mov	r0, r3
 8001398:	3710      	adds	r7, #16
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	20000008 	.word	0x20000008
 80013a4:	20000000 	.word	0x20000000
 80013a8:	20000004 	.word	0x20000004

080013ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013b0:	4b06      	ldr	r3, [pc, #24]	; (80013cc <HAL_IncTick+0x20>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	461a      	mov	r2, r3
 80013b6:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <HAL_IncTick+0x24>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4413      	add	r3, r2
 80013bc:	4a04      	ldr	r2, [pc, #16]	; (80013d0 <HAL_IncTick+0x24>)
 80013be:	6013      	str	r3, [r2, #0]
}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	20000008 	.word	0x20000008
 80013d0:	20000284 	.word	0x20000284

080013d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  return uwTick;
 80013d8:	4b03      	ldr	r3, [pc, #12]	; (80013e8 <HAL_GetTick+0x14>)
 80013da:	681b      	ldr	r3, [r3, #0]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	20000284 	.word	0x20000284

080013ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b085      	sub	sp, #20
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f003 0307 	and.w	r3, r3, #7
 80013fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013fc:	4b0c      	ldr	r3, [pc, #48]	; (8001430 <__NVIC_SetPriorityGrouping+0x44>)
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001402:	68ba      	ldr	r2, [r7, #8]
 8001404:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001408:	4013      	ands	r3, r2
 800140a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001414:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001418:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800141c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800141e:	4a04      	ldr	r2, [pc, #16]	; (8001430 <__NVIC_SetPriorityGrouping+0x44>)
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	60d3      	str	r3, [r2, #12]
}
 8001424:	bf00      	nop
 8001426:	3714      	adds	r7, #20
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	e000ed00 	.word	0xe000ed00

08001434 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001438:	4b04      	ldr	r3, [pc, #16]	; (800144c <__NVIC_GetPriorityGrouping+0x18>)
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	0a1b      	lsrs	r3, r3, #8
 800143e:	f003 0307 	and.w	r3, r3, #7
}
 8001442:	4618      	mov	r0, r3
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	e000ed00 	.word	0xe000ed00

08001450 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	4603      	mov	r3, r0
 8001458:	6039      	str	r1, [r7, #0]
 800145a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800145c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001460:	2b00      	cmp	r3, #0
 8001462:	db0a      	blt.n	800147a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	b2da      	uxtb	r2, r3
 8001468:	490c      	ldr	r1, [pc, #48]	; (800149c <__NVIC_SetPriority+0x4c>)
 800146a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146e:	0112      	lsls	r2, r2, #4
 8001470:	b2d2      	uxtb	r2, r2
 8001472:	440b      	add	r3, r1
 8001474:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001478:	e00a      	b.n	8001490 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	b2da      	uxtb	r2, r3
 800147e:	4908      	ldr	r1, [pc, #32]	; (80014a0 <__NVIC_SetPriority+0x50>)
 8001480:	79fb      	ldrb	r3, [r7, #7]
 8001482:	f003 030f 	and.w	r3, r3, #15
 8001486:	3b04      	subs	r3, #4
 8001488:	0112      	lsls	r2, r2, #4
 800148a:	b2d2      	uxtb	r2, r2
 800148c:	440b      	add	r3, r1
 800148e:	761a      	strb	r2, [r3, #24]
}
 8001490:	bf00      	nop
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr
 800149c:	e000e100 	.word	0xe000e100
 80014a0:	e000ed00 	.word	0xe000ed00

080014a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b089      	sub	sp, #36	; 0x24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	60b9      	str	r1, [r7, #8]
 80014ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	f003 0307 	and.w	r3, r3, #7
 80014b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	f1c3 0307 	rsb	r3, r3, #7
 80014be:	2b04      	cmp	r3, #4
 80014c0:	bf28      	it	cs
 80014c2:	2304      	movcs	r3, #4
 80014c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	3304      	adds	r3, #4
 80014ca:	2b06      	cmp	r3, #6
 80014cc:	d902      	bls.n	80014d4 <NVIC_EncodePriority+0x30>
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	3b03      	subs	r3, #3
 80014d2:	e000      	b.n	80014d6 <NVIC_EncodePriority+0x32>
 80014d4:	2300      	movs	r3, #0
 80014d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d8:	f04f 32ff 	mov.w	r2, #4294967295
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	43da      	mvns	r2, r3
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	401a      	ands	r2, r3
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014ec:	f04f 31ff 	mov.w	r1, #4294967295
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	fa01 f303 	lsl.w	r3, r1, r3
 80014f6:	43d9      	mvns	r1, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014fc:	4313      	orrs	r3, r2
         );
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3724      	adds	r7, #36	; 0x24
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
	...

0800150c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	3b01      	subs	r3, #1
 8001518:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800151c:	d301      	bcc.n	8001522 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800151e:	2301      	movs	r3, #1
 8001520:	e00f      	b.n	8001542 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001522:	4a0a      	ldr	r2, [pc, #40]	; (800154c <SysTick_Config+0x40>)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	3b01      	subs	r3, #1
 8001528:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800152a:	210f      	movs	r1, #15
 800152c:	f04f 30ff 	mov.w	r0, #4294967295
 8001530:	f7ff ff8e 	bl	8001450 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001534:	4b05      	ldr	r3, [pc, #20]	; (800154c <SysTick_Config+0x40>)
 8001536:	2200      	movs	r2, #0
 8001538:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800153a:	4b04      	ldr	r3, [pc, #16]	; (800154c <SysTick_Config+0x40>)
 800153c:	2207      	movs	r2, #7
 800153e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001540:	2300      	movs	r3, #0
}
 8001542:	4618      	mov	r0, r3
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	e000e010 	.word	0xe000e010

08001550 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f7ff ff47 	bl	80013ec <__NVIC_SetPriorityGrouping>
}
 800155e:	bf00      	nop
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}

08001566 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001566:	b580      	push	{r7, lr}
 8001568:	b086      	sub	sp, #24
 800156a:	af00      	add	r7, sp, #0
 800156c:	4603      	mov	r3, r0
 800156e:	60b9      	str	r1, [r7, #8]
 8001570:	607a      	str	r2, [r7, #4]
 8001572:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001574:	2300      	movs	r3, #0
 8001576:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001578:	f7ff ff5c 	bl	8001434 <__NVIC_GetPriorityGrouping>
 800157c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	68b9      	ldr	r1, [r7, #8]
 8001582:	6978      	ldr	r0, [r7, #20]
 8001584:	f7ff ff8e 	bl	80014a4 <NVIC_EncodePriority>
 8001588:	4602      	mov	r2, r0
 800158a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800158e:	4611      	mov	r1, r2
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff ff5d 	bl	8001450 <__NVIC_SetPriority>
}
 8001596:	bf00      	nop
 8001598:	3718      	adds	r7, #24
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b082      	sub	sp, #8
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f7ff ffb0 	bl	800150c <SysTick_Config>
 80015ac:	4603      	mov	r3, r0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
	...

080015b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b087      	sub	sp, #28
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015c2:	2300      	movs	r3, #0
 80015c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015c6:	e17f      	b.n	80018c8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	2101      	movs	r1, #1
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	fa01 f303 	lsl.w	r3, r1, r3
 80015d4:	4013      	ands	r3, r2
 80015d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	f000 8171 	beq.w	80018c2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d00b      	beq.n	8001600 <HAL_GPIO_Init+0x48>
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d007      	beq.n	8001600 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015f4:	2b11      	cmp	r3, #17
 80015f6:	d003      	beq.n	8001600 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	2b12      	cmp	r3, #18
 80015fe:	d130      	bne.n	8001662 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	005b      	lsls	r3, r3, #1
 800160a:	2203      	movs	r2, #3
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	43db      	mvns	r3, r3
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	4013      	ands	r3, r2
 8001616:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	68da      	ldr	r2, [r3, #12]
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	693a      	ldr	r2, [r7, #16]
 8001626:	4313      	orrs	r3, r2
 8001628:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	693a      	ldr	r2, [r7, #16]
 800162e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001636:	2201      	movs	r2, #1
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	fa02 f303 	lsl.w	r3, r2, r3
 800163e:	43db      	mvns	r3, r3
 8001640:	693a      	ldr	r2, [r7, #16]
 8001642:	4013      	ands	r3, r2
 8001644:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	091b      	lsrs	r3, r3, #4
 800164c:	f003 0201 	and.w	r2, r3, #1
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	4313      	orrs	r3, r2
 800165a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	693a      	ldr	r2, [r7, #16]
 8001660:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f003 0303 	and.w	r3, r3, #3
 800166a:	2b03      	cmp	r3, #3
 800166c:	d118      	bne.n	80016a0 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001672:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001674:	2201      	movs	r2, #1
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	43db      	mvns	r3, r3
 800167e:	693a      	ldr	r2, [r7, #16]
 8001680:	4013      	ands	r3, r2
 8001682:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	08db      	lsrs	r3, r3, #3
 800168a:	f003 0201 	and.w	r2, r3, #1
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	fa02 f303 	lsl.w	r3, r2, r3
 8001694:	693a      	ldr	r2, [r7, #16]
 8001696:	4313      	orrs	r3, r2
 8001698:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	693a      	ldr	r2, [r7, #16]
 800169e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	2203      	movs	r2, #3
 80016ac:	fa02 f303 	lsl.w	r3, r2, r3
 80016b0:	43db      	mvns	r3, r3
 80016b2:	693a      	ldr	r2, [r7, #16]
 80016b4:	4013      	ands	r3, r2
 80016b6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	689a      	ldr	r2, [r3, #8]
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	693a      	ldr	r2, [r7, #16]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	693a      	ldr	r2, [r7, #16]
 80016ce:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d003      	beq.n	80016e0 <HAL_GPIO_Init+0x128>
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	2b12      	cmp	r3, #18
 80016de:	d123      	bne.n	8001728 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	08da      	lsrs	r2, r3, #3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	3208      	adds	r2, #8
 80016e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	f003 0307 	and.w	r3, r3, #7
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	220f      	movs	r2, #15
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	43db      	mvns	r3, r3
 80016fe:	693a      	ldr	r2, [r7, #16]
 8001700:	4013      	ands	r3, r2
 8001702:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	691a      	ldr	r2, [r3, #16]
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	f003 0307 	and.w	r3, r3, #7
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	4313      	orrs	r3, r2
 8001718:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	08da      	lsrs	r2, r3, #3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	3208      	adds	r2, #8
 8001722:	6939      	ldr	r1, [r7, #16]
 8001724:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	2203      	movs	r2, #3
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	43db      	mvns	r3, r3
 800173a:	693a      	ldr	r2, [r7, #16]
 800173c:	4013      	ands	r3, r2
 800173e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f003 0203 	and.w	r2, r3, #3
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	693a      	ldr	r2, [r7, #16]
 8001752:	4313      	orrs	r3, r2
 8001754:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	693a      	ldr	r2, [r7, #16]
 800175a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001764:	2b00      	cmp	r3, #0
 8001766:	f000 80ac 	beq.w	80018c2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800176a:	4b5e      	ldr	r3, [pc, #376]	; (80018e4 <HAL_GPIO_Init+0x32c>)
 800176c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800176e:	4a5d      	ldr	r2, [pc, #372]	; (80018e4 <HAL_GPIO_Init+0x32c>)
 8001770:	f043 0301 	orr.w	r3, r3, #1
 8001774:	6613      	str	r3, [r2, #96]	; 0x60
 8001776:	4b5b      	ldr	r3, [pc, #364]	; (80018e4 <HAL_GPIO_Init+0x32c>)
 8001778:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	60bb      	str	r3, [r7, #8]
 8001780:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001782:	4a59      	ldr	r2, [pc, #356]	; (80018e8 <HAL_GPIO_Init+0x330>)
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	089b      	lsrs	r3, r3, #2
 8001788:	3302      	adds	r3, #2
 800178a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800178e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	f003 0303 	and.w	r3, r3, #3
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	220f      	movs	r2, #15
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	43db      	mvns	r3, r3
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	4013      	ands	r3, r2
 80017a4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80017ac:	d025      	beq.n	80017fa <HAL_GPIO_Init+0x242>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a4e      	ldr	r2, [pc, #312]	; (80018ec <HAL_GPIO_Init+0x334>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d01f      	beq.n	80017f6 <HAL_GPIO_Init+0x23e>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4a4d      	ldr	r2, [pc, #308]	; (80018f0 <HAL_GPIO_Init+0x338>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d019      	beq.n	80017f2 <HAL_GPIO_Init+0x23a>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4a4c      	ldr	r2, [pc, #304]	; (80018f4 <HAL_GPIO_Init+0x33c>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d013      	beq.n	80017ee <HAL_GPIO_Init+0x236>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a4b      	ldr	r2, [pc, #300]	; (80018f8 <HAL_GPIO_Init+0x340>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d00d      	beq.n	80017ea <HAL_GPIO_Init+0x232>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4a4a      	ldr	r2, [pc, #296]	; (80018fc <HAL_GPIO_Init+0x344>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d007      	beq.n	80017e6 <HAL_GPIO_Init+0x22e>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4a49      	ldr	r2, [pc, #292]	; (8001900 <HAL_GPIO_Init+0x348>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d101      	bne.n	80017e2 <HAL_GPIO_Init+0x22a>
 80017de:	2306      	movs	r3, #6
 80017e0:	e00c      	b.n	80017fc <HAL_GPIO_Init+0x244>
 80017e2:	2307      	movs	r3, #7
 80017e4:	e00a      	b.n	80017fc <HAL_GPIO_Init+0x244>
 80017e6:	2305      	movs	r3, #5
 80017e8:	e008      	b.n	80017fc <HAL_GPIO_Init+0x244>
 80017ea:	2304      	movs	r3, #4
 80017ec:	e006      	b.n	80017fc <HAL_GPIO_Init+0x244>
 80017ee:	2303      	movs	r3, #3
 80017f0:	e004      	b.n	80017fc <HAL_GPIO_Init+0x244>
 80017f2:	2302      	movs	r3, #2
 80017f4:	e002      	b.n	80017fc <HAL_GPIO_Init+0x244>
 80017f6:	2301      	movs	r3, #1
 80017f8:	e000      	b.n	80017fc <HAL_GPIO_Init+0x244>
 80017fa:	2300      	movs	r3, #0
 80017fc:	697a      	ldr	r2, [r7, #20]
 80017fe:	f002 0203 	and.w	r2, r2, #3
 8001802:	0092      	lsls	r2, r2, #2
 8001804:	4093      	lsls	r3, r2
 8001806:	693a      	ldr	r2, [r7, #16]
 8001808:	4313      	orrs	r3, r2
 800180a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800180c:	4936      	ldr	r1, [pc, #216]	; (80018e8 <HAL_GPIO_Init+0x330>)
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	089b      	lsrs	r3, r3, #2
 8001812:	3302      	adds	r3, #2
 8001814:	693a      	ldr	r2, [r7, #16]
 8001816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800181a:	4b3a      	ldr	r3, [pc, #232]	; (8001904 <HAL_GPIO_Init+0x34c>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	43db      	mvns	r3, r3
 8001824:	693a      	ldr	r2, [r7, #16]
 8001826:	4013      	ands	r3, r2
 8001828:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d003      	beq.n	800183e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	4313      	orrs	r3, r2
 800183c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800183e:	4a31      	ldr	r2, [pc, #196]	; (8001904 <HAL_GPIO_Init+0x34c>)
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001844:	4b2f      	ldr	r3, [pc, #188]	; (8001904 <HAL_GPIO_Init+0x34c>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	43db      	mvns	r3, r3
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	4013      	ands	r3, r2
 8001852:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800185c:	2b00      	cmp	r3, #0
 800185e:	d003      	beq.n	8001868 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001860:	693a      	ldr	r2, [r7, #16]
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	4313      	orrs	r3, r2
 8001866:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001868:	4a26      	ldr	r2, [pc, #152]	; (8001904 <HAL_GPIO_Init+0x34c>)
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800186e:	4b25      	ldr	r3, [pc, #148]	; (8001904 <HAL_GPIO_Init+0x34c>)
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	43db      	mvns	r3, r3
 8001878:	693a      	ldr	r2, [r7, #16]
 800187a:	4013      	ands	r3, r2
 800187c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d003      	beq.n	8001892 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	4313      	orrs	r3, r2
 8001890:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001892:	4a1c      	ldr	r2, [pc, #112]	; (8001904 <HAL_GPIO_Init+0x34c>)
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001898:	4b1a      	ldr	r3, [pc, #104]	; (8001904 <HAL_GPIO_Init+0x34c>)
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	43db      	mvns	r3, r3
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	4013      	ands	r3, r2
 80018a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d003      	beq.n	80018bc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80018b4:	693a      	ldr	r2, [r7, #16]
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80018bc:	4a11      	ldr	r2, [pc, #68]	; (8001904 <HAL_GPIO_Init+0x34c>)
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	3301      	adds	r3, #1
 80018c6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	fa22 f303 	lsr.w	r3, r2, r3
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	f47f ae78 	bne.w	80015c8 <HAL_GPIO_Init+0x10>
  }
}
 80018d8:	bf00      	nop
 80018da:	371c      	adds	r7, #28
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr
 80018e4:	40021000 	.word	0x40021000
 80018e8:	40010000 	.word	0x40010000
 80018ec:	48000400 	.word	0x48000400
 80018f0:	48000800 	.word	0x48000800
 80018f4:	48000c00 	.word	0x48000c00
 80018f8:	48001000 	.word	0x48001000
 80018fc:	48001400 	.word	0x48001400
 8001900:	48001800 	.word	0x48001800
 8001904:	40010400 	.word	0x40010400

08001908 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	460b      	mov	r3, r1
 8001912:	807b      	strh	r3, [r7, #2]
 8001914:	4613      	mov	r3, r2
 8001916:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001918:	787b      	ldrb	r3, [r7, #1]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d003      	beq.n	8001926 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800191e:	887a      	ldrh	r2, [r7, #2]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001924:	e002      	b.n	800192c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001926:	887a      	ldrh	r2, [r7, #2]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800192c:	bf00      	nop
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001938:	b480      	push	{r7}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	460b      	mov	r3, r1
 8001942:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	695b      	ldr	r3, [r3, #20]
 8001948:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800194a:	887a      	ldrh	r2, [r7, #2]
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	4013      	ands	r3, r2
 8001950:	041a      	lsls	r2, r3, #16
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	43d9      	mvns	r1, r3
 8001956:	887b      	ldrh	r3, [r7, #2]
 8001958:	400b      	ands	r3, r1
 800195a:	431a      	orrs	r2, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	619a      	str	r2, [r3, #24]
}
 8001960:	bf00      	nop
 8001962:	3714      	adds	r7, #20
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001970:	4b04      	ldr	r3, [pc, #16]	; (8001984 <HAL_PWREx_GetVoltageRange+0x18>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001978:	4618      	mov	r0, r3
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	40007000 	.word	0x40007000

08001988 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001996:	d130      	bne.n	80019fa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001998:	4b23      	ldr	r3, [pc, #140]	; (8001a28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80019a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019a4:	d038      	beq.n	8001a18 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80019a6:	4b20      	ldr	r3, [pc, #128]	; (8001a28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80019ae:	4a1e      	ldr	r2, [pc, #120]	; (8001a28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019b4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80019b6:	4b1d      	ldr	r3, [pc, #116]	; (8001a2c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2232      	movs	r2, #50	; 0x32
 80019bc:	fb02 f303 	mul.w	r3, r2, r3
 80019c0:	4a1b      	ldr	r2, [pc, #108]	; (8001a30 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80019c2:	fba2 2303 	umull	r2, r3, r2, r3
 80019c6:	0c9b      	lsrs	r3, r3, #18
 80019c8:	3301      	adds	r3, #1
 80019ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019cc:	e002      	b.n	80019d4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	3b01      	subs	r3, #1
 80019d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019d4:	4b14      	ldr	r3, [pc, #80]	; (8001a28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019d6:	695b      	ldr	r3, [r3, #20]
 80019d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019e0:	d102      	bne.n	80019e8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d1f2      	bne.n	80019ce <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80019e8:	4b0f      	ldr	r3, [pc, #60]	; (8001a28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019ea:	695b      	ldr	r3, [r3, #20]
 80019ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019f4:	d110      	bne.n	8001a18 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e00f      	b.n	8001a1a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80019fa:	4b0b      	ldr	r3, [pc, #44]	; (8001a28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a06:	d007      	beq.n	8001a18 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a08:	4b07      	ldr	r3, [pc, #28]	; (8001a28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a10:	4a05      	ldr	r2, [pc, #20]	; (8001a28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a16:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3714      	adds	r7, #20
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	40007000 	.word	0x40007000
 8001a2c:	20000000 	.word	0x20000000
 8001a30:	431bde83 	.word	0x431bde83

08001a34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b088      	sub	sp, #32
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d101      	bne.n	8001a46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e3d4      	b.n	80021f0 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a46:	4ba1      	ldr	r3, [pc, #644]	; (8001ccc <HAL_RCC_OscConfig+0x298>)
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	f003 030c 	and.w	r3, r3, #12
 8001a4e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a50:	4b9e      	ldr	r3, [pc, #632]	; (8001ccc <HAL_RCC_OscConfig+0x298>)
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	f003 0303 	and.w	r3, r3, #3
 8001a58:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0310 	and.w	r3, r3, #16
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	f000 80e4 	beq.w	8001c30 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d007      	beq.n	8001a7e <HAL_RCC_OscConfig+0x4a>
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	2b0c      	cmp	r3, #12
 8001a72:	f040 808b 	bne.w	8001b8c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	f040 8087 	bne.w	8001b8c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a7e:	4b93      	ldr	r3, [pc, #588]	; (8001ccc <HAL_RCC_OscConfig+0x298>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d005      	beq.n	8001a96 <HAL_RCC_OscConfig+0x62>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	699b      	ldr	r3, [r3, #24]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d101      	bne.n	8001a96 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e3ac      	b.n	80021f0 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6a1a      	ldr	r2, [r3, #32]
 8001a9a:	4b8c      	ldr	r3, [pc, #560]	; (8001ccc <HAL_RCC_OscConfig+0x298>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0308 	and.w	r3, r3, #8
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d004      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x7c>
 8001aa6:	4b89      	ldr	r3, [pc, #548]	; (8001ccc <HAL_RCC_OscConfig+0x298>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001aae:	e005      	b.n	8001abc <HAL_RCC_OscConfig+0x88>
 8001ab0:	4b86      	ldr	r3, [pc, #536]	; (8001ccc <HAL_RCC_OscConfig+0x298>)
 8001ab2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ab6:	091b      	lsrs	r3, r3, #4
 8001ab8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d223      	bcs.n	8001b08 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6a1b      	ldr	r3, [r3, #32]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f000 fd3f 	bl	8002548 <RCC_SetFlashLatencyFromMSIRange>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e38d      	b.n	80021f0 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ad4:	4b7d      	ldr	r3, [pc, #500]	; (8001ccc <HAL_RCC_OscConfig+0x298>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a7c      	ldr	r2, [pc, #496]	; (8001ccc <HAL_RCC_OscConfig+0x298>)
 8001ada:	f043 0308 	orr.w	r3, r3, #8
 8001ade:	6013      	str	r3, [r2, #0]
 8001ae0:	4b7a      	ldr	r3, [pc, #488]	; (8001ccc <HAL_RCC_OscConfig+0x298>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6a1b      	ldr	r3, [r3, #32]
 8001aec:	4977      	ldr	r1, [pc, #476]	; (8001ccc <HAL_RCC_OscConfig+0x298>)
 8001aee:	4313      	orrs	r3, r2
 8001af0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001af2:	4b76      	ldr	r3, [pc, #472]	; (8001ccc <HAL_RCC_OscConfig+0x298>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	69db      	ldr	r3, [r3, #28]
 8001afe:	021b      	lsls	r3, r3, #8
 8001b00:	4972      	ldr	r1, [pc, #456]	; (8001ccc <HAL_RCC_OscConfig+0x298>)
 8001b02:	4313      	orrs	r3, r2
 8001b04:	604b      	str	r3, [r1, #4]
 8001b06:	e025      	b.n	8001b54 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b08:	4b70      	ldr	r3, [pc, #448]	; (8001ccc <HAL_RCC_OscConfig+0x298>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a6f      	ldr	r2, [pc, #444]	; (8001ccc <HAL_RCC_OscConfig+0x298>)
 8001b0e:	f043 0308 	orr.w	r3, r3, #8
 8001b12:	6013      	str	r3, [r2, #0]
 8001b14:	4b6d      	ldr	r3, [pc, #436]	; (8001ccc <HAL_RCC_OscConfig+0x298>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6a1b      	ldr	r3, [r3, #32]
 8001b20:	496a      	ldr	r1, [pc, #424]	; (8001ccc <HAL_RCC_OscConfig+0x298>)
 8001b22:	4313      	orrs	r3, r2
 8001b24:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b26:	4b69      	ldr	r3, [pc, #420]	; (8001ccc <HAL_RCC_OscConfig+0x298>)
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	69db      	ldr	r3, [r3, #28]
 8001b32:	021b      	lsls	r3, r3, #8
 8001b34:	4965      	ldr	r1, [pc, #404]	; (8001ccc <HAL_RCC_OscConfig+0x298>)
 8001b36:	4313      	orrs	r3, r2
 8001b38:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d109      	bne.n	8001b54 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6a1b      	ldr	r3, [r3, #32]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f000 fcff 	bl	8002548 <RCC_SetFlashLatencyFromMSIRange>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e34d      	b.n	80021f0 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b54:	f000 fc36 	bl	80023c4 <HAL_RCC_GetSysClockFreq>
 8001b58:	4601      	mov	r1, r0
 8001b5a:	4b5c      	ldr	r3, [pc, #368]	; (8001ccc <HAL_RCC_OscConfig+0x298>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	091b      	lsrs	r3, r3, #4
 8001b60:	f003 030f 	and.w	r3, r3, #15
 8001b64:	4a5a      	ldr	r2, [pc, #360]	; (8001cd0 <HAL_RCC_OscConfig+0x29c>)
 8001b66:	5cd3      	ldrb	r3, [r2, r3]
 8001b68:	f003 031f 	and.w	r3, r3, #31
 8001b6c:	fa21 f303 	lsr.w	r3, r1, r3
 8001b70:	4a58      	ldr	r2, [pc, #352]	; (8001cd4 <HAL_RCC_OscConfig+0x2a0>)
 8001b72:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001b74:	4b58      	ldr	r3, [pc, #352]	; (8001cd8 <HAL_RCC_OscConfig+0x2a4>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff fbdb 	bl	8001334 <HAL_InitTick>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001b82:	7bfb      	ldrb	r3, [r7, #15]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d052      	beq.n	8001c2e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001b88:	7bfb      	ldrb	r3, [r7, #15]
 8001b8a:	e331      	b.n	80021f0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	699b      	ldr	r3, [r3, #24]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d032      	beq.n	8001bfa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001b94:	4b4d      	ldr	r3, [pc, #308]	; (8001ccc <HAL_RCC_OscConfig+0x298>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a4c      	ldr	r2, [pc, #304]	; (8001ccc <HAL_RCC_OscConfig+0x298>)
 8001b9a:	f043 0301 	orr.w	r3, r3, #1
 8001b9e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ba0:	f7ff fc18 	bl	80013d4 <HAL_GetTick>
 8001ba4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ba6:	e008      	b.n	8001bba <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ba8:	f7ff fc14 	bl	80013d4 <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d901      	bls.n	8001bba <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e31a      	b.n	80021f0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bba:	4b44      	ldr	r3, [pc, #272]	; (8001ccc <HAL_RCC_OscConfig+0x298>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0302 	and.w	r3, r3, #2
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d0f0      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bc6:	4b41      	ldr	r3, [pc, #260]	; (8001ccc <HAL_RCC_OscConfig+0x298>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a40      	ldr	r2, [pc, #256]	; (8001ccc <HAL_RCC_OscConfig+0x298>)
 8001bcc:	f043 0308 	orr.w	r3, r3, #8
 8001bd0:	6013      	str	r3, [r2, #0]
 8001bd2:	4b3e      	ldr	r3, [pc, #248]	; (8001ccc <HAL_RCC_OscConfig+0x298>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6a1b      	ldr	r3, [r3, #32]
 8001bde:	493b      	ldr	r1, [pc, #236]	; (8001ccc <HAL_RCC_OscConfig+0x298>)
 8001be0:	4313      	orrs	r3, r2
 8001be2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001be4:	4b39      	ldr	r3, [pc, #228]	; (8001ccc <HAL_RCC_OscConfig+0x298>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	69db      	ldr	r3, [r3, #28]
 8001bf0:	021b      	lsls	r3, r3, #8
 8001bf2:	4936      	ldr	r1, [pc, #216]	; (8001ccc <HAL_RCC_OscConfig+0x298>)
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	604b      	str	r3, [r1, #4]
 8001bf8:	e01a      	b.n	8001c30 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001bfa:	4b34      	ldr	r3, [pc, #208]	; (8001ccc <HAL_RCC_OscConfig+0x298>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a33      	ldr	r2, [pc, #204]	; (8001ccc <HAL_RCC_OscConfig+0x298>)
 8001c00:	f023 0301 	bic.w	r3, r3, #1
 8001c04:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c06:	f7ff fbe5 	bl	80013d4 <HAL_GetTick>
 8001c0a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c0c:	e008      	b.n	8001c20 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c0e:	f7ff fbe1 	bl	80013d4 <HAL_GetTick>
 8001c12:	4602      	mov	r2, r0
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d901      	bls.n	8001c20 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e2e7      	b.n	80021f0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c20:	4b2a      	ldr	r3, [pc, #168]	; (8001ccc <HAL_RCC_OscConfig+0x298>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0302 	and.w	r3, r3, #2
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d1f0      	bne.n	8001c0e <HAL_RCC_OscConfig+0x1da>
 8001c2c:	e000      	b.n	8001c30 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c2e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0301 	and.w	r3, r3, #1
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d074      	beq.n	8001d26 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	2b08      	cmp	r3, #8
 8001c40:	d005      	beq.n	8001c4e <HAL_RCC_OscConfig+0x21a>
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	2b0c      	cmp	r3, #12
 8001c46:	d10e      	bne.n	8001c66 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	2b03      	cmp	r3, #3
 8001c4c:	d10b      	bne.n	8001c66 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c4e:	4b1f      	ldr	r3, [pc, #124]	; (8001ccc <HAL_RCC_OscConfig+0x298>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d064      	beq.n	8001d24 <HAL_RCC_OscConfig+0x2f0>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d160      	bne.n	8001d24 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e2c4      	b.n	80021f0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c6e:	d106      	bne.n	8001c7e <HAL_RCC_OscConfig+0x24a>
 8001c70:	4b16      	ldr	r3, [pc, #88]	; (8001ccc <HAL_RCC_OscConfig+0x298>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a15      	ldr	r2, [pc, #84]	; (8001ccc <HAL_RCC_OscConfig+0x298>)
 8001c76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c7a:	6013      	str	r3, [r2, #0]
 8001c7c:	e01d      	b.n	8001cba <HAL_RCC_OscConfig+0x286>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c86:	d10c      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x26e>
 8001c88:	4b10      	ldr	r3, [pc, #64]	; (8001ccc <HAL_RCC_OscConfig+0x298>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a0f      	ldr	r2, [pc, #60]	; (8001ccc <HAL_RCC_OscConfig+0x298>)
 8001c8e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c92:	6013      	str	r3, [r2, #0]
 8001c94:	4b0d      	ldr	r3, [pc, #52]	; (8001ccc <HAL_RCC_OscConfig+0x298>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a0c      	ldr	r2, [pc, #48]	; (8001ccc <HAL_RCC_OscConfig+0x298>)
 8001c9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c9e:	6013      	str	r3, [r2, #0]
 8001ca0:	e00b      	b.n	8001cba <HAL_RCC_OscConfig+0x286>
 8001ca2:	4b0a      	ldr	r3, [pc, #40]	; (8001ccc <HAL_RCC_OscConfig+0x298>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a09      	ldr	r2, [pc, #36]	; (8001ccc <HAL_RCC_OscConfig+0x298>)
 8001ca8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cac:	6013      	str	r3, [r2, #0]
 8001cae:	4b07      	ldr	r3, [pc, #28]	; (8001ccc <HAL_RCC_OscConfig+0x298>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a06      	ldr	r2, [pc, #24]	; (8001ccc <HAL_RCC_OscConfig+0x298>)
 8001cb4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cb8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d01c      	beq.n	8001cfc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc2:	f7ff fb87 	bl	80013d4 <HAL_GetTick>
 8001cc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cc8:	e011      	b.n	8001cee <HAL_RCC_OscConfig+0x2ba>
 8001cca:	bf00      	nop
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	080052a8 	.word	0x080052a8
 8001cd4:	20000000 	.word	0x20000000
 8001cd8:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cdc:	f7ff fb7a 	bl	80013d4 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b64      	cmp	r3, #100	; 0x64
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e280      	b.n	80021f0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cee:	4baf      	ldr	r3, [pc, #700]	; (8001fac <HAL_RCC_OscConfig+0x578>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d0f0      	beq.n	8001cdc <HAL_RCC_OscConfig+0x2a8>
 8001cfa:	e014      	b.n	8001d26 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cfc:	f7ff fb6a 	bl	80013d4 <HAL_GetTick>
 8001d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d02:	e008      	b.n	8001d16 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d04:	f7ff fb66 	bl	80013d4 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b64      	cmp	r3, #100	; 0x64
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e26c      	b.n	80021f0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d16:	4ba5      	ldr	r3, [pc, #660]	; (8001fac <HAL_RCC_OscConfig+0x578>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d1f0      	bne.n	8001d04 <HAL_RCC_OscConfig+0x2d0>
 8001d22:	e000      	b.n	8001d26 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d060      	beq.n	8001df4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	2b04      	cmp	r3, #4
 8001d36:	d005      	beq.n	8001d44 <HAL_RCC_OscConfig+0x310>
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	2b0c      	cmp	r3, #12
 8001d3c:	d119      	bne.n	8001d72 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d116      	bne.n	8001d72 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d44:	4b99      	ldr	r3, [pc, #612]	; (8001fac <HAL_RCC_OscConfig+0x578>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d005      	beq.n	8001d5c <HAL_RCC_OscConfig+0x328>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d101      	bne.n	8001d5c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e249      	b.n	80021f0 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d5c:	4b93      	ldr	r3, [pc, #588]	; (8001fac <HAL_RCC_OscConfig+0x578>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	691b      	ldr	r3, [r3, #16]
 8001d68:	061b      	lsls	r3, r3, #24
 8001d6a:	4990      	ldr	r1, [pc, #576]	; (8001fac <HAL_RCC_OscConfig+0x578>)
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d70:	e040      	b.n	8001df4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d023      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d7a:	4b8c      	ldr	r3, [pc, #560]	; (8001fac <HAL_RCC_OscConfig+0x578>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a8b      	ldr	r2, [pc, #556]	; (8001fac <HAL_RCC_OscConfig+0x578>)
 8001d80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d86:	f7ff fb25 	bl	80013d4 <HAL_GetTick>
 8001d8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d8c:	e008      	b.n	8001da0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d8e:	f7ff fb21 	bl	80013d4 <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d901      	bls.n	8001da0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e227      	b.n	80021f0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001da0:	4b82      	ldr	r3, [pc, #520]	; (8001fac <HAL_RCC_OscConfig+0x578>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d0f0      	beq.n	8001d8e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dac:	4b7f      	ldr	r3, [pc, #508]	; (8001fac <HAL_RCC_OscConfig+0x578>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	691b      	ldr	r3, [r3, #16]
 8001db8:	061b      	lsls	r3, r3, #24
 8001dba:	497c      	ldr	r1, [pc, #496]	; (8001fac <HAL_RCC_OscConfig+0x578>)
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	604b      	str	r3, [r1, #4]
 8001dc0:	e018      	b.n	8001df4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dc2:	4b7a      	ldr	r3, [pc, #488]	; (8001fac <HAL_RCC_OscConfig+0x578>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a79      	ldr	r2, [pc, #484]	; (8001fac <HAL_RCC_OscConfig+0x578>)
 8001dc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001dcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dce:	f7ff fb01 	bl	80013d4 <HAL_GetTick>
 8001dd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001dd4:	e008      	b.n	8001de8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dd6:	f7ff fafd 	bl	80013d4 <HAL_GetTick>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d901      	bls.n	8001de8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001de4:	2303      	movs	r3, #3
 8001de6:	e203      	b.n	80021f0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001de8:	4b70      	ldr	r3, [pc, #448]	; (8001fac <HAL_RCC_OscConfig+0x578>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d1f0      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0308 	and.w	r3, r3, #8
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d03c      	beq.n	8001e7a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	695b      	ldr	r3, [r3, #20]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d01c      	beq.n	8001e42 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e08:	4b68      	ldr	r3, [pc, #416]	; (8001fac <HAL_RCC_OscConfig+0x578>)
 8001e0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e0e:	4a67      	ldr	r2, [pc, #412]	; (8001fac <HAL_RCC_OscConfig+0x578>)
 8001e10:	f043 0301 	orr.w	r3, r3, #1
 8001e14:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e18:	f7ff fadc 	bl	80013d4 <HAL_GetTick>
 8001e1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e1e:	e008      	b.n	8001e32 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e20:	f7ff fad8 	bl	80013d4 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e1de      	b.n	80021f0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e32:	4b5e      	ldr	r3, [pc, #376]	; (8001fac <HAL_RCC_OscConfig+0x578>)
 8001e34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e38:	f003 0302 	and.w	r3, r3, #2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d0ef      	beq.n	8001e20 <HAL_RCC_OscConfig+0x3ec>
 8001e40:	e01b      	b.n	8001e7a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e42:	4b5a      	ldr	r3, [pc, #360]	; (8001fac <HAL_RCC_OscConfig+0x578>)
 8001e44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e48:	4a58      	ldr	r2, [pc, #352]	; (8001fac <HAL_RCC_OscConfig+0x578>)
 8001e4a:	f023 0301 	bic.w	r3, r3, #1
 8001e4e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e52:	f7ff fabf 	bl	80013d4 <HAL_GetTick>
 8001e56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e58:	e008      	b.n	8001e6c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e5a:	f7ff fabb 	bl	80013d4 <HAL_GetTick>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d901      	bls.n	8001e6c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e1c1      	b.n	80021f0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e6c:	4b4f      	ldr	r3, [pc, #316]	; (8001fac <HAL_RCC_OscConfig+0x578>)
 8001e6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d1ef      	bne.n	8001e5a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0304 	and.w	r3, r3, #4
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	f000 80a6 	beq.w	8001fd4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001e8c:	4b47      	ldr	r3, [pc, #284]	; (8001fac <HAL_RCC_OscConfig+0x578>)
 8001e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d10d      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e98:	4b44      	ldr	r3, [pc, #272]	; (8001fac <HAL_RCC_OscConfig+0x578>)
 8001e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e9c:	4a43      	ldr	r2, [pc, #268]	; (8001fac <HAL_RCC_OscConfig+0x578>)
 8001e9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ea2:	6593      	str	r3, [r2, #88]	; 0x58
 8001ea4:	4b41      	ldr	r3, [pc, #260]	; (8001fac <HAL_RCC_OscConfig+0x578>)
 8001ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eac:	60bb      	str	r3, [r7, #8]
 8001eae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001eb4:	4b3e      	ldr	r3, [pc, #248]	; (8001fb0 <HAL_RCC_OscConfig+0x57c>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d118      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ec0:	4b3b      	ldr	r3, [pc, #236]	; (8001fb0 <HAL_RCC_OscConfig+0x57c>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a3a      	ldr	r2, [pc, #232]	; (8001fb0 <HAL_RCC_OscConfig+0x57c>)
 8001ec6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ecc:	f7ff fa82 	bl	80013d4 <HAL_GetTick>
 8001ed0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ed2:	e008      	b.n	8001ee6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ed4:	f7ff fa7e 	bl	80013d4 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e184      	b.n	80021f0 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ee6:	4b32      	ldr	r3, [pc, #200]	; (8001fb0 <HAL_RCC_OscConfig+0x57c>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d0f0      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d108      	bne.n	8001f0c <HAL_RCC_OscConfig+0x4d8>
 8001efa:	4b2c      	ldr	r3, [pc, #176]	; (8001fac <HAL_RCC_OscConfig+0x578>)
 8001efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f00:	4a2a      	ldr	r2, [pc, #168]	; (8001fac <HAL_RCC_OscConfig+0x578>)
 8001f02:	f043 0301 	orr.w	r3, r3, #1
 8001f06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f0a:	e024      	b.n	8001f56 <HAL_RCC_OscConfig+0x522>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	2b05      	cmp	r3, #5
 8001f12:	d110      	bne.n	8001f36 <HAL_RCC_OscConfig+0x502>
 8001f14:	4b25      	ldr	r3, [pc, #148]	; (8001fac <HAL_RCC_OscConfig+0x578>)
 8001f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f1a:	4a24      	ldr	r2, [pc, #144]	; (8001fac <HAL_RCC_OscConfig+0x578>)
 8001f1c:	f043 0304 	orr.w	r3, r3, #4
 8001f20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f24:	4b21      	ldr	r3, [pc, #132]	; (8001fac <HAL_RCC_OscConfig+0x578>)
 8001f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f2a:	4a20      	ldr	r2, [pc, #128]	; (8001fac <HAL_RCC_OscConfig+0x578>)
 8001f2c:	f043 0301 	orr.w	r3, r3, #1
 8001f30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f34:	e00f      	b.n	8001f56 <HAL_RCC_OscConfig+0x522>
 8001f36:	4b1d      	ldr	r3, [pc, #116]	; (8001fac <HAL_RCC_OscConfig+0x578>)
 8001f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f3c:	4a1b      	ldr	r2, [pc, #108]	; (8001fac <HAL_RCC_OscConfig+0x578>)
 8001f3e:	f023 0301 	bic.w	r3, r3, #1
 8001f42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f46:	4b19      	ldr	r3, [pc, #100]	; (8001fac <HAL_RCC_OscConfig+0x578>)
 8001f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f4c:	4a17      	ldr	r2, [pc, #92]	; (8001fac <HAL_RCC_OscConfig+0x578>)
 8001f4e:	f023 0304 	bic.w	r3, r3, #4
 8001f52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d016      	beq.n	8001f8c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f5e:	f7ff fa39 	bl	80013d4 <HAL_GetTick>
 8001f62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f64:	e00a      	b.n	8001f7c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f66:	f7ff fa35 	bl	80013d4 <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d901      	bls.n	8001f7c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e139      	b.n	80021f0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f7c:	4b0b      	ldr	r3, [pc, #44]	; (8001fac <HAL_RCC_OscConfig+0x578>)
 8001f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d0ed      	beq.n	8001f66 <HAL_RCC_OscConfig+0x532>
 8001f8a:	e01a      	b.n	8001fc2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f8c:	f7ff fa22 	bl	80013d4 <HAL_GetTick>
 8001f90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f92:	e00f      	b.n	8001fb4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f94:	f7ff fa1e 	bl	80013d4 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d906      	bls.n	8001fb4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e122      	b.n	80021f0 <HAL_RCC_OscConfig+0x7bc>
 8001faa:	bf00      	nop
 8001fac:	40021000 	.word	0x40021000
 8001fb0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fb4:	4b90      	ldr	r3, [pc, #576]	; (80021f8 <HAL_RCC_OscConfig+0x7c4>)
 8001fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1e8      	bne.n	8001f94 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fc2:	7ffb      	ldrb	r3, [r7, #31]
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d105      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fc8:	4b8b      	ldr	r3, [pc, #556]	; (80021f8 <HAL_RCC_OscConfig+0x7c4>)
 8001fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fcc:	4a8a      	ldr	r2, [pc, #552]	; (80021f8 <HAL_RCC_OscConfig+0x7c4>)
 8001fce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fd2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	f000 8108 	beq.w	80021ee <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	f040 80d0 	bne.w	8002188 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001fe8:	4b83      	ldr	r3, [pc, #524]	; (80021f8 <HAL_RCC_OscConfig+0x7c4>)
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	f003 0203 	and.w	r2, r3, #3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d130      	bne.n	800205e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002006:	3b01      	subs	r3, #1
 8002008:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800200a:	429a      	cmp	r2, r3
 800200c:	d127      	bne.n	800205e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002018:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800201a:	429a      	cmp	r2, r3
 800201c:	d11f      	bne.n	800205e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002028:	2a07      	cmp	r2, #7
 800202a:	bf14      	ite	ne
 800202c:	2201      	movne	r2, #1
 800202e:	2200      	moveq	r2, #0
 8002030:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002032:	4293      	cmp	r3, r2
 8002034:	d113      	bne.n	800205e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002040:	085b      	lsrs	r3, r3, #1
 8002042:	3b01      	subs	r3, #1
 8002044:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002046:	429a      	cmp	r2, r3
 8002048:	d109      	bne.n	800205e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002054:	085b      	lsrs	r3, r3, #1
 8002056:	3b01      	subs	r3, #1
 8002058:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800205a:	429a      	cmp	r2, r3
 800205c:	d06e      	beq.n	800213c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	2b0c      	cmp	r3, #12
 8002062:	d069      	beq.n	8002138 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002064:	4b64      	ldr	r3, [pc, #400]	; (80021f8 <HAL_RCC_OscConfig+0x7c4>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d105      	bne.n	800207c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002070:	4b61      	ldr	r3, [pc, #388]	; (80021f8 <HAL_RCC_OscConfig+0x7c4>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e0b7      	b.n	80021f0 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002080:	4b5d      	ldr	r3, [pc, #372]	; (80021f8 <HAL_RCC_OscConfig+0x7c4>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a5c      	ldr	r2, [pc, #368]	; (80021f8 <HAL_RCC_OscConfig+0x7c4>)
 8002086:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800208a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800208c:	f7ff f9a2 	bl	80013d4 <HAL_GetTick>
 8002090:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002092:	e008      	b.n	80020a6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002094:	f7ff f99e 	bl	80013d4 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e0a4      	b.n	80021f0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020a6:	4b54      	ldr	r3, [pc, #336]	; (80021f8 <HAL_RCC_OscConfig+0x7c4>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d1f0      	bne.n	8002094 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020b2:	4b51      	ldr	r3, [pc, #324]	; (80021f8 <HAL_RCC_OscConfig+0x7c4>)
 80020b4:	68da      	ldr	r2, [r3, #12]
 80020b6:	4b51      	ldr	r3, [pc, #324]	; (80021fc <HAL_RCC_OscConfig+0x7c8>)
 80020b8:	4013      	ands	r3, r2
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80020c2:	3a01      	subs	r2, #1
 80020c4:	0112      	lsls	r2, r2, #4
 80020c6:	4311      	orrs	r1, r2
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80020cc:	0212      	lsls	r2, r2, #8
 80020ce:	4311      	orrs	r1, r2
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80020d4:	0852      	lsrs	r2, r2, #1
 80020d6:	3a01      	subs	r2, #1
 80020d8:	0552      	lsls	r2, r2, #21
 80020da:	4311      	orrs	r1, r2
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80020e0:	0852      	lsrs	r2, r2, #1
 80020e2:	3a01      	subs	r2, #1
 80020e4:	0652      	lsls	r2, r2, #25
 80020e6:	4311      	orrs	r1, r2
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80020ec:	0912      	lsrs	r2, r2, #4
 80020ee:	0452      	lsls	r2, r2, #17
 80020f0:	430a      	orrs	r2, r1
 80020f2:	4941      	ldr	r1, [pc, #260]	; (80021f8 <HAL_RCC_OscConfig+0x7c4>)
 80020f4:	4313      	orrs	r3, r2
 80020f6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80020f8:	4b3f      	ldr	r3, [pc, #252]	; (80021f8 <HAL_RCC_OscConfig+0x7c4>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a3e      	ldr	r2, [pc, #248]	; (80021f8 <HAL_RCC_OscConfig+0x7c4>)
 80020fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002102:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002104:	4b3c      	ldr	r3, [pc, #240]	; (80021f8 <HAL_RCC_OscConfig+0x7c4>)
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	4a3b      	ldr	r2, [pc, #236]	; (80021f8 <HAL_RCC_OscConfig+0x7c4>)
 800210a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800210e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002110:	f7ff f960 	bl	80013d4 <HAL_GetTick>
 8002114:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002116:	e008      	b.n	800212a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002118:	f7ff f95c 	bl	80013d4 <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	2b02      	cmp	r3, #2
 8002124:	d901      	bls.n	800212a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e062      	b.n	80021f0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800212a:	4b33      	ldr	r3, [pc, #204]	; (80021f8 <HAL_RCC_OscConfig+0x7c4>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d0f0      	beq.n	8002118 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002136:	e05a      	b.n	80021ee <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e059      	b.n	80021f0 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800213c:	4b2e      	ldr	r3, [pc, #184]	; (80021f8 <HAL_RCC_OscConfig+0x7c4>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d152      	bne.n	80021ee <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002148:	4b2b      	ldr	r3, [pc, #172]	; (80021f8 <HAL_RCC_OscConfig+0x7c4>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a2a      	ldr	r2, [pc, #168]	; (80021f8 <HAL_RCC_OscConfig+0x7c4>)
 800214e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002152:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002154:	4b28      	ldr	r3, [pc, #160]	; (80021f8 <HAL_RCC_OscConfig+0x7c4>)
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	4a27      	ldr	r2, [pc, #156]	; (80021f8 <HAL_RCC_OscConfig+0x7c4>)
 800215a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800215e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002160:	f7ff f938 	bl	80013d4 <HAL_GetTick>
 8002164:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002166:	e008      	b.n	800217a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002168:	f7ff f934 	bl	80013d4 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b02      	cmp	r3, #2
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e03a      	b.n	80021f0 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800217a:	4b1f      	ldr	r3, [pc, #124]	; (80021f8 <HAL_RCC_OscConfig+0x7c4>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d0f0      	beq.n	8002168 <HAL_RCC_OscConfig+0x734>
 8002186:	e032      	b.n	80021ee <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	2b0c      	cmp	r3, #12
 800218c:	d02d      	beq.n	80021ea <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800218e:	4b1a      	ldr	r3, [pc, #104]	; (80021f8 <HAL_RCC_OscConfig+0x7c4>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a19      	ldr	r2, [pc, #100]	; (80021f8 <HAL_RCC_OscConfig+0x7c4>)
 8002194:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002198:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800219a:	4b17      	ldr	r3, [pc, #92]	; (80021f8 <HAL_RCC_OscConfig+0x7c4>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d105      	bne.n	80021b2 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80021a6:	4b14      	ldr	r3, [pc, #80]	; (80021f8 <HAL_RCC_OscConfig+0x7c4>)
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	4a13      	ldr	r2, [pc, #76]	; (80021f8 <HAL_RCC_OscConfig+0x7c4>)
 80021ac:	f023 0303 	bic.w	r3, r3, #3
 80021b0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80021b2:	4b11      	ldr	r3, [pc, #68]	; (80021f8 <HAL_RCC_OscConfig+0x7c4>)
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	4a10      	ldr	r2, [pc, #64]	; (80021f8 <HAL_RCC_OscConfig+0x7c4>)
 80021b8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80021bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021c0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c2:	f7ff f907 	bl	80013d4 <HAL_GetTick>
 80021c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021c8:	e008      	b.n	80021dc <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ca:	f7ff f903 	bl	80013d4 <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d901      	bls.n	80021dc <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80021d8:	2303      	movs	r3, #3
 80021da:	e009      	b.n	80021f0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021dc:	4b06      	ldr	r3, [pc, #24]	; (80021f8 <HAL_RCC_OscConfig+0x7c4>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d1f0      	bne.n	80021ca <HAL_RCC_OscConfig+0x796>
 80021e8:	e001      	b.n	80021ee <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e000      	b.n	80021f0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80021ee:	2300      	movs	r3, #0
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3720      	adds	r7, #32
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	40021000 	.word	0x40021000
 80021fc:	f99d808c 	.word	0xf99d808c

08002200 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d101      	bne.n	8002214 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e0c8      	b.n	80023a6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002214:	4b66      	ldr	r3, [pc, #408]	; (80023b0 <HAL_RCC_ClockConfig+0x1b0>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0307 	and.w	r3, r3, #7
 800221c:	683a      	ldr	r2, [r7, #0]
 800221e:	429a      	cmp	r2, r3
 8002220:	d910      	bls.n	8002244 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002222:	4b63      	ldr	r3, [pc, #396]	; (80023b0 <HAL_RCC_ClockConfig+0x1b0>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f023 0207 	bic.w	r2, r3, #7
 800222a:	4961      	ldr	r1, [pc, #388]	; (80023b0 <HAL_RCC_ClockConfig+0x1b0>)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	4313      	orrs	r3, r2
 8002230:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002232:	4b5f      	ldr	r3, [pc, #380]	; (80023b0 <HAL_RCC_ClockConfig+0x1b0>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0307 	and.w	r3, r3, #7
 800223a:	683a      	ldr	r2, [r7, #0]
 800223c:	429a      	cmp	r2, r3
 800223e:	d001      	beq.n	8002244 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e0b0      	b.n	80023a6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0301 	and.w	r3, r3, #1
 800224c:	2b00      	cmp	r3, #0
 800224e:	d04c      	beq.n	80022ea <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	2b03      	cmp	r3, #3
 8002256:	d107      	bne.n	8002268 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002258:	4b56      	ldr	r3, [pc, #344]	; (80023b4 <HAL_RCC_ClockConfig+0x1b4>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d121      	bne.n	80022a8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e09e      	b.n	80023a6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	2b02      	cmp	r3, #2
 800226e:	d107      	bne.n	8002280 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002270:	4b50      	ldr	r3, [pc, #320]	; (80023b4 <HAL_RCC_ClockConfig+0x1b4>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d115      	bne.n	80022a8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e092      	b.n	80023a6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d107      	bne.n	8002298 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002288:	4b4a      	ldr	r3, [pc, #296]	; (80023b4 <HAL_RCC_ClockConfig+0x1b4>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0302 	and.w	r3, r3, #2
 8002290:	2b00      	cmp	r3, #0
 8002292:	d109      	bne.n	80022a8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e086      	b.n	80023a6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002298:	4b46      	ldr	r3, [pc, #280]	; (80023b4 <HAL_RCC_ClockConfig+0x1b4>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d101      	bne.n	80022a8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e07e      	b.n	80023a6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80022a8:	4b42      	ldr	r3, [pc, #264]	; (80023b4 <HAL_RCC_ClockConfig+0x1b4>)
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f023 0203 	bic.w	r2, r3, #3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	493f      	ldr	r1, [pc, #252]	; (80023b4 <HAL_RCC_ClockConfig+0x1b4>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022ba:	f7ff f88b 	bl	80013d4 <HAL_GetTick>
 80022be:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022c0:	e00a      	b.n	80022d8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022c2:	f7ff f887 	bl	80013d4 <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d901      	bls.n	80022d8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	e066      	b.n	80023a6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022d8:	4b36      	ldr	r3, [pc, #216]	; (80023b4 <HAL_RCC_ClockConfig+0x1b4>)
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f003 020c 	and.w	r2, r3, #12
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d1eb      	bne.n	80022c2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d008      	beq.n	8002308 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022f6:	4b2f      	ldr	r3, [pc, #188]	; (80023b4 <HAL_RCC_ClockConfig+0x1b4>)
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	492c      	ldr	r1, [pc, #176]	; (80023b4 <HAL_RCC_ClockConfig+0x1b4>)
 8002304:	4313      	orrs	r3, r2
 8002306:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002308:	4b29      	ldr	r3, [pc, #164]	; (80023b0 <HAL_RCC_ClockConfig+0x1b0>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0307 	and.w	r3, r3, #7
 8002310:	683a      	ldr	r2, [r7, #0]
 8002312:	429a      	cmp	r2, r3
 8002314:	d210      	bcs.n	8002338 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002316:	4b26      	ldr	r3, [pc, #152]	; (80023b0 <HAL_RCC_ClockConfig+0x1b0>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f023 0207 	bic.w	r2, r3, #7
 800231e:	4924      	ldr	r1, [pc, #144]	; (80023b0 <HAL_RCC_ClockConfig+0x1b0>)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	4313      	orrs	r3, r2
 8002324:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002326:	4b22      	ldr	r3, [pc, #136]	; (80023b0 <HAL_RCC_ClockConfig+0x1b0>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0307 	and.w	r3, r3, #7
 800232e:	683a      	ldr	r2, [r7, #0]
 8002330:	429a      	cmp	r2, r3
 8002332:	d001      	beq.n	8002338 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e036      	b.n	80023a6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0304 	and.w	r3, r3, #4
 8002340:	2b00      	cmp	r3, #0
 8002342:	d008      	beq.n	8002356 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002344:	4b1b      	ldr	r3, [pc, #108]	; (80023b4 <HAL_RCC_ClockConfig+0x1b4>)
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	4918      	ldr	r1, [pc, #96]	; (80023b4 <HAL_RCC_ClockConfig+0x1b4>)
 8002352:	4313      	orrs	r3, r2
 8002354:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0308 	and.w	r3, r3, #8
 800235e:	2b00      	cmp	r3, #0
 8002360:	d009      	beq.n	8002376 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002362:	4b14      	ldr	r3, [pc, #80]	; (80023b4 <HAL_RCC_ClockConfig+0x1b4>)
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	691b      	ldr	r3, [r3, #16]
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	4910      	ldr	r1, [pc, #64]	; (80023b4 <HAL_RCC_ClockConfig+0x1b4>)
 8002372:	4313      	orrs	r3, r2
 8002374:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002376:	f000 f825 	bl	80023c4 <HAL_RCC_GetSysClockFreq>
 800237a:	4601      	mov	r1, r0
 800237c:	4b0d      	ldr	r3, [pc, #52]	; (80023b4 <HAL_RCC_ClockConfig+0x1b4>)
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	091b      	lsrs	r3, r3, #4
 8002382:	f003 030f 	and.w	r3, r3, #15
 8002386:	4a0c      	ldr	r2, [pc, #48]	; (80023b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002388:	5cd3      	ldrb	r3, [r2, r3]
 800238a:	f003 031f 	and.w	r3, r3, #31
 800238e:	fa21 f303 	lsr.w	r3, r1, r3
 8002392:	4a0a      	ldr	r2, [pc, #40]	; (80023bc <HAL_RCC_ClockConfig+0x1bc>)
 8002394:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002396:	4b0a      	ldr	r3, [pc, #40]	; (80023c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4618      	mov	r0, r3
 800239c:	f7fe ffca 	bl	8001334 <HAL_InitTick>
 80023a0:	4603      	mov	r3, r0
 80023a2:	72fb      	strb	r3, [r7, #11]

  return status;
 80023a4:	7afb      	ldrb	r3, [r7, #11]
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3710      	adds	r7, #16
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	40022000 	.word	0x40022000
 80023b4:	40021000 	.word	0x40021000
 80023b8:	080052a8 	.word	0x080052a8
 80023bc:	20000000 	.word	0x20000000
 80023c0:	20000004 	.word	0x20000004

080023c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b089      	sub	sp, #36	; 0x24
 80023c8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80023ca:	2300      	movs	r3, #0
 80023cc:	61fb      	str	r3, [r7, #28]
 80023ce:	2300      	movs	r3, #0
 80023d0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023d2:	4b3d      	ldr	r3, [pc, #244]	; (80024c8 <HAL_RCC_GetSysClockFreq+0x104>)
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	f003 030c 	and.w	r3, r3, #12
 80023da:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023dc:	4b3a      	ldr	r3, [pc, #232]	; (80024c8 <HAL_RCC_GetSysClockFreq+0x104>)
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	f003 0303 	and.w	r3, r3, #3
 80023e4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d005      	beq.n	80023f8 <HAL_RCC_GetSysClockFreq+0x34>
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	2b0c      	cmp	r3, #12
 80023f0:	d121      	bne.n	8002436 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d11e      	bne.n	8002436 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80023f8:	4b33      	ldr	r3, [pc, #204]	; (80024c8 <HAL_RCC_GetSysClockFreq+0x104>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0308 	and.w	r3, r3, #8
 8002400:	2b00      	cmp	r3, #0
 8002402:	d107      	bne.n	8002414 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002404:	4b30      	ldr	r3, [pc, #192]	; (80024c8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002406:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800240a:	0a1b      	lsrs	r3, r3, #8
 800240c:	f003 030f 	and.w	r3, r3, #15
 8002410:	61fb      	str	r3, [r7, #28]
 8002412:	e005      	b.n	8002420 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002414:	4b2c      	ldr	r3, [pc, #176]	; (80024c8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	091b      	lsrs	r3, r3, #4
 800241a:	f003 030f 	and.w	r3, r3, #15
 800241e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002420:	4a2a      	ldr	r2, [pc, #168]	; (80024cc <HAL_RCC_GetSysClockFreq+0x108>)
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002428:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d10d      	bne.n	800244c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002434:	e00a      	b.n	800244c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	2b04      	cmp	r3, #4
 800243a:	d102      	bne.n	8002442 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800243c:	4b24      	ldr	r3, [pc, #144]	; (80024d0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800243e:	61bb      	str	r3, [r7, #24]
 8002440:	e004      	b.n	800244c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	2b08      	cmp	r3, #8
 8002446:	d101      	bne.n	800244c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002448:	4b22      	ldr	r3, [pc, #136]	; (80024d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800244a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	2b0c      	cmp	r3, #12
 8002450:	d133      	bne.n	80024ba <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002452:	4b1d      	ldr	r3, [pc, #116]	; (80024c8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	f003 0303 	and.w	r3, r3, #3
 800245a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	2b02      	cmp	r3, #2
 8002460:	d002      	beq.n	8002468 <HAL_RCC_GetSysClockFreq+0xa4>
 8002462:	2b03      	cmp	r3, #3
 8002464:	d003      	beq.n	800246e <HAL_RCC_GetSysClockFreq+0xaa>
 8002466:	e005      	b.n	8002474 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002468:	4b19      	ldr	r3, [pc, #100]	; (80024d0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800246a:	617b      	str	r3, [r7, #20]
      break;
 800246c:	e005      	b.n	800247a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800246e:	4b19      	ldr	r3, [pc, #100]	; (80024d4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002470:	617b      	str	r3, [r7, #20]
      break;
 8002472:	e002      	b.n	800247a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	617b      	str	r3, [r7, #20]
      break;
 8002478:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800247a:	4b13      	ldr	r3, [pc, #76]	; (80024c8 <HAL_RCC_GetSysClockFreq+0x104>)
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	091b      	lsrs	r3, r3, #4
 8002480:	f003 0307 	and.w	r3, r3, #7
 8002484:	3301      	adds	r3, #1
 8002486:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002488:	4b0f      	ldr	r3, [pc, #60]	; (80024c8 <HAL_RCC_GetSysClockFreq+0x104>)
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	0a1b      	lsrs	r3, r3, #8
 800248e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002492:	697a      	ldr	r2, [r7, #20]
 8002494:	fb02 f203 	mul.w	r2, r2, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	fbb2 f3f3 	udiv	r3, r2, r3
 800249e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80024a0:	4b09      	ldr	r3, [pc, #36]	; (80024c8 <HAL_RCC_GetSysClockFreq+0x104>)
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	0e5b      	lsrs	r3, r3, #25
 80024a6:	f003 0303 	and.w	r3, r3, #3
 80024aa:	3301      	adds	r3, #1
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80024b0:	697a      	ldr	r2, [r7, #20]
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024b8:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80024ba:	69bb      	ldr	r3, [r7, #24]
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3724      	adds	r7, #36	; 0x24
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr
 80024c8:	40021000 	.word	0x40021000
 80024cc:	080052c0 	.word	0x080052c0
 80024d0:	00f42400 	.word	0x00f42400
 80024d4:	007a1200 	.word	0x007a1200

080024d8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024dc:	4b03      	ldr	r3, [pc, #12]	; (80024ec <HAL_RCC_GetHCLKFreq+0x14>)
 80024de:	681b      	ldr	r3, [r3, #0]
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	20000000 	.word	0x20000000

080024f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80024f4:	f7ff fff0 	bl	80024d8 <HAL_RCC_GetHCLKFreq>
 80024f8:	4601      	mov	r1, r0
 80024fa:	4b06      	ldr	r3, [pc, #24]	; (8002514 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	0a1b      	lsrs	r3, r3, #8
 8002500:	f003 0307 	and.w	r3, r3, #7
 8002504:	4a04      	ldr	r2, [pc, #16]	; (8002518 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002506:	5cd3      	ldrb	r3, [r2, r3]
 8002508:	f003 031f 	and.w	r3, r3, #31
 800250c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002510:	4618      	mov	r0, r3
 8002512:	bd80      	pop	{r7, pc}
 8002514:	40021000 	.word	0x40021000
 8002518:	080052b8 	.word	0x080052b8

0800251c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002520:	f7ff ffda 	bl	80024d8 <HAL_RCC_GetHCLKFreq>
 8002524:	4601      	mov	r1, r0
 8002526:	4b06      	ldr	r3, [pc, #24]	; (8002540 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	0adb      	lsrs	r3, r3, #11
 800252c:	f003 0307 	and.w	r3, r3, #7
 8002530:	4a04      	ldr	r2, [pc, #16]	; (8002544 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002532:	5cd3      	ldrb	r3, [r2, r3]
 8002534:	f003 031f 	and.w	r3, r3, #31
 8002538:	fa21 f303 	lsr.w	r3, r1, r3
}
 800253c:	4618      	mov	r0, r3
 800253e:	bd80      	pop	{r7, pc}
 8002540:	40021000 	.word	0x40021000
 8002544:	080052b8 	.word	0x080052b8

08002548 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002550:	2300      	movs	r3, #0
 8002552:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002554:	4b2a      	ldr	r3, [pc, #168]	; (8002600 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d003      	beq.n	8002568 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002560:	f7ff fa04 	bl	800196c <HAL_PWREx_GetVoltageRange>
 8002564:	6178      	str	r0, [r7, #20]
 8002566:	e014      	b.n	8002592 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002568:	4b25      	ldr	r3, [pc, #148]	; (8002600 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800256a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800256c:	4a24      	ldr	r2, [pc, #144]	; (8002600 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800256e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002572:	6593      	str	r3, [r2, #88]	; 0x58
 8002574:	4b22      	ldr	r3, [pc, #136]	; (8002600 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002578:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800257c:	60fb      	str	r3, [r7, #12]
 800257e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002580:	f7ff f9f4 	bl	800196c <HAL_PWREx_GetVoltageRange>
 8002584:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002586:	4b1e      	ldr	r3, [pc, #120]	; (8002600 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800258a:	4a1d      	ldr	r2, [pc, #116]	; (8002600 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800258c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002590:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002598:	d10b      	bne.n	80025b2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2b80      	cmp	r3, #128	; 0x80
 800259e:	d919      	bls.n	80025d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2ba0      	cmp	r3, #160	; 0xa0
 80025a4:	d902      	bls.n	80025ac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80025a6:	2302      	movs	r3, #2
 80025a8:	613b      	str	r3, [r7, #16]
 80025aa:	e013      	b.n	80025d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80025ac:	2301      	movs	r3, #1
 80025ae:	613b      	str	r3, [r7, #16]
 80025b0:	e010      	b.n	80025d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2b80      	cmp	r3, #128	; 0x80
 80025b6:	d902      	bls.n	80025be <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80025b8:	2303      	movs	r3, #3
 80025ba:	613b      	str	r3, [r7, #16]
 80025bc:	e00a      	b.n	80025d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2b80      	cmp	r3, #128	; 0x80
 80025c2:	d102      	bne.n	80025ca <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80025c4:	2302      	movs	r3, #2
 80025c6:	613b      	str	r3, [r7, #16]
 80025c8:	e004      	b.n	80025d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2b70      	cmp	r3, #112	; 0x70
 80025ce:	d101      	bne.n	80025d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80025d0:	2301      	movs	r3, #1
 80025d2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80025d4:	4b0b      	ldr	r3, [pc, #44]	; (8002604 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f023 0207 	bic.w	r2, r3, #7
 80025dc:	4909      	ldr	r1, [pc, #36]	; (8002604 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80025e4:	4b07      	ldr	r3, [pc, #28]	; (8002604 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0307 	and.w	r3, r3, #7
 80025ec:	693a      	ldr	r2, [r7, #16]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d001      	beq.n	80025f6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e000      	b.n	80025f8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80025f6:	2300      	movs	r3, #0
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3718      	adds	r7, #24
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	40021000 	.word	0x40021000
 8002604:	40022000 	.word	0x40022000

08002608 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b086      	sub	sp, #24
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002610:	2300      	movs	r3, #0
 8002612:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002614:	2300      	movs	r3, #0
 8002616:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002620:	2b00      	cmp	r3, #0
 8002622:	d03f      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002628:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800262c:	d01c      	beq.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800262e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002632:	d802      	bhi.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002634:	2b00      	cmp	r3, #0
 8002636:	d00e      	beq.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002638:	e01f      	b.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x72>
 800263a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800263e:	d003      	beq.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002640:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002644:	d01c      	beq.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002646:	e018      	b.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002648:	4b85      	ldr	r3, [pc, #532]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	4a84      	ldr	r2, [pc, #528]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800264e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002652:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002654:	e015      	b.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	3304      	adds	r3, #4
 800265a:	2100      	movs	r1, #0
 800265c:	4618      	mov	r0, r3
 800265e:	f000 fab9 	bl	8002bd4 <RCCEx_PLLSAI1_Config>
 8002662:	4603      	mov	r3, r0
 8002664:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002666:	e00c      	b.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	3320      	adds	r3, #32
 800266c:	2100      	movs	r1, #0
 800266e:	4618      	mov	r0, r3
 8002670:	f000 fba0 	bl	8002db4 <RCCEx_PLLSAI2_Config>
 8002674:	4603      	mov	r3, r0
 8002676:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002678:	e003      	b.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	74fb      	strb	r3, [r7, #19]
      break;
 800267e:	e000      	b.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002680:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002682:	7cfb      	ldrb	r3, [r7, #19]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d10b      	bne.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002688:	4b75      	ldr	r3, [pc, #468]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800268a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800268e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002696:	4972      	ldr	r1, [pc, #456]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002698:	4313      	orrs	r3, r2
 800269a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800269e:	e001      	b.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026a0:	7cfb      	ldrb	r3, [r7, #19]
 80026a2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d03f      	beq.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026b8:	d01c      	beq.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80026ba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026be:	d802      	bhi.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d00e      	beq.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0xda>
 80026c4:	e01f      	b.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80026c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80026ca:	d003      	beq.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80026cc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80026d0:	d01c      	beq.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x104>
 80026d2:	e018      	b.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80026d4:	4b62      	ldr	r3, [pc, #392]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	4a61      	ldr	r2, [pc, #388]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026de:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80026e0:	e015      	b.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	3304      	adds	r3, #4
 80026e6:	2100      	movs	r1, #0
 80026e8:	4618      	mov	r0, r3
 80026ea:	f000 fa73 	bl	8002bd4 <RCCEx_PLLSAI1_Config>
 80026ee:	4603      	mov	r3, r0
 80026f0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80026f2:	e00c      	b.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	3320      	adds	r3, #32
 80026f8:	2100      	movs	r1, #0
 80026fa:	4618      	mov	r0, r3
 80026fc:	f000 fb5a 	bl	8002db4 <RCCEx_PLLSAI2_Config>
 8002700:	4603      	mov	r3, r0
 8002702:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002704:	e003      	b.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	74fb      	strb	r3, [r7, #19]
      break;
 800270a:	e000      	b.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800270c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800270e:	7cfb      	ldrb	r3, [r7, #19]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d10b      	bne.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002714:	4b52      	ldr	r3, [pc, #328]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800271a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002722:	494f      	ldr	r1, [pc, #316]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002724:	4313      	orrs	r3, r2
 8002726:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800272a:	e001      	b.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800272c:	7cfb      	ldrb	r3, [r7, #19]
 800272e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002738:	2b00      	cmp	r3, #0
 800273a:	f000 80a0 	beq.w	800287e <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800273e:	2300      	movs	r3, #0
 8002740:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002742:	4b47      	ldr	r3, [pc, #284]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800274e:	2301      	movs	r3, #1
 8002750:	e000      	b.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002752:	2300      	movs	r3, #0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d00d      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002758:	4b41      	ldr	r3, [pc, #260]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800275a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800275c:	4a40      	ldr	r2, [pc, #256]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800275e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002762:	6593      	str	r3, [r2, #88]	; 0x58
 8002764:	4b3e      	ldr	r3, [pc, #248]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002766:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002768:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800276c:	60bb      	str	r3, [r7, #8]
 800276e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002770:	2301      	movs	r3, #1
 8002772:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002774:	4b3b      	ldr	r3, [pc, #236]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a3a      	ldr	r2, [pc, #232]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800277a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800277e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002780:	f7fe fe28 	bl	80013d4 <HAL_GetTick>
 8002784:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002786:	e009      	b.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002788:	f7fe fe24 	bl	80013d4 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b02      	cmp	r3, #2
 8002794:	d902      	bls.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	74fb      	strb	r3, [r7, #19]
        break;
 800279a:	e005      	b.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800279c:	4b31      	ldr	r3, [pc, #196]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d0ef      	beq.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 80027a8:	7cfb      	ldrb	r3, [r7, #19]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d15c      	bne.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80027ae:	4b2c      	ldr	r3, [pc, #176]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027b8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d01f      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027c6:	697a      	ldr	r2, [r7, #20]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d019      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80027cc:	4b24      	ldr	r3, [pc, #144]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027d6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80027d8:	4b21      	ldr	r3, [pc, #132]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027de:	4a20      	ldr	r2, [pc, #128]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80027e8:	4b1d      	ldr	r3, [pc, #116]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ee:	4a1c      	ldr	r2, [pc, #112]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80027f8:	4a19      	ldr	r2, [pc, #100]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	2b00      	cmp	r3, #0
 8002808:	d016      	beq.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800280a:	f7fe fde3 	bl	80013d4 <HAL_GetTick>
 800280e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002810:	e00b      	b.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002812:	f7fe fddf 	bl	80013d4 <HAL_GetTick>
 8002816:	4602      	mov	r2, r0
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002820:	4293      	cmp	r3, r2
 8002822:	d902      	bls.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	74fb      	strb	r3, [r7, #19]
            break;
 8002828:	e006      	b.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800282a:	4b0d      	ldr	r3, [pc, #52]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800282c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002830:	f003 0302 	and.w	r3, r3, #2
 8002834:	2b00      	cmp	r3, #0
 8002836:	d0ec      	beq.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8002838:	7cfb      	ldrb	r3, [r7, #19]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d10c      	bne.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800283e:	4b08      	ldr	r3, [pc, #32]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002844:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800284e:	4904      	ldr	r1, [pc, #16]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002850:	4313      	orrs	r3, r2
 8002852:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002856:	e009      	b.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002858:	7cfb      	ldrb	r3, [r7, #19]
 800285a:	74bb      	strb	r3, [r7, #18]
 800285c:	e006      	b.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x264>
 800285e:	bf00      	nop
 8002860:	40021000 	.word	0x40021000
 8002864:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002868:	7cfb      	ldrb	r3, [r7, #19]
 800286a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800286c:	7c7b      	ldrb	r3, [r7, #17]
 800286e:	2b01      	cmp	r3, #1
 8002870:	d105      	bne.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002872:	4b9e      	ldr	r3, [pc, #632]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002876:	4a9d      	ldr	r2, [pc, #628]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002878:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800287c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0301 	and.w	r3, r3, #1
 8002886:	2b00      	cmp	r3, #0
 8002888:	d00a      	beq.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800288a:	4b98      	ldr	r3, [pc, #608]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800288c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002890:	f023 0203 	bic.w	r2, r3, #3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002898:	4994      	ldr	r1, [pc, #592]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800289a:	4313      	orrs	r3, r2
 800289c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0302 	and.w	r3, r3, #2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d00a      	beq.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028ac:	4b8f      	ldr	r3, [pc, #572]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028b2:	f023 020c 	bic.w	r2, r3, #12
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ba:	498c      	ldr	r1, [pc, #560]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028bc:	4313      	orrs	r3, r2
 80028be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0304 	and.w	r3, r3, #4
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d00a      	beq.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80028ce:	4b87      	ldr	r3, [pc, #540]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028d4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028dc:	4983      	ldr	r1, [pc, #524]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0308 	and.w	r3, r3, #8
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d00a      	beq.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80028f0:	4b7e      	ldr	r3, [pc, #504]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028f6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fe:	497b      	ldr	r1, [pc, #492]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002900:	4313      	orrs	r3, r2
 8002902:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0310 	and.w	r3, r3, #16
 800290e:	2b00      	cmp	r3, #0
 8002910:	d00a      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002912:	4b76      	ldr	r3, [pc, #472]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002918:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002920:	4972      	ldr	r1, [pc, #456]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002922:	4313      	orrs	r3, r2
 8002924:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0320 	and.w	r3, r3, #32
 8002930:	2b00      	cmp	r3, #0
 8002932:	d00a      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002934:	4b6d      	ldr	r3, [pc, #436]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800293a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002942:	496a      	ldr	r1, [pc, #424]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002944:	4313      	orrs	r3, r2
 8002946:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002952:	2b00      	cmp	r3, #0
 8002954:	d00a      	beq.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002956:	4b65      	ldr	r3, [pc, #404]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002958:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800295c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002964:	4961      	ldr	r1, [pc, #388]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002966:	4313      	orrs	r3, r2
 8002968:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002974:	2b00      	cmp	r3, #0
 8002976:	d00a      	beq.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002978:	4b5c      	ldr	r3, [pc, #368]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800297a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800297e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002986:	4959      	ldr	r1, [pc, #356]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002988:	4313      	orrs	r3, r2
 800298a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00a      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800299a:	4b54      	ldr	r3, [pc, #336]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800299c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029a0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029a8:	4950      	ldr	r1, [pc, #320]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d00a      	beq.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80029bc:	4b4b      	ldr	r3, [pc, #300]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ca:	4948      	ldr	r1, [pc, #288]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029cc:	4313      	orrs	r3, r2
 80029ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00a      	beq.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80029de:	4b43      	ldr	r3, [pc, #268]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ec:	493f      	ldr	r1, [pc, #252]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d028      	beq.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a00:	4b3a      	ldr	r3, [pc, #232]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a06:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a0e:	4937      	ldr	r1, [pc, #220]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a1e:	d106      	bne.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a20:	4b32      	ldr	r3, [pc, #200]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	4a31      	ldr	r2, [pc, #196]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a2a:	60d3      	str	r3, [r2, #12]
 8002a2c:	e011      	b.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a32:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a36:	d10c      	bne.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	3304      	adds	r3, #4
 8002a3c:	2101      	movs	r1, #1
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f000 f8c8 	bl	8002bd4 <RCCEx_PLLSAI1_Config>
 8002a44:	4603      	mov	r3, r0
 8002a46:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002a48:	7cfb      	ldrb	r3, [r7, #19]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8002a4e:	7cfb      	ldrb	r3, [r7, #19]
 8002a50:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d028      	beq.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002a5e:	4b23      	ldr	r3, [pc, #140]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a64:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a6c:	491f      	ldr	r1, [pc, #124]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a7c:	d106      	bne.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a7e:	4b1b      	ldr	r3, [pc, #108]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	4a1a      	ldr	r2, [pc, #104]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a88:	60d3      	str	r3, [r2, #12]
 8002a8a:	e011      	b.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a90:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a94:	d10c      	bne.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	3304      	adds	r3, #4
 8002a9a:	2101      	movs	r1, #1
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f000 f899 	bl	8002bd4 <RCCEx_PLLSAI1_Config>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002aa6:	7cfb      	ldrb	r3, [r7, #19]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d001      	beq.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8002aac:	7cfb      	ldrb	r3, [r7, #19]
 8002aae:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d02b      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002abc:	4b0b      	ldr	r3, [pc, #44]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ac2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aca:	4908      	ldr	r1, [pc, #32]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ad6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ada:	d109      	bne.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002adc:	4b03      	ldr	r3, [pc, #12]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	4a02      	ldr	r2, [pc, #8]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ae2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ae6:	60d3      	str	r3, [r2, #12]
 8002ae8:	e014      	b.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002aea:	bf00      	nop
 8002aec:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002af4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002af8:	d10c      	bne.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	3304      	adds	r3, #4
 8002afe:	2101      	movs	r1, #1
 8002b00:	4618      	mov	r0, r3
 8002b02:	f000 f867 	bl	8002bd4 <RCCEx_PLLSAI1_Config>
 8002b06:	4603      	mov	r3, r0
 8002b08:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b0a:	7cfb      	ldrb	r3, [r7, #19]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d001      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8002b10:	7cfb      	ldrb	r3, [r7, #19]
 8002b12:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d02f      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b20:	4b2b      	ldr	r3, [pc, #172]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b26:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b2e:	4928      	ldr	r1, [pc, #160]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b3e:	d10d      	bne.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	3304      	adds	r3, #4
 8002b44:	2102      	movs	r1, #2
 8002b46:	4618      	mov	r0, r3
 8002b48:	f000 f844 	bl	8002bd4 <RCCEx_PLLSAI1_Config>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b50:	7cfb      	ldrb	r3, [r7, #19]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d014      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002b56:	7cfb      	ldrb	r3, [r7, #19]
 8002b58:	74bb      	strb	r3, [r7, #18]
 8002b5a:	e011      	b.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b64:	d10c      	bne.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	3320      	adds	r3, #32
 8002b6a:	2102      	movs	r1, #2
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f000 f921 	bl	8002db4 <RCCEx_PLLSAI2_Config>
 8002b72:	4603      	mov	r3, r0
 8002b74:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b76:	7cfb      	ldrb	r3, [r7, #19]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d001      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002b7c:	7cfb      	ldrb	r3, [r7, #19]
 8002b7e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d00a      	beq.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002b8c:	4b10      	ldr	r3, [pc, #64]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b92:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b9a:	490d      	ldr	r1, [pc, #52]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d00b      	beq.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002bae:	4b08      	ldr	r3, [pc, #32]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bb4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bbe:	4904      	ldr	r1, [pc, #16]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002bc6:	7cbb      	ldrb	r3, [r7, #18]
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3718      	adds	r7, #24
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	40021000 	.word	0x40021000

08002bd4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002bde:	2300      	movs	r3, #0
 8002be0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002be2:	4b73      	ldr	r3, [pc, #460]	; (8002db0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	f003 0303 	and.w	r3, r3, #3
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d018      	beq.n	8002c20 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002bee:	4b70      	ldr	r3, [pc, #448]	; (8002db0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	f003 0203 	and.w	r2, r3, #3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d10d      	bne.n	8002c1a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
       ||
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d009      	beq.n	8002c1a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002c06:	4b6a      	ldr	r3, [pc, #424]	; (8002db0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	091b      	lsrs	r3, r3, #4
 8002c0c:	f003 0307 	and.w	r3, r3, #7
 8002c10:	1c5a      	adds	r2, r3, #1
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
       ||
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d044      	beq.n	8002ca4 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	73fb      	strb	r3, [r7, #15]
 8002c1e:	e041      	b.n	8002ca4 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d00c      	beq.n	8002c42 <RCCEx_PLLSAI1_Config+0x6e>
 8002c28:	2b03      	cmp	r3, #3
 8002c2a:	d013      	beq.n	8002c54 <RCCEx_PLLSAI1_Config+0x80>
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d120      	bne.n	8002c72 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c30:	4b5f      	ldr	r3, [pc, #380]	; (8002db0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0302 	and.w	r3, r3, #2
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d11d      	bne.n	8002c78 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c40:	e01a      	b.n	8002c78 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c42:	4b5b      	ldr	r3, [pc, #364]	; (8002db0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d116      	bne.n	8002c7c <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c52:	e013      	b.n	8002c7c <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c54:	4b56      	ldr	r3, [pc, #344]	; (8002db0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d10f      	bne.n	8002c80 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c60:	4b53      	ldr	r3, [pc, #332]	; (8002db0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d109      	bne.n	8002c80 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c70:	e006      	b.n	8002c80 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	73fb      	strb	r3, [r7, #15]
      break;
 8002c76:	e004      	b.n	8002c82 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002c78:	bf00      	nop
 8002c7a:	e002      	b.n	8002c82 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002c7c:	bf00      	nop
 8002c7e:	e000      	b.n	8002c82 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002c80:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c82:	7bfb      	ldrb	r3, [r7, #15]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d10d      	bne.n	8002ca4 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c88:	4b49      	ldr	r3, [pc, #292]	; (8002db0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6819      	ldr	r1, [r3, #0]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	3b01      	subs	r3, #1
 8002c9a:	011b      	lsls	r3, r3, #4
 8002c9c:	430b      	orrs	r3, r1
 8002c9e:	4944      	ldr	r1, [pc, #272]	; (8002db0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002ca4:	7bfb      	ldrb	r3, [r7, #15]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d17d      	bne.n	8002da6 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002caa:	4b41      	ldr	r3, [pc, #260]	; (8002db0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a40      	ldr	r2, [pc, #256]	; (8002db0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cb0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002cb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cb6:	f7fe fb8d 	bl	80013d4 <HAL_GetTick>
 8002cba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002cbc:	e009      	b.n	8002cd2 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002cbe:	f7fe fb89 	bl	80013d4 <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d902      	bls.n	8002cd2 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	73fb      	strb	r3, [r7, #15]
        break;
 8002cd0:	e005      	b.n	8002cde <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002cd2:	4b37      	ldr	r3, [pc, #220]	; (8002db0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d1ef      	bne.n	8002cbe <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002cde:	7bfb      	ldrb	r3, [r7, #15]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d160      	bne.n	8002da6 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d111      	bne.n	8002d0e <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002cea:	4b31      	ldr	r3, [pc, #196]	; (8002db0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cec:	691b      	ldr	r3, [r3, #16]
 8002cee:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002cf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	6892      	ldr	r2, [r2, #8]
 8002cfa:	0211      	lsls	r1, r2, #8
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	68d2      	ldr	r2, [r2, #12]
 8002d00:	0912      	lsrs	r2, r2, #4
 8002d02:	0452      	lsls	r2, r2, #17
 8002d04:	430a      	orrs	r2, r1
 8002d06:	492a      	ldr	r1, [pc, #168]	; (8002db0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	610b      	str	r3, [r1, #16]
 8002d0c:	e027      	b.n	8002d5e <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d112      	bne.n	8002d3a <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d14:	4b26      	ldr	r3, [pc, #152]	; (8002db0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d16:	691b      	ldr	r3, [r3, #16]
 8002d18:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002d1c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	6892      	ldr	r2, [r2, #8]
 8002d24:	0211      	lsls	r1, r2, #8
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	6912      	ldr	r2, [r2, #16]
 8002d2a:	0852      	lsrs	r2, r2, #1
 8002d2c:	3a01      	subs	r2, #1
 8002d2e:	0552      	lsls	r2, r2, #21
 8002d30:	430a      	orrs	r2, r1
 8002d32:	491f      	ldr	r1, [pc, #124]	; (8002db0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d34:	4313      	orrs	r3, r2
 8002d36:	610b      	str	r3, [r1, #16]
 8002d38:	e011      	b.n	8002d5e <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d3a:	4b1d      	ldr	r3, [pc, #116]	; (8002db0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002d42:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	6892      	ldr	r2, [r2, #8]
 8002d4a:	0211      	lsls	r1, r2, #8
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	6952      	ldr	r2, [r2, #20]
 8002d50:	0852      	lsrs	r2, r2, #1
 8002d52:	3a01      	subs	r2, #1
 8002d54:	0652      	lsls	r2, r2, #25
 8002d56:	430a      	orrs	r2, r1
 8002d58:	4915      	ldr	r1, [pc, #84]	; (8002db0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002d5e:	4b14      	ldr	r3, [pc, #80]	; (8002db0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a13      	ldr	r2, [pc, #76]	; (8002db0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d64:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d68:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d6a:	f7fe fb33 	bl	80013d4 <HAL_GetTick>
 8002d6e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d70:	e009      	b.n	8002d86 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d72:	f7fe fb2f 	bl	80013d4 <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d902      	bls.n	8002d86 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	73fb      	strb	r3, [r7, #15]
          break;
 8002d84:	e005      	b.n	8002d92 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d86:	4b0a      	ldr	r3, [pc, #40]	; (8002db0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d0ef      	beq.n	8002d72 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8002d92:	7bfb      	ldrb	r3, [r7, #15]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d106      	bne.n	8002da6 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002d98:	4b05      	ldr	r3, [pc, #20]	; (8002db0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d9a:	691a      	ldr	r2, [r3, #16]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	699b      	ldr	r3, [r3, #24]
 8002da0:	4903      	ldr	r1, [pc, #12]	; (8002db0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3710      	adds	r7, #16
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	40021000 	.word	0x40021000

08002db4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002dc2:	4b68      	ldr	r3, [pc, #416]	; (8002f64 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	f003 0303 	and.w	r3, r3, #3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d018      	beq.n	8002e00 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002dce:	4b65      	ldr	r3, [pc, #404]	; (8002f64 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	f003 0203 	and.w	r2, r3, #3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d10d      	bne.n	8002dfa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
       ||
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d009      	beq.n	8002dfa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002de6:	4b5f      	ldr	r3, [pc, #380]	; (8002f64 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	091b      	lsrs	r3, r3, #4
 8002dec:	f003 0307 	and.w	r3, r3, #7
 8002df0:	1c5a      	adds	r2, r3, #1
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
       ||
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d044      	beq.n	8002e84 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	73fb      	strb	r3, [r7, #15]
 8002dfe:	e041      	b.n	8002e84 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d00c      	beq.n	8002e22 <RCCEx_PLLSAI2_Config+0x6e>
 8002e08:	2b03      	cmp	r3, #3
 8002e0a:	d013      	beq.n	8002e34 <RCCEx_PLLSAI2_Config+0x80>
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d120      	bne.n	8002e52 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002e10:	4b54      	ldr	r3, [pc, #336]	; (8002f64 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0302 	and.w	r3, r3, #2
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d11d      	bne.n	8002e58 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e20:	e01a      	b.n	8002e58 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002e22:	4b50      	ldr	r3, [pc, #320]	; (8002f64 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d116      	bne.n	8002e5c <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e32:	e013      	b.n	8002e5c <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002e34:	4b4b      	ldr	r3, [pc, #300]	; (8002f64 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d10f      	bne.n	8002e60 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002e40:	4b48      	ldr	r3, [pc, #288]	; (8002f64 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d109      	bne.n	8002e60 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e50:	e006      	b.n	8002e60 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	73fb      	strb	r3, [r7, #15]
      break;
 8002e56:	e004      	b.n	8002e62 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002e58:	bf00      	nop
 8002e5a:	e002      	b.n	8002e62 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002e5c:	bf00      	nop
 8002e5e:	e000      	b.n	8002e62 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002e60:	bf00      	nop
    }

    if(status == HAL_OK)
 8002e62:	7bfb      	ldrb	r3, [r7, #15]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d10d      	bne.n	8002e84 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002e68:	4b3e      	ldr	r3, [pc, #248]	; (8002f64 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6819      	ldr	r1, [r3, #0]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	3b01      	subs	r3, #1
 8002e7a:	011b      	lsls	r3, r3, #4
 8002e7c:	430b      	orrs	r3, r1
 8002e7e:	4939      	ldr	r1, [pc, #228]	; (8002f64 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002e84:	7bfb      	ldrb	r3, [r7, #15]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d167      	bne.n	8002f5a <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002e8a:	4b36      	ldr	r3, [pc, #216]	; (8002f64 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a35      	ldr	r2, [pc, #212]	; (8002f64 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e96:	f7fe fa9d 	bl	80013d4 <HAL_GetTick>
 8002e9a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e9c:	e009      	b.n	8002eb2 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e9e:	f7fe fa99 	bl	80013d4 <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d902      	bls.n	8002eb2 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	73fb      	strb	r3, [r7, #15]
        break;
 8002eb0:	e005      	b.n	8002ebe <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002eb2:	4b2c      	ldr	r3, [pc, #176]	; (8002f64 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d1ef      	bne.n	8002e9e <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002ebe:	7bfb      	ldrb	r3, [r7, #15]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d14a      	bne.n	8002f5a <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d111      	bne.n	8002eee <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002eca:	4b26      	ldr	r3, [pc, #152]	; (8002f64 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ecc:	695b      	ldr	r3, [r3, #20]
 8002ece:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002ed2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	6892      	ldr	r2, [r2, #8]
 8002eda:	0211      	lsls	r1, r2, #8
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	68d2      	ldr	r2, [r2, #12]
 8002ee0:	0912      	lsrs	r2, r2, #4
 8002ee2:	0452      	lsls	r2, r2, #17
 8002ee4:	430a      	orrs	r2, r1
 8002ee6:	491f      	ldr	r1, [pc, #124]	; (8002f64 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	614b      	str	r3, [r1, #20]
 8002eec:	e011      	b.n	8002f12 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002eee:	4b1d      	ldr	r3, [pc, #116]	; (8002f64 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ef0:	695b      	ldr	r3, [r3, #20]
 8002ef2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002ef6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	6892      	ldr	r2, [r2, #8]
 8002efe:	0211      	lsls	r1, r2, #8
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	6912      	ldr	r2, [r2, #16]
 8002f04:	0852      	lsrs	r2, r2, #1
 8002f06:	3a01      	subs	r2, #1
 8002f08:	0652      	lsls	r2, r2, #25
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	4915      	ldr	r1, [pc, #84]	; (8002f64 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002f12:	4b14      	ldr	r3, [pc, #80]	; (8002f64 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a13      	ldr	r2, [pc, #76]	; (8002f64 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f1c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f1e:	f7fe fa59 	bl	80013d4 <HAL_GetTick>
 8002f22:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002f24:	e009      	b.n	8002f3a <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002f26:	f7fe fa55 	bl	80013d4 <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d902      	bls.n	8002f3a <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	73fb      	strb	r3, [r7, #15]
          break;
 8002f38:	e005      	b.n	8002f46 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002f3a:	4b0a      	ldr	r3, [pc, #40]	; (8002f64 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d0ef      	beq.n	8002f26 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8002f46:	7bfb      	ldrb	r3, [r7, #15]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d106      	bne.n	8002f5a <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002f4c:	4b05      	ldr	r3, [pc, #20]	; (8002f64 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f4e:	695a      	ldr	r2, [r3, #20]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	695b      	ldr	r3, [r3, #20]
 8002f54:	4903      	ldr	r1, [pc, #12]	; (8002f64 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3710      	adds	r7, #16
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	40021000 	.word	0x40021000

08002f68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d101      	bne.n	8002f7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e040      	b.n	8002ffc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d106      	bne.n	8002f90 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f7fe f946 	bl	800121c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2224      	movs	r2, #36	; 0x24
 8002f94:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f022 0201 	bic.w	r2, r2, #1
 8002fa4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 f82c 	bl	8003004 <UART_SetConfig>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d101      	bne.n	8002fb6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e022      	b.n	8002ffc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d002      	beq.n	8002fc4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 faaa 	bl	8003518 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	685a      	ldr	r2, [r3, #4]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fd2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	689a      	ldr	r2, [r3, #8]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002fe2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f042 0201 	orr.w	r2, r2, #1
 8002ff2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f000 fb31 	bl	800365c <UART_CheckIdleState>
 8002ffa:	4603      	mov	r3, r0
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3708      	adds	r7, #8
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003004:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003008:	b088      	sub	sp, #32
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800300e:	2300      	movs	r3, #0
 8003010:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	689a      	ldr	r2, [r3, #8]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	431a      	orrs	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	695b      	ldr	r3, [r3, #20]
 8003020:	431a      	orrs	r2, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	69db      	ldr	r3, [r3, #28]
 8003026:	4313      	orrs	r3, r2
 8003028:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	4bac      	ldr	r3, [pc, #688]	; (80032e4 <UART_SetConfig+0x2e0>)
 8003032:	4013      	ands	r3, r2
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	6812      	ldr	r2, [r2, #0]
 8003038:	69f9      	ldr	r1, [r7, #28]
 800303a:	430b      	orrs	r3, r1
 800303c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	68da      	ldr	r2, [r3, #12]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	430a      	orrs	r2, r1
 8003052:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4aa2      	ldr	r2, [pc, #648]	; (80032e8 <UART_SetConfig+0x2e4>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d004      	beq.n	800306e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6a1b      	ldr	r3, [r3, #32]
 8003068:	69fa      	ldr	r2, [r7, #28]
 800306a:	4313      	orrs	r3, r2
 800306c:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	69fa      	ldr	r2, [r7, #28]
 800307e:	430a      	orrs	r2, r1
 8003080:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a99      	ldr	r2, [pc, #612]	; (80032ec <UART_SetConfig+0x2e8>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d121      	bne.n	80030d0 <UART_SetConfig+0xcc>
 800308c:	4b98      	ldr	r3, [pc, #608]	; (80032f0 <UART_SetConfig+0x2ec>)
 800308e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003092:	f003 0303 	and.w	r3, r3, #3
 8003096:	2b03      	cmp	r3, #3
 8003098:	d816      	bhi.n	80030c8 <UART_SetConfig+0xc4>
 800309a:	a201      	add	r2, pc, #4	; (adr r2, 80030a0 <UART_SetConfig+0x9c>)
 800309c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030a0:	080030b1 	.word	0x080030b1
 80030a4:	080030bd 	.word	0x080030bd
 80030a8:	080030b7 	.word	0x080030b7
 80030ac:	080030c3 	.word	0x080030c3
 80030b0:	2301      	movs	r3, #1
 80030b2:	76fb      	strb	r3, [r7, #27]
 80030b4:	e0e8      	b.n	8003288 <UART_SetConfig+0x284>
 80030b6:	2302      	movs	r3, #2
 80030b8:	76fb      	strb	r3, [r7, #27]
 80030ba:	e0e5      	b.n	8003288 <UART_SetConfig+0x284>
 80030bc:	2304      	movs	r3, #4
 80030be:	76fb      	strb	r3, [r7, #27]
 80030c0:	e0e2      	b.n	8003288 <UART_SetConfig+0x284>
 80030c2:	2308      	movs	r3, #8
 80030c4:	76fb      	strb	r3, [r7, #27]
 80030c6:	e0df      	b.n	8003288 <UART_SetConfig+0x284>
 80030c8:	2310      	movs	r3, #16
 80030ca:	76fb      	strb	r3, [r7, #27]
 80030cc:	bf00      	nop
 80030ce:	e0db      	b.n	8003288 <UART_SetConfig+0x284>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a87      	ldr	r2, [pc, #540]	; (80032f4 <UART_SetConfig+0x2f0>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d134      	bne.n	8003144 <UART_SetConfig+0x140>
 80030da:	4b85      	ldr	r3, [pc, #532]	; (80032f0 <UART_SetConfig+0x2ec>)
 80030dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030e0:	f003 030c 	and.w	r3, r3, #12
 80030e4:	2b0c      	cmp	r3, #12
 80030e6:	d829      	bhi.n	800313c <UART_SetConfig+0x138>
 80030e8:	a201      	add	r2, pc, #4	; (adr r2, 80030f0 <UART_SetConfig+0xec>)
 80030ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ee:	bf00      	nop
 80030f0:	08003125 	.word	0x08003125
 80030f4:	0800313d 	.word	0x0800313d
 80030f8:	0800313d 	.word	0x0800313d
 80030fc:	0800313d 	.word	0x0800313d
 8003100:	08003131 	.word	0x08003131
 8003104:	0800313d 	.word	0x0800313d
 8003108:	0800313d 	.word	0x0800313d
 800310c:	0800313d 	.word	0x0800313d
 8003110:	0800312b 	.word	0x0800312b
 8003114:	0800313d 	.word	0x0800313d
 8003118:	0800313d 	.word	0x0800313d
 800311c:	0800313d 	.word	0x0800313d
 8003120:	08003137 	.word	0x08003137
 8003124:	2300      	movs	r3, #0
 8003126:	76fb      	strb	r3, [r7, #27]
 8003128:	e0ae      	b.n	8003288 <UART_SetConfig+0x284>
 800312a:	2302      	movs	r3, #2
 800312c:	76fb      	strb	r3, [r7, #27]
 800312e:	e0ab      	b.n	8003288 <UART_SetConfig+0x284>
 8003130:	2304      	movs	r3, #4
 8003132:	76fb      	strb	r3, [r7, #27]
 8003134:	e0a8      	b.n	8003288 <UART_SetConfig+0x284>
 8003136:	2308      	movs	r3, #8
 8003138:	76fb      	strb	r3, [r7, #27]
 800313a:	e0a5      	b.n	8003288 <UART_SetConfig+0x284>
 800313c:	2310      	movs	r3, #16
 800313e:	76fb      	strb	r3, [r7, #27]
 8003140:	bf00      	nop
 8003142:	e0a1      	b.n	8003288 <UART_SetConfig+0x284>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a6b      	ldr	r2, [pc, #428]	; (80032f8 <UART_SetConfig+0x2f4>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d120      	bne.n	8003190 <UART_SetConfig+0x18c>
 800314e:	4b68      	ldr	r3, [pc, #416]	; (80032f0 <UART_SetConfig+0x2ec>)
 8003150:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003154:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003158:	2b10      	cmp	r3, #16
 800315a:	d00f      	beq.n	800317c <UART_SetConfig+0x178>
 800315c:	2b10      	cmp	r3, #16
 800315e:	d802      	bhi.n	8003166 <UART_SetConfig+0x162>
 8003160:	2b00      	cmp	r3, #0
 8003162:	d005      	beq.n	8003170 <UART_SetConfig+0x16c>
 8003164:	e010      	b.n	8003188 <UART_SetConfig+0x184>
 8003166:	2b20      	cmp	r3, #32
 8003168:	d005      	beq.n	8003176 <UART_SetConfig+0x172>
 800316a:	2b30      	cmp	r3, #48	; 0x30
 800316c:	d009      	beq.n	8003182 <UART_SetConfig+0x17e>
 800316e:	e00b      	b.n	8003188 <UART_SetConfig+0x184>
 8003170:	2300      	movs	r3, #0
 8003172:	76fb      	strb	r3, [r7, #27]
 8003174:	e088      	b.n	8003288 <UART_SetConfig+0x284>
 8003176:	2302      	movs	r3, #2
 8003178:	76fb      	strb	r3, [r7, #27]
 800317a:	e085      	b.n	8003288 <UART_SetConfig+0x284>
 800317c:	2304      	movs	r3, #4
 800317e:	76fb      	strb	r3, [r7, #27]
 8003180:	e082      	b.n	8003288 <UART_SetConfig+0x284>
 8003182:	2308      	movs	r3, #8
 8003184:	76fb      	strb	r3, [r7, #27]
 8003186:	e07f      	b.n	8003288 <UART_SetConfig+0x284>
 8003188:	2310      	movs	r3, #16
 800318a:	76fb      	strb	r3, [r7, #27]
 800318c:	bf00      	nop
 800318e:	e07b      	b.n	8003288 <UART_SetConfig+0x284>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a59      	ldr	r2, [pc, #356]	; (80032fc <UART_SetConfig+0x2f8>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d120      	bne.n	80031dc <UART_SetConfig+0x1d8>
 800319a:	4b55      	ldr	r3, [pc, #340]	; (80032f0 <UART_SetConfig+0x2ec>)
 800319c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031a0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80031a4:	2b40      	cmp	r3, #64	; 0x40
 80031a6:	d00f      	beq.n	80031c8 <UART_SetConfig+0x1c4>
 80031a8:	2b40      	cmp	r3, #64	; 0x40
 80031aa:	d802      	bhi.n	80031b2 <UART_SetConfig+0x1ae>
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d005      	beq.n	80031bc <UART_SetConfig+0x1b8>
 80031b0:	e010      	b.n	80031d4 <UART_SetConfig+0x1d0>
 80031b2:	2b80      	cmp	r3, #128	; 0x80
 80031b4:	d005      	beq.n	80031c2 <UART_SetConfig+0x1be>
 80031b6:	2bc0      	cmp	r3, #192	; 0xc0
 80031b8:	d009      	beq.n	80031ce <UART_SetConfig+0x1ca>
 80031ba:	e00b      	b.n	80031d4 <UART_SetConfig+0x1d0>
 80031bc:	2300      	movs	r3, #0
 80031be:	76fb      	strb	r3, [r7, #27]
 80031c0:	e062      	b.n	8003288 <UART_SetConfig+0x284>
 80031c2:	2302      	movs	r3, #2
 80031c4:	76fb      	strb	r3, [r7, #27]
 80031c6:	e05f      	b.n	8003288 <UART_SetConfig+0x284>
 80031c8:	2304      	movs	r3, #4
 80031ca:	76fb      	strb	r3, [r7, #27]
 80031cc:	e05c      	b.n	8003288 <UART_SetConfig+0x284>
 80031ce:	2308      	movs	r3, #8
 80031d0:	76fb      	strb	r3, [r7, #27]
 80031d2:	e059      	b.n	8003288 <UART_SetConfig+0x284>
 80031d4:	2310      	movs	r3, #16
 80031d6:	76fb      	strb	r3, [r7, #27]
 80031d8:	bf00      	nop
 80031da:	e055      	b.n	8003288 <UART_SetConfig+0x284>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a47      	ldr	r2, [pc, #284]	; (8003300 <UART_SetConfig+0x2fc>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d124      	bne.n	8003230 <UART_SetConfig+0x22c>
 80031e6:	4b42      	ldr	r3, [pc, #264]	; (80032f0 <UART_SetConfig+0x2ec>)
 80031e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031f4:	d012      	beq.n	800321c <UART_SetConfig+0x218>
 80031f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031fa:	d802      	bhi.n	8003202 <UART_SetConfig+0x1fe>
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d007      	beq.n	8003210 <UART_SetConfig+0x20c>
 8003200:	e012      	b.n	8003228 <UART_SetConfig+0x224>
 8003202:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003206:	d006      	beq.n	8003216 <UART_SetConfig+0x212>
 8003208:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800320c:	d009      	beq.n	8003222 <UART_SetConfig+0x21e>
 800320e:	e00b      	b.n	8003228 <UART_SetConfig+0x224>
 8003210:	2300      	movs	r3, #0
 8003212:	76fb      	strb	r3, [r7, #27]
 8003214:	e038      	b.n	8003288 <UART_SetConfig+0x284>
 8003216:	2302      	movs	r3, #2
 8003218:	76fb      	strb	r3, [r7, #27]
 800321a:	e035      	b.n	8003288 <UART_SetConfig+0x284>
 800321c:	2304      	movs	r3, #4
 800321e:	76fb      	strb	r3, [r7, #27]
 8003220:	e032      	b.n	8003288 <UART_SetConfig+0x284>
 8003222:	2308      	movs	r3, #8
 8003224:	76fb      	strb	r3, [r7, #27]
 8003226:	e02f      	b.n	8003288 <UART_SetConfig+0x284>
 8003228:	2310      	movs	r3, #16
 800322a:	76fb      	strb	r3, [r7, #27]
 800322c:	bf00      	nop
 800322e:	e02b      	b.n	8003288 <UART_SetConfig+0x284>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a2c      	ldr	r2, [pc, #176]	; (80032e8 <UART_SetConfig+0x2e4>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d124      	bne.n	8003284 <UART_SetConfig+0x280>
 800323a:	4b2d      	ldr	r3, [pc, #180]	; (80032f0 <UART_SetConfig+0x2ec>)
 800323c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003240:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003244:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003248:	d012      	beq.n	8003270 <UART_SetConfig+0x26c>
 800324a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800324e:	d802      	bhi.n	8003256 <UART_SetConfig+0x252>
 8003250:	2b00      	cmp	r3, #0
 8003252:	d007      	beq.n	8003264 <UART_SetConfig+0x260>
 8003254:	e012      	b.n	800327c <UART_SetConfig+0x278>
 8003256:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800325a:	d006      	beq.n	800326a <UART_SetConfig+0x266>
 800325c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003260:	d009      	beq.n	8003276 <UART_SetConfig+0x272>
 8003262:	e00b      	b.n	800327c <UART_SetConfig+0x278>
 8003264:	2300      	movs	r3, #0
 8003266:	76fb      	strb	r3, [r7, #27]
 8003268:	e00e      	b.n	8003288 <UART_SetConfig+0x284>
 800326a:	2302      	movs	r3, #2
 800326c:	76fb      	strb	r3, [r7, #27]
 800326e:	e00b      	b.n	8003288 <UART_SetConfig+0x284>
 8003270:	2304      	movs	r3, #4
 8003272:	76fb      	strb	r3, [r7, #27]
 8003274:	e008      	b.n	8003288 <UART_SetConfig+0x284>
 8003276:	2308      	movs	r3, #8
 8003278:	76fb      	strb	r3, [r7, #27]
 800327a:	e005      	b.n	8003288 <UART_SetConfig+0x284>
 800327c:	2310      	movs	r3, #16
 800327e:	76fb      	strb	r3, [r7, #27]
 8003280:	bf00      	nop
 8003282:	e001      	b.n	8003288 <UART_SetConfig+0x284>
 8003284:	2310      	movs	r3, #16
 8003286:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a16      	ldr	r2, [pc, #88]	; (80032e8 <UART_SetConfig+0x2e4>)
 800328e:	4293      	cmp	r3, r2
 8003290:	f040 8087 	bne.w	80033a2 <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003294:	7efb      	ldrb	r3, [r7, #27]
 8003296:	2b08      	cmp	r3, #8
 8003298:	d836      	bhi.n	8003308 <UART_SetConfig+0x304>
 800329a:	a201      	add	r2, pc, #4	; (adr r2, 80032a0 <UART_SetConfig+0x29c>)
 800329c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032a0:	080032c5 	.word	0x080032c5
 80032a4:	08003309 	.word	0x08003309
 80032a8:	080032cd 	.word	0x080032cd
 80032ac:	08003309 	.word	0x08003309
 80032b0:	080032d3 	.word	0x080032d3
 80032b4:	08003309 	.word	0x08003309
 80032b8:	08003309 	.word	0x08003309
 80032bc:	08003309 	.word	0x08003309
 80032c0:	080032db 	.word	0x080032db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032c4:	f7ff f914 	bl	80024f0 <HAL_RCC_GetPCLK1Freq>
 80032c8:	6178      	str	r0, [r7, #20]
        break;
 80032ca:	e022      	b.n	8003312 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032cc:	4b0d      	ldr	r3, [pc, #52]	; (8003304 <UART_SetConfig+0x300>)
 80032ce:	617b      	str	r3, [r7, #20]
        break;
 80032d0:	e01f      	b.n	8003312 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032d2:	f7ff f877 	bl	80023c4 <HAL_RCC_GetSysClockFreq>
 80032d6:	6178      	str	r0, [r7, #20]
        break;
 80032d8:	e01b      	b.n	8003312 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032de:	617b      	str	r3, [r7, #20]
        break;
 80032e0:	e017      	b.n	8003312 <UART_SetConfig+0x30e>
 80032e2:	bf00      	nop
 80032e4:	efff69f3 	.word	0xefff69f3
 80032e8:	40008000 	.word	0x40008000
 80032ec:	40013800 	.word	0x40013800
 80032f0:	40021000 	.word	0x40021000
 80032f4:	40004400 	.word	0x40004400
 80032f8:	40004800 	.word	0x40004800
 80032fc:	40004c00 	.word	0x40004c00
 8003300:	40005000 	.word	0x40005000
 8003304:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003308:	2300      	movs	r3, #0
 800330a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	76bb      	strb	r3, [r7, #26]
        break;
 8003310:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	2b00      	cmp	r3, #0
 8003316:	f000 80f1 	beq.w	80034fc <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685a      	ldr	r2, [r3, #4]
 800331e:	4613      	mov	r3, r2
 8003320:	005b      	lsls	r3, r3, #1
 8003322:	4413      	add	r3, r2
 8003324:	697a      	ldr	r2, [r7, #20]
 8003326:	429a      	cmp	r2, r3
 8003328:	d305      	bcc.n	8003336 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003330:	697a      	ldr	r2, [r7, #20]
 8003332:	429a      	cmp	r2, r3
 8003334:	d902      	bls.n	800333c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	76bb      	strb	r3, [r7, #26]
 800333a:	e0df      	b.n	80034fc <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	4619      	mov	r1, r3
 8003340:	f04f 0200 	mov.w	r2, #0
 8003344:	f04f 0300 	mov.w	r3, #0
 8003348:	f04f 0400 	mov.w	r4, #0
 800334c:	0214      	lsls	r4, r2, #8
 800334e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003352:	020b      	lsls	r3, r1, #8
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	6852      	ldr	r2, [r2, #4]
 8003358:	0852      	lsrs	r2, r2, #1
 800335a:	4611      	mov	r1, r2
 800335c:	f04f 0200 	mov.w	r2, #0
 8003360:	eb13 0b01 	adds.w	fp, r3, r1
 8003364:	eb44 0c02 	adc.w	ip, r4, r2
 8003368:	4658      	mov	r0, fp
 800336a:	4661      	mov	r1, ip
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f04f 0400 	mov.w	r4, #0
 8003374:	461a      	mov	r2, r3
 8003376:	4623      	mov	r3, r4
 8003378:	f7fd fbc2 	bl	8000b00 <__aeabi_uldivmod>
 800337c:	4603      	mov	r3, r0
 800337e:	460c      	mov	r4, r1
 8003380:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003388:	d308      	bcc.n	800339c <UART_SetConfig+0x398>
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003390:	d204      	bcs.n	800339c <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	693a      	ldr	r2, [r7, #16]
 8003398:	60da      	str	r2, [r3, #12]
 800339a:	e0af      	b.n	80034fc <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	76bb      	strb	r3, [r7, #26]
 80033a0:	e0ac      	b.n	80034fc <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	69db      	ldr	r3, [r3, #28]
 80033a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033aa:	d15b      	bne.n	8003464 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80033ac:	7efb      	ldrb	r3, [r7, #27]
 80033ae:	2b08      	cmp	r3, #8
 80033b0:	d827      	bhi.n	8003402 <UART_SetConfig+0x3fe>
 80033b2:	a201      	add	r2, pc, #4	; (adr r2, 80033b8 <UART_SetConfig+0x3b4>)
 80033b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033b8:	080033dd 	.word	0x080033dd
 80033bc:	080033e5 	.word	0x080033e5
 80033c0:	080033ed 	.word	0x080033ed
 80033c4:	08003403 	.word	0x08003403
 80033c8:	080033f3 	.word	0x080033f3
 80033cc:	08003403 	.word	0x08003403
 80033d0:	08003403 	.word	0x08003403
 80033d4:	08003403 	.word	0x08003403
 80033d8:	080033fb 	.word	0x080033fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033dc:	f7ff f888 	bl	80024f0 <HAL_RCC_GetPCLK1Freq>
 80033e0:	6178      	str	r0, [r7, #20]
        break;
 80033e2:	e013      	b.n	800340c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033e4:	f7ff f89a 	bl	800251c <HAL_RCC_GetPCLK2Freq>
 80033e8:	6178      	str	r0, [r7, #20]
        break;
 80033ea:	e00f      	b.n	800340c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033ec:	4b49      	ldr	r3, [pc, #292]	; (8003514 <UART_SetConfig+0x510>)
 80033ee:	617b      	str	r3, [r7, #20]
        break;
 80033f0:	e00c      	b.n	800340c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033f2:	f7fe ffe7 	bl	80023c4 <HAL_RCC_GetSysClockFreq>
 80033f6:	6178      	str	r0, [r7, #20]
        break;
 80033f8:	e008      	b.n	800340c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033fe:	617b      	str	r3, [r7, #20]
        break;
 8003400:	e004      	b.n	800340c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003402:	2300      	movs	r3, #0
 8003404:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	76bb      	strb	r3, [r7, #26]
        break;
 800340a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d074      	beq.n	80034fc <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	005a      	lsls	r2, r3, #1
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	085b      	lsrs	r3, r3, #1
 800341c:	441a      	add	r2, r3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	fbb2 f3f3 	udiv	r3, r2, r3
 8003426:	b29b      	uxth	r3, r3
 8003428:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	2b0f      	cmp	r3, #15
 800342e:	d916      	bls.n	800345e <UART_SetConfig+0x45a>
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003436:	d212      	bcs.n	800345e <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	b29b      	uxth	r3, r3
 800343c:	f023 030f 	bic.w	r3, r3, #15
 8003440:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	085b      	lsrs	r3, r3, #1
 8003446:	b29b      	uxth	r3, r3
 8003448:	f003 0307 	and.w	r3, r3, #7
 800344c:	b29a      	uxth	r2, r3
 800344e:	89fb      	ldrh	r3, [r7, #14]
 8003450:	4313      	orrs	r3, r2
 8003452:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	89fa      	ldrh	r2, [r7, #14]
 800345a:	60da      	str	r2, [r3, #12]
 800345c:	e04e      	b.n	80034fc <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	76bb      	strb	r3, [r7, #26]
 8003462:	e04b      	b.n	80034fc <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003464:	7efb      	ldrb	r3, [r7, #27]
 8003466:	2b08      	cmp	r3, #8
 8003468:	d827      	bhi.n	80034ba <UART_SetConfig+0x4b6>
 800346a:	a201      	add	r2, pc, #4	; (adr r2, 8003470 <UART_SetConfig+0x46c>)
 800346c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003470:	08003495 	.word	0x08003495
 8003474:	0800349d 	.word	0x0800349d
 8003478:	080034a5 	.word	0x080034a5
 800347c:	080034bb 	.word	0x080034bb
 8003480:	080034ab 	.word	0x080034ab
 8003484:	080034bb 	.word	0x080034bb
 8003488:	080034bb 	.word	0x080034bb
 800348c:	080034bb 	.word	0x080034bb
 8003490:	080034b3 	.word	0x080034b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003494:	f7ff f82c 	bl	80024f0 <HAL_RCC_GetPCLK1Freq>
 8003498:	6178      	str	r0, [r7, #20]
        break;
 800349a:	e013      	b.n	80034c4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800349c:	f7ff f83e 	bl	800251c <HAL_RCC_GetPCLK2Freq>
 80034a0:	6178      	str	r0, [r7, #20]
        break;
 80034a2:	e00f      	b.n	80034c4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034a4:	4b1b      	ldr	r3, [pc, #108]	; (8003514 <UART_SetConfig+0x510>)
 80034a6:	617b      	str	r3, [r7, #20]
        break;
 80034a8:	e00c      	b.n	80034c4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034aa:	f7fe ff8b 	bl	80023c4 <HAL_RCC_GetSysClockFreq>
 80034ae:	6178      	str	r0, [r7, #20]
        break;
 80034b0:	e008      	b.n	80034c4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034b6:	617b      	str	r3, [r7, #20]
        break;
 80034b8:	e004      	b.n	80034c4 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80034ba:	2300      	movs	r3, #0
 80034bc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	76bb      	strb	r3, [r7, #26]
        break;
 80034c2:	bf00      	nop
    }

    if (pclk != 0U)
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d018      	beq.n	80034fc <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	085a      	lsrs	r2, r3, #1
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	441a      	add	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034dc:	b29b      	uxth	r3, r3
 80034de:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	2b0f      	cmp	r3, #15
 80034e4:	d908      	bls.n	80034f8 <UART_SetConfig+0x4f4>
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034ec:	d204      	bcs.n	80034f8 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	693a      	ldr	r2, [r7, #16]
 80034f4:	60da      	str	r2, [r3, #12]
 80034f6:	e001      	b.n	80034fc <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003508:	7ebb      	ldrb	r3, [r7, #26]
}
 800350a:	4618      	mov	r0, r3
 800350c:	3720      	adds	r7, #32
 800350e:	46bd      	mov	sp, r7
 8003510:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8003514:	00f42400 	.word	0x00f42400

08003518 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003524:	f003 0301 	and.w	r3, r3, #1
 8003528:	2b00      	cmp	r3, #0
 800352a:	d00a      	beq.n	8003542 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	430a      	orrs	r2, r1
 8003540:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003546:	f003 0302 	and.w	r3, r3, #2
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00a      	beq.n	8003564 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	430a      	orrs	r2, r1
 8003562:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003568:	f003 0304 	and.w	r3, r3, #4
 800356c:	2b00      	cmp	r3, #0
 800356e:	d00a      	beq.n	8003586 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	430a      	orrs	r2, r1
 8003584:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358a:	f003 0308 	and.w	r3, r3, #8
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00a      	beq.n	80035a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	430a      	orrs	r2, r1
 80035a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ac:	f003 0310 	and.w	r3, r3, #16
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d00a      	beq.n	80035ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	430a      	orrs	r2, r1
 80035c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ce:	f003 0320 	and.w	r3, r3, #32
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d00a      	beq.n	80035ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	430a      	orrs	r2, r1
 80035ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d01a      	beq.n	800362e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	430a      	orrs	r2, r1
 800360c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003612:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003616:	d10a      	bne.n	800362e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	430a      	orrs	r2, r1
 800362c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003636:	2b00      	cmp	r3, #0
 8003638:	d00a      	beq.n	8003650 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	430a      	orrs	r2, r1
 800364e:	605a      	str	r2, [r3, #4]
  }
}
 8003650:	bf00      	nop
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b086      	sub	sp, #24
 8003660:	af02      	add	r7, sp, #8
 8003662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800366a:	f7fd feb3 	bl	80013d4 <HAL_GetTick>
 800366e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0308 	and.w	r3, r3, #8
 800367a:	2b08      	cmp	r3, #8
 800367c:	d10e      	bne.n	800369c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800367e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003682:	9300      	str	r3, [sp, #0]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2200      	movs	r2, #0
 8003688:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f000 f82a 	bl	80036e6 <UART_WaitOnFlagUntilTimeout>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d001      	beq.n	800369c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e020      	b.n	80036de <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0304 	and.w	r3, r3, #4
 80036a6:	2b04      	cmp	r3, #4
 80036a8:	d10e      	bne.n	80036c8 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036aa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80036ae:	9300      	str	r3, [sp, #0]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f000 f814 	bl	80036e6 <UART_WaitOnFlagUntilTimeout>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d001      	beq.n	80036c8 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e00a      	b.n	80036de <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2220      	movs	r2, #32
 80036cc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2220      	movs	r2, #32
 80036d2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3710      	adds	r7, #16
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}

080036e6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80036e6:	b580      	push	{r7, lr}
 80036e8:	b084      	sub	sp, #16
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	60f8      	str	r0, [r7, #12]
 80036ee:	60b9      	str	r1, [r7, #8]
 80036f0:	603b      	str	r3, [r7, #0]
 80036f2:	4613      	mov	r3, r2
 80036f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036f6:	e05d      	b.n	80037b4 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036f8:	69bb      	ldr	r3, [r7, #24]
 80036fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036fe:	d059      	beq.n	80037b4 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003700:	f7fd fe68 	bl	80013d4 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	69ba      	ldr	r2, [r7, #24]
 800370c:	429a      	cmp	r2, r3
 800370e:	d302      	bcc.n	8003716 <UART_WaitOnFlagUntilTimeout+0x30>
 8003710:	69bb      	ldr	r3, [r7, #24]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d11b      	bne.n	800374e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003724:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	689a      	ldr	r2, [r3, #8]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f022 0201 	bic.w	r2, r2, #1
 8003734:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2220      	movs	r2, #32
 800373a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2220      	movs	r2, #32
 8003740:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2200      	movs	r2, #0
 8003746:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e042      	b.n	80037d4 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0304 	and.w	r3, r3, #4
 8003758:	2b00      	cmp	r3, #0
 800375a:	d02b      	beq.n	80037b4 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	69db      	ldr	r3, [r3, #28]
 8003762:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003766:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800376a:	d123      	bne.n	80037b4 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003774:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003784:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	689a      	ldr	r2, [r3, #8]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f022 0201 	bic.w	r2, r2, #1
 8003794:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2220      	movs	r2, #32
 800379a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2220      	movs	r2, #32
 80037a0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2220      	movs	r2, #32
 80037a6:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	e00f      	b.n	80037d4 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	69da      	ldr	r2, [r3, #28]
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	4013      	ands	r3, r2
 80037be:	68ba      	ldr	r2, [r7, #8]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	bf0c      	ite	eq
 80037c4:	2301      	moveq	r3, #1
 80037c6:	2300      	movne	r3, #0
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	461a      	mov	r2, r3
 80037cc:	79fb      	ldrb	r3, [r7, #7]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d092      	beq.n	80036f8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037d2:	2300      	movs	r3, #0
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3710      	adds	r7, #16
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <__errno>:
 80037dc:	4b01      	ldr	r3, [pc, #4]	; (80037e4 <__errno+0x8>)
 80037de:	6818      	ldr	r0, [r3, #0]
 80037e0:	4770      	bx	lr
 80037e2:	bf00      	nop
 80037e4:	2000000c 	.word	0x2000000c

080037e8 <__libc_init_array>:
 80037e8:	b570      	push	{r4, r5, r6, lr}
 80037ea:	4e0d      	ldr	r6, [pc, #52]	; (8003820 <__libc_init_array+0x38>)
 80037ec:	4c0d      	ldr	r4, [pc, #52]	; (8003824 <__libc_init_array+0x3c>)
 80037ee:	1ba4      	subs	r4, r4, r6
 80037f0:	10a4      	asrs	r4, r4, #2
 80037f2:	2500      	movs	r5, #0
 80037f4:	42a5      	cmp	r5, r4
 80037f6:	d109      	bne.n	800380c <__libc_init_array+0x24>
 80037f8:	4e0b      	ldr	r6, [pc, #44]	; (8003828 <__libc_init_array+0x40>)
 80037fa:	4c0c      	ldr	r4, [pc, #48]	; (800382c <__libc_init_array+0x44>)
 80037fc:	f001 fd46 	bl	800528c <_init>
 8003800:	1ba4      	subs	r4, r4, r6
 8003802:	10a4      	asrs	r4, r4, #2
 8003804:	2500      	movs	r5, #0
 8003806:	42a5      	cmp	r5, r4
 8003808:	d105      	bne.n	8003816 <__libc_init_array+0x2e>
 800380a:	bd70      	pop	{r4, r5, r6, pc}
 800380c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003810:	4798      	blx	r3
 8003812:	3501      	adds	r5, #1
 8003814:	e7ee      	b.n	80037f4 <__libc_init_array+0xc>
 8003816:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800381a:	4798      	blx	r3
 800381c:	3501      	adds	r5, #1
 800381e:	e7f2      	b.n	8003806 <__libc_init_array+0x1e>
 8003820:	08005520 	.word	0x08005520
 8003824:	08005520 	.word	0x08005520
 8003828:	08005520 	.word	0x08005520
 800382c:	08005524 	.word	0x08005524

08003830 <memset>:
 8003830:	4402      	add	r2, r0
 8003832:	4603      	mov	r3, r0
 8003834:	4293      	cmp	r3, r2
 8003836:	d100      	bne.n	800383a <memset+0xa>
 8003838:	4770      	bx	lr
 800383a:	f803 1b01 	strb.w	r1, [r3], #1
 800383e:	e7f9      	b.n	8003834 <memset+0x4>

08003840 <__cvt>:
 8003840:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003844:	ec55 4b10 	vmov	r4, r5, d0
 8003848:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800384a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800384e:	2d00      	cmp	r5, #0
 8003850:	460e      	mov	r6, r1
 8003852:	4691      	mov	r9, r2
 8003854:	4619      	mov	r1, r3
 8003856:	bfb8      	it	lt
 8003858:	4622      	movlt	r2, r4
 800385a:	462b      	mov	r3, r5
 800385c:	f027 0720 	bic.w	r7, r7, #32
 8003860:	bfbb      	ittet	lt
 8003862:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003866:	461d      	movlt	r5, r3
 8003868:	2300      	movge	r3, #0
 800386a:	232d      	movlt	r3, #45	; 0x2d
 800386c:	bfb8      	it	lt
 800386e:	4614      	movlt	r4, r2
 8003870:	2f46      	cmp	r7, #70	; 0x46
 8003872:	700b      	strb	r3, [r1, #0]
 8003874:	d004      	beq.n	8003880 <__cvt+0x40>
 8003876:	2f45      	cmp	r7, #69	; 0x45
 8003878:	d100      	bne.n	800387c <__cvt+0x3c>
 800387a:	3601      	adds	r6, #1
 800387c:	2102      	movs	r1, #2
 800387e:	e000      	b.n	8003882 <__cvt+0x42>
 8003880:	2103      	movs	r1, #3
 8003882:	ab03      	add	r3, sp, #12
 8003884:	9301      	str	r3, [sp, #4]
 8003886:	ab02      	add	r3, sp, #8
 8003888:	9300      	str	r3, [sp, #0]
 800388a:	4632      	mov	r2, r6
 800388c:	4653      	mov	r3, sl
 800388e:	ec45 4b10 	vmov	d0, r4, r5
 8003892:	f000 fbad 	bl	8003ff0 <_dtoa_r>
 8003896:	2f47      	cmp	r7, #71	; 0x47
 8003898:	4680      	mov	r8, r0
 800389a:	d102      	bne.n	80038a2 <__cvt+0x62>
 800389c:	f019 0f01 	tst.w	r9, #1
 80038a0:	d026      	beq.n	80038f0 <__cvt+0xb0>
 80038a2:	2f46      	cmp	r7, #70	; 0x46
 80038a4:	eb08 0906 	add.w	r9, r8, r6
 80038a8:	d111      	bne.n	80038ce <__cvt+0x8e>
 80038aa:	f898 3000 	ldrb.w	r3, [r8]
 80038ae:	2b30      	cmp	r3, #48	; 0x30
 80038b0:	d10a      	bne.n	80038c8 <__cvt+0x88>
 80038b2:	2200      	movs	r2, #0
 80038b4:	2300      	movs	r3, #0
 80038b6:	4620      	mov	r0, r4
 80038b8:	4629      	mov	r1, r5
 80038ba:	f7fd f8b1 	bl	8000a20 <__aeabi_dcmpeq>
 80038be:	b918      	cbnz	r0, 80038c8 <__cvt+0x88>
 80038c0:	f1c6 0601 	rsb	r6, r6, #1
 80038c4:	f8ca 6000 	str.w	r6, [sl]
 80038c8:	f8da 3000 	ldr.w	r3, [sl]
 80038cc:	4499      	add	r9, r3
 80038ce:	2200      	movs	r2, #0
 80038d0:	2300      	movs	r3, #0
 80038d2:	4620      	mov	r0, r4
 80038d4:	4629      	mov	r1, r5
 80038d6:	f7fd f8a3 	bl	8000a20 <__aeabi_dcmpeq>
 80038da:	b938      	cbnz	r0, 80038ec <__cvt+0xac>
 80038dc:	2230      	movs	r2, #48	; 0x30
 80038de:	9b03      	ldr	r3, [sp, #12]
 80038e0:	454b      	cmp	r3, r9
 80038e2:	d205      	bcs.n	80038f0 <__cvt+0xb0>
 80038e4:	1c59      	adds	r1, r3, #1
 80038e6:	9103      	str	r1, [sp, #12]
 80038e8:	701a      	strb	r2, [r3, #0]
 80038ea:	e7f8      	b.n	80038de <__cvt+0x9e>
 80038ec:	f8cd 900c 	str.w	r9, [sp, #12]
 80038f0:	9b03      	ldr	r3, [sp, #12]
 80038f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80038f4:	eba3 0308 	sub.w	r3, r3, r8
 80038f8:	4640      	mov	r0, r8
 80038fa:	6013      	str	r3, [r2, #0]
 80038fc:	b004      	add	sp, #16
 80038fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003902 <__exponent>:
 8003902:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003904:	2900      	cmp	r1, #0
 8003906:	4604      	mov	r4, r0
 8003908:	bfba      	itte	lt
 800390a:	4249      	neglt	r1, r1
 800390c:	232d      	movlt	r3, #45	; 0x2d
 800390e:	232b      	movge	r3, #43	; 0x2b
 8003910:	2909      	cmp	r1, #9
 8003912:	f804 2b02 	strb.w	r2, [r4], #2
 8003916:	7043      	strb	r3, [r0, #1]
 8003918:	dd20      	ble.n	800395c <__exponent+0x5a>
 800391a:	f10d 0307 	add.w	r3, sp, #7
 800391e:	461f      	mov	r7, r3
 8003920:	260a      	movs	r6, #10
 8003922:	fb91 f5f6 	sdiv	r5, r1, r6
 8003926:	fb06 1115 	mls	r1, r6, r5, r1
 800392a:	3130      	adds	r1, #48	; 0x30
 800392c:	2d09      	cmp	r5, #9
 800392e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003932:	f103 32ff 	add.w	r2, r3, #4294967295
 8003936:	4629      	mov	r1, r5
 8003938:	dc09      	bgt.n	800394e <__exponent+0x4c>
 800393a:	3130      	adds	r1, #48	; 0x30
 800393c:	3b02      	subs	r3, #2
 800393e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003942:	42bb      	cmp	r3, r7
 8003944:	4622      	mov	r2, r4
 8003946:	d304      	bcc.n	8003952 <__exponent+0x50>
 8003948:	1a10      	subs	r0, r2, r0
 800394a:	b003      	add	sp, #12
 800394c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800394e:	4613      	mov	r3, r2
 8003950:	e7e7      	b.n	8003922 <__exponent+0x20>
 8003952:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003956:	f804 2b01 	strb.w	r2, [r4], #1
 800395a:	e7f2      	b.n	8003942 <__exponent+0x40>
 800395c:	2330      	movs	r3, #48	; 0x30
 800395e:	4419      	add	r1, r3
 8003960:	7083      	strb	r3, [r0, #2]
 8003962:	1d02      	adds	r2, r0, #4
 8003964:	70c1      	strb	r1, [r0, #3]
 8003966:	e7ef      	b.n	8003948 <__exponent+0x46>

08003968 <_printf_float>:
 8003968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800396c:	b08d      	sub	sp, #52	; 0x34
 800396e:	460c      	mov	r4, r1
 8003970:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8003974:	4616      	mov	r6, r2
 8003976:	461f      	mov	r7, r3
 8003978:	4605      	mov	r5, r0
 800397a:	f001 f8f1 	bl	8004b60 <_localeconv_r>
 800397e:	6803      	ldr	r3, [r0, #0]
 8003980:	9304      	str	r3, [sp, #16]
 8003982:	4618      	mov	r0, r3
 8003984:	f7fc fc20 	bl	80001c8 <strlen>
 8003988:	2300      	movs	r3, #0
 800398a:	930a      	str	r3, [sp, #40]	; 0x28
 800398c:	f8d8 3000 	ldr.w	r3, [r8]
 8003990:	9005      	str	r0, [sp, #20]
 8003992:	3307      	adds	r3, #7
 8003994:	f023 0307 	bic.w	r3, r3, #7
 8003998:	f103 0208 	add.w	r2, r3, #8
 800399c:	f894 a018 	ldrb.w	sl, [r4, #24]
 80039a0:	f8d4 b000 	ldr.w	fp, [r4]
 80039a4:	f8c8 2000 	str.w	r2, [r8]
 80039a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ac:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80039b0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80039b4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80039b8:	9307      	str	r3, [sp, #28]
 80039ba:	f8cd 8018 	str.w	r8, [sp, #24]
 80039be:	f04f 32ff 	mov.w	r2, #4294967295
 80039c2:	4ba7      	ldr	r3, [pc, #668]	; (8003c60 <_printf_float+0x2f8>)
 80039c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80039c8:	f7fd f85c 	bl	8000a84 <__aeabi_dcmpun>
 80039cc:	bb70      	cbnz	r0, 8003a2c <_printf_float+0xc4>
 80039ce:	f04f 32ff 	mov.w	r2, #4294967295
 80039d2:	4ba3      	ldr	r3, [pc, #652]	; (8003c60 <_printf_float+0x2f8>)
 80039d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80039d8:	f7fd f836 	bl	8000a48 <__aeabi_dcmple>
 80039dc:	bb30      	cbnz	r0, 8003a2c <_printf_float+0xc4>
 80039de:	2200      	movs	r2, #0
 80039e0:	2300      	movs	r3, #0
 80039e2:	4640      	mov	r0, r8
 80039e4:	4649      	mov	r1, r9
 80039e6:	f7fd f825 	bl	8000a34 <__aeabi_dcmplt>
 80039ea:	b110      	cbz	r0, 80039f2 <_printf_float+0x8a>
 80039ec:	232d      	movs	r3, #45	; 0x2d
 80039ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039f2:	4a9c      	ldr	r2, [pc, #624]	; (8003c64 <_printf_float+0x2fc>)
 80039f4:	4b9c      	ldr	r3, [pc, #624]	; (8003c68 <_printf_float+0x300>)
 80039f6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80039fa:	bf8c      	ite	hi
 80039fc:	4690      	movhi	r8, r2
 80039fe:	4698      	movls	r8, r3
 8003a00:	2303      	movs	r3, #3
 8003a02:	f02b 0204 	bic.w	r2, fp, #4
 8003a06:	6123      	str	r3, [r4, #16]
 8003a08:	6022      	str	r2, [r4, #0]
 8003a0a:	f04f 0900 	mov.w	r9, #0
 8003a0e:	9700      	str	r7, [sp, #0]
 8003a10:	4633      	mov	r3, r6
 8003a12:	aa0b      	add	r2, sp, #44	; 0x2c
 8003a14:	4621      	mov	r1, r4
 8003a16:	4628      	mov	r0, r5
 8003a18:	f000 f9e6 	bl	8003de8 <_printf_common>
 8003a1c:	3001      	adds	r0, #1
 8003a1e:	f040 808d 	bne.w	8003b3c <_printf_float+0x1d4>
 8003a22:	f04f 30ff 	mov.w	r0, #4294967295
 8003a26:	b00d      	add	sp, #52	; 0x34
 8003a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a2c:	4642      	mov	r2, r8
 8003a2e:	464b      	mov	r3, r9
 8003a30:	4640      	mov	r0, r8
 8003a32:	4649      	mov	r1, r9
 8003a34:	f7fd f826 	bl	8000a84 <__aeabi_dcmpun>
 8003a38:	b110      	cbz	r0, 8003a40 <_printf_float+0xd8>
 8003a3a:	4a8c      	ldr	r2, [pc, #560]	; (8003c6c <_printf_float+0x304>)
 8003a3c:	4b8c      	ldr	r3, [pc, #560]	; (8003c70 <_printf_float+0x308>)
 8003a3e:	e7da      	b.n	80039f6 <_printf_float+0x8e>
 8003a40:	6861      	ldr	r1, [r4, #4]
 8003a42:	1c4b      	adds	r3, r1, #1
 8003a44:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8003a48:	a80a      	add	r0, sp, #40	; 0x28
 8003a4a:	d13e      	bne.n	8003aca <_printf_float+0x162>
 8003a4c:	2306      	movs	r3, #6
 8003a4e:	6063      	str	r3, [r4, #4]
 8003a50:	2300      	movs	r3, #0
 8003a52:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8003a56:	ab09      	add	r3, sp, #36	; 0x24
 8003a58:	9300      	str	r3, [sp, #0]
 8003a5a:	ec49 8b10 	vmov	d0, r8, r9
 8003a5e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003a62:	6022      	str	r2, [r4, #0]
 8003a64:	f8cd a004 	str.w	sl, [sp, #4]
 8003a68:	6861      	ldr	r1, [r4, #4]
 8003a6a:	4628      	mov	r0, r5
 8003a6c:	f7ff fee8 	bl	8003840 <__cvt>
 8003a70:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8003a74:	2b47      	cmp	r3, #71	; 0x47
 8003a76:	4680      	mov	r8, r0
 8003a78:	d109      	bne.n	8003a8e <_printf_float+0x126>
 8003a7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a7c:	1cd8      	adds	r0, r3, #3
 8003a7e:	db02      	blt.n	8003a86 <_printf_float+0x11e>
 8003a80:	6862      	ldr	r2, [r4, #4]
 8003a82:	4293      	cmp	r3, r2
 8003a84:	dd47      	ble.n	8003b16 <_printf_float+0x1ae>
 8003a86:	f1aa 0a02 	sub.w	sl, sl, #2
 8003a8a:	fa5f fa8a 	uxtb.w	sl, sl
 8003a8e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8003a92:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003a94:	d824      	bhi.n	8003ae0 <_printf_float+0x178>
 8003a96:	3901      	subs	r1, #1
 8003a98:	4652      	mov	r2, sl
 8003a9a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003a9e:	9109      	str	r1, [sp, #36]	; 0x24
 8003aa0:	f7ff ff2f 	bl	8003902 <__exponent>
 8003aa4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003aa6:	1813      	adds	r3, r2, r0
 8003aa8:	2a01      	cmp	r2, #1
 8003aaa:	4681      	mov	r9, r0
 8003aac:	6123      	str	r3, [r4, #16]
 8003aae:	dc02      	bgt.n	8003ab6 <_printf_float+0x14e>
 8003ab0:	6822      	ldr	r2, [r4, #0]
 8003ab2:	07d1      	lsls	r1, r2, #31
 8003ab4:	d501      	bpl.n	8003aba <_printf_float+0x152>
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	6123      	str	r3, [r4, #16]
 8003aba:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d0a5      	beq.n	8003a0e <_printf_float+0xa6>
 8003ac2:	232d      	movs	r3, #45	; 0x2d
 8003ac4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ac8:	e7a1      	b.n	8003a0e <_printf_float+0xa6>
 8003aca:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8003ace:	f000 8177 	beq.w	8003dc0 <_printf_float+0x458>
 8003ad2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8003ad6:	d1bb      	bne.n	8003a50 <_printf_float+0xe8>
 8003ad8:	2900      	cmp	r1, #0
 8003ada:	d1b9      	bne.n	8003a50 <_printf_float+0xe8>
 8003adc:	2301      	movs	r3, #1
 8003ade:	e7b6      	b.n	8003a4e <_printf_float+0xe6>
 8003ae0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8003ae4:	d119      	bne.n	8003b1a <_printf_float+0x1b2>
 8003ae6:	2900      	cmp	r1, #0
 8003ae8:	6863      	ldr	r3, [r4, #4]
 8003aea:	dd0c      	ble.n	8003b06 <_printf_float+0x19e>
 8003aec:	6121      	str	r1, [r4, #16]
 8003aee:	b913      	cbnz	r3, 8003af6 <_printf_float+0x18e>
 8003af0:	6822      	ldr	r2, [r4, #0]
 8003af2:	07d2      	lsls	r2, r2, #31
 8003af4:	d502      	bpl.n	8003afc <_printf_float+0x194>
 8003af6:	3301      	adds	r3, #1
 8003af8:	440b      	add	r3, r1
 8003afa:	6123      	str	r3, [r4, #16]
 8003afc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003afe:	65a3      	str	r3, [r4, #88]	; 0x58
 8003b00:	f04f 0900 	mov.w	r9, #0
 8003b04:	e7d9      	b.n	8003aba <_printf_float+0x152>
 8003b06:	b913      	cbnz	r3, 8003b0e <_printf_float+0x1a6>
 8003b08:	6822      	ldr	r2, [r4, #0]
 8003b0a:	07d0      	lsls	r0, r2, #31
 8003b0c:	d501      	bpl.n	8003b12 <_printf_float+0x1aa>
 8003b0e:	3302      	adds	r3, #2
 8003b10:	e7f3      	b.n	8003afa <_printf_float+0x192>
 8003b12:	2301      	movs	r3, #1
 8003b14:	e7f1      	b.n	8003afa <_printf_float+0x192>
 8003b16:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8003b1a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	db05      	blt.n	8003b2e <_printf_float+0x1c6>
 8003b22:	6822      	ldr	r2, [r4, #0]
 8003b24:	6123      	str	r3, [r4, #16]
 8003b26:	07d1      	lsls	r1, r2, #31
 8003b28:	d5e8      	bpl.n	8003afc <_printf_float+0x194>
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	e7e5      	b.n	8003afa <_printf_float+0x192>
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	bfd4      	ite	le
 8003b32:	f1c3 0302 	rsble	r3, r3, #2
 8003b36:	2301      	movgt	r3, #1
 8003b38:	4413      	add	r3, r2
 8003b3a:	e7de      	b.n	8003afa <_printf_float+0x192>
 8003b3c:	6823      	ldr	r3, [r4, #0]
 8003b3e:	055a      	lsls	r2, r3, #21
 8003b40:	d407      	bmi.n	8003b52 <_printf_float+0x1ea>
 8003b42:	6923      	ldr	r3, [r4, #16]
 8003b44:	4642      	mov	r2, r8
 8003b46:	4631      	mov	r1, r6
 8003b48:	4628      	mov	r0, r5
 8003b4a:	47b8      	blx	r7
 8003b4c:	3001      	adds	r0, #1
 8003b4e:	d12b      	bne.n	8003ba8 <_printf_float+0x240>
 8003b50:	e767      	b.n	8003a22 <_printf_float+0xba>
 8003b52:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8003b56:	f240 80dc 	bls.w	8003d12 <_printf_float+0x3aa>
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003b62:	f7fc ff5d 	bl	8000a20 <__aeabi_dcmpeq>
 8003b66:	2800      	cmp	r0, #0
 8003b68:	d033      	beq.n	8003bd2 <_printf_float+0x26a>
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	4a41      	ldr	r2, [pc, #260]	; (8003c74 <_printf_float+0x30c>)
 8003b6e:	4631      	mov	r1, r6
 8003b70:	4628      	mov	r0, r5
 8003b72:	47b8      	blx	r7
 8003b74:	3001      	adds	r0, #1
 8003b76:	f43f af54 	beq.w	8003a22 <_printf_float+0xba>
 8003b7a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	db02      	blt.n	8003b88 <_printf_float+0x220>
 8003b82:	6823      	ldr	r3, [r4, #0]
 8003b84:	07d8      	lsls	r0, r3, #31
 8003b86:	d50f      	bpl.n	8003ba8 <_printf_float+0x240>
 8003b88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003b8c:	4631      	mov	r1, r6
 8003b8e:	4628      	mov	r0, r5
 8003b90:	47b8      	blx	r7
 8003b92:	3001      	adds	r0, #1
 8003b94:	f43f af45 	beq.w	8003a22 <_printf_float+0xba>
 8003b98:	f04f 0800 	mov.w	r8, #0
 8003b9c:	f104 091a 	add.w	r9, r4, #26
 8003ba0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003ba2:	3b01      	subs	r3, #1
 8003ba4:	4543      	cmp	r3, r8
 8003ba6:	dc09      	bgt.n	8003bbc <_printf_float+0x254>
 8003ba8:	6823      	ldr	r3, [r4, #0]
 8003baa:	079b      	lsls	r3, r3, #30
 8003bac:	f100 8103 	bmi.w	8003db6 <_printf_float+0x44e>
 8003bb0:	68e0      	ldr	r0, [r4, #12]
 8003bb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003bb4:	4298      	cmp	r0, r3
 8003bb6:	bfb8      	it	lt
 8003bb8:	4618      	movlt	r0, r3
 8003bba:	e734      	b.n	8003a26 <_printf_float+0xbe>
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	464a      	mov	r2, r9
 8003bc0:	4631      	mov	r1, r6
 8003bc2:	4628      	mov	r0, r5
 8003bc4:	47b8      	blx	r7
 8003bc6:	3001      	adds	r0, #1
 8003bc8:	f43f af2b 	beq.w	8003a22 <_printf_float+0xba>
 8003bcc:	f108 0801 	add.w	r8, r8, #1
 8003bd0:	e7e6      	b.n	8003ba0 <_printf_float+0x238>
 8003bd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	dc2b      	bgt.n	8003c30 <_printf_float+0x2c8>
 8003bd8:	2301      	movs	r3, #1
 8003bda:	4a26      	ldr	r2, [pc, #152]	; (8003c74 <_printf_float+0x30c>)
 8003bdc:	4631      	mov	r1, r6
 8003bde:	4628      	mov	r0, r5
 8003be0:	47b8      	blx	r7
 8003be2:	3001      	adds	r0, #1
 8003be4:	f43f af1d 	beq.w	8003a22 <_printf_float+0xba>
 8003be8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003bea:	b923      	cbnz	r3, 8003bf6 <_printf_float+0x28e>
 8003bec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003bee:	b913      	cbnz	r3, 8003bf6 <_printf_float+0x28e>
 8003bf0:	6823      	ldr	r3, [r4, #0]
 8003bf2:	07d9      	lsls	r1, r3, #31
 8003bf4:	d5d8      	bpl.n	8003ba8 <_printf_float+0x240>
 8003bf6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003bfa:	4631      	mov	r1, r6
 8003bfc:	4628      	mov	r0, r5
 8003bfe:	47b8      	blx	r7
 8003c00:	3001      	adds	r0, #1
 8003c02:	f43f af0e 	beq.w	8003a22 <_printf_float+0xba>
 8003c06:	f04f 0900 	mov.w	r9, #0
 8003c0a:	f104 0a1a 	add.w	sl, r4, #26
 8003c0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c10:	425b      	negs	r3, r3
 8003c12:	454b      	cmp	r3, r9
 8003c14:	dc01      	bgt.n	8003c1a <_printf_float+0x2b2>
 8003c16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003c18:	e794      	b.n	8003b44 <_printf_float+0x1dc>
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	4652      	mov	r2, sl
 8003c1e:	4631      	mov	r1, r6
 8003c20:	4628      	mov	r0, r5
 8003c22:	47b8      	blx	r7
 8003c24:	3001      	adds	r0, #1
 8003c26:	f43f aefc 	beq.w	8003a22 <_printf_float+0xba>
 8003c2a:	f109 0901 	add.w	r9, r9, #1
 8003c2e:	e7ee      	b.n	8003c0e <_printf_float+0x2a6>
 8003c30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003c32:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003c34:	429a      	cmp	r2, r3
 8003c36:	bfa8      	it	ge
 8003c38:	461a      	movge	r2, r3
 8003c3a:	2a00      	cmp	r2, #0
 8003c3c:	4691      	mov	r9, r2
 8003c3e:	dd07      	ble.n	8003c50 <_printf_float+0x2e8>
 8003c40:	4613      	mov	r3, r2
 8003c42:	4631      	mov	r1, r6
 8003c44:	4642      	mov	r2, r8
 8003c46:	4628      	mov	r0, r5
 8003c48:	47b8      	blx	r7
 8003c4a:	3001      	adds	r0, #1
 8003c4c:	f43f aee9 	beq.w	8003a22 <_printf_float+0xba>
 8003c50:	f104 031a 	add.w	r3, r4, #26
 8003c54:	f04f 0b00 	mov.w	fp, #0
 8003c58:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003c5c:	9306      	str	r3, [sp, #24]
 8003c5e:	e015      	b.n	8003c8c <_printf_float+0x324>
 8003c60:	7fefffff 	.word	0x7fefffff
 8003c64:	080052f4 	.word	0x080052f4
 8003c68:	080052f0 	.word	0x080052f0
 8003c6c:	080052fc 	.word	0x080052fc
 8003c70:	080052f8 	.word	0x080052f8
 8003c74:	08005300 	.word	0x08005300
 8003c78:	2301      	movs	r3, #1
 8003c7a:	9a06      	ldr	r2, [sp, #24]
 8003c7c:	4631      	mov	r1, r6
 8003c7e:	4628      	mov	r0, r5
 8003c80:	47b8      	blx	r7
 8003c82:	3001      	adds	r0, #1
 8003c84:	f43f aecd 	beq.w	8003a22 <_printf_float+0xba>
 8003c88:	f10b 0b01 	add.w	fp, fp, #1
 8003c8c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003c90:	ebaa 0309 	sub.w	r3, sl, r9
 8003c94:	455b      	cmp	r3, fp
 8003c96:	dcef      	bgt.n	8003c78 <_printf_float+0x310>
 8003c98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	44d0      	add	r8, sl
 8003ca0:	db15      	blt.n	8003cce <_printf_float+0x366>
 8003ca2:	6823      	ldr	r3, [r4, #0]
 8003ca4:	07da      	lsls	r2, r3, #31
 8003ca6:	d412      	bmi.n	8003cce <_printf_float+0x366>
 8003ca8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003caa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003cac:	eba3 020a 	sub.w	r2, r3, sl
 8003cb0:	eba3 0a01 	sub.w	sl, r3, r1
 8003cb4:	4592      	cmp	sl, r2
 8003cb6:	bfa8      	it	ge
 8003cb8:	4692      	movge	sl, r2
 8003cba:	f1ba 0f00 	cmp.w	sl, #0
 8003cbe:	dc0e      	bgt.n	8003cde <_printf_float+0x376>
 8003cc0:	f04f 0800 	mov.w	r8, #0
 8003cc4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003cc8:	f104 091a 	add.w	r9, r4, #26
 8003ccc:	e019      	b.n	8003d02 <_printf_float+0x39a>
 8003cce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003cd2:	4631      	mov	r1, r6
 8003cd4:	4628      	mov	r0, r5
 8003cd6:	47b8      	blx	r7
 8003cd8:	3001      	adds	r0, #1
 8003cda:	d1e5      	bne.n	8003ca8 <_printf_float+0x340>
 8003cdc:	e6a1      	b.n	8003a22 <_printf_float+0xba>
 8003cde:	4653      	mov	r3, sl
 8003ce0:	4642      	mov	r2, r8
 8003ce2:	4631      	mov	r1, r6
 8003ce4:	4628      	mov	r0, r5
 8003ce6:	47b8      	blx	r7
 8003ce8:	3001      	adds	r0, #1
 8003cea:	d1e9      	bne.n	8003cc0 <_printf_float+0x358>
 8003cec:	e699      	b.n	8003a22 <_printf_float+0xba>
 8003cee:	2301      	movs	r3, #1
 8003cf0:	464a      	mov	r2, r9
 8003cf2:	4631      	mov	r1, r6
 8003cf4:	4628      	mov	r0, r5
 8003cf6:	47b8      	blx	r7
 8003cf8:	3001      	adds	r0, #1
 8003cfa:	f43f ae92 	beq.w	8003a22 <_printf_float+0xba>
 8003cfe:	f108 0801 	add.w	r8, r8, #1
 8003d02:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003d06:	1a9b      	subs	r3, r3, r2
 8003d08:	eba3 030a 	sub.w	r3, r3, sl
 8003d0c:	4543      	cmp	r3, r8
 8003d0e:	dcee      	bgt.n	8003cee <_printf_float+0x386>
 8003d10:	e74a      	b.n	8003ba8 <_printf_float+0x240>
 8003d12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003d14:	2a01      	cmp	r2, #1
 8003d16:	dc01      	bgt.n	8003d1c <_printf_float+0x3b4>
 8003d18:	07db      	lsls	r3, r3, #31
 8003d1a:	d53a      	bpl.n	8003d92 <_printf_float+0x42a>
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	4642      	mov	r2, r8
 8003d20:	4631      	mov	r1, r6
 8003d22:	4628      	mov	r0, r5
 8003d24:	47b8      	blx	r7
 8003d26:	3001      	adds	r0, #1
 8003d28:	f43f ae7b 	beq.w	8003a22 <_printf_float+0xba>
 8003d2c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003d30:	4631      	mov	r1, r6
 8003d32:	4628      	mov	r0, r5
 8003d34:	47b8      	blx	r7
 8003d36:	3001      	adds	r0, #1
 8003d38:	f108 0801 	add.w	r8, r8, #1
 8003d3c:	f43f ae71 	beq.w	8003a22 <_printf_float+0xba>
 8003d40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d42:	2200      	movs	r2, #0
 8003d44:	f103 3aff 	add.w	sl, r3, #4294967295
 8003d48:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	f7fc fe67 	bl	8000a20 <__aeabi_dcmpeq>
 8003d52:	b9c8      	cbnz	r0, 8003d88 <_printf_float+0x420>
 8003d54:	4653      	mov	r3, sl
 8003d56:	4642      	mov	r2, r8
 8003d58:	4631      	mov	r1, r6
 8003d5a:	4628      	mov	r0, r5
 8003d5c:	47b8      	blx	r7
 8003d5e:	3001      	adds	r0, #1
 8003d60:	d10e      	bne.n	8003d80 <_printf_float+0x418>
 8003d62:	e65e      	b.n	8003a22 <_printf_float+0xba>
 8003d64:	2301      	movs	r3, #1
 8003d66:	4652      	mov	r2, sl
 8003d68:	4631      	mov	r1, r6
 8003d6a:	4628      	mov	r0, r5
 8003d6c:	47b8      	blx	r7
 8003d6e:	3001      	adds	r0, #1
 8003d70:	f43f ae57 	beq.w	8003a22 <_printf_float+0xba>
 8003d74:	f108 0801 	add.w	r8, r8, #1
 8003d78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d7a:	3b01      	subs	r3, #1
 8003d7c:	4543      	cmp	r3, r8
 8003d7e:	dcf1      	bgt.n	8003d64 <_printf_float+0x3fc>
 8003d80:	464b      	mov	r3, r9
 8003d82:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003d86:	e6de      	b.n	8003b46 <_printf_float+0x1de>
 8003d88:	f04f 0800 	mov.w	r8, #0
 8003d8c:	f104 0a1a 	add.w	sl, r4, #26
 8003d90:	e7f2      	b.n	8003d78 <_printf_float+0x410>
 8003d92:	2301      	movs	r3, #1
 8003d94:	e7df      	b.n	8003d56 <_printf_float+0x3ee>
 8003d96:	2301      	movs	r3, #1
 8003d98:	464a      	mov	r2, r9
 8003d9a:	4631      	mov	r1, r6
 8003d9c:	4628      	mov	r0, r5
 8003d9e:	47b8      	blx	r7
 8003da0:	3001      	adds	r0, #1
 8003da2:	f43f ae3e 	beq.w	8003a22 <_printf_float+0xba>
 8003da6:	f108 0801 	add.w	r8, r8, #1
 8003daa:	68e3      	ldr	r3, [r4, #12]
 8003dac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003dae:	1a9b      	subs	r3, r3, r2
 8003db0:	4543      	cmp	r3, r8
 8003db2:	dcf0      	bgt.n	8003d96 <_printf_float+0x42e>
 8003db4:	e6fc      	b.n	8003bb0 <_printf_float+0x248>
 8003db6:	f04f 0800 	mov.w	r8, #0
 8003dba:	f104 0919 	add.w	r9, r4, #25
 8003dbe:	e7f4      	b.n	8003daa <_printf_float+0x442>
 8003dc0:	2900      	cmp	r1, #0
 8003dc2:	f43f ae8b 	beq.w	8003adc <_printf_float+0x174>
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8003dcc:	ab09      	add	r3, sp, #36	; 0x24
 8003dce:	9300      	str	r3, [sp, #0]
 8003dd0:	ec49 8b10 	vmov	d0, r8, r9
 8003dd4:	6022      	str	r2, [r4, #0]
 8003dd6:	f8cd a004 	str.w	sl, [sp, #4]
 8003dda:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003dde:	4628      	mov	r0, r5
 8003de0:	f7ff fd2e 	bl	8003840 <__cvt>
 8003de4:	4680      	mov	r8, r0
 8003de6:	e648      	b.n	8003a7a <_printf_float+0x112>

08003de8 <_printf_common>:
 8003de8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003dec:	4691      	mov	r9, r2
 8003dee:	461f      	mov	r7, r3
 8003df0:	688a      	ldr	r2, [r1, #8]
 8003df2:	690b      	ldr	r3, [r1, #16]
 8003df4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	bfb8      	it	lt
 8003dfc:	4613      	movlt	r3, r2
 8003dfe:	f8c9 3000 	str.w	r3, [r9]
 8003e02:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003e06:	4606      	mov	r6, r0
 8003e08:	460c      	mov	r4, r1
 8003e0a:	b112      	cbz	r2, 8003e12 <_printf_common+0x2a>
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	f8c9 3000 	str.w	r3, [r9]
 8003e12:	6823      	ldr	r3, [r4, #0]
 8003e14:	0699      	lsls	r1, r3, #26
 8003e16:	bf42      	ittt	mi
 8003e18:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003e1c:	3302      	addmi	r3, #2
 8003e1e:	f8c9 3000 	strmi.w	r3, [r9]
 8003e22:	6825      	ldr	r5, [r4, #0]
 8003e24:	f015 0506 	ands.w	r5, r5, #6
 8003e28:	d107      	bne.n	8003e3a <_printf_common+0x52>
 8003e2a:	f104 0a19 	add.w	sl, r4, #25
 8003e2e:	68e3      	ldr	r3, [r4, #12]
 8003e30:	f8d9 2000 	ldr.w	r2, [r9]
 8003e34:	1a9b      	subs	r3, r3, r2
 8003e36:	42ab      	cmp	r3, r5
 8003e38:	dc28      	bgt.n	8003e8c <_printf_common+0xa4>
 8003e3a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003e3e:	6822      	ldr	r2, [r4, #0]
 8003e40:	3300      	adds	r3, #0
 8003e42:	bf18      	it	ne
 8003e44:	2301      	movne	r3, #1
 8003e46:	0692      	lsls	r2, r2, #26
 8003e48:	d42d      	bmi.n	8003ea6 <_printf_common+0xbe>
 8003e4a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e4e:	4639      	mov	r1, r7
 8003e50:	4630      	mov	r0, r6
 8003e52:	47c0      	blx	r8
 8003e54:	3001      	adds	r0, #1
 8003e56:	d020      	beq.n	8003e9a <_printf_common+0xb2>
 8003e58:	6823      	ldr	r3, [r4, #0]
 8003e5a:	68e5      	ldr	r5, [r4, #12]
 8003e5c:	f8d9 2000 	ldr.w	r2, [r9]
 8003e60:	f003 0306 	and.w	r3, r3, #6
 8003e64:	2b04      	cmp	r3, #4
 8003e66:	bf08      	it	eq
 8003e68:	1aad      	subeq	r5, r5, r2
 8003e6a:	68a3      	ldr	r3, [r4, #8]
 8003e6c:	6922      	ldr	r2, [r4, #16]
 8003e6e:	bf0c      	ite	eq
 8003e70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e74:	2500      	movne	r5, #0
 8003e76:	4293      	cmp	r3, r2
 8003e78:	bfc4      	itt	gt
 8003e7a:	1a9b      	subgt	r3, r3, r2
 8003e7c:	18ed      	addgt	r5, r5, r3
 8003e7e:	f04f 0900 	mov.w	r9, #0
 8003e82:	341a      	adds	r4, #26
 8003e84:	454d      	cmp	r5, r9
 8003e86:	d11a      	bne.n	8003ebe <_printf_common+0xd6>
 8003e88:	2000      	movs	r0, #0
 8003e8a:	e008      	b.n	8003e9e <_printf_common+0xb6>
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	4652      	mov	r2, sl
 8003e90:	4639      	mov	r1, r7
 8003e92:	4630      	mov	r0, r6
 8003e94:	47c0      	blx	r8
 8003e96:	3001      	adds	r0, #1
 8003e98:	d103      	bne.n	8003ea2 <_printf_common+0xba>
 8003e9a:	f04f 30ff 	mov.w	r0, #4294967295
 8003e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ea2:	3501      	adds	r5, #1
 8003ea4:	e7c3      	b.n	8003e2e <_printf_common+0x46>
 8003ea6:	18e1      	adds	r1, r4, r3
 8003ea8:	1c5a      	adds	r2, r3, #1
 8003eaa:	2030      	movs	r0, #48	; 0x30
 8003eac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003eb0:	4422      	add	r2, r4
 8003eb2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003eb6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003eba:	3302      	adds	r3, #2
 8003ebc:	e7c5      	b.n	8003e4a <_printf_common+0x62>
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	4622      	mov	r2, r4
 8003ec2:	4639      	mov	r1, r7
 8003ec4:	4630      	mov	r0, r6
 8003ec6:	47c0      	blx	r8
 8003ec8:	3001      	adds	r0, #1
 8003eca:	d0e6      	beq.n	8003e9a <_printf_common+0xb2>
 8003ecc:	f109 0901 	add.w	r9, r9, #1
 8003ed0:	e7d8      	b.n	8003e84 <_printf_common+0x9c>

08003ed2 <quorem>:
 8003ed2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ed6:	6903      	ldr	r3, [r0, #16]
 8003ed8:	690c      	ldr	r4, [r1, #16]
 8003eda:	42a3      	cmp	r3, r4
 8003edc:	4680      	mov	r8, r0
 8003ede:	f2c0 8082 	blt.w	8003fe6 <quorem+0x114>
 8003ee2:	3c01      	subs	r4, #1
 8003ee4:	f101 0714 	add.w	r7, r1, #20
 8003ee8:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8003eec:	f100 0614 	add.w	r6, r0, #20
 8003ef0:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8003ef4:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8003ef8:	eb06 030c 	add.w	r3, r6, ip
 8003efc:	3501      	adds	r5, #1
 8003efe:	eb07 090c 	add.w	r9, r7, ip
 8003f02:	9301      	str	r3, [sp, #4]
 8003f04:	fbb0 f5f5 	udiv	r5, r0, r5
 8003f08:	b395      	cbz	r5, 8003f70 <quorem+0x9e>
 8003f0a:	f04f 0a00 	mov.w	sl, #0
 8003f0e:	4638      	mov	r0, r7
 8003f10:	46b6      	mov	lr, r6
 8003f12:	46d3      	mov	fp, sl
 8003f14:	f850 2b04 	ldr.w	r2, [r0], #4
 8003f18:	b293      	uxth	r3, r2
 8003f1a:	fb05 a303 	mla	r3, r5, r3, sl
 8003f1e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	ebab 0303 	sub.w	r3, fp, r3
 8003f28:	0c12      	lsrs	r2, r2, #16
 8003f2a:	f8de b000 	ldr.w	fp, [lr]
 8003f2e:	fb05 a202 	mla	r2, r5, r2, sl
 8003f32:	fa13 f38b 	uxtah	r3, r3, fp
 8003f36:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8003f3a:	fa1f fb82 	uxth.w	fp, r2
 8003f3e:	f8de 2000 	ldr.w	r2, [lr]
 8003f42:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8003f46:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003f50:	4581      	cmp	r9, r0
 8003f52:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8003f56:	f84e 3b04 	str.w	r3, [lr], #4
 8003f5a:	d2db      	bcs.n	8003f14 <quorem+0x42>
 8003f5c:	f856 300c 	ldr.w	r3, [r6, ip]
 8003f60:	b933      	cbnz	r3, 8003f70 <quorem+0x9e>
 8003f62:	9b01      	ldr	r3, [sp, #4]
 8003f64:	3b04      	subs	r3, #4
 8003f66:	429e      	cmp	r6, r3
 8003f68:	461a      	mov	r2, r3
 8003f6a:	d330      	bcc.n	8003fce <quorem+0xfc>
 8003f6c:	f8c8 4010 	str.w	r4, [r8, #16]
 8003f70:	4640      	mov	r0, r8
 8003f72:	f001 f82b 	bl	8004fcc <__mcmp>
 8003f76:	2800      	cmp	r0, #0
 8003f78:	db25      	blt.n	8003fc6 <quorem+0xf4>
 8003f7a:	3501      	adds	r5, #1
 8003f7c:	4630      	mov	r0, r6
 8003f7e:	f04f 0c00 	mov.w	ip, #0
 8003f82:	f857 2b04 	ldr.w	r2, [r7], #4
 8003f86:	f8d0 e000 	ldr.w	lr, [r0]
 8003f8a:	b293      	uxth	r3, r2
 8003f8c:	ebac 0303 	sub.w	r3, ip, r3
 8003f90:	0c12      	lsrs	r2, r2, #16
 8003f92:	fa13 f38e 	uxtah	r3, r3, lr
 8003f96:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003f9a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003fa4:	45b9      	cmp	r9, r7
 8003fa6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003faa:	f840 3b04 	str.w	r3, [r0], #4
 8003fae:	d2e8      	bcs.n	8003f82 <quorem+0xb0>
 8003fb0:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8003fb4:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8003fb8:	b92a      	cbnz	r2, 8003fc6 <quorem+0xf4>
 8003fba:	3b04      	subs	r3, #4
 8003fbc:	429e      	cmp	r6, r3
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	d30b      	bcc.n	8003fda <quorem+0x108>
 8003fc2:	f8c8 4010 	str.w	r4, [r8, #16]
 8003fc6:	4628      	mov	r0, r5
 8003fc8:	b003      	add	sp, #12
 8003fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fce:	6812      	ldr	r2, [r2, #0]
 8003fd0:	3b04      	subs	r3, #4
 8003fd2:	2a00      	cmp	r2, #0
 8003fd4:	d1ca      	bne.n	8003f6c <quorem+0x9a>
 8003fd6:	3c01      	subs	r4, #1
 8003fd8:	e7c5      	b.n	8003f66 <quorem+0x94>
 8003fda:	6812      	ldr	r2, [r2, #0]
 8003fdc:	3b04      	subs	r3, #4
 8003fde:	2a00      	cmp	r2, #0
 8003fe0:	d1ef      	bne.n	8003fc2 <quorem+0xf0>
 8003fe2:	3c01      	subs	r4, #1
 8003fe4:	e7ea      	b.n	8003fbc <quorem+0xea>
 8003fe6:	2000      	movs	r0, #0
 8003fe8:	e7ee      	b.n	8003fc8 <quorem+0xf6>
 8003fea:	0000      	movs	r0, r0
 8003fec:	0000      	movs	r0, r0
	...

08003ff0 <_dtoa_r>:
 8003ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ff4:	ec57 6b10 	vmov	r6, r7, d0
 8003ff8:	b097      	sub	sp, #92	; 0x5c
 8003ffa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003ffc:	9106      	str	r1, [sp, #24]
 8003ffe:	4604      	mov	r4, r0
 8004000:	920b      	str	r2, [sp, #44]	; 0x2c
 8004002:	9312      	str	r3, [sp, #72]	; 0x48
 8004004:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004008:	e9cd 6700 	strd	r6, r7, [sp]
 800400c:	b93d      	cbnz	r5, 800401e <_dtoa_r+0x2e>
 800400e:	2010      	movs	r0, #16
 8004010:	f000 fdb4 	bl	8004b7c <malloc>
 8004014:	6260      	str	r0, [r4, #36]	; 0x24
 8004016:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800401a:	6005      	str	r5, [r0, #0]
 800401c:	60c5      	str	r5, [r0, #12]
 800401e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004020:	6819      	ldr	r1, [r3, #0]
 8004022:	b151      	cbz	r1, 800403a <_dtoa_r+0x4a>
 8004024:	685a      	ldr	r2, [r3, #4]
 8004026:	604a      	str	r2, [r1, #4]
 8004028:	2301      	movs	r3, #1
 800402a:	4093      	lsls	r3, r2
 800402c:	608b      	str	r3, [r1, #8]
 800402e:	4620      	mov	r0, r4
 8004030:	f000 fdeb 	bl	8004c0a <_Bfree>
 8004034:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004036:	2200      	movs	r2, #0
 8004038:	601a      	str	r2, [r3, #0]
 800403a:	1e3b      	subs	r3, r7, #0
 800403c:	bfbb      	ittet	lt
 800403e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004042:	9301      	strlt	r3, [sp, #4]
 8004044:	2300      	movge	r3, #0
 8004046:	2201      	movlt	r2, #1
 8004048:	bfac      	ite	ge
 800404a:	f8c8 3000 	strge.w	r3, [r8]
 800404e:	f8c8 2000 	strlt.w	r2, [r8]
 8004052:	4baf      	ldr	r3, [pc, #700]	; (8004310 <_dtoa_r+0x320>)
 8004054:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8004058:	ea33 0308 	bics.w	r3, r3, r8
 800405c:	d114      	bne.n	8004088 <_dtoa_r+0x98>
 800405e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004060:	f242 730f 	movw	r3, #9999	; 0x270f
 8004064:	6013      	str	r3, [r2, #0]
 8004066:	9b00      	ldr	r3, [sp, #0]
 8004068:	b923      	cbnz	r3, 8004074 <_dtoa_r+0x84>
 800406a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800406e:	2800      	cmp	r0, #0
 8004070:	f000 8542 	beq.w	8004af8 <_dtoa_r+0xb08>
 8004074:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004076:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8004324 <_dtoa_r+0x334>
 800407a:	2b00      	cmp	r3, #0
 800407c:	f000 8544 	beq.w	8004b08 <_dtoa_r+0xb18>
 8004080:	f10b 0303 	add.w	r3, fp, #3
 8004084:	f000 bd3e 	b.w	8004b04 <_dtoa_r+0xb14>
 8004088:	e9dd 6700 	ldrd	r6, r7, [sp]
 800408c:	2200      	movs	r2, #0
 800408e:	2300      	movs	r3, #0
 8004090:	4630      	mov	r0, r6
 8004092:	4639      	mov	r1, r7
 8004094:	f7fc fcc4 	bl	8000a20 <__aeabi_dcmpeq>
 8004098:	4681      	mov	r9, r0
 800409a:	b168      	cbz	r0, 80040b8 <_dtoa_r+0xc8>
 800409c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800409e:	2301      	movs	r3, #1
 80040a0:	6013      	str	r3, [r2, #0]
 80040a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	f000 8524 	beq.w	8004af2 <_dtoa_r+0xb02>
 80040aa:	4b9a      	ldr	r3, [pc, #616]	; (8004314 <_dtoa_r+0x324>)
 80040ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80040ae:	f103 3bff 	add.w	fp, r3, #4294967295
 80040b2:	6013      	str	r3, [r2, #0]
 80040b4:	f000 bd28 	b.w	8004b08 <_dtoa_r+0xb18>
 80040b8:	aa14      	add	r2, sp, #80	; 0x50
 80040ba:	a915      	add	r1, sp, #84	; 0x54
 80040bc:	ec47 6b10 	vmov	d0, r6, r7
 80040c0:	4620      	mov	r0, r4
 80040c2:	f000 fffa 	bl	80050ba <__d2b>
 80040c6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80040ca:	9004      	str	r0, [sp, #16]
 80040cc:	2d00      	cmp	r5, #0
 80040ce:	d07c      	beq.n	80041ca <_dtoa_r+0x1da>
 80040d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80040d4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80040d8:	46b2      	mov	sl, r6
 80040da:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80040de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80040e2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80040e6:	2200      	movs	r2, #0
 80040e8:	4b8b      	ldr	r3, [pc, #556]	; (8004318 <_dtoa_r+0x328>)
 80040ea:	4650      	mov	r0, sl
 80040ec:	4659      	mov	r1, fp
 80040ee:	f7fc f877 	bl	80001e0 <__aeabi_dsub>
 80040f2:	a381      	add	r3, pc, #516	; (adr r3, 80042f8 <_dtoa_r+0x308>)
 80040f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f8:	f7fc fa2a 	bl	8000550 <__aeabi_dmul>
 80040fc:	a380      	add	r3, pc, #512	; (adr r3, 8004300 <_dtoa_r+0x310>)
 80040fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004102:	f7fc f86f 	bl	80001e4 <__adddf3>
 8004106:	4606      	mov	r6, r0
 8004108:	4628      	mov	r0, r5
 800410a:	460f      	mov	r7, r1
 800410c:	f7fc f9b6 	bl	800047c <__aeabi_i2d>
 8004110:	a37d      	add	r3, pc, #500	; (adr r3, 8004308 <_dtoa_r+0x318>)
 8004112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004116:	f7fc fa1b 	bl	8000550 <__aeabi_dmul>
 800411a:	4602      	mov	r2, r0
 800411c:	460b      	mov	r3, r1
 800411e:	4630      	mov	r0, r6
 8004120:	4639      	mov	r1, r7
 8004122:	f7fc f85f 	bl	80001e4 <__adddf3>
 8004126:	4606      	mov	r6, r0
 8004128:	460f      	mov	r7, r1
 800412a:	f7fc fcc1 	bl	8000ab0 <__aeabi_d2iz>
 800412e:	2200      	movs	r2, #0
 8004130:	4682      	mov	sl, r0
 8004132:	2300      	movs	r3, #0
 8004134:	4630      	mov	r0, r6
 8004136:	4639      	mov	r1, r7
 8004138:	f7fc fc7c 	bl	8000a34 <__aeabi_dcmplt>
 800413c:	b148      	cbz	r0, 8004152 <_dtoa_r+0x162>
 800413e:	4650      	mov	r0, sl
 8004140:	f7fc f99c 	bl	800047c <__aeabi_i2d>
 8004144:	4632      	mov	r2, r6
 8004146:	463b      	mov	r3, r7
 8004148:	f7fc fc6a 	bl	8000a20 <__aeabi_dcmpeq>
 800414c:	b908      	cbnz	r0, 8004152 <_dtoa_r+0x162>
 800414e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004152:	f1ba 0f16 	cmp.w	sl, #22
 8004156:	d859      	bhi.n	800420c <_dtoa_r+0x21c>
 8004158:	4970      	ldr	r1, [pc, #448]	; (800431c <_dtoa_r+0x32c>)
 800415a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800415e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004162:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004166:	f7fc fc83 	bl	8000a70 <__aeabi_dcmpgt>
 800416a:	2800      	cmp	r0, #0
 800416c:	d050      	beq.n	8004210 <_dtoa_r+0x220>
 800416e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004172:	2300      	movs	r3, #0
 8004174:	930f      	str	r3, [sp, #60]	; 0x3c
 8004176:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004178:	1b5d      	subs	r5, r3, r5
 800417a:	f1b5 0801 	subs.w	r8, r5, #1
 800417e:	bf49      	itett	mi
 8004180:	f1c5 0301 	rsbmi	r3, r5, #1
 8004184:	2300      	movpl	r3, #0
 8004186:	9305      	strmi	r3, [sp, #20]
 8004188:	f04f 0800 	movmi.w	r8, #0
 800418c:	bf58      	it	pl
 800418e:	9305      	strpl	r3, [sp, #20]
 8004190:	f1ba 0f00 	cmp.w	sl, #0
 8004194:	db3e      	blt.n	8004214 <_dtoa_r+0x224>
 8004196:	2300      	movs	r3, #0
 8004198:	44d0      	add	r8, sl
 800419a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800419e:	9307      	str	r3, [sp, #28]
 80041a0:	9b06      	ldr	r3, [sp, #24]
 80041a2:	2b09      	cmp	r3, #9
 80041a4:	f200 8090 	bhi.w	80042c8 <_dtoa_r+0x2d8>
 80041a8:	2b05      	cmp	r3, #5
 80041aa:	bfc4      	itt	gt
 80041ac:	3b04      	subgt	r3, #4
 80041ae:	9306      	strgt	r3, [sp, #24]
 80041b0:	9b06      	ldr	r3, [sp, #24]
 80041b2:	f1a3 0302 	sub.w	r3, r3, #2
 80041b6:	bfcc      	ite	gt
 80041b8:	2500      	movgt	r5, #0
 80041ba:	2501      	movle	r5, #1
 80041bc:	2b03      	cmp	r3, #3
 80041be:	f200 808f 	bhi.w	80042e0 <_dtoa_r+0x2f0>
 80041c2:	e8df f003 	tbb	[pc, r3]
 80041c6:	7f7d      	.short	0x7f7d
 80041c8:	7131      	.short	0x7131
 80041ca:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80041ce:	441d      	add	r5, r3
 80041d0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80041d4:	2820      	cmp	r0, #32
 80041d6:	dd13      	ble.n	8004200 <_dtoa_r+0x210>
 80041d8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80041dc:	9b00      	ldr	r3, [sp, #0]
 80041de:	fa08 f800 	lsl.w	r8, r8, r0
 80041e2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80041e6:	fa23 f000 	lsr.w	r0, r3, r0
 80041ea:	ea48 0000 	orr.w	r0, r8, r0
 80041ee:	f7fc f935 	bl	800045c <__aeabi_ui2d>
 80041f2:	2301      	movs	r3, #1
 80041f4:	4682      	mov	sl, r0
 80041f6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80041fa:	3d01      	subs	r5, #1
 80041fc:	9313      	str	r3, [sp, #76]	; 0x4c
 80041fe:	e772      	b.n	80040e6 <_dtoa_r+0xf6>
 8004200:	9b00      	ldr	r3, [sp, #0]
 8004202:	f1c0 0020 	rsb	r0, r0, #32
 8004206:	fa03 f000 	lsl.w	r0, r3, r0
 800420a:	e7f0      	b.n	80041ee <_dtoa_r+0x1fe>
 800420c:	2301      	movs	r3, #1
 800420e:	e7b1      	b.n	8004174 <_dtoa_r+0x184>
 8004210:	900f      	str	r0, [sp, #60]	; 0x3c
 8004212:	e7b0      	b.n	8004176 <_dtoa_r+0x186>
 8004214:	9b05      	ldr	r3, [sp, #20]
 8004216:	eba3 030a 	sub.w	r3, r3, sl
 800421a:	9305      	str	r3, [sp, #20]
 800421c:	f1ca 0300 	rsb	r3, sl, #0
 8004220:	9307      	str	r3, [sp, #28]
 8004222:	2300      	movs	r3, #0
 8004224:	930e      	str	r3, [sp, #56]	; 0x38
 8004226:	e7bb      	b.n	80041a0 <_dtoa_r+0x1b0>
 8004228:	2301      	movs	r3, #1
 800422a:	930a      	str	r3, [sp, #40]	; 0x28
 800422c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800422e:	2b00      	cmp	r3, #0
 8004230:	dd59      	ble.n	80042e6 <_dtoa_r+0x2f6>
 8004232:	9302      	str	r3, [sp, #8]
 8004234:	4699      	mov	r9, r3
 8004236:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004238:	2200      	movs	r2, #0
 800423a:	6072      	str	r2, [r6, #4]
 800423c:	2204      	movs	r2, #4
 800423e:	f102 0014 	add.w	r0, r2, #20
 8004242:	4298      	cmp	r0, r3
 8004244:	6871      	ldr	r1, [r6, #4]
 8004246:	d953      	bls.n	80042f0 <_dtoa_r+0x300>
 8004248:	4620      	mov	r0, r4
 800424a:	f000 fcaa 	bl	8004ba2 <_Balloc>
 800424e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004250:	6030      	str	r0, [r6, #0]
 8004252:	f1b9 0f0e 	cmp.w	r9, #14
 8004256:	f8d3 b000 	ldr.w	fp, [r3]
 800425a:	f200 80e6 	bhi.w	800442a <_dtoa_r+0x43a>
 800425e:	2d00      	cmp	r5, #0
 8004260:	f000 80e3 	beq.w	800442a <_dtoa_r+0x43a>
 8004264:	ed9d 7b00 	vldr	d7, [sp]
 8004268:	f1ba 0f00 	cmp.w	sl, #0
 800426c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8004270:	dd74      	ble.n	800435c <_dtoa_r+0x36c>
 8004272:	4a2a      	ldr	r2, [pc, #168]	; (800431c <_dtoa_r+0x32c>)
 8004274:	f00a 030f 	and.w	r3, sl, #15
 8004278:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800427c:	ed93 7b00 	vldr	d7, [r3]
 8004280:	ea4f 162a 	mov.w	r6, sl, asr #4
 8004284:	06f0      	lsls	r0, r6, #27
 8004286:	ed8d 7b08 	vstr	d7, [sp, #32]
 800428a:	d565      	bpl.n	8004358 <_dtoa_r+0x368>
 800428c:	4b24      	ldr	r3, [pc, #144]	; (8004320 <_dtoa_r+0x330>)
 800428e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004292:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004296:	f7fc fa85 	bl	80007a4 <__aeabi_ddiv>
 800429a:	e9cd 0100 	strd	r0, r1, [sp]
 800429e:	f006 060f 	and.w	r6, r6, #15
 80042a2:	2503      	movs	r5, #3
 80042a4:	4f1e      	ldr	r7, [pc, #120]	; (8004320 <_dtoa_r+0x330>)
 80042a6:	e04c      	b.n	8004342 <_dtoa_r+0x352>
 80042a8:	2301      	movs	r3, #1
 80042aa:	930a      	str	r3, [sp, #40]	; 0x28
 80042ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80042ae:	4453      	add	r3, sl
 80042b0:	f103 0901 	add.w	r9, r3, #1
 80042b4:	9302      	str	r3, [sp, #8]
 80042b6:	464b      	mov	r3, r9
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	bfb8      	it	lt
 80042bc:	2301      	movlt	r3, #1
 80042be:	e7ba      	b.n	8004236 <_dtoa_r+0x246>
 80042c0:	2300      	movs	r3, #0
 80042c2:	e7b2      	b.n	800422a <_dtoa_r+0x23a>
 80042c4:	2300      	movs	r3, #0
 80042c6:	e7f0      	b.n	80042aa <_dtoa_r+0x2ba>
 80042c8:	2501      	movs	r5, #1
 80042ca:	2300      	movs	r3, #0
 80042cc:	9306      	str	r3, [sp, #24]
 80042ce:	950a      	str	r5, [sp, #40]	; 0x28
 80042d0:	f04f 33ff 	mov.w	r3, #4294967295
 80042d4:	9302      	str	r3, [sp, #8]
 80042d6:	4699      	mov	r9, r3
 80042d8:	2200      	movs	r2, #0
 80042da:	2312      	movs	r3, #18
 80042dc:	920b      	str	r2, [sp, #44]	; 0x2c
 80042de:	e7aa      	b.n	8004236 <_dtoa_r+0x246>
 80042e0:	2301      	movs	r3, #1
 80042e2:	930a      	str	r3, [sp, #40]	; 0x28
 80042e4:	e7f4      	b.n	80042d0 <_dtoa_r+0x2e0>
 80042e6:	2301      	movs	r3, #1
 80042e8:	9302      	str	r3, [sp, #8]
 80042ea:	4699      	mov	r9, r3
 80042ec:	461a      	mov	r2, r3
 80042ee:	e7f5      	b.n	80042dc <_dtoa_r+0x2ec>
 80042f0:	3101      	adds	r1, #1
 80042f2:	6071      	str	r1, [r6, #4]
 80042f4:	0052      	lsls	r2, r2, #1
 80042f6:	e7a2      	b.n	800423e <_dtoa_r+0x24e>
 80042f8:	636f4361 	.word	0x636f4361
 80042fc:	3fd287a7 	.word	0x3fd287a7
 8004300:	8b60c8b3 	.word	0x8b60c8b3
 8004304:	3fc68a28 	.word	0x3fc68a28
 8004308:	509f79fb 	.word	0x509f79fb
 800430c:	3fd34413 	.word	0x3fd34413
 8004310:	7ff00000 	.word	0x7ff00000
 8004314:	08005301 	.word	0x08005301
 8004318:	3ff80000 	.word	0x3ff80000
 800431c:	08005338 	.word	0x08005338
 8004320:	08005310 	.word	0x08005310
 8004324:	0800530b 	.word	0x0800530b
 8004328:	07f1      	lsls	r1, r6, #31
 800432a:	d508      	bpl.n	800433e <_dtoa_r+0x34e>
 800432c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004330:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004334:	f7fc f90c 	bl	8000550 <__aeabi_dmul>
 8004338:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800433c:	3501      	adds	r5, #1
 800433e:	1076      	asrs	r6, r6, #1
 8004340:	3708      	adds	r7, #8
 8004342:	2e00      	cmp	r6, #0
 8004344:	d1f0      	bne.n	8004328 <_dtoa_r+0x338>
 8004346:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800434a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800434e:	f7fc fa29 	bl	80007a4 <__aeabi_ddiv>
 8004352:	e9cd 0100 	strd	r0, r1, [sp]
 8004356:	e01a      	b.n	800438e <_dtoa_r+0x39e>
 8004358:	2502      	movs	r5, #2
 800435a:	e7a3      	b.n	80042a4 <_dtoa_r+0x2b4>
 800435c:	f000 80a0 	beq.w	80044a0 <_dtoa_r+0x4b0>
 8004360:	f1ca 0600 	rsb	r6, sl, #0
 8004364:	4b9f      	ldr	r3, [pc, #636]	; (80045e4 <_dtoa_r+0x5f4>)
 8004366:	4fa0      	ldr	r7, [pc, #640]	; (80045e8 <_dtoa_r+0x5f8>)
 8004368:	f006 020f 	and.w	r2, r6, #15
 800436c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004374:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004378:	f7fc f8ea 	bl	8000550 <__aeabi_dmul>
 800437c:	e9cd 0100 	strd	r0, r1, [sp]
 8004380:	1136      	asrs	r6, r6, #4
 8004382:	2300      	movs	r3, #0
 8004384:	2502      	movs	r5, #2
 8004386:	2e00      	cmp	r6, #0
 8004388:	d17f      	bne.n	800448a <_dtoa_r+0x49a>
 800438a:	2b00      	cmp	r3, #0
 800438c:	d1e1      	bne.n	8004352 <_dtoa_r+0x362>
 800438e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004390:	2b00      	cmp	r3, #0
 8004392:	f000 8087 	beq.w	80044a4 <_dtoa_r+0x4b4>
 8004396:	e9dd 6700 	ldrd	r6, r7, [sp]
 800439a:	2200      	movs	r2, #0
 800439c:	4b93      	ldr	r3, [pc, #588]	; (80045ec <_dtoa_r+0x5fc>)
 800439e:	4630      	mov	r0, r6
 80043a0:	4639      	mov	r1, r7
 80043a2:	f7fc fb47 	bl	8000a34 <__aeabi_dcmplt>
 80043a6:	2800      	cmp	r0, #0
 80043a8:	d07c      	beq.n	80044a4 <_dtoa_r+0x4b4>
 80043aa:	f1b9 0f00 	cmp.w	r9, #0
 80043ae:	d079      	beq.n	80044a4 <_dtoa_r+0x4b4>
 80043b0:	9b02      	ldr	r3, [sp, #8]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	dd35      	ble.n	8004422 <_dtoa_r+0x432>
 80043b6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80043ba:	9308      	str	r3, [sp, #32]
 80043bc:	4639      	mov	r1, r7
 80043be:	2200      	movs	r2, #0
 80043c0:	4b8b      	ldr	r3, [pc, #556]	; (80045f0 <_dtoa_r+0x600>)
 80043c2:	4630      	mov	r0, r6
 80043c4:	f7fc f8c4 	bl	8000550 <__aeabi_dmul>
 80043c8:	e9cd 0100 	strd	r0, r1, [sp]
 80043cc:	9f02      	ldr	r7, [sp, #8]
 80043ce:	3501      	adds	r5, #1
 80043d0:	4628      	mov	r0, r5
 80043d2:	f7fc f853 	bl	800047c <__aeabi_i2d>
 80043d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80043da:	f7fc f8b9 	bl	8000550 <__aeabi_dmul>
 80043de:	2200      	movs	r2, #0
 80043e0:	4b84      	ldr	r3, [pc, #528]	; (80045f4 <_dtoa_r+0x604>)
 80043e2:	f7fb feff 	bl	80001e4 <__adddf3>
 80043e6:	4605      	mov	r5, r0
 80043e8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80043ec:	2f00      	cmp	r7, #0
 80043ee:	d15d      	bne.n	80044ac <_dtoa_r+0x4bc>
 80043f0:	2200      	movs	r2, #0
 80043f2:	4b81      	ldr	r3, [pc, #516]	; (80045f8 <_dtoa_r+0x608>)
 80043f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80043f8:	f7fb fef2 	bl	80001e0 <__aeabi_dsub>
 80043fc:	462a      	mov	r2, r5
 80043fe:	4633      	mov	r3, r6
 8004400:	e9cd 0100 	strd	r0, r1, [sp]
 8004404:	f7fc fb34 	bl	8000a70 <__aeabi_dcmpgt>
 8004408:	2800      	cmp	r0, #0
 800440a:	f040 8288 	bne.w	800491e <_dtoa_r+0x92e>
 800440e:	462a      	mov	r2, r5
 8004410:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004414:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004418:	f7fc fb0c 	bl	8000a34 <__aeabi_dcmplt>
 800441c:	2800      	cmp	r0, #0
 800441e:	f040 827c 	bne.w	800491a <_dtoa_r+0x92a>
 8004422:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004426:	e9cd 2300 	strd	r2, r3, [sp]
 800442a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800442c:	2b00      	cmp	r3, #0
 800442e:	f2c0 8150 	blt.w	80046d2 <_dtoa_r+0x6e2>
 8004432:	f1ba 0f0e 	cmp.w	sl, #14
 8004436:	f300 814c 	bgt.w	80046d2 <_dtoa_r+0x6e2>
 800443a:	4b6a      	ldr	r3, [pc, #424]	; (80045e4 <_dtoa_r+0x5f4>)
 800443c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004440:	ed93 7b00 	vldr	d7, [r3]
 8004444:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004446:	2b00      	cmp	r3, #0
 8004448:	ed8d 7b02 	vstr	d7, [sp, #8]
 800444c:	f280 80d8 	bge.w	8004600 <_dtoa_r+0x610>
 8004450:	f1b9 0f00 	cmp.w	r9, #0
 8004454:	f300 80d4 	bgt.w	8004600 <_dtoa_r+0x610>
 8004458:	f040 825e 	bne.w	8004918 <_dtoa_r+0x928>
 800445c:	2200      	movs	r2, #0
 800445e:	4b66      	ldr	r3, [pc, #408]	; (80045f8 <_dtoa_r+0x608>)
 8004460:	ec51 0b17 	vmov	r0, r1, d7
 8004464:	f7fc f874 	bl	8000550 <__aeabi_dmul>
 8004468:	e9dd 2300 	ldrd	r2, r3, [sp]
 800446c:	f7fc faf6 	bl	8000a5c <__aeabi_dcmpge>
 8004470:	464f      	mov	r7, r9
 8004472:	464e      	mov	r6, r9
 8004474:	2800      	cmp	r0, #0
 8004476:	f040 8234 	bne.w	80048e2 <_dtoa_r+0x8f2>
 800447a:	2331      	movs	r3, #49	; 0x31
 800447c:	f10b 0501 	add.w	r5, fp, #1
 8004480:	f88b 3000 	strb.w	r3, [fp]
 8004484:	f10a 0a01 	add.w	sl, sl, #1
 8004488:	e22f      	b.n	80048ea <_dtoa_r+0x8fa>
 800448a:	07f2      	lsls	r2, r6, #31
 800448c:	d505      	bpl.n	800449a <_dtoa_r+0x4aa>
 800448e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004492:	f7fc f85d 	bl	8000550 <__aeabi_dmul>
 8004496:	3501      	adds	r5, #1
 8004498:	2301      	movs	r3, #1
 800449a:	1076      	asrs	r6, r6, #1
 800449c:	3708      	adds	r7, #8
 800449e:	e772      	b.n	8004386 <_dtoa_r+0x396>
 80044a0:	2502      	movs	r5, #2
 80044a2:	e774      	b.n	800438e <_dtoa_r+0x39e>
 80044a4:	f8cd a020 	str.w	sl, [sp, #32]
 80044a8:	464f      	mov	r7, r9
 80044aa:	e791      	b.n	80043d0 <_dtoa_r+0x3e0>
 80044ac:	4b4d      	ldr	r3, [pc, #308]	; (80045e4 <_dtoa_r+0x5f4>)
 80044ae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80044b2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80044b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d047      	beq.n	800454c <_dtoa_r+0x55c>
 80044bc:	4602      	mov	r2, r0
 80044be:	460b      	mov	r3, r1
 80044c0:	2000      	movs	r0, #0
 80044c2:	494e      	ldr	r1, [pc, #312]	; (80045fc <_dtoa_r+0x60c>)
 80044c4:	f7fc f96e 	bl	80007a4 <__aeabi_ddiv>
 80044c8:	462a      	mov	r2, r5
 80044ca:	4633      	mov	r3, r6
 80044cc:	f7fb fe88 	bl	80001e0 <__aeabi_dsub>
 80044d0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80044d4:	465d      	mov	r5, fp
 80044d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80044da:	f7fc fae9 	bl	8000ab0 <__aeabi_d2iz>
 80044de:	4606      	mov	r6, r0
 80044e0:	f7fb ffcc 	bl	800047c <__aeabi_i2d>
 80044e4:	4602      	mov	r2, r0
 80044e6:	460b      	mov	r3, r1
 80044e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80044ec:	f7fb fe78 	bl	80001e0 <__aeabi_dsub>
 80044f0:	3630      	adds	r6, #48	; 0x30
 80044f2:	f805 6b01 	strb.w	r6, [r5], #1
 80044f6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80044fa:	e9cd 0100 	strd	r0, r1, [sp]
 80044fe:	f7fc fa99 	bl	8000a34 <__aeabi_dcmplt>
 8004502:	2800      	cmp	r0, #0
 8004504:	d163      	bne.n	80045ce <_dtoa_r+0x5de>
 8004506:	e9dd 2300 	ldrd	r2, r3, [sp]
 800450a:	2000      	movs	r0, #0
 800450c:	4937      	ldr	r1, [pc, #220]	; (80045ec <_dtoa_r+0x5fc>)
 800450e:	f7fb fe67 	bl	80001e0 <__aeabi_dsub>
 8004512:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004516:	f7fc fa8d 	bl	8000a34 <__aeabi_dcmplt>
 800451a:	2800      	cmp	r0, #0
 800451c:	f040 80b7 	bne.w	800468e <_dtoa_r+0x69e>
 8004520:	eba5 030b 	sub.w	r3, r5, fp
 8004524:	429f      	cmp	r7, r3
 8004526:	f77f af7c 	ble.w	8004422 <_dtoa_r+0x432>
 800452a:	2200      	movs	r2, #0
 800452c:	4b30      	ldr	r3, [pc, #192]	; (80045f0 <_dtoa_r+0x600>)
 800452e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004532:	f7fc f80d 	bl	8000550 <__aeabi_dmul>
 8004536:	2200      	movs	r2, #0
 8004538:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800453c:	4b2c      	ldr	r3, [pc, #176]	; (80045f0 <_dtoa_r+0x600>)
 800453e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004542:	f7fc f805 	bl	8000550 <__aeabi_dmul>
 8004546:	e9cd 0100 	strd	r0, r1, [sp]
 800454a:	e7c4      	b.n	80044d6 <_dtoa_r+0x4e6>
 800454c:	462a      	mov	r2, r5
 800454e:	4633      	mov	r3, r6
 8004550:	f7fb fffe 	bl	8000550 <__aeabi_dmul>
 8004554:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004558:	eb0b 0507 	add.w	r5, fp, r7
 800455c:	465e      	mov	r6, fp
 800455e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004562:	f7fc faa5 	bl	8000ab0 <__aeabi_d2iz>
 8004566:	4607      	mov	r7, r0
 8004568:	f7fb ff88 	bl	800047c <__aeabi_i2d>
 800456c:	3730      	adds	r7, #48	; 0x30
 800456e:	4602      	mov	r2, r0
 8004570:	460b      	mov	r3, r1
 8004572:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004576:	f7fb fe33 	bl	80001e0 <__aeabi_dsub>
 800457a:	f806 7b01 	strb.w	r7, [r6], #1
 800457e:	42ae      	cmp	r6, r5
 8004580:	e9cd 0100 	strd	r0, r1, [sp]
 8004584:	f04f 0200 	mov.w	r2, #0
 8004588:	d126      	bne.n	80045d8 <_dtoa_r+0x5e8>
 800458a:	4b1c      	ldr	r3, [pc, #112]	; (80045fc <_dtoa_r+0x60c>)
 800458c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004590:	f7fb fe28 	bl	80001e4 <__adddf3>
 8004594:	4602      	mov	r2, r0
 8004596:	460b      	mov	r3, r1
 8004598:	e9dd 0100 	ldrd	r0, r1, [sp]
 800459c:	f7fc fa68 	bl	8000a70 <__aeabi_dcmpgt>
 80045a0:	2800      	cmp	r0, #0
 80045a2:	d174      	bne.n	800468e <_dtoa_r+0x69e>
 80045a4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80045a8:	2000      	movs	r0, #0
 80045aa:	4914      	ldr	r1, [pc, #80]	; (80045fc <_dtoa_r+0x60c>)
 80045ac:	f7fb fe18 	bl	80001e0 <__aeabi_dsub>
 80045b0:	4602      	mov	r2, r0
 80045b2:	460b      	mov	r3, r1
 80045b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80045b8:	f7fc fa3c 	bl	8000a34 <__aeabi_dcmplt>
 80045bc:	2800      	cmp	r0, #0
 80045be:	f43f af30 	beq.w	8004422 <_dtoa_r+0x432>
 80045c2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80045c6:	2b30      	cmp	r3, #48	; 0x30
 80045c8:	f105 32ff 	add.w	r2, r5, #4294967295
 80045cc:	d002      	beq.n	80045d4 <_dtoa_r+0x5e4>
 80045ce:	f8dd a020 	ldr.w	sl, [sp, #32]
 80045d2:	e04a      	b.n	800466a <_dtoa_r+0x67a>
 80045d4:	4615      	mov	r5, r2
 80045d6:	e7f4      	b.n	80045c2 <_dtoa_r+0x5d2>
 80045d8:	4b05      	ldr	r3, [pc, #20]	; (80045f0 <_dtoa_r+0x600>)
 80045da:	f7fb ffb9 	bl	8000550 <__aeabi_dmul>
 80045de:	e9cd 0100 	strd	r0, r1, [sp]
 80045e2:	e7bc      	b.n	800455e <_dtoa_r+0x56e>
 80045e4:	08005338 	.word	0x08005338
 80045e8:	08005310 	.word	0x08005310
 80045ec:	3ff00000 	.word	0x3ff00000
 80045f0:	40240000 	.word	0x40240000
 80045f4:	401c0000 	.word	0x401c0000
 80045f8:	40140000 	.word	0x40140000
 80045fc:	3fe00000 	.word	0x3fe00000
 8004600:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004604:	465d      	mov	r5, fp
 8004606:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800460a:	4630      	mov	r0, r6
 800460c:	4639      	mov	r1, r7
 800460e:	f7fc f8c9 	bl	80007a4 <__aeabi_ddiv>
 8004612:	f7fc fa4d 	bl	8000ab0 <__aeabi_d2iz>
 8004616:	4680      	mov	r8, r0
 8004618:	f7fb ff30 	bl	800047c <__aeabi_i2d>
 800461c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004620:	f7fb ff96 	bl	8000550 <__aeabi_dmul>
 8004624:	4602      	mov	r2, r0
 8004626:	460b      	mov	r3, r1
 8004628:	4630      	mov	r0, r6
 800462a:	4639      	mov	r1, r7
 800462c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8004630:	f7fb fdd6 	bl	80001e0 <__aeabi_dsub>
 8004634:	f805 6b01 	strb.w	r6, [r5], #1
 8004638:	eba5 060b 	sub.w	r6, r5, fp
 800463c:	45b1      	cmp	r9, r6
 800463e:	4602      	mov	r2, r0
 8004640:	460b      	mov	r3, r1
 8004642:	d139      	bne.n	80046b8 <_dtoa_r+0x6c8>
 8004644:	f7fb fdce 	bl	80001e4 <__adddf3>
 8004648:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800464c:	4606      	mov	r6, r0
 800464e:	460f      	mov	r7, r1
 8004650:	f7fc fa0e 	bl	8000a70 <__aeabi_dcmpgt>
 8004654:	b9c8      	cbnz	r0, 800468a <_dtoa_r+0x69a>
 8004656:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800465a:	4630      	mov	r0, r6
 800465c:	4639      	mov	r1, r7
 800465e:	f7fc f9df 	bl	8000a20 <__aeabi_dcmpeq>
 8004662:	b110      	cbz	r0, 800466a <_dtoa_r+0x67a>
 8004664:	f018 0f01 	tst.w	r8, #1
 8004668:	d10f      	bne.n	800468a <_dtoa_r+0x69a>
 800466a:	9904      	ldr	r1, [sp, #16]
 800466c:	4620      	mov	r0, r4
 800466e:	f000 facc 	bl	8004c0a <_Bfree>
 8004672:	2300      	movs	r3, #0
 8004674:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004676:	702b      	strb	r3, [r5, #0]
 8004678:	f10a 0301 	add.w	r3, sl, #1
 800467c:	6013      	str	r3, [r2, #0]
 800467e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004680:	2b00      	cmp	r3, #0
 8004682:	f000 8241 	beq.w	8004b08 <_dtoa_r+0xb18>
 8004686:	601d      	str	r5, [r3, #0]
 8004688:	e23e      	b.n	8004b08 <_dtoa_r+0xb18>
 800468a:	f8cd a020 	str.w	sl, [sp, #32]
 800468e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004692:	2a39      	cmp	r2, #57	; 0x39
 8004694:	f105 33ff 	add.w	r3, r5, #4294967295
 8004698:	d108      	bne.n	80046ac <_dtoa_r+0x6bc>
 800469a:	459b      	cmp	fp, r3
 800469c:	d10a      	bne.n	80046b4 <_dtoa_r+0x6c4>
 800469e:	9b08      	ldr	r3, [sp, #32]
 80046a0:	3301      	adds	r3, #1
 80046a2:	9308      	str	r3, [sp, #32]
 80046a4:	2330      	movs	r3, #48	; 0x30
 80046a6:	f88b 3000 	strb.w	r3, [fp]
 80046aa:	465b      	mov	r3, fp
 80046ac:	781a      	ldrb	r2, [r3, #0]
 80046ae:	3201      	adds	r2, #1
 80046b0:	701a      	strb	r2, [r3, #0]
 80046b2:	e78c      	b.n	80045ce <_dtoa_r+0x5de>
 80046b4:	461d      	mov	r5, r3
 80046b6:	e7ea      	b.n	800468e <_dtoa_r+0x69e>
 80046b8:	2200      	movs	r2, #0
 80046ba:	4b9b      	ldr	r3, [pc, #620]	; (8004928 <_dtoa_r+0x938>)
 80046bc:	f7fb ff48 	bl	8000550 <__aeabi_dmul>
 80046c0:	2200      	movs	r2, #0
 80046c2:	2300      	movs	r3, #0
 80046c4:	4606      	mov	r6, r0
 80046c6:	460f      	mov	r7, r1
 80046c8:	f7fc f9aa 	bl	8000a20 <__aeabi_dcmpeq>
 80046cc:	2800      	cmp	r0, #0
 80046ce:	d09a      	beq.n	8004606 <_dtoa_r+0x616>
 80046d0:	e7cb      	b.n	800466a <_dtoa_r+0x67a>
 80046d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80046d4:	2a00      	cmp	r2, #0
 80046d6:	f000 808b 	beq.w	80047f0 <_dtoa_r+0x800>
 80046da:	9a06      	ldr	r2, [sp, #24]
 80046dc:	2a01      	cmp	r2, #1
 80046de:	dc6e      	bgt.n	80047be <_dtoa_r+0x7ce>
 80046e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80046e2:	2a00      	cmp	r2, #0
 80046e4:	d067      	beq.n	80047b6 <_dtoa_r+0x7c6>
 80046e6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80046ea:	9f07      	ldr	r7, [sp, #28]
 80046ec:	9d05      	ldr	r5, [sp, #20]
 80046ee:	9a05      	ldr	r2, [sp, #20]
 80046f0:	2101      	movs	r1, #1
 80046f2:	441a      	add	r2, r3
 80046f4:	4620      	mov	r0, r4
 80046f6:	9205      	str	r2, [sp, #20]
 80046f8:	4498      	add	r8, r3
 80046fa:	f000 fb26 	bl	8004d4a <__i2b>
 80046fe:	4606      	mov	r6, r0
 8004700:	2d00      	cmp	r5, #0
 8004702:	dd0c      	ble.n	800471e <_dtoa_r+0x72e>
 8004704:	f1b8 0f00 	cmp.w	r8, #0
 8004708:	dd09      	ble.n	800471e <_dtoa_r+0x72e>
 800470a:	4545      	cmp	r5, r8
 800470c:	9a05      	ldr	r2, [sp, #20]
 800470e:	462b      	mov	r3, r5
 8004710:	bfa8      	it	ge
 8004712:	4643      	movge	r3, r8
 8004714:	1ad2      	subs	r2, r2, r3
 8004716:	9205      	str	r2, [sp, #20]
 8004718:	1aed      	subs	r5, r5, r3
 800471a:	eba8 0803 	sub.w	r8, r8, r3
 800471e:	9b07      	ldr	r3, [sp, #28]
 8004720:	b1eb      	cbz	r3, 800475e <_dtoa_r+0x76e>
 8004722:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004724:	2b00      	cmp	r3, #0
 8004726:	d067      	beq.n	80047f8 <_dtoa_r+0x808>
 8004728:	b18f      	cbz	r7, 800474e <_dtoa_r+0x75e>
 800472a:	4631      	mov	r1, r6
 800472c:	463a      	mov	r2, r7
 800472e:	4620      	mov	r0, r4
 8004730:	f000 fbaa 	bl	8004e88 <__pow5mult>
 8004734:	9a04      	ldr	r2, [sp, #16]
 8004736:	4601      	mov	r1, r0
 8004738:	4606      	mov	r6, r0
 800473a:	4620      	mov	r0, r4
 800473c:	f000 fb0e 	bl	8004d5c <__multiply>
 8004740:	9904      	ldr	r1, [sp, #16]
 8004742:	9008      	str	r0, [sp, #32]
 8004744:	4620      	mov	r0, r4
 8004746:	f000 fa60 	bl	8004c0a <_Bfree>
 800474a:	9b08      	ldr	r3, [sp, #32]
 800474c:	9304      	str	r3, [sp, #16]
 800474e:	9b07      	ldr	r3, [sp, #28]
 8004750:	1bda      	subs	r2, r3, r7
 8004752:	d004      	beq.n	800475e <_dtoa_r+0x76e>
 8004754:	9904      	ldr	r1, [sp, #16]
 8004756:	4620      	mov	r0, r4
 8004758:	f000 fb96 	bl	8004e88 <__pow5mult>
 800475c:	9004      	str	r0, [sp, #16]
 800475e:	2101      	movs	r1, #1
 8004760:	4620      	mov	r0, r4
 8004762:	f000 faf2 	bl	8004d4a <__i2b>
 8004766:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004768:	4607      	mov	r7, r0
 800476a:	2b00      	cmp	r3, #0
 800476c:	f000 81d0 	beq.w	8004b10 <_dtoa_r+0xb20>
 8004770:	461a      	mov	r2, r3
 8004772:	4601      	mov	r1, r0
 8004774:	4620      	mov	r0, r4
 8004776:	f000 fb87 	bl	8004e88 <__pow5mult>
 800477a:	9b06      	ldr	r3, [sp, #24]
 800477c:	2b01      	cmp	r3, #1
 800477e:	4607      	mov	r7, r0
 8004780:	dc40      	bgt.n	8004804 <_dtoa_r+0x814>
 8004782:	9b00      	ldr	r3, [sp, #0]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d139      	bne.n	80047fc <_dtoa_r+0x80c>
 8004788:	9b01      	ldr	r3, [sp, #4]
 800478a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800478e:	2b00      	cmp	r3, #0
 8004790:	d136      	bne.n	8004800 <_dtoa_r+0x810>
 8004792:	9b01      	ldr	r3, [sp, #4]
 8004794:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004798:	0d1b      	lsrs	r3, r3, #20
 800479a:	051b      	lsls	r3, r3, #20
 800479c:	b12b      	cbz	r3, 80047aa <_dtoa_r+0x7ba>
 800479e:	9b05      	ldr	r3, [sp, #20]
 80047a0:	3301      	adds	r3, #1
 80047a2:	9305      	str	r3, [sp, #20]
 80047a4:	f108 0801 	add.w	r8, r8, #1
 80047a8:	2301      	movs	r3, #1
 80047aa:	9307      	str	r3, [sp, #28]
 80047ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d12a      	bne.n	8004808 <_dtoa_r+0x818>
 80047b2:	2001      	movs	r0, #1
 80047b4:	e030      	b.n	8004818 <_dtoa_r+0x828>
 80047b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80047b8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80047bc:	e795      	b.n	80046ea <_dtoa_r+0x6fa>
 80047be:	9b07      	ldr	r3, [sp, #28]
 80047c0:	f109 37ff 	add.w	r7, r9, #4294967295
 80047c4:	42bb      	cmp	r3, r7
 80047c6:	bfbf      	itttt	lt
 80047c8:	9b07      	ldrlt	r3, [sp, #28]
 80047ca:	9707      	strlt	r7, [sp, #28]
 80047cc:	1afa      	sublt	r2, r7, r3
 80047ce:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80047d0:	bfbb      	ittet	lt
 80047d2:	189b      	addlt	r3, r3, r2
 80047d4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80047d6:	1bdf      	subge	r7, r3, r7
 80047d8:	2700      	movlt	r7, #0
 80047da:	f1b9 0f00 	cmp.w	r9, #0
 80047de:	bfb5      	itete	lt
 80047e0:	9b05      	ldrlt	r3, [sp, #20]
 80047e2:	9d05      	ldrge	r5, [sp, #20]
 80047e4:	eba3 0509 	sublt.w	r5, r3, r9
 80047e8:	464b      	movge	r3, r9
 80047ea:	bfb8      	it	lt
 80047ec:	2300      	movlt	r3, #0
 80047ee:	e77e      	b.n	80046ee <_dtoa_r+0x6fe>
 80047f0:	9f07      	ldr	r7, [sp, #28]
 80047f2:	9d05      	ldr	r5, [sp, #20]
 80047f4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80047f6:	e783      	b.n	8004700 <_dtoa_r+0x710>
 80047f8:	9a07      	ldr	r2, [sp, #28]
 80047fa:	e7ab      	b.n	8004754 <_dtoa_r+0x764>
 80047fc:	2300      	movs	r3, #0
 80047fe:	e7d4      	b.n	80047aa <_dtoa_r+0x7ba>
 8004800:	9b00      	ldr	r3, [sp, #0]
 8004802:	e7d2      	b.n	80047aa <_dtoa_r+0x7ba>
 8004804:	2300      	movs	r3, #0
 8004806:	9307      	str	r3, [sp, #28]
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800480e:	6918      	ldr	r0, [r3, #16]
 8004810:	f000 fa4d 	bl	8004cae <__hi0bits>
 8004814:	f1c0 0020 	rsb	r0, r0, #32
 8004818:	4440      	add	r0, r8
 800481a:	f010 001f 	ands.w	r0, r0, #31
 800481e:	d047      	beq.n	80048b0 <_dtoa_r+0x8c0>
 8004820:	f1c0 0320 	rsb	r3, r0, #32
 8004824:	2b04      	cmp	r3, #4
 8004826:	dd3b      	ble.n	80048a0 <_dtoa_r+0x8b0>
 8004828:	9b05      	ldr	r3, [sp, #20]
 800482a:	f1c0 001c 	rsb	r0, r0, #28
 800482e:	4403      	add	r3, r0
 8004830:	9305      	str	r3, [sp, #20]
 8004832:	4405      	add	r5, r0
 8004834:	4480      	add	r8, r0
 8004836:	9b05      	ldr	r3, [sp, #20]
 8004838:	2b00      	cmp	r3, #0
 800483a:	dd05      	ble.n	8004848 <_dtoa_r+0x858>
 800483c:	461a      	mov	r2, r3
 800483e:	9904      	ldr	r1, [sp, #16]
 8004840:	4620      	mov	r0, r4
 8004842:	f000 fb6f 	bl	8004f24 <__lshift>
 8004846:	9004      	str	r0, [sp, #16]
 8004848:	f1b8 0f00 	cmp.w	r8, #0
 800484c:	dd05      	ble.n	800485a <_dtoa_r+0x86a>
 800484e:	4639      	mov	r1, r7
 8004850:	4642      	mov	r2, r8
 8004852:	4620      	mov	r0, r4
 8004854:	f000 fb66 	bl	8004f24 <__lshift>
 8004858:	4607      	mov	r7, r0
 800485a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800485c:	b353      	cbz	r3, 80048b4 <_dtoa_r+0x8c4>
 800485e:	4639      	mov	r1, r7
 8004860:	9804      	ldr	r0, [sp, #16]
 8004862:	f000 fbb3 	bl	8004fcc <__mcmp>
 8004866:	2800      	cmp	r0, #0
 8004868:	da24      	bge.n	80048b4 <_dtoa_r+0x8c4>
 800486a:	2300      	movs	r3, #0
 800486c:	220a      	movs	r2, #10
 800486e:	9904      	ldr	r1, [sp, #16]
 8004870:	4620      	mov	r0, r4
 8004872:	f000 f9e1 	bl	8004c38 <__multadd>
 8004876:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004878:	9004      	str	r0, [sp, #16]
 800487a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800487e:	2b00      	cmp	r3, #0
 8004880:	f000 814d 	beq.w	8004b1e <_dtoa_r+0xb2e>
 8004884:	2300      	movs	r3, #0
 8004886:	4631      	mov	r1, r6
 8004888:	220a      	movs	r2, #10
 800488a:	4620      	mov	r0, r4
 800488c:	f000 f9d4 	bl	8004c38 <__multadd>
 8004890:	9b02      	ldr	r3, [sp, #8]
 8004892:	2b00      	cmp	r3, #0
 8004894:	4606      	mov	r6, r0
 8004896:	dc4f      	bgt.n	8004938 <_dtoa_r+0x948>
 8004898:	9b06      	ldr	r3, [sp, #24]
 800489a:	2b02      	cmp	r3, #2
 800489c:	dd4c      	ble.n	8004938 <_dtoa_r+0x948>
 800489e:	e011      	b.n	80048c4 <_dtoa_r+0x8d4>
 80048a0:	d0c9      	beq.n	8004836 <_dtoa_r+0x846>
 80048a2:	9a05      	ldr	r2, [sp, #20]
 80048a4:	331c      	adds	r3, #28
 80048a6:	441a      	add	r2, r3
 80048a8:	9205      	str	r2, [sp, #20]
 80048aa:	441d      	add	r5, r3
 80048ac:	4498      	add	r8, r3
 80048ae:	e7c2      	b.n	8004836 <_dtoa_r+0x846>
 80048b0:	4603      	mov	r3, r0
 80048b2:	e7f6      	b.n	80048a2 <_dtoa_r+0x8b2>
 80048b4:	f1b9 0f00 	cmp.w	r9, #0
 80048b8:	dc38      	bgt.n	800492c <_dtoa_r+0x93c>
 80048ba:	9b06      	ldr	r3, [sp, #24]
 80048bc:	2b02      	cmp	r3, #2
 80048be:	dd35      	ble.n	800492c <_dtoa_r+0x93c>
 80048c0:	f8cd 9008 	str.w	r9, [sp, #8]
 80048c4:	9b02      	ldr	r3, [sp, #8]
 80048c6:	b963      	cbnz	r3, 80048e2 <_dtoa_r+0x8f2>
 80048c8:	4639      	mov	r1, r7
 80048ca:	2205      	movs	r2, #5
 80048cc:	4620      	mov	r0, r4
 80048ce:	f000 f9b3 	bl	8004c38 <__multadd>
 80048d2:	4601      	mov	r1, r0
 80048d4:	4607      	mov	r7, r0
 80048d6:	9804      	ldr	r0, [sp, #16]
 80048d8:	f000 fb78 	bl	8004fcc <__mcmp>
 80048dc:	2800      	cmp	r0, #0
 80048de:	f73f adcc 	bgt.w	800447a <_dtoa_r+0x48a>
 80048e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80048e4:	465d      	mov	r5, fp
 80048e6:	ea6f 0a03 	mvn.w	sl, r3
 80048ea:	f04f 0900 	mov.w	r9, #0
 80048ee:	4639      	mov	r1, r7
 80048f0:	4620      	mov	r0, r4
 80048f2:	f000 f98a 	bl	8004c0a <_Bfree>
 80048f6:	2e00      	cmp	r6, #0
 80048f8:	f43f aeb7 	beq.w	800466a <_dtoa_r+0x67a>
 80048fc:	f1b9 0f00 	cmp.w	r9, #0
 8004900:	d005      	beq.n	800490e <_dtoa_r+0x91e>
 8004902:	45b1      	cmp	r9, r6
 8004904:	d003      	beq.n	800490e <_dtoa_r+0x91e>
 8004906:	4649      	mov	r1, r9
 8004908:	4620      	mov	r0, r4
 800490a:	f000 f97e 	bl	8004c0a <_Bfree>
 800490e:	4631      	mov	r1, r6
 8004910:	4620      	mov	r0, r4
 8004912:	f000 f97a 	bl	8004c0a <_Bfree>
 8004916:	e6a8      	b.n	800466a <_dtoa_r+0x67a>
 8004918:	2700      	movs	r7, #0
 800491a:	463e      	mov	r6, r7
 800491c:	e7e1      	b.n	80048e2 <_dtoa_r+0x8f2>
 800491e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8004922:	463e      	mov	r6, r7
 8004924:	e5a9      	b.n	800447a <_dtoa_r+0x48a>
 8004926:	bf00      	nop
 8004928:	40240000 	.word	0x40240000
 800492c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800492e:	f8cd 9008 	str.w	r9, [sp, #8]
 8004932:	2b00      	cmp	r3, #0
 8004934:	f000 80fa 	beq.w	8004b2c <_dtoa_r+0xb3c>
 8004938:	2d00      	cmp	r5, #0
 800493a:	dd05      	ble.n	8004948 <_dtoa_r+0x958>
 800493c:	4631      	mov	r1, r6
 800493e:	462a      	mov	r2, r5
 8004940:	4620      	mov	r0, r4
 8004942:	f000 faef 	bl	8004f24 <__lshift>
 8004946:	4606      	mov	r6, r0
 8004948:	9b07      	ldr	r3, [sp, #28]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d04c      	beq.n	80049e8 <_dtoa_r+0x9f8>
 800494e:	6871      	ldr	r1, [r6, #4]
 8004950:	4620      	mov	r0, r4
 8004952:	f000 f926 	bl	8004ba2 <_Balloc>
 8004956:	6932      	ldr	r2, [r6, #16]
 8004958:	3202      	adds	r2, #2
 800495a:	4605      	mov	r5, r0
 800495c:	0092      	lsls	r2, r2, #2
 800495e:	f106 010c 	add.w	r1, r6, #12
 8004962:	300c      	adds	r0, #12
 8004964:	f000 f912 	bl	8004b8c <memcpy>
 8004968:	2201      	movs	r2, #1
 800496a:	4629      	mov	r1, r5
 800496c:	4620      	mov	r0, r4
 800496e:	f000 fad9 	bl	8004f24 <__lshift>
 8004972:	9b00      	ldr	r3, [sp, #0]
 8004974:	f8cd b014 	str.w	fp, [sp, #20]
 8004978:	f003 0301 	and.w	r3, r3, #1
 800497c:	46b1      	mov	r9, r6
 800497e:	9307      	str	r3, [sp, #28]
 8004980:	4606      	mov	r6, r0
 8004982:	4639      	mov	r1, r7
 8004984:	9804      	ldr	r0, [sp, #16]
 8004986:	f7ff faa4 	bl	8003ed2 <quorem>
 800498a:	4649      	mov	r1, r9
 800498c:	4605      	mov	r5, r0
 800498e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8004992:	9804      	ldr	r0, [sp, #16]
 8004994:	f000 fb1a 	bl	8004fcc <__mcmp>
 8004998:	4632      	mov	r2, r6
 800499a:	9000      	str	r0, [sp, #0]
 800499c:	4639      	mov	r1, r7
 800499e:	4620      	mov	r0, r4
 80049a0:	f000 fb2e 	bl	8005000 <__mdiff>
 80049a4:	68c3      	ldr	r3, [r0, #12]
 80049a6:	4602      	mov	r2, r0
 80049a8:	bb03      	cbnz	r3, 80049ec <_dtoa_r+0x9fc>
 80049aa:	4601      	mov	r1, r0
 80049ac:	9008      	str	r0, [sp, #32]
 80049ae:	9804      	ldr	r0, [sp, #16]
 80049b0:	f000 fb0c 	bl	8004fcc <__mcmp>
 80049b4:	9a08      	ldr	r2, [sp, #32]
 80049b6:	4603      	mov	r3, r0
 80049b8:	4611      	mov	r1, r2
 80049ba:	4620      	mov	r0, r4
 80049bc:	9308      	str	r3, [sp, #32]
 80049be:	f000 f924 	bl	8004c0a <_Bfree>
 80049c2:	9b08      	ldr	r3, [sp, #32]
 80049c4:	b9a3      	cbnz	r3, 80049f0 <_dtoa_r+0xa00>
 80049c6:	9a06      	ldr	r2, [sp, #24]
 80049c8:	b992      	cbnz	r2, 80049f0 <_dtoa_r+0xa00>
 80049ca:	9a07      	ldr	r2, [sp, #28]
 80049cc:	b982      	cbnz	r2, 80049f0 <_dtoa_r+0xa00>
 80049ce:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80049d2:	d029      	beq.n	8004a28 <_dtoa_r+0xa38>
 80049d4:	9b00      	ldr	r3, [sp, #0]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	dd01      	ble.n	80049de <_dtoa_r+0x9ee>
 80049da:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80049de:	9b05      	ldr	r3, [sp, #20]
 80049e0:	1c5d      	adds	r5, r3, #1
 80049e2:	f883 8000 	strb.w	r8, [r3]
 80049e6:	e782      	b.n	80048ee <_dtoa_r+0x8fe>
 80049e8:	4630      	mov	r0, r6
 80049ea:	e7c2      	b.n	8004972 <_dtoa_r+0x982>
 80049ec:	2301      	movs	r3, #1
 80049ee:	e7e3      	b.n	80049b8 <_dtoa_r+0x9c8>
 80049f0:	9a00      	ldr	r2, [sp, #0]
 80049f2:	2a00      	cmp	r2, #0
 80049f4:	db04      	blt.n	8004a00 <_dtoa_r+0xa10>
 80049f6:	d125      	bne.n	8004a44 <_dtoa_r+0xa54>
 80049f8:	9a06      	ldr	r2, [sp, #24]
 80049fa:	bb1a      	cbnz	r2, 8004a44 <_dtoa_r+0xa54>
 80049fc:	9a07      	ldr	r2, [sp, #28]
 80049fe:	bb0a      	cbnz	r2, 8004a44 <_dtoa_r+0xa54>
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	ddec      	ble.n	80049de <_dtoa_r+0x9ee>
 8004a04:	2201      	movs	r2, #1
 8004a06:	9904      	ldr	r1, [sp, #16]
 8004a08:	4620      	mov	r0, r4
 8004a0a:	f000 fa8b 	bl	8004f24 <__lshift>
 8004a0e:	4639      	mov	r1, r7
 8004a10:	9004      	str	r0, [sp, #16]
 8004a12:	f000 fadb 	bl	8004fcc <__mcmp>
 8004a16:	2800      	cmp	r0, #0
 8004a18:	dc03      	bgt.n	8004a22 <_dtoa_r+0xa32>
 8004a1a:	d1e0      	bne.n	80049de <_dtoa_r+0x9ee>
 8004a1c:	f018 0f01 	tst.w	r8, #1
 8004a20:	d0dd      	beq.n	80049de <_dtoa_r+0x9ee>
 8004a22:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004a26:	d1d8      	bne.n	80049da <_dtoa_r+0x9ea>
 8004a28:	9b05      	ldr	r3, [sp, #20]
 8004a2a:	9a05      	ldr	r2, [sp, #20]
 8004a2c:	1c5d      	adds	r5, r3, #1
 8004a2e:	2339      	movs	r3, #57	; 0x39
 8004a30:	7013      	strb	r3, [r2, #0]
 8004a32:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004a36:	2b39      	cmp	r3, #57	; 0x39
 8004a38:	f105 32ff 	add.w	r2, r5, #4294967295
 8004a3c:	d04f      	beq.n	8004ade <_dtoa_r+0xaee>
 8004a3e:	3301      	adds	r3, #1
 8004a40:	7013      	strb	r3, [r2, #0]
 8004a42:	e754      	b.n	80048ee <_dtoa_r+0x8fe>
 8004a44:	9a05      	ldr	r2, [sp, #20]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	f102 0501 	add.w	r5, r2, #1
 8004a4c:	dd06      	ble.n	8004a5c <_dtoa_r+0xa6c>
 8004a4e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004a52:	d0e9      	beq.n	8004a28 <_dtoa_r+0xa38>
 8004a54:	f108 0801 	add.w	r8, r8, #1
 8004a58:	9b05      	ldr	r3, [sp, #20]
 8004a5a:	e7c2      	b.n	80049e2 <_dtoa_r+0x9f2>
 8004a5c:	9a02      	ldr	r2, [sp, #8]
 8004a5e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8004a62:	eba5 030b 	sub.w	r3, r5, fp
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d021      	beq.n	8004aae <_dtoa_r+0xabe>
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	220a      	movs	r2, #10
 8004a6e:	9904      	ldr	r1, [sp, #16]
 8004a70:	4620      	mov	r0, r4
 8004a72:	f000 f8e1 	bl	8004c38 <__multadd>
 8004a76:	45b1      	cmp	r9, r6
 8004a78:	9004      	str	r0, [sp, #16]
 8004a7a:	f04f 0300 	mov.w	r3, #0
 8004a7e:	f04f 020a 	mov.w	r2, #10
 8004a82:	4649      	mov	r1, r9
 8004a84:	4620      	mov	r0, r4
 8004a86:	d105      	bne.n	8004a94 <_dtoa_r+0xaa4>
 8004a88:	f000 f8d6 	bl	8004c38 <__multadd>
 8004a8c:	4681      	mov	r9, r0
 8004a8e:	4606      	mov	r6, r0
 8004a90:	9505      	str	r5, [sp, #20]
 8004a92:	e776      	b.n	8004982 <_dtoa_r+0x992>
 8004a94:	f000 f8d0 	bl	8004c38 <__multadd>
 8004a98:	4631      	mov	r1, r6
 8004a9a:	4681      	mov	r9, r0
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	220a      	movs	r2, #10
 8004aa0:	4620      	mov	r0, r4
 8004aa2:	f000 f8c9 	bl	8004c38 <__multadd>
 8004aa6:	4606      	mov	r6, r0
 8004aa8:	e7f2      	b.n	8004a90 <_dtoa_r+0xaa0>
 8004aaa:	f04f 0900 	mov.w	r9, #0
 8004aae:	2201      	movs	r2, #1
 8004ab0:	9904      	ldr	r1, [sp, #16]
 8004ab2:	4620      	mov	r0, r4
 8004ab4:	f000 fa36 	bl	8004f24 <__lshift>
 8004ab8:	4639      	mov	r1, r7
 8004aba:	9004      	str	r0, [sp, #16]
 8004abc:	f000 fa86 	bl	8004fcc <__mcmp>
 8004ac0:	2800      	cmp	r0, #0
 8004ac2:	dcb6      	bgt.n	8004a32 <_dtoa_r+0xa42>
 8004ac4:	d102      	bne.n	8004acc <_dtoa_r+0xadc>
 8004ac6:	f018 0f01 	tst.w	r8, #1
 8004aca:	d1b2      	bne.n	8004a32 <_dtoa_r+0xa42>
 8004acc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004ad0:	2b30      	cmp	r3, #48	; 0x30
 8004ad2:	f105 32ff 	add.w	r2, r5, #4294967295
 8004ad6:	f47f af0a 	bne.w	80048ee <_dtoa_r+0x8fe>
 8004ada:	4615      	mov	r5, r2
 8004adc:	e7f6      	b.n	8004acc <_dtoa_r+0xadc>
 8004ade:	4593      	cmp	fp, r2
 8004ae0:	d105      	bne.n	8004aee <_dtoa_r+0xafe>
 8004ae2:	2331      	movs	r3, #49	; 0x31
 8004ae4:	f10a 0a01 	add.w	sl, sl, #1
 8004ae8:	f88b 3000 	strb.w	r3, [fp]
 8004aec:	e6ff      	b.n	80048ee <_dtoa_r+0x8fe>
 8004aee:	4615      	mov	r5, r2
 8004af0:	e79f      	b.n	8004a32 <_dtoa_r+0xa42>
 8004af2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8004b58 <_dtoa_r+0xb68>
 8004af6:	e007      	b.n	8004b08 <_dtoa_r+0xb18>
 8004af8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004afa:	f8df b060 	ldr.w	fp, [pc, #96]	; 8004b5c <_dtoa_r+0xb6c>
 8004afe:	b11b      	cbz	r3, 8004b08 <_dtoa_r+0xb18>
 8004b00:	f10b 0308 	add.w	r3, fp, #8
 8004b04:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004b06:	6013      	str	r3, [r2, #0]
 8004b08:	4658      	mov	r0, fp
 8004b0a:	b017      	add	sp, #92	; 0x5c
 8004b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b10:	9b06      	ldr	r3, [sp, #24]
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	f77f ae35 	ble.w	8004782 <_dtoa_r+0x792>
 8004b18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b1a:	9307      	str	r3, [sp, #28]
 8004b1c:	e649      	b.n	80047b2 <_dtoa_r+0x7c2>
 8004b1e:	9b02      	ldr	r3, [sp, #8]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	dc03      	bgt.n	8004b2c <_dtoa_r+0xb3c>
 8004b24:	9b06      	ldr	r3, [sp, #24]
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	f73f aecc 	bgt.w	80048c4 <_dtoa_r+0x8d4>
 8004b2c:	465d      	mov	r5, fp
 8004b2e:	4639      	mov	r1, r7
 8004b30:	9804      	ldr	r0, [sp, #16]
 8004b32:	f7ff f9ce 	bl	8003ed2 <quorem>
 8004b36:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8004b3a:	f805 8b01 	strb.w	r8, [r5], #1
 8004b3e:	9a02      	ldr	r2, [sp, #8]
 8004b40:	eba5 030b 	sub.w	r3, r5, fp
 8004b44:	429a      	cmp	r2, r3
 8004b46:	ddb0      	ble.n	8004aaa <_dtoa_r+0xaba>
 8004b48:	2300      	movs	r3, #0
 8004b4a:	220a      	movs	r2, #10
 8004b4c:	9904      	ldr	r1, [sp, #16]
 8004b4e:	4620      	mov	r0, r4
 8004b50:	f000 f872 	bl	8004c38 <__multadd>
 8004b54:	9004      	str	r0, [sp, #16]
 8004b56:	e7ea      	b.n	8004b2e <_dtoa_r+0xb3e>
 8004b58:	08005300 	.word	0x08005300
 8004b5c:	08005302 	.word	0x08005302

08004b60 <_localeconv_r>:
 8004b60:	4b04      	ldr	r3, [pc, #16]	; (8004b74 <_localeconv_r+0x14>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	6a18      	ldr	r0, [r3, #32]
 8004b66:	4b04      	ldr	r3, [pc, #16]	; (8004b78 <_localeconv_r+0x18>)
 8004b68:	2800      	cmp	r0, #0
 8004b6a:	bf08      	it	eq
 8004b6c:	4618      	moveq	r0, r3
 8004b6e:	30f0      	adds	r0, #240	; 0xf0
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop
 8004b74:	2000000c 	.word	0x2000000c
 8004b78:	20000070 	.word	0x20000070

08004b7c <malloc>:
 8004b7c:	4b02      	ldr	r3, [pc, #8]	; (8004b88 <malloc+0xc>)
 8004b7e:	4601      	mov	r1, r0
 8004b80:	6818      	ldr	r0, [r3, #0]
 8004b82:	f000 baf7 	b.w	8005174 <_malloc_r>
 8004b86:	bf00      	nop
 8004b88:	2000000c 	.word	0x2000000c

08004b8c <memcpy>:
 8004b8c:	b510      	push	{r4, lr}
 8004b8e:	1e43      	subs	r3, r0, #1
 8004b90:	440a      	add	r2, r1
 8004b92:	4291      	cmp	r1, r2
 8004b94:	d100      	bne.n	8004b98 <memcpy+0xc>
 8004b96:	bd10      	pop	{r4, pc}
 8004b98:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ba0:	e7f7      	b.n	8004b92 <memcpy+0x6>

08004ba2 <_Balloc>:
 8004ba2:	b570      	push	{r4, r5, r6, lr}
 8004ba4:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004ba6:	4604      	mov	r4, r0
 8004ba8:	460e      	mov	r6, r1
 8004baa:	b93d      	cbnz	r5, 8004bbc <_Balloc+0x1a>
 8004bac:	2010      	movs	r0, #16
 8004bae:	f7ff ffe5 	bl	8004b7c <malloc>
 8004bb2:	6260      	str	r0, [r4, #36]	; 0x24
 8004bb4:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004bb8:	6005      	str	r5, [r0, #0]
 8004bba:	60c5      	str	r5, [r0, #12]
 8004bbc:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004bbe:	68eb      	ldr	r3, [r5, #12]
 8004bc0:	b183      	cbz	r3, 8004be4 <_Balloc+0x42>
 8004bc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004bca:	b9b8      	cbnz	r0, 8004bfc <_Balloc+0x5a>
 8004bcc:	2101      	movs	r1, #1
 8004bce:	fa01 f506 	lsl.w	r5, r1, r6
 8004bd2:	1d6a      	adds	r2, r5, #5
 8004bd4:	0092      	lsls	r2, r2, #2
 8004bd6:	4620      	mov	r0, r4
 8004bd8:	f000 fabe 	bl	8005158 <_calloc_r>
 8004bdc:	b160      	cbz	r0, 8004bf8 <_Balloc+0x56>
 8004bde:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8004be2:	e00e      	b.n	8004c02 <_Balloc+0x60>
 8004be4:	2221      	movs	r2, #33	; 0x21
 8004be6:	2104      	movs	r1, #4
 8004be8:	4620      	mov	r0, r4
 8004bea:	f000 fab5 	bl	8005158 <_calloc_r>
 8004bee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004bf0:	60e8      	str	r0, [r5, #12]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d1e4      	bne.n	8004bc2 <_Balloc+0x20>
 8004bf8:	2000      	movs	r0, #0
 8004bfa:	bd70      	pop	{r4, r5, r6, pc}
 8004bfc:	6802      	ldr	r2, [r0, #0]
 8004bfe:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8004c02:	2300      	movs	r3, #0
 8004c04:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004c08:	e7f7      	b.n	8004bfa <_Balloc+0x58>

08004c0a <_Bfree>:
 8004c0a:	b570      	push	{r4, r5, r6, lr}
 8004c0c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004c0e:	4606      	mov	r6, r0
 8004c10:	460d      	mov	r5, r1
 8004c12:	b93c      	cbnz	r4, 8004c24 <_Bfree+0x1a>
 8004c14:	2010      	movs	r0, #16
 8004c16:	f7ff ffb1 	bl	8004b7c <malloc>
 8004c1a:	6270      	str	r0, [r6, #36]	; 0x24
 8004c1c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004c20:	6004      	str	r4, [r0, #0]
 8004c22:	60c4      	str	r4, [r0, #12]
 8004c24:	b13d      	cbz	r5, 8004c36 <_Bfree+0x2c>
 8004c26:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004c28:	686a      	ldr	r2, [r5, #4]
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004c30:	6029      	str	r1, [r5, #0]
 8004c32:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8004c36:	bd70      	pop	{r4, r5, r6, pc}

08004c38 <__multadd>:
 8004c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c3c:	690d      	ldr	r5, [r1, #16]
 8004c3e:	461f      	mov	r7, r3
 8004c40:	4606      	mov	r6, r0
 8004c42:	460c      	mov	r4, r1
 8004c44:	f101 0c14 	add.w	ip, r1, #20
 8004c48:	2300      	movs	r3, #0
 8004c4a:	f8dc 0000 	ldr.w	r0, [ip]
 8004c4e:	b281      	uxth	r1, r0
 8004c50:	fb02 7101 	mla	r1, r2, r1, r7
 8004c54:	0c0f      	lsrs	r7, r1, #16
 8004c56:	0c00      	lsrs	r0, r0, #16
 8004c58:	fb02 7000 	mla	r0, r2, r0, r7
 8004c5c:	b289      	uxth	r1, r1
 8004c5e:	3301      	adds	r3, #1
 8004c60:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8004c64:	429d      	cmp	r5, r3
 8004c66:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8004c6a:	f84c 1b04 	str.w	r1, [ip], #4
 8004c6e:	dcec      	bgt.n	8004c4a <__multadd+0x12>
 8004c70:	b1d7      	cbz	r7, 8004ca8 <__multadd+0x70>
 8004c72:	68a3      	ldr	r3, [r4, #8]
 8004c74:	42ab      	cmp	r3, r5
 8004c76:	dc12      	bgt.n	8004c9e <__multadd+0x66>
 8004c78:	6861      	ldr	r1, [r4, #4]
 8004c7a:	4630      	mov	r0, r6
 8004c7c:	3101      	adds	r1, #1
 8004c7e:	f7ff ff90 	bl	8004ba2 <_Balloc>
 8004c82:	6922      	ldr	r2, [r4, #16]
 8004c84:	3202      	adds	r2, #2
 8004c86:	f104 010c 	add.w	r1, r4, #12
 8004c8a:	4680      	mov	r8, r0
 8004c8c:	0092      	lsls	r2, r2, #2
 8004c8e:	300c      	adds	r0, #12
 8004c90:	f7ff ff7c 	bl	8004b8c <memcpy>
 8004c94:	4621      	mov	r1, r4
 8004c96:	4630      	mov	r0, r6
 8004c98:	f7ff ffb7 	bl	8004c0a <_Bfree>
 8004c9c:	4644      	mov	r4, r8
 8004c9e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004ca2:	3501      	adds	r5, #1
 8004ca4:	615f      	str	r7, [r3, #20]
 8004ca6:	6125      	str	r5, [r4, #16]
 8004ca8:	4620      	mov	r0, r4
 8004caa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004cae <__hi0bits>:
 8004cae:	0c02      	lsrs	r2, r0, #16
 8004cb0:	0412      	lsls	r2, r2, #16
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	b9b2      	cbnz	r2, 8004ce4 <__hi0bits+0x36>
 8004cb6:	0403      	lsls	r3, r0, #16
 8004cb8:	2010      	movs	r0, #16
 8004cba:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004cbe:	bf04      	itt	eq
 8004cc0:	021b      	lsleq	r3, r3, #8
 8004cc2:	3008      	addeq	r0, #8
 8004cc4:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004cc8:	bf04      	itt	eq
 8004cca:	011b      	lsleq	r3, r3, #4
 8004ccc:	3004      	addeq	r0, #4
 8004cce:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004cd2:	bf04      	itt	eq
 8004cd4:	009b      	lsleq	r3, r3, #2
 8004cd6:	3002      	addeq	r0, #2
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	db06      	blt.n	8004cea <__hi0bits+0x3c>
 8004cdc:	005b      	lsls	r3, r3, #1
 8004cde:	d503      	bpl.n	8004ce8 <__hi0bits+0x3a>
 8004ce0:	3001      	adds	r0, #1
 8004ce2:	4770      	bx	lr
 8004ce4:	2000      	movs	r0, #0
 8004ce6:	e7e8      	b.n	8004cba <__hi0bits+0xc>
 8004ce8:	2020      	movs	r0, #32
 8004cea:	4770      	bx	lr

08004cec <__lo0bits>:
 8004cec:	6803      	ldr	r3, [r0, #0]
 8004cee:	f013 0207 	ands.w	r2, r3, #7
 8004cf2:	4601      	mov	r1, r0
 8004cf4:	d00b      	beq.n	8004d0e <__lo0bits+0x22>
 8004cf6:	07da      	lsls	r2, r3, #31
 8004cf8:	d423      	bmi.n	8004d42 <__lo0bits+0x56>
 8004cfa:	0798      	lsls	r0, r3, #30
 8004cfc:	bf49      	itett	mi
 8004cfe:	085b      	lsrmi	r3, r3, #1
 8004d00:	089b      	lsrpl	r3, r3, #2
 8004d02:	2001      	movmi	r0, #1
 8004d04:	600b      	strmi	r3, [r1, #0]
 8004d06:	bf5c      	itt	pl
 8004d08:	600b      	strpl	r3, [r1, #0]
 8004d0a:	2002      	movpl	r0, #2
 8004d0c:	4770      	bx	lr
 8004d0e:	b298      	uxth	r0, r3
 8004d10:	b9a8      	cbnz	r0, 8004d3e <__lo0bits+0x52>
 8004d12:	0c1b      	lsrs	r3, r3, #16
 8004d14:	2010      	movs	r0, #16
 8004d16:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004d1a:	bf04      	itt	eq
 8004d1c:	0a1b      	lsreq	r3, r3, #8
 8004d1e:	3008      	addeq	r0, #8
 8004d20:	071a      	lsls	r2, r3, #28
 8004d22:	bf04      	itt	eq
 8004d24:	091b      	lsreq	r3, r3, #4
 8004d26:	3004      	addeq	r0, #4
 8004d28:	079a      	lsls	r2, r3, #30
 8004d2a:	bf04      	itt	eq
 8004d2c:	089b      	lsreq	r3, r3, #2
 8004d2e:	3002      	addeq	r0, #2
 8004d30:	07da      	lsls	r2, r3, #31
 8004d32:	d402      	bmi.n	8004d3a <__lo0bits+0x4e>
 8004d34:	085b      	lsrs	r3, r3, #1
 8004d36:	d006      	beq.n	8004d46 <__lo0bits+0x5a>
 8004d38:	3001      	adds	r0, #1
 8004d3a:	600b      	str	r3, [r1, #0]
 8004d3c:	4770      	bx	lr
 8004d3e:	4610      	mov	r0, r2
 8004d40:	e7e9      	b.n	8004d16 <__lo0bits+0x2a>
 8004d42:	2000      	movs	r0, #0
 8004d44:	4770      	bx	lr
 8004d46:	2020      	movs	r0, #32
 8004d48:	4770      	bx	lr

08004d4a <__i2b>:
 8004d4a:	b510      	push	{r4, lr}
 8004d4c:	460c      	mov	r4, r1
 8004d4e:	2101      	movs	r1, #1
 8004d50:	f7ff ff27 	bl	8004ba2 <_Balloc>
 8004d54:	2201      	movs	r2, #1
 8004d56:	6144      	str	r4, [r0, #20]
 8004d58:	6102      	str	r2, [r0, #16]
 8004d5a:	bd10      	pop	{r4, pc}

08004d5c <__multiply>:
 8004d5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d60:	4614      	mov	r4, r2
 8004d62:	690a      	ldr	r2, [r1, #16]
 8004d64:	6923      	ldr	r3, [r4, #16]
 8004d66:	429a      	cmp	r2, r3
 8004d68:	bfb8      	it	lt
 8004d6a:	460b      	movlt	r3, r1
 8004d6c:	4688      	mov	r8, r1
 8004d6e:	bfbc      	itt	lt
 8004d70:	46a0      	movlt	r8, r4
 8004d72:	461c      	movlt	r4, r3
 8004d74:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8004d78:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8004d7c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8004d80:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8004d84:	eb07 0609 	add.w	r6, r7, r9
 8004d88:	42b3      	cmp	r3, r6
 8004d8a:	bfb8      	it	lt
 8004d8c:	3101      	addlt	r1, #1
 8004d8e:	f7ff ff08 	bl	8004ba2 <_Balloc>
 8004d92:	f100 0514 	add.w	r5, r0, #20
 8004d96:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8004d9a:	462b      	mov	r3, r5
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	4573      	cmp	r3, lr
 8004da0:	d316      	bcc.n	8004dd0 <__multiply+0x74>
 8004da2:	f104 0214 	add.w	r2, r4, #20
 8004da6:	f108 0114 	add.w	r1, r8, #20
 8004daa:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8004dae:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8004db2:	9300      	str	r3, [sp, #0]
 8004db4:	9b00      	ldr	r3, [sp, #0]
 8004db6:	9201      	str	r2, [sp, #4]
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d80c      	bhi.n	8004dd6 <__multiply+0x7a>
 8004dbc:	2e00      	cmp	r6, #0
 8004dbe:	dd03      	ble.n	8004dc8 <__multiply+0x6c>
 8004dc0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d05d      	beq.n	8004e84 <__multiply+0x128>
 8004dc8:	6106      	str	r6, [r0, #16]
 8004dca:	b003      	add	sp, #12
 8004dcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dd0:	f843 2b04 	str.w	r2, [r3], #4
 8004dd4:	e7e3      	b.n	8004d9e <__multiply+0x42>
 8004dd6:	f8b2 b000 	ldrh.w	fp, [r2]
 8004dda:	f1bb 0f00 	cmp.w	fp, #0
 8004dde:	d023      	beq.n	8004e28 <__multiply+0xcc>
 8004de0:	4689      	mov	r9, r1
 8004de2:	46ac      	mov	ip, r5
 8004de4:	f04f 0800 	mov.w	r8, #0
 8004de8:	f859 4b04 	ldr.w	r4, [r9], #4
 8004dec:	f8dc a000 	ldr.w	sl, [ip]
 8004df0:	b2a3      	uxth	r3, r4
 8004df2:	fa1f fa8a 	uxth.w	sl, sl
 8004df6:	fb0b a303 	mla	r3, fp, r3, sl
 8004dfa:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8004dfe:	f8dc 4000 	ldr.w	r4, [ip]
 8004e02:	4443      	add	r3, r8
 8004e04:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8004e08:	fb0b 840a 	mla	r4, fp, sl, r8
 8004e0c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8004e10:	46e2      	mov	sl, ip
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004e18:	454f      	cmp	r7, r9
 8004e1a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8004e1e:	f84a 3b04 	str.w	r3, [sl], #4
 8004e22:	d82b      	bhi.n	8004e7c <__multiply+0x120>
 8004e24:	f8cc 8004 	str.w	r8, [ip, #4]
 8004e28:	9b01      	ldr	r3, [sp, #4]
 8004e2a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8004e2e:	3204      	adds	r2, #4
 8004e30:	f1ba 0f00 	cmp.w	sl, #0
 8004e34:	d020      	beq.n	8004e78 <__multiply+0x11c>
 8004e36:	682b      	ldr	r3, [r5, #0]
 8004e38:	4689      	mov	r9, r1
 8004e3a:	46a8      	mov	r8, r5
 8004e3c:	f04f 0b00 	mov.w	fp, #0
 8004e40:	f8b9 c000 	ldrh.w	ip, [r9]
 8004e44:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8004e48:	fb0a 440c 	mla	r4, sl, ip, r4
 8004e4c:	445c      	add	r4, fp
 8004e4e:	46c4      	mov	ip, r8
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004e56:	f84c 3b04 	str.w	r3, [ip], #4
 8004e5a:	f859 3b04 	ldr.w	r3, [r9], #4
 8004e5e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8004e62:	0c1b      	lsrs	r3, r3, #16
 8004e64:	fb0a b303 	mla	r3, sl, r3, fp
 8004e68:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8004e6c:	454f      	cmp	r7, r9
 8004e6e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8004e72:	d805      	bhi.n	8004e80 <__multiply+0x124>
 8004e74:	f8c8 3004 	str.w	r3, [r8, #4]
 8004e78:	3504      	adds	r5, #4
 8004e7a:	e79b      	b.n	8004db4 <__multiply+0x58>
 8004e7c:	46d4      	mov	ip, sl
 8004e7e:	e7b3      	b.n	8004de8 <__multiply+0x8c>
 8004e80:	46e0      	mov	r8, ip
 8004e82:	e7dd      	b.n	8004e40 <__multiply+0xe4>
 8004e84:	3e01      	subs	r6, #1
 8004e86:	e799      	b.n	8004dbc <__multiply+0x60>

08004e88 <__pow5mult>:
 8004e88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e8c:	4615      	mov	r5, r2
 8004e8e:	f012 0203 	ands.w	r2, r2, #3
 8004e92:	4606      	mov	r6, r0
 8004e94:	460f      	mov	r7, r1
 8004e96:	d007      	beq.n	8004ea8 <__pow5mult+0x20>
 8004e98:	3a01      	subs	r2, #1
 8004e9a:	4c21      	ldr	r4, [pc, #132]	; (8004f20 <__pow5mult+0x98>)
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004ea2:	f7ff fec9 	bl	8004c38 <__multadd>
 8004ea6:	4607      	mov	r7, r0
 8004ea8:	10ad      	asrs	r5, r5, #2
 8004eaa:	d035      	beq.n	8004f18 <__pow5mult+0x90>
 8004eac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004eae:	b93c      	cbnz	r4, 8004ec0 <__pow5mult+0x38>
 8004eb0:	2010      	movs	r0, #16
 8004eb2:	f7ff fe63 	bl	8004b7c <malloc>
 8004eb6:	6270      	str	r0, [r6, #36]	; 0x24
 8004eb8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004ebc:	6004      	str	r4, [r0, #0]
 8004ebe:	60c4      	str	r4, [r0, #12]
 8004ec0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004ec4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004ec8:	b94c      	cbnz	r4, 8004ede <__pow5mult+0x56>
 8004eca:	f240 2171 	movw	r1, #625	; 0x271
 8004ece:	4630      	mov	r0, r6
 8004ed0:	f7ff ff3b 	bl	8004d4a <__i2b>
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	f8c8 0008 	str.w	r0, [r8, #8]
 8004eda:	4604      	mov	r4, r0
 8004edc:	6003      	str	r3, [r0, #0]
 8004ede:	f04f 0800 	mov.w	r8, #0
 8004ee2:	07eb      	lsls	r3, r5, #31
 8004ee4:	d50a      	bpl.n	8004efc <__pow5mult+0x74>
 8004ee6:	4639      	mov	r1, r7
 8004ee8:	4622      	mov	r2, r4
 8004eea:	4630      	mov	r0, r6
 8004eec:	f7ff ff36 	bl	8004d5c <__multiply>
 8004ef0:	4639      	mov	r1, r7
 8004ef2:	4681      	mov	r9, r0
 8004ef4:	4630      	mov	r0, r6
 8004ef6:	f7ff fe88 	bl	8004c0a <_Bfree>
 8004efa:	464f      	mov	r7, r9
 8004efc:	106d      	asrs	r5, r5, #1
 8004efe:	d00b      	beq.n	8004f18 <__pow5mult+0x90>
 8004f00:	6820      	ldr	r0, [r4, #0]
 8004f02:	b938      	cbnz	r0, 8004f14 <__pow5mult+0x8c>
 8004f04:	4622      	mov	r2, r4
 8004f06:	4621      	mov	r1, r4
 8004f08:	4630      	mov	r0, r6
 8004f0a:	f7ff ff27 	bl	8004d5c <__multiply>
 8004f0e:	6020      	str	r0, [r4, #0]
 8004f10:	f8c0 8000 	str.w	r8, [r0]
 8004f14:	4604      	mov	r4, r0
 8004f16:	e7e4      	b.n	8004ee2 <__pow5mult+0x5a>
 8004f18:	4638      	mov	r0, r7
 8004f1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f1e:	bf00      	nop
 8004f20:	08005400 	.word	0x08005400

08004f24 <__lshift>:
 8004f24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f28:	460c      	mov	r4, r1
 8004f2a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004f2e:	6923      	ldr	r3, [r4, #16]
 8004f30:	6849      	ldr	r1, [r1, #4]
 8004f32:	eb0a 0903 	add.w	r9, sl, r3
 8004f36:	68a3      	ldr	r3, [r4, #8]
 8004f38:	4607      	mov	r7, r0
 8004f3a:	4616      	mov	r6, r2
 8004f3c:	f109 0501 	add.w	r5, r9, #1
 8004f40:	42ab      	cmp	r3, r5
 8004f42:	db32      	blt.n	8004faa <__lshift+0x86>
 8004f44:	4638      	mov	r0, r7
 8004f46:	f7ff fe2c 	bl	8004ba2 <_Balloc>
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	4680      	mov	r8, r0
 8004f4e:	f100 0114 	add.w	r1, r0, #20
 8004f52:	461a      	mov	r2, r3
 8004f54:	4553      	cmp	r3, sl
 8004f56:	db2b      	blt.n	8004fb0 <__lshift+0x8c>
 8004f58:	6920      	ldr	r0, [r4, #16]
 8004f5a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004f5e:	f104 0314 	add.w	r3, r4, #20
 8004f62:	f016 021f 	ands.w	r2, r6, #31
 8004f66:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004f6a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004f6e:	d025      	beq.n	8004fbc <__lshift+0x98>
 8004f70:	f1c2 0e20 	rsb	lr, r2, #32
 8004f74:	2000      	movs	r0, #0
 8004f76:	681e      	ldr	r6, [r3, #0]
 8004f78:	468a      	mov	sl, r1
 8004f7a:	4096      	lsls	r6, r2
 8004f7c:	4330      	orrs	r0, r6
 8004f7e:	f84a 0b04 	str.w	r0, [sl], #4
 8004f82:	f853 0b04 	ldr.w	r0, [r3], #4
 8004f86:	459c      	cmp	ip, r3
 8004f88:	fa20 f00e 	lsr.w	r0, r0, lr
 8004f8c:	d814      	bhi.n	8004fb8 <__lshift+0x94>
 8004f8e:	6048      	str	r0, [r1, #4]
 8004f90:	b108      	cbz	r0, 8004f96 <__lshift+0x72>
 8004f92:	f109 0502 	add.w	r5, r9, #2
 8004f96:	3d01      	subs	r5, #1
 8004f98:	4638      	mov	r0, r7
 8004f9a:	f8c8 5010 	str.w	r5, [r8, #16]
 8004f9e:	4621      	mov	r1, r4
 8004fa0:	f7ff fe33 	bl	8004c0a <_Bfree>
 8004fa4:	4640      	mov	r0, r8
 8004fa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004faa:	3101      	adds	r1, #1
 8004fac:	005b      	lsls	r3, r3, #1
 8004fae:	e7c7      	b.n	8004f40 <__lshift+0x1c>
 8004fb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	e7cd      	b.n	8004f54 <__lshift+0x30>
 8004fb8:	4651      	mov	r1, sl
 8004fba:	e7dc      	b.n	8004f76 <__lshift+0x52>
 8004fbc:	3904      	subs	r1, #4
 8004fbe:	f853 2b04 	ldr.w	r2, [r3], #4
 8004fc2:	f841 2f04 	str.w	r2, [r1, #4]!
 8004fc6:	459c      	cmp	ip, r3
 8004fc8:	d8f9      	bhi.n	8004fbe <__lshift+0x9a>
 8004fca:	e7e4      	b.n	8004f96 <__lshift+0x72>

08004fcc <__mcmp>:
 8004fcc:	6903      	ldr	r3, [r0, #16]
 8004fce:	690a      	ldr	r2, [r1, #16]
 8004fd0:	1a9b      	subs	r3, r3, r2
 8004fd2:	b530      	push	{r4, r5, lr}
 8004fd4:	d10c      	bne.n	8004ff0 <__mcmp+0x24>
 8004fd6:	0092      	lsls	r2, r2, #2
 8004fd8:	3014      	adds	r0, #20
 8004fda:	3114      	adds	r1, #20
 8004fdc:	1884      	adds	r4, r0, r2
 8004fde:	4411      	add	r1, r2
 8004fe0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004fe4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004fe8:	4295      	cmp	r5, r2
 8004fea:	d003      	beq.n	8004ff4 <__mcmp+0x28>
 8004fec:	d305      	bcc.n	8004ffa <__mcmp+0x2e>
 8004fee:	2301      	movs	r3, #1
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	bd30      	pop	{r4, r5, pc}
 8004ff4:	42a0      	cmp	r0, r4
 8004ff6:	d3f3      	bcc.n	8004fe0 <__mcmp+0x14>
 8004ff8:	e7fa      	b.n	8004ff0 <__mcmp+0x24>
 8004ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8004ffe:	e7f7      	b.n	8004ff0 <__mcmp+0x24>

08005000 <__mdiff>:
 8005000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005004:	460d      	mov	r5, r1
 8005006:	4607      	mov	r7, r0
 8005008:	4611      	mov	r1, r2
 800500a:	4628      	mov	r0, r5
 800500c:	4614      	mov	r4, r2
 800500e:	f7ff ffdd 	bl	8004fcc <__mcmp>
 8005012:	1e06      	subs	r6, r0, #0
 8005014:	d108      	bne.n	8005028 <__mdiff+0x28>
 8005016:	4631      	mov	r1, r6
 8005018:	4638      	mov	r0, r7
 800501a:	f7ff fdc2 	bl	8004ba2 <_Balloc>
 800501e:	2301      	movs	r3, #1
 8005020:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005028:	bfa4      	itt	ge
 800502a:	4623      	movge	r3, r4
 800502c:	462c      	movge	r4, r5
 800502e:	4638      	mov	r0, r7
 8005030:	6861      	ldr	r1, [r4, #4]
 8005032:	bfa6      	itte	ge
 8005034:	461d      	movge	r5, r3
 8005036:	2600      	movge	r6, #0
 8005038:	2601      	movlt	r6, #1
 800503a:	f7ff fdb2 	bl	8004ba2 <_Balloc>
 800503e:	692b      	ldr	r3, [r5, #16]
 8005040:	60c6      	str	r6, [r0, #12]
 8005042:	6926      	ldr	r6, [r4, #16]
 8005044:	f105 0914 	add.w	r9, r5, #20
 8005048:	f104 0214 	add.w	r2, r4, #20
 800504c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8005050:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8005054:	f100 0514 	add.w	r5, r0, #20
 8005058:	f04f 0e00 	mov.w	lr, #0
 800505c:	f852 ab04 	ldr.w	sl, [r2], #4
 8005060:	f859 4b04 	ldr.w	r4, [r9], #4
 8005064:	fa1e f18a 	uxtah	r1, lr, sl
 8005068:	b2a3      	uxth	r3, r4
 800506a:	1ac9      	subs	r1, r1, r3
 800506c:	0c23      	lsrs	r3, r4, #16
 800506e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8005072:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005076:	b289      	uxth	r1, r1
 8005078:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800507c:	45c8      	cmp	r8, r9
 800507e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005082:	4694      	mov	ip, r2
 8005084:	f845 3b04 	str.w	r3, [r5], #4
 8005088:	d8e8      	bhi.n	800505c <__mdiff+0x5c>
 800508a:	45bc      	cmp	ip, r7
 800508c:	d304      	bcc.n	8005098 <__mdiff+0x98>
 800508e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8005092:	b183      	cbz	r3, 80050b6 <__mdiff+0xb6>
 8005094:	6106      	str	r6, [r0, #16]
 8005096:	e7c5      	b.n	8005024 <__mdiff+0x24>
 8005098:	f85c 1b04 	ldr.w	r1, [ip], #4
 800509c:	fa1e f381 	uxtah	r3, lr, r1
 80050a0:	141a      	asrs	r2, r3, #16
 80050a2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80050ac:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80050b0:	f845 3b04 	str.w	r3, [r5], #4
 80050b4:	e7e9      	b.n	800508a <__mdiff+0x8a>
 80050b6:	3e01      	subs	r6, #1
 80050b8:	e7e9      	b.n	800508e <__mdiff+0x8e>

080050ba <__d2b>:
 80050ba:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80050be:	460e      	mov	r6, r1
 80050c0:	2101      	movs	r1, #1
 80050c2:	ec59 8b10 	vmov	r8, r9, d0
 80050c6:	4615      	mov	r5, r2
 80050c8:	f7ff fd6b 	bl	8004ba2 <_Balloc>
 80050cc:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80050d0:	4607      	mov	r7, r0
 80050d2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80050d6:	bb34      	cbnz	r4, 8005126 <__d2b+0x6c>
 80050d8:	9301      	str	r3, [sp, #4]
 80050da:	f1b8 0300 	subs.w	r3, r8, #0
 80050de:	d027      	beq.n	8005130 <__d2b+0x76>
 80050e0:	a802      	add	r0, sp, #8
 80050e2:	f840 3d08 	str.w	r3, [r0, #-8]!
 80050e6:	f7ff fe01 	bl	8004cec <__lo0bits>
 80050ea:	9900      	ldr	r1, [sp, #0]
 80050ec:	b1f0      	cbz	r0, 800512c <__d2b+0x72>
 80050ee:	9a01      	ldr	r2, [sp, #4]
 80050f0:	f1c0 0320 	rsb	r3, r0, #32
 80050f4:	fa02 f303 	lsl.w	r3, r2, r3
 80050f8:	430b      	orrs	r3, r1
 80050fa:	40c2      	lsrs	r2, r0
 80050fc:	617b      	str	r3, [r7, #20]
 80050fe:	9201      	str	r2, [sp, #4]
 8005100:	9b01      	ldr	r3, [sp, #4]
 8005102:	61bb      	str	r3, [r7, #24]
 8005104:	2b00      	cmp	r3, #0
 8005106:	bf14      	ite	ne
 8005108:	2102      	movne	r1, #2
 800510a:	2101      	moveq	r1, #1
 800510c:	6139      	str	r1, [r7, #16]
 800510e:	b1c4      	cbz	r4, 8005142 <__d2b+0x88>
 8005110:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005114:	4404      	add	r4, r0
 8005116:	6034      	str	r4, [r6, #0]
 8005118:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800511c:	6028      	str	r0, [r5, #0]
 800511e:	4638      	mov	r0, r7
 8005120:	b003      	add	sp, #12
 8005122:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005126:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800512a:	e7d5      	b.n	80050d8 <__d2b+0x1e>
 800512c:	6179      	str	r1, [r7, #20]
 800512e:	e7e7      	b.n	8005100 <__d2b+0x46>
 8005130:	a801      	add	r0, sp, #4
 8005132:	f7ff fddb 	bl	8004cec <__lo0bits>
 8005136:	9b01      	ldr	r3, [sp, #4]
 8005138:	617b      	str	r3, [r7, #20]
 800513a:	2101      	movs	r1, #1
 800513c:	6139      	str	r1, [r7, #16]
 800513e:	3020      	adds	r0, #32
 8005140:	e7e5      	b.n	800510e <__d2b+0x54>
 8005142:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8005146:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800514a:	6030      	str	r0, [r6, #0]
 800514c:	6918      	ldr	r0, [r3, #16]
 800514e:	f7ff fdae 	bl	8004cae <__hi0bits>
 8005152:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005156:	e7e1      	b.n	800511c <__d2b+0x62>

08005158 <_calloc_r>:
 8005158:	b538      	push	{r3, r4, r5, lr}
 800515a:	fb02 f401 	mul.w	r4, r2, r1
 800515e:	4621      	mov	r1, r4
 8005160:	f000 f808 	bl	8005174 <_malloc_r>
 8005164:	4605      	mov	r5, r0
 8005166:	b118      	cbz	r0, 8005170 <_calloc_r+0x18>
 8005168:	4622      	mov	r2, r4
 800516a:	2100      	movs	r1, #0
 800516c:	f7fe fb60 	bl	8003830 <memset>
 8005170:	4628      	mov	r0, r5
 8005172:	bd38      	pop	{r3, r4, r5, pc}

08005174 <_malloc_r>:
 8005174:	b570      	push	{r4, r5, r6, lr}
 8005176:	1ccd      	adds	r5, r1, #3
 8005178:	f025 0503 	bic.w	r5, r5, #3
 800517c:	3508      	adds	r5, #8
 800517e:	2d0c      	cmp	r5, #12
 8005180:	bf38      	it	cc
 8005182:	250c      	movcc	r5, #12
 8005184:	2d00      	cmp	r5, #0
 8005186:	4606      	mov	r6, r0
 8005188:	db01      	blt.n	800518e <_malloc_r+0x1a>
 800518a:	42a9      	cmp	r1, r5
 800518c:	d903      	bls.n	8005196 <_malloc_r+0x22>
 800518e:	230c      	movs	r3, #12
 8005190:	6033      	str	r3, [r6, #0]
 8005192:	2000      	movs	r0, #0
 8005194:	bd70      	pop	{r4, r5, r6, pc}
 8005196:	f000 f869 	bl	800526c <__malloc_lock>
 800519a:	4a21      	ldr	r2, [pc, #132]	; (8005220 <_malloc_r+0xac>)
 800519c:	6814      	ldr	r4, [r2, #0]
 800519e:	4621      	mov	r1, r4
 80051a0:	b991      	cbnz	r1, 80051c8 <_malloc_r+0x54>
 80051a2:	4c20      	ldr	r4, [pc, #128]	; (8005224 <_malloc_r+0xb0>)
 80051a4:	6823      	ldr	r3, [r4, #0]
 80051a6:	b91b      	cbnz	r3, 80051b0 <_malloc_r+0x3c>
 80051a8:	4630      	mov	r0, r6
 80051aa:	f000 f83d 	bl	8005228 <_sbrk_r>
 80051ae:	6020      	str	r0, [r4, #0]
 80051b0:	4629      	mov	r1, r5
 80051b2:	4630      	mov	r0, r6
 80051b4:	f000 f838 	bl	8005228 <_sbrk_r>
 80051b8:	1c43      	adds	r3, r0, #1
 80051ba:	d124      	bne.n	8005206 <_malloc_r+0x92>
 80051bc:	230c      	movs	r3, #12
 80051be:	6033      	str	r3, [r6, #0]
 80051c0:	4630      	mov	r0, r6
 80051c2:	f000 f854 	bl	800526e <__malloc_unlock>
 80051c6:	e7e4      	b.n	8005192 <_malloc_r+0x1e>
 80051c8:	680b      	ldr	r3, [r1, #0]
 80051ca:	1b5b      	subs	r3, r3, r5
 80051cc:	d418      	bmi.n	8005200 <_malloc_r+0x8c>
 80051ce:	2b0b      	cmp	r3, #11
 80051d0:	d90f      	bls.n	80051f2 <_malloc_r+0x7e>
 80051d2:	600b      	str	r3, [r1, #0]
 80051d4:	50cd      	str	r5, [r1, r3]
 80051d6:	18cc      	adds	r4, r1, r3
 80051d8:	4630      	mov	r0, r6
 80051da:	f000 f848 	bl	800526e <__malloc_unlock>
 80051de:	f104 000b 	add.w	r0, r4, #11
 80051e2:	1d23      	adds	r3, r4, #4
 80051e4:	f020 0007 	bic.w	r0, r0, #7
 80051e8:	1ac3      	subs	r3, r0, r3
 80051ea:	d0d3      	beq.n	8005194 <_malloc_r+0x20>
 80051ec:	425a      	negs	r2, r3
 80051ee:	50e2      	str	r2, [r4, r3]
 80051f0:	e7d0      	b.n	8005194 <_malloc_r+0x20>
 80051f2:	428c      	cmp	r4, r1
 80051f4:	684b      	ldr	r3, [r1, #4]
 80051f6:	bf16      	itet	ne
 80051f8:	6063      	strne	r3, [r4, #4]
 80051fa:	6013      	streq	r3, [r2, #0]
 80051fc:	460c      	movne	r4, r1
 80051fe:	e7eb      	b.n	80051d8 <_malloc_r+0x64>
 8005200:	460c      	mov	r4, r1
 8005202:	6849      	ldr	r1, [r1, #4]
 8005204:	e7cc      	b.n	80051a0 <_malloc_r+0x2c>
 8005206:	1cc4      	adds	r4, r0, #3
 8005208:	f024 0403 	bic.w	r4, r4, #3
 800520c:	42a0      	cmp	r0, r4
 800520e:	d005      	beq.n	800521c <_malloc_r+0xa8>
 8005210:	1a21      	subs	r1, r4, r0
 8005212:	4630      	mov	r0, r6
 8005214:	f000 f808 	bl	8005228 <_sbrk_r>
 8005218:	3001      	adds	r0, #1
 800521a:	d0cf      	beq.n	80051bc <_malloc_r+0x48>
 800521c:	6025      	str	r5, [r4, #0]
 800521e:	e7db      	b.n	80051d8 <_malloc_r+0x64>
 8005220:	200001fc 	.word	0x200001fc
 8005224:	20000200 	.word	0x20000200

08005228 <_sbrk_r>:
 8005228:	b538      	push	{r3, r4, r5, lr}
 800522a:	4c06      	ldr	r4, [pc, #24]	; (8005244 <_sbrk_r+0x1c>)
 800522c:	2300      	movs	r3, #0
 800522e:	4605      	mov	r5, r0
 8005230:	4608      	mov	r0, r1
 8005232:	6023      	str	r3, [r4, #0]
 8005234:	f7fb ff56 	bl	80010e4 <_sbrk>
 8005238:	1c43      	adds	r3, r0, #1
 800523a:	d102      	bne.n	8005242 <_sbrk_r+0x1a>
 800523c:	6823      	ldr	r3, [r4, #0]
 800523e:	b103      	cbz	r3, 8005242 <_sbrk_r+0x1a>
 8005240:	602b      	str	r3, [r5, #0]
 8005242:	bd38      	pop	{r3, r4, r5, pc}
 8005244:	20000288 	.word	0x20000288

08005248 <__ascii_mbtowc>:
 8005248:	b082      	sub	sp, #8
 800524a:	b901      	cbnz	r1, 800524e <__ascii_mbtowc+0x6>
 800524c:	a901      	add	r1, sp, #4
 800524e:	b142      	cbz	r2, 8005262 <__ascii_mbtowc+0x1a>
 8005250:	b14b      	cbz	r3, 8005266 <__ascii_mbtowc+0x1e>
 8005252:	7813      	ldrb	r3, [r2, #0]
 8005254:	600b      	str	r3, [r1, #0]
 8005256:	7812      	ldrb	r2, [r2, #0]
 8005258:	1c10      	adds	r0, r2, #0
 800525a:	bf18      	it	ne
 800525c:	2001      	movne	r0, #1
 800525e:	b002      	add	sp, #8
 8005260:	4770      	bx	lr
 8005262:	4610      	mov	r0, r2
 8005264:	e7fb      	b.n	800525e <__ascii_mbtowc+0x16>
 8005266:	f06f 0001 	mvn.w	r0, #1
 800526a:	e7f8      	b.n	800525e <__ascii_mbtowc+0x16>

0800526c <__malloc_lock>:
 800526c:	4770      	bx	lr

0800526e <__malloc_unlock>:
 800526e:	4770      	bx	lr

08005270 <__ascii_wctomb>:
 8005270:	b149      	cbz	r1, 8005286 <__ascii_wctomb+0x16>
 8005272:	2aff      	cmp	r2, #255	; 0xff
 8005274:	bf85      	ittet	hi
 8005276:	238a      	movhi	r3, #138	; 0x8a
 8005278:	6003      	strhi	r3, [r0, #0]
 800527a:	700a      	strbls	r2, [r1, #0]
 800527c:	f04f 30ff 	movhi.w	r0, #4294967295
 8005280:	bf98      	it	ls
 8005282:	2001      	movls	r0, #1
 8005284:	4770      	bx	lr
 8005286:	4608      	mov	r0, r1
 8005288:	4770      	bx	lr
	...

0800528c <_init>:
 800528c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800528e:	bf00      	nop
 8005290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005292:	bc08      	pop	{r3}
 8005294:	469e      	mov	lr, r3
 8005296:	4770      	bx	lr

08005298 <_fini>:
 8005298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800529a:	bf00      	nop
 800529c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800529e:	bc08      	pop	{r3}
 80052a0:	469e      	mov	lr, r3
 80052a2:	4770      	bx	lr
