
Uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004570  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08004700  08004700  00014700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047f0  080047f0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080047f0  080047f0  000147f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080047f8  080047f8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047f8  080047f8  000147f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047fc  080047fc  000147fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004800  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  20000070  08004870  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000124  08004870  00020124  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c74a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d83  00000000  00000000  0002c7ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a20  00000000  00000000  0002e570  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000928  00000000  00000000  0002ef90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000271aa  00000000  00000000  0002f8b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008b8c  00000000  00000000  00056a62  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000eb234  00000000  00000000  0005f5ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014a822  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002eec  00000000  00000000  0014a8a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080046e8 	.word	0x080046e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080046e8 	.word	0x080046e8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000576:	f000 fc6f 	bl	8000e58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057a:	f000 f825 	bl	80005c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057e:	f000 f8b9 	bl	80006f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000582:	f000 f887 	bl	8000694 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  char a[] = "dziala";
 8000586:	4a0d      	ldr	r2, [pc, #52]	; (80005bc <main+0x4c>)
 8000588:	463b      	mov	r3, r7
 800058a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800058e:	6018      	str	r0, [r3, #0]
 8000590:	3304      	adds	r3, #4
 8000592:	8019      	strh	r1, [r3, #0]
 8000594:	3302      	adds	r3, #2
 8000596:	0c0a      	lsrs	r2, r1, #16
 8000598:	701a      	strb	r2, [r3, #0]
  {

	  //if(HAL_UART_Transmit(&huart2, "TEST 4", 7, 100) != HAL_OK){
		  //Error_Handler();
	  //}
	  printf("%s\r\n",a);
 800059a:	463b      	mov	r3, r7
 800059c:	4619      	mov	r1, r3
 800059e:	4808      	ldr	r0, [pc, #32]	; (80005c0 <main+0x50>)
 80005a0:	f003 f9be 	bl	8003920 <iprintf>
	  HAL_Delay(2000);
 80005a4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005a8:	f000 fcd2 	bl	8000f50 <HAL_Delay>
	  wykres++;
 80005ac:	4b05      	ldr	r3, [pc, #20]	; (80005c4 <main+0x54>)
 80005ae:	881b      	ldrh	r3, [r3, #0]
 80005b0:	3301      	adds	r3, #1
 80005b2:	b29a      	uxth	r2, r3
 80005b4:	4b03      	ldr	r3, [pc, #12]	; (80005c4 <main+0x54>)
 80005b6:	801a      	strh	r2, [r3, #0]
	  printf("%s\r\n",a);
 80005b8:	e7ef      	b.n	800059a <main+0x2a>
 80005ba:	bf00      	nop
 80005bc:	08004708 	.word	0x08004708
 80005c0:	08004700 	.word	0x08004700
 80005c4:	2000008c 	.word	0x2000008c

080005c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b0b8      	sub	sp, #224	; 0xe0
 80005cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ce:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80005d2:	2244      	movs	r2, #68	; 0x44
 80005d4:	2100      	movs	r1, #0
 80005d6:	4618      	mov	r0, r3
 80005d8:	f003 f99a 	bl	8003910 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005dc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	609a      	str	r2, [r3, #8]
 80005e8:	60da      	str	r2, [r3, #12]
 80005ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005ec:	463b      	mov	r3, r7
 80005ee:	2288      	movs	r2, #136	; 0x88
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f003 f98c 	bl	8003910 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005f8:	2310      	movs	r3, #16
 80005fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005fe:	2301      	movs	r3, #1
 8000600:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000604:	2300      	movs	r3, #0
 8000606:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800060a:	2360      	movs	r3, #96	; 0x60
 800060c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000610:	2300      	movs	r3, #0
 8000612:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000616:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800061a:	4618      	mov	r0, r3
 800061c:	f001 f830 	bl	8001680 <HAL_RCC_OscConfig>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000626:	f000 fa7f 	bl	8000b28 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062a:	230f      	movs	r3, #15
 800062c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000630:	2300      	movs	r3, #0
 8000632:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000636:	2300      	movs	r3, #0
 8000638:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800063c:	2300      	movs	r3, #0
 800063e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000642:	2300      	movs	r3, #0
 8000644:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000648:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f001 fbfc 	bl	8001e4c <HAL_RCC_ClockConfig>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800065a:	f000 fa65 	bl	8000b28 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800065e:	2302      	movs	r3, #2
 8000660:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000662:	2300      	movs	r3, #0
 8000664:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000666:	463b      	mov	r3, r7
 8000668:	4618      	mov	r0, r3
 800066a:	f001 fdf3 	bl	8002254 <HAL_RCCEx_PeriphCLKConfig>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000674:	f000 fa58 	bl	8000b28 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000678:	f44f 7000 	mov.w	r0, #512	; 0x200
 800067c:	f000 ffaa 	bl	80015d4 <HAL_PWREx_ControlVoltageScaling>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000686:	f000 fa4f 	bl	8000b28 <Error_Handler>
  }
}
 800068a:	bf00      	nop
 800068c:	37e0      	adds	r7, #224	; 0xe0
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
	...

08000694 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000698:	4b14      	ldr	r3, [pc, #80]	; (80006ec <MX_USART2_UART_Init+0x58>)
 800069a:	4a15      	ldr	r2, [pc, #84]	; (80006f0 <MX_USART2_UART_Init+0x5c>)
 800069c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800069e:	4b13      	ldr	r3, [pc, #76]	; (80006ec <MX_USART2_UART_Init+0x58>)
 80006a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006a6:	4b11      	ldr	r3, [pc, #68]	; (80006ec <MX_USART2_UART_Init+0x58>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006ac:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <MX_USART2_UART_Init+0x58>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006b2:	4b0e      	ldr	r3, [pc, #56]	; (80006ec <MX_USART2_UART_Init+0x58>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006b8:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <MX_USART2_UART_Init+0x58>)
 80006ba:	220c      	movs	r2, #12
 80006bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006be:	4b0b      	ldr	r3, [pc, #44]	; (80006ec <MX_USART2_UART_Init+0x58>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006c4:	4b09      	ldr	r3, [pc, #36]	; (80006ec <MX_USART2_UART_Init+0x58>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006ca:	4b08      	ldr	r3, [pc, #32]	; (80006ec <MX_USART2_UART_Init+0x58>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006d0:	4b06      	ldr	r3, [pc, #24]	; (80006ec <MX_USART2_UART_Init+0x58>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006d6:	4805      	ldr	r0, [pc, #20]	; (80006ec <MX_USART2_UART_Init+0x58>)
 80006d8:	f002 fa6c 	bl	8002bb4 <HAL_UART_Init>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006e2:	f000 fa21 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006e6:	bf00      	nop
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	2000009c 	.word	0x2000009c
 80006f0:	40004400 	.word	0x40004400

080006f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b08c      	sub	sp, #48	; 0x30
 80006f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fa:	f107 031c 	add.w	r3, r7, #28
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
 8000708:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800070a:	4bb7      	ldr	r3, [pc, #732]	; (80009e8 <MX_GPIO_Init+0x2f4>)
 800070c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800070e:	4ab6      	ldr	r2, [pc, #728]	; (80009e8 <MX_GPIO_Init+0x2f4>)
 8000710:	f043 0310 	orr.w	r3, r3, #16
 8000714:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000716:	4bb4      	ldr	r3, [pc, #720]	; (80009e8 <MX_GPIO_Init+0x2f4>)
 8000718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071a:	f003 0310 	and.w	r3, r3, #16
 800071e:	61bb      	str	r3, [r7, #24]
 8000720:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000722:	4bb1      	ldr	r3, [pc, #708]	; (80009e8 <MX_GPIO_Init+0x2f4>)
 8000724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000726:	4ab0      	ldr	r2, [pc, #704]	; (80009e8 <MX_GPIO_Init+0x2f4>)
 8000728:	f043 0304 	orr.w	r3, r3, #4
 800072c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800072e:	4bae      	ldr	r3, [pc, #696]	; (80009e8 <MX_GPIO_Init+0x2f4>)
 8000730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000732:	f003 0304 	and.w	r3, r3, #4
 8000736:	617b      	str	r3, [r7, #20]
 8000738:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800073a:	4bab      	ldr	r3, [pc, #684]	; (80009e8 <MX_GPIO_Init+0x2f4>)
 800073c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073e:	4aaa      	ldr	r2, [pc, #680]	; (80009e8 <MX_GPIO_Init+0x2f4>)
 8000740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000744:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000746:	4ba8      	ldr	r3, [pc, #672]	; (80009e8 <MX_GPIO_Init+0x2f4>)
 8000748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800074e:	613b      	str	r3, [r7, #16]
 8000750:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000752:	4ba5      	ldr	r3, [pc, #660]	; (80009e8 <MX_GPIO_Init+0x2f4>)
 8000754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000756:	4aa4      	ldr	r2, [pc, #656]	; (80009e8 <MX_GPIO_Init+0x2f4>)
 8000758:	f043 0301 	orr.w	r3, r3, #1
 800075c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800075e:	4ba2      	ldr	r3, [pc, #648]	; (80009e8 <MX_GPIO_Init+0x2f4>)
 8000760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000762:	f003 0301 	and.w	r3, r3, #1
 8000766:	60fb      	str	r3, [r7, #12]
 8000768:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800076a:	4b9f      	ldr	r3, [pc, #636]	; (80009e8 <MX_GPIO_Init+0x2f4>)
 800076c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076e:	4a9e      	ldr	r2, [pc, #632]	; (80009e8 <MX_GPIO_Init+0x2f4>)
 8000770:	f043 0302 	orr.w	r3, r3, #2
 8000774:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000776:	4b9c      	ldr	r3, [pc, #624]	; (80009e8 <MX_GPIO_Init+0x2f4>)
 8000778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077a:	f003 0302 	and.w	r3, r3, #2
 800077e:	60bb      	str	r3, [r7, #8]
 8000780:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000782:	4b99      	ldr	r3, [pc, #612]	; (80009e8 <MX_GPIO_Init+0x2f4>)
 8000784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000786:	4a98      	ldr	r2, [pc, #608]	; (80009e8 <MX_GPIO_Init+0x2f4>)
 8000788:	f043 0308 	orr.w	r3, r3, #8
 800078c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800078e:	4b96      	ldr	r3, [pc, #600]	; (80009e8 <MX_GPIO_Init+0x2f4>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000792:	f003 0308 	and.w	r3, r3, #8
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, AUDIO_RST_Pin|LD_G_Pin|XL_CS_Pin, GPIO_PIN_RESET);
 800079a:	2200      	movs	r2, #0
 800079c:	f240 1109 	movw	r1, #265	; 0x109
 80007a0:	4892      	ldr	r0, [pc, #584]	; (80009ec <MX_GPIO_Init+0x2f8>)
 80007a2:	f000 fef1 	bl	8001588 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD_R_Pin|M3V3_REG_ON_Pin, GPIO_PIN_RESET);
 80007a6:	2200      	movs	r2, #0
 80007a8:	210c      	movs	r1, #12
 80007aa:	4891      	ldr	r0, [pc, #580]	; (80009f0 <MX_GPIO_Init+0x2fc>)
 80007ac:	f000 feec 	bl	8001588 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007b0:	2201      	movs	r2, #1
 80007b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007b6:	488f      	ldr	r0, [pc, #572]	; (80009f4 <MX_GPIO_Init+0x300>)
 80007b8:	f000 fee6 	bl	8001588 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_VBUS_GPIO_Port, OTG_FS_VBUS_Pin, GPIO_PIN_RESET);
 80007bc:	2200      	movs	r2, #0
 80007be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007c2:	488c      	ldr	r0, [pc, #560]	; (80009f4 <MX_GPIO_Init+0x300>)
 80007c4:	f000 fee0 	bl	8001588 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 80007c8:	2200      	movs	r2, #0
 80007ca:	2180      	movs	r1, #128	; 0x80
 80007cc:	488a      	ldr	r0, [pc, #552]	; (80009f8 <MX_GPIO_Init+0x304>)
 80007ce:	f000 fedb 	bl	8001588 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SAI1_MCK_Pin SAI1_FS_Pin SAI1_SCK_Pin SAI1_SD_Pin
                           AUDIO_DIN_Pin */
  GPIO_InitStruct.Pin = SAI1_MCK_Pin|SAI1_FS_Pin|SAI1_SCK_Pin|SAI1_SD_Pin
 80007d2:	23f4      	movs	r3, #244	; 0xf4
 80007d4:	61fb      	str	r3, [r7, #28]
                          |AUDIO_DIN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d6:	2302      	movs	r3, #2
 80007d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007de:	2303      	movs	r3, #3
 80007e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80007e2:	230d      	movs	r3, #13
 80007e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007e6:	f107 031c 	add.w	r3, r7, #28
 80007ea:	4619      	mov	r1, r3
 80007ec:	487f      	ldr	r0, [pc, #508]	; (80009ec <MX_GPIO_Init+0x2f8>)
 80007ee:	f000 fd23 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pin : AUDIO_RST_Pin */
  GPIO_InitStruct.Pin = AUDIO_RST_Pin;
 80007f2:	2308      	movs	r3, #8
 80007f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f6:	2301      	movs	r3, #1
 80007f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007fe:	2302      	movs	r3, #2
 8000800:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AUDIO_RST_GPIO_Port, &GPIO_InitStruct);
 8000802:	f107 031c 	add.w	r3, r7, #28
 8000806:	4619      	mov	r1, r3
 8000808:	4878      	ldr	r0, [pc, #480]	; (80009ec <MX_GPIO_Init+0x2f8>)
 800080a:	f000 fd15 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pins : MFX_IRQ_OUT_Pin OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin|OTG_FS_OverCurrent_Pin;
 800080e:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8000812:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000814:	4b79      	ldr	r3, [pc, #484]	; (80009fc <MX_GPIO_Init+0x308>)
 8000816:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000818:	2300      	movs	r3, #0
 800081a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800081c:	f107 031c 	add.w	r3, r7, #28
 8000820:	4619      	mov	r1, r3
 8000822:	4874      	ldr	r0, [pc, #464]	; (80009f4 <MX_GPIO_Init+0x300>)
 8000824:	f000 fd08 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 MAG_INT_Pin MAG_DRDY_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|MAG_INT_Pin|MAG_DRDY_Pin;
 8000828:	2307      	movs	r3, #7
 800082a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800082c:	2300      	movs	r3, #0
 800082e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000834:	f107 031c 	add.w	r3, r7, #28
 8000838:	4619      	mov	r1, r3
 800083a:	486e      	ldr	r0, [pc, #440]	; (80009f4 <MX_GPIO_Init+0x300>)
 800083c:	f000 fcfc 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pins : VLCD_Pin SEG22_Pin SEG1_Pin SEG14_Pin
                           SEG9_Pin SEG13_Pin */
  GPIO_InitStruct.Pin = VLCD_Pin|SEG22_Pin|SEG1_Pin|SEG14_Pin
 8000840:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 8000844:	61fb      	str	r3, [r7, #28]
                          |SEG9_Pin|SEG13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000846:	2302      	movs	r3, #2
 8000848:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084e:	2300      	movs	r3, #0
 8000850:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000852:	230b      	movs	r3, #11
 8000854:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000856:	f107 031c 	add.w	r3, r7, #28
 800085a:	4619      	mov	r1, r3
 800085c:	4865      	ldr	r0, [pc, #404]	; (80009f4 <MX_GPIO_Init+0x300>)
 800085e:	f000 fceb 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pins : JOY_CENTER_Pin JOY_LEFT_Pin JOY_RIGHT_Pin JOY_UP_Pin
                           JOY_DOWN_Pin */
  GPIO_InitStruct.Pin = JOY_CENTER_Pin|JOY_LEFT_Pin|JOY_RIGHT_Pin|JOY_UP_Pin
 8000862:	232f      	movs	r3, #47	; 0x2f
 8000864:	61fb      	str	r3, [r7, #28]
                          |JOY_DOWN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000866:	2300      	movs	r3, #0
 8000868:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800086a:	2302      	movs	r3, #2
 800086c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086e:	f107 031c 	add.w	r3, r7, #28
 8000872:	4619      	mov	r1, r3
 8000874:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000878:	f000 fcde 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_WAKEUP_Pin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
 800087c:	2310      	movs	r3, #16
 800087e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000880:	4b5e      	ldr	r3, [pc, #376]	; (80009fc <MX_GPIO_Init+0x308>)
 8000882:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8000888:	f107 031c 	add.w	r3, r7, #28
 800088c:	4619      	mov	r1, r3
 800088e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000892:	f000 fcd1 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG23_Pin SEG0_Pin COM0_Pin COM1_Pin
                           COM2_Pin SEG10_Pin */
  GPIO_InitStruct.Pin = SEG23_Pin|SEG0_Pin|COM0_Pin|COM1_Pin
 8000896:	f248 73c0 	movw	r3, #34752	; 0x87c0
 800089a:	61fb      	str	r3, [r7, #28]
                          |COM2_Pin|SEG10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089c:	2302      	movs	r3, #2
 800089e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a4:	2300      	movs	r3, #0
 80008a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 80008a8:	230b      	movs	r3, #11
 80008aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ac:	f107 031c 	add.w	r3, r7, #28
 80008b0:	4619      	mov	r1, r3
 80008b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008b6:	f000 fcbf 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG21_Pin SEG2_Pin SEG20_Pin SEG3_Pin
                           SEG19_Pin SEG4_Pin SEG11_Pin SEG12_Pin
                           COM3_Pin */
  GPIO_InitStruct.Pin = SEG21_Pin|SEG2_Pin|SEG20_Pin|SEG3_Pin
 80008ba:	f24f 2333 	movw	r3, #62003	; 0xf233
 80008be:	61fb      	str	r3, [r7, #28]
                          |SEG19_Pin|SEG4_Pin|SEG11_Pin|SEG12_Pin
                          |COM3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c0:	2302      	movs	r3, #2
 80008c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c8:	2300      	movs	r3, #0
 80008ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 80008cc:	230b      	movs	r3, #11
 80008ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d0:	f107 031c 	add.w	r3, r7, #28
 80008d4:	4619      	mov	r1, r3
 80008d6:	4846      	ldr	r0, [pc, #280]	; (80009f0 <MX_GPIO_Init+0x2fc>)
 80008d8:	f000 fcae 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD_R_Pin */
  GPIO_InitStruct.Pin = LD_R_Pin;
 80008dc:	2304      	movs	r3, #4
 80008de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e0:	2301      	movs	r3, #1
 80008e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008e4:	2301      	movs	r3, #1
 80008e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e8:	2303      	movs	r3, #3
 80008ea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_R_GPIO_Port, &GPIO_InitStruct);
 80008ec:	f107 031c 	add.w	r3, r7, #28
 80008f0:	4619      	mov	r1, r3
 80008f2:	483f      	ldr	r0, [pc, #252]	; (80009f0 <MX_GPIO_Init+0x2fc>)
 80008f4:	f000 fca0 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD_G_Pin */
  GPIO_InitStruct.Pin = LD_G_Pin;
 80008f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fe:	2301      	movs	r3, #1
 8000900:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000902:	2301      	movs	r3, #1
 8000904:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000906:	2303      	movs	r3, #3
 8000908:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_G_GPIO_Port, &GPIO_InitStruct);
 800090a:	f107 031c 	add.w	r3, r7, #28
 800090e:	4619      	mov	r1, r3
 8000910:	4836      	ldr	r0, [pc, #216]	; (80009ec <MX_GPIO_Init+0x2f8>)
 8000912:	f000 fc91 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pin : AUDIO_CLK_Pin */
  GPIO_InitStruct.Pin = AUDIO_CLK_Pin;
 8000916:	f44f 7300 	mov.w	r3, #512	; 0x200
 800091a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091c:	2302      	movs	r3, #2
 800091e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000924:	2300      	movs	r3, #0
 8000926:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000928:	230d      	movs	r3, #13
 800092a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_CLK_GPIO_Port, &GPIO_InitStruct);
 800092c:	f107 031c 	add.w	r3, r7, #28
 8000930:	4619      	mov	r1, r3
 8000932:	482e      	ldr	r0, [pc, #184]	; (80009ec <MX_GPIO_Init+0x2f8>)
 8000934:	f000 fc80 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_CLK_Pin QSPI_CS_Pin QSPI_D0_Pin QSPI_D1_Pin
                           QSPI_D2_Pin QSPI_D3_Pin */
  GPIO_InitStruct.Pin = QSPI_CLK_Pin|QSPI_CS_Pin|QSPI_D0_Pin|QSPI_D1_Pin
 8000938:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800093c:	61fb      	str	r3, [r7, #28]
                          |QSPI_D2_Pin|QSPI_D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093e:	2302      	movs	r3, #2
 8000940:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000946:	2303      	movs	r3, #3
 8000948:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800094a:	230a      	movs	r3, #10
 800094c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800094e:	f107 031c 	add.w	r3, r7, #28
 8000952:	4619      	mov	r1, r3
 8000954:	4825      	ldr	r0, [pc, #148]	; (80009ec <MX_GPIO_Init+0x2f8>)
 8000956:	f000 fc6f 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pins : MFX_I2C_SLC_Pin MFX_I2C_SDA_Pin */
  GPIO_InitStruct.Pin = MFX_I2C_SLC_Pin|MFX_I2C_SDA_Pin;
 800095a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800095e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000960:	2312      	movs	r3, #18
 8000962:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000964:	2301      	movs	r3, #1
 8000966:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000968:	2303      	movs	r3, #3
 800096a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800096c:	2304      	movs	r3, #4
 800096e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000970:	f107 031c 	add.w	r3, r7, #28
 8000974:	4619      	mov	r1, r3
 8000976:	481e      	ldr	r0, [pc, #120]	; (80009f0 <MX_GPIO_Init+0x2fc>)
 8000978:	f000 fc5e 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG18_Pin SEG5_Pin SEG17_Pin SEG6_Pin
                           SEG16_Pin SEG7_Pin SEG15_Pin SEG8_Pin */
  GPIO_InitStruct.Pin = SEG18_Pin|SEG5_Pin|SEG17_Pin|SEG6_Pin
 800097c:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000980:	61fb      	str	r3, [r7, #28]
                          |SEG16_Pin|SEG7_Pin|SEG15_Pin|SEG8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000982:	2302      	movs	r3, #2
 8000984:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098a:	2300      	movs	r3, #0
 800098c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 800098e:	230b      	movs	r3, #11
 8000990:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000992:	f107 031c 	add.w	r3, r7, #28
 8000996:	4619      	mov	r1, r3
 8000998:	4817      	ldr	r0, [pc, #92]	; (80009f8 <MX_GPIO_Init+0x304>)
 800099a:	f000 fc4d 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|OTG_FS_VBUS_Pin;
 800099e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80009a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a4:	2301      	movs	r3, #1
 80009a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ac:	2300      	movs	r3, #0
 80009ae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009b0:	f107 031c 	add.w	r3, r7, #28
 80009b4:	4619      	mov	r1, r3
 80009b6:	480f      	ldr	r0, [pc, #60]	; (80009f4 <MX_GPIO_Init+0x300>)
 80009b8:	f000 fc3e 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80009bc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80009c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c2:	2302      	movs	r3, #2
 80009c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ca:	2303      	movs	r3, #3
 80009cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009ce:	230a      	movs	r3, #10
 80009d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d2:	f107 031c 	add.w	r3, r7, #28
 80009d6:	4619      	mov	r1, r3
 80009d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009dc:	f000 fc2c 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXT_RST_Pin GYRO_INT1_Pin */
  GPIO_InitStruct.Pin = EXT_RST_Pin|GYRO_INT1_Pin;
 80009e0:	2305      	movs	r3, #5
 80009e2:	61fb      	str	r3, [r7, #28]
 80009e4:	e00c      	b.n	8000a00 <MX_GPIO_Init+0x30c>
 80009e6:	bf00      	nop
 80009e8:	40021000 	.word	0x40021000
 80009ec:	48001000 	.word	0x48001000
 80009f0:	48000400 	.word	0x48000400
 80009f4:	48000800 	.word	0x48000800
 80009f8:	48000c00 	.word	0x48000c00
 80009fc:	10120000 	.word	0x10120000
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a00:	4b38      	ldr	r3, [pc, #224]	; (8000ae4 <MX_GPIO_Init+0x3f0>)
 8000a02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a08:	f107 031c 	add.w	r3, r7, #28
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4836      	ldr	r0, [pc, #216]	; (8000ae8 <MX_GPIO_Init+0x3f4>)
 8000a10:	f000 fc12 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_SCK_Pin MEMS_MISO_Pin MEMS_MOSI_Pin */
  GPIO_InitStruct.Pin = MEMS_SCK_Pin|MEMS_MISO_Pin|MEMS_MOSI_Pin;
 8000a14:	231a      	movs	r3, #26
 8000a16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a20:	2303      	movs	r3, #3
 8000a22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a24:	2305      	movs	r3, #5
 8000a26:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a28:	f107 031c 	add.w	r3, r7, #28
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	482e      	ldr	r0, [pc, #184]	; (8000ae8 <MX_GPIO_Init+0x3f4>)
 8000a30:	f000 fc02 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pin : GYRO_CS_Pin */
  GPIO_InitStruct.Pin = GYRO_CS_Pin;
 8000a34:	2380      	movs	r3, #128	; 0x80
 8000a36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a40:	2303      	movs	r3, #3
 8000a42:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GYRO_CS_GPIO_Port, &GPIO_InitStruct);
 8000a44:	f107 031c 	add.w	r3, r7, #28
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4827      	ldr	r0, [pc, #156]	; (8000ae8 <MX_GPIO_Init+0x3f4>)
 8000a4c:	f000 fbf4 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pin : M3V3_REG_ON_Pin */
  GPIO_InitStruct.Pin = M3V3_REG_ON_Pin;
 8000a50:	2308      	movs	r3, #8
 8000a52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a54:	2301      	movs	r3, #1
 8000a56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(M3V3_REG_ON_GPIO_Port, &GPIO_InitStruct);
 8000a60:	f107 031c 	add.w	r3, r7, #28
 8000a64:	4619      	mov	r1, r3
 8000a66:	4821      	ldr	r0, [pc, #132]	; (8000aec <MX_GPIO_Init+0x3f8>)
 8000a68:	f000 fbe6 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C1_SCL_Pin I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000a6c:	23c0      	movs	r3, #192	; 0xc0
 8000a6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a70:	2312      	movs	r3, #18
 8000a72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a74:	2301      	movs	r3, #1
 8000a76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a78:	2303      	movs	r3, #3
 8000a7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a7c:	2304      	movs	r3, #4
 8000a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a80:	f107 031c 	add.w	r3, r7, #28
 8000a84:	4619      	mov	r1, r3
 8000a86:	4819      	ldr	r0, [pc, #100]	; (8000aec <MX_GPIO_Init+0x3f8>)
 8000a88:	f000 fbd6 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pin : GYRO_INT2_Pin */
  GPIO_InitStruct.Pin = GYRO_INT2_Pin;
 8000a8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a92:	4b14      	ldr	r3, [pc, #80]	; (8000ae4 <MX_GPIO_Init+0x3f0>)
 8000a94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GYRO_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a9a:	f107 031c 	add.w	r3, r7, #28
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4812      	ldr	r0, [pc, #72]	; (8000aec <MX_GPIO_Init+0x3f8>)
 8000aa2:	f000 fbc9 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pin : XL_CS_Pin */
  GPIO_InitStruct.Pin = XL_CS_Pin;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(XL_CS_GPIO_Port, &GPIO_InitStruct);
 8000ab6:	f107 031c 	add.w	r3, r7, #28
 8000aba:	4619      	mov	r1, r3
 8000abc:	480c      	ldr	r0, [pc, #48]	; (8000af0 <MX_GPIO_Init+0x3fc>)
 8000abe:	f000 fbbb 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pin : XL_INT_Pin */
  GPIO_InitStruct.Pin = XL_INT_Pin;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ac6:	4b07      	ldr	r3, [pc, #28]	; (8000ae4 <MX_GPIO_Init+0x3f0>)
 8000ac8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(XL_INT_GPIO_Port, &GPIO_InitStruct);
 8000ace:	f107 031c 	add.w	r3, r7, #28
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4806      	ldr	r0, [pc, #24]	; (8000af0 <MX_GPIO_Init+0x3fc>)
 8000ad6:	f000 fbaf 	bl	8001238 <HAL_GPIO_Init>

}
 8000ada:	bf00      	nop
 8000adc:	3730      	adds	r7, #48	; 0x30
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	10120000 	.word	0x10120000
 8000ae8:	48000c00 	.word	0x48000c00
 8000aec:	48000400 	.word	0x48000400
 8000af0:	48001000 	.word	0x48001000

08000af4 <_write>:

/* USER CODE BEGIN 4 */

int _write(int file, char *ptr, int len){
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	60f8      	str	r0, [r7, #12]
 8000afc:	60b9      	str	r1, [r7, #8]
 8000afe:	607a      	str	r2, [r7, #4]

	  if(HAL_UART_Transmit(&huart2, ptr, len, 100) != HAL_OK){
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	b29a      	uxth	r2, r3
 8000b04:	2364      	movs	r3, #100	; 0x64
 8000b06:	68b9      	ldr	r1, [r7, #8]
 8000b08:	4806      	ldr	r0, [pc, #24]	; (8000b24 <_write+0x30>)
 8000b0a:	f002 f8a1 	bl	8002c50 <HAL_UART_Transmit>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <_write+0x24>
		  Error_Handler();
 8000b14:	f000 f808 	bl	8000b28 <Error_Handler>
	  }

	return len;
 8000b18:	687b      	ldr	r3, [r7, #4]
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3710      	adds	r7, #16
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	2000009c 	.word	0x2000009c

08000b28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
	...

08000b38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b3e:	4b0f      	ldr	r3, [pc, #60]	; (8000b7c <HAL_MspInit+0x44>)
 8000b40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b42:	4a0e      	ldr	r2, [pc, #56]	; (8000b7c <HAL_MspInit+0x44>)
 8000b44:	f043 0301 	orr.w	r3, r3, #1
 8000b48:	6613      	str	r3, [r2, #96]	; 0x60
 8000b4a:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <HAL_MspInit+0x44>)
 8000b4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b4e:	f003 0301 	and.w	r3, r3, #1
 8000b52:	607b      	str	r3, [r7, #4]
 8000b54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b56:	4b09      	ldr	r3, [pc, #36]	; (8000b7c <HAL_MspInit+0x44>)
 8000b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b5a:	4a08      	ldr	r2, [pc, #32]	; (8000b7c <HAL_MspInit+0x44>)
 8000b5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b60:	6593      	str	r3, [r2, #88]	; 0x58
 8000b62:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <HAL_MspInit+0x44>)
 8000b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b6a:	603b      	str	r3, [r7, #0]
 8000b6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	40021000 	.word	0x40021000

08000b80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	; 0x28
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b88:	f107 0314 	add.w	r3, r7, #20
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
 8000b90:	605a      	str	r2, [r3, #4]
 8000b92:	609a      	str	r2, [r3, #8]
 8000b94:	60da      	str	r2, [r3, #12]
 8000b96:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a1b      	ldr	r2, [pc, #108]	; (8000c0c <HAL_UART_MspInit+0x8c>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d12f      	bne.n	8000c02 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ba2:	4b1b      	ldr	r3, [pc, #108]	; (8000c10 <HAL_UART_MspInit+0x90>)
 8000ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ba6:	4a1a      	ldr	r2, [pc, #104]	; (8000c10 <HAL_UART_MspInit+0x90>)
 8000ba8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bac:	6593      	str	r3, [r2, #88]	; 0x58
 8000bae:	4b18      	ldr	r3, [pc, #96]	; (8000c10 <HAL_UART_MspInit+0x90>)
 8000bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bb6:	613b      	str	r3, [r7, #16]
 8000bb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bba:	4b15      	ldr	r3, [pc, #84]	; (8000c10 <HAL_UART_MspInit+0x90>)
 8000bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bbe:	4a14      	ldr	r2, [pc, #80]	; (8000c10 <HAL_UART_MspInit+0x90>)
 8000bc0:	f043 0308 	orr.w	r3, r3, #8
 8000bc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bc6:	4b12      	ldr	r3, [pc, #72]	; (8000c10 <HAL_UART_MspInit+0x90>)
 8000bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bca:	f003 0308 	and.w	r3, r3, #8
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000bd2:	2360      	movs	r3, #96	; 0x60
 8000bd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bde:	2303      	movs	r3, #3
 8000be0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000be2:	2307      	movs	r3, #7
 8000be4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000be6:	f107 0314 	add.w	r3, r7, #20
 8000bea:	4619      	mov	r1, r3
 8000bec:	4809      	ldr	r0, [pc, #36]	; (8000c14 <HAL_UART_MspInit+0x94>)
 8000bee:	f000 fb23 	bl	8001238 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	2026      	movs	r0, #38	; 0x26
 8000bf8:	f000 faa7 	bl	800114a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000bfc:	2026      	movs	r0, #38	; 0x26
 8000bfe:	f000 fac0 	bl	8001182 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c02:	bf00      	nop
 8000c04:	3728      	adds	r7, #40	; 0x28
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40004400 	.word	0x40004400
 8000c10:	40021000 	.word	0x40021000
 8000c14:	48000c00 	.word	0x48000c00

08000c18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr

08000c26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c2a:	e7fe      	b.n	8000c2a <HardFault_Handler+0x4>

08000c2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c30:	e7fe      	b.n	8000c30 <MemManage_Handler+0x4>

08000c32 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c32:	b480      	push	{r7}
 8000c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c36:	e7fe      	b.n	8000c36 <BusFault_Handler+0x4>

08000c38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c3c:	e7fe      	b.n	8000c3c <UsageFault_Handler+0x4>

08000c3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c50:	bf00      	nop
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr

08000c5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr

08000c68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c6c:	f000 f950 	bl	8000f10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c70:	bf00      	nop
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c78:	4802      	ldr	r0, [pc, #8]	; (8000c84 <USART2_IRQHandler+0x10>)
 8000c7a:	f002 f87d 	bl	8002d78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	2000009c 	.word	0x2000009c

08000c88 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b086      	sub	sp, #24
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	60f8      	str	r0, [r7, #12]
 8000c90:	60b9      	str	r1, [r7, #8]
 8000c92:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c94:	2300      	movs	r3, #0
 8000c96:	617b      	str	r3, [r7, #20]
 8000c98:	e00a      	b.n	8000cb0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c9a:	f3af 8000 	nop.w
 8000c9e:	4601      	mov	r1, r0
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	1c5a      	adds	r2, r3, #1
 8000ca4:	60ba      	str	r2, [r7, #8]
 8000ca6:	b2ca      	uxtb	r2, r1
 8000ca8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	3301      	adds	r3, #1
 8000cae:	617b      	str	r3, [r7, #20]
 8000cb0:	697a      	ldr	r2, [r7, #20]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	dbf0      	blt.n	8000c9a <_read+0x12>
	}

return len;
 8000cb8:	687b      	ldr	r3, [r7, #4]
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3718      	adds	r7, #24
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	b083      	sub	sp, #12
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]
	return -1;
 8000cca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr

08000cda <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	b083      	sub	sp, #12
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	6078      	str	r0, [r7, #4]
 8000ce2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cea:	605a      	str	r2, [r3, #4]
	return 0;
 8000cec:	2300      	movs	r3, #0
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	370c      	adds	r7, #12
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr

08000cfa <_isatty>:

int _isatty(int file)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	b083      	sub	sp, #12
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
	return 1;
 8000d02:	2301      	movs	r3, #1
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	370c      	adds	r7, #12
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	607a      	str	r2, [r7, #4]
	return 0;
 8000d1c:	2300      	movs	r3, #0
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3714      	adds	r7, #20
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
	...

08000d2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b086      	sub	sp, #24
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d34:	4a14      	ldr	r2, [pc, #80]	; (8000d88 <_sbrk+0x5c>)
 8000d36:	4b15      	ldr	r3, [pc, #84]	; (8000d8c <_sbrk+0x60>)
 8000d38:	1ad3      	subs	r3, r2, r3
 8000d3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d40:	4b13      	ldr	r3, [pc, #76]	; (8000d90 <_sbrk+0x64>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d102      	bne.n	8000d4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d48:	4b11      	ldr	r3, [pc, #68]	; (8000d90 <_sbrk+0x64>)
 8000d4a:	4a12      	ldr	r2, [pc, #72]	; (8000d94 <_sbrk+0x68>)
 8000d4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d4e:	4b10      	ldr	r3, [pc, #64]	; (8000d90 <_sbrk+0x64>)
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4413      	add	r3, r2
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d207      	bcs.n	8000d6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d5c:	f002 fdae 	bl	80038bc <__errno>
 8000d60:	4602      	mov	r2, r0
 8000d62:	230c      	movs	r3, #12
 8000d64:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000d66:	f04f 33ff 	mov.w	r3, #4294967295
 8000d6a:	e009      	b.n	8000d80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d6c:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <_sbrk+0x64>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d72:	4b07      	ldr	r3, [pc, #28]	; (8000d90 <_sbrk+0x64>)
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4413      	add	r3, r2
 8000d7a:	4a05      	ldr	r2, [pc, #20]	; (8000d90 <_sbrk+0x64>)
 8000d7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d7e:	68fb      	ldr	r3, [r7, #12]
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	3718      	adds	r7, #24
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	20018000 	.word	0x20018000
 8000d8c:	00000400 	.word	0x00000400
 8000d90:	20000090 	.word	0x20000090
 8000d94:	20000128 	.word	0x20000128

08000d98 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d9c:	4b17      	ldr	r3, [pc, #92]	; (8000dfc <SystemInit+0x64>)
 8000d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000da2:	4a16      	ldr	r2, [pc, #88]	; (8000dfc <SystemInit+0x64>)
 8000da4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000da8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000dac:	4b14      	ldr	r3, [pc, #80]	; (8000e00 <SystemInit+0x68>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a13      	ldr	r2, [pc, #76]	; (8000e00 <SystemInit+0x68>)
 8000db2:	f043 0301 	orr.w	r3, r3, #1
 8000db6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000db8:	4b11      	ldr	r3, [pc, #68]	; (8000e00 <SystemInit+0x68>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000dbe:	4b10      	ldr	r3, [pc, #64]	; (8000e00 <SystemInit+0x68>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a0f      	ldr	r2, [pc, #60]	; (8000e00 <SystemInit+0x68>)
 8000dc4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000dc8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000dcc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000dce:	4b0c      	ldr	r3, [pc, #48]	; (8000e00 <SystemInit+0x68>)
 8000dd0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000dd4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000dd6:	4b0a      	ldr	r3, [pc, #40]	; (8000e00 <SystemInit+0x68>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a09      	ldr	r2, [pc, #36]	; (8000e00 <SystemInit+0x68>)
 8000ddc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000de0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000de2:	4b07      	ldr	r3, [pc, #28]	; (8000e00 <SystemInit+0x68>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000de8:	4b04      	ldr	r3, [pc, #16]	; (8000dfc <SystemInit+0x64>)
 8000dea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000dee:	609a      	str	r2, [r3, #8]
#endif
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	e000ed00 	.word	0xe000ed00
 8000e00:	40021000 	.word	0x40021000

08000e04 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e3c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e08:	f7ff ffc6 	bl	8000d98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000e0c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000e0e:	e003      	b.n	8000e18 <LoopCopyDataInit>

08000e10 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000e10:	4b0b      	ldr	r3, [pc, #44]	; (8000e40 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000e12:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000e14:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000e16:	3104      	adds	r1, #4

08000e18 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000e18:	480a      	ldr	r0, [pc, #40]	; (8000e44 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000e1a:	4b0b      	ldr	r3, [pc, #44]	; (8000e48 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000e1c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000e1e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000e20:	d3f6      	bcc.n	8000e10 <CopyDataInit>
	ldr	r2, =_sbss
 8000e22:	4a0a      	ldr	r2, [pc, #40]	; (8000e4c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000e24:	e002      	b.n	8000e2c <LoopFillZerobss>

08000e26 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000e26:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000e28:	f842 3b04 	str.w	r3, [r2], #4

08000e2c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000e2c:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <LoopForever+0x16>)
	cmp	r2, r3
 8000e2e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000e30:	d3f9      	bcc.n	8000e26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e32:	f002 fd49 	bl	80038c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e36:	f7ff fb9b 	bl	8000570 <main>

08000e3a <LoopForever>:

LoopForever:
    b LoopForever
 8000e3a:	e7fe      	b.n	8000e3a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e3c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000e40:	08004800 	.word	0x08004800
	ldr	r0, =_sdata
 8000e44:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000e48:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8000e4c:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8000e50:	20000124 	.word	0x20000124

08000e54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e54:	e7fe      	b.n	8000e54 <ADC1_2_IRQHandler>
	...

08000e58 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e62:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <HAL_Init+0x3c>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a0b      	ldr	r2, [pc, #44]	; (8000e94 <HAL_Init+0x3c>)
 8000e68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e6c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e6e:	2003      	movs	r0, #3
 8000e70:	f000 f960 	bl	8001134 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e74:	2000      	movs	r0, #0
 8000e76:	f000 f80f 	bl	8000e98 <HAL_InitTick>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d002      	beq.n	8000e86 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000e80:	2301      	movs	r3, #1
 8000e82:	71fb      	strb	r3, [r7, #7]
 8000e84:	e001      	b.n	8000e8a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e86:	f7ff fe57 	bl	8000b38 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	40022000 	.word	0x40022000

08000e98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ea4:	4b17      	ldr	r3, [pc, #92]	; (8000f04 <HAL_InitTick+0x6c>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d023      	beq.n	8000ef4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000eac:	4b16      	ldr	r3, [pc, #88]	; (8000f08 <HAL_InitTick+0x70>)
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	4b14      	ldr	r3, [pc, #80]	; (8000f04 <HAL_InitTick+0x6c>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f000 f96b 	bl	800119e <HAL_SYSTICK_Config>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d10f      	bne.n	8000eee <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2b0f      	cmp	r3, #15
 8000ed2:	d809      	bhi.n	8000ee8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	6879      	ldr	r1, [r7, #4]
 8000ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8000edc:	f000 f935 	bl	800114a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ee0:	4a0a      	ldr	r2, [pc, #40]	; (8000f0c <HAL_InitTick+0x74>)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6013      	str	r3, [r2, #0]
 8000ee6:	e007      	b.n	8000ef8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	73fb      	strb	r3, [r7, #15]
 8000eec:	e004      	b.n	8000ef8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	73fb      	strb	r3, [r7, #15]
 8000ef2:	e001      	b.n	8000ef8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3710      	adds	r7, #16
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20000008 	.word	0x20000008
 8000f08:	20000000 	.word	0x20000000
 8000f0c:	20000004 	.word	0x20000004

08000f10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f14:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <HAL_IncTick+0x20>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	461a      	mov	r2, r3
 8000f1a:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <HAL_IncTick+0x24>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4413      	add	r3, r2
 8000f20:	4a04      	ldr	r2, [pc, #16]	; (8000f34 <HAL_IncTick+0x24>)
 8000f22:	6013      	str	r3, [r2, #0]
}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	20000008 	.word	0x20000008
 8000f34:	2000011c 	.word	0x2000011c

08000f38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f3c:	4b03      	ldr	r3, [pc, #12]	; (8000f4c <HAL_GetTick+0x14>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	2000011c 	.word	0x2000011c

08000f50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f58:	f7ff ffee 	bl	8000f38 <HAL_GetTick>
 8000f5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f68:	d005      	beq.n	8000f76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000f6a:	4b09      	ldr	r3, [pc, #36]	; (8000f90 <HAL_Delay+0x40>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	461a      	mov	r2, r3
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	4413      	add	r3, r2
 8000f74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f76:	bf00      	nop
 8000f78:	f7ff ffde 	bl	8000f38 <HAL_GetTick>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	68fa      	ldr	r2, [r7, #12]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	d8f7      	bhi.n	8000f78 <HAL_Delay+0x28>
  {
  }
}
 8000f88:	bf00      	nop
 8000f8a:	3710      	adds	r7, #16
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	20000008 	.word	0x20000008

08000f94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	f003 0307 	and.w	r3, r3, #7
 8000fa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fa4:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000faa:	68ba      	ldr	r2, [r7, #8]
 8000fac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fc6:	4a04      	ldr	r2, [pc, #16]	; (8000fd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	60d3      	str	r3, [r2, #12]
}
 8000fcc:	bf00      	nop
 8000fce:	3714      	adds	r7, #20
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	e000ed00 	.word	0xe000ed00

08000fdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fe0:	4b04      	ldr	r3, [pc, #16]	; (8000ff4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	0a1b      	lsrs	r3, r3, #8
 8000fe6:	f003 0307 	and.w	r3, r3, #7
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	e000ed00 	.word	0xe000ed00

08000ff8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001006:	2b00      	cmp	r3, #0
 8001008:	db0b      	blt.n	8001022 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	f003 021f 	and.w	r2, r3, #31
 8001010:	4907      	ldr	r1, [pc, #28]	; (8001030 <__NVIC_EnableIRQ+0x38>)
 8001012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001016:	095b      	lsrs	r3, r3, #5
 8001018:	2001      	movs	r0, #1
 800101a:	fa00 f202 	lsl.w	r2, r0, r2
 800101e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001022:	bf00      	nop
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	e000e100 	.word	0xe000e100

08001034 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	6039      	str	r1, [r7, #0]
 800103e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001040:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001044:	2b00      	cmp	r3, #0
 8001046:	db0a      	blt.n	800105e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	b2da      	uxtb	r2, r3
 800104c:	490c      	ldr	r1, [pc, #48]	; (8001080 <__NVIC_SetPriority+0x4c>)
 800104e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001052:	0112      	lsls	r2, r2, #4
 8001054:	b2d2      	uxtb	r2, r2
 8001056:	440b      	add	r3, r1
 8001058:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800105c:	e00a      	b.n	8001074 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	b2da      	uxtb	r2, r3
 8001062:	4908      	ldr	r1, [pc, #32]	; (8001084 <__NVIC_SetPriority+0x50>)
 8001064:	79fb      	ldrb	r3, [r7, #7]
 8001066:	f003 030f 	and.w	r3, r3, #15
 800106a:	3b04      	subs	r3, #4
 800106c:	0112      	lsls	r2, r2, #4
 800106e:	b2d2      	uxtb	r2, r2
 8001070:	440b      	add	r3, r1
 8001072:	761a      	strb	r2, [r3, #24]
}
 8001074:	bf00      	nop
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	e000e100 	.word	0xe000e100
 8001084:	e000ed00 	.word	0xe000ed00

08001088 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001088:	b480      	push	{r7}
 800108a:	b089      	sub	sp, #36	; 0x24
 800108c:	af00      	add	r7, sp, #0
 800108e:	60f8      	str	r0, [r7, #12]
 8001090:	60b9      	str	r1, [r7, #8]
 8001092:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	f003 0307 	and.w	r3, r3, #7
 800109a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	f1c3 0307 	rsb	r3, r3, #7
 80010a2:	2b04      	cmp	r3, #4
 80010a4:	bf28      	it	cs
 80010a6:	2304      	movcs	r3, #4
 80010a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	3304      	adds	r3, #4
 80010ae:	2b06      	cmp	r3, #6
 80010b0:	d902      	bls.n	80010b8 <NVIC_EncodePriority+0x30>
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	3b03      	subs	r3, #3
 80010b6:	e000      	b.n	80010ba <NVIC_EncodePriority+0x32>
 80010b8:	2300      	movs	r3, #0
 80010ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010bc:	f04f 32ff 	mov.w	r2, #4294967295
 80010c0:	69bb      	ldr	r3, [r7, #24]
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	43da      	mvns	r2, r3
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	401a      	ands	r2, r3
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010d0:	f04f 31ff 	mov.w	r1, #4294967295
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	fa01 f303 	lsl.w	r3, r1, r3
 80010da:	43d9      	mvns	r1, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e0:	4313      	orrs	r3, r2
         );
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3724      	adds	r7, #36	; 0x24
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
	...

080010f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	3b01      	subs	r3, #1
 80010fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001100:	d301      	bcc.n	8001106 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001102:	2301      	movs	r3, #1
 8001104:	e00f      	b.n	8001126 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001106:	4a0a      	ldr	r2, [pc, #40]	; (8001130 <SysTick_Config+0x40>)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	3b01      	subs	r3, #1
 800110c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800110e:	210f      	movs	r1, #15
 8001110:	f04f 30ff 	mov.w	r0, #4294967295
 8001114:	f7ff ff8e 	bl	8001034 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001118:	4b05      	ldr	r3, [pc, #20]	; (8001130 <SysTick_Config+0x40>)
 800111a:	2200      	movs	r2, #0
 800111c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800111e:	4b04      	ldr	r3, [pc, #16]	; (8001130 <SysTick_Config+0x40>)
 8001120:	2207      	movs	r2, #7
 8001122:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001124:	2300      	movs	r3, #0
}
 8001126:	4618      	mov	r0, r3
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	e000e010 	.word	0xe000e010

08001134 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f7ff ff29 	bl	8000f94 <__NVIC_SetPriorityGrouping>
}
 8001142:	bf00      	nop
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b086      	sub	sp, #24
 800114e:	af00      	add	r7, sp, #0
 8001150:	4603      	mov	r3, r0
 8001152:	60b9      	str	r1, [r7, #8]
 8001154:	607a      	str	r2, [r7, #4]
 8001156:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001158:	2300      	movs	r3, #0
 800115a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800115c:	f7ff ff3e 	bl	8000fdc <__NVIC_GetPriorityGrouping>
 8001160:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001162:	687a      	ldr	r2, [r7, #4]
 8001164:	68b9      	ldr	r1, [r7, #8]
 8001166:	6978      	ldr	r0, [r7, #20]
 8001168:	f7ff ff8e 	bl	8001088 <NVIC_EncodePriority>
 800116c:	4602      	mov	r2, r0
 800116e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001172:	4611      	mov	r1, r2
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff ff5d 	bl	8001034 <__NVIC_SetPriority>
}
 800117a:	bf00      	nop
 800117c:	3718      	adds	r7, #24
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}

08001182 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001182:	b580      	push	{r7, lr}
 8001184:	b082      	sub	sp, #8
 8001186:	af00      	add	r7, sp, #0
 8001188:	4603      	mov	r3, r0
 800118a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800118c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff ff31 	bl	8000ff8 <__NVIC_EnableIRQ>
}
 8001196:	bf00      	nop
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}

0800119e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800119e:	b580      	push	{r7, lr}
 80011a0:	b082      	sub	sp, #8
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f7ff ffa2 	bl	80010f0 <SysTick_Config>
 80011ac:	4603      	mov	r3, r0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b084      	sub	sp, #16
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011be:	2300      	movs	r3, #0
 80011c0:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	2b02      	cmp	r3, #2
 80011cc:	d005      	beq.n	80011da <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2204      	movs	r2, #4
 80011d2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80011d4:	2301      	movs	r3, #1
 80011d6:	73fb      	strb	r3, [r7, #15]
 80011d8:	e029      	b.n	800122e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f022 020e 	bic.w	r2, r2, #14
 80011e8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f022 0201 	bic.w	r2, r2, #1
 80011f8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fe:	f003 021c 	and.w	r2, r3, #28
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001206:	2101      	movs	r1, #1
 8001208:	fa01 f202 	lsl.w	r2, r1, r2
 800120c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2201      	movs	r2, #1
 8001212:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2200      	movs	r2, #0
 800121a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001222:	2b00      	cmp	r3, #0
 8001224:	d003      	beq.n	800122e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	4798      	blx	r3
    }
  }
  return status;
 800122e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001230:	4618      	mov	r0, r3
 8001232:	3710      	adds	r7, #16
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001238:	b480      	push	{r7}
 800123a:	b087      	sub	sp, #28
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001242:	2300      	movs	r3, #0
 8001244:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001246:	e17f      	b.n	8001548 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	2101      	movs	r1, #1
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	fa01 f303 	lsl.w	r3, r1, r3
 8001254:	4013      	ands	r3, r2
 8001256:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	2b00      	cmp	r3, #0
 800125c:	f000 8171 	beq.w	8001542 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	2b01      	cmp	r3, #1
 8001266:	d00b      	beq.n	8001280 <HAL_GPIO_Init+0x48>
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	2b02      	cmp	r3, #2
 800126e:	d007      	beq.n	8001280 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001274:	2b11      	cmp	r3, #17
 8001276:	d003      	beq.n	8001280 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	2b12      	cmp	r3, #18
 800127e:	d130      	bne.n	80012e2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	2203      	movs	r2, #3
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	43db      	mvns	r3, r3
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	4013      	ands	r3, r2
 8001296:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	68da      	ldr	r2, [r3, #12]
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	693a      	ldr	r2, [r7, #16]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	693a      	ldr	r2, [r7, #16]
 80012ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012b6:	2201      	movs	r2, #1
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	43db      	mvns	r3, r3
 80012c0:	693a      	ldr	r2, [r7, #16]
 80012c2:	4013      	ands	r3, r2
 80012c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	091b      	lsrs	r3, r3, #4
 80012cc:	f003 0201 	and.w	r2, r3, #1
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	fa02 f303 	lsl.w	r3, r2, r3
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	4313      	orrs	r3, r2
 80012da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	693a      	ldr	r2, [r7, #16]
 80012e0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f003 0303 	and.w	r3, r3, #3
 80012ea:	2b03      	cmp	r3, #3
 80012ec:	d118      	bne.n	8001320 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80012f4:	2201      	movs	r2, #1
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	43db      	mvns	r3, r3
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	4013      	ands	r3, r2
 8001302:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	08db      	lsrs	r3, r3, #3
 800130a:	f003 0201 	and.w	r2, r3, #1
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	693a      	ldr	r2, [r7, #16]
 8001316:	4313      	orrs	r3, r2
 8001318:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	693a      	ldr	r2, [r7, #16]
 800131e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	2203      	movs	r2, #3
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	43db      	mvns	r3, r3
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	4013      	ands	r3, r2
 8001336:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	689a      	ldr	r2, [r3, #8]
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	fa02 f303 	lsl.w	r3, r2, r3
 8001344:	693a      	ldr	r2, [r7, #16]
 8001346:	4313      	orrs	r3, r2
 8001348:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	693a      	ldr	r2, [r7, #16]
 800134e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	2b02      	cmp	r3, #2
 8001356:	d003      	beq.n	8001360 <HAL_GPIO_Init+0x128>
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	2b12      	cmp	r3, #18
 800135e:	d123      	bne.n	80013a8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	08da      	lsrs	r2, r3, #3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	3208      	adds	r2, #8
 8001368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800136c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	f003 0307 	and.w	r3, r3, #7
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	220f      	movs	r2, #15
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	43db      	mvns	r3, r3
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	4013      	ands	r3, r2
 8001382:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	691a      	ldr	r2, [r3, #16]
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	f003 0307 	and.w	r3, r3, #7
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	4313      	orrs	r3, r2
 8001398:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	08da      	lsrs	r2, r3, #3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	3208      	adds	r2, #8
 80013a2:	6939      	ldr	r1, [r7, #16]
 80013a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	2203      	movs	r2, #3
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	43db      	mvns	r3, r3
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	4013      	ands	r3, r2
 80013be:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f003 0203 	and.w	r2, r3, #3
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	693a      	ldr	r2, [r7, #16]
 80013da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	f000 80ac 	beq.w	8001542 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ea:	4b5e      	ldr	r3, [pc, #376]	; (8001564 <HAL_GPIO_Init+0x32c>)
 80013ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013ee:	4a5d      	ldr	r2, [pc, #372]	; (8001564 <HAL_GPIO_Init+0x32c>)
 80013f0:	f043 0301 	orr.w	r3, r3, #1
 80013f4:	6613      	str	r3, [r2, #96]	; 0x60
 80013f6:	4b5b      	ldr	r3, [pc, #364]	; (8001564 <HAL_GPIO_Init+0x32c>)
 80013f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013fa:	f003 0301 	and.w	r3, r3, #1
 80013fe:	60bb      	str	r3, [r7, #8]
 8001400:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001402:	4a59      	ldr	r2, [pc, #356]	; (8001568 <HAL_GPIO_Init+0x330>)
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	089b      	lsrs	r3, r3, #2
 8001408:	3302      	adds	r3, #2
 800140a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800140e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	f003 0303 	and.w	r3, r3, #3
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	220f      	movs	r2, #15
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	43db      	mvns	r3, r3
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	4013      	ands	r3, r2
 8001424:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800142c:	d025      	beq.n	800147a <HAL_GPIO_Init+0x242>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a4e      	ldr	r2, [pc, #312]	; (800156c <HAL_GPIO_Init+0x334>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d01f      	beq.n	8001476 <HAL_GPIO_Init+0x23e>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a4d      	ldr	r2, [pc, #308]	; (8001570 <HAL_GPIO_Init+0x338>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d019      	beq.n	8001472 <HAL_GPIO_Init+0x23a>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a4c      	ldr	r2, [pc, #304]	; (8001574 <HAL_GPIO_Init+0x33c>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d013      	beq.n	800146e <HAL_GPIO_Init+0x236>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a4b      	ldr	r2, [pc, #300]	; (8001578 <HAL_GPIO_Init+0x340>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d00d      	beq.n	800146a <HAL_GPIO_Init+0x232>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a4a      	ldr	r2, [pc, #296]	; (800157c <HAL_GPIO_Init+0x344>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d007      	beq.n	8001466 <HAL_GPIO_Init+0x22e>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a49      	ldr	r2, [pc, #292]	; (8001580 <HAL_GPIO_Init+0x348>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d101      	bne.n	8001462 <HAL_GPIO_Init+0x22a>
 800145e:	2306      	movs	r3, #6
 8001460:	e00c      	b.n	800147c <HAL_GPIO_Init+0x244>
 8001462:	2307      	movs	r3, #7
 8001464:	e00a      	b.n	800147c <HAL_GPIO_Init+0x244>
 8001466:	2305      	movs	r3, #5
 8001468:	e008      	b.n	800147c <HAL_GPIO_Init+0x244>
 800146a:	2304      	movs	r3, #4
 800146c:	e006      	b.n	800147c <HAL_GPIO_Init+0x244>
 800146e:	2303      	movs	r3, #3
 8001470:	e004      	b.n	800147c <HAL_GPIO_Init+0x244>
 8001472:	2302      	movs	r3, #2
 8001474:	e002      	b.n	800147c <HAL_GPIO_Init+0x244>
 8001476:	2301      	movs	r3, #1
 8001478:	e000      	b.n	800147c <HAL_GPIO_Init+0x244>
 800147a:	2300      	movs	r3, #0
 800147c:	697a      	ldr	r2, [r7, #20]
 800147e:	f002 0203 	and.w	r2, r2, #3
 8001482:	0092      	lsls	r2, r2, #2
 8001484:	4093      	lsls	r3, r2
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	4313      	orrs	r3, r2
 800148a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800148c:	4936      	ldr	r1, [pc, #216]	; (8001568 <HAL_GPIO_Init+0x330>)
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	089b      	lsrs	r3, r3, #2
 8001492:	3302      	adds	r3, #2
 8001494:	693a      	ldr	r2, [r7, #16]
 8001496:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800149a:	4b3a      	ldr	r3, [pc, #232]	; (8001584 <HAL_GPIO_Init+0x34c>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	43db      	mvns	r3, r3
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	4013      	ands	r3, r2
 80014a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d003      	beq.n	80014be <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014be:	4a31      	ldr	r2, [pc, #196]	; (8001584 <HAL_GPIO_Init+0x34c>)
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80014c4:	4b2f      	ldr	r3, [pc, #188]	; (8001584 <HAL_GPIO_Init+0x34c>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	43db      	mvns	r3, r3
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	4013      	ands	r3, r2
 80014d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d003      	beq.n	80014e8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80014e0:	693a      	ldr	r2, [r7, #16]
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80014e8:	4a26      	ldr	r2, [pc, #152]	; (8001584 <HAL_GPIO_Init+0x34c>)
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014ee:	4b25      	ldr	r3, [pc, #148]	; (8001584 <HAL_GPIO_Init+0x34c>)
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	43db      	mvns	r3, r3
 80014f8:	693a      	ldr	r2, [r7, #16]
 80014fa:	4013      	ands	r3, r2
 80014fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d003      	beq.n	8001512 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	4313      	orrs	r3, r2
 8001510:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001512:	4a1c      	ldr	r2, [pc, #112]	; (8001584 <HAL_GPIO_Init+0x34c>)
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001518:	4b1a      	ldr	r3, [pc, #104]	; (8001584 <HAL_GPIO_Init+0x34c>)
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	43db      	mvns	r3, r3
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	4013      	ands	r3, r2
 8001526:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001530:	2b00      	cmp	r3, #0
 8001532:	d003      	beq.n	800153c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001534:	693a      	ldr	r2, [r7, #16]
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	4313      	orrs	r3, r2
 800153a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800153c:	4a11      	ldr	r2, [pc, #68]	; (8001584 <HAL_GPIO_Init+0x34c>)
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	3301      	adds	r3, #1
 8001546:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	fa22 f303 	lsr.w	r3, r2, r3
 8001552:	2b00      	cmp	r3, #0
 8001554:	f47f ae78 	bne.w	8001248 <HAL_GPIO_Init+0x10>
  }
}
 8001558:	bf00      	nop
 800155a:	371c      	adds	r7, #28
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr
 8001564:	40021000 	.word	0x40021000
 8001568:	40010000 	.word	0x40010000
 800156c:	48000400 	.word	0x48000400
 8001570:	48000800 	.word	0x48000800
 8001574:	48000c00 	.word	0x48000c00
 8001578:	48001000 	.word	0x48001000
 800157c:	48001400 	.word	0x48001400
 8001580:	48001800 	.word	0x48001800
 8001584:	40010400 	.word	0x40010400

08001588 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	460b      	mov	r3, r1
 8001592:	807b      	strh	r3, [r7, #2]
 8001594:	4613      	mov	r3, r2
 8001596:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001598:	787b      	ldrb	r3, [r7, #1]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d003      	beq.n	80015a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800159e:	887a      	ldrh	r2, [r7, #2]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015a4:	e002      	b.n	80015ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015a6:	887a      	ldrh	r2, [r7, #2]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015ac:	bf00      	nop
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80015bc:	4b04      	ldr	r3, [pc, #16]	; (80015d0 <HAL_PWREx_GetVoltageRange+0x18>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	40007000 	.word	0x40007000

080015d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015e2:	d130      	bne.n	8001646 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80015e4:	4b23      	ldr	r3, [pc, #140]	; (8001674 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015f0:	d038      	beq.n	8001664 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80015f2:	4b20      	ldr	r3, [pc, #128]	; (8001674 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015fa:	4a1e      	ldr	r2, [pc, #120]	; (8001674 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001600:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001602:	4b1d      	ldr	r3, [pc, #116]	; (8001678 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	2232      	movs	r2, #50	; 0x32
 8001608:	fb02 f303 	mul.w	r3, r2, r3
 800160c:	4a1b      	ldr	r2, [pc, #108]	; (800167c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800160e:	fba2 2303 	umull	r2, r3, r2, r3
 8001612:	0c9b      	lsrs	r3, r3, #18
 8001614:	3301      	adds	r3, #1
 8001616:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001618:	e002      	b.n	8001620 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	3b01      	subs	r3, #1
 800161e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001620:	4b14      	ldr	r3, [pc, #80]	; (8001674 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001622:	695b      	ldr	r3, [r3, #20]
 8001624:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001628:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800162c:	d102      	bne.n	8001634 <HAL_PWREx_ControlVoltageScaling+0x60>
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d1f2      	bne.n	800161a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001634:	4b0f      	ldr	r3, [pc, #60]	; (8001674 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001636:	695b      	ldr	r3, [r3, #20]
 8001638:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800163c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001640:	d110      	bne.n	8001664 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e00f      	b.n	8001666 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001646:	4b0b      	ldr	r3, [pc, #44]	; (8001674 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800164e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001652:	d007      	beq.n	8001664 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001654:	4b07      	ldr	r3, [pc, #28]	; (8001674 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800165c:	4a05      	ldr	r2, [pc, #20]	; (8001674 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800165e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001662:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	3714      	adds	r7, #20
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	40007000 	.word	0x40007000
 8001678:	20000000 	.word	0x20000000
 800167c:	431bde83 	.word	0x431bde83

08001680 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b088      	sub	sp, #32
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d101      	bne.n	8001692 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e3d4      	b.n	8001e3c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001692:	4ba1      	ldr	r3, [pc, #644]	; (8001918 <HAL_RCC_OscConfig+0x298>)
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	f003 030c 	and.w	r3, r3, #12
 800169a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800169c:	4b9e      	ldr	r3, [pc, #632]	; (8001918 <HAL_RCC_OscConfig+0x298>)
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	f003 0303 	and.w	r3, r3, #3
 80016a4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0310 	and.w	r3, r3, #16
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	f000 80e4 	beq.w	800187c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d007      	beq.n	80016ca <HAL_RCC_OscConfig+0x4a>
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	2b0c      	cmp	r3, #12
 80016be:	f040 808b 	bne.w	80017d8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	f040 8087 	bne.w	80017d8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016ca:	4b93      	ldr	r3, [pc, #588]	; (8001918 <HAL_RCC_OscConfig+0x298>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d005      	beq.n	80016e2 <HAL_RCC_OscConfig+0x62>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	699b      	ldr	r3, [r3, #24]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d101      	bne.n	80016e2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e3ac      	b.n	8001e3c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6a1a      	ldr	r2, [r3, #32]
 80016e6:	4b8c      	ldr	r3, [pc, #560]	; (8001918 <HAL_RCC_OscConfig+0x298>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0308 	and.w	r3, r3, #8
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d004      	beq.n	80016fc <HAL_RCC_OscConfig+0x7c>
 80016f2:	4b89      	ldr	r3, [pc, #548]	; (8001918 <HAL_RCC_OscConfig+0x298>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016fa:	e005      	b.n	8001708 <HAL_RCC_OscConfig+0x88>
 80016fc:	4b86      	ldr	r3, [pc, #536]	; (8001918 <HAL_RCC_OscConfig+0x298>)
 80016fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001702:	091b      	lsrs	r3, r3, #4
 8001704:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001708:	4293      	cmp	r3, r2
 800170a:	d223      	bcs.n	8001754 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6a1b      	ldr	r3, [r3, #32]
 8001710:	4618      	mov	r0, r3
 8001712:	f000 fd3f 	bl	8002194 <RCC_SetFlashLatencyFromMSIRange>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e38d      	b.n	8001e3c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001720:	4b7d      	ldr	r3, [pc, #500]	; (8001918 <HAL_RCC_OscConfig+0x298>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a7c      	ldr	r2, [pc, #496]	; (8001918 <HAL_RCC_OscConfig+0x298>)
 8001726:	f043 0308 	orr.w	r3, r3, #8
 800172a:	6013      	str	r3, [r2, #0]
 800172c:	4b7a      	ldr	r3, [pc, #488]	; (8001918 <HAL_RCC_OscConfig+0x298>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6a1b      	ldr	r3, [r3, #32]
 8001738:	4977      	ldr	r1, [pc, #476]	; (8001918 <HAL_RCC_OscConfig+0x298>)
 800173a:	4313      	orrs	r3, r2
 800173c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800173e:	4b76      	ldr	r3, [pc, #472]	; (8001918 <HAL_RCC_OscConfig+0x298>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	69db      	ldr	r3, [r3, #28]
 800174a:	021b      	lsls	r3, r3, #8
 800174c:	4972      	ldr	r1, [pc, #456]	; (8001918 <HAL_RCC_OscConfig+0x298>)
 800174e:	4313      	orrs	r3, r2
 8001750:	604b      	str	r3, [r1, #4]
 8001752:	e025      	b.n	80017a0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001754:	4b70      	ldr	r3, [pc, #448]	; (8001918 <HAL_RCC_OscConfig+0x298>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a6f      	ldr	r2, [pc, #444]	; (8001918 <HAL_RCC_OscConfig+0x298>)
 800175a:	f043 0308 	orr.w	r3, r3, #8
 800175e:	6013      	str	r3, [r2, #0]
 8001760:	4b6d      	ldr	r3, [pc, #436]	; (8001918 <HAL_RCC_OscConfig+0x298>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6a1b      	ldr	r3, [r3, #32]
 800176c:	496a      	ldr	r1, [pc, #424]	; (8001918 <HAL_RCC_OscConfig+0x298>)
 800176e:	4313      	orrs	r3, r2
 8001770:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001772:	4b69      	ldr	r3, [pc, #420]	; (8001918 <HAL_RCC_OscConfig+0x298>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	69db      	ldr	r3, [r3, #28]
 800177e:	021b      	lsls	r3, r3, #8
 8001780:	4965      	ldr	r1, [pc, #404]	; (8001918 <HAL_RCC_OscConfig+0x298>)
 8001782:	4313      	orrs	r3, r2
 8001784:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d109      	bne.n	80017a0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6a1b      	ldr	r3, [r3, #32]
 8001790:	4618      	mov	r0, r3
 8001792:	f000 fcff 	bl	8002194 <RCC_SetFlashLatencyFromMSIRange>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	e34d      	b.n	8001e3c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80017a0:	f000 fc36 	bl	8002010 <HAL_RCC_GetSysClockFreq>
 80017a4:	4601      	mov	r1, r0
 80017a6:	4b5c      	ldr	r3, [pc, #368]	; (8001918 <HAL_RCC_OscConfig+0x298>)
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	091b      	lsrs	r3, r3, #4
 80017ac:	f003 030f 	and.w	r3, r3, #15
 80017b0:	4a5a      	ldr	r2, [pc, #360]	; (800191c <HAL_RCC_OscConfig+0x29c>)
 80017b2:	5cd3      	ldrb	r3, [r2, r3]
 80017b4:	f003 031f 	and.w	r3, r3, #31
 80017b8:	fa21 f303 	lsr.w	r3, r1, r3
 80017bc:	4a58      	ldr	r2, [pc, #352]	; (8001920 <HAL_RCC_OscConfig+0x2a0>)
 80017be:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80017c0:	4b58      	ldr	r3, [pc, #352]	; (8001924 <HAL_RCC_OscConfig+0x2a4>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff fb67 	bl	8000e98 <HAL_InitTick>
 80017ca:	4603      	mov	r3, r0
 80017cc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80017ce:	7bfb      	ldrb	r3, [r7, #15]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d052      	beq.n	800187a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80017d4:	7bfb      	ldrb	r3, [r7, #15]
 80017d6:	e331      	b.n	8001e3c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d032      	beq.n	8001846 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80017e0:	4b4d      	ldr	r3, [pc, #308]	; (8001918 <HAL_RCC_OscConfig+0x298>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a4c      	ldr	r2, [pc, #304]	; (8001918 <HAL_RCC_OscConfig+0x298>)
 80017e6:	f043 0301 	orr.w	r3, r3, #1
 80017ea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017ec:	f7ff fba4 	bl	8000f38 <HAL_GetTick>
 80017f0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017f2:	e008      	b.n	8001806 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017f4:	f7ff fba0 	bl	8000f38 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e31a      	b.n	8001e3c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001806:	4b44      	ldr	r3, [pc, #272]	; (8001918 <HAL_RCC_OscConfig+0x298>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	2b00      	cmp	r3, #0
 8001810:	d0f0      	beq.n	80017f4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001812:	4b41      	ldr	r3, [pc, #260]	; (8001918 <HAL_RCC_OscConfig+0x298>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a40      	ldr	r2, [pc, #256]	; (8001918 <HAL_RCC_OscConfig+0x298>)
 8001818:	f043 0308 	orr.w	r3, r3, #8
 800181c:	6013      	str	r3, [r2, #0]
 800181e:	4b3e      	ldr	r3, [pc, #248]	; (8001918 <HAL_RCC_OscConfig+0x298>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6a1b      	ldr	r3, [r3, #32]
 800182a:	493b      	ldr	r1, [pc, #236]	; (8001918 <HAL_RCC_OscConfig+0x298>)
 800182c:	4313      	orrs	r3, r2
 800182e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001830:	4b39      	ldr	r3, [pc, #228]	; (8001918 <HAL_RCC_OscConfig+0x298>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	69db      	ldr	r3, [r3, #28]
 800183c:	021b      	lsls	r3, r3, #8
 800183e:	4936      	ldr	r1, [pc, #216]	; (8001918 <HAL_RCC_OscConfig+0x298>)
 8001840:	4313      	orrs	r3, r2
 8001842:	604b      	str	r3, [r1, #4]
 8001844:	e01a      	b.n	800187c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001846:	4b34      	ldr	r3, [pc, #208]	; (8001918 <HAL_RCC_OscConfig+0x298>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a33      	ldr	r2, [pc, #204]	; (8001918 <HAL_RCC_OscConfig+0x298>)
 800184c:	f023 0301 	bic.w	r3, r3, #1
 8001850:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001852:	f7ff fb71 	bl	8000f38 <HAL_GetTick>
 8001856:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001858:	e008      	b.n	800186c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800185a:	f7ff fb6d 	bl	8000f38 <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	2b02      	cmp	r3, #2
 8001866:	d901      	bls.n	800186c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e2e7      	b.n	8001e3c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800186c:	4b2a      	ldr	r3, [pc, #168]	; (8001918 <HAL_RCC_OscConfig+0x298>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0302 	and.w	r3, r3, #2
 8001874:	2b00      	cmp	r3, #0
 8001876:	d1f0      	bne.n	800185a <HAL_RCC_OscConfig+0x1da>
 8001878:	e000      	b.n	800187c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800187a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0301 	and.w	r3, r3, #1
 8001884:	2b00      	cmp	r3, #0
 8001886:	d074      	beq.n	8001972 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001888:	69bb      	ldr	r3, [r7, #24]
 800188a:	2b08      	cmp	r3, #8
 800188c:	d005      	beq.n	800189a <HAL_RCC_OscConfig+0x21a>
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	2b0c      	cmp	r3, #12
 8001892:	d10e      	bne.n	80018b2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	2b03      	cmp	r3, #3
 8001898:	d10b      	bne.n	80018b2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800189a:	4b1f      	ldr	r3, [pc, #124]	; (8001918 <HAL_RCC_OscConfig+0x298>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d064      	beq.n	8001970 <HAL_RCC_OscConfig+0x2f0>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d160      	bne.n	8001970 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e2c4      	b.n	8001e3c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018ba:	d106      	bne.n	80018ca <HAL_RCC_OscConfig+0x24a>
 80018bc:	4b16      	ldr	r3, [pc, #88]	; (8001918 <HAL_RCC_OscConfig+0x298>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a15      	ldr	r2, [pc, #84]	; (8001918 <HAL_RCC_OscConfig+0x298>)
 80018c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018c6:	6013      	str	r3, [r2, #0]
 80018c8:	e01d      	b.n	8001906 <HAL_RCC_OscConfig+0x286>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018d2:	d10c      	bne.n	80018ee <HAL_RCC_OscConfig+0x26e>
 80018d4:	4b10      	ldr	r3, [pc, #64]	; (8001918 <HAL_RCC_OscConfig+0x298>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a0f      	ldr	r2, [pc, #60]	; (8001918 <HAL_RCC_OscConfig+0x298>)
 80018da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018de:	6013      	str	r3, [r2, #0]
 80018e0:	4b0d      	ldr	r3, [pc, #52]	; (8001918 <HAL_RCC_OscConfig+0x298>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a0c      	ldr	r2, [pc, #48]	; (8001918 <HAL_RCC_OscConfig+0x298>)
 80018e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018ea:	6013      	str	r3, [r2, #0]
 80018ec:	e00b      	b.n	8001906 <HAL_RCC_OscConfig+0x286>
 80018ee:	4b0a      	ldr	r3, [pc, #40]	; (8001918 <HAL_RCC_OscConfig+0x298>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a09      	ldr	r2, [pc, #36]	; (8001918 <HAL_RCC_OscConfig+0x298>)
 80018f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018f8:	6013      	str	r3, [r2, #0]
 80018fa:	4b07      	ldr	r3, [pc, #28]	; (8001918 <HAL_RCC_OscConfig+0x298>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a06      	ldr	r2, [pc, #24]	; (8001918 <HAL_RCC_OscConfig+0x298>)
 8001900:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001904:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d01c      	beq.n	8001948 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800190e:	f7ff fb13 	bl	8000f38 <HAL_GetTick>
 8001912:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001914:	e011      	b.n	800193a <HAL_RCC_OscConfig+0x2ba>
 8001916:	bf00      	nop
 8001918:	40021000 	.word	0x40021000
 800191c:	08004710 	.word	0x08004710
 8001920:	20000000 	.word	0x20000000
 8001924:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001928:	f7ff fb06 	bl	8000f38 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b64      	cmp	r3, #100	; 0x64
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e280      	b.n	8001e3c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800193a:	4baf      	ldr	r3, [pc, #700]	; (8001bf8 <HAL_RCC_OscConfig+0x578>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d0f0      	beq.n	8001928 <HAL_RCC_OscConfig+0x2a8>
 8001946:	e014      	b.n	8001972 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001948:	f7ff faf6 	bl	8000f38 <HAL_GetTick>
 800194c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800194e:	e008      	b.n	8001962 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001950:	f7ff faf2 	bl	8000f38 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	2b64      	cmp	r3, #100	; 0x64
 800195c:	d901      	bls.n	8001962 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e26c      	b.n	8001e3c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001962:	4ba5      	ldr	r3, [pc, #660]	; (8001bf8 <HAL_RCC_OscConfig+0x578>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d1f0      	bne.n	8001950 <HAL_RCC_OscConfig+0x2d0>
 800196e:	e000      	b.n	8001972 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001970:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	2b00      	cmp	r3, #0
 800197c:	d060      	beq.n	8001a40 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	2b04      	cmp	r3, #4
 8001982:	d005      	beq.n	8001990 <HAL_RCC_OscConfig+0x310>
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	2b0c      	cmp	r3, #12
 8001988:	d119      	bne.n	80019be <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	2b02      	cmp	r3, #2
 800198e:	d116      	bne.n	80019be <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001990:	4b99      	ldr	r3, [pc, #612]	; (8001bf8 <HAL_RCC_OscConfig+0x578>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001998:	2b00      	cmp	r3, #0
 800199a:	d005      	beq.n	80019a8 <HAL_RCC_OscConfig+0x328>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d101      	bne.n	80019a8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e249      	b.n	8001e3c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019a8:	4b93      	ldr	r3, [pc, #588]	; (8001bf8 <HAL_RCC_OscConfig+0x578>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	691b      	ldr	r3, [r3, #16]
 80019b4:	061b      	lsls	r3, r3, #24
 80019b6:	4990      	ldr	r1, [pc, #576]	; (8001bf8 <HAL_RCC_OscConfig+0x578>)
 80019b8:	4313      	orrs	r3, r2
 80019ba:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019bc:	e040      	b.n	8001a40 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d023      	beq.n	8001a0e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019c6:	4b8c      	ldr	r3, [pc, #560]	; (8001bf8 <HAL_RCC_OscConfig+0x578>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a8b      	ldr	r2, [pc, #556]	; (8001bf8 <HAL_RCC_OscConfig+0x578>)
 80019cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d2:	f7ff fab1 	bl	8000f38 <HAL_GetTick>
 80019d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019d8:	e008      	b.n	80019ec <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019da:	f7ff faad 	bl	8000f38 <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d901      	bls.n	80019ec <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80019e8:	2303      	movs	r3, #3
 80019ea:	e227      	b.n	8001e3c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019ec:	4b82      	ldr	r3, [pc, #520]	; (8001bf8 <HAL_RCC_OscConfig+0x578>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d0f0      	beq.n	80019da <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019f8:	4b7f      	ldr	r3, [pc, #508]	; (8001bf8 <HAL_RCC_OscConfig+0x578>)
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	691b      	ldr	r3, [r3, #16]
 8001a04:	061b      	lsls	r3, r3, #24
 8001a06:	497c      	ldr	r1, [pc, #496]	; (8001bf8 <HAL_RCC_OscConfig+0x578>)
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	604b      	str	r3, [r1, #4]
 8001a0c:	e018      	b.n	8001a40 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a0e:	4b7a      	ldr	r3, [pc, #488]	; (8001bf8 <HAL_RCC_OscConfig+0x578>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a79      	ldr	r2, [pc, #484]	; (8001bf8 <HAL_RCC_OscConfig+0x578>)
 8001a14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a1a:	f7ff fa8d 	bl	8000f38 <HAL_GetTick>
 8001a1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a20:	e008      	b.n	8001a34 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a22:	f7ff fa89 	bl	8000f38 <HAL_GetTick>
 8001a26:	4602      	mov	r2, r0
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d901      	bls.n	8001a34 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e203      	b.n	8001e3c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a34:	4b70      	ldr	r3, [pc, #448]	; (8001bf8 <HAL_RCC_OscConfig+0x578>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d1f0      	bne.n	8001a22 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0308 	and.w	r3, r3, #8
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d03c      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	695b      	ldr	r3, [r3, #20]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d01c      	beq.n	8001a8e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a54:	4b68      	ldr	r3, [pc, #416]	; (8001bf8 <HAL_RCC_OscConfig+0x578>)
 8001a56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a5a:	4a67      	ldr	r2, [pc, #412]	; (8001bf8 <HAL_RCC_OscConfig+0x578>)
 8001a5c:	f043 0301 	orr.w	r3, r3, #1
 8001a60:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a64:	f7ff fa68 	bl	8000f38 <HAL_GetTick>
 8001a68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a6a:	e008      	b.n	8001a7e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a6c:	f7ff fa64 	bl	8000f38 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e1de      	b.n	8001e3c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a7e:	4b5e      	ldr	r3, [pc, #376]	; (8001bf8 <HAL_RCC_OscConfig+0x578>)
 8001a80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a84:	f003 0302 	and.w	r3, r3, #2
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d0ef      	beq.n	8001a6c <HAL_RCC_OscConfig+0x3ec>
 8001a8c:	e01b      	b.n	8001ac6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a8e:	4b5a      	ldr	r3, [pc, #360]	; (8001bf8 <HAL_RCC_OscConfig+0x578>)
 8001a90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a94:	4a58      	ldr	r2, [pc, #352]	; (8001bf8 <HAL_RCC_OscConfig+0x578>)
 8001a96:	f023 0301 	bic.w	r3, r3, #1
 8001a9a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a9e:	f7ff fa4b 	bl	8000f38 <HAL_GetTick>
 8001aa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001aa4:	e008      	b.n	8001ab8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aa6:	f7ff fa47 	bl	8000f38 <HAL_GetTick>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d901      	bls.n	8001ab8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	e1c1      	b.n	8001e3c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ab8:	4b4f      	ldr	r3, [pc, #316]	; (8001bf8 <HAL_RCC_OscConfig+0x578>)
 8001aba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d1ef      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0304 	and.w	r3, r3, #4
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	f000 80a6 	beq.w	8001c20 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ad8:	4b47      	ldr	r3, [pc, #284]	; (8001bf8 <HAL_RCC_OscConfig+0x578>)
 8001ada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001adc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d10d      	bne.n	8001b00 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ae4:	4b44      	ldr	r3, [pc, #272]	; (8001bf8 <HAL_RCC_OscConfig+0x578>)
 8001ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae8:	4a43      	ldr	r2, [pc, #268]	; (8001bf8 <HAL_RCC_OscConfig+0x578>)
 8001aea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aee:	6593      	str	r3, [r2, #88]	; 0x58
 8001af0:	4b41      	ldr	r3, [pc, #260]	; (8001bf8 <HAL_RCC_OscConfig+0x578>)
 8001af2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af8:	60bb      	str	r3, [r7, #8]
 8001afa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001afc:	2301      	movs	r3, #1
 8001afe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b00:	4b3e      	ldr	r3, [pc, #248]	; (8001bfc <HAL_RCC_OscConfig+0x57c>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d118      	bne.n	8001b3e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b0c:	4b3b      	ldr	r3, [pc, #236]	; (8001bfc <HAL_RCC_OscConfig+0x57c>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a3a      	ldr	r2, [pc, #232]	; (8001bfc <HAL_RCC_OscConfig+0x57c>)
 8001b12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b16:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b18:	f7ff fa0e 	bl	8000f38 <HAL_GetTick>
 8001b1c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b1e:	e008      	b.n	8001b32 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b20:	f7ff fa0a 	bl	8000f38 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e184      	b.n	8001e3c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b32:	4b32      	ldr	r3, [pc, #200]	; (8001bfc <HAL_RCC_OscConfig+0x57c>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d0f0      	beq.n	8001b20 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d108      	bne.n	8001b58 <HAL_RCC_OscConfig+0x4d8>
 8001b46:	4b2c      	ldr	r3, [pc, #176]	; (8001bf8 <HAL_RCC_OscConfig+0x578>)
 8001b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b4c:	4a2a      	ldr	r2, [pc, #168]	; (8001bf8 <HAL_RCC_OscConfig+0x578>)
 8001b4e:	f043 0301 	orr.w	r3, r3, #1
 8001b52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b56:	e024      	b.n	8001ba2 <HAL_RCC_OscConfig+0x522>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	2b05      	cmp	r3, #5
 8001b5e:	d110      	bne.n	8001b82 <HAL_RCC_OscConfig+0x502>
 8001b60:	4b25      	ldr	r3, [pc, #148]	; (8001bf8 <HAL_RCC_OscConfig+0x578>)
 8001b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b66:	4a24      	ldr	r2, [pc, #144]	; (8001bf8 <HAL_RCC_OscConfig+0x578>)
 8001b68:	f043 0304 	orr.w	r3, r3, #4
 8001b6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b70:	4b21      	ldr	r3, [pc, #132]	; (8001bf8 <HAL_RCC_OscConfig+0x578>)
 8001b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b76:	4a20      	ldr	r2, [pc, #128]	; (8001bf8 <HAL_RCC_OscConfig+0x578>)
 8001b78:	f043 0301 	orr.w	r3, r3, #1
 8001b7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b80:	e00f      	b.n	8001ba2 <HAL_RCC_OscConfig+0x522>
 8001b82:	4b1d      	ldr	r3, [pc, #116]	; (8001bf8 <HAL_RCC_OscConfig+0x578>)
 8001b84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b88:	4a1b      	ldr	r2, [pc, #108]	; (8001bf8 <HAL_RCC_OscConfig+0x578>)
 8001b8a:	f023 0301 	bic.w	r3, r3, #1
 8001b8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b92:	4b19      	ldr	r3, [pc, #100]	; (8001bf8 <HAL_RCC_OscConfig+0x578>)
 8001b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b98:	4a17      	ldr	r2, [pc, #92]	; (8001bf8 <HAL_RCC_OscConfig+0x578>)
 8001b9a:	f023 0304 	bic.w	r3, r3, #4
 8001b9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d016      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001baa:	f7ff f9c5 	bl	8000f38 <HAL_GetTick>
 8001bae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bb0:	e00a      	b.n	8001bc8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bb2:	f7ff f9c1 	bl	8000f38 <HAL_GetTick>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d901      	bls.n	8001bc8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e139      	b.n	8001e3c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bc8:	4b0b      	ldr	r3, [pc, #44]	; (8001bf8 <HAL_RCC_OscConfig+0x578>)
 8001bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bce:	f003 0302 	and.w	r3, r3, #2
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d0ed      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x532>
 8001bd6:	e01a      	b.n	8001c0e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bd8:	f7ff f9ae 	bl	8000f38 <HAL_GetTick>
 8001bdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bde:	e00f      	b.n	8001c00 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001be0:	f7ff f9aa 	bl	8000f38 <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d906      	bls.n	8001c00 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e122      	b.n	8001e3c <HAL_RCC_OscConfig+0x7bc>
 8001bf6:	bf00      	nop
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c00:	4b90      	ldr	r3, [pc, #576]	; (8001e44 <HAL_RCC_OscConfig+0x7c4>)
 8001c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d1e8      	bne.n	8001be0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c0e:	7ffb      	ldrb	r3, [r7, #31]
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d105      	bne.n	8001c20 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c14:	4b8b      	ldr	r3, [pc, #556]	; (8001e44 <HAL_RCC_OscConfig+0x7c4>)
 8001c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c18:	4a8a      	ldr	r2, [pc, #552]	; (8001e44 <HAL_RCC_OscConfig+0x7c4>)
 8001c1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c1e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	f000 8108 	beq.w	8001e3a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	f040 80d0 	bne.w	8001dd4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001c34:	4b83      	ldr	r3, [pc, #524]	; (8001e44 <HAL_RCC_OscConfig+0x7c4>)
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	f003 0203 	and.w	r2, r3, #3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d130      	bne.n	8001caa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c52:	3b01      	subs	r3, #1
 8001c54:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d127      	bne.n	8001caa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c64:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d11f      	bne.n	8001caa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c74:	2a07      	cmp	r2, #7
 8001c76:	bf14      	ite	ne
 8001c78:	2201      	movne	r2, #1
 8001c7a:	2200      	moveq	r2, #0
 8001c7c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d113      	bne.n	8001caa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c8c:	085b      	lsrs	r3, r3, #1
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d109      	bne.n	8001caa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca0:	085b      	lsrs	r3, r3, #1
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d06e      	beq.n	8001d88 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	2b0c      	cmp	r3, #12
 8001cae:	d069      	beq.n	8001d84 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001cb0:	4b64      	ldr	r3, [pc, #400]	; (8001e44 <HAL_RCC_OscConfig+0x7c4>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d105      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001cbc:	4b61      	ldr	r3, [pc, #388]	; (8001e44 <HAL_RCC_OscConfig+0x7c4>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e0b7      	b.n	8001e3c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001ccc:	4b5d      	ldr	r3, [pc, #372]	; (8001e44 <HAL_RCC_OscConfig+0x7c4>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a5c      	ldr	r2, [pc, #368]	; (8001e44 <HAL_RCC_OscConfig+0x7c4>)
 8001cd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cd6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001cd8:	f7ff f92e 	bl	8000f38 <HAL_GetTick>
 8001cdc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cde:	e008      	b.n	8001cf2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ce0:	f7ff f92a 	bl	8000f38 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e0a4      	b.n	8001e3c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cf2:	4b54      	ldr	r3, [pc, #336]	; (8001e44 <HAL_RCC_OscConfig+0x7c4>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d1f0      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cfe:	4b51      	ldr	r3, [pc, #324]	; (8001e44 <HAL_RCC_OscConfig+0x7c4>)
 8001d00:	68da      	ldr	r2, [r3, #12]
 8001d02:	4b51      	ldr	r3, [pc, #324]	; (8001e48 <HAL_RCC_OscConfig+0x7c8>)
 8001d04:	4013      	ands	r3, r2
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001d0e:	3a01      	subs	r2, #1
 8001d10:	0112      	lsls	r2, r2, #4
 8001d12:	4311      	orrs	r1, r2
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d18:	0212      	lsls	r2, r2, #8
 8001d1a:	4311      	orrs	r1, r2
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001d20:	0852      	lsrs	r2, r2, #1
 8001d22:	3a01      	subs	r2, #1
 8001d24:	0552      	lsls	r2, r2, #21
 8001d26:	4311      	orrs	r1, r2
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d2c:	0852      	lsrs	r2, r2, #1
 8001d2e:	3a01      	subs	r2, #1
 8001d30:	0652      	lsls	r2, r2, #25
 8001d32:	4311      	orrs	r1, r2
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d38:	0912      	lsrs	r2, r2, #4
 8001d3a:	0452      	lsls	r2, r2, #17
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	4941      	ldr	r1, [pc, #260]	; (8001e44 <HAL_RCC_OscConfig+0x7c4>)
 8001d40:	4313      	orrs	r3, r2
 8001d42:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001d44:	4b3f      	ldr	r3, [pc, #252]	; (8001e44 <HAL_RCC_OscConfig+0x7c4>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a3e      	ldr	r2, [pc, #248]	; (8001e44 <HAL_RCC_OscConfig+0x7c4>)
 8001d4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d4e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d50:	4b3c      	ldr	r3, [pc, #240]	; (8001e44 <HAL_RCC_OscConfig+0x7c4>)
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	4a3b      	ldr	r2, [pc, #236]	; (8001e44 <HAL_RCC_OscConfig+0x7c4>)
 8001d56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d5a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d5c:	f7ff f8ec 	bl	8000f38 <HAL_GetTick>
 8001d60:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d62:	e008      	b.n	8001d76 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d64:	f7ff f8e8 	bl	8000f38 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e062      	b.n	8001e3c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d76:	4b33      	ldr	r3, [pc, #204]	; (8001e44 <HAL_RCC_OscConfig+0x7c4>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d0f0      	beq.n	8001d64 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d82:	e05a      	b.n	8001e3a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e059      	b.n	8001e3c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d88:	4b2e      	ldr	r3, [pc, #184]	; (8001e44 <HAL_RCC_OscConfig+0x7c4>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d152      	bne.n	8001e3a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001d94:	4b2b      	ldr	r3, [pc, #172]	; (8001e44 <HAL_RCC_OscConfig+0x7c4>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a2a      	ldr	r2, [pc, #168]	; (8001e44 <HAL_RCC_OscConfig+0x7c4>)
 8001d9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d9e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001da0:	4b28      	ldr	r3, [pc, #160]	; (8001e44 <HAL_RCC_OscConfig+0x7c4>)
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	4a27      	ldr	r2, [pc, #156]	; (8001e44 <HAL_RCC_OscConfig+0x7c4>)
 8001da6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001daa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001dac:	f7ff f8c4 	bl	8000f38 <HAL_GetTick>
 8001db0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001db2:	e008      	b.n	8001dc6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001db4:	f7ff f8c0 	bl	8000f38 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e03a      	b.n	8001e3c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dc6:	4b1f      	ldr	r3, [pc, #124]	; (8001e44 <HAL_RCC_OscConfig+0x7c4>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d0f0      	beq.n	8001db4 <HAL_RCC_OscConfig+0x734>
 8001dd2:	e032      	b.n	8001e3a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	2b0c      	cmp	r3, #12
 8001dd8:	d02d      	beq.n	8001e36 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dda:	4b1a      	ldr	r3, [pc, #104]	; (8001e44 <HAL_RCC_OscConfig+0x7c4>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a19      	ldr	r2, [pc, #100]	; (8001e44 <HAL_RCC_OscConfig+0x7c4>)
 8001de0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001de4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001de6:	4b17      	ldr	r3, [pc, #92]	; (8001e44 <HAL_RCC_OscConfig+0x7c4>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d105      	bne.n	8001dfe <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001df2:	4b14      	ldr	r3, [pc, #80]	; (8001e44 <HAL_RCC_OscConfig+0x7c4>)
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	4a13      	ldr	r2, [pc, #76]	; (8001e44 <HAL_RCC_OscConfig+0x7c4>)
 8001df8:	f023 0303 	bic.w	r3, r3, #3
 8001dfc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001dfe:	4b11      	ldr	r3, [pc, #68]	; (8001e44 <HAL_RCC_OscConfig+0x7c4>)
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	4a10      	ldr	r2, [pc, #64]	; (8001e44 <HAL_RCC_OscConfig+0x7c4>)
 8001e04:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001e08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e0c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e0e:	f7ff f893 	bl	8000f38 <HAL_GetTick>
 8001e12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e14:	e008      	b.n	8001e28 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e16:	f7ff f88f 	bl	8000f38 <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d901      	bls.n	8001e28 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e009      	b.n	8001e3c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e28:	4b06      	ldr	r3, [pc, #24]	; (8001e44 <HAL_RCC_OscConfig+0x7c4>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d1f0      	bne.n	8001e16 <HAL_RCC_OscConfig+0x796>
 8001e34:	e001      	b.n	8001e3a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e000      	b.n	8001e3c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001e3a:	2300      	movs	r3, #0
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3720      	adds	r7, #32
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	40021000 	.word	0x40021000
 8001e48:	f99d808c 	.word	0xf99d808c

08001e4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d101      	bne.n	8001e60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e0c8      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e60:	4b66      	ldr	r3, [pc, #408]	; (8001ffc <HAL_RCC_ClockConfig+0x1b0>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0307 	and.w	r3, r3, #7
 8001e68:	683a      	ldr	r2, [r7, #0]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d910      	bls.n	8001e90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e6e:	4b63      	ldr	r3, [pc, #396]	; (8001ffc <HAL_RCC_ClockConfig+0x1b0>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f023 0207 	bic.w	r2, r3, #7
 8001e76:	4961      	ldr	r1, [pc, #388]	; (8001ffc <HAL_RCC_ClockConfig+0x1b0>)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e7e:	4b5f      	ldr	r3, [pc, #380]	; (8001ffc <HAL_RCC_ClockConfig+0x1b0>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0307 	and.w	r3, r3, #7
 8001e86:	683a      	ldr	r2, [r7, #0]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d001      	beq.n	8001e90 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e0b0      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0301 	and.w	r3, r3, #1
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d04c      	beq.n	8001f36 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	2b03      	cmp	r3, #3
 8001ea2:	d107      	bne.n	8001eb4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ea4:	4b56      	ldr	r3, [pc, #344]	; (8002000 <HAL_RCC_ClockConfig+0x1b4>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d121      	bne.n	8001ef4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e09e      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d107      	bne.n	8001ecc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ebc:	4b50      	ldr	r3, [pc, #320]	; (8002000 <HAL_RCC_ClockConfig+0x1b4>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d115      	bne.n	8001ef4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e092      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d107      	bne.n	8001ee4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ed4:	4b4a      	ldr	r3, [pc, #296]	; (8002000 <HAL_RCC_ClockConfig+0x1b4>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0302 	and.w	r3, r3, #2
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d109      	bne.n	8001ef4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e086      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ee4:	4b46      	ldr	r3, [pc, #280]	; (8002000 <HAL_RCC_ClockConfig+0x1b4>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d101      	bne.n	8001ef4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e07e      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ef4:	4b42      	ldr	r3, [pc, #264]	; (8002000 <HAL_RCC_ClockConfig+0x1b4>)
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f023 0203 	bic.w	r2, r3, #3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	493f      	ldr	r1, [pc, #252]	; (8002000 <HAL_RCC_ClockConfig+0x1b4>)
 8001f02:	4313      	orrs	r3, r2
 8001f04:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f06:	f7ff f817 	bl	8000f38 <HAL_GetTick>
 8001f0a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f0c:	e00a      	b.n	8001f24 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f0e:	f7ff f813 	bl	8000f38 <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d901      	bls.n	8001f24 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	e066      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f24:	4b36      	ldr	r3, [pc, #216]	; (8002000 <HAL_RCC_ClockConfig+0x1b4>)
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	f003 020c 	and.w	r2, r3, #12
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d1eb      	bne.n	8001f0e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d008      	beq.n	8001f54 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f42:	4b2f      	ldr	r3, [pc, #188]	; (8002000 <HAL_RCC_ClockConfig+0x1b4>)
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	492c      	ldr	r1, [pc, #176]	; (8002000 <HAL_RCC_ClockConfig+0x1b4>)
 8001f50:	4313      	orrs	r3, r2
 8001f52:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f54:	4b29      	ldr	r3, [pc, #164]	; (8001ffc <HAL_RCC_ClockConfig+0x1b0>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0307 	and.w	r3, r3, #7
 8001f5c:	683a      	ldr	r2, [r7, #0]
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d210      	bcs.n	8001f84 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f62:	4b26      	ldr	r3, [pc, #152]	; (8001ffc <HAL_RCC_ClockConfig+0x1b0>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f023 0207 	bic.w	r2, r3, #7
 8001f6a:	4924      	ldr	r1, [pc, #144]	; (8001ffc <HAL_RCC_ClockConfig+0x1b0>)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f72:	4b22      	ldr	r3, [pc, #136]	; (8001ffc <HAL_RCC_ClockConfig+0x1b0>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0307 	and.w	r3, r3, #7
 8001f7a:	683a      	ldr	r2, [r7, #0]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d001      	beq.n	8001f84 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e036      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0304 	and.w	r3, r3, #4
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d008      	beq.n	8001fa2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f90:	4b1b      	ldr	r3, [pc, #108]	; (8002000 <HAL_RCC_ClockConfig+0x1b4>)
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	4918      	ldr	r1, [pc, #96]	; (8002000 <HAL_RCC_ClockConfig+0x1b4>)
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0308 	and.w	r3, r3, #8
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d009      	beq.n	8001fc2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fae:	4b14      	ldr	r3, [pc, #80]	; (8002000 <HAL_RCC_ClockConfig+0x1b4>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	691b      	ldr	r3, [r3, #16]
 8001fba:	00db      	lsls	r3, r3, #3
 8001fbc:	4910      	ldr	r1, [pc, #64]	; (8002000 <HAL_RCC_ClockConfig+0x1b4>)
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001fc2:	f000 f825 	bl	8002010 <HAL_RCC_GetSysClockFreq>
 8001fc6:	4601      	mov	r1, r0
 8001fc8:	4b0d      	ldr	r3, [pc, #52]	; (8002000 <HAL_RCC_ClockConfig+0x1b4>)
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	091b      	lsrs	r3, r3, #4
 8001fce:	f003 030f 	and.w	r3, r3, #15
 8001fd2:	4a0c      	ldr	r2, [pc, #48]	; (8002004 <HAL_RCC_ClockConfig+0x1b8>)
 8001fd4:	5cd3      	ldrb	r3, [r2, r3]
 8001fd6:	f003 031f 	and.w	r3, r3, #31
 8001fda:	fa21 f303 	lsr.w	r3, r1, r3
 8001fde:	4a0a      	ldr	r2, [pc, #40]	; (8002008 <HAL_RCC_ClockConfig+0x1bc>)
 8001fe0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001fe2:	4b0a      	ldr	r3, [pc, #40]	; (800200c <HAL_RCC_ClockConfig+0x1c0>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7fe ff56 	bl	8000e98 <HAL_InitTick>
 8001fec:	4603      	mov	r3, r0
 8001fee:	72fb      	strb	r3, [r7, #11]

  return status;
 8001ff0:	7afb      	ldrb	r3, [r7, #11]
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3710      	adds	r7, #16
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	40022000 	.word	0x40022000
 8002000:	40021000 	.word	0x40021000
 8002004:	08004710 	.word	0x08004710
 8002008:	20000000 	.word	0x20000000
 800200c:	20000004 	.word	0x20000004

08002010 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002010:	b480      	push	{r7}
 8002012:	b089      	sub	sp, #36	; 0x24
 8002014:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002016:	2300      	movs	r3, #0
 8002018:	61fb      	str	r3, [r7, #28]
 800201a:	2300      	movs	r3, #0
 800201c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800201e:	4b3d      	ldr	r3, [pc, #244]	; (8002114 <HAL_RCC_GetSysClockFreq+0x104>)
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f003 030c 	and.w	r3, r3, #12
 8002026:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002028:	4b3a      	ldr	r3, [pc, #232]	; (8002114 <HAL_RCC_GetSysClockFreq+0x104>)
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	f003 0303 	and.w	r3, r3, #3
 8002030:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d005      	beq.n	8002044 <HAL_RCC_GetSysClockFreq+0x34>
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	2b0c      	cmp	r3, #12
 800203c:	d121      	bne.n	8002082 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2b01      	cmp	r3, #1
 8002042:	d11e      	bne.n	8002082 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002044:	4b33      	ldr	r3, [pc, #204]	; (8002114 <HAL_RCC_GetSysClockFreq+0x104>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0308 	and.w	r3, r3, #8
 800204c:	2b00      	cmp	r3, #0
 800204e:	d107      	bne.n	8002060 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002050:	4b30      	ldr	r3, [pc, #192]	; (8002114 <HAL_RCC_GetSysClockFreq+0x104>)
 8002052:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002056:	0a1b      	lsrs	r3, r3, #8
 8002058:	f003 030f 	and.w	r3, r3, #15
 800205c:	61fb      	str	r3, [r7, #28]
 800205e:	e005      	b.n	800206c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002060:	4b2c      	ldr	r3, [pc, #176]	; (8002114 <HAL_RCC_GetSysClockFreq+0x104>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	091b      	lsrs	r3, r3, #4
 8002066:	f003 030f 	and.w	r3, r3, #15
 800206a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800206c:	4a2a      	ldr	r2, [pc, #168]	; (8002118 <HAL_RCC_GetSysClockFreq+0x108>)
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002074:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d10d      	bne.n	8002098 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002080:	e00a      	b.n	8002098 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	2b04      	cmp	r3, #4
 8002086:	d102      	bne.n	800208e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002088:	4b24      	ldr	r3, [pc, #144]	; (800211c <HAL_RCC_GetSysClockFreq+0x10c>)
 800208a:	61bb      	str	r3, [r7, #24]
 800208c:	e004      	b.n	8002098 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	2b08      	cmp	r3, #8
 8002092:	d101      	bne.n	8002098 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002094:	4b22      	ldr	r3, [pc, #136]	; (8002120 <HAL_RCC_GetSysClockFreq+0x110>)
 8002096:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	2b0c      	cmp	r3, #12
 800209c:	d133      	bne.n	8002106 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800209e:	4b1d      	ldr	r3, [pc, #116]	; (8002114 <HAL_RCC_GetSysClockFreq+0x104>)
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	f003 0303 	and.w	r3, r3, #3
 80020a6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d002      	beq.n	80020b4 <HAL_RCC_GetSysClockFreq+0xa4>
 80020ae:	2b03      	cmp	r3, #3
 80020b0:	d003      	beq.n	80020ba <HAL_RCC_GetSysClockFreq+0xaa>
 80020b2:	e005      	b.n	80020c0 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80020b4:	4b19      	ldr	r3, [pc, #100]	; (800211c <HAL_RCC_GetSysClockFreq+0x10c>)
 80020b6:	617b      	str	r3, [r7, #20]
      break;
 80020b8:	e005      	b.n	80020c6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80020ba:	4b19      	ldr	r3, [pc, #100]	; (8002120 <HAL_RCC_GetSysClockFreq+0x110>)
 80020bc:	617b      	str	r3, [r7, #20]
      break;
 80020be:	e002      	b.n	80020c6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	617b      	str	r3, [r7, #20]
      break;
 80020c4:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020c6:	4b13      	ldr	r3, [pc, #76]	; (8002114 <HAL_RCC_GetSysClockFreq+0x104>)
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	091b      	lsrs	r3, r3, #4
 80020cc:	f003 0307 	and.w	r3, r3, #7
 80020d0:	3301      	adds	r3, #1
 80020d2:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80020d4:	4b0f      	ldr	r3, [pc, #60]	; (8002114 <HAL_RCC_GetSysClockFreq+0x104>)
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	0a1b      	lsrs	r3, r3, #8
 80020da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80020de:	697a      	ldr	r2, [r7, #20]
 80020e0:	fb02 f203 	mul.w	r2, r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ea:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020ec:	4b09      	ldr	r3, [pc, #36]	; (8002114 <HAL_RCC_GetSysClockFreq+0x104>)
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	0e5b      	lsrs	r3, r3, #25
 80020f2:	f003 0303 	and.w	r3, r3, #3
 80020f6:	3301      	adds	r3, #1
 80020f8:	005b      	lsls	r3, r3, #1
 80020fa:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80020fc:	697a      	ldr	r2, [r7, #20]
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	fbb2 f3f3 	udiv	r3, r2, r3
 8002104:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002106:	69bb      	ldr	r3, [r7, #24]
}
 8002108:	4618      	mov	r0, r3
 800210a:	3724      	adds	r7, #36	; 0x24
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr
 8002114:	40021000 	.word	0x40021000
 8002118:	08004728 	.word	0x08004728
 800211c:	00f42400 	.word	0x00f42400
 8002120:	007a1200 	.word	0x007a1200

08002124 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002128:	4b03      	ldr	r3, [pc, #12]	; (8002138 <HAL_RCC_GetHCLKFreq+0x14>)
 800212a:	681b      	ldr	r3, [r3, #0]
}
 800212c:	4618      	mov	r0, r3
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	20000000 	.word	0x20000000

0800213c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002140:	f7ff fff0 	bl	8002124 <HAL_RCC_GetHCLKFreq>
 8002144:	4601      	mov	r1, r0
 8002146:	4b06      	ldr	r3, [pc, #24]	; (8002160 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	0a1b      	lsrs	r3, r3, #8
 800214c:	f003 0307 	and.w	r3, r3, #7
 8002150:	4a04      	ldr	r2, [pc, #16]	; (8002164 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002152:	5cd3      	ldrb	r3, [r2, r3]
 8002154:	f003 031f 	and.w	r3, r3, #31
 8002158:	fa21 f303 	lsr.w	r3, r1, r3
}
 800215c:	4618      	mov	r0, r3
 800215e:	bd80      	pop	{r7, pc}
 8002160:	40021000 	.word	0x40021000
 8002164:	08004720 	.word	0x08004720

08002168 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800216c:	f7ff ffda 	bl	8002124 <HAL_RCC_GetHCLKFreq>
 8002170:	4601      	mov	r1, r0
 8002172:	4b06      	ldr	r3, [pc, #24]	; (800218c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	0adb      	lsrs	r3, r3, #11
 8002178:	f003 0307 	and.w	r3, r3, #7
 800217c:	4a04      	ldr	r2, [pc, #16]	; (8002190 <HAL_RCC_GetPCLK2Freq+0x28>)
 800217e:	5cd3      	ldrb	r3, [r2, r3]
 8002180:	f003 031f 	and.w	r3, r3, #31
 8002184:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002188:	4618      	mov	r0, r3
 800218a:	bd80      	pop	{r7, pc}
 800218c:	40021000 	.word	0x40021000
 8002190:	08004720 	.word	0x08004720

08002194 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b086      	sub	sp, #24
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800219c:	2300      	movs	r3, #0
 800219e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80021a0:	4b2a      	ldr	r3, [pc, #168]	; (800224c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d003      	beq.n	80021b4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80021ac:	f7ff fa04 	bl	80015b8 <HAL_PWREx_GetVoltageRange>
 80021b0:	6178      	str	r0, [r7, #20]
 80021b2:	e014      	b.n	80021de <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80021b4:	4b25      	ldr	r3, [pc, #148]	; (800224c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b8:	4a24      	ldr	r2, [pc, #144]	; (800224c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021be:	6593      	str	r3, [r2, #88]	; 0x58
 80021c0:	4b22      	ldr	r3, [pc, #136]	; (800224c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c8:	60fb      	str	r3, [r7, #12]
 80021ca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80021cc:	f7ff f9f4 	bl	80015b8 <HAL_PWREx_GetVoltageRange>
 80021d0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80021d2:	4b1e      	ldr	r3, [pc, #120]	; (800224c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d6:	4a1d      	ldr	r2, [pc, #116]	; (800224c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021dc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021e4:	d10b      	bne.n	80021fe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2b80      	cmp	r3, #128	; 0x80
 80021ea:	d919      	bls.n	8002220 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2ba0      	cmp	r3, #160	; 0xa0
 80021f0:	d902      	bls.n	80021f8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80021f2:	2302      	movs	r3, #2
 80021f4:	613b      	str	r3, [r7, #16]
 80021f6:	e013      	b.n	8002220 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80021f8:	2301      	movs	r3, #1
 80021fa:	613b      	str	r3, [r7, #16]
 80021fc:	e010      	b.n	8002220 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2b80      	cmp	r3, #128	; 0x80
 8002202:	d902      	bls.n	800220a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002204:	2303      	movs	r3, #3
 8002206:	613b      	str	r3, [r7, #16]
 8002208:	e00a      	b.n	8002220 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2b80      	cmp	r3, #128	; 0x80
 800220e:	d102      	bne.n	8002216 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002210:	2302      	movs	r3, #2
 8002212:	613b      	str	r3, [r7, #16]
 8002214:	e004      	b.n	8002220 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2b70      	cmp	r3, #112	; 0x70
 800221a:	d101      	bne.n	8002220 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800221c:	2301      	movs	r3, #1
 800221e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002220:	4b0b      	ldr	r3, [pc, #44]	; (8002250 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f023 0207 	bic.w	r2, r3, #7
 8002228:	4909      	ldr	r1, [pc, #36]	; (8002250 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	4313      	orrs	r3, r2
 800222e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002230:	4b07      	ldr	r3, [pc, #28]	; (8002250 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0307 	and.w	r3, r3, #7
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	429a      	cmp	r2, r3
 800223c:	d001      	beq.n	8002242 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e000      	b.n	8002244 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002242:	2300      	movs	r3, #0
}
 8002244:	4618      	mov	r0, r3
 8002246:	3718      	adds	r7, #24
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	40021000 	.word	0x40021000
 8002250:	40022000 	.word	0x40022000

08002254 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b086      	sub	sp, #24
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800225c:	2300      	movs	r3, #0
 800225e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002260:	2300      	movs	r3, #0
 8002262:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800226c:	2b00      	cmp	r3, #0
 800226e:	d03f      	beq.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002274:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002278:	d01c      	beq.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800227a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800227e:	d802      	bhi.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002280:	2b00      	cmp	r3, #0
 8002282:	d00e      	beq.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002284:	e01f      	b.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002286:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800228a:	d003      	beq.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800228c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002290:	d01c      	beq.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002292:	e018      	b.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002294:	4b85      	ldr	r3, [pc, #532]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	4a84      	ldr	r2, [pc, #528]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800229a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800229e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022a0:	e015      	b.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	3304      	adds	r3, #4
 80022a6:	2100      	movs	r1, #0
 80022a8:	4618      	mov	r0, r3
 80022aa:	f000 fab9 	bl	8002820 <RCCEx_PLLSAI1_Config>
 80022ae:	4603      	mov	r3, r0
 80022b0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022b2:	e00c      	b.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	3320      	adds	r3, #32
 80022b8:	2100      	movs	r1, #0
 80022ba:	4618      	mov	r0, r3
 80022bc:	f000 fba0 	bl	8002a00 <RCCEx_PLLSAI2_Config>
 80022c0:	4603      	mov	r3, r0
 80022c2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022c4:	e003      	b.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	74fb      	strb	r3, [r7, #19]
      break;
 80022ca:	e000      	b.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80022cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80022ce:	7cfb      	ldrb	r3, [r7, #19]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d10b      	bne.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80022d4:	4b75      	ldr	r3, [pc, #468]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80022d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022da:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022e2:	4972      	ldr	r1, [pc, #456]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80022ea:	e001      	b.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022ec:	7cfb      	ldrb	r3, [r7, #19]
 80022ee:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d03f      	beq.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002300:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002304:	d01c      	beq.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002306:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800230a:	d802      	bhi.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 800230c:	2b00      	cmp	r3, #0
 800230e:	d00e      	beq.n	800232e <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002310:	e01f      	b.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002312:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002316:	d003      	beq.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002318:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800231c:	d01c      	beq.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800231e:	e018      	b.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002320:	4b62      	ldr	r3, [pc, #392]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	4a61      	ldr	r2, [pc, #388]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002326:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800232a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800232c:	e015      	b.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	3304      	adds	r3, #4
 8002332:	2100      	movs	r1, #0
 8002334:	4618      	mov	r0, r3
 8002336:	f000 fa73 	bl	8002820 <RCCEx_PLLSAI1_Config>
 800233a:	4603      	mov	r3, r0
 800233c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800233e:	e00c      	b.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	3320      	adds	r3, #32
 8002344:	2100      	movs	r1, #0
 8002346:	4618      	mov	r0, r3
 8002348:	f000 fb5a 	bl	8002a00 <RCCEx_PLLSAI2_Config>
 800234c:	4603      	mov	r3, r0
 800234e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002350:	e003      	b.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	74fb      	strb	r3, [r7, #19]
      break;
 8002356:	e000      	b.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002358:	bf00      	nop
    }

    if(ret == HAL_OK)
 800235a:	7cfb      	ldrb	r3, [r7, #19]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d10b      	bne.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002360:	4b52      	ldr	r3, [pc, #328]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002366:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800236e:	494f      	ldr	r1, [pc, #316]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002370:	4313      	orrs	r3, r2
 8002372:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002376:	e001      	b.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002378:	7cfb      	ldrb	r3, [r7, #19]
 800237a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002384:	2b00      	cmp	r3, #0
 8002386:	f000 80a0 	beq.w	80024ca <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800238a:	2300      	movs	r3, #0
 800238c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800238e:	4b47      	ldr	r3, [pc, #284]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d101      	bne.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800239a:	2301      	movs	r3, #1
 800239c:	e000      	b.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800239e:	2300      	movs	r3, #0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d00d      	beq.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023a4:	4b41      	ldr	r3, [pc, #260]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023a8:	4a40      	ldr	r2, [pc, #256]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023ae:	6593      	str	r3, [r2, #88]	; 0x58
 80023b0:	4b3e      	ldr	r3, [pc, #248]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b8:	60bb      	str	r3, [r7, #8]
 80023ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023bc:	2301      	movs	r3, #1
 80023be:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023c0:	4b3b      	ldr	r3, [pc, #236]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a3a      	ldr	r2, [pc, #232]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80023c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80023cc:	f7fe fdb4 	bl	8000f38 <HAL_GetTick>
 80023d0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80023d2:	e009      	b.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023d4:	f7fe fdb0 	bl	8000f38 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d902      	bls.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	74fb      	strb	r3, [r7, #19]
        break;
 80023e6:	e005      	b.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80023e8:	4b31      	ldr	r3, [pc, #196]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d0ef      	beq.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 80023f4:	7cfb      	ldrb	r3, [r7, #19]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d15c      	bne.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80023fa:	4b2c      	ldr	r3, [pc, #176]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002400:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002404:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d01f      	beq.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002412:	697a      	ldr	r2, [r7, #20]
 8002414:	429a      	cmp	r2, r3
 8002416:	d019      	beq.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002418:	4b24      	ldr	r3, [pc, #144]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800241a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800241e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002422:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002424:	4b21      	ldr	r3, [pc, #132]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800242a:	4a20      	ldr	r2, [pc, #128]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800242c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002430:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002434:	4b1d      	ldr	r3, [pc, #116]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800243a:	4a1c      	ldr	r2, [pc, #112]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800243c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002440:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002444:	4a19      	ldr	r2, [pc, #100]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	2b00      	cmp	r3, #0
 8002454:	d016      	beq.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002456:	f7fe fd6f 	bl	8000f38 <HAL_GetTick>
 800245a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800245c:	e00b      	b.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800245e:	f7fe fd6b 	bl	8000f38 <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	f241 3288 	movw	r2, #5000	; 0x1388
 800246c:	4293      	cmp	r3, r2
 800246e:	d902      	bls.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	74fb      	strb	r3, [r7, #19]
            break;
 8002474:	e006      	b.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002476:	4b0d      	ldr	r3, [pc, #52]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002478:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800247c:	f003 0302 	and.w	r3, r3, #2
 8002480:	2b00      	cmp	r3, #0
 8002482:	d0ec      	beq.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8002484:	7cfb      	ldrb	r3, [r7, #19]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d10c      	bne.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800248a:	4b08      	ldr	r3, [pc, #32]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800248c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002490:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800249a:	4904      	ldr	r1, [pc, #16]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800249c:	4313      	orrs	r3, r2
 800249e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80024a2:	e009      	b.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80024a4:	7cfb      	ldrb	r3, [r7, #19]
 80024a6:	74bb      	strb	r3, [r7, #18]
 80024a8:	e006      	b.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80024aa:	bf00      	nop
 80024ac:	40021000 	.word	0x40021000
 80024b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024b4:	7cfb      	ldrb	r3, [r7, #19]
 80024b6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024b8:	7c7b      	ldrb	r3, [r7, #17]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d105      	bne.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024be:	4b9e      	ldr	r3, [pc, #632]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80024c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c2:	4a9d      	ldr	r2, [pc, #628]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80024c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024c8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d00a      	beq.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024d6:	4b98      	ldr	r3, [pc, #608]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80024d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024dc:	f023 0203 	bic.w	r2, r3, #3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024e4:	4994      	ldr	r1, [pc, #592]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0302 	and.w	r3, r3, #2
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d00a      	beq.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80024f8:	4b8f      	ldr	r3, [pc, #572]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80024fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024fe:	f023 020c 	bic.w	r2, r3, #12
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002506:	498c      	ldr	r1, [pc, #560]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002508:	4313      	orrs	r3, r2
 800250a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0304 	and.w	r3, r3, #4
 8002516:	2b00      	cmp	r3, #0
 8002518:	d00a      	beq.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800251a:	4b87      	ldr	r3, [pc, #540]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800251c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002520:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002528:	4983      	ldr	r1, [pc, #524]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800252a:	4313      	orrs	r3, r2
 800252c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0308 	and.w	r3, r3, #8
 8002538:	2b00      	cmp	r3, #0
 800253a:	d00a      	beq.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800253c:	4b7e      	ldr	r3, [pc, #504]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800253e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002542:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800254a:	497b      	ldr	r1, [pc, #492]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800254c:	4313      	orrs	r3, r2
 800254e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0310 	and.w	r3, r3, #16
 800255a:	2b00      	cmp	r3, #0
 800255c:	d00a      	beq.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800255e:	4b76      	ldr	r3, [pc, #472]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002560:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002564:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800256c:	4972      	ldr	r1, [pc, #456]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800256e:	4313      	orrs	r3, r2
 8002570:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0320 	and.w	r3, r3, #32
 800257c:	2b00      	cmp	r3, #0
 800257e:	d00a      	beq.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002580:	4b6d      	ldr	r3, [pc, #436]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002586:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800258e:	496a      	ldr	r1, [pc, #424]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002590:	4313      	orrs	r3, r2
 8002592:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d00a      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80025a2:	4b65      	ldr	r3, [pc, #404]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025b0:	4961      	ldr	r1, [pc, #388]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d00a      	beq.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80025c4:	4b5c      	ldr	r3, [pc, #368]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025d2:	4959      	ldr	r1, [pc, #356]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025d4:	4313      	orrs	r3, r2
 80025d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d00a      	beq.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025e6:	4b54      	ldr	r3, [pc, #336]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ec:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025f4:	4950      	ldr	r1, [pc, #320]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002604:	2b00      	cmp	r3, #0
 8002606:	d00a      	beq.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002608:	4b4b      	ldr	r3, [pc, #300]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800260a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800260e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002616:	4948      	ldr	r1, [pc, #288]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002618:	4313      	orrs	r3, r2
 800261a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002626:	2b00      	cmp	r3, #0
 8002628:	d00a      	beq.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800262a:	4b43      	ldr	r3, [pc, #268]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800262c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002630:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002638:	493f      	ldr	r1, [pc, #252]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800263a:	4313      	orrs	r3, r2
 800263c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d028      	beq.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800264c:	4b3a      	ldr	r3, [pc, #232]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800264e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002652:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800265a:	4937      	ldr	r1, [pc, #220]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800265c:	4313      	orrs	r3, r2
 800265e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002666:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800266a:	d106      	bne.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800266c:	4b32      	ldr	r3, [pc, #200]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	4a31      	ldr	r2, [pc, #196]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002672:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002676:	60d3      	str	r3, [r2, #12]
 8002678:	e011      	b.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800267e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002682:	d10c      	bne.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	3304      	adds	r3, #4
 8002688:	2101      	movs	r1, #1
 800268a:	4618      	mov	r0, r3
 800268c:	f000 f8c8 	bl	8002820 <RCCEx_PLLSAI1_Config>
 8002690:	4603      	mov	r3, r0
 8002692:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002694:	7cfb      	ldrb	r3, [r7, #19]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 800269a:	7cfb      	ldrb	r3, [r7, #19]
 800269c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d028      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80026aa:	4b23      	ldr	r3, [pc, #140]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026b0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b8:	491f      	ldr	r1, [pc, #124]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026c8:	d106      	bne.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026ca:	4b1b      	ldr	r3, [pc, #108]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	4a1a      	ldr	r2, [pc, #104]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026d4:	60d3      	str	r3, [r2, #12]
 80026d6:	e011      	b.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026e0:	d10c      	bne.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	3304      	adds	r3, #4
 80026e6:	2101      	movs	r1, #1
 80026e8:	4618      	mov	r0, r3
 80026ea:	f000 f899 	bl	8002820 <RCCEx_PLLSAI1_Config>
 80026ee:	4603      	mov	r3, r0
 80026f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026f2:	7cfb      	ldrb	r3, [r7, #19]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d001      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 80026f8:	7cfb      	ldrb	r3, [r7, #19]
 80026fa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d02b      	beq.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002708:	4b0b      	ldr	r3, [pc, #44]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800270a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800270e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002716:	4908      	ldr	r1, [pc, #32]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002718:	4313      	orrs	r3, r2
 800271a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002722:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002726:	d109      	bne.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002728:	4b03      	ldr	r3, [pc, #12]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	4a02      	ldr	r2, [pc, #8]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800272e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002732:	60d3      	str	r3, [r2, #12]
 8002734:	e014      	b.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002736:	bf00      	nop
 8002738:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002740:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002744:	d10c      	bne.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	3304      	adds	r3, #4
 800274a:	2101      	movs	r1, #1
 800274c:	4618      	mov	r0, r3
 800274e:	f000 f867 	bl	8002820 <RCCEx_PLLSAI1_Config>
 8002752:	4603      	mov	r3, r0
 8002754:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002756:	7cfb      	ldrb	r3, [r7, #19]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d001      	beq.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 800275c:	7cfb      	ldrb	r3, [r7, #19]
 800275e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d02f      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800276c:	4b2b      	ldr	r3, [pc, #172]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800276e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002772:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800277a:	4928      	ldr	r1, [pc, #160]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800277c:	4313      	orrs	r3, r2
 800277e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002786:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800278a:	d10d      	bne.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	3304      	adds	r3, #4
 8002790:	2102      	movs	r1, #2
 8002792:	4618      	mov	r0, r3
 8002794:	f000 f844 	bl	8002820 <RCCEx_PLLSAI1_Config>
 8002798:	4603      	mov	r3, r0
 800279a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800279c:	7cfb      	ldrb	r3, [r7, #19]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d014      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80027a2:	7cfb      	ldrb	r3, [r7, #19]
 80027a4:	74bb      	strb	r3, [r7, #18]
 80027a6:	e011      	b.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027b0:	d10c      	bne.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	3320      	adds	r3, #32
 80027b6:	2102      	movs	r1, #2
 80027b8:	4618      	mov	r0, r3
 80027ba:	f000 f921 	bl	8002a00 <RCCEx_PLLSAI2_Config>
 80027be:	4603      	mov	r3, r0
 80027c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027c2:	7cfb      	ldrb	r3, [r7, #19]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d001      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80027c8:	7cfb      	ldrb	r3, [r7, #19]
 80027ca:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d00a      	beq.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80027d8:	4b10      	ldr	r3, [pc, #64]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80027da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027de:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027e6:	490d      	ldr	r1, [pc, #52]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d00b      	beq.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80027fa:	4b08      	ldr	r3, [pc, #32]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80027fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002800:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800280a:	4904      	ldr	r1, [pc, #16]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800280c:	4313      	orrs	r3, r2
 800280e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002812:	7cbb      	ldrb	r3, [r7, #18]
}
 8002814:	4618      	mov	r0, r3
 8002816:	3718      	adds	r7, #24
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	40021000 	.word	0x40021000

08002820 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800282a:	2300      	movs	r3, #0
 800282c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800282e:	4b73      	ldr	r3, [pc, #460]	; (80029fc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	f003 0303 	and.w	r3, r3, #3
 8002836:	2b00      	cmp	r3, #0
 8002838:	d018      	beq.n	800286c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800283a:	4b70      	ldr	r3, [pc, #448]	; (80029fc <RCCEx_PLLSAI1_Config+0x1dc>)
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	f003 0203 	and.w	r2, r3, #3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	429a      	cmp	r2, r3
 8002848:	d10d      	bne.n	8002866 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
       ||
 800284e:	2b00      	cmp	r3, #0
 8002850:	d009      	beq.n	8002866 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002852:	4b6a      	ldr	r3, [pc, #424]	; (80029fc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	091b      	lsrs	r3, r3, #4
 8002858:	f003 0307 	and.w	r3, r3, #7
 800285c:	1c5a      	adds	r2, r3, #1
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
       ||
 8002862:	429a      	cmp	r2, r3
 8002864:	d044      	beq.n	80028f0 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	73fb      	strb	r3, [r7, #15]
 800286a:	e041      	b.n	80028f0 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2b02      	cmp	r3, #2
 8002872:	d00c      	beq.n	800288e <RCCEx_PLLSAI1_Config+0x6e>
 8002874:	2b03      	cmp	r3, #3
 8002876:	d013      	beq.n	80028a0 <RCCEx_PLLSAI1_Config+0x80>
 8002878:	2b01      	cmp	r3, #1
 800287a:	d120      	bne.n	80028be <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800287c:	4b5f      	ldr	r3, [pc, #380]	; (80029fc <RCCEx_PLLSAI1_Config+0x1dc>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0302 	and.w	r3, r3, #2
 8002884:	2b00      	cmp	r3, #0
 8002886:	d11d      	bne.n	80028c4 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800288c:	e01a      	b.n	80028c4 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800288e:	4b5b      	ldr	r3, [pc, #364]	; (80029fc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002896:	2b00      	cmp	r3, #0
 8002898:	d116      	bne.n	80028c8 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800289e:	e013      	b.n	80028c8 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80028a0:	4b56      	ldr	r3, [pc, #344]	; (80029fc <RCCEx_PLLSAI1_Config+0x1dc>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d10f      	bne.n	80028cc <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80028ac:	4b53      	ldr	r3, [pc, #332]	; (80029fc <RCCEx_PLLSAI1_Config+0x1dc>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d109      	bne.n	80028cc <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80028bc:	e006      	b.n	80028cc <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	73fb      	strb	r3, [r7, #15]
      break;
 80028c2:	e004      	b.n	80028ce <RCCEx_PLLSAI1_Config+0xae>
      break;
 80028c4:	bf00      	nop
 80028c6:	e002      	b.n	80028ce <RCCEx_PLLSAI1_Config+0xae>
      break;
 80028c8:	bf00      	nop
 80028ca:	e000      	b.n	80028ce <RCCEx_PLLSAI1_Config+0xae>
      break;
 80028cc:	bf00      	nop
    }

    if(status == HAL_OK)
 80028ce:	7bfb      	ldrb	r3, [r7, #15]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d10d      	bne.n	80028f0 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80028d4:	4b49      	ldr	r3, [pc, #292]	; (80029fc <RCCEx_PLLSAI1_Config+0x1dc>)
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6819      	ldr	r1, [r3, #0]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	3b01      	subs	r3, #1
 80028e6:	011b      	lsls	r3, r3, #4
 80028e8:	430b      	orrs	r3, r1
 80028ea:	4944      	ldr	r1, [pc, #272]	; (80029fc <RCCEx_PLLSAI1_Config+0x1dc>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80028f0:	7bfb      	ldrb	r3, [r7, #15]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d17d      	bne.n	80029f2 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80028f6:	4b41      	ldr	r3, [pc, #260]	; (80029fc <RCCEx_PLLSAI1_Config+0x1dc>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a40      	ldr	r2, [pc, #256]	; (80029fc <RCCEx_PLLSAI1_Config+0x1dc>)
 80028fc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002900:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002902:	f7fe fb19 	bl	8000f38 <HAL_GetTick>
 8002906:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002908:	e009      	b.n	800291e <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800290a:	f7fe fb15 	bl	8000f38 <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	2b02      	cmp	r3, #2
 8002916:	d902      	bls.n	800291e <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002918:	2303      	movs	r3, #3
 800291a:	73fb      	strb	r3, [r7, #15]
        break;
 800291c:	e005      	b.n	800292a <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800291e:	4b37      	ldr	r3, [pc, #220]	; (80029fc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d1ef      	bne.n	800290a <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800292a:	7bfb      	ldrb	r3, [r7, #15]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d160      	bne.n	80029f2 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d111      	bne.n	800295a <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002936:	4b31      	ldr	r3, [pc, #196]	; (80029fc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800293e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	6892      	ldr	r2, [r2, #8]
 8002946:	0211      	lsls	r1, r2, #8
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	68d2      	ldr	r2, [r2, #12]
 800294c:	0912      	lsrs	r2, r2, #4
 800294e:	0452      	lsls	r2, r2, #17
 8002950:	430a      	orrs	r2, r1
 8002952:	492a      	ldr	r1, [pc, #168]	; (80029fc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002954:	4313      	orrs	r3, r2
 8002956:	610b      	str	r3, [r1, #16]
 8002958:	e027      	b.n	80029aa <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	2b01      	cmp	r3, #1
 800295e:	d112      	bne.n	8002986 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002960:	4b26      	ldr	r3, [pc, #152]	; (80029fc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002962:	691b      	ldr	r3, [r3, #16]
 8002964:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002968:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	6892      	ldr	r2, [r2, #8]
 8002970:	0211      	lsls	r1, r2, #8
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	6912      	ldr	r2, [r2, #16]
 8002976:	0852      	lsrs	r2, r2, #1
 8002978:	3a01      	subs	r2, #1
 800297a:	0552      	lsls	r2, r2, #21
 800297c:	430a      	orrs	r2, r1
 800297e:	491f      	ldr	r1, [pc, #124]	; (80029fc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002980:	4313      	orrs	r3, r2
 8002982:	610b      	str	r3, [r1, #16]
 8002984:	e011      	b.n	80029aa <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002986:	4b1d      	ldr	r3, [pc, #116]	; (80029fc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800298e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	6892      	ldr	r2, [r2, #8]
 8002996:	0211      	lsls	r1, r2, #8
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	6952      	ldr	r2, [r2, #20]
 800299c:	0852      	lsrs	r2, r2, #1
 800299e:	3a01      	subs	r2, #1
 80029a0:	0652      	lsls	r2, r2, #25
 80029a2:	430a      	orrs	r2, r1
 80029a4:	4915      	ldr	r1, [pc, #84]	; (80029fc <RCCEx_PLLSAI1_Config+0x1dc>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80029aa:	4b14      	ldr	r3, [pc, #80]	; (80029fc <RCCEx_PLLSAI1_Config+0x1dc>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a13      	ldr	r2, [pc, #76]	; (80029fc <RCCEx_PLLSAI1_Config+0x1dc>)
 80029b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80029b4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b6:	f7fe fabf 	bl	8000f38 <HAL_GetTick>
 80029ba:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80029bc:	e009      	b.n	80029d2 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80029be:	f7fe fabb 	bl	8000f38 <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d902      	bls.n	80029d2 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	73fb      	strb	r3, [r7, #15]
          break;
 80029d0:	e005      	b.n	80029de <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80029d2:	4b0a      	ldr	r3, [pc, #40]	; (80029fc <RCCEx_PLLSAI1_Config+0x1dc>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d0ef      	beq.n	80029be <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80029de:	7bfb      	ldrb	r3, [r7, #15]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d106      	bne.n	80029f2 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80029e4:	4b05      	ldr	r3, [pc, #20]	; (80029fc <RCCEx_PLLSAI1_Config+0x1dc>)
 80029e6:	691a      	ldr	r2, [r3, #16]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	699b      	ldr	r3, [r3, #24]
 80029ec:	4903      	ldr	r1, [pc, #12]	; (80029fc <RCCEx_PLLSAI1_Config+0x1dc>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80029f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3710      	adds	r7, #16
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	40021000 	.word	0x40021000

08002a00 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a0e:	4b68      	ldr	r3, [pc, #416]	; (8002bb0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	f003 0303 	and.w	r3, r3, #3
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d018      	beq.n	8002a4c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002a1a:	4b65      	ldr	r3, [pc, #404]	; (8002bb0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	f003 0203 	and.w	r2, r3, #3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d10d      	bne.n	8002a46 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
       ||
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d009      	beq.n	8002a46 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002a32:	4b5f      	ldr	r3, [pc, #380]	; (8002bb0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	091b      	lsrs	r3, r3, #4
 8002a38:	f003 0307 	and.w	r3, r3, #7
 8002a3c:	1c5a      	adds	r2, r3, #1
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
       ||
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d044      	beq.n	8002ad0 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	73fb      	strb	r3, [r7, #15]
 8002a4a:	e041      	b.n	8002ad0 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d00c      	beq.n	8002a6e <RCCEx_PLLSAI2_Config+0x6e>
 8002a54:	2b03      	cmp	r3, #3
 8002a56:	d013      	beq.n	8002a80 <RCCEx_PLLSAI2_Config+0x80>
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d120      	bne.n	8002a9e <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a5c:	4b54      	ldr	r3, [pc, #336]	; (8002bb0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0302 	and.w	r3, r3, #2
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d11d      	bne.n	8002aa4 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a6c:	e01a      	b.n	8002aa4 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002a6e:	4b50      	ldr	r3, [pc, #320]	; (8002bb0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d116      	bne.n	8002aa8 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a7e:	e013      	b.n	8002aa8 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a80:	4b4b      	ldr	r3, [pc, #300]	; (8002bb0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d10f      	bne.n	8002aac <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a8c:	4b48      	ldr	r3, [pc, #288]	; (8002bb0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d109      	bne.n	8002aac <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002a9c:	e006      	b.n	8002aac <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	73fb      	strb	r3, [r7, #15]
      break;
 8002aa2:	e004      	b.n	8002aae <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002aa4:	bf00      	nop
 8002aa6:	e002      	b.n	8002aae <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002aa8:	bf00      	nop
 8002aaa:	e000      	b.n	8002aae <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002aac:	bf00      	nop
    }

    if(status == HAL_OK)
 8002aae:	7bfb      	ldrb	r3, [r7, #15]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d10d      	bne.n	8002ad0 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002ab4:	4b3e      	ldr	r3, [pc, #248]	; (8002bb0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6819      	ldr	r1, [r3, #0]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	3b01      	subs	r3, #1
 8002ac6:	011b      	lsls	r3, r3, #4
 8002ac8:	430b      	orrs	r3, r1
 8002aca:	4939      	ldr	r1, [pc, #228]	; (8002bb0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002ad0:	7bfb      	ldrb	r3, [r7, #15]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d167      	bne.n	8002ba6 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002ad6:	4b36      	ldr	r3, [pc, #216]	; (8002bb0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a35      	ldr	r2, [pc, #212]	; (8002bb0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002adc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ae0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ae2:	f7fe fa29 	bl	8000f38 <HAL_GetTick>
 8002ae6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002ae8:	e009      	b.n	8002afe <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002aea:	f7fe fa25 	bl	8000f38 <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d902      	bls.n	8002afe <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	73fb      	strb	r3, [r7, #15]
        break;
 8002afc:	e005      	b.n	8002b0a <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002afe:	4b2c      	ldr	r3, [pc, #176]	; (8002bb0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d1ef      	bne.n	8002aea <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002b0a:	7bfb      	ldrb	r3, [r7, #15]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d14a      	bne.n	8002ba6 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d111      	bne.n	8002b3a <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b16:	4b26      	ldr	r3, [pc, #152]	; (8002bb0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b18:	695b      	ldr	r3, [r3, #20]
 8002b1a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002b1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	6892      	ldr	r2, [r2, #8]
 8002b26:	0211      	lsls	r1, r2, #8
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	68d2      	ldr	r2, [r2, #12]
 8002b2c:	0912      	lsrs	r2, r2, #4
 8002b2e:	0452      	lsls	r2, r2, #17
 8002b30:	430a      	orrs	r2, r1
 8002b32:	491f      	ldr	r1, [pc, #124]	; (8002bb0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	614b      	str	r3, [r1, #20]
 8002b38:	e011      	b.n	8002b5e <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b3a:	4b1d      	ldr	r3, [pc, #116]	; (8002bb0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b3c:	695b      	ldr	r3, [r3, #20]
 8002b3e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002b42:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	6892      	ldr	r2, [r2, #8]
 8002b4a:	0211      	lsls	r1, r2, #8
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	6912      	ldr	r2, [r2, #16]
 8002b50:	0852      	lsrs	r2, r2, #1
 8002b52:	3a01      	subs	r2, #1
 8002b54:	0652      	lsls	r2, r2, #25
 8002b56:	430a      	orrs	r2, r1
 8002b58:	4915      	ldr	r1, [pc, #84]	; (8002bb0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002b5e:	4b14      	ldr	r3, [pc, #80]	; (8002bb0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a13      	ldr	r2, [pc, #76]	; (8002bb0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b68:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b6a:	f7fe f9e5 	bl	8000f38 <HAL_GetTick>
 8002b6e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002b70:	e009      	b.n	8002b86 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b72:	f7fe f9e1 	bl	8000f38 <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d902      	bls.n	8002b86 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	73fb      	strb	r3, [r7, #15]
          break;
 8002b84:	e005      	b.n	8002b92 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002b86:	4b0a      	ldr	r3, [pc, #40]	; (8002bb0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d0ef      	beq.n	8002b72 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8002b92:	7bfb      	ldrb	r3, [r7, #15]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d106      	bne.n	8002ba6 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002b98:	4b05      	ldr	r3, [pc, #20]	; (8002bb0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b9a:	695a      	ldr	r2, [r3, #20]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	695b      	ldr	r3, [r3, #20]
 8002ba0:	4903      	ldr	r1, [pc, #12]	; (8002bb0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3710      	adds	r7, #16
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	40021000 	.word	0x40021000

08002bb4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d101      	bne.n	8002bc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e040      	b.n	8002c48 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d106      	bne.n	8002bdc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f7fd ffd2 	bl	8000b80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2224      	movs	r2, #36	; 0x24
 8002be0:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f022 0201 	bic.w	r2, r2, #1
 8002bf0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f000 fa1c 	bl	8003030 <UART_SetConfig>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d101      	bne.n	8002c02 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e022      	b.n	8002c48 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d002      	beq.n	8002c10 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f000 fc9a 	bl	8003544 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	685a      	ldr	r2, [r3, #4]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c1e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	689a      	ldr	r2, [r3, #8]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c2e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f042 0201 	orr.w	r2, r2, #1
 8002c3e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f000 fd21 	bl	8003688 <UART_CheckIdleState>
 8002c46:	4603      	mov	r3, r0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3708      	adds	r7, #8
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b08a      	sub	sp, #40	; 0x28
 8002c54:	af02      	add	r7, sp, #8
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	60b9      	str	r1, [r7, #8]
 8002c5a:	603b      	str	r3, [r7, #0]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c64:	2b20      	cmp	r3, #32
 8002c66:	f040 8081 	bne.w	8002d6c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d002      	beq.n	8002c76 <HAL_UART_Transmit+0x26>
 8002c70:	88fb      	ldrh	r3, [r7, #6]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d101      	bne.n	8002c7a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e079      	b.n	8002d6e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d101      	bne.n	8002c88 <HAL_UART_Transmit+0x38>
 8002c84:	2302      	movs	r3, #2
 8002c86:	e072      	b.n	8002d6e <HAL_UART_Transmit+0x11e>
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2200      	movs	r2, #0
 8002c94:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2221      	movs	r2, #33	; 0x21
 8002c9a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002c9c:	f7fe f94c 	bl	8000f38 <HAL_GetTick>
 8002ca0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	88fa      	ldrh	r2, [r7, #6]
 8002ca6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	88fa      	ldrh	r2, [r7, #6]
 8002cae:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cba:	d108      	bne.n	8002cce <HAL_UART_Transmit+0x7e>
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d104      	bne.n	8002cce <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	61bb      	str	r3, [r7, #24]
 8002ccc:	e003      	b.n	8002cd6 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8002cde:	e02d      	b.n	8002d3c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	9300      	str	r3, [sp, #0]
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	2180      	movs	r1, #128	; 0x80
 8002cea:	68f8      	ldr	r0, [r7, #12]
 8002cec:	f000 fd11 	bl	8003712 <UART_WaitOnFlagUntilTimeout>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d001      	beq.n	8002cfa <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e039      	b.n	8002d6e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d10b      	bne.n	8002d18 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	881a      	ldrh	r2, [r3, #0]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d0c:	b292      	uxth	r2, r2
 8002d0e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	3302      	adds	r3, #2
 8002d14:	61bb      	str	r3, [r7, #24]
 8002d16:	e008      	b.n	8002d2a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	781a      	ldrb	r2, [r3, #0]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	b292      	uxth	r2, r2
 8002d22:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	3301      	adds	r3, #1
 8002d28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	3b01      	subs	r3, #1
 8002d34:	b29a      	uxth	r2, r3
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d1cb      	bne.n	8002ce0 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	9300      	str	r3, [sp, #0]
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	2140      	movs	r1, #64	; 0x40
 8002d52:	68f8      	ldr	r0, [r7, #12]
 8002d54:	f000 fcdd 	bl	8003712 <UART_WaitOnFlagUntilTimeout>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e005      	b.n	8002d6e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2220      	movs	r2, #32
 8002d66:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	e000      	b.n	8002d6e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8002d6c:	2302      	movs	r3, #2
  }
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3720      	adds	r7, #32
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
	...

08002d78 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b088      	sub	sp, #32
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	69db      	ldr	r3, [r3, #28]
 8002d86:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002d98:	69fa      	ldr	r2, [r7, #28]
 8002d9a:	f640 030f 	movw	r3, #2063	; 0x80f
 8002d9e:	4013      	ands	r3, r2
 8002da0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d113      	bne.n	8002dd0 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	f003 0320 	and.w	r3, r3, #32
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d00e      	beq.n	8002dd0 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	f003 0320 	and.w	r3, r3, #32
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d009      	beq.n	8002dd0 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	f000 8114 	beq.w	8002fee <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	4798      	blx	r3
      }
      return;
 8002dce:	e10e      	b.n	8002fee <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	f000 80d6 	beq.w	8002f84 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d105      	bne.n	8002dee <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002de2:	69ba      	ldr	r2, [r7, #24]
 8002de4:	4b86      	ldr	r3, [pc, #536]	; (8003000 <HAL_UART_IRQHandler+0x288>)
 8002de6:	4013      	ands	r3, r2
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	f000 80cb 	beq.w	8002f84 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	f003 0301 	and.w	r3, r3, #1
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d00e      	beq.n	8002e16 <HAL_UART_IRQHandler+0x9e>
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d009      	beq.n	8002e16 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	2201      	movs	r2, #1
 8002e08:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e0e:	f043 0201 	orr.w	r2, r3, #1
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	f003 0302 	and.w	r3, r3, #2
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d00e      	beq.n	8002e3e <HAL_UART_IRQHandler+0xc6>
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	f003 0301 	and.w	r3, r3, #1
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d009      	beq.n	8002e3e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2202      	movs	r2, #2
 8002e30:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e36:	f043 0204 	orr.w	r2, r3, #4
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	f003 0304 	and.w	r3, r3, #4
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00e      	beq.n	8002e66 <HAL_UART_IRQHandler+0xee>
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d009      	beq.n	8002e66 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2204      	movs	r2, #4
 8002e58:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e5e:	f043 0202 	orr.w	r2, r3, #2
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	f003 0308 	and.w	r3, r3, #8
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d013      	beq.n	8002e98 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	f003 0320 	and.w	r3, r3, #32
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d104      	bne.n	8002e84 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d009      	beq.n	8002e98 <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2208      	movs	r2, #8
 8002e8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e90:	f043 0208 	orr.w	r2, r3, #8
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d00f      	beq.n	8002ec2 <HAL_UART_IRQHandler+0x14a>
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d00a      	beq.n	8002ec2 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002eb4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002eba:	f043 0220 	orr.w	r2, r3, #32
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	f000 8093 	beq.w	8002ff2 <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	f003 0320 	and.w	r3, r3, #32
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d00c      	beq.n	8002ef0 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	f003 0320 	and.w	r3, r3, #32
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d007      	beq.n	8002ef0 <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d003      	beq.n	8002ef0 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ef4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f00:	2b40      	cmp	r3, #64	; 0x40
 8002f02:	d004      	beq.n	8002f0e <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d031      	beq.n	8002f72 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f000 fc7a 	bl	8003808 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f1e:	2b40      	cmp	r3, #64	; 0x40
 8002f20:	d123      	bne.n	8002f6a <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	689a      	ldr	r2, [r3, #8]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f30:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d013      	beq.n	8002f62 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f3e:	4a31      	ldr	r2, [pc, #196]	; (8003004 <HAL_UART_IRQHandler+0x28c>)
 8002f40:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7fe f935 	bl	80011b6 <HAL_DMA_Abort_IT>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d016      	beq.n	8002f80 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002f5c:	4610      	mov	r0, r2
 8002f5e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f60:	e00e      	b.n	8002f80 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 f85a 	bl	800301c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f68:	e00a      	b.n	8002f80 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f000 f856 	bl	800301c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f70:	e006      	b.n	8002f80 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f000 f852 	bl	800301c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8002f7e:	e038      	b.n	8002ff2 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f80:	bf00      	nop
    return;
 8002f82:	e036      	b.n	8002ff2 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00d      	beq.n	8002faa <HAL_UART_IRQHandler+0x232>
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d008      	beq.n	8002faa <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002fa0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 fc7f 	bl	80038a6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002fa8:	e026      	b.n	8002ff8 <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d00d      	beq.n	8002fd0 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d008      	beq.n	8002fd0 <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d017      	beq.n	8002ff6 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	4798      	blx	r3
    }
    return;
 8002fce:	e012      	b.n	8002ff6 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d00e      	beq.n	8002ff8 <HAL_UART_IRQHandler+0x280>
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d009      	beq.n	8002ff8 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f000 fc45 	bl	8003874 <UART_EndTransmit_IT>
    return;
 8002fea:	bf00      	nop
 8002fec:	e004      	b.n	8002ff8 <HAL_UART_IRQHandler+0x280>
      return;
 8002fee:	bf00      	nop
 8002ff0:	e002      	b.n	8002ff8 <HAL_UART_IRQHandler+0x280>
    return;
 8002ff2:	bf00      	nop
 8002ff4:	e000      	b.n	8002ff8 <HAL_UART_IRQHandler+0x280>
    return;
 8002ff6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8002ff8:	3720      	adds	r7, #32
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	04000120 	.word	0x04000120
 8003004:	08003849 	.word	0x08003849

08003008 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003010:	bf00      	nop
 8003012:	370c      	adds	r7, #12
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003024:	bf00      	nop
 8003026:	370c      	adds	r7, #12
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr

08003030 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003030:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003034:	b088      	sub	sp, #32
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800303a:	2300      	movs	r3, #0
 800303c:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	689a      	ldr	r2, [r3, #8]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	431a      	orrs	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	695b      	ldr	r3, [r3, #20]
 800304c:	431a      	orrs	r2, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	69db      	ldr	r3, [r3, #28]
 8003052:	4313      	orrs	r3, r2
 8003054:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	4bac      	ldr	r3, [pc, #688]	; (8003310 <UART_SetConfig+0x2e0>)
 800305e:	4013      	ands	r3, r2
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	6812      	ldr	r2, [r2, #0]
 8003064:	69f9      	ldr	r1, [r7, #28]
 8003066:	430b      	orrs	r3, r1
 8003068:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	68da      	ldr	r2, [r3, #12]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	430a      	orrs	r2, r1
 800307e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	699b      	ldr	r3, [r3, #24]
 8003084:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4aa2      	ldr	r2, [pc, #648]	; (8003314 <UART_SetConfig+0x2e4>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d004      	beq.n	800309a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a1b      	ldr	r3, [r3, #32]
 8003094:	69fa      	ldr	r2, [r7, #28]
 8003096:	4313      	orrs	r3, r2
 8003098:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	69fa      	ldr	r2, [r7, #28]
 80030aa:	430a      	orrs	r2, r1
 80030ac:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a99      	ldr	r2, [pc, #612]	; (8003318 <UART_SetConfig+0x2e8>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d121      	bne.n	80030fc <UART_SetConfig+0xcc>
 80030b8:	4b98      	ldr	r3, [pc, #608]	; (800331c <UART_SetConfig+0x2ec>)
 80030ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030be:	f003 0303 	and.w	r3, r3, #3
 80030c2:	2b03      	cmp	r3, #3
 80030c4:	d816      	bhi.n	80030f4 <UART_SetConfig+0xc4>
 80030c6:	a201      	add	r2, pc, #4	; (adr r2, 80030cc <UART_SetConfig+0x9c>)
 80030c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030cc:	080030dd 	.word	0x080030dd
 80030d0:	080030e9 	.word	0x080030e9
 80030d4:	080030e3 	.word	0x080030e3
 80030d8:	080030ef 	.word	0x080030ef
 80030dc:	2301      	movs	r3, #1
 80030de:	76fb      	strb	r3, [r7, #27]
 80030e0:	e0e8      	b.n	80032b4 <UART_SetConfig+0x284>
 80030e2:	2302      	movs	r3, #2
 80030e4:	76fb      	strb	r3, [r7, #27]
 80030e6:	e0e5      	b.n	80032b4 <UART_SetConfig+0x284>
 80030e8:	2304      	movs	r3, #4
 80030ea:	76fb      	strb	r3, [r7, #27]
 80030ec:	e0e2      	b.n	80032b4 <UART_SetConfig+0x284>
 80030ee:	2308      	movs	r3, #8
 80030f0:	76fb      	strb	r3, [r7, #27]
 80030f2:	e0df      	b.n	80032b4 <UART_SetConfig+0x284>
 80030f4:	2310      	movs	r3, #16
 80030f6:	76fb      	strb	r3, [r7, #27]
 80030f8:	bf00      	nop
 80030fa:	e0db      	b.n	80032b4 <UART_SetConfig+0x284>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a87      	ldr	r2, [pc, #540]	; (8003320 <UART_SetConfig+0x2f0>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d134      	bne.n	8003170 <UART_SetConfig+0x140>
 8003106:	4b85      	ldr	r3, [pc, #532]	; (800331c <UART_SetConfig+0x2ec>)
 8003108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800310c:	f003 030c 	and.w	r3, r3, #12
 8003110:	2b0c      	cmp	r3, #12
 8003112:	d829      	bhi.n	8003168 <UART_SetConfig+0x138>
 8003114:	a201      	add	r2, pc, #4	; (adr r2, 800311c <UART_SetConfig+0xec>)
 8003116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800311a:	bf00      	nop
 800311c:	08003151 	.word	0x08003151
 8003120:	08003169 	.word	0x08003169
 8003124:	08003169 	.word	0x08003169
 8003128:	08003169 	.word	0x08003169
 800312c:	0800315d 	.word	0x0800315d
 8003130:	08003169 	.word	0x08003169
 8003134:	08003169 	.word	0x08003169
 8003138:	08003169 	.word	0x08003169
 800313c:	08003157 	.word	0x08003157
 8003140:	08003169 	.word	0x08003169
 8003144:	08003169 	.word	0x08003169
 8003148:	08003169 	.word	0x08003169
 800314c:	08003163 	.word	0x08003163
 8003150:	2300      	movs	r3, #0
 8003152:	76fb      	strb	r3, [r7, #27]
 8003154:	e0ae      	b.n	80032b4 <UART_SetConfig+0x284>
 8003156:	2302      	movs	r3, #2
 8003158:	76fb      	strb	r3, [r7, #27]
 800315a:	e0ab      	b.n	80032b4 <UART_SetConfig+0x284>
 800315c:	2304      	movs	r3, #4
 800315e:	76fb      	strb	r3, [r7, #27]
 8003160:	e0a8      	b.n	80032b4 <UART_SetConfig+0x284>
 8003162:	2308      	movs	r3, #8
 8003164:	76fb      	strb	r3, [r7, #27]
 8003166:	e0a5      	b.n	80032b4 <UART_SetConfig+0x284>
 8003168:	2310      	movs	r3, #16
 800316a:	76fb      	strb	r3, [r7, #27]
 800316c:	bf00      	nop
 800316e:	e0a1      	b.n	80032b4 <UART_SetConfig+0x284>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a6b      	ldr	r2, [pc, #428]	; (8003324 <UART_SetConfig+0x2f4>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d120      	bne.n	80031bc <UART_SetConfig+0x18c>
 800317a:	4b68      	ldr	r3, [pc, #416]	; (800331c <UART_SetConfig+0x2ec>)
 800317c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003180:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003184:	2b10      	cmp	r3, #16
 8003186:	d00f      	beq.n	80031a8 <UART_SetConfig+0x178>
 8003188:	2b10      	cmp	r3, #16
 800318a:	d802      	bhi.n	8003192 <UART_SetConfig+0x162>
 800318c:	2b00      	cmp	r3, #0
 800318e:	d005      	beq.n	800319c <UART_SetConfig+0x16c>
 8003190:	e010      	b.n	80031b4 <UART_SetConfig+0x184>
 8003192:	2b20      	cmp	r3, #32
 8003194:	d005      	beq.n	80031a2 <UART_SetConfig+0x172>
 8003196:	2b30      	cmp	r3, #48	; 0x30
 8003198:	d009      	beq.n	80031ae <UART_SetConfig+0x17e>
 800319a:	e00b      	b.n	80031b4 <UART_SetConfig+0x184>
 800319c:	2300      	movs	r3, #0
 800319e:	76fb      	strb	r3, [r7, #27]
 80031a0:	e088      	b.n	80032b4 <UART_SetConfig+0x284>
 80031a2:	2302      	movs	r3, #2
 80031a4:	76fb      	strb	r3, [r7, #27]
 80031a6:	e085      	b.n	80032b4 <UART_SetConfig+0x284>
 80031a8:	2304      	movs	r3, #4
 80031aa:	76fb      	strb	r3, [r7, #27]
 80031ac:	e082      	b.n	80032b4 <UART_SetConfig+0x284>
 80031ae:	2308      	movs	r3, #8
 80031b0:	76fb      	strb	r3, [r7, #27]
 80031b2:	e07f      	b.n	80032b4 <UART_SetConfig+0x284>
 80031b4:	2310      	movs	r3, #16
 80031b6:	76fb      	strb	r3, [r7, #27]
 80031b8:	bf00      	nop
 80031ba:	e07b      	b.n	80032b4 <UART_SetConfig+0x284>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a59      	ldr	r2, [pc, #356]	; (8003328 <UART_SetConfig+0x2f8>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d120      	bne.n	8003208 <UART_SetConfig+0x1d8>
 80031c6:	4b55      	ldr	r3, [pc, #340]	; (800331c <UART_SetConfig+0x2ec>)
 80031c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031cc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80031d0:	2b40      	cmp	r3, #64	; 0x40
 80031d2:	d00f      	beq.n	80031f4 <UART_SetConfig+0x1c4>
 80031d4:	2b40      	cmp	r3, #64	; 0x40
 80031d6:	d802      	bhi.n	80031de <UART_SetConfig+0x1ae>
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d005      	beq.n	80031e8 <UART_SetConfig+0x1b8>
 80031dc:	e010      	b.n	8003200 <UART_SetConfig+0x1d0>
 80031de:	2b80      	cmp	r3, #128	; 0x80
 80031e0:	d005      	beq.n	80031ee <UART_SetConfig+0x1be>
 80031e2:	2bc0      	cmp	r3, #192	; 0xc0
 80031e4:	d009      	beq.n	80031fa <UART_SetConfig+0x1ca>
 80031e6:	e00b      	b.n	8003200 <UART_SetConfig+0x1d0>
 80031e8:	2300      	movs	r3, #0
 80031ea:	76fb      	strb	r3, [r7, #27]
 80031ec:	e062      	b.n	80032b4 <UART_SetConfig+0x284>
 80031ee:	2302      	movs	r3, #2
 80031f0:	76fb      	strb	r3, [r7, #27]
 80031f2:	e05f      	b.n	80032b4 <UART_SetConfig+0x284>
 80031f4:	2304      	movs	r3, #4
 80031f6:	76fb      	strb	r3, [r7, #27]
 80031f8:	e05c      	b.n	80032b4 <UART_SetConfig+0x284>
 80031fa:	2308      	movs	r3, #8
 80031fc:	76fb      	strb	r3, [r7, #27]
 80031fe:	e059      	b.n	80032b4 <UART_SetConfig+0x284>
 8003200:	2310      	movs	r3, #16
 8003202:	76fb      	strb	r3, [r7, #27]
 8003204:	bf00      	nop
 8003206:	e055      	b.n	80032b4 <UART_SetConfig+0x284>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a47      	ldr	r2, [pc, #284]	; (800332c <UART_SetConfig+0x2fc>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d124      	bne.n	800325c <UART_SetConfig+0x22c>
 8003212:	4b42      	ldr	r3, [pc, #264]	; (800331c <UART_SetConfig+0x2ec>)
 8003214:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003218:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800321c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003220:	d012      	beq.n	8003248 <UART_SetConfig+0x218>
 8003222:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003226:	d802      	bhi.n	800322e <UART_SetConfig+0x1fe>
 8003228:	2b00      	cmp	r3, #0
 800322a:	d007      	beq.n	800323c <UART_SetConfig+0x20c>
 800322c:	e012      	b.n	8003254 <UART_SetConfig+0x224>
 800322e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003232:	d006      	beq.n	8003242 <UART_SetConfig+0x212>
 8003234:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003238:	d009      	beq.n	800324e <UART_SetConfig+0x21e>
 800323a:	e00b      	b.n	8003254 <UART_SetConfig+0x224>
 800323c:	2300      	movs	r3, #0
 800323e:	76fb      	strb	r3, [r7, #27]
 8003240:	e038      	b.n	80032b4 <UART_SetConfig+0x284>
 8003242:	2302      	movs	r3, #2
 8003244:	76fb      	strb	r3, [r7, #27]
 8003246:	e035      	b.n	80032b4 <UART_SetConfig+0x284>
 8003248:	2304      	movs	r3, #4
 800324a:	76fb      	strb	r3, [r7, #27]
 800324c:	e032      	b.n	80032b4 <UART_SetConfig+0x284>
 800324e:	2308      	movs	r3, #8
 8003250:	76fb      	strb	r3, [r7, #27]
 8003252:	e02f      	b.n	80032b4 <UART_SetConfig+0x284>
 8003254:	2310      	movs	r3, #16
 8003256:	76fb      	strb	r3, [r7, #27]
 8003258:	bf00      	nop
 800325a:	e02b      	b.n	80032b4 <UART_SetConfig+0x284>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a2c      	ldr	r2, [pc, #176]	; (8003314 <UART_SetConfig+0x2e4>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d124      	bne.n	80032b0 <UART_SetConfig+0x280>
 8003266:	4b2d      	ldr	r3, [pc, #180]	; (800331c <UART_SetConfig+0x2ec>)
 8003268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800326c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003270:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003274:	d012      	beq.n	800329c <UART_SetConfig+0x26c>
 8003276:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800327a:	d802      	bhi.n	8003282 <UART_SetConfig+0x252>
 800327c:	2b00      	cmp	r3, #0
 800327e:	d007      	beq.n	8003290 <UART_SetConfig+0x260>
 8003280:	e012      	b.n	80032a8 <UART_SetConfig+0x278>
 8003282:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003286:	d006      	beq.n	8003296 <UART_SetConfig+0x266>
 8003288:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800328c:	d009      	beq.n	80032a2 <UART_SetConfig+0x272>
 800328e:	e00b      	b.n	80032a8 <UART_SetConfig+0x278>
 8003290:	2300      	movs	r3, #0
 8003292:	76fb      	strb	r3, [r7, #27]
 8003294:	e00e      	b.n	80032b4 <UART_SetConfig+0x284>
 8003296:	2302      	movs	r3, #2
 8003298:	76fb      	strb	r3, [r7, #27]
 800329a:	e00b      	b.n	80032b4 <UART_SetConfig+0x284>
 800329c:	2304      	movs	r3, #4
 800329e:	76fb      	strb	r3, [r7, #27]
 80032a0:	e008      	b.n	80032b4 <UART_SetConfig+0x284>
 80032a2:	2308      	movs	r3, #8
 80032a4:	76fb      	strb	r3, [r7, #27]
 80032a6:	e005      	b.n	80032b4 <UART_SetConfig+0x284>
 80032a8:	2310      	movs	r3, #16
 80032aa:	76fb      	strb	r3, [r7, #27]
 80032ac:	bf00      	nop
 80032ae:	e001      	b.n	80032b4 <UART_SetConfig+0x284>
 80032b0:	2310      	movs	r3, #16
 80032b2:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a16      	ldr	r2, [pc, #88]	; (8003314 <UART_SetConfig+0x2e4>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	f040 8087 	bne.w	80033ce <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80032c0:	7efb      	ldrb	r3, [r7, #27]
 80032c2:	2b08      	cmp	r3, #8
 80032c4:	d836      	bhi.n	8003334 <UART_SetConfig+0x304>
 80032c6:	a201      	add	r2, pc, #4	; (adr r2, 80032cc <UART_SetConfig+0x29c>)
 80032c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032cc:	080032f1 	.word	0x080032f1
 80032d0:	08003335 	.word	0x08003335
 80032d4:	080032f9 	.word	0x080032f9
 80032d8:	08003335 	.word	0x08003335
 80032dc:	080032ff 	.word	0x080032ff
 80032e0:	08003335 	.word	0x08003335
 80032e4:	08003335 	.word	0x08003335
 80032e8:	08003335 	.word	0x08003335
 80032ec:	08003307 	.word	0x08003307
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032f0:	f7fe ff24 	bl	800213c <HAL_RCC_GetPCLK1Freq>
 80032f4:	6178      	str	r0, [r7, #20]
        break;
 80032f6:	e022      	b.n	800333e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032f8:	4b0d      	ldr	r3, [pc, #52]	; (8003330 <UART_SetConfig+0x300>)
 80032fa:	617b      	str	r3, [r7, #20]
        break;
 80032fc:	e01f      	b.n	800333e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032fe:	f7fe fe87 	bl	8002010 <HAL_RCC_GetSysClockFreq>
 8003302:	6178      	str	r0, [r7, #20]
        break;
 8003304:	e01b      	b.n	800333e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003306:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800330a:	617b      	str	r3, [r7, #20]
        break;
 800330c:	e017      	b.n	800333e <UART_SetConfig+0x30e>
 800330e:	bf00      	nop
 8003310:	efff69f3 	.word	0xefff69f3
 8003314:	40008000 	.word	0x40008000
 8003318:	40013800 	.word	0x40013800
 800331c:	40021000 	.word	0x40021000
 8003320:	40004400 	.word	0x40004400
 8003324:	40004800 	.word	0x40004800
 8003328:	40004c00 	.word	0x40004c00
 800332c:	40005000 	.word	0x40005000
 8003330:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003334:	2300      	movs	r3, #0
 8003336:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	76bb      	strb	r3, [r7, #26]
        break;
 800333c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	2b00      	cmp	r3, #0
 8003342:	f000 80f1 	beq.w	8003528 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685a      	ldr	r2, [r3, #4]
 800334a:	4613      	mov	r3, r2
 800334c:	005b      	lsls	r3, r3, #1
 800334e:	4413      	add	r3, r2
 8003350:	697a      	ldr	r2, [r7, #20]
 8003352:	429a      	cmp	r2, r3
 8003354:	d305      	bcc.n	8003362 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800335c:	697a      	ldr	r2, [r7, #20]
 800335e:	429a      	cmp	r2, r3
 8003360:	d902      	bls.n	8003368 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	76bb      	strb	r3, [r7, #26]
 8003366:	e0df      	b.n	8003528 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	4619      	mov	r1, r3
 800336c:	f04f 0200 	mov.w	r2, #0
 8003370:	f04f 0300 	mov.w	r3, #0
 8003374:	f04f 0400 	mov.w	r4, #0
 8003378:	0214      	lsls	r4, r2, #8
 800337a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800337e:	020b      	lsls	r3, r1, #8
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	6852      	ldr	r2, [r2, #4]
 8003384:	0852      	lsrs	r2, r2, #1
 8003386:	4611      	mov	r1, r2
 8003388:	f04f 0200 	mov.w	r2, #0
 800338c:	eb13 0b01 	adds.w	fp, r3, r1
 8003390:	eb44 0c02 	adc.w	ip, r4, r2
 8003394:	4658      	mov	r0, fp
 8003396:	4661      	mov	r1, ip
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f04f 0400 	mov.w	r4, #0
 80033a0:	461a      	mov	r2, r3
 80033a2:	4623      	mov	r3, r4
 80033a4:	f7fc ff64 	bl	8000270 <__aeabi_uldivmod>
 80033a8:	4603      	mov	r3, r0
 80033aa:	460c      	mov	r4, r1
 80033ac:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033b4:	d308      	bcc.n	80033c8 <UART_SetConfig+0x398>
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033bc:	d204      	bcs.n	80033c8 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	60da      	str	r2, [r3, #12]
 80033c6:	e0af      	b.n	8003528 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	76bb      	strb	r3, [r7, #26]
 80033cc:	e0ac      	b.n	8003528 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	69db      	ldr	r3, [r3, #28]
 80033d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033d6:	d15b      	bne.n	8003490 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80033d8:	7efb      	ldrb	r3, [r7, #27]
 80033da:	2b08      	cmp	r3, #8
 80033dc:	d827      	bhi.n	800342e <UART_SetConfig+0x3fe>
 80033de:	a201      	add	r2, pc, #4	; (adr r2, 80033e4 <UART_SetConfig+0x3b4>)
 80033e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033e4:	08003409 	.word	0x08003409
 80033e8:	08003411 	.word	0x08003411
 80033ec:	08003419 	.word	0x08003419
 80033f0:	0800342f 	.word	0x0800342f
 80033f4:	0800341f 	.word	0x0800341f
 80033f8:	0800342f 	.word	0x0800342f
 80033fc:	0800342f 	.word	0x0800342f
 8003400:	0800342f 	.word	0x0800342f
 8003404:	08003427 	.word	0x08003427
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003408:	f7fe fe98 	bl	800213c <HAL_RCC_GetPCLK1Freq>
 800340c:	6178      	str	r0, [r7, #20]
        break;
 800340e:	e013      	b.n	8003438 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003410:	f7fe feaa 	bl	8002168 <HAL_RCC_GetPCLK2Freq>
 8003414:	6178      	str	r0, [r7, #20]
        break;
 8003416:	e00f      	b.n	8003438 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003418:	4b49      	ldr	r3, [pc, #292]	; (8003540 <UART_SetConfig+0x510>)
 800341a:	617b      	str	r3, [r7, #20]
        break;
 800341c:	e00c      	b.n	8003438 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800341e:	f7fe fdf7 	bl	8002010 <HAL_RCC_GetSysClockFreq>
 8003422:	6178      	str	r0, [r7, #20]
        break;
 8003424:	e008      	b.n	8003438 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003426:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800342a:	617b      	str	r3, [r7, #20]
        break;
 800342c:	e004      	b.n	8003438 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800342e:	2300      	movs	r3, #0
 8003430:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	76bb      	strb	r3, [r7, #26]
        break;
 8003436:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d074      	beq.n	8003528 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	005a      	lsls	r2, r3, #1
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	085b      	lsrs	r3, r3, #1
 8003448:	441a      	add	r2, r3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003452:	b29b      	uxth	r3, r3
 8003454:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	2b0f      	cmp	r3, #15
 800345a:	d916      	bls.n	800348a <UART_SetConfig+0x45a>
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003462:	d212      	bcs.n	800348a <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	b29b      	uxth	r3, r3
 8003468:	f023 030f 	bic.w	r3, r3, #15
 800346c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	085b      	lsrs	r3, r3, #1
 8003472:	b29b      	uxth	r3, r3
 8003474:	f003 0307 	and.w	r3, r3, #7
 8003478:	b29a      	uxth	r2, r3
 800347a:	89fb      	ldrh	r3, [r7, #14]
 800347c:	4313      	orrs	r3, r2
 800347e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	89fa      	ldrh	r2, [r7, #14]
 8003486:	60da      	str	r2, [r3, #12]
 8003488:	e04e      	b.n	8003528 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	76bb      	strb	r3, [r7, #26]
 800348e:	e04b      	b.n	8003528 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003490:	7efb      	ldrb	r3, [r7, #27]
 8003492:	2b08      	cmp	r3, #8
 8003494:	d827      	bhi.n	80034e6 <UART_SetConfig+0x4b6>
 8003496:	a201      	add	r2, pc, #4	; (adr r2, 800349c <UART_SetConfig+0x46c>)
 8003498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800349c:	080034c1 	.word	0x080034c1
 80034a0:	080034c9 	.word	0x080034c9
 80034a4:	080034d1 	.word	0x080034d1
 80034a8:	080034e7 	.word	0x080034e7
 80034ac:	080034d7 	.word	0x080034d7
 80034b0:	080034e7 	.word	0x080034e7
 80034b4:	080034e7 	.word	0x080034e7
 80034b8:	080034e7 	.word	0x080034e7
 80034bc:	080034df 	.word	0x080034df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034c0:	f7fe fe3c 	bl	800213c <HAL_RCC_GetPCLK1Freq>
 80034c4:	6178      	str	r0, [r7, #20]
        break;
 80034c6:	e013      	b.n	80034f0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034c8:	f7fe fe4e 	bl	8002168 <HAL_RCC_GetPCLK2Freq>
 80034cc:	6178      	str	r0, [r7, #20]
        break;
 80034ce:	e00f      	b.n	80034f0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034d0:	4b1b      	ldr	r3, [pc, #108]	; (8003540 <UART_SetConfig+0x510>)
 80034d2:	617b      	str	r3, [r7, #20]
        break;
 80034d4:	e00c      	b.n	80034f0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034d6:	f7fe fd9b 	bl	8002010 <HAL_RCC_GetSysClockFreq>
 80034da:	6178      	str	r0, [r7, #20]
        break;
 80034dc:	e008      	b.n	80034f0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034e2:	617b      	str	r3, [r7, #20]
        break;
 80034e4:	e004      	b.n	80034f0 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80034e6:	2300      	movs	r3, #0
 80034e8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	76bb      	strb	r3, [r7, #26]
        break;
 80034ee:	bf00      	nop
    }

    if (pclk != 0U)
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d018      	beq.n	8003528 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	085a      	lsrs	r2, r3, #1
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	441a      	add	r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	fbb2 f3f3 	udiv	r3, r2, r3
 8003508:	b29b      	uxth	r3, r3
 800350a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	2b0f      	cmp	r3, #15
 8003510:	d908      	bls.n	8003524 <UART_SetConfig+0x4f4>
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003518:	d204      	bcs.n	8003524 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	693a      	ldr	r2, [r7, #16]
 8003520:	60da      	str	r2, [r3, #12]
 8003522:	e001      	b.n	8003528 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003534:	7ebb      	ldrb	r3, [r7, #26]
}
 8003536:	4618      	mov	r0, r3
 8003538:	3720      	adds	r7, #32
 800353a:	46bd      	mov	sp, r7
 800353c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8003540:	00f42400 	.word	0x00f42400

08003544 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003550:	f003 0301 	and.w	r3, r3, #1
 8003554:	2b00      	cmp	r3, #0
 8003556:	d00a      	beq.n	800356e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	430a      	orrs	r2, r1
 800356c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003572:	f003 0302 	and.w	r3, r3, #2
 8003576:	2b00      	cmp	r3, #0
 8003578:	d00a      	beq.n	8003590 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	430a      	orrs	r2, r1
 800358e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003594:	f003 0304 	and.w	r3, r3, #4
 8003598:	2b00      	cmp	r3, #0
 800359a:	d00a      	beq.n	80035b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	430a      	orrs	r2, r1
 80035b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b6:	f003 0308 	and.w	r3, r3, #8
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00a      	beq.n	80035d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	430a      	orrs	r2, r1
 80035d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d8:	f003 0310 	and.w	r3, r3, #16
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d00a      	beq.n	80035f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	430a      	orrs	r2, r1
 80035f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fa:	f003 0320 	and.w	r3, r3, #32
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00a      	beq.n	8003618 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	430a      	orrs	r2, r1
 8003616:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003620:	2b00      	cmp	r3, #0
 8003622:	d01a      	beq.n	800365a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	430a      	orrs	r2, r1
 8003638:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003642:	d10a      	bne.n	800365a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	430a      	orrs	r2, r1
 8003658:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003662:	2b00      	cmp	r3, #0
 8003664:	d00a      	beq.n	800367c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	430a      	orrs	r2, r1
 800367a:	605a      	str	r2, [r3, #4]
  }
}
 800367c:	bf00      	nop
 800367e:	370c      	adds	r7, #12
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr

08003688 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b086      	sub	sp, #24
 800368c:	af02      	add	r7, sp, #8
 800368e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003696:	f7fd fc4f 	bl	8000f38 <HAL_GetTick>
 800369a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0308 	and.w	r3, r3, #8
 80036a6:	2b08      	cmp	r3, #8
 80036a8:	d10e      	bne.n	80036c8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036aa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80036ae:	9300      	str	r3, [sp, #0]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f000 f82a 	bl	8003712 <UART_WaitOnFlagUntilTimeout>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d001      	beq.n	80036c8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e020      	b.n	800370a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0304 	and.w	r3, r3, #4
 80036d2:	2b04      	cmp	r3, #4
 80036d4:	d10e      	bne.n	80036f4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036d6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80036da:	9300      	str	r3, [sp, #0]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2200      	movs	r2, #0
 80036e0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f000 f814 	bl	8003712 <UART_WaitOnFlagUntilTimeout>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d001      	beq.n	80036f4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	e00a      	b.n	800370a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2220      	movs	r2, #32
 80036f8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2220      	movs	r2, #32
 80036fe:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	3710      	adds	r7, #16
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}

08003712 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003712:	b580      	push	{r7, lr}
 8003714:	b084      	sub	sp, #16
 8003716:	af00      	add	r7, sp, #0
 8003718:	60f8      	str	r0, [r7, #12]
 800371a:	60b9      	str	r1, [r7, #8]
 800371c:	603b      	str	r3, [r7, #0]
 800371e:	4613      	mov	r3, r2
 8003720:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003722:	e05d      	b.n	80037e0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800372a:	d059      	beq.n	80037e0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800372c:	f7fd fc04 	bl	8000f38 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	69ba      	ldr	r2, [r7, #24]
 8003738:	429a      	cmp	r2, r3
 800373a:	d302      	bcc.n	8003742 <UART_WaitOnFlagUntilTimeout+0x30>
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d11b      	bne.n	800377a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003750:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	689a      	ldr	r2, [r3, #8]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f022 0201 	bic.w	r2, r2, #1
 8003760:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2220      	movs	r2, #32
 8003766:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2220      	movs	r2, #32
 800376c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e042      	b.n	8003800 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0304 	and.w	r3, r3, #4
 8003784:	2b00      	cmp	r3, #0
 8003786:	d02b      	beq.n	80037e0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	69db      	ldr	r3, [r3, #28]
 800378e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003792:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003796:	d123      	bne.n	80037e0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037a0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80037b0:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	689a      	ldr	r2, [r3, #8]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f022 0201 	bic.w	r2, r2, #1
 80037c0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2220      	movs	r2, #32
 80037c6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2220      	movs	r2, #32
 80037cc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2220      	movs	r2, #32
 80037d2:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2200      	movs	r2, #0
 80037d8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e00f      	b.n	8003800 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	69da      	ldr	r2, [r3, #28]
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	4013      	ands	r3, r2
 80037ea:	68ba      	ldr	r2, [r7, #8]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	bf0c      	ite	eq
 80037f0:	2301      	moveq	r3, #1
 80037f2:	2300      	movne	r3, #0
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	461a      	mov	r2, r3
 80037f8:	79fb      	ldrb	r3, [r7, #7]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d092      	beq.n	8003724 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037fe:	2300      	movs	r3, #0
}
 8003800:	4618      	mov	r0, r3
 8003802:	3710      	adds	r7, #16
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800381e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	689a      	ldr	r2, [r3, #8]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f022 0201 	bic.w	r2, r2, #1
 800382e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2220      	movs	r2, #32
 8003834:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	661a      	str	r2, [r3, #96]	; 0x60
}
 800383c:	bf00      	nop
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003854:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2200      	movs	r2, #0
 800385a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2200      	movs	r2, #0
 8003862:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003866:	68f8      	ldr	r0, [r7, #12]
 8003868:	f7ff fbd8 	bl	800301c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800386c:	bf00      	nop
 800386e:	3710      	adds	r7, #16
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800388a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2220      	movs	r2, #32
 8003890:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f7ff fbb5 	bl	8003008 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800389e:	bf00      	nop
 80038a0:	3708      	adds	r7, #8
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}

080038a6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80038a6:	b480      	push	{r7}
 80038a8:	b083      	sub	sp, #12
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80038ae:	bf00      	nop
 80038b0:	370c      	adds	r7, #12
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
	...

080038bc <__errno>:
 80038bc:	4b01      	ldr	r3, [pc, #4]	; (80038c4 <__errno+0x8>)
 80038be:	6818      	ldr	r0, [r3, #0]
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	2000000c 	.word	0x2000000c

080038c8 <__libc_init_array>:
 80038c8:	b570      	push	{r4, r5, r6, lr}
 80038ca:	4e0d      	ldr	r6, [pc, #52]	; (8003900 <__libc_init_array+0x38>)
 80038cc:	4c0d      	ldr	r4, [pc, #52]	; (8003904 <__libc_init_array+0x3c>)
 80038ce:	1ba4      	subs	r4, r4, r6
 80038d0:	10a4      	asrs	r4, r4, #2
 80038d2:	2500      	movs	r5, #0
 80038d4:	42a5      	cmp	r5, r4
 80038d6:	d109      	bne.n	80038ec <__libc_init_array+0x24>
 80038d8:	4e0b      	ldr	r6, [pc, #44]	; (8003908 <__libc_init_array+0x40>)
 80038da:	4c0c      	ldr	r4, [pc, #48]	; (800390c <__libc_init_array+0x44>)
 80038dc:	f000 ff04 	bl	80046e8 <_init>
 80038e0:	1ba4      	subs	r4, r4, r6
 80038e2:	10a4      	asrs	r4, r4, #2
 80038e4:	2500      	movs	r5, #0
 80038e6:	42a5      	cmp	r5, r4
 80038e8:	d105      	bne.n	80038f6 <__libc_init_array+0x2e>
 80038ea:	bd70      	pop	{r4, r5, r6, pc}
 80038ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80038f0:	4798      	blx	r3
 80038f2:	3501      	adds	r5, #1
 80038f4:	e7ee      	b.n	80038d4 <__libc_init_array+0xc>
 80038f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80038fa:	4798      	blx	r3
 80038fc:	3501      	adds	r5, #1
 80038fe:	e7f2      	b.n	80038e6 <__libc_init_array+0x1e>
 8003900:	080047f8 	.word	0x080047f8
 8003904:	080047f8 	.word	0x080047f8
 8003908:	080047f8 	.word	0x080047f8
 800390c:	080047fc 	.word	0x080047fc

08003910 <memset>:
 8003910:	4402      	add	r2, r0
 8003912:	4603      	mov	r3, r0
 8003914:	4293      	cmp	r3, r2
 8003916:	d100      	bne.n	800391a <memset+0xa>
 8003918:	4770      	bx	lr
 800391a:	f803 1b01 	strb.w	r1, [r3], #1
 800391e:	e7f9      	b.n	8003914 <memset+0x4>

08003920 <iprintf>:
 8003920:	b40f      	push	{r0, r1, r2, r3}
 8003922:	4b0a      	ldr	r3, [pc, #40]	; (800394c <iprintf+0x2c>)
 8003924:	b513      	push	{r0, r1, r4, lr}
 8003926:	681c      	ldr	r4, [r3, #0]
 8003928:	b124      	cbz	r4, 8003934 <iprintf+0x14>
 800392a:	69a3      	ldr	r3, [r4, #24]
 800392c:	b913      	cbnz	r3, 8003934 <iprintf+0x14>
 800392e:	4620      	mov	r0, r4
 8003930:	f000 f84e 	bl	80039d0 <__sinit>
 8003934:	ab05      	add	r3, sp, #20
 8003936:	9a04      	ldr	r2, [sp, #16]
 8003938:	68a1      	ldr	r1, [r4, #8]
 800393a:	9301      	str	r3, [sp, #4]
 800393c:	4620      	mov	r0, r4
 800393e:	f000 f955 	bl	8003bec <_vfiprintf_r>
 8003942:	b002      	add	sp, #8
 8003944:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003948:	b004      	add	sp, #16
 800394a:	4770      	bx	lr
 800394c:	2000000c 	.word	0x2000000c

08003950 <std>:
 8003950:	2300      	movs	r3, #0
 8003952:	b510      	push	{r4, lr}
 8003954:	4604      	mov	r4, r0
 8003956:	e9c0 3300 	strd	r3, r3, [r0]
 800395a:	6083      	str	r3, [r0, #8]
 800395c:	8181      	strh	r1, [r0, #12]
 800395e:	6643      	str	r3, [r0, #100]	; 0x64
 8003960:	81c2      	strh	r2, [r0, #14]
 8003962:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003966:	6183      	str	r3, [r0, #24]
 8003968:	4619      	mov	r1, r3
 800396a:	2208      	movs	r2, #8
 800396c:	305c      	adds	r0, #92	; 0x5c
 800396e:	f7ff ffcf 	bl	8003910 <memset>
 8003972:	4b05      	ldr	r3, [pc, #20]	; (8003988 <std+0x38>)
 8003974:	6263      	str	r3, [r4, #36]	; 0x24
 8003976:	4b05      	ldr	r3, [pc, #20]	; (800398c <std+0x3c>)
 8003978:	62a3      	str	r3, [r4, #40]	; 0x28
 800397a:	4b05      	ldr	r3, [pc, #20]	; (8003990 <std+0x40>)
 800397c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800397e:	4b05      	ldr	r3, [pc, #20]	; (8003994 <std+0x44>)
 8003980:	6224      	str	r4, [r4, #32]
 8003982:	6323      	str	r3, [r4, #48]	; 0x30
 8003984:	bd10      	pop	{r4, pc}
 8003986:	bf00      	nop
 8003988:	08004149 	.word	0x08004149
 800398c:	0800416b 	.word	0x0800416b
 8003990:	080041a3 	.word	0x080041a3
 8003994:	080041c7 	.word	0x080041c7

08003998 <_cleanup_r>:
 8003998:	4901      	ldr	r1, [pc, #4]	; (80039a0 <_cleanup_r+0x8>)
 800399a:	f000 b885 	b.w	8003aa8 <_fwalk_reent>
 800399e:	bf00      	nop
 80039a0:	080044a1 	.word	0x080044a1

080039a4 <__sfmoreglue>:
 80039a4:	b570      	push	{r4, r5, r6, lr}
 80039a6:	1e4a      	subs	r2, r1, #1
 80039a8:	2568      	movs	r5, #104	; 0x68
 80039aa:	4355      	muls	r5, r2
 80039ac:	460e      	mov	r6, r1
 80039ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80039b2:	f000 f897 	bl	8003ae4 <_malloc_r>
 80039b6:	4604      	mov	r4, r0
 80039b8:	b140      	cbz	r0, 80039cc <__sfmoreglue+0x28>
 80039ba:	2100      	movs	r1, #0
 80039bc:	e9c0 1600 	strd	r1, r6, [r0]
 80039c0:	300c      	adds	r0, #12
 80039c2:	60a0      	str	r0, [r4, #8]
 80039c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80039c8:	f7ff ffa2 	bl	8003910 <memset>
 80039cc:	4620      	mov	r0, r4
 80039ce:	bd70      	pop	{r4, r5, r6, pc}

080039d0 <__sinit>:
 80039d0:	6983      	ldr	r3, [r0, #24]
 80039d2:	b510      	push	{r4, lr}
 80039d4:	4604      	mov	r4, r0
 80039d6:	bb33      	cbnz	r3, 8003a26 <__sinit+0x56>
 80039d8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80039dc:	6503      	str	r3, [r0, #80]	; 0x50
 80039de:	4b12      	ldr	r3, [pc, #72]	; (8003a28 <__sinit+0x58>)
 80039e0:	4a12      	ldr	r2, [pc, #72]	; (8003a2c <__sinit+0x5c>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	6282      	str	r2, [r0, #40]	; 0x28
 80039e6:	4298      	cmp	r0, r3
 80039e8:	bf04      	itt	eq
 80039ea:	2301      	moveq	r3, #1
 80039ec:	6183      	streq	r3, [r0, #24]
 80039ee:	f000 f81f 	bl	8003a30 <__sfp>
 80039f2:	6060      	str	r0, [r4, #4]
 80039f4:	4620      	mov	r0, r4
 80039f6:	f000 f81b 	bl	8003a30 <__sfp>
 80039fa:	60a0      	str	r0, [r4, #8]
 80039fc:	4620      	mov	r0, r4
 80039fe:	f000 f817 	bl	8003a30 <__sfp>
 8003a02:	2200      	movs	r2, #0
 8003a04:	60e0      	str	r0, [r4, #12]
 8003a06:	2104      	movs	r1, #4
 8003a08:	6860      	ldr	r0, [r4, #4]
 8003a0a:	f7ff ffa1 	bl	8003950 <std>
 8003a0e:	2201      	movs	r2, #1
 8003a10:	2109      	movs	r1, #9
 8003a12:	68a0      	ldr	r0, [r4, #8]
 8003a14:	f7ff ff9c 	bl	8003950 <std>
 8003a18:	2202      	movs	r2, #2
 8003a1a:	2112      	movs	r1, #18
 8003a1c:	68e0      	ldr	r0, [r4, #12]
 8003a1e:	f7ff ff97 	bl	8003950 <std>
 8003a22:	2301      	movs	r3, #1
 8003a24:	61a3      	str	r3, [r4, #24]
 8003a26:	bd10      	pop	{r4, pc}
 8003a28:	08004758 	.word	0x08004758
 8003a2c:	08003999 	.word	0x08003999

08003a30 <__sfp>:
 8003a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a32:	4b1b      	ldr	r3, [pc, #108]	; (8003aa0 <__sfp+0x70>)
 8003a34:	681e      	ldr	r6, [r3, #0]
 8003a36:	69b3      	ldr	r3, [r6, #24]
 8003a38:	4607      	mov	r7, r0
 8003a3a:	b913      	cbnz	r3, 8003a42 <__sfp+0x12>
 8003a3c:	4630      	mov	r0, r6
 8003a3e:	f7ff ffc7 	bl	80039d0 <__sinit>
 8003a42:	3648      	adds	r6, #72	; 0x48
 8003a44:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003a48:	3b01      	subs	r3, #1
 8003a4a:	d503      	bpl.n	8003a54 <__sfp+0x24>
 8003a4c:	6833      	ldr	r3, [r6, #0]
 8003a4e:	b133      	cbz	r3, 8003a5e <__sfp+0x2e>
 8003a50:	6836      	ldr	r6, [r6, #0]
 8003a52:	e7f7      	b.n	8003a44 <__sfp+0x14>
 8003a54:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003a58:	b16d      	cbz	r5, 8003a76 <__sfp+0x46>
 8003a5a:	3468      	adds	r4, #104	; 0x68
 8003a5c:	e7f4      	b.n	8003a48 <__sfp+0x18>
 8003a5e:	2104      	movs	r1, #4
 8003a60:	4638      	mov	r0, r7
 8003a62:	f7ff ff9f 	bl	80039a4 <__sfmoreglue>
 8003a66:	6030      	str	r0, [r6, #0]
 8003a68:	2800      	cmp	r0, #0
 8003a6a:	d1f1      	bne.n	8003a50 <__sfp+0x20>
 8003a6c:	230c      	movs	r3, #12
 8003a6e:	603b      	str	r3, [r7, #0]
 8003a70:	4604      	mov	r4, r0
 8003a72:	4620      	mov	r0, r4
 8003a74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a76:	4b0b      	ldr	r3, [pc, #44]	; (8003aa4 <__sfp+0x74>)
 8003a78:	6665      	str	r5, [r4, #100]	; 0x64
 8003a7a:	e9c4 5500 	strd	r5, r5, [r4]
 8003a7e:	60a5      	str	r5, [r4, #8]
 8003a80:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003a84:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003a88:	2208      	movs	r2, #8
 8003a8a:	4629      	mov	r1, r5
 8003a8c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003a90:	f7ff ff3e 	bl	8003910 <memset>
 8003a94:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003a98:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003a9c:	e7e9      	b.n	8003a72 <__sfp+0x42>
 8003a9e:	bf00      	nop
 8003aa0:	08004758 	.word	0x08004758
 8003aa4:	ffff0001 	.word	0xffff0001

08003aa8 <_fwalk_reent>:
 8003aa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003aac:	4680      	mov	r8, r0
 8003aae:	4689      	mov	r9, r1
 8003ab0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003ab4:	2600      	movs	r6, #0
 8003ab6:	b914      	cbnz	r4, 8003abe <_fwalk_reent+0x16>
 8003ab8:	4630      	mov	r0, r6
 8003aba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003abe:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8003ac2:	3f01      	subs	r7, #1
 8003ac4:	d501      	bpl.n	8003aca <_fwalk_reent+0x22>
 8003ac6:	6824      	ldr	r4, [r4, #0]
 8003ac8:	e7f5      	b.n	8003ab6 <_fwalk_reent+0xe>
 8003aca:	89ab      	ldrh	r3, [r5, #12]
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d907      	bls.n	8003ae0 <_fwalk_reent+0x38>
 8003ad0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	d003      	beq.n	8003ae0 <_fwalk_reent+0x38>
 8003ad8:	4629      	mov	r1, r5
 8003ada:	4640      	mov	r0, r8
 8003adc:	47c8      	blx	r9
 8003ade:	4306      	orrs	r6, r0
 8003ae0:	3568      	adds	r5, #104	; 0x68
 8003ae2:	e7ee      	b.n	8003ac2 <_fwalk_reent+0x1a>

08003ae4 <_malloc_r>:
 8003ae4:	b570      	push	{r4, r5, r6, lr}
 8003ae6:	1ccd      	adds	r5, r1, #3
 8003ae8:	f025 0503 	bic.w	r5, r5, #3
 8003aec:	3508      	adds	r5, #8
 8003aee:	2d0c      	cmp	r5, #12
 8003af0:	bf38      	it	cc
 8003af2:	250c      	movcc	r5, #12
 8003af4:	2d00      	cmp	r5, #0
 8003af6:	4606      	mov	r6, r0
 8003af8:	db01      	blt.n	8003afe <_malloc_r+0x1a>
 8003afa:	42a9      	cmp	r1, r5
 8003afc:	d903      	bls.n	8003b06 <_malloc_r+0x22>
 8003afe:	230c      	movs	r3, #12
 8003b00:	6033      	str	r3, [r6, #0]
 8003b02:	2000      	movs	r0, #0
 8003b04:	bd70      	pop	{r4, r5, r6, pc}
 8003b06:	f000 fd6b 	bl	80045e0 <__malloc_lock>
 8003b0a:	4a21      	ldr	r2, [pc, #132]	; (8003b90 <_malloc_r+0xac>)
 8003b0c:	6814      	ldr	r4, [r2, #0]
 8003b0e:	4621      	mov	r1, r4
 8003b10:	b991      	cbnz	r1, 8003b38 <_malloc_r+0x54>
 8003b12:	4c20      	ldr	r4, [pc, #128]	; (8003b94 <_malloc_r+0xb0>)
 8003b14:	6823      	ldr	r3, [r4, #0]
 8003b16:	b91b      	cbnz	r3, 8003b20 <_malloc_r+0x3c>
 8003b18:	4630      	mov	r0, r6
 8003b1a:	f000 fb05 	bl	8004128 <_sbrk_r>
 8003b1e:	6020      	str	r0, [r4, #0]
 8003b20:	4629      	mov	r1, r5
 8003b22:	4630      	mov	r0, r6
 8003b24:	f000 fb00 	bl	8004128 <_sbrk_r>
 8003b28:	1c43      	adds	r3, r0, #1
 8003b2a:	d124      	bne.n	8003b76 <_malloc_r+0x92>
 8003b2c:	230c      	movs	r3, #12
 8003b2e:	6033      	str	r3, [r6, #0]
 8003b30:	4630      	mov	r0, r6
 8003b32:	f000 fd56 	bl	80045e2 <__malloc_unlock>
 8003b36:	e7e4      	b.n	8003b02 <_malloc_r+0x1e>
 8003b38:	680b      	ldr	r3, [r1, #0]
 8003b3a:	1b5b      	subs	r3, r3, r5
 8003b3c:	d418      	bmi.n	8003b70 <_malloc_r+0x8c>
 8003b3e:	2b0b      	cmp	r3, #11
 8003b40:	d90f      	bls.n	8003b62 <_malloc_r+0x7e>
 8003b42:	600b      	str	r3, [r1, #0]
 8003b44:	50cd      	str	r5, [r1, r3]
 8003b46:	18cc      	adds	r4, r1, r3
 8003b48:	4630      	mov	r0, r6
 8003b4a:	f000 fd4a 	bl	80045e2 <__malloc_unlock>
 8003b4e:	f104 000b 	add.w	r0, r4, #11
 8003b52:	1d23      	adds	r3, r4, #4
 8003b54:	f020 0007 	bic.w	r0, r0, #7
 8003b58:	1ac3      	subs	r3, r0, r3
 8003b5a:	d0d3      	beq.n	8003b04 <_malloc_r+0x20>
 8003b5c:	425a      	negs	r2, r3
 8003b5e:	50e2      	str	r2, [r4, r3]
 8003b60:	e7d0      	b.n	8003b04 <_malloc_r+0x20>
 8003b62:	428c      	cmp	r4, r1
 8003b64:	684b      	ldr	r3, [r1, #4]
 8003b66:	bf16      	itet	ne
 8003b68:	6063      	strne	r3, [r4, #4]
 8003b6a:	6013      	streq	r3, [r2, #0]
 8003b6c:	460c      	movne	r4, r1
 8003b6e:	e7eb      	b.n	8003b48 <_malloc_r+0x64>
 8003b70:	460c      	mov	r4, r1
 8003b72:	6849      	ldr	r1, [r1, #4]
 8003b74:	e7cc      	b.n	8003b10 <_malloc_r+0x2c>
 8003b76:	1cc4      	adds	r4, r0, #3
 8003b78:	f024 0403 	bic.w	r4, r4, #3
 8003b7c:	42a0      	cmp	r0, r4
 8003b7e:	d005      	beq.n	8003b8c <_malloc_r+0xa8>
 8003b80:	1a21      	subs	r1, r4, r0
 8003b82:	4630      	mov	r0, r6
 8003b84:	f000 fad0 	bl	8004128 <_sbrk_r>
 8003b88:	3001      	adds	r0, #1
 8003b8a:	d0cf      	beq.n	8003b2c <_malloc_r+0x48>
 8003b8c:	6025      	str	r5, [r4, #0]
 8003b8e:	e7db      	b.n	8003b48 <_malloc_r+0x64>
 8003b90:	20000094 	.word	0x20000094
 8003b94:	20000098 	.word	0x20000098

08003b98 <__sfputc_r>:
 8003b98:	6893      	ldr	r3, [r2, #8]
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	b410      	push	{r4}
 8003ba0:	6093      	str	r3, [r2, #8]
 8003ba2:	da08      	bge.n	8003bb6 <__sfputc_r+0x1e>
 8003ba4:	6994      	ldr	r4, [r2, #24]
 8003ba6:	42a3      	cmp	r3, r4
 8003ba8:	db01      	blt.n	8003bae <__sfputc_r+0x16>
 8003baa:	290a      	cmp	r1, #10
 8003bac:	d103      	bne.n	8003bb6 <__sfputc_r+0x1e>
 8003bae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003bb2:	f000 bb0d 	b.w	80041d0 <__swbuf_r>
 8003bb6:	6813      	ldr	r3, [r2, #0]
 8003bb8:	1c58      	adds	r0, r3, #1
 8003bba:	6010      	str	r0, [r2, #0]
 8003bbc:	7019      	strb	r1, [r3, #0]
 8003bbe:	4608      	mov	r0, r1
 8003bc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003bc4:	4770      	bx	lr

08003bc6 <__sfputs_r>:
 8003bc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bc8:	4606      	mov	r6, r0
 8003bca:	460f      	mov	r7, r1
 8003bcc:	4614      	mov	r4, r2
 8003bce:	18d5      	adds	r5, r2, r3
 8003bd0:	42ac      	cmp	r4, r5
 8003bd2:	d101      	bne.n	8003bd8 <__sfputs_r+0x12>
 8003bd4:	2000      	movs	r0, #0
 8003bd6:	e007      	b.n	8003be8 <__sfputs_r+0x22>
 8003bd8:	463a      	mov	r2, r7
 8003bda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bde:	4630      	mov	r0, r6
 8003be0:	f7ff ffda 	bl	8003b98 <__sfputc_r>
 8003be4:	1c43      	adds	r3, r0, #1
 8003be6:	d1f3      	bne.n	8003bd0 <__sfputs_r+0xa>
 8003be8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003bec <_vfiprintf_r>:
 8003bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bf0:	460c      	mov	r4, r1
 8003bf2:	b09d      	sub	sp, #116	; 0x74
 8003bf4:	4617      	mov	r7, r2
 8003bf6:	461d      	mov	r5, r3
 8003bf8:	4606      	mov	r6, r0
 8003bfa:	b118      	cbz	r0, 8003c04 <_vfiprintf_r+0x18>
 8003bfc:	6983      	ldr	r3, [r0, #24]
 8003bfe:	b90b      	cbnz	r3, 8003c04 <_vfiprintf_r+0x18>
 8003c00:	f7ff fee6 	bl	80039d0 <__sinit>
 8003c04:	4b7c      	ldr	r3, [pc, #496]	; (8003df8 <_vfiprintf_r+0x20c>)
 8003c06:	429c      	cmp	r4, r3
 8003c08:	d158      	bne.n	8003cbc <_vfiprintf_r+0xd0>
 8003c0a:	6874      	ldr	r4, [r6, #4]
 8003c0c:	89a3      	ldrh	r3, [r4, #12]
 8003c0e:	0718      	lsls	r0, r3, #28
 8003c10:	d55e      	bpl.n	8003cd0 <_vfiprintf_r+0xe4>
 8003c12:	6923      	ldr	r3, [r4, #16]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d05b      	beq.n	8003cd0 <_vfiprintf_r+0xe4>
 8003c18:	2300      	movs	r3, #0
 8003c1a:	9309      	str	r3, [sp, #36]	; 0x24
 8003c1c:	2320      	movs	r3, #32
 8003c1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003c22:	2330      	movs	r3, #48	; 0x30
 8003c24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003c28:	9503      	str	r5, [sp, #12]
 8003c2a:	f04f 0b01 	mov.w	fp, #1
 8003c2e:	46b8      	mov	r8, r7
 8003c30:	4645      	mov	r5, r8
 8003c32:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003c36:	b10b      	cbz	r3, 8003c3c <_vfiprintf_r+0x50>
 8003c38:	2b25      	cmp	r3, #37	; 0x25
 8003c3a:	d154      	bne.n	8003ce6 <_vfiprintf_r+0xfa>
 8003c3c:	ebb8 0a07 	subs.w	sl, r8, r7
 8003c40:	d00b      	beq.n	8003c5a <_vfiprintf_r+0x6e>
 8003c42:	4653      	mov	r3, sl
 8003c44:	463a      	mov	r2, r7
 8003c46:	4621      	mov	r1, r4
 8003c48:	4630      	mov	r0, r6
 8003c4a:	f7ff ffbc 	bl	8003bc6 <__sfputs_r>
 8003c4e:	3001      	adds	r0, #1
 8003c50:	f000 80c2 	beq.w	8003dd8 <_vfiprintf_r+0x1ec>
 8003c54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c56:	4453      	add	r3, sl
 8003c58:	9309      	str	r3, [sp, #36]	; 0x24
 8003c5a:	f898 3000 	ldrb.w	r3, [r8]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	f000 80ba 	beq.w	8003dd8 <_vfiprintf_r+0x1ec>
 8003c64:	2300      	movs	r3, #0
 8003c66:	f04f 32ff 	mov.w	r2, #4294967295
 8003c6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c6e:	9304      	str	r3, [sp, #16]
 8003c70:	9307      	str	r3, [sp, #28]
 8003c72:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003c76:	931a      	str	r3, [sp, #104]	; 0x68
 8003c78:	46a8      	mov	r8, r5
 8003c7a:	2205      	movs	r2, #5
 8003c7c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8003c80:	485e      	ldr	r0, [pc, #376]	; (8003dfc <_vfiprintf_r+0x210>)
 8003c82:	f7fc faa5 	bl	80001d0 <memchr>
 8003c86:	9b04      	ldr	r3, [sp, #16]
 8003c88:	bb78      	cbnz	r0, 8003cea <_vfiprintf_r+0xfe>
 8003c8a:	06d9      	lsls	r1, r3, #27
 8003c8c:	bf44      	itt	mi
 8003c8e:	2220      	movmi	r2, #32
 8003c90:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003c94:	071a      	lsls	r2, r3, #28
 8003c96:	bf44      	itt	mi
 8003c98:	222b      	movmi	r2, #43	; 0x2b
 8003c9a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003c9e:	782a      	ldrb	r2, [r5, #0]
 8003ca0:	2a2a      	cmp	r2, #42	; 0x2a
 8003ca2:	d02a      	beq.n	8003cfa <_vfiprintf_r+0x10e>
 8003ca4:	9a07      	ldr	r2, [sp, #28]
 8003ca6:	46a8      	mov	r8, r5
 8003ca8:	2000      	movs	r0, #0
 8003caa:	250a      	movs	r5, #10
 8003cac:	4641      	mov	r1, r8
 8003cae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003cb2:	3b30      	subs	r3, #48	; 0x30
 8003cb4:	2b09      	cmp	r3, #9
 8003cb6:	d969      	bls.n	8003d8c <_vfiprintf_r+0x1a0>
 8003cb8:	b360      	cbz	r0, 8003d14 <_vfiprintf_r+0x128>
 8003cba:	e024      	b.n	8003d06 <_vfiprintf_r+0x11a>
 8003cbc:	4b50      	ldr	r3, [pc, #320]	; (8003e00 <_vfiprintf_r+0x214>)
 8003cbe:	429c      	cmp	r4, r3
 8003cc0:	d101      	bne.n	8003cc6 <_vfiprintf_r+0xda>
 8003cc2:	68b4      	ldr	r4, [r6, #8]
 8003cc4:	e7a2      	b.n	8003c0c <_vfiprintf_r+0x20>
 8003cc6:	4b4f      	ldr	r3, [pc, #316]	; (8003e04 <_vfiprintf_r+0x218>)
 8003cc8:	429c      	cmp	r4, r3
 8003cca:	bf08      	it	eq
 8003ccc:	68f4      	ldreq	r4, [r6, #12]
 8003cce:	e79d      	b.n	8003c0c <_vfiprintf_r+0x20>
 8003cd0:	4621      	mov	r1, r4
 8003cd2:	4630      	mov	r0, r6
 8003cd4:	f000 fae0 	bl	8004298 <__swsetup_r>
 8003cd8:	2800      	cmp	r0, #0
 8003cda:	d09d      	beq.n	8003c18 <_vfiprintf_r+0x2c>
 8003cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ce0:	b01d      	add	sp, #116	; 0x74
 8003ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ce6:	46a8      	mov	r8, r5
 8003ce8:	e7a2      	b.n	8003c30 <_vfiprintf_r+0x44>
 8003cea:	4a44      	ldr	r2, [pc, #272]	; (8003dfc <_vfiprintf_r+0x210>)
 8003cec:	1a80      	subs	r0, r0, r2
 8003cee:	fa0b f000 	lsl.w	r0, fp, r0
 8003cf2:	4318      	orrs	r0, r3
 8003cf4:	9004      	str	r0, [sp, #16]
 8003cf6:	4645      	mov	r5, r8
 8003cf8:	e7be      	b.n	8003c78 <_vfiprintf_r+0x8c>
 8003cfa:	9a03      	ldr	r2, [sp, #12]
 8003cfc:	1d11      	adds	r1, r2, #4
 8003cfe:	6812      	ldr	r2, [r2, #0]
 8003d00:	9103      	str	r1, [sp, #12]
 8003d02:	2a00      	cmp	r2, #0
 8003d04:	db01      	blt.n	8003d0a <_vfiprintf_r+0x11e>
 8003d06:	9207      	str	r2, [sp, #28]
 8003d08:	e004      	b.n	8003d14 <_vfiprintf_r+0x128>
 8003d0a:	4252      	negs	r2, r2
 8003d0c:	f043 0302 	orr.w	r3, r3, #2
 8003d10:	9207      	str	r2, [sp, #28]
 8003d12:	9304      	str	r3, [sp, #16]
 8003d14:	f898 3000 	ldrb.w	r3, [r8]
 8003d18:	2b2e      	cmp	r3, #46	; 0x2e
 8003d1a:	d10e      	bne.n	8003d3a <_vfiprintf_r+0x14e>
 8003d1c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003d20:	2b2a      	cmp	r3, #42	; 0x2a
 8003d22:	d138      	bne.n	8003d96 <_vfiprintf_r+0x1aa>
 8003d24:	9b03      	ldr	r3, [sp, #12]
 8003d26:	1d1a      	adds	r2, r3, #4
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	9203      	str	r2, [sp, #12]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	bfb8      	it	lt
 8003d30:	f04f 33ff 	movlt.w	r3, #4294967295
 8003d34:	f108 0802 	add.w	r8, r8, #2
 8003d38:	9305      	str	r3, [sp, #20]
 8003d3a:	4d33      	ldr	r5, [pc, #204]	; (8003e08 <_vfiprintf_r+0x21c>)
 8003d3c:	f898 1000 	ldrb.w	r1, [r8]
 8003d40:	2203      	movs	r2, #3
 8003d42:	4628      	mov	r0, r5
 8003d44:	f7fc fa44 	bl	80001d0 <memchr>
 8003d48:	b140      	cbz	r0, 8003d5c <_vfiprintf_r+0x170>
 8003d4a:	2340      	movs	r3, #64	; 0x40
 8003d4c:	1b40      	subs	r0, r0, r5
 8003d4e:	fa03 f000 	lsl.w	r0, r3, r0
 8003d52:	9b04      	ldr	r3, [sp, #16]
 8003d54:	4303      	orrs	r3, r0
 8003d56:	f108 0801 	add.w	r8, r8, #1
 8003d5a:	9304      	str	r3, [sp, #16]
 8003d5c:	f898 1000 	ldrb.w	r1, [r8]
 8003d60:	482a      	ldr	r0, [pc, #168]	; (8003e0c <_vfiprintf_r+0x220>)
 8003d62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003d66:	2206      	movs	r2, #6
 8003d68:	f108 0701 	add.w	r7, r8, #1
 8003d6c:	f7fc fa30 	bl	80001d0 <memchr>
 8003d70:	2800      	cmp	r0, #0
 8003d72:	d037      	beq.n	8003de4 <_vfiprintf_r+0x1f8>
 8003d74:	4b26      	ldr	r3, [pc, #152]	; (8003e10 <_vfiprintf_r+0x224>)
 8003d76:	bb1b      	cbnz	r3, 8003dc0 <_vfiprintf_r+0x1d4>
 8003d78:	9b03      	ldr	r3, [sp, #12]
 8003d7a:	3307      	adds	r3, #7
 8003d7c:	f023 0307 	bic.w	r3, r3, #7
 8003d80:	3308      	adds	r3, #8
 8003d82:	9303      	str	r3, [sp, #12]
 8003d84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d86:	444b      	add	r3, r9
 8003d88:	9309      	str	r3, [sp, #36]	; 0x24
 8003d8a:	e750      	b.n	8003c2e <_vfiprintf_r+0x42>
 8003d8c:	fb05 3202 	mla	r2, r5, r2, r3
 8003d90:	2001      	movs	r0, #1
 8003d92:	4688      	mov	r8, r1
 8003d94:	e78a      	b.n	8003cac <_vfiprintf_r+0xc0>
 8003d96:	2300      	movs	r3, #0
 8003d98:	f108 0801 	add.w	r8, r8, #1
 8003d9c:	9305      	str	r3, [sp, #20]
 8003d9e:	4619      	mov	r1, r3
 8003da0:	250a      	movs	r5, #10
 8003da2:	4640      	mov	r0, r8
 8003da4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003da8:	3a30      	subs	r2, #48	; 0x30
 8003daa:	2a09      	cmp	r2, #9
 8003dac:	d903      	bls.n	8003db6 <_vfiprintf_r+0x1ca>
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d0c3      	beq.n	8003d3a <_vfiprintf_r+0x14e>
 8003db2:	9105      	str	r1, [sp, #20]
 8003db4:	e7c1      	b.n	8003d3a <_vfiprintf_r+0x14e>
 8003db6:	fb05 2101 	mla	r1, r5, r1, r2
 8003dba:	2301      	movs	r3, #1
 8003dbc:	4680      	mov	r8, r0
 8003dbe:	e7f0      	b.n	8003da2 <_vfiprintf_r+0x1b6>
 8003dc0:	ab03      	add	r3, sp, #12
 8003dc2:	9300      	str	r3, [sp, #0]
 8003dc4:	4622      	mov	r2, r4
 8003dc6:	4b13      	ldr	r3, [pc, #76]	; (8003e14 <_vfiprintf_r+0x228>)
 8003dc8:	a904      	add	r1, sp, #16
 8003dca:	4630      	mov	r0, r6
 8003dcc:	f3af 8000 	nop.w
 8003dd0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003dd4:	4681      	mov	r9, r0
 8003dd6:	d1d5      	bne.n	8003d84 <_vfiprintf_r+0x198>
 8003dd8:	89a3      	ldrh	r3, [r4, #12]
 8003dda:	065b      	lsls	r3, r3, #25
 8003ddc:	f53f af7e 	bmi.w	8003cdc <_vfiprintf_r+0xf0>
 8003de0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003de2:	e77d      	b.n	8003ce0 <_vfiprintf_r+0xf4>
 8003de4:	ab03      	add	r3, sp, #12
 8003de6:	9300      	str	r3, [sp, #0]
 8003de8:	4622      	mov	r2, r4
 8003dea:	4b0a      	ldr	r3, [pc, #40]	; (8003e14 <_vfiprintf_r+0x228>)
 8003dec:	a904      	add	r1, sp, #16
 8003dee:	4630      	mov	r0, r6
 8003df0:	f000 f888 	bl	8003f04 <_printf_i>
 8003df4:	e7ec      	b.n	8003dd0 <_vfiprintf_r+0x1e4>
 8003df6:	bf00      	nop
 8003df8:	0800477c 	.word	0x0800477c
 8003dfc:	080047bc 	.word	0x080047bc
 8003e00:	0800479c 	.word	0x0800479c
 8003e04:	0800475c 	.word	0x0800475c
 8003e08:	080047c2 	.word	0x080047c2
 8003e0c:	080047c6 	.word	0x080047c6
 8003e10:	00000000 	.word	0x00000000
 8003e14:	08003bc7 	.word	0x08003bc7

08003e18 <_printf_common>:
 8003e18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e1c:	4691      	mov	r9, r2
 8003e1e:	461f      	mov	r7, r3
 8003e20:	688a      	ldr	r2, [r1, #8]
 8003e22:	690b      	ldr	r3, [r1, #16]
 8003e24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	bfb8      	it	lt
 8003e2c:	4613      	movlt	r3, r2
 8003e2e:	f8c9 3000 	str.w	r3, [r9]
 8003e32:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003e36:	4606      	mov	r6, r0
 8003e38:	460c      	mov	r4, r1
 8003e3a:	b112      	cbz	r2, 8003e42 <_printf_common+0x2a>
 8003e3c:	3301      	adds	r3, #1
 8003e3e:	f8c9 3000 	str.w	r3, [r9]
 8003e42:	6823      	ldr	r3, [r4, #0]
 8003e44:	0699      	lsls	r1, r3, #26
 8003e46:	bf42      	ittt	mi
 8003e48:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003e4c:	3302      	addmi	r3, #2
 8003e4e:	f8c9 3000 	strmi.w	r3, [r9]
 8003e52:	6825      	ldr	r5, [r4, #0]
 8003e54:	f015 0506 	ands.w	r5, r5, #6
 8003e58:	d107      	bne.n	8003e6a <_printf_common+0x52>
 8003e5a:	f104 0a19 	add.w	sl, r4, #25
 8003e5e:	68e3      	ldr	r3, [r4, #12]
 8003e60:	f8d9 2000 	ldr.w	r2, [r9]
 8003e64:	1a9b      	subs	r3, r3, r2
 8003e66:	42ab      	cmp	r3, r5
 8003e68:	dc28      	bgt.n	8003ebc <_printf_common+0xa4>
 8003e6a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003e6e:	6822      	ldr	r2, [r4, #0]
 8003e70:	3300      	adds	r3, #0
 8003e72:	bf18      	it	ne
 8003e74:	2301      	movne	r3, #1
 8003e76:	0692      	lsls	r2, r2, #26
 8003e78:	d42d      	bmi.n	8003ed6 <_printf_common+0xbe>
 8003e7a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e7e:	4639      	mov	r1, r7
 8003e80:	4630      	mov	r0, r6
 8003e82:	47c0      	blx	r8
 8003e84:	3001      	adds	r0, #1
 8003e86:	d020      	beq.n	8003eca <_printf_common+0xb2>
 8003e88:	6823      	ldr	r3, [r4, #0]
 8003e8a:	68e5      	ldr	r5, [r4, #12]
 8003e8c:	f8d9 2000 	ldr.w	r2, [r9]
 8003e90:	f003 0306 	and.w	r3, r3, #6
 8003e94:	2b04      	cmp	r3, #4
 8003e96:	bf08      	it	eq
 8003e98:	1aad      	subeq	r5, r5, r2
 8003e9a:	68a3      	ldr	r3, [r4, #8]
 8003e9c:	6922      	ldr	r2, [r4, #16]
 8003e9e:	bf0c      	ite	eq
 8003ea0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ea4:	2500      	movne	r5, #0
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	bfc4      	itt	gt
 8003eaa:	1a9b      	subgt	r3, r3, r2
 8003eac:	18ed      	addgt	r5, r5, r3
 8003eae:	f04f 0900 	mov.w	r9, #0
 8003eb2:	341a      	adds	r4, #26
 8003eb4:	454d      	cmp	r5, r9
 8003eb6:	d11a      	bne.n	8003eee <_printf_common+0xd6>
 8003eb8:	2000      	movs	r0, #0
 8003eba:	e008      	b.n	8003ece <_printf_common+0xb6>
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	4652      	mov	r2, sl
 8003ec0:	4639      	mov	r1, r7
 8003ec2:	4630      	mov	r0, r6
 8003ec4:	47c0      	blx	r8
 8003ec6:	3001      	adds	r0, #1
 8003ec8:	d103      	bne.n	8003ed2 <_printf_common+0xba>
 8003eca:	f04f 30ff 	mov.w	r0, #4294967295
 8003ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ed2:	3501      	adds	r5, #1
 8003ed4:	e7c3      	b.n	8003e5e <_printf_common+0x46>
 8003ed6:	18e1      	adds	r1, r4, r3
 8003ed8:	1c5a      	adds	r2, r3, #1
 8003eda:	2030      	movs	r0, #48	; 0x30
 8003edc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003ee0:	4422      	add	r2, r4
 8003ee2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003ee6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003eea:	3302      	adds	r3, #2
 8003eec:	e7c5      	b.n	8003e7a <_printf_common+0x62>
 8003eee:	2301      	movs	r3, #1
 8003ef0:	4622      	mov	r2, r4
 8003ef2:	4639      	mov	r1, r7
 8003ef4:	4630      	mov	r0, r6
 8003ef6:	47c0      	blx	r8
 8003ef8:	3001      	adds	r0, #1
 8003efa:	d0e6      	beq.n	8003eca <_printf_common+0xb2>
 8003efc:	f109 0901 	add.w	r9, r9, #1
 8003f00:	e7d8      	b.n	8003eb4 <_printf_common+0x9c>
	...

08003f04 <_printf_i>:
 8003f04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003f08:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003f0c:	460c      	mov	r4, r1
 8003f0e:	7e09      	ldrb	r1, [r1, #24]
 8003f10:	b085      	sub	sp, #20
 8003f12:	296e      	cmp	r1, #110	; 0x6e
 8003f14:	4617      	mov	r7, r2
 8003f16:	4606      	mov	r6, r0
 8003f18:	4698      	mov	r8, r3
 8003f1a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003f1c:	f000 80b3 	beq.w	8004086 <_printf_i+0x182>
 8003f20:	d822      	bhi.n	8003f68 <_printf_i+0x64>
 8003f22:	2963      	cmp	r1, #99	; 0x63
 8003f24:	d036      	beq.n	8003f94 <_printf_i+0x90>
 8003f26:	d80a      	bhi.n	8003f3e <_printf_i+0x3a>
 8003f28:	2900      	cmp	r1, #0
 8003f2a:	f000 80b9 	beq.w	80040a0 <_printf_i+0x19c>
 8003f2e:	2958      	cmp	r1, #88	; 0x58
 8003f30:	f000 8083 	beq.w	800403a <_printf_i+0x136>
 8003f34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f38:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003f3c:	e032      	b.n	8003fa4 <_printf_i+0xa0>
 8003f3e:	2964      	cmp	r1, #100	; 0x64
 8003f40:	d001      	beq.n	8003f46 <_printf_i+0x42>
 8003f42:	2969      	cmp	r1, #105	; 0x69
 8003f44:	d1f6      	bne.n	8003f34 <_printf_i+0x30>
 8003f46:	6820      	ldr	r0, [r4, #0]
 8003f48:	6813      	ldr	r3, [r2, #0]
 8003f4a:	0605      	lsls	r5, r0, #24
 8003f4c:	f103 0104 	add.w	r1, r3, #4
 8003f50:	d52a      	bpl.n	8003fa8 <_printf_i+0xa4>
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	6011      	str	r1, [r2, #0]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	da03      	bge.n	8003f62 <_printf_i+0x5e>
 8003f5a:	222d      	movs	r2, #45	; 0x2d
 8003f5c:	425b      	negs	r3, r3
 8003f5e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003f62:	486f      	ldr	r0, [pc, #444]	; (8004120 <_printf_i+0x21c>)
 8003f64:	220a      	movs	r2, #10
 8003f66:	e039      	b.n	8003fdc <_printf_i+0xd8>
 8003f68:	2973      	cmp	r1, #115	; 0x73
 8003f6a:	f000 809d 	beq.w	80040a8 <_printf_i+0x1a4>
 8003f6e:	d808      	bhi.n	8003f82 <_printf_i+0x7e>
 8003f70:	296f      	cmp	r1, #111	; 0x6f
 8003f72:	d020      	beq.n	8003fb6 <_printf_i+0xb2>
 8003f74:	2970      	cmp	r1, #112	; 0x70
 8003f76:	d1dd      	bne.n	8003f34 <_printf_i+0x30>
 8003f78:	6823      	ldr	r3, [r4, #0]
 8003f7a:	f043 0320 	orr.w	r3, r3, #32
 8003f7e:	6023      	str	r3, [r4, #0]
 8003f80:	e003      	b.n	8003f8a <_printf_i+0x86>
 8003f82:	2975      	cmp	r1, #117	; 0x75
 8003f84:	d017      	beq.n	8003fb6 <_printf_i+0xb2>
 8003f86:	2978      	cmp	r1, #120	; 0x78
 8003f88:	d1d4      	bne.n	8003f34 <_printf_i+0x30>
 8003f8a:	2378      	movs	r3, #120	; 0x78
 8003f8c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003f90:	4864      	ldr	r0, [pc, #400]	; (8004124 <_printf_i+0x220>)
 8003f92:	e055      	b.n	8004040 <_printf_i+0x13c>
 8003f94:	6813      	ldr	r3, [r2, #0]
 8003f96:	1d19      	adds	r1, r3, #4
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	6011      	str	r1, [r2, #0]
 8003f9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003fa0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e08c      	b.n	80040c2 <_printf_i+0x1be>
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	6011      	str	r1, [r2, #0]
 8003fac:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003fb0:	bf18      	it	ne
 8003fb2:	b21b      	sxthne	r3, r3
 8003fb4:	e7cf      	b.n	8003f56 <_printf_i+0x52>
 8003fb6:	6813      	ldr	r3, [r2, #0]
 8003fb8:	6825      	ldr	r5, [r4, #0]
 8003fba:	1d18      	adds	r0, r3, #4
 8003fbc:	6010      	str	r0, [r2, #0]
 8003fbe:	0628      	lsls	r0, r5, #24
 8003fc0:	d501      	bpl.n	8003fc6 <_printf_i+0xc2>
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	e002      	b.n	8003fcc <_printf_i+0xc8>
 8003fc6:	0668      	lsls	r0, r5, #25
 8003fc8:	d5fb      	bpl.n	8003fc2 <_printf_i+0xbe>
 8003fca:	881b      	ldrh	r3, [r3, #0]
 8003fcc:	4854      	ldr	r0, [pc, #336]	; (8004120 <_printf_i+0x21c>)
 8003fce:	296f      	cmp	r1, #111	; 0x6f
 8003fd0:	bf14      	ite	ne
 8003fd2:	220a      	movne	r2, #10
 8003fd4:	2208      	moveq	r2, #8
 8003fd6:	2100      	movs	r1, #0
 8003fd8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003fdc:	6865      	ldr	r5, [r4, #4]
 8003fde:	60a5      	str	r5, [r4, #8]
 8003fe0:	2d00      	cmp	r5, #0
 8003fe2:	f2c0 8095 	blt.w	8004110 <_printf_i+0x20c>
 8003fe6:	6821      	ldr	r1, [r4, #0]
 8003fe8:	f021 0104 	bic.w	r1, r1, #4
 8003fec:	6021      	str	r1, [r4, #0]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d13d      	bne.n	800406e <_printf_i+0x16a>
 8003ff2:	2d00      	cmp	r5, #0
 8003ff4:	f040 808e 	bne.w	8004114 <_printf_i+0x210>
 8003ff8:	4665      	mov	r5, ip
 8003ffa:	2a08      	cmp	r2, #8
 8003ffc:	d10b      	bne.n	8004016 <_printf_i+0x112>
 8003ffe:	6823      	ldr	r3, [r4, #0]
 8004000:	07db      	lsls	r3, r3, #31
 8004002:	d508      	bpl.n	8004016 <_printf_i+0x112>
 8004004:	6923      	ldr	r3, [r4, #16]
 8004006:	6862      	ldr	r2, [r4, #4]
 8004008:	429a      	cmp	r2, r3
 800400a:	bfde      	ittt	le
 800400c:	2330      	movle	r3, #48	; 0x30
 800400e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004012:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004016:	ebac 0305 	sub.w	r3, ip, r5
 800401a:	6123      	str	r3, [r4, #16]
 800401c:	f8cd 8000 	str.w	r8, [sp]
 8004020:	463b      	mov	r3, r7
 8004022:	aa03      	add	r2, sp, #12
 8004024:	4621      	mov	r1, r4
 8004026:	4630      	mov	r0, r6
 8004028:	f7ff fef6 	bl	8003e18 <_printf_common>
 800402c:	3001      	adds	r0, #1
 800402e:	d14d      	bne.n	80040cc <_printf_i+0x1c8>
 8004030:	f04f 30ff 	mov.w	r0, #4294967295
 8004034:	b005      	add	sp, #20
 8004036:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800403a:	4839      	ldr	r0, [pc, #228]	; (8004120 <_printf_i+0x21c>)
 800403c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004040:	6813      	ldr	r3, [r2, #0]
 8004042:	6821      	ldr	r1, [r4, #0]
 8004044:	1d1d      	adds	r5, r3, #4
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	6015      	str	r5, [r2, #0]
 800404a:	060a      	lsls	r2, r1, #24
 800404c:	d50b      	bpl.n	8004066 <_printf_i+0x162>
 800404e:	07ca      	lsls	r2, r1, #31
 8004050:	bf44      	itt	mi
 8004052:	f041 0120 	orrmi.w	r1, r1, #32
 8004056:	6021      	strmi	r1, [r4, #0]
 8004058:	b91b      	cbnz	r3, 8004062 <_printf_i+0x15e>
 800405a:	6822      	ldr	r2, [r4, #0]
 800405c:	f022 0220 	bic.w	r2, r2, #32
 8004060:	6022      	str	r2, [r4, #0]
 8004062:	2210      	movs	r2, #16
 8004064:	e7b7      	b.n	8003fd6 <_printf_i+0xd2>
 8004066:	064d      	lsls	r5, r1, #25
 8004068:	bf48      	it	mi
 800406a:	b29b      	uxthmi	r3, r3
 800406c:	e7ef      	b.n	800404e <_printf_i+0x14a>
 800406e:	4665      	mov	r5, ip
 8004070:	fbb3 f1f2 	udiv	r1, r3, r2
 8004074:	fb02 3311 	mls	r3, r2, r1, r3
 8004078:	5cc3      	ldrb	r3, [r0, r3]
 800407a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800407e:	460b      	mov	r3, r1
 8004080:	2900      	cmp	r1, #0
 8004082:	d1f5      	bne.n	8004070 <_printf_i+0x16c>
 8004084:	e7b9      	b.n	8003ffa <_printf_i+0xf6>
 8004086:	6813      	ldr	r3, [r2, #0]
 8004088:	6825      	ldr	r5, [r4, #0]
 800408a:	6961      	ldr	r1, [r4, #20]
 800408c:	1d18      	adds	r0, r3, #4
 800408e:	6010      	str	r0, [r2, #0]
 8004090:	0628      	lsls	r0, r5, #24
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	d501      	bpl.n	800409a <_printf_i+0x196>
 8004096:	6019      	str	r1, [r3, #0]
 8004098:	e002      	b.n	80040a0 <_printf_i+0x19c>
 800409a:	066a      	lsls	r2, r5, #25
 800409c:	d5fb      	bpl.n	8004096 <_printf_i+0x192>
 800409e:	8019      	strh	r1, [r3, #0]
 80040a0:	2300      	movs	r3, #0
 80040a2:	6123      	str	r3, [r4, #16]
 80040a4:	4665      	mov	r5, ip
 80040a6:	e7b9      	b.n	800401c <_printf_i+0x118>
 80040a8:	6813      	ldr	r3, [r2, #0]
 80040aa:	1d19      	adds	r1, r3, #4
 80040ac:	6011      	str	r1, [r2, #0]
 80040ae:	681d      	ldr	r5, [r3, #0]
 80040b0:	6862      	ldr	r2, [r4, #4]
 80040b2:	2100      	movs	r1, #0
 80040b4:	4628      	mov	r0, r5
 80040b6:	f7fc f88b 	bl	80001d0 <memchr>
 80040ba:	b108      	cbz	r0, 80040c0 <_printf_i+0x1bc>
 80040bc:	1b40      	subs	r0, r0, r5
 80040be:	6060      	str	r0, [r4, #4]
 80040c0:	6863      	ldr	r3, [r4, #4]
 80040c2:	6123      	str	r3, [r4, #16]
 80040c4:	2300      	movs	r3, #0
 80040c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040ca:	e7a7      	b.n	800401c <_printf_i+0x118>
 80040cc:	6923      	ldr	r3, [r4, #16]
 80040ce:	462a      	mov	r2, r5
 80040d0:	4639      	mov	r1, r7
 80040d2:	4630      	mov	r0, r6
 80040d4:	47c0      	blx	r8
 80040d6:	3001      	adds	r0, #1
 80040d8:	d0aa      	beq.n	8004030 <_printf_i+0x12c>
 80040da:	6823      	ldr	r3, [r4, #0]
 80040dc:	079b      	lsls	r3, r3, #30
 80040de:	d413      	bmi.n	8004108 <_printf_i+0x204>
 80040e0:	68e0      	ldr	r0, [r4, #12]
 80040e2:	9b03      	ldr	r3, [sp, #12]
 80040e4:	4298      	cmp	r0, r3
 80040e6:	bfb8      	it	lt
 80040e8:	4618      	movlt	r0, r3
 80040ea:	e7a3      	b.n	8004034 <_printf_i+0x130>
 80040ec:	2301      	movs	r3, #1
 80040ee:	464a      	mov	r2, r9
 80040f0:	4639      	mov	r1, r7
 80040f2:	4630      	mov	r0, r6
 80040f4:	47c0      	blx	r8
 80040f6:	3001      	adds	r0, #1
 80040f8:	d09a      	beq.n	8004030 <_printf_i+0x12c>
 80040fa:	3501      	adds	r5, #1
 80040fc:	68e3      	ldr	r3, [r4, #12]
 80040fe:	9a03      	ldr	r2, [sp, #12]
 8004100:	1a9b      	subs	r3, r3, r2
 8004102:	42ab      	cmp	r3, r5
 8004104:	dcf2      	bgt.n	80040ec <_printf_i+0x1e8>
 8004106:	e7eb      	b.n	80040e0 <_printf_i+0x1dc>
 8004108:	2500      	movs	r5, #0
 800410a:	f104 0919 	add.w	r9, r4, #25
 800410e:	e7f5      	b.n	80040fc <_printf_i+0x1f8>
 8004110:	2b00      	cmp	r3, #0
 8004112:	d1ac      	bne.n	800406e <_printf_i+0x16a>
 8004114:	7803      	ldrb	r3, [r0, #0]
 8004116:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800411a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800411e:	e76c      	b.n	8003ffa <_printf_i+0xf6>
 8004120:	080047cd 	.word	0x080047cd
 8004124:	080047de 	.word	0x080047de

08004128 <_sbrk_r>:
 8004128:	b538      	push	{r3, r4, r5, lr}
 800412a:	4c06      	ldr	r4, [pc, #24]	; (8004144 <_sbrk_r+0x1c>)
 800412c:	2300      	movs	r3, #0
 800412e:	4605      	mov	r5, r0
 8004130:	4608      	mov	r0, r1
 8004132:	6023      	str	r3, [r4, #0]
 8004134:	f7fc fdfa 	bl	8000d2c <_sbrk>
 8004138:	1c43      	adds	r3, r0, #1
 800413a:	d102      	bne.n	8004142 <_sbrk_r+0x1a>
 800413c:	6823      	ldr	r3, [r4, #0]
 800413e:	b103      	cbz	r3, 8004142 <_sbrk_r+0x1a>
 8004140:	602b      	str	r3, [r5, #0]
 8004142:	bd38      	pop	{r3, r4, r5, pc}
 8004144:	20000120 	.word	0x20000120

08004148 <__sread>:
 8004148:	b510      	push	{r4, lr}
 800414a:	460c      	mov	r4, r1
 800414c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004150:	f000 fa96 	bl	8004680 <_read_r>
 8004154:	2800      	cmp	r0, #0
 8004156:	bfab      	itete	ge
 8004158:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800415a:	89a3      	ldrhlt	r3, [r4, #12]
 800415c:	181b      	addge	r3, r3, r0
 800415e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004162:	bfac      	ite	ge
 8004164:	6563      	strge	r3, [r4, #84]	; 0x54
 8004166:	81a3      	strhlt	r3, [r4, #12]
 8004168:	bd10      	pop	{r4, pc}

0800416a <__swrite>:
 800416a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800416e:	461f      	mov	r7, r3
 8004170:	898b      	ldrh	r3, [r1, #12]
 8004172:	05db      	lsls	r3, r3, #23
 8004174:	4605      	mov	r5, r0
 8004176:	460c      	mov	r4, r1
 8004178:	4616      	mov	r6, r2
 800417a:	d505      	bpl.n	8004188 <__swrite+0x1e>
 800417c:	2302      	movs	r3, #2
 800417e:	2200      	movs	r2, #0
 8004180:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004184:	f000 f9b6 	bl	80044f4 <_lseek_r>
 8004188:	89a3      	ldrh	r3, [r4, #12]
 800418a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800418e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004192:	81a3      	strh	r3, [r4, #12]
 8004194:	4632      	mov	r2, r6
 8004196:	463b      	mov	r3, r7
 8004198:	4628      	mov	r0, r5
 800419a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800419e:	f000 b869 	b.w	8004274 <_write_r>

080041a2 <__sseek>:
 80041a2:	b510      	push	{r4, lr}
 80041a4:	460c      	mov	r4, r1
 80041a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041aa:	f000 f9a3 	bl	80044f4 <_lseek_r>
 80041ae:	1c43      	adds	r3, r0, #1
 80041b0:	89a3      	ldrh	r3, [r4, #12]
 80041b2:	bf15      	itete	ne
 80041b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80041b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80041ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80041be:	81a3      	strheq	r3, [r4, #12]
 80041c0:	bf18      	it	ne
 80041c2:	81a3      	strhne	r3, [r4, #12]
 80041c4:	bd10      	pop	{r4, pc}

080041c6 <__sclose>:
 80041c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041ca:	f000 b8d3 	b.w	8004374 <_close_r>
	...

080041d0 <__swbuf_r>:
 80041d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041d2:	460e      	mov	r6, r1
 80041d4:	4614      	mov	r4, r2
 80041d6:	4605      	mov	r5, r0
 80041d8:	b118      	cbz	r0, 80041e2 <__swbuf_r+0x12>
 80041da:	6983      	ldr	r3, [r0, #24]
 80041dc:	b90b      	cbnz	r3, 80041e2 <__swbuf_r+0x12>
 80041de:	f7ff fbf7 	bl	80039d0 <__sinit>
 80041e2:	4b21      	ldr	r3, [pc, #132]	; (8004268 <__swbuf_r+0x98>)
 80041e4:	429c      	cmp	r4, r3
 80041e6:	d12a      	bne.n	800423e <__swbuf_r+0x6e>
 80041e8:	686c      	ldr	r4, [r5, #4]
 80041ea:	69a3      	ldr	r3, [r4, #24]
 80041ec:	60a3      	str	r3, [r4, #8]
 80041ee:	89a3      	ldrh	r3, [r4, #12]
 80041f0:	071a      	lsls	r2, r3, #28
 80041f2:	d52e      	bpl.n	8004252 <__swbuf_r+0x82>
 80041f4:	6923      	ldr	r3, [r4, #16]
 80041f6:	b363      	cbz	r3, 8004252 <__swbuf_r+0x82>
 80041f8:	6923      	ldr	r3, [r4, #16]
 80041fa:	6820      	ldr	r0, [r4, #0]
 80041fc:	1ac0      	subs	r0, r0, r3
 80041fe:	6963      	ldr	r3, [r4, #20]
 8004200:	b2f6      	uxtb	r6, r6
 8004202:	4283      	cmp	r3, r0
 8004204:	4637      	mov	r7, r6
 8004206:	dc04      	bgt.n	8004212 <__swbuf_r+0x42>
 8004208:	4621      	mov	r1, r4
 800420a:	4628      	mov	r0, r5
 800420c:	f000 f948 	bl	80044a0 <_fflush_r>
 8004210:	bb28      	cbnz	r0, 800425e <__swbuf_r+0x8e>
 8004212:	68a3      	ldr	r3, [r4, #8]
 8004214:	3b01      	subs	r3, #1
 8004216:	60a3      	str	r3, [r4, #8]
 8004218:	6823      	ldr	r3, [r4, #0]
 800421a:	1c5a      	adds	r2, r3, #1
 800421c:	6022      	str	r2, [r4, #0]
 800421e:	701e      	strb	r6, [r3, #0]
 8004220:	6963      	ldr	r3, [r4, #20]
 8004222:	3001      	adds	r0, #1
 8004224:	4283      	cmp	r3, r0
 8004226:	d004      	beq.n	8004232 <__swbuf_r+0x62>
 8004228:	89a3      	ldrh	r3, [r4, #12]
 800422a:	07db      	lsls	r3, r3, #31
 800422c:	d519      	bpl.n	8004262 <__swbuf_r+0x92>
 800422e:	2e0a      	cmp	r6, #10
 8004230:	d117      	bne.n	8004262 <__swbuf_r+0x92>
 8004232:	4621      	mov	r1, r4
 8004234:	4628      	mov	r0, r5
 8004236:	f000 f933 	bl	80044a0 <_fflush_r>
 800423a:	b190      	cbz	r0, 8004262 <__swbuf_r+0x92>
 800423c:	e00f      	b.n	800425e <__swbuf_r+0x8e>
 800423e:	4b0b      	ldr	r3, [pc, #44]	; (800426c <__swbuf_r+0x9c>)
 8004240:	429c      	cmp	r4, r3
 8004242:	d101      	bne.n	8004248 <__swbuf_r+0x78>
 8004244:	68ac      	ldr	r4, [r5, #8]
 8004246:	e7d0      	b.n	80041ea <__swbuf_r+0x1a>
 8004248:	4b09      	ldr	r3, [pc, #36]	; (8004270 <__swbuf_r+0xa0>)
 800424a:	429c      	cmp	r4, r3
 800424c:	bf08      	it	eq
 800424e:	68ec      	ldreq	r4, [r5, #12]
 8004250:	e7cb      	b.n	80041ea <__swbuf_r+0x1a>
 8004252:	4621      	mov	r1, r4
 8004254:	4628      	mov	r0, r5
 8004256:	f000 f81f 	bl	8004298 <__swsetup_r>
 800425a:	2800      	cmp	r0, #0
 800425c:	d0cc      	beq.n	80041f8 <__swbuf_r+0x28>
 800425e:	f04f 37ff 	mov.w	r7, #4294967295
 8004262:	4638      	mov	r0, r7
 8004264:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004266:	bf00      	nop
 8004268:	0800477c 	.word	0x0800477c
 800426c:	0800479c 	.word	0x0800479c
 8004270:	0800475c 	.word	0x0800475c

08004274 <_write_r>:
 8004274:	b538      	push	{r3, r4, r5, lr}
 8004276:	4c07      	ldr	r4, [pc, #28]	; (8004294 <_write_r+0x20>)
 8004278:	4605      	mov	r5, r0
 800427a:	4608      	mov	r0, r1
 800427c:	4611      	mov	r1, r2
 800427e:	2200      	movs	r2, #0
 8004280:	6022      	str	r2, [r4, #0]
 8004282:	461a      	mov	r2, r3
 8004284:	f7fc fc36 	bl	8000af4 <_write>
 8004288:	1c43      	adds	r3, r0, #1
 800428a:	d102      	bne.n	8004292 <_write_r+0x1e>
 800428c:	6823      	ldr	r3, [r4, #0]
 800428e:	b103      	cbz	r3, 8004292 <_write_r+0x1e>
 8004290:	602b      	str	r3, [r5, #0]
 8004292:	bd38      	pop	{r3, r4, r5, pc}
 8004294:	20000120 	.word	0x20000120

08004298 <__swsetup_r>:
 8004298:	4b32      	ldr	r3, [pc, #200]	; (8004364 <__swsetup_r+0xcc>)
 800429a:	b570      	push	{r4, r5, r6, lr}
 800429c:	681d      	ldr	r5, [r3, #0]
 800429e:	4606      	mov	r6, r0
 80042a0:	460c      	mov	r4, r1
 80042a2:	b125      	cbz	r5, 80042ae <__swsetup_r+0x16>
 80042a4:	69ab      	ldr	r3, [r5, #24]
 80042a6:	b913      	cbnz	r3, 80042ae <__swsetup_r+0x16>
 80042a8:	4628      	mov	r0, r5
 80042aa:	f7ff fb91 	bl	80039d0 <__sinit>
 80042ae:	4b2e      	ldr	r3, [pc, #184]	; (8004368 <__swsetup_r+0xd0>)
 80042b0:	429c      	cmp	r4, r3
 80042b2:	d10f      	bne.n	80042d4 <__swsetup_r+0x3c>
 80042b4:	686c      	ldr	r4, [r5, #4]
 80042b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042ba:	b29a      	uxth	r2, r3
 80042bc:	0715      	lsls	r5, r2, #28
 80042be:	d42c      	bmi.n	800431a <__swsetup_r+0x82>
 80042c0:	06d0      	lsls	r0, r2, #27
 80042c2:	d411      	bmi.n	80042e8 <__swsetup_r+0x50>
 80042c4:	2209      	movs	r2, #9
 80042c6:	6032      	str	r2, [r6, #0]
 80042c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042cc:	81a3      	strh	r3, [r4, #12]
 80042ce:	f04f 30ff 	mov.w	r0, #4294967295
 80042d2:	e03e      	b.n	8004352 <__swsetup_r+0xba>
 80042d4:	4b25      	ldr	r3, [pc, #148]	; (800436c <__swsetup_r+0xd4>)
 80042d6:	429c      	cmp	r4, r3
 80042d8:	d101      	bne.n	80042de <__swsetup_r+0x46>
 80042da:	68ac      	ldr	r4, [r5, #8]
 80042dc:	e7eb      	b.n	80042b6 <__swsetup_r+0x1e>
 80042de:	4b24      	ldr	r3, [pc, #144]	; (8004370 <__swsetup_r+0xd8>)
 80042e0:	429c      	cmp	r4, r3
 80042e2:	bf08      	it	eq
 80042e4:	68ec      	ldreq	r4, [r5, #12]
 80042e6:	e7e6      	b.n	80042b6 <__swsetup_r+0x1e>
 80042e8:	0751      	lsls	r1, r2, #29
 80042ea:	d512      	bpl.n	8004312 <__swsetup_r+0x7a>
 80042ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80042ee:	b141      	cbz	r1, 8004302 <__swsetup_r+0x6a>
 80042f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80042f4:	4299      	cmp	r1, r3
 80042f6:	d002      	beq.n	80042fe <__swsetup_r+0x66>
 80042f8:	4630      	mov	r0, r6
 80042fa:	f000 f973 	bl	80045e4 <_free_r>
 80042fe:	2300      	movs	r3, #0
 8004300:	6363      	str	r3, [r4, #52]	; 0x34
 8004302:	89a3      	ldrh	r3, [r4, #12]
 8004304:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004308:	81a3      	strh	r3, [r4, #12]
 800430a:	2300      	movs	r3, #0
 800430c:	6063      	str	r3, [r4, #4]
 800430e:	6923      	ldr	r3, [r4, #16]
 8004310:	6023      	str	r3, [r4, #0]
 8004312:	89a3      	ldrh	r3, [r4, #12]
 8004314:	f043 0308 	orr.w	r3, r3, #8
 8004318:	81a3      	strh	r3, [r4, #12]
 800431a:	6923      	ldr	r3, [r4, #16]
 800431c:	b94b      	cbnz	r3, 8004332 <__swsetup_r+0x9a>
 800431e:	89a3      	ldrh	r3, [r4, #12]
 8004320:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004324:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004328:	d003      	beq.n	8004332 <__swsetup_r+0x9a>
 800432a:	4621      	mov	r1, r4
 800432c:	4630      	mov	r0, r6
 800432e:	f000 f917 	bl	8004560 <__smakebuf_r>
 8004332:	89a2      	ldrh	r2, [r4, #12]
 8004334:	f012 0301 	ands.w	r3, r2, #1
 8004338:	d00c      	beq.n	8004354 <__swsetup_r+0xbc>
 800433a:	2300      	movs	r3, #0
 800433c:	60a3      	str	r3, [r4, #8]
 800433e:	6963      	ldr	r3, [r4, #20]
 8004340:	425b      	negs	r3, r3
 8004342:	61a3      	str	r3, [r4, #24]
 8004344:	6923      	ldr	r3, [r4, #16]
 8004346:	b953      	cbnz	r3, 800435e <__swsetup_r+0xc6>
 8004348:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800434c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004350:	d1ba      	bne.n	80042c8 <__swsetup_r+0x30>
 8004352:	bd70      	pop	{r4, r5, r6, pc}
 8004354:	0792      	lsls	r2, r2, #30
 8004356:	bf58      	it	pl
 8004358:	6963      	ldrpl	r3, [r4, #20]
 800435a:	60a3      	str	r3, [r4, #8]
 800435c:	e7f2      	b.n	8004344 <__swsetup_r+0xac>
 800435e:	2000      	movs	r0, #0
 8004360:	e7f7      	b.n	8004352 <__swsetup_r+0xba>
 8004362:	bf00      	nop
 8004364:	2000000c 	.word	0x2000000c
 8004368:	0800477c 	.word	0x0800477c
 800436c:	0800479c 	.word	0x0800479c
 8004370:	0800475c 	.word	0x0800475c

08004374 <_close_r>:
 8004374:	b538      	push	{r3, r4, r5, lr}
 8004376:	4c06      	ldr	r4, [pc, #24]	; (8004390 <_close_r+0x1c>)
 8004378:	2300      	movs	r3, #0
 800437a:	4605      	mov	r5, r0
 800437c:	4608      	mov	r0, r1
 800437e:	6023      	str	r3, [r4, #0]
 8004380:	f7fc fc9f 	bl	8000cc2 <_close>
 8004384:	1c43      	adds	r3, r0, #1
 8004386:	d102      	bne.n	800438e <_close_r+0x1a>
 8004388:	6823      	ldr	r3, [r4, #0]
 800438a:	b103      	cbz	r3, 800438e <_close_r+0x1a>
 800438c:	602b      	str	r3, [r5, #0]
 800438e:	bd38      	pop	{r3, r4, r5, pc}
 8004390:	20000120 	.word	0x20000120

08004394 <__sflush_r>:
 8004394:	898a      	ldrh	r2, [r1, #12]
 8004396:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800439a:	4605      	mov	r5, r0
 800439c:	0710      	lsls	r0, r2, #28
 800439e:	460c      	mov	r4, r1
 80043a0:	d458      	bmi.n	8004454 <__sflush_r+0xc0>
 80043a2:	684b      	ldr	r3, [r1, #4]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	dc05      	bgt.n	80043b4 <__sflush_r+0x20>
 80043a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	dc02      	bgt.n	80043b4 <__sflush_r+0x20>
 80043ae:	2000      	movs	r0, #0
 80043b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80043b6:	2e00      	cmp	r6, #0
 80043b8:	d0f9      	beq.n	80043ae <__sflush_r+0x1a>
 80043ba:	2300      	movs	r3, #0
 80043bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80043c0:	682f      	ldr	r7, [r5, #0]
 80043c2:	6a21      	ldr	r1, [r4, #32]
 80043c4:	602b      	str	r3, [r5, #0]
 80043c6:	d032      	beq.n	800442e <__sflush_r+0x9a>
 80043c8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80043ca:	89a3      	ldrh	r3, [r4, #12]
 80043cc:	075a      	lsls	r2, r3, #29
 80043ce:	d505      	bpl.n	80043dc <__sflush_r+0x48>
 80043d0:	6863      	ldr	r3, [r4, #4]
 80043d2:	1ac0      	subs	r0, r0, r3
 80043d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80043d6:	b10b      	cbz	r3, 80043dc <__sflush_r+0x48>
 80043d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80043da:	1ac0      	subs	r0, r0, r3
 80043dc:	2300      	movs	r3, #0
 80043de:	4602      	mov	r2, r0
 80043e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80043e2:	6a21      	ldr	r1, [r4, #32]
 80043e4:	4628      	mov	r0, r5
 80043e6:	47b0      	blx	r6
 80043e8:	1c43      	adds	r3, r0, #1
 80043ea:	89a3      	ldrh	r3, [r4, #12]
 80043ec:	d106      	bne.n	80043fc <__sflush_r+0x68>
 80043ee:	6829      	ldr	r1, [r5, #0]
 80043f0:	291d      	cmp	r1, #29
 80043f2:	d848      	bhi.n	8004486 <__sflush_r+0xf2>
 80043f4:	4a29      	ldr	r2, [pc, #164]	; (800449c <__sflush_r+0x108>)
 80043f6:	40ca      	lsrs	r2, r1
 80043f8:	07d6      	lsls	r6, r2, #31
 80043fa:	d544      	bpl.n	8004486 <__sflush_r+0xf2>
 80043fc:	2200      	movs	r2, #0
 80043fe:	6062      	str	r2, [r4, #4]
 8004400:	04d9      	lsls	r1, r3, #19
 8004402:	6922      	ldr	r2, [r4, #16]
 8004404:	6022      	str	r2, [r4, #0]
 8004406:	d504      	bpl.n	8004412 <__sflush_r+0x7e>
 8004408:	1c42      	adds	r2, r0, #1
 800440a:	d101      	bne.n	8004410 <__sflush_r+0x7c>
 800440c:	682b      	ldr	r3, [r5, #0]
 800440e:	b903      	cbnz	r3, 8004412 <__sflush_r+0x7e>
 8004410:	6560      	str	r0, [r4, #84]	; 0x54
 8004412:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004414:	602f      	str	r7, [r5, #0]
 8004416:	2900      	cmp	r1, #0
 8004418:	d0c9      	beq.n	80043ae <__sflush_r+0x1a>
 800441a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800441e:	4299      	cmp	r1, r3
 8004420:	d002      	beq.n	8004428 <__sflush_r+0x94>
 8004422:	4628      	mov	r0, r5
 8004424:	f000 f8de 	bl	80045e4 <_free_r>
 8004428:	2000      	movs	r0, #0
 800442a:	6360      	str	r0, [r4, #52]	; 0x34
 800442c:	e7c0      	b.n	80043b0 <__sflush_r+0x1c>
 800442e:	2301      	movs	r3, #1
 8004430:	4628      	mov	r0, r5
 8004432:	47b0      	blx	r6
 8004434:	1c41      	adds	r1, r0, #1
 8004436:	d1c8      	bne.n	80043ca <__sflush_r+0x36>
 8004438:	682b      	ldr	r3, [r5, #0]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d0c5      	beq.n	80043ca <__sflush_r+0x36>
 800443e:	2b1d      	cmp	r3, #29
 8004440:	d001      	beq.n	8004446 <__sflush_r+0xb2>
 8004442:	2b16      	cmp	r3, #22
 8004444:	d101      	bne.n	800444a <__sflush_r+0xb6>
 8004446:	602f      	str	r7, [r5, #0]
 8004448:	e7b1      	b.n	80043ae <__sflush_r+0x1a>
 800444a:	89a3      	ldrh	r3, [r4, #12]
 800444c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004450:	81a3      	strh	r3, [r4, #12]
 8004452:	e7ad      	b.n	80043b0 <__sflush_r+0x1c>
 8004454:	690f      	ldr	r7, [r1, #16]
 8004456:	2f00      	cmp	r7, #0
 8004458:	d0a9      	beq.n	80043ae <__sflush_r+0x1a>
 800445a:	0793      	lsls	r3, r2, #30
 800445c:	680e      	ldr	r6, [r1, #0]
 800445e:	bf08      	it	eq
 8004460:	694b      	ldreq	r3, [r1, #20]
 8004462:	600f      	str	r7, [r1, #0]
 8004464:	bf18      	it	ne
 8004466:	2300      	movne	r3, #0
 8004468:	eba6 0807 	sub.w	r8, r6, r7
 800446c:	608b      	str	r3, [r1, #8]
 800446e:	f1b8 0f00 	cmp.w	r8, #0
 8004472:	dd9c      	ble.n	80043ae <__sflush_r+0x1a>
 8004474:	4643      	mov	r3, r8
 8004476:	463a      	mov	r2, r7
 8004478:	6a21      	ldr	r1, [r4, #32]
 800447a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800447c:	4628      	mov	r0, r5
 800447e:	47b0      	blx	r6
 8004480:	2800      	cmp	r0, #0
 8004482:	dc06      	bgt.n	8004492 <__sflush_r+0xfe>
 8004484:	89a3      	ldrh	r3, [r4, #12]
 8004486:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800448a:	81a3      	strh	r3, [r4, #12]
 800448c:	f04f 30ff 	mov.w	r0, #4294967295
 8004490:	e78e      	b.n	80043b0 <__sflush_r+0x1c>
 8004492:	4407      	add	r7, r0
 8004494:	eba8 0800 	sub.w	r8, r8, r0
 8004498:	e7e9      	b.n	800446e <__sflush_r+0xda>
 800449a:	bf00      	nop
 800449c:	20400001 	.word	0x20400001

080044a0 <_fflush_r>:
 80044a0:	b538      	push	{r3, r4, r5, lr}
 80044a2:	690b      	ldr	r3, [r1, #16]
 80044a4:	4605      	mov	r5, r0
 80044a6:	460c      	mov	r4, r1
 80044a8:	b1db      	cbz	r3, 80044e2 <_fflush_r+0x42>
 80044aa:	b118      	cbz	r0, 80044b4 <_fflush_r+0x14>
 80044ac:	6983      	ldr	r3, [r0, #24]
 80044ae:	b90b      	cbnz	r3, 80044b4 <_fflush_r+0x14>
 80044b0:	f7ff fa8e 	bl	80039d0 <__sinit>
 80044b4:	4b0c      	ldr	r3, [pc, #48]	; (80044e8 <_fflush_r+0x48>)
 80044b6:	429c      	cmp	r4, r3
 80044b8:	d109      	bne.n	80044ce <_fflush_r+0x2e>
 80044ba:	686c      	ldr	r4, [r5, #4]
 80044bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044c0:	b17b      	cbz	r3, 80044e2 <_fflush_r+0x42>
 80044c2:	4621      	mov	r1, r4
 80044c4:	4628      	mov	r0, r5
 80044c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80044ca:	f7ff bf63 	b.w	8004394 <__sflush_r>
 80044ce:	4b07      	ldr	r3, [pc, #28]	; (80044ec <_fflush_r+0x4c>)
 80044d0:	429c      	cmp	r4, r3
 80044d2:	d101      	bne.n	80044d8 <_fflush_r+0x38>
 80044d4:	68ac      	ldr	r4, [r5, #8]
 80044d6:	e7f1      	b.n	80044bc <_fflush_r+0x1c>
 80044d8:	4b05      	ldr	r3, [pc, #20]	; (80044f0 <_fflush_r+0x50>)
 80044da:	429c      	cmp	r4, r3
 80044dc:	bf08      	it	eq
 80044de:	68ec      	ldreq	r4, [r5, #12]
 80044e0:	e7ec      	b.n	80044bc <_fflush_r+0x1c>
 80044e2:	2000      	movs	r0, #0
 80044e4:	bd38      	pop	{r3, r4, r5, pc}
 80044e6:	bf00      	nop
 80044e8:	0800477c 	.word	0x0800477c
 80044ec:	0800479c 	.word	0x0800479c
 80044f0:	0800475c 	.word	0x0800475c

080044f4 <_lseek_r>:
 80044f4:	b538      	push	{r3, r4, r5, lr}
 80044f6:	4c07      	ldr	r4, [pc, #28]	; (8004514 <_lseek_r+0x20>)
 80044f8:	4605      	mov	r5, r0
 80044fa:	4608      	mov	r0, r1
 80044fc:	4611      	mov	r1, r2
 80044fe:	2200      	movs	r2, #0
 8004500:	6022      	str	r2, [r4, #0]
 8004502:	461a      	mov	r2, r3
 8004504:	f7fc fc04 	bl	8000d10 <_lseek>
 8004508:	1c43      	adds	r3, r0, #1
 800450a:	d102      	bne.n	8004512 <_lseek_r+0x1e>
 800450c:	6823      	ldr	r3, [r4, #0]
 800450e:	b103      	cbz	r3, 8004512 <_lseek_r+0x1e>
 8004510:	602b      	str	r3, [r5, #0]
 8004512:	bd38      	pop	{r3, r4, r5, pc}
 8004514:	20000120 	.word	0x20000120

08004518 <__swhatbuf_r>:
 8004518:	b570      	push	{r4, r5, r6, lr}
 800451a:	460e      	mov	r6, r1
 800451c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004520:	2900      	cmp	r1, #0
 8004522:	b096      	sub	sp, #88	; 0x58
 8004524:	4614      	mov	r4, r2
 8004526:	461d      	mov	r5, r3
 8004528:	da07      	bge.n	800453a <__swhatbuf_r+0x22>
 800452a:	2300      	movs	r3, #0
 800452c:	602b      	str	r3, [r5, #0]
 800452e:	89b3      	ldrh	r3, [r6, #12]
 8004530:	061a      	lsls	r2, r3, #24
 8004532:	d410      	bmi.n	8004556 <__swhatbuf_r+0x3e>
 8004534:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004538:	e00e      	b.n	8004558 <__swhatbuf_r+0x40>
 800453a:	466a      	mov	r2, sp
 800453c:	f000 f8b2 	bl	80046a4 <_fstat_r>
 8004540:	2800      	cmp	r0, #0
 8004542:	dbf2      	blt.n	800452a <__swhatbuf_r+0x12>
 8004544:	9a01      	ldr	r2, [sp, #4]
 8004546:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800454a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800454e:	425a      	negs	r2, r3
 8004550:	415a      	adcs	r2, r3
 8004552:	602a      	str	r2, [r5, #0]
 8004554:	e7ee      	b.n	8004534 <__swhatbuf_r+0x1c>
 8004556:	2340      	movs	r3, #64	; 0x40
 8004558:	2000      	movs	r0, #0
 800455a:	6023      	str	r3, [r4, #0]
 800455c:	b016      	add	sp, #88	; 0x58
 800455e:	bd70      	pop	{r4, r5, r6, pc}

08004560 <__smakebuf_r>:
 8004560:	898b      	ldrh	r3, [r1, #12]
 8004562:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004564:	079d      	lsls	r5, r3, #30
 8004566:	4606      	mov	r6, r0
 8004568:	460c      	mov	r4, r1
 800456a:	d507      	bpl.n	800457c <__smakebuf_r+0x1c>
 800456c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004570:	6023      	str	r3, [r4, #0]
 8004572:	6123      	str	r3, [r4, #16]
 8004574:	2301      	movs	r3, #1
 8004576:	6163      	str	r3, [r4, #20]
 8004578:	b002      	add	sp, #8
 800457a:	bd70      	pop	{r4, r5, r6, pc}
 800457c:	ab01      	add	r3, sp, #4
 800457e:	466a      	mov	r2, sp
 8004580:	f7ff ffca 	bl	8004518 <__swhatbuf_r>
 8004584:	9900      	ldr	r1, [sp, #0]
 8004586:	4605      	mov	r5, r0
 8004588:	4630      	mov	r0, r6
 800458a:	f7ff faab 	bl	8003ae4 <_malloc_r>
 800458e:	b948      	cbnz	r0, 80045a4 <__smakebuf_r+0x44>
 8004590:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004594:	059a      	lsls	r2, r3, #22
 8004596:	d4ef      	bmi.n	8004578 <__smakebuf_r+0x18>
 8004598:	f023 0303 	bic.w	r3, r3, #3
 800459c:	f043 0302 	orr.w	r3, r3, #2
 80045a0:	81a3      	strh	r3, [r4, #12]
 80045a2:	e7e3      	b.n	800456c <__smakebuf_r+0xc>
 80045a4:	4b0d      	ldr	r3, [pc, #52]	; (80045dc <__smakebuf_r+0x7c>)
 80045a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80045a8:	89a3      	ldrh	r3, [r4, #12]
 80045aa:	6020      	str	r0, [r4, #0]
 80045ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045b0:	81a3      	strh	r3, [r4, #12]
 80045b2:	9b00      	ldr	r3, [sp, #0]
 80045b4:	6163      	str	r3, [r4, #20]
 80045b6:	9b01      	ldr	r3, [sp, #4]
 80045b8:	6120      	str	r0, [r4, #16]
 80045ba:	b15b      	cbz	r3, 80045d4 <__smakebuf_r+0x74>
 80045bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80045c0:	4630      	mov	r0, r6
 80045c2:	f000 f881 	bl	80046c8 <_isatty_r>
 80045c6:	b128      	cbz	r0, 80045d4 <__smakebuf_r+0x74>
 80045c8:	89a3      	ldrh	r3, [r4, #12]
 80045ca:	f023 0303 	bic.w	r3, r3, #3
 80045ce:	f043 0301 	orr.w	r3, r3, #1
 80045d2:	81a3      	strh	r3, [r4, #12]
 80045d4:	89a3      	ldrh	r3, [r4, #12]
 80045d6:	431d      	orrs	r5, r3
 80045d8:	81a5      	strh	r5, [r4, #12]
 80045da:	e7cd      	b.n	8004578 <__smakebuf_r+0x18>
 80045dc:	08003999 	.word	0x08003999

080045e0 <__malloc_lock>:
 80045e0:	4770      	bx	lr

080045e2 <__malloc_unlock>:
 80045e2:	4770      	bx	lr

080045e4 <_free_r>:
 80045e4:	b538      	push	{r3, r4, r5, lr}
 80045e6:	4605      	mov	r5, r0
 80045e8:	2900      	cmp	r1, #0
 80045ea:	d045      	beq.n	8004678 <_free_r+0x94>
 80045ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045f0:	1f0c      	subs	r4, r1, #4
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	bfb8      	it	lt
 80045f6:	18e4      	addlt	r4, r4, r3
 80045f8:	f7ff fff2 	bl	80045e0 <__malloc_lock>
 80045fc:	4a1f      	ldr	r2, [pc, #124]	; (800467c <_free_r+0x98>)
 80045fe:	6813      	ldr	r3, [r2, #0]
 8004600:	4610      	mov	r0, r2
 8004602:	b933      	cbnz	r3, 8004612 <_free_r+0x2e>
 8004604:	6063      	str	r3, [r4, #4]
 8004606:	6014      	str	r4, [r2, #0]
 8004608:	4628      	mov	r0, r5
 800460a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800460e:	f7ff bfe8 	b.w	80045e2 <__malloc_unlock>
 8004612:	42a3      	cmp	r3, r4
 8004614:	d90c      	bls.n	8004630 <_free_r+0x4c>
 8004616:	6821      	ldr	r1, [r4, #0]
 8004618:	1862      	adds	r2, r4, r1
 800461a:	4293      	cmp	r3, r2
 800461c:	bf04      	itt	eq
 800461e:	681a      	ldreq	r2, [r3, #0]
 8004620:	685b      	ldreq	r3, [r3, #4]
 8004622:	6063      	str	r3, [r4, #4]
 8004624:	bf04      	itt	eq
 8004626:	1852      	addeq	r2, r2, r1
 8004628:	6022      	streq	r2, [r4, #0]
 800462a:	6004      	str	r4, [r0, #0]
 800462c:	e7ec      	b.n	8004608 <_free_r+0x24>
 800462e:	4613      	mov	r3, r2
 8004630:	685a      	ldr	r2, [r3, #4]
 8004632:	b10a      	cbz	r2, 8004638 <_free_r+0x54>
 8004634:	42a2      	cmp	r2, r4
 8004636:	d9fa      	bls.n	800462e <_free_r+0x4a>
 8004638:	6819      	ldr	r1, [r3, #0]
 800463a:	1858      	adds	r0, r3, r1
 800463c:	42a0      	cmp	r0, r4
 800463e:	d10b      	bne.n	8004658 <_free_r+0x74>
 8004640:	6820      	ldr	r0, [r4, #0]
 8004642:	4401      	add	r1, r0
 8004644:	1858      	adds	r0, r3, r1
 8004646:	4282      	cmp	r2, r0
 8004648:	6019      	str	r1, [r3, #0]
 800464a:	d1dd      	bne.n	8004608 <_free_r+0x24>
 800464c:	6810      	ldr	r0, [r2, #0]
 800464e:	6852      	ldr	r2, [r2, #4]
 8004650:	605a      	str	r2, [r3, #4]
 8004652:	4401      	add	r1, r0
 8004654:	6019      	str	r1, [r3, #0]
 8004656:	e7d7      	b.n	8004608 <_free_r+0x24>
 8004658:	d902      	bls.n	8004660 <_free_r+0x7c>
 800465a:	230c      	movs	r3, #12
 800465c:	602b      	str	r3, [r5, #0]
 800465e:	e7d3      	b.n	8004608 <_free_r+0x24>
 8004660:	6820      	ldr	r0, [r4, #0]
 8004662:	1821      	adds	r1, r4, r0
 8004664:	428a      	cmp	r2, r1
 8004666:	bf04      	itt	eq
 8004668:	6811      	ldreq	r1, [r2, #0]
 800466a:	6852      	ldreq	r2, [r2, #4]
 800466c:	6062      	str	r2, [r4, #4]
 800466e:	bf04      	itt	eq
 8004670:	1809      	addeq	r1, r1, r0
 8004672:	6021      	streq	r1, [r4, #0]
 8004674:	605c      	str	r4, [r3, #4]
 8004676:	e7c7      	b.n	8004608 <_free_r+0x24>
 8004678:	bd38      	pop	{r3, r4, r5, pc}
 800467a:	bf00      	nop
 800467c:	20000094 	.word	0x20000094

08004680 <_read_r>:
 8004680:	b538      	push	{r3, r4, r5, lr}
 8004682:	4c07      	ldr	r4, [pc, #28]	; (80046a0 <_read_r+0x20>)
 8004684:	4605      	mov	r5, r0
 8004686:	4608      	mov	r0, r1
 8004688:	4611      	mov	r1, r2
 800468a:	2200      	movs	r2, #0
 800468c:	6022      	str	r2, [r4, #0]
 800468e:	461a      	mov	r2, r3
 8004690:	f7fc fafa 	bl	8000c88 <_read>
 8004694:	1c43      	adds	r3, r0, #1
 8004696:	d102      	bne.n	800469e <_read_r+0x1e>
 8004698:	6823      	ldr	r3, [r4, #0]
 800469a:	b103      	cbz	r3, 800469e <_read_r+0x1e>
 800469c:	602b      	str	r3, [r5, #0]
 800469e:	bd38      	pop	{r3, r4, r5, pc}
 80046a0:	20000120 	.word	0x20000120

080046a4 <_fstat_r>:
 80046a4:	b538      	push	{r3, r4, r5, lr}
 80046a6:	4c07      	ldr	r4, [pc, #28]	; (80046c4 <_fstat_r+0x20>)
 80046a8:	2300      	movs	r3, #0
 80046aa:	4605      	mov	r5, r0
 80046ac:	4608      	mov	r0, r1
 80046ae:	4611      	mov	r1, r2
 80046b0:	6023      	str	r3, [r4, #0]
 80046b2:	f7fc fb12 	bl	8000cda <_fstat>
 80046b6:	1c43      	adds	r3, r0, #1
 80046b8:	d102      	bne.n	80046c0 <_fstat_r+0x1c>
 80046ba:	6823      	ldr	r3, [r4, #0]
 80046bc:	b103      	cbz	r3, 80046c0 <_fstat_r+0x1c>
 80046be:	602b      	str	r3, [r5, #0]
 80046c0:	bd38      	pop	{r3, r4, r5, pc}
 80046c2:	bf00      	nop
 80046c4:	20000120 	.word	0x20000120

080046c8 <_isatty_r>:
 80046c8:	b538      	push	{r3, r4, r5, lr}
 80046ca:	4c06      	ldr	r4, [pc, #24]	; (80046e4 <_isatty_r+0x1c>)
 80046cc:	2300      	movs	r3, #0
 80046ce:	4605      	mov	r5, r0
 80046d0:	4608      	mov	r0, r1
 80046d2:	6023      	str	r3, [r4, #0]
 80046d4:	f7fc fb11 	bl	8000cfa <_isatty>
 80046d8:	1c43      	adds	r3, r0, #1
 80046da:	d102      	bne.n	80046e2 <_isatty_r+0x1a>
 80046dc:	6823      	ldr	r3, [r4, #0]
 80046de:	b103      	cbz	r3, 80046e2 <_isatty_r+0x1a>
 80046e0:	602b      	str	r3, [r5, #0]
 80046e2:	bd38      	pop	{r3, r4, r5, pc}
 80046e4:	20000120 	.word	0x20000120

080046e8 <_init>:
 80046e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ea:	bf00      	nop
 80046ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046ee:	bc08      	pop	{r3}
 80046f0:	469e      	mov	lr, r3
 80046f2:	4770      	bx	lr

080046f4 <_fini>:
 80046f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046f6:	bf00      	nop
 80046f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046fa:	bc08      	pop	{r3}
 80046fc:	469e      	mov	lr, r3
 80046fe:	4770      	bx	lr
