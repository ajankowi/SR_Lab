
dma_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006800  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08006990  08006990  00016990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a8c  08006a8c  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08006a8c  08006a8c  00016a8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a94  08006a94  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a94  08006a94  00016a94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a98  08006a98  00016a98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08006a9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  20000080  08006b1c  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000244  08006b1c  00020244  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018b34  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000310f  00000000  00000000  00038be4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001520  00000000  00000000  0003bcf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001378  00000000  00000000  0003d218  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002b101  00000000  00000000  0003e590  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000130e9  00000000  00000000  00069691  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00109f6a  00000000  00000000  0007c77a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001866e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f68  00000000  00000000  00186760  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006978 	.word	0x08006978

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	08006978 	.word	0x08006978

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b08a      	sub	sp, #40	; 0x28
 8000574:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8000576:	f107 031c 	add.w	r3, r7, #28
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
 800057e:	605a      	str	r2, [r3, #4]
 8000580:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000582:	1d3b      	adds	r3, r7, #4
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	60da      	str	r2, [r3, #12]
 800058e:	611a      	str	r2, [r3, #16]
 8000590:	615a      	str	r2, [r3, #20]

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000592:	4b2f      	ldr	r3, [pc, #188]	; (8000650 <MX_ADC1_Init+0xe0>)
 8000594:	4a2f      	ldr	r2, [pc, #188]	; (8000654 <MX_ADC1_Init+0xe4>)
 8000596:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000598:	4b2d      	ldr	r3, [pc, #180]	; (8000650 <MX_ADC1_Init+0xe0>)
 800059a:	2200      	movs	r2, #0
 800059c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800059e:	4b2c      	ldr	r3, [pc, #176]	; (8000650 <MX_ADC1_Init+0xe0>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005a4:	4b2a      	ldr	r3, [pc, #168]	; (8000650 <MX_ADC1_Init+0xe0>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005aa:	4b29      	ldr	r3, [pc, #164]	; (8000650 <MX_ADC1_Init+0xe0>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005b0:	4b27      	ldr	r3, [pc, #156]	; (8000650 <MX_ADC1_Init+0xe0>)
 80005b2:	2204      	movs	r2, #4
 80005b4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005b6:	4b26      	ldr	r3, [pc, #152]	; (8000650 <MX_ADC1_Init+0xe0>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005bc:	4b24      	ldr	r3, [pc, #144]	; (8000650 <MX_ADC1_Init+0xe0>)
 80005be:	2200      	movs	r2, #0
 80005c0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80005c2:	4b23      	ldr	r3, [pc, #140]	; (8000650 <MX_ADC1_Init+0xe0>)
 80005c4:	2201      	movs	r2, #1
 80005c6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005c8:	4b21      	ldr	r3, [pc, #132]	; (8000650 <MX_ADC1_Init+0xe0>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005d0:	4b1f      	ldr	r3, [pc, #124]	; (8000650 <MX_ADC1_Init+0xe0>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005d6:	4b1e      	ldr	r3, [pc, #120]	; (8000650 <MX_ADC1_Init+0xe0>)
 80005d8:	2200      	movs	r2, #0
 80005da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005dc:	4b1c      	ldr	r3, [pc, #112]	; (8000650 <MX_ADC1_Init+0xe0>)
 80005de:	2200      	movs	r2, #0
 80005e0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005e4:	4b1a      	ldr	r3, [pc, #104]	; (8000650 <MX_ADC1_Init+0xe0>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80005ea:	4b19      	ldr	r3, [pc, #100]	; (8000650 <MX_ADC1_Init+0xe0>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005f2:	4817      	ldr	r0, [pc, #92]	; (8000650 <MX_ADC1_Init+0xe0>)
 80005f4:	f000 ff5c 	bl	80014b0 <HAL_ADC_Init>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80005fe:	f000 faa3 	bl	8000b48 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000602:	2300      	movs	r3, #0
 8000604:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000606:	f107 031c 	add.w	r3, r7, #28
 800060a:	4619      	mov	r1, r3
 800060c:	4810      	ldr	r0, [pc, #64]	; (8000650 <MX_ADC1_Init+0xe0>)
 800060e:	f002 f8b1 	bl	8002774 <HAL_ADCEx_MultiModeConfigChannel>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000618:	f000 fa96 	bl	8000b48 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800061c:	4b0e      	ldr	r3, [pc, #56]	; (8000658 <MX_ADC1_Init+0xe8>)
 800061e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000620:	2306      	movs	r3, #6
 8000622:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8000624:	2305      	movs	r3, #5
 8000626:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000628:	237f      	movs	r3, #127	; 0x7f
 800062a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800062c:	2304      	movs	r3, #4
 800062e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000630:	2300      	movs	r3, #0
 8000632:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000634:	1d3b      	adds	r3, r7, #4
 8000636:	4619      	mov	r1, r3
 8000638:	4805      	ldr	r0, [pc, #20]	; (8000650 <MX_ADC1_Init+0xe0>)
 800063a:	f001 fbfb 	bl	8001e34 <HAL_ADC_ConfigChannel>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000644:	f000 fa80 	bl	8000b48 <Error_Handler>
  }

}
 8000648:	bf00      	nop
 800064a:	3728      	adds	r7, #40	; 0x28
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	200000a8 	.word	0x200000a8
 8000654:	50040000 	.word	0x50040000
 8000658:	3ef08000 	.word	0x3ef08000

0800065c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b08a      	sub	sp, #40	; 0x28
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000664:	f107 0314 	add.w	r3, r7, #20
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a19      	ldr	r2, [pc, #100]	; (80006e0 <HAL_ADC_MspInit+0x84>)
 800067a:	4293      	cmp	r3, r2
 800067c:	d12b      	bne.n	80006d6 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800067e:	4b19      	ldr	r3, [pc, #100]	; (80006e4 <HAL_ADC_MspInit+0x88>)
 8000680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000682:	4a18      	ldr	r2, [pc, #96]	; (80006e4 <HAL_ADC_MspInit+0x88>)
 8000684:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000688:	64d3      	str	r3, [r2, #76]	; 0x4c
 800068a:	4b16      	ldr	r3, [pc, #88]	; (80006e4 <HAL_ADC_MspInit+0x88>)
 800068c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800068e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000692:	613b      	str	r3, [r7, #16]
 8000694:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000696:	4b13      	ldr	r3, [pc, #76]	; (80006e4 <HAL_ADC_MspInit+0x88>)
 8000698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069a:	4a12      	ldr	r2, [pc, #72]	; (80006e4 <HAL_ADC_MspInit+0x88>)
 800069c:	f043 0302 	orr.w	r3, r3, #2
 80006a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006a2:	4b10      	ldr	r3, [pc, #64]	; (80006e4 <HAL_ADC_MspInit+0x88>)
 80006a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006a6:	f003 0302 	and.w	r3, r3, #2
 80006aa:	60fb      	str	r3, [r7, #12]
 80006ac:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006ae:	2301      	movs	r3, #1
 80006b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80006b2:	230b      	movs	r3, #11
 80006b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b6:	2300      	movs	r3, #0
 80006b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ba:	f107 0314 	add.w	r3, r7, #20
 80006be:	4619      	mov	r1, r3
 80006c0:	4809      	ldr	r0, [pc, #36]	; (80006e8 <HAL_ADC_MspInit+0x8c>)
 80006c2:	f002 fed5 	bl	8003470 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80006c6:	2200      	movs	r2, #0
 80006c8:	2100      	movs	r1, #0
 80006ca:	2012      	movs	r0, #18
 80006cc:	f002 f9d9 	bl	8002a82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80006d0:	2012      	movs	r0, #18
 80006d2:	f002 f9f2 	bl	8002aba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006d6:	bf00      	nop
 80006d8:	3728      	adds	r7, #40	; 0x28
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	50040000 	.word	0x50040000
 80006e4:	40021000 	.word	0x40021000
 80006e8:	48000400 	.word	0x48000400

080006ec <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b08a      	sub	sp, #40	; 0x28
 80006f0:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	2224      	movs	r2, #36	; 0x24
 80006f6:	2100      	movs	r1, #0
 80006f8:	4618      	mov	r0, r3
 80006fa:	f005 fa51 	bl	8005ba0 <memset>

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80006fe:	4b12      	ldr	r3, [pc, #72]	; (8000748 <MX_DAC1_Init+0x5c>)
 8000700:	4a12      	ldr	r2, [pc, #72]	; (800074c <MX_DAC1_Init+0x60>)
 8000702:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000704:	4810      	ldr	r0, [pc, #64]	; (8000748 <MX_DAC1_Init+0x5c>)
 8000706:	f002 f9f2 	bl	8002aee <HAL_DAC_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000710:	f000 fa1a 	bl	8000b48 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000714:	2300      	movs	r3, #0
 8000716:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8000718:	2304      	movs	r3, #4
 800071a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800071c:	2300      	movs	r3, #0
 800071e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000720:	2300      	movs	r3, #0
 8000722:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000724:	2300      	movs	r3, #0
 8000726:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000728:	1d3b      	adds	r3, r7, #4
 800072a:	2200      	movs	r2, #0
 800072c:	4619      	mov	r1, r3
 800072e:	4806      	ldr	r0, [pc, #24]	; (8000748 <MX_DAC1_Init+0x5c>)
 8000730:	f002 fb01 	bl	8002d36 <HAL_DAC_ConfigChannel>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800073a:	f000 fa05 	bl	8000b48 <Error_Handler>
  }

}
 800073e:	bf00      	nop
 8000740:	3728      	adds	r7, #40	; 0x28
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	2000010c 	.word	0x2000010c
 800074c:	40007400 	.word	0x40007400

08000750 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b08a      	sub	sp, #40	; 0x28
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000758:	f107 0314 	add.w	r3, r7, #20
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
 8000764:	60da      	str	r2, [r3, #12]
 8000766:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a2a      	ldr	r2, [pc, #168]	; (8000818 <HAL_DAC_MspInit+0xc8>)
 800076e:	4293      	cmp	r3, r2
 8000770:	d14e      	bne.n	8000810 <HAL_DAC_MspInit+0xc0>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000772:	4b2a      	ldr	r3, [pc, #168]	; (800081c <HAL_DAC_MspInit+0xcc>)
 8000774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000776:	4a29      	ldr	r2, [pc, #164]	; (800081c <HAL_DAC_MspInit+0xcc>)
 8000778:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800077c:	6593      	str	r3, [r2, #88]	; 0x58
 800077e:	4b27      	ldr	r3, [pc, #156]	; (800081c <HAL_DAC_MspInit+0xcc>)
 8000780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000782:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000786:	613b      	str	r3, [r7, #16]
 8000788:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800078a:	4b24      	ldr	r3, [pc, #144]	; (800081c <HAL_DAC_MspInit+0xcc>)
 800078c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078e:	4a23      	ldr	r2, [pc, #140]	; (800081c <HAL_DAC_MspInit+0xcc>)
 8000790:	f043 0301 	orr.w	r3, r3, #1
 8000794:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000796:	4b21      	ldr	r3, [pc, #132]	; (800081c <HAL_DAC_MspInit+0xcc>)
 8000798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079a:	f003 0301 	and.w	r3, r3, #1
 800079e:	60fb      	str	r3, [r7, #12]
 80007a0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80007a2:	2310      	movs	r3, #16
 80007a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007a6:	2303      	movs	r3, #3
 80007a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	2300      	movs	r3, #0
 80007ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ae:	f107 0314 	add.w	r3, r7, #20
 80007b2:	4619      	mov	r1, r3
 80007b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007b8:	f002 fe5a 	bl	8003470 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 80007bc:	4b18      	ldr	r3, [pc, #96]	; (8000820 <HAL_DAC_MspInit+0xd0>)
 80007be:	4a19      	ldr	r2, [pc, #100]	; (8000824 <HAL_DAC_MspInit+0xd4>)
 80007c0:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 80007c2:	4b17      	ldr	r3, [pc, #92]	; (8000820 <HAL_DAC_MspInit+0xd0>)
 80007c4:	2206      	movs	r2, #6
 80007c6:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80007c8:	4b15      	ldr	r3, [pc, #84]	; (8000820 <HAL_DAC_MspInit+0xd0>)
 80007ca:	2210      	movs	r2, #16
 80007cc:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80007ce:	4b14      	ldr	r3, [pc, #80]	; (8000820 <HAL_DAC_MspInit+0xd0>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80007d4:	4b12      	ldr	r3, [pc, #72]	; (8000820 <HAL_DAC_MspInit+0xd0>)
 80007d6:	2280      	movs	r2, #128	; 0x80
 80007d8:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80007da:	4b11      	ldr	r3, [pc, #68]	; (8000820 <HAL_DAC_MspInit+0xd0>)
 80007dc:	2200      	movs	r2, #0
 80007de:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80007e0:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <HAL_DAC_MspInit+0xd0>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 80007e6:	4b0e      	ldr	r3, [pc, #56]	; (8000820 <HAL_DAC_MspInit+0xd0>)
 80007e8:	2220      	movs	r2, #32
 80007ea:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_MEDIUM;
 80007ec:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <HAL_DAC_MspInit+0xd0>)
 80007ee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80007f2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 80007f4:	480a      	ldr	r0, [pc, #40]	; (8000820 <HAL_DAC_MspInit+0xd0>)
 80007f6:	f002 fc43 	bl	8003080 <HAL_DMA_Init>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <HAL_DAC_MspInit+0xb4>
    {
      Error_Handler();
 8000800:	f000 f9a2 	bl	8000b48 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac_ch1);
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	4a06      	ldr	r2, [pc, #24]	; (8000820 <HAL_DAC_MspInit+0xd0>)
 8000808:	609a      	str	r2, [r3, #8]
 800080a:	4a05      	ldr	r2, [pc, #20]	; (8000820 <HAL_DAC_MspInit+0xd0>)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000810:	bf00      	nop
 8000812:	3728      	adds	r7, #40	; 0x28
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	40007400 	.word	0x40007400
 800081c:	40021000 	.word	0x40021000
 8000820:	20000120 	.word	0x20000120
 8000824:	40020030 	.word	0x40020030

08000828 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800082e:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <MX_DMA_Init+0x38>)
 8000830:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000832:	4a0b      	ldr	r2, [pc, #44]	; (8000860 <MX_DMA_Init+0x38>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	6493      	str	r3, [r2, #72]	; 0x48
 800083a:	4b09      	ldr	r3, [pc, #36]	; (8000860 <MX_DMA_Init+0x38>)
 800083c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000846:	2200      	movs	r2, #0
 8000848:	2100      	movs	r1, #0
 800084a:	200d      	movs	r0, #13
 800084c:	f002 f919 	bl	8002a82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000850:	200d      	movs	r0, #13
 8000852:	f002 f932 	bl	8002aba <HAL_NVIC_EnableIRQ>

}
 8000856:	bf00      	nop
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40021000 	.word	0x40021000

08000864 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b08a      	sub	sp, #40	; 0x28
 8000868:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086a:	f107 0314 	add.w	r3, r7, #20
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]
 8000874:	609a      	str	r2, [r3, #8]
 8000876:	60da      	str	r2, [r3, #12]
 8000878:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800087a:	4b2b      	ldr	r3, [pc, #172]	; (8000928 <MX_GPIO_Init+0xc4>)
 800087c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087e:	4a2a      	ldr	r2, [pc, #168]	; (8000928 <MX_GPIO_Init+0xc4>)
 8000880:	f043 0304 	orr.w	r3, r3, #4
 8000884:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000886:	4b28      	ldr	r3, [pc, #160]	; (8000928 <MX_GPIO_Init+0xc4>)
 8000888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088a:	f003 0304 	and.w	r3, r3, #4
 800088e:	613b      	str	r3, [r7, #16]
 8000890:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000892:	4b25      	ldr	r3, [pc, #148]	; (8000928 <MX_GPIO_Init+0xc4>)
 8000894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000896:	4a24      	ldr	r2, [pc, #144]	; (8000928 <MX_GPIO_Init+0xc4>)
 8000898:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800089c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800089e:	4b22      	ldr	r3, [pc, #136]	; (8000928 <MX_GPIO_Init+0xc4>)
 80008a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008aa:	4b1f      	ldr	r3, [pc, #124]	; (8000928 <MX_GPIO_Init+0xc4>)
 80008ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ae:	4a1e      	ldr	r2, [pc, #120]	; (8000928 <MX_GPIO_Init+0xc4>)
 80008b0:	f043 0301 	orr.w	r3, r3, #1
 80008b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008b6:	4b1c      	ldr	r3, [pc, #112]	; (8000928 <MX_GPIO_Init+0xc4>)
 80008b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	60bb      	str	r3, [r7, #8]
 80008c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c2:	4b19      	ldr	r3, [pc, #100]	; (8000928 <MX_GPIO_Init+0xc4>)
 80008c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c6:	4a18      	ldr	r2, [pc, #96]	; (8000928 <MX_GPIO_Init+0xc4>)
 80008c8:	f043 0302 	orr.w	r3, r3, #2
 80008cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ce:	4b16      	ldr	r3, [pc, #88]	; (8000928 <MX_GPIO_Init+0xc4>)
 80008d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d2:	f003 0302 	and.w	r3, r3, #2
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008da:	2200      	movs	r2, #0
 80008dc:	2120      	movs	r1, #32
 80008de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008e2:	f002 ff6d 	bl	80037c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008ec:	4b0f      	ldr	r3, [pc, #60]	; (800092c <MX_GPIO_Init+0xc8>)
 80008ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008f4:	f107 0314 	add.w	r3, r7, #20
 80008f8:	4619      	mov	r1, r3
 80008fa:	480d      	ldr	r0, [pc, #52]	; (8000930 <MX_GPIO_Init+0xcc>)
 80008fc:	f002 fdb8 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000900:	2320      	movs	r3, #32
 8000902:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000904:	2301      	movs	r3, #1
 8000906:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090c:	2300      	movs	r3, #0
 800090e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000910:	f107 0314 	add.w	r3, r7, #20
 8000914:	4619      	mov	r1, r3
 8000916:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800091a:	f002 fda9 	bl	8003470 <HAL_GPIO_Init>

}
 800091e:	bf00      	nop
 8000920:	3728      	adds	r7, #40	; 0x28
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40021000 	.word	0x40021000
 800092c:	10210000 	.word	0x10210000
 8000930:	48000800 	.word	0x48000800

08000934 <HAL_ADC_ConvCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
	if(hadc == &hadc1) {
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	4a08      	ldr	r2, [pc, #32]	; (8000960 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000940:	4293      	cmp	r3, r2
 8000942:	d109      	bne.n	8000958 <HAL_ADC_ConvCpltCallback+0x24>
		adc_value = HAL_ADC_GetValue(hadc);
 8000944:	6878      	ldr	r0, [r7, #4]
 8000946:	f001 f839 	bl	80019bc <HAL_ADC_GetValue>
 800094a:	4603      	mov	r3, r0
 800094c:	b29a      	uxth	r2, r3
 800094e:	4b05      	ldr	r3, [pc, #20]	; (8000964 <HAL_ADC_ConvCpltCallback+0x30>)
 8000950:	801a      	strh	r2, [r3, #0]
		adc_flag = 1;
 8000952:	4b05      	ldr	r3, [pc, #20]	; (8000968 <HAL_ADC_ConvCpltCallback+0x34>)
 8000954:	2201      	movs	r2, #1
 8000956:	701a      	strb	r2, [r3, #0]
	}
}
 8000958:	bf00      	nop
 800095a:	3708      	adds	r7, #8
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	200000a8 	.word	0x200000a8
 8000964:	2000016a 	.word	0x2000016a
 8000968:	20000168 	.word	0x20000168

0800096c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000972:	f000 fb09 	bl	8000f88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000976:	f000 f845 	bl	8000a04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800097a:	f7ff ff73 	bl	8000864 <MX_GPIO_Init>
  MX_DMA_Init();
 800097e:	f7ff ff53 	bl	8000828 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000982:	f000 fa65 	bl	8000e50 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000986:	f7ff fdf3 	bl	8000570 <MX_ADC1_Init>
  MX_DAC1_Init();
 800098a:	f7ff feaf 	bl	80006ec <MX_DAC1_Init>
  MX_TIM6_Init();
 800098e:	f000 fa07 	bl	8000da0 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */


  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_8B_R, 0);
 8000992:	2300      	movs	r3, #0
 8000994:	2208      	movs	r2, #8
 8000996:	2100      	movs	r1, #0
 8000998:	4813      	ldr	r0, [pc, #76]	; (80009e8 <main+0x7c>)
 800099a:	f002 f989 	bl	8002cb0 <HAL_DAC_SetValue>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) &dac[0], 16, DAC_ALIGN_8B_R);
 800099e:	2308      	movs	r3, #8
 80009a0:	9300      	str	r3, [sp, #0]
 80009a2:	2310      	movs	r3, #16
 80009a4:	4a11      	ldr	r2, [pc, #68]	; (80009ec <main+0x80>)
 80009a6:	2100      	movs	r1, #0
 80009a8:	480f      	ldr	r0, [pc, #60]	; (80009e8 <main+0x7c>)
 80009aa:	f002 f8c3 	bl	8002b34 <HAL_DAC_Start_DMA>

  //HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)dacValue, 6, DAC_ALIGN_8B_R);

  HAL_TIM_Base_Start(&htim6);
 80009ae:	4810      	ldr	r0, [pc, #64]	; (80009f0 <main+0x84>)
 80009b0:	f004 fa74 	bl	8004e9c <HAL_TIM_Base_Start>

  HAL_ADC_Start_IT(&hadc1);
 80009b4:	480f      	ldr	r0, [pc, #60]	; (80009f4 <main+0x88>)
 80009b6:	f000 fecf 	bl	8001758 <HAL_ADC_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(adc_flag == 1){
 80009ba:	4b0f      	ldr	r3, [pc, #60]	; (80009f8 <main+0x8c>)
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	2b01      	cmp	r3, #1
 80009c2:	d10c      	bne.n	80009de <main+0x72>
		  printf("Zmierzona wartosc to %d\r\n", adc_value);
 80009c4:	4b0d      	ldr	r3, [pc, #52]	; (80009fc <main+0x90>)
 80009c6:	881b      	ldrh	r3, [r3, #0]
 80009c8:	b29b      	uxth	r3, r3
 80009ca:	4619      	mov	r1, r3
 80009cc:	480c      	ldr	r0, [pc, #48]	; (8000a00 <main+0x94>)
 80009ce:	f005 f8ef 	bl	8005bb0 <iprintf>

		  adc_flag = 0;
 80009d2:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <main+0x8c>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	701a      	strb	r2, [r3, #0]

		  HAL_ADC_Start_IT(&hadc1);
 80009d8:	4806      	ldr	r0, [pc, #24]	; (80009f4 <main+0x88>)
 80009da:	f000 febd 	bl	8001758 <HAL_ADC_Start_IT>
	  }
	  HAL_Delay(500);
 80009de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009e2:	f000 fb4d 	bl	8001080 <HAL_Delay>
	  if(adc_flag == 1){
 80009e6:	e7e8      	b.n	80009ba <main+0x4e>
 80009e8:	2000010c 	.word	0x2000010c
 80009ec:	20000000 	.word	0x20000000
 80009f0:	20000170 	.word	0x20000170
 80009f4:	200000a8 	.word	0x200000a8
 80009f8:	20000168 	.word	0x20000168
 80009fc:	2000016a 	.word	0x2000016a
 8000a00:	08006990 	.word	0x08006990

08000a04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b0b8      	sub	sp, #224	; 0xe0
 8000a08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a0a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a0e:	2244      	movs	r2, #68	; 0x44
 8000a10:	2100      	movs	r1, #0
 8000a12:	4618      	mov	r0, r3
 8000a14:	f005 f8c4 	bl	8005ba0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a18:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a28:	463b      	mov	r3, r7
 8000a2a:	2288      	movs	r2, #136	; 0x88
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f005 f8b6 	bl	8005ba0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a34:	2302      	movs	r3, #2
 8000a36:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a3e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a42:	2310      	movs	r3, #16
 8000a44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a54:	2301      	movs	r3, #1
 8000a56:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000a5a:	230a      	movs	r3, #10
 8000a5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a60:	2307      	movs	r3, #7
 8000a62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a66:	2302      	movs	r3, #2
 8000a68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a72:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a76:	4618      	mov	r0, r3
 8000a78:	f002 ff1e 	bl	80038b8 <HAL_RCC_OscConfig>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000a82:	f000 f861 	bl	8000b48 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a86:	230f      	movs	r3, #15
 8000a88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a8c:	2303      	movs	r3, #3
 8000a8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a92:	2300      	movs	r3, #0
 8000a94:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000aa4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000aa8:	2104      	movs	r1, #4
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f003 faea 	bl	8004084 <HAL_RCC_ClockConfig>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000ab6:	f000 f847 	bl	8000b48 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 8000aba:	f244 0302 	movw	r3, #16386	; 0x4002
 8000abe:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000ac4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ac8:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000aca:	2302      	movs	r3, #2
 8000acc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000ad2:	2308      	movs	r3, #8
 8000ad4:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000ad6:	2307      	movs	r3, #7
 8000ad8:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000ada:	2302      	movs	r3, #2
 8000adc:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000ae2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ae6:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ae8:	463b      	mov	r3, r7
 8000aea:	4618      	mov	r0, r3
 8000aec:	f003 fcce 	bl	800448c <HAL_RCCEx_PeriphCLKConfig>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000af6:	f000 f827 	bl	8000b48 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000afa:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000afe:	f002 fe85 	bl	800380c <HAL_PWREx_ControlVoltageScaling>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <SystemClock_Config+0x108>
  {
    Error_Handler();
 8000b08:	f000 f81e 	bl	8000b48 <Error_Handler>
  }
}
 8000b0c:	bf00      	nop
 8000b0e:	37e0      	adds	r7, #224	; 0xe0
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}

08000b14 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len){
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	60f8      	str	r0, [r7, #12]
 8000b1c:	60b9      	str	r1, [r7, #8]
 8000b1e:	607a      	str	r2, [r7, #4]

	  if(HAL_UART_Transmit(&huart2, (uint8_t *) ptr, len, 100) != HAL_OK){
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	b29a      	uxth	r2, r3
 8000b24:	2364      	movs	r3, #100	; 0x64
 8000b26:	68b9      	ldr	r1, [r7, #8]
 8000b28:	4806      	ldr	r0, [pc, #24]	; (8000b44 <_write+0x30>)
 8000b2a:	f004 fb8f 	bl	800524c <HAL_UART_Transmit>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <_write+0x24>
		  Error_Handler();
 8000b34:	f000 f808 	bl	8000b48 <Error_Handler>
	  }

	return len;
 8000b38:	687b      	ldr	r3, [r7, #4]
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3710      	adds	r7, #16
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	200001bc 	.word	0x200001bc

08000b48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
	...

08000b58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b5e:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <HAL_MspInit+0x44>)
 8000b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b62:	4a0e      	ldr	r2, [pc, #56]	; (8000b9c <HAL_MspInit+0x44>)
 8000b64:	f043 0301 	orr.w	r3, r3, #1
 8000b68:	6613      	str	r3, [r2, #96]	; 0x60
 8000b6a:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <HAL_MspInit+0x44>)
 8000b6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b6e:	f003 0301 	and.w	r3, r3, #1
 8000b72:	607b      	str	r3, [r7, #4]
 8000b74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b76:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <HAL_MspInit+0x44>)
 8000b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b7a:	4a08      	ldr	r2, [pc, #32]	; (8000b9c <HAL_MspInit+0x44>)
 8000b7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b80:	6593      	str	r3, [r2, #88]	; 0x58
 8000b82:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <HAL_MspInit+0x44>)
 8000b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b8a:	603b      	str	r3, [r7, #0]
 8000b8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	40021000 	.word	0x40021000

08000ba0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr

08000bae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bb2:	e7fe      	b.n	8000bb2 <HardFault_Handler+0x4>

08000bb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bb8:	e7fe      	b.n	8000bb8 <MemManage_Handler+0x4>

08000bba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bbe:	e7fe      	b.n	8000bbe <BusFault_Handler+0x4>

08000bc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bc4:	e7fe      	b.n	8000bc4 <UsageFault_Handler+0x4>

08000bc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr

08000bd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bd8:	bf00      	nop
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr

08000be2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000be2:	b480      	push	{r7}
 8000be4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000be6:	bf00      	nop
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr

08000bf0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bf4:	f000 fa24 	bl	8001040 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bf8:	bf00      	nop
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8000c00:	4802      	ldr	r0, [pc, #8]	; (8000c0c <DMA1_Channel3_IRQHandler+0x10>)
 8000c02:	f002 fb55 	bl	80032b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20000120 	.word	0x20000120

08000c10 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000c14:	4802      	ldr	r0, [pc, #8]	; (8000c20 <ADC1_2_IRQHandler+0x10>)
 8000c16:	f000 fedf 	bl	80019d8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	200000a8 	.word	0x200000a8

08000c24 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b086      	sub	sp, #24
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	60f8      	str	r0, [r7, #12]
 8000c2c:	60b9      	str	r1, [r7, #8]
 8000c2e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c30:	2300      	movs	r3, #0
 8000c32:	617b      	str	r3, [r7, #20]
 8000c34:	e00a      	b.n	8000c4c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c36:	f3af 8000 	nop.w
 8000c3a:	4601      	mov	r1, r0
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	1c5a      	adds	r2, r3, #1
 8000c40:	60ba      	str	r2, [r7, #8]
 8000c42:	b2ca      	uxtb	r2, r1
 8000c44:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	3301      	adds	r3, #1
 8000c4a:	617b      	str	r3, [r7, #20]
 8000c4c:	697a      	ldr	r2, [r7, #20]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	429a      	cmp	r2, r3
 8000c52:	dbf0      	blt.n	8000c36 <_read+0x12>
	}

return len;
 8000c54:	687b      	ldr	r3, [r7, #4]
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3718      	adds	r7, #24
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}

08000c5e <_close>:
	}
	return len;
}

int _close(int file)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	b083      	sub	sp, #12
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	6078      	str	r0, [r7, #4]
	return -1;
 8000c66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr

08000c76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c76:	b480      	push	{r7}
 8000c78:	b083      	sub	sp, #12
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	6078      	str	r0, [r7, #4]
 8000c7e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c86:	605a      	str	r2, [r3, #4]
	return 0;
 8000c88:	2300      	movs	r3, #0
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	370c      	adds	r7, #12
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr

08000c96 <_isatty>:

int _isatty(int file)
{
 8000c96:	b480      	push	{r7}
 8000c98:	b083      	sub	sp, #12
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	6078      	str	r0, [r7, #4]
	return 1;
 8000c9e:	2301      	movs	r3, #1
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	370c      	adds	r7, #12
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr

08000cac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b085      	sub	sp, #20
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	60f8      	str	r0, [r7, #12]
 8000cb4:	60b9      	str	r1, [r7, #8]
 8000cb6:	607a      	str	r2, [r7, #4]
	return 0;
 8000cb8:	2300      	movs	r3, #0
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3714      	adds	r7, #20
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
	...

08000cc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b086      	sub	sp, #24
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cd0:	4a14      	ldr	r2, [pc, #80]	; (8000d24 <_sbrk+0x5c>)
 8000cd2:	4b15      	ldr	r3, [pc, #84]	; (8000d28 <_sbrk+0x60>)
 8000cd4:	1ad3      	subs	r3, r2, r3
 8000cd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cdc:	4b13      	ldr	r3, [pc, #76]	; (8000d2c <_sbrk+0x64>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d102      	bne.n	8000cea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ce4:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <_sbrk+0x64>)
 8000ce6:	4a12      	ldr	r2, [pc, #72]	; (8000d30 <_sbrk+0x68>)
 8000ce8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cea:	4b10      	ldr	r3, [pc, #64]	; (8000d2c <_sbrk+0x64>)
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4413      	add	r3, r2
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	d207      	bcs.n	8000d08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cf8:	f004 ff28 	bl	8005b4c <__errno>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	230c      	movs	r3, #12
 8000d00:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000d02:	f04f 33ff 	mov.w	r3, #4294967295
 8000d06:	e009      	b.n	8000d1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d08:	4b08      	ldr	r3, [pc, #32]	; (8000d2c <_sbrk+0x64>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d0e:	4b07      	ldr	r3, [pc, #28]	; (8000d2c <_sbrk+0x64>)
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4413      	add	r3, r2
 8000d16:	4a05      	ldr	r2, [pc, #20]	; (8000d2c <_sbrk+0x64>)
 8000d18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d1a:	68fb      	ldr	r3, [r7, #12]
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3718      	adds	r7, #24
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	20018000 	.word	0x20018000
 8000d28:	00000400 	.word	0x00000400
 8000d2c:	2000009c 	.word	0x2000009c
 8000d30:	20000248 	.word	0x20000248

08000d34 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d38:	4b17      	ldr	r3, [pc, #92]	; (8000d98 <SystemInit+0x64>)
 8000d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d3e:	4a16      	ldr	r2, [pc, #88]	; (8000d98 <SystemInit+0x64>)
 8000d40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000d48:	4b14      	ldr	r3, [pc, #80]	; (8000d9c <SystemInit+0x68>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a13      	ldr	r2, [pc, #76]	; (8000d9c <SystemInit+0x68>)
 8000d4e:	f043 0301 	orr.w	r3, r3, #1
 8000d52:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000d54:	4b11      	ldr	r3, [pc, #68]	; (8000d9c <SystemInit+0x68>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000d5a:	4b10      	ldr	r3, [pc, #64]	; (8000d9c <SystemInit+0x68>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a0f      	ldr	r2, [pc, #60]	; (8000d9c <SystemInit+0x68>)
 8000d60:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000d64:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000d68:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000d6a:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <SystemInit+0x68>)
 8000d6c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d70:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d72:	4b0a      	ldr	r3, [pc, #40]	; (8000d9c <SystemInit+0x68>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4a09      	ldr	r2, [pc, #36]	; (8000d9c <SystemInit+0x68>)
 8000d78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d7c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000d7e:	4b07      	ldr	r3, [pc, #28]	; (8000d9c <SystemInit+0x68>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d84:	4b04      	ldr	r3, [pc, #16]	; (8000d98 <SystemInit+0x64>)
 8000d86:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d8a:	609a      	str	r2, [r3, #8]
#endif
}
 8000d8c:	bf00      	nop
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	e000ed00 	.word	0xe000ed00
 8000d9c:	40021000 	.word	0x40021000

08000da0 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000da6:	1d3b      	adds	r3, r7, #4
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 8000db0:	4b15      	ldr	r3, [pc, #84]	; (8000e08 <MX_TIM6_Init+0x68>)
 8000db2:	4a16      	ldr	r2, [pc, #88]	; (8000e0c <MX_TIM6_Init+0x6c>)
 8000db4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 15999;
 8000db6:	4b14      	ldr	r3, [pc, #80]	; (8000e08 <MX_TIM6_Init+0x68>)
 8000db8:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000dbc:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dbe:	4b12      	ldr	r3, [pc, #72]	; (8000e08 <MX_TIM6_Init+0x68>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4999;
 8000dc4:	4b10      	ldr	r3, [pc, #64]	; (8000e08 <MX_TIM6_Init+0x68>)
 8000dc6:	f241 3287 	movw	r2, #4999	; 0x1387
 8000dca:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dcc:	4b0e      	ldr	r3, [pc, #56]	; (8000e08 <MX_TIM6_Init+0x68>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000dd2:	480d      	ldr	r0, [pc, #52]	; (8000e08 <MX_TIM6_Init+0x68>)
 8000dd4:	f004 f80a 	bl	8004dec <HAL_TIM_Base_Init>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000dde:	f7ff feb3 	bl	8000b48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000de2:	2320      	movs	r3, #32
 8000de4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000de6:	2300      	movs	r3, #0
 8000de8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000dea:	1d3b      	adds	r3, r7, #4
 8000dec:	4619      	mov	r1, r3
 8000dee:	4806      	ldr	r0, [pc, #24]	; (8000e08 <MX_TIM6_Init+0x68>)
 8000df0:	f004 f956 	bl	80050a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8000dfa:	f7ff fea5 	bl	8000b48 <Error_Handler>
  }

}
 8000dfe:	bf00      	nop
 8000e00:	3710      	adds	r7, #16
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	20000170 	.word	0x20000170
 8000e0c:	40001000 	.word	0x40001000

08000e10 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b085      	sub	sp, #20
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a0a      	ldr	r2, [pc, #40]	; (8000e48 <HAL_TIM_Base_MspInit+0x38>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d10b      	bne.n	8000e3a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000e22:	4b0a      	ldr	r3, [pc, #40]	; (8000e4c <HAL_TIM_Base_MspInit+0x3c>)
 8000e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e26:	4a09      	ldr	r2, [pc, #36]	; (8000e4c <HAL_TIM_Base_MspInit+0x3c>)
 8000e28:	f043 0310 	orr.w	r3, r3, #16
 8000e2c:	6593      	str	r3, [r2, #88]	; 0x58
 8000e2e:	4b07      	ldr	r3, [pc, #28]	; (8000e4c <HAL_TIM_Base_MspInit+0x3c>)
 8000e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e32:	f003 0310 	and.w	r3, r3, #16
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8000e3a:	bf00      	nop
 8000e3c:	3714      	adds	r7, #20
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	40001000 	.word	0x40001000
 8000e4c:	40021000 	.word	0x40021000

08000e50 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000e54:	4b14      	ldr	r3, [pc, #80]	; (8000ea8 <MX_USART2_UART_Init+0x58>)
 8000e56:	4a15      	ldr	r2, [pc, #84]	; (8000eac <MX_USART2_UART_Init+0x5c>)
 8000e58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e5a:	4b13      	ldr	r3, [pc, #76]	; (8000ea8 <MX_USART2_UART_Init+0x58>)
 8000e5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e62:	4b11      	ldr	r3, [pc, #68]	; (8000ea8 <MX_USART2_UART_Init+0x58>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e68:	4b0f      	ldr	r3, [pc, #60]	; (8000ea8 <MX_USART2_UART_Init+0x58>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ea8 <MX_USART2_UART_Init+0x58>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e74:	4b0c      	ldr	r3, [pc, #48]	; (8000ea8 <MX_USART2_UART_Init+0x58>)
 8000e76:	220c      	movs	r2, #12
 8000e78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ea8 <MX_USART2_UART_Init+0x58>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e80:	4b09      	ldr	r3, [pc, #36]	; (8000ea8 <MX_USART2_UART_Init+0x58>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e86:	4b08      	ldr	r3, [pc, #32]	; (8000ea8 <MX_USART2_UART_Init+0x58>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e8c:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <MX_USART2_UART_Init+0x58>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e92:	4805      	ldr	r0, [pc, #20]	; (8000ea8 <MX_USART2_UART_Init+0x58>)
 8000e94:	f004 f98c 	bl	80051b0 <HAL_UART_Init>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000e9e:	f7ff fe53 	bl	8000b48 <Error_Handler>
  }

}
 8000ea2:	bf00      	nop
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	200001bc 	.word	0x200001bc
 8000eac:	40004400 	.word	0x40004400

08000eb0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08a      	sub	sp, #40	; 0x28
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb8:	f107 0314 	add.w	r3, r7, #20
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a17      	ldr	r2, [pc, #92]	; (8000f2c <HAL_UART_MspInit+0x7c>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d128      	bne.n	8000f24 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ed2:	4b17      	ldr	r3, [pc, #92]	; (8000f30 <HAL_UART_MspInit+0x80>)
 8000ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ed6:	4a16      	ldr	r2, [pc, #88]	; (8000f30 <HAL_UART_MspInit+0x80>)
 8000ed8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000edc:	6593      	str	r3, [r2, #88]	; 0x58
 8000ede:	4b14      	ldr	r3, [pc, #80]	; (8000f30 <HAL_UART_MspInit+0x80>)
 8000ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ee6:	613b      	str	r3, [r7, #16]
 8000ee8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eea:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <HAL_UART_MspInit+0x80>)
 8000eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eee:	4a10      	ldr	r2, [pc, #64]	; (8000f30 <HAL_UART_MspInit+0x80>)
 8000ef0:	f043 0301 	orr.w	r3, r3, #1
 8000ef4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ef6:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <HAL_UART_MspInit+0x80>)
 8000ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000efa:	f003 0301 	and.w	r3, r3, #1
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f02:	230c      	movs	r3, #12
 8000f04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f06:	2302      	movs	r3, #2
 8000f08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f0e:	2303      	movs	r3, #3
 8000f10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f12:	2307      	movs	r3, #7
 8000f14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f16:	f107 0314 	add.w	r3, r7, #20
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f20:	f002 faa6 	bl	8003470 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000f24:	bf00      	nop
 8000f26:	3728      	adds	r7, #40	; 0x28
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	40004400 	.word	0x40004400
 8000f30:	40021000 	.word	0x40021000

08000f34 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f6c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f38:	f7ff fefc 	bl	8000d34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000f3c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000f3e:	e003      	b.n	8000f48 <LoopCopyDataInit>

08000f40 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000f40:	4b0b      	ldr	r3, [pc, #44]	; (8000f70 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000f42:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000f44:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000f46:	3104      	adds	r1, #4

08000f48 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000f48:	480a      	ldr	r0, [pc, #40]	; (8000f74 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000f4a:	4b0b      	ldr	r3, [pc, #44]	; (8000f78 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000f4c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000f4e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000f50:	d3f6      	bcc.n	8000f40 <CopyDataInit>
	ldr	r2, =_sbss
 8000f52:	4a0a      	ldr	r2, [pc, #40]	; (8000f7c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000f54:	e002      	b.n	8000f5c <LoopFillZerobss>

08000f56 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000f56:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000f58:	f842 3b04 	str.w	r3, [r2], #4

08000f5c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000f5c:	4b08      	ldr	r3, [pc, #32]	; (8000f80 <LoopForever+0x16>)
	cmp	r2, r3
 8000f5e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000f60:	d3f9      	bcc.n	8000f56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f62:	f004 fdf9 	bl	8005b58 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f66:	f7ff fd01 	bl	800096c <main>

08000f6a <LoopForever>:

LoopForever:
    b LoopForever
 8000f6a:	e7fe      	b.n	8000f6a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f6c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000f70:	08006a9c 	.word	0x08006a9c
	ldr	r0, =_sdata
 8000f74:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000f78:	20000080 	.word	0x20000080
	ldr	r2, =_sbss
 8000f7c:	20000080 	.word	0x20000080
	ldr	r3, = _ebss
 8000f80:	20000244 	.word	0x20000244

08000f84 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f84:	e7fe      	b.n	8000f84 <ADC3_IRQHandler>
	...

08000f88 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f92:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <HAL_Init+0x3c>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a0b      	ldr	r2, [pc, #44]	; (8000fc4 <HAL_Init+0x3c>)
 8000f98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f9c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f9e:	2003      	movs	r0, #3
 8000fa0:	f001 fd64 	bl	8002a6c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fa4:	2000      	movs	r0, #0
 8000fa6:	f000 f80f 	bl	8000fc8 <HAL_InitTick>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d002      	beq.n	8000fb6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	71fb      	strb	r3, [r7, #7]
 8000fb4:	e001      	b.n	8000fba <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fb6:	f7ff fdcf 	bl	8000b58 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fba:	79fb      	ldrb	r3, [r7, #7]
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40022000 	.word	0x40022000

08000fc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000fd4:	4b17      	ldr	r3, [pc, #92]	; (8001034 <HAL_InitTick+0x6c>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d023      	beq.n	8001024 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000fdc:	4b16      	ldr	r3, [pc, #88]	; (8001038 <HAL_InitTick+0x70>)
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	4b14      	ldr	r3, [pc, #80]	; (8001034 <HAL_InitTick+0x6c>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f001 fd6f 	bl	8002ad6 <HAL_SYSTICK_Config>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d10f      	bne.n	800101e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2b0f      	cmp	r3, #15
 8001002:	d809      	bhi.n	8001018 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001004:	2200      	movs	r2, #0
 8001006:	6879      	ldr	r1, [r7, #4]
 8001008:	f04f 30ff 	mov.w	r0, #4294967295
 800100c:	f001 fd39 	bl	8002a82 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001010:	4a0a      	ldr	r2, [pc, #40]	; (800103c <HAL_InitTick+0x74>)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6013      	str	r3, [r2, #0]
 8001016:	e007      	b.n	8001028 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001018:	2301      	movs	r3, #1
 800101a:	73fb      	strb	r3, [r7, #15]
 800101c:	e004      	b.n	8001028 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800101e:	2301      	movs	r3, #1
 8001020:	73fb      	strb	r3, [r7, #15]
 8001022:	e001      	b.n	8001028 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001024:	2301      	movs	r3, #1
 8001026:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001028:	7bfb      	ldrb	r3, [r7, #15]
}
 800102a:	4618      	mov	r0, r3
 800102c:	3710      	adds	r7, #16
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	20000018 	.word	0x20000018
 8001038:	20000010 	.word	0x20000010
 800103c:	20000014 	.word	0x20000014

08001040 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001044:	4b06      	ldr	r3, [pc, #24]	; (8001060 <HAL_IncTick+0x20>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	461a      	mov	r2, r3
 800104a:	4b06      	ldr	r3, [pc, #24]	; (8001064 <HAL_IncTick+0x24>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4413      	add	r3, r2
 8001050:	4a04      	ldr	r2, [pc, #16]	; (8001064 <HAL_IncTick+0x24>)
 8001052:	6013      	str	r3, [r2, #0]
}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	20000018 	.word	0x20000018
 8001064:	2000023c 	.word	0x2000023c

08001068 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  return uwTick;
 800106c:	4b03      	ldr	r3, [pc, #12]	; (800107c <HAL_GetTick+0x14>)
 800106e:	681b      	ldr	r3, [r3, #0]
}
 8001070:	4618      	mov	r0, r3
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	2000023c 	.word	0x2000023c

08001080 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001088:	f7ff ffee 	bl	8001068 <HAL_GetTick>
 800108c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001098:	d005      	beq.n	80010a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800109a:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <HAL_Delay+0x40>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	461a      	mov	r2, r3
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	4413      	add	r3, r2
 80010a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010a6:	bf00      	nop
 80010a8:	f7ff ffde 	bl	8001068 <HAL_GetTick>
 80010ac:	4602      	mov	r2, r0
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	68fa      	ldr	r2, [r7, #12]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d8f7      	bhi.n	80010a8 <HAL_Delay+0x28>
  {
  }
}
 80010b8:	bf00      	nop
 80010ba:	3710      	adds	r7, #16
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20000018 	.word	0x20000018

080010c4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	431a      	orrs	r2, r3
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	609a      	str	r2, [r3, #8]
}
 80010de:	bf00      	nop
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr

080010ea <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80010ea:	b480      	push	{r7}
 80010ec:	b083      	sub	sp, #12
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
 80010f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	689b      	ldr	r3, [r3, #8]
 80010f8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	431a      	orrs	r2, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	609a      	str	r2, [r3, #8]
}
 8001104:	bf00      	nop
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001120:	4618      	mov	r0, r3
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800112c:	b480      	push	{r7}
 800112e:	b087      	sub	sp, #28
 8001130:	af00      	add	r7, sp, #0
 8001132:	60f8      	str	r0, [r7, #12]
 8001134:	60b9      	str	r1, [r7, #8]
 8001136:	607a      	str	r2, [r7, #4]
 8001138:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	3360      	adds	r3, #96	; 0x60
 800113e:	461a      	mov	r2, r3
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	4413      	add	r3, r2
 8001146:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	4b08      	ldr	r3, [pc, #32]	; (8001170 <LL_ADC_SetOffset+0x44>)
 800114e:	4013      	ands	r3, r2
 8001150:	687a      	ldr	r2, [r7, #4]
 8001152:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001156:	683a      	ldr	r2, [r7, #0]
 8001158:	430a      	orrs	r2, r1
 800115a:	4313      	orrs	r3, r2
 800115c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001164:	bf00      	nop
 8001166:	371c      	adds	r7, #28
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	03fff000 	.word	0x03fff000

08001174 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001174:	b480      	push	{r7}
 8001176:	b085      	sub	sp, #20
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	3360      	adds	r3, #96	; 0x60
 8001182:	461a      	mov	r2, r3
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	4413      	add	r3, r2
 800118a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001194:	4618      	mov	r0, r3
 8001196:	3714      	adds	r7, #20
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b087      	sub	sp, #28
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	60b9      	str	r1, [r7, #8]
 80011aa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	3360      	adds	r3, #96	; 0x60
 80011b0:	461a      	mov	r2, r3
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	4413      	add	r3, r2
 80011b8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	431a      	orrs	r2, r3
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80011ca:	bf00      	nop
 80011cc:	371c      	adds	r7, #28
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr

080011d6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80011d6:	b480      	push	{r7}
 80011d8:	b083      	sub	sp, #12
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	68db      	ldr	r3, [r3, #12]
 80011e2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d101      	bne.n	80011ee <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80011ea:	2301      	movs	r3, #1
 80011ec:	e000      	b.n	80011f0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80011ee:	2300      	movs	r3, #0
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b087      	sub	sp, #28
 8001200:	af00      	add	r7, sp, #0
 8001202:	60f8      	str	r0, [r7, #12]
 8001204:	60b9      	str	r1, [r7, #8]
 8001206:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	3330      	adds	r3, #48	; 0x30
 800120c:	461a      	mov	r2, r3
 800120e:	68bb      	ldr	r3, [r7, #8]
 8001210:	0a1b      	lsrs	r3, r3, #8
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	f003 030c 	and.w	r3, r3, #12
 8001218:	4413      	add	r3, r2
 800121a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	f003 031f 	and.w	r3, r3, #31
 8001226:	211f      	movs	r1, #31
 8001228:	fa01 f303 	lsl.w	r3, r1, r3
 800122c:	43db      	mvns	r3, r3
 800122e:	401a      	ands	r2, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	0e9b      	lsrs	r3, r3, #26
 8001234:	f003 011f 	and.w	r1, r3, #31
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	f003 031f 	and.w	r3, r3, #31
 800123e:	fa01 f303 	lsl.w	r3, r1, r3
 8001242:	431a      	orrs	r2, r3
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001248:	bf00      	nop
 800124a:	371c      	adds	r7, #28
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001260:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d101      	bne.n	800126c <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001268:	2301      	movs	r3, #1
 800126a:	e000      	b.n	800126e <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800126c:	2300      	movs	r3, #0
}
 800126e:	4618      	mov	r0, r3
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr

0800127a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800127a:	b480      	push	{r7}
 800127c:	b087      	sub	sp, #28
 800127e:	af00      	add	r7, sp, #0
 8001280:	60f8      	str	r0, [r7, #12]
 8001282:	60b9      	str	r1, [r7, #8]
 8001284:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	3314      	adds	r3, #20
 800128a:	461a      	mov	r2, r3
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	0e5b      	lsrs	r3, r3, #25
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	f003 0304 	and.w	r3, r3, #4
 8001296:	4413      	add	r3, r2
 8001298:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	0d1b      	lsrs	r3, r3, #20
 80012a2:	f003 031f 	and.w	r3, r3, #31
 80012a6:	2107      	movs	r1, #7
 80012a8:	fa01 f303 	lsl.w	r3, r1, r3
 80012ac:	43db      	mvns	r3, r3
 80012ae:	401a      	ands	r2, r3
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	0d1b      	lsrs	r3, r3, #20
 80012b4:	f003 031f 	and.w	r3, r3, #31
 80012b8:	6879      	ldr	r1, [r7, #4]
 80012ba:	fa01 f303 	lsl.w	r3, r1, r3
 80012be:	431a      	orrs	r2, r3
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80012c4:	bf00      	nop
 80012c6:	371c      	adds	r7, #28
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr

080012d0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	60f8      	str	r0, [r7, #12]
 80012d8:	60b9      	str	r1, [r7, #8]
 80012da:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012e8:	43db      	mvns	r3, r3
 80012ea:	401a      	ands	r2, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	f003 0318 	and.w	r3, r3, #24
 80012f2:	4908      	ldr	r1, [pc, #32]	; (8001314 <LL_ADC_SetChannelSingleDiff+0x44>)
 80012f4:	40d9      	lsrs	r1, r3
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	400b      	ands	r3, r1
 80012fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012fe:	431a      	orrs	r2, r3
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001306:	bf00      	nop
 8001308:	3714      	adds	r7, #20
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	0007ffff 	.word	0x0007ffff

08001318 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	f003 031f 	and.w	r3, r3, #31
}
 8001328:	4618      	mov	r0, r3
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001344:	4618      	mov	r0, r3
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr

08001350 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001360:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001364:	687a      	ldr	r2, [r7, #4]
 8001366:	6093      	str	r3, [r2, #8]
}
 8001368:	bf00      	nop
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr

08001374 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001384:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001388:	d101      	bne.n	800138e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800138a:	2301      	movs	r3, #1
 800138c:	e000      	b.n	8001390 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800138e:	2300      	movs	r3, #0
}
 8001390:	4618      	mov	r0, r3
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80013ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80013b0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80013b8:	bf00      	nop
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr

080013c4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80013d8:	d101      	bne.n	80013de <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80013da:	2301      	movs	r3, #1
 80013dc:	e000      	b.n	80013e0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80013de:	2300      	movs	r3, #0
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80013fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001400:	f043 0201 	orr.w	r2, r3, #1
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001408:	bf00      	nop
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	f003 0301 	and.w	r3, r3, #1
 8001424:	2b01      	cmp	r3, #1
 8001426:	d101      	bne.n	800142c <LL_ADC_IsEnabled+0x18>
 8001428:	2301      	movs	r3, #1
 800142a:	e000      	b.n	800142e <LL_ADC_IsEnabled+0x1a>
 800142c:	2300      	movs	r3, #0
}
 800142e:	4618      	mov	r0, r3
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr

0800143a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800143a:	b480      	push	{r7}
 800143c:	b083      	sub	sp, #12
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800144a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800144e:	f043 0204 	orr.w	r2, r3, #4
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001456:	bf00      	nop
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr

08001462 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001462:	b480      	push	{r7}
 8001464:	b083      	sub	sp, #12
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	f003 0304 	and.w	r3, r3, #4
 8001472:	2b04      	cmp	r3, #4
 8001474:	d101      	bne.n	800147a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001476:	2301      	movs	r3, #1
 8001478:	e000      	b.n	800147c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800147a:	2300      	movs	r3, #0
}
 800147c:	4618      	mov	r0, r3
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	f003 0308 	and.w	r3, r3, #8
 8001498:	2b08      	cmp	r3, #8
 800149a:	d101      	bne.n	80014a0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800149c:	2301      	movs	r3, #1
 800149e:	e000      	b.n	80014a2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80014a0:	2300      	movs	r3, #0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
	...

080014b0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80014b0:	b590      	push	{r4, r7, lr}
 80014b2:	b089      	sub	sp, #36	; 0x24
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014b8:	2300      	movs	r3, #0
 80014ba:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80014bc:	2300      	movs	r3, #0
 80014be:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d101      	bne.n	80014ca <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e134      	b.n	8001734 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	691b      	ldr	r3, [r3, #16]
 80014ce:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d109      	bne.n	80014ec <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f7ff f8bf 	bl	800065c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2200      	movs	r2, #0
 80014e2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2200      	movs	r2, #0
 80014e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff ff3f 	bl	8001374 <LL_ADC_IsDeepPowerDownEnabled>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d004      	beq.n	8001506 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff ff25 	bl	8001350 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff ff5a 	bl	80013c4 <LL_ADC_IsInternalRegulatorEnabled>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d113      	bne.n	800153e <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4618      	mov	r0, r3
 800151c:	f7ff ff3e 	bl	800139c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001520:	4b86      	ldr	r3, [pc, #536]	; (800173c <HAL_ADC_Init+0x28c>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	099b      	lsrs	r3, r3, #6
 8001526:	4a86      	ldr	r2, [pc, #536]	; (8001740 <HAL_ADC_Init+0x290>)
 8001528:	fba2 2303 	umull	r2, r3, r2, r3
 800152c:	099b      	lsrs	r3, r3, #6
 800152e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001530:	e002      	b.n	8001538 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	3b01      	subs	r3, #1
 8001536:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d1f9      	bne.n	8001532 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4618      	mov	r0, r3
 8001544:	f7ff ff3e 	bl	80013c4 <LL_ADC_IsInternalRegulatorEnabled>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d10d      	bne.n	800156a <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001552:	f043 0210 	orr.w	r2, r3, #16
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800155e:	f043 0201 	orr.w	r2, r3, #1
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4618      	mov	r0, r3
 8001570:	f7ff ff77 	bl	8001462 <LL_ADC_REG_IsConversionOngoing>
 8001574:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800157a:	f003 0310 	and.w	r3, r3, #16
 800157e:	2b00      	cmp	r3, #0
 8001580:	f040 80cf 	bne.w	8001722 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	2b00      	cmp	r3, #0
 8001588:	f040 80cb 	bne.w	8001722 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001590:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001594:	f043 0202 	orr.w	r2, r3, #2
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7ff ff37 	bl	8001414 <LL_ADC_IsEnabled>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d115      	bne.n	80015d8 <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80015ac:	4865      	ldr	r0, [pc, #404]	; (8001744 <HAL_ADC_Init+0x294>)
 80015ae:	f7ff ff31 	bl	8001414 <LL_ADC_IsEnabled>
 80015b2:	4604      	mov	r4, r0
 80015b4:	4864      	ldr	r0, [pc, #400]	; (8001748 <HAL_ADC_Init+0x298>)
 80015b6:	f7ff ff2d 	bl	8001414 <LL_ADC_IsEnabled>
 80015ba:	4603      	mov	r3, r0
 80015bc:	431c      	orrs	r4, r3
 80015be:	4863      	ldr	r0, [pc, #396]	; (800174c <HAL_ADC_Init+0x29c>)
 80015c0:	f7ff ff28 	bl	8001414 <LL_ADC_IsEnabled>
 80015c4:	4603      	mov	r3, r0
 80015c6:	4323      	orrs	r3, r4
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d105      	bne.n	80015d8 <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	4619      	mov	r1, r3
 80015d2:	485f      	ldr	r0, [pc, #380]	; (8001750 <HAL_ADC_Init+0x2a0>)
 80015d4:	f7ff fd76 	bl	80010c4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	7e5b      	ldrb	r3, [r3, #25]
 80015dc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80015e2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80015e8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80015ee:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015f6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80015f8:	4313      	orrs	r3, r2
 80015fa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001602:	2b01      	cmp	r3, #1
 8001604:	d106      	bne.n	8001614 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800160a:	3b01      	subs	r3, #1
 800160c:	045b      	lsls	r3, r3, #17
 800160e:	69ba      	ldr	r2, [r7, #24]
 8001610:	4313      	orrs	r3, r2
 8001612:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001618:	2b00      	cmp	r3, #0
 800161a:	d009      	beq.n	8001630 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001620:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001628:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	4313      	orrs	r3, r2
 800162e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	68da      	ldr	r2, [r3, #12]
 8001636:	4b47      	ldr	r3, [pc, #284]	; (8001754 <HAL_ADC_Init+0x2a4>)
 8001638:	4013      	ands	r3, r2
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	6812      	ldr	r2, [r2, #0]
 800163e:	69b9      	ldr	r1, [r7, #24]
 8001640:	430b      	orrs	r3, r1
 8001642:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff ff0a 	bl	8001462 <LL_ADC_REG_IsConversionOngoing>
 800164e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff ff17 	bl	8001488 <LL_ADC_INJ_IsConversionOngoing>
 800165a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d13d      	bne.n	80016de <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d13a      	bne.n	80016de <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800166c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001674:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001676:	4313      	orrs	r3, r2
 8001678:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001684:	f023 0302 	bic.w	r3, r3, #2
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	6812      	ldr	r2, [r2, #0]
 800168c:	69b9      	ldr	r1, [r7, #24]
 800168e:	430b      	orrs	r3, r1
 8001690:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001698:	2b01      	cmp	r3, #1
 800169a:	d118      	bne.n	80016ce <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	691b      	ldr	r3, [r3, #16]
 80016a2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80016a6:	f023 0304 	bic.w	r3, r3, #4
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80016b2:	4311      	orrs	r1, r2
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80016b8:	4311      	orrs	r1, r2
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80016be:	430a      	orrs	r2, r1
 80016c0:	431a      	orrs	r2, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f042 0201 	orr.w	r2, r2, #1
 80016ca:	611a      	str	r2, [r3, #16]
 80016cc:	e007      	b.n	80016de <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	691a      	ldr	r2, [r3, #16]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f022 0201 	bic.w	r2, r2, #1
 80016dc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	691b      	ldr	r3, [r3, #16]
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d10c      	bne.n	8001700 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ec:	f023 010f 	bic.w	r1, r3, #15
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	69db      	ldr	r3, [r3, #28]
 80016f4:	1e5a      	subs	r2, r3, #1
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	430a      	orrs	r2, r1
 80016fc:	631a      	str	r2, [r3, #48]	; 0x30
 80016fe:	e007      	b.n	8001710 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f022 020f 	bic.w	r2, r2, #15
 800170e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001714:	f023 0303 	bic.w	r3, r3, #3
 8001718:	f043 0201 	orr.w	r2, r3, #1
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	655a      	str	r2, [r3, #84]	; 0x54
 8001720:	e007      	b.n	8001732 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001726:	f043 0210 	orr.w	r2, r3, #16
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001732:	7ffb      	ldrb	r3, [r7, #31]
}
 8001734:	4618      	mov	r0, r3
 8001736:	3724      	adds	r7, #36	; 0x24
 8001738:	46bd      	mov	sp, r7
 800173a:	bd90      	pop	{r4, r7, pc}
 800173c:	20000010 	.word	0x20000010
 8001740:	053e2d63 	.word	0x053e2d63
 8001744:	50040000 	.word	0x50040000
 8001748:	50040100 	.word	0x50040100
 800174c:	50040200 	.word	0x50040200
 8001750:	50040300 	.word	0x50040300
 8001754:	fff0c007 	.word	0xfff0c007

08001758 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b086      	sub	sp, #24
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001760:	4893      	ldr	r0, [pc, #588]	; (80019b0 <HAL_ADC_Start_IT+0x258>)
 8001762:	f7ff fdd9 	bl	8001318 <LL_ADC_GetMultimode>
 8001766:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4618      	mov	r0, r3
 800176e:	f7ff fe78 	bl	8001462 <LL_ADC_REG_IsConversionOngoing>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	f040 8112 	bne.w	800199e <HAL_ADC_Start_IT+0x246>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001780:	2b01      	cmp	r3, #1
 8001782:	d101      	bne.n	8001788 <HAL_ADC_Start_IT+0x30>
 8001784:	2302      	movs	r3, #2
 8001786:	e10f      	b.n	80019a8 <HAL_ADC_Start_IT+0x250>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2201      	movs	r2, #1
 800178c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f000 ff3d 	bl	8002610 <ADC_Enable>
 8001796:	4603      	mov	r3, r0
 8001798:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800179a:	7dfb      	ldrb	r3, [r7, #23]
 800179c:	2b00      	cmp	r3, #0
 800179e:	f040 80f9 	bne.w	8001994 <HAL_ADC_Start_IT+0x23c>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017a6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80017aa:	f023 0301 	bic.w	r3, r3, #1
 80017ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a7e      	ldr	r2, [pc, #504]	; (80019b4 <HAL_ADC_Start_IT+0x25c>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d002      	beq.n	80017c6 <HAL_ADC_Start_IT+0x6e>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	e000      	b.n	80017c8 <HAL_ADC_Start_IT+0x70>
 80017c6:	4b7c      	ldr	r3, [pc, #496]	; (80019b8 <HAL_ADC_Start_IT+0x260>)
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	6812      	ldr	r2, [r2, #0]
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d002      	beq.n	80017d6 <HAL_ADC_Start_IT+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d105      	bne.n	80017e2 <HAL_ADC_Start_IT+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017da:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d006      	beq.n	80017fc <HAL_ADC_Start_IT+0xa4>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f2:	f023 0206 	bic.w	r2, r3, #6
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	659a      	str	r2, [r3, #88]	; 0x58
 80017fa:	e002      	b.n	8001802 <HAL_ADC_Start_IT+0xaa>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2200      	movs	r2, #0
 8001800:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	221c      	movs	r2, #28
 8001808:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2200      	movs	r2, #0
 800180e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	685a      	ldr	r2, [r3, #4]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f022 021c 	bic.w	r2, r2, #28
 8001820:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	695b      	ldr	r3, [r3, #20]
 8001826:	2b08      	cmp	r3, #8
 8001828:	d108      	bne.n	800183c <HAL_ADC_Start_IT+0xe4>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	685a      	ldr	r2, [r3, #4]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f042 0208 	orr.w	r2, r2, #8
 8001838:	605a      	str	r2, [r3, #4]
          break;
 800183a:	e008      	b.n	800184e <HAL_ADC_Start_IT+0xf6>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	685a      	ldr	r2, [r3, #4]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f042 0204 	orr.w	r2, r2, #4
 800184a:	605a      	str	r2, [r3, #4]
          break;
 800184c:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001852:	2b00      	cmp	r3, #0
 8001854:	d107      	bne.n	8001866 <HAL_ADC_Start_IT+0x10e>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	685a      	ldr	r2, [r3, #4]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f042 0210 	orr.w	r2, r2, #16
 8001864:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a52      	ldr	r2, [pc, #328]	; (80019b4 <HAL_ADC_Start_IT+0x25c>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d002      	beq.n	8001876 <HAL_ADC_Start_IT+0x11e>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	e000      	b.n	8001878 <HAL_ADC_Start_IT+0x120>
 8001876:	4b50      	ldr	r3, [pc, #320]	; (80019b8 <HAL_ADC_Start_IT+0x260>)
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	6812      	ldr	r2, [r2, #0]
 800187c:	4293      	cmp	r3, r2
 800187e:	d008      	beq.n	8001892 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d005      	beq.n	8001892 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	2b05      	cmp	r3, #5
 800188a:	d002      	beq.n	8001892 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	2b09      	cmp	r3, #9
 8001890:	d13b      	bne.n	800190a <HAL_ADC_Start_IT+0x1b2>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800189c:	2b00      	cmp	r3, #0
 800189e:	d02d      	beq.n	80018fc <HAL_ADC_Start_IT+0x1a4>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018a4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018a8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	655a      	str	r2, [r3, #84]	; 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	695b      	ldr	r3, [r3, #20]
 80018b4:	2b08      	cmp	r3, #8
 80018b6:	d110      	bne.n	80018da <HAL_ADC_Start_IT+0x182>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	685a      	ldr	r2, [r3, #4]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f022 0220 	bic.w	r2, r2, #32
 80018c6:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	685a      	ldr	r2, [r3, #4]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018d6:	605a      	str	r2, [r3, #4]
              break;
 80018d8:	e011      	b.n	80018fe <HAL_ADC_Start_IT+0x1a6>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	685a      	ldr	r2, [r3, #4]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80018e8:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	685a      	ldr	r2, [r3, #4]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f042 0220 	orr.w	r2, r2, #32
 80018f8:	605a      	str	r2, [r3, #4]
              break;
 80018fa:	e000      	b.n	80018fe <HAL_ADC_Start_IT+0x1a6>
          }
        }
 80018fc:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4618      	mov	r0, r3
 8001904:	f7ff fd99 	bl	800143a <LL_ADC_REG_StartConversion>
 8001908:	e04d      	b.n	80019a6 <HAL_ADC_Start_IT+0x24e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800190e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a26      	ldr	r2, [pc, #152]	; (80019b4 <HAL_ADC_Start_IT+0x25c>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d002      	beq.n	8001926 <HAL_ADC_Start_IT+0x1ce>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	e000      	b.n	8001928 <HAL_ADC_Start_IT+0x1d0>
 8001926:	4b24      	ldr	r3, [pc, #144]	; (80019b8 <HAL_ADC_Start_IT+0x260>)
 8001928:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d036      	beq.n	80019a4 <HAL_ADC_Start_IT+0x24c>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800193a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800193e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	655a      	str	r2, [r3, #84]	; 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	695b      	ldr	r3, [r3, #20]
 800194a:	2b08      	cmp	r3, #8
 800194c:	d110      	bne.n	8001970 <HAL_ADC_Start_IT+0x218>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	685a      	ldr	r2, [r3, #4]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f022 0220 	bic.w	r2, r2, #32
 800195c:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	685a      	ldr	r2, [r3, #4]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800196c:	605a      	str	r2, [r3, #4]
              break;
 800196e:	e01a      	b.n	80019a6 <HAL_ADC_Start_IT+0x24e>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	685a      	ldr	r2, [r3, #4]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800197e:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	685a      	ldr	r2, [r3, #4]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f042 0220 	orr.w	r2, r2, #32
 800198e:	605a      	str	r2, [r3, #4]
              break;
 8001990:	bf00      	nop
 8001992:	e008      	b.n	80019a6 <HAL_ADC_Start_IT+0x24e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2200      	movs	r2, #0
 8001998:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800199c:	e003      	b.n	80019a6 <HAL_ADC_Start_IT+0x24e>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800199e:	2302      	movs	r3, #2
 80019a0:	75fb      	strb	r3, [r7, #23]
 80019a2:	e000      	b.n	80019a6 <HAL_ADC_Start_IT+0x24e>
        }
 80019a4:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 80019a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3718      	adds	r7, #24
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	50040300 	.word	0x50040300
 80019b4:	50040100 	.word	0x50040100
 80019b8:	50040000 	.word	0x50040000

080019bc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
	...

080019d8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b08a      	sub	sp, #40	; 0x28
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80019e0:	2300      	movs	r3, #0
 80019e2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80019f4:	4882      	ldr	r0, [pc, #520]	; (8001c00 <HAL_ADC_IRQHandler+0x228>)
 80019f6:	f7ff fc8f 	bl	8001318 <LL_ADC_GetMultimode>
 80019fa:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d017      	beq.n	8001a36 <HAL_ADC_IRQHandler+0x5e>
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	f003 0302 	and.w	r3, r3, #2
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d012      	beq.n	8001a36 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a14:	f003 0310 	and.w	r3, r3, #16
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d105      	bne.n	8001a28 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a20:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f000 fe99 	bl	8002760 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2202      	movs	r2, #2
 8001a34:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	f003 0304 	and.w	r3, r3, #4
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d004      	beq.n	8001a4a <HAL_ADC_IRQHandler+0x72>
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	f003 0304 	and.w	r3, r3, #4
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d10a      	bne.n	8001a60 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	f000 8083 	beq.w	8001b5c <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	f003 0308 	and.w	r3, r3, #8
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d07d      	beq.n	8001b5c <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a64:	f003 0310 	and.w	r3, r3, #16
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d105      	bne.n	8001a78 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a70:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff fbaa 	bl	80011d6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d062      	beq.n	8001b4e <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a5d      	ldr	r2, [pc, #372]	; (8001c04 <HAL_ADC_IRQHandler+0x22c>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d002      	beq.n	8001a98 <HAL_ADC_IRQHandler+0xc0>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	e000      	b.n	8001a9a <HAL_ADC_IRQHandler+0xc2>
 8001a98:	4b5b      	ldr	r3, [pc, #364]	; (8001c08 <HAL_ADC_IRQHandler+0x230>)
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	6812      	ldr	r2, [r2, #0]
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d008      	beq.n	8001ab4 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d005      	beq.n	8001ab4 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	2b05      	cmp	r3, #5
 8001aac:	d002      	beq.n	8001ab4 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	2b09      	cmp	r3, #9
 8001ab2:	d104      	bne.n	8001abe <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	623b      	str	r3, [r7, #32]
 8001abc:	e00c      	b.n	8001ad8 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a50      	ldr	r2, [pc, #320]	; (8001c04 <HAL_ADC_IRQHandler+0x22c>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d002      	beq.n	8001ace <HAL_ADC_IRQHandler+0xf6>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	e000      	b.n	8001ad0 <HAL_ADC_IRQHandler+0xf8>
 8001ace:	4b4e      	ldr	r3, [pc, #312]	; (8001c08 <HAL_ADC_IRQHandler+0x230>)
 8001ad0:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	68db      	ldr	r3, [r3, #12]
 8001ad6:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001ad8:	6a3b      	ldr	r3, [r7, #32]
 8001ada:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d135      	bne.n	8001b4e <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0308 	and.w	r3, r3, #8
 8001aec:	2b08      	cmp	r3, #8
 8001aee:	d12e      	bne.n	8001b4e <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff fcb4 	bl	8001462 <LL_ADC_REG_IsConversionOngoing>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d11a      	bne.n	8001b36 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	685a      	ldr	r2, [r3, #4]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f022 020c 	bic.w	r2, r2, #12
 8001b0e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b14:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d112      	bne.n	8001b4e <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b2c:	f043 0201 	orr.w	r2, r3, #1
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	655a      	str	r2, [r3, #84]	; 0x54
 8001b34:	e00b      	b.n	8001b4e <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b3a:	f043 0210 	orr.w	r2, r3, #16
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b46:	f043 0201 	orr.w	r2, r3, #1
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f7fe fef0 	bl	8000934 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	220c      	movs	r2, #12
 8001b5a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	f003 0320 	and.w	r3, r3, #32
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d004      	beq.n	8001b70 <HAL_ADC_IRQHandler+0x198>
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	f003 0320 	and.w	r3, r3, #32
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d10b      	bne.n	8001b88 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	f000 809f 	beq.w	8001cba <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	f000 8099 	beq.w	8001cba <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b8c:	f003 0310 	and.w	r3, r3, #16
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d105      	bne.n	8001ba0 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b98:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff fb55 	bl	8001254 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001baa:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff fb10 	bl	80011d6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001bb6:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a11      	ldr	r2, [pc, #68]	; (8001c04 <HAL_ADC_IRQHandler+0x22c>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d002      	beq.n	8001bc8 <HAL_ADC_IRQHandler+0x1f0>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	e000      	b.n	8001bca <HAL_ADC_IRQHandler+0x1f2>
 8001bc8:	4b0f      	ldr	r3, [pc, #60]	; (8001c08 <HAL_ADC_IRQHandler+0x230>)
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	6812      	ldr	r2, [r2, #0]
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d008      	beq.n	8001be4 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d005      	beq.n	8001be4 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	2b06      	cmp	r3, #6
 8001bdc:	d002      	beq.n	8001be4 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	2b07      	cmp	r3, #7
 8001be2:	d104      	bne.n	8001bee <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	623b      	str	r3, [r7, #32]
 8001bec:	e013      	b.n	8001c16 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a04      	ldr	r2, [pc, #16]	; (8001c04 <HAL_ADC_IRQHandler+0x22c>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d009      	beq.n	8001c0c <HAL_ADC_IRQHandler+0x234>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	e007      	b.n	8001c0e <HAL_ADC_IRQHandler+0x236>
 8001bfe:	bf00      	nop
 8001c00:	50040300 	.word	0x50040300
 8001c04:	50040100 	.word	0x50040100
 8001c08:	50040000 	.word	0x50040000
 8001c0c:	4b7d      	ldr	r3, [pc, #500]	; (8001e04 <HAL_ADC_IRQHandler+0x42c>)
 8001c0e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d10c      	bne.n	8001c36 <HAL_ADC_IRQHandler+0x25e>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8001c1c:	6a3b      	ldr	r3, [r7, #32]
 8001c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d142      	bne.n	8001cac <HAL_ADC_IRQHandler+0x2d4>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d03f      	beq.n	8001cac <HAL_ADC_IRQHandler+0x2d4>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 8001c2c:	6a3b      	ldr	r3, [r7, #32]
 8001c2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d13a      	bne.n	8001cac <HAL_ADC_IRQHandler+0x2d4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c40:	2b40      	cmp	r3, #64	; 0x40
 8001c42:	d133      	bne.n	8001cac <HAL_ADC_IRQHandler+0x2d4>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001c44:	6a3b      	ldr	r3, [r7, #32]
 8001c46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d12e      	bne.n	8001cac <HAL_ADC_IRQHandler+0x2d4>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7ff fc18 	bl	8001488 <LL_ADC_INJ_IsConversionOngoing>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d11a      	bne.n	8001c94 <HAL_ADC_IRQHandler+0x2bc>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	685a      	ldr	r2, [r3, #4]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001c6c:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d112      	bne.n	8001cac <HAL_ADC_IRQHandler+0x2d4>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c8a:	f043 0201 	orr.w	r2, r3, #1
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	655a      	str	r2, [r3, #84]	; 0x54
 8001c92:	e00b      	b.n	8001cac <HAL_ADC_IRQHandler+0x2d4>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c98:	f043 0210 	orr.w	r2, r3, #16
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ca4:	f043 0201 	orr.w	r2, r3, #1
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f000 fd2f 	bl	8002710 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2260      	movs	r2, #96	; 0x60
 8001cb8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d011      	beq.n	8001ce8 <HAL_ADC_IRQHandler+0x310>
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d00c      	beq.n	8001ce8 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cd2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f000 f896 	bl	8001e0c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2280      	movs	r2, #128	; 0x80
 8001ce6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d012      	beq.n	8001d18 <HAL_ADC_IRQHandler+0x340>
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d00d      	beq.n	8001d18 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d00:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f000 fd15 	bl	8002738 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d16:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d012      	beq.n	8001d48 <HAL_ADC_IRQHandler+0x370>
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d00d      	beq.n	8001d48 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d30:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f000 fd07 	bl	800274c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d46:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	f003 0310 	and.w	r3, r3, #16
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d036      	beq.n	8001dc0 <HAL_ADC_IRQHandler+0x3e8>
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	f003 0310 	and.w	r3, r3, #16
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d031      	beq.n	8001dc0 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d102      	bne.n	8001d6a <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8001d64:	2301      	movs	r3, #1
 8001d66:	627b      	str	r3, [r7, #36]	; 0x24
 8001d68:	e014      	b.n	8001d94 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d008      	beq.n	8001d82 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001d70:	4825      	ldr	r0, [pc, #148]	; (8001e08 <HAL_ADC_IRQHandler+0x430>)
 8001d72:	f7ff fadf 	bl	8001334 <LL_ADC_GetMultiDMATransfer>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d00b      	beq.n	8001d94 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d80:	e008      	b.n	8001d94 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	f003 0301 	and.w	r3, r3, #1
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8001d90:	2301      	movs	r3, #1
 8001d92:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8001d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d10e      	bne.n	8001db8 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d9e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001daa:	f043 0202 	orr.w	r2, r3, #2
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 f834 	bl	8001e20 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2210      	movs	r2, #16
 8001dbe:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d018      	beq.n	8001dfc <HAL_ADC_IRQHandler+0x424>
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d013      	beq.n	8001dfc <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dd8:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de4:	f043 0208 	orr.w	r2, r3, #8
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001df4:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f000 fc94 	bl	8002724 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001dfc:	bf00      	nop
 8001dfe:	3728      	adds	r7, #40	; 0x28
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	50040000 	.word	0x50040000
 8001e08:	50040300 	.word	0x50040300

08001e0c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001e14:	bf00      	nop
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001e28:	bf00      	nop
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b0b6      	sub	sp, #216	; 0xd8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001e44:	2300      	movs	r3, #0
 8001e46:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d101      	bne.n	8001e56 <HAL_ADC_ConfigChannel+0x22>
 8001e52:	2302      	movs	r3, #2
 8001e54:	e3c6      	b.n	80025e4 <HAL_ADC_ConfigChannel+0x7b0>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2201      	movs	r2, #1
 8001e5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7ff fafd 	bl	8001462 <LL_ADC_REG_IsConversionOngoing>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	f040 83a7 	bne.w	80025be <HAL_ADC_ConfigChannel+0x78a>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	2b05      	cmp	r3, #5
 8001e76:	d824      	bhi.n	8001ec2 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	3b02      	subs	r3, #2
 8001e7e:	2b03      	cmp	r3, #3
 8001e80:	d81b      	bhi.n	8001eba <HAL_ADC_ConfigChannel+0x86>
 8001e82:	a201      	add	r2, pc, #4	; (adr r2, 8001e88 <HAL_ADC_ConfigChannel+0x54>)
 8001e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e88:	08001e99 	.word	0x08001e99
 8001e8c:	08001ea1 	.word	0x08001ea1
 8001e90:	08001ea9 	.word	0x08001ea9
 8001e94:	08001eb1 	.word	0x08001eb1
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	220c      	movs	r2, #12
 8001e9c:	605a      	str	r2, [r3, #4]
          break;
 8001e9e:	e011      	b.n	8001ec4 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	2212      	movs	r2, #18
 8001ea4:	605a      	str	r2, [r3, #4]
          break;
 8001ea6:	e00d      	b.n	8001ec4 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	2218      	movs	r2, #24
 8001eac:	605a      	str	r2, [r3, #4]
          break;
 8001eae:	e009      	b.n	8001ec4 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001eb6:	605a      	str	r2, [r3, #4]
          break;
 8001eb8:	e004      	b.n	8001ec4 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	2206      	movs	r2, #6
 8001ebe:	605a      	str	r2, [r3, #4]
          break;
 8001ec0:	e000      	b.n	8001ec4 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001ec2:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6818      	ldr	r0, [r3, #0]
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	6859      	ldr	r1, [r3, #4]
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	f7ff f993 	bl	80011fc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7ff fac1 	bl	8001462 <LL_ADC_REG_IsConversionOngoing>
 8001ee0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff facd 	bl	8001488 <LL_ADC_INJ_IsConversionOngoing>
 8001eee:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ef2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	f040 81a6 	bne.w	8002248 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001efc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	f040 81a1 	bne.w	8002248 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6818      	ldr	r0, [r3, #0]
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	6819      	ldr	r1, [r3, #0]
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	461a      	mov	r2, r3
 8001f14:	f7ff f9b1 	bl	800127a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	695a      	ldr	r2, [r3, #20]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	08db      	lsrs	r3, r3, #3
 8001f24:	f003 0303 	and.w	r3, r3, #3
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	691b      	ldr	r3, [r3, #16]
 8001f36:	2b04      	cmp	r3, #4
 8001f38:	d00a      	beq.n	8001f50 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6818      	ldr	r0, [r3, #0]
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	6919      	ldr	r1, [r3, #16]
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001f4a:	f7ff f8ef 	bl	800112c <LL_ADC_SetOffset>
 8001f4e:	e17b      	b.n	8002248 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2100      	movs	r1, #0
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7ff f90c 	bl	8001174 <LL_ADC_GetOffsetChannel>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d10a      	bne.n	8001f7c <HAL_ADC_ConfigChannel+0x148>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	2100      	movs	r1, #0
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff f901 	bl	8001174 <LL_ADC_GetOffsetChannel>
 8001f72:	4603      	mov	r3, r0
 8001f74:	0e9b      	lsrs	r3, r3, #26
 8001f76:	f003 021f 	and.w	r2, r3, #31
 8001f7a:	e01e      	b.n	8001fba <HAL_ADC_ConfigChannel+0x186>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2100      	movs	r1, #0
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7ff f8f6 	bl	8001174 <LL_ADC_GetOffsetChannel>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001f92:	fa93 f3a3 	rbit	r3, r3
 8001f96:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f9a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001f9e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001fa2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d101      	bne.n	8001fae <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001faa:	2320      	movs	r3, #32
 8001fac:	e004      	b.n	8001fb8 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001fae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001fb2:	fab3 f383 	clz	r3, r3
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d105      	bne.n	8001fd2 <HAL_ADC_ConfigChannel+0x19e>
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	0e9b      	lsrs	r3, r3, #26
 8001fcc:	f003 031f 	and.w	r3, r3, #31
 8001fd0:	e018      	b.n	8002004 <HAL_ADC_ConfigChannel+0x1d0>
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fda:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001fde:	fa93 f3a3 	rbit	r3, r3
 8001fe2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001fe6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001fea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001fee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d101      	bne.n	8001ffa <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001ff6:	2320      	movs	r3, #32
 8001ff8:	e004      	b.n	8002004 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001ffa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001ffe:	fab3 f383 	clz	r3, r3
 8002002:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002004:	429a      	cmp	r2, r3
 8002006:	d106      	bne.n	8002016 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2200      	movs	r2, #0
 800200e:	2100      	movs	r1, #0
 8002010:	4618      	mov	r0, r3
 8002012:	f7ff f8c5 	bl	80011a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2101      	movs	r1, #1
 800201c:	4618      	mov	r0, r3
 800201e:	f7ff f8a9 	bl	8001174 <LL_ADC_GetOffsetChannel>
 8002022:	4603      	mov	r3, r0
 8002024:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002028:	2b00      	cmp	r3, #0
 800202a:	d10a      	bne.n	8002042 <HAL_ADC_ConfigChannel+0x20e>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2101      	movs	r1, #1
 8002032:	4618      	mov	r0, r3
 8002034:	f7ff f89e 	bl	8001174 <LL_ADC_GetOffsetChannel>
 8002038:	4603      	mov	r3, r0
 800203a:	0e9b      	lsrs	r3, r3, #26
 800203c:	f003 021f 	and.w	r2, r3, #31
 8002040:	e01e      	b.n	8002080 <HAL_ADC_ConfigChannel+0x24c>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	2101      	movs	r1, #1
 8002048:	4618      	mov	r0, r3
 800204a:	f7ff f893 	bl	8001174 <LL_ADC_GetOffsetChannel>
 800204e:	4603      	mov	r3, r0
 8002050:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002054:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002058:	fa93 f3a3 	rbit	r3, r3
 800205c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002060:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002064:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002068:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800206c:	2b00      	cmp	r3, #0
 800206e:	d101      	bne.n	8002074 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002070:	2320      	movs	r3, #32
 8002072:	e004      	b.n	800207e <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002074:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002078:	fab3 f383 	clz	r3, r3
 800207c:	b2db      	uxtb	r3, r3
 800207e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002088:	2b00      	cmp	r3, #0
 800208a:	d105      	bne.n	8002098 <HAL_ADC_ConfigChannel+0x264>
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	0e9b      	lsrs	r3, r3, #26
 8002092:	f003 031f 	and.w	r3, r3, #31
 8002096:	e018      	b.n	80020ca <HAL_ADC_ConfigChannel+0x296>
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80020a4:	fa93 f3a3 	rbit	r3, r3
 80020a8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80020ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80020b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80020b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d101      	bne.n	80020c0 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80020bc:	2320      	movs	r3, #32
 80020be:	e004      	b.n	80020ca <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80020c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80020c4:	fab3 f383 	clz	r3, r3
 80020c8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d106      	bne.n	80020dc <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2200      	movs	r2, #0
 80020d4:	2101      	movs	r1, #1
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7ff f862 	bl	80011a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2102      	movs	r1, #2
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7ff f846 	bl	8001174 <LL_ADC_GetOffsetChannel>
 80020e8:	4603      	mov	r3, r0
 80020ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d10a      	bne.n	8002108 <HAL_ADC_ConfigChannel+0x2d4>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2102      	movs	r1, #2
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7ff f83b 	bl	8001174 <LL_ADC_GetOffsetChannel>
 80020fe:	4603      	mov	r3, r0
 8002100:	0e9b      	lsrs	r3, r3, #26
 8002102:	f003 021f 	and.w	r2, r3, #31
 8002106:	e01e      	b.n	8002146 <HAL_ADC_ConfigChannel+0x312>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2102      	movs	r1, #2
 800210e:	4618      	mov	r0, r3
 8002110:	f7ff f830 	bl	8001174 <LL_ADC_GetOffsetChannel>
 8002114:	4603      	mov	r3, r0
 8002116:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800211e:	fa93 f3a3 	rbit	r3, r3
 8002122:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002126:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800212a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800212e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002132:	2b00      	cmp	r3, #0
 8002134:	d101      	bne.n	800213a <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002136:	2320      	movs	r3, #32
 8002138:	e004      	b.n	8002144 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800213a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800213e:	fab3 f383 	clz	r3, r3
 8002142:	b2db      	uxtb	r3, r3
 8002144:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800214e:	2b00      	cmp	r3, #0
 8002150:	d105      	bne.n	800215e <HAL_ADC_ConfigChannel+0x32a>
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	0e9b      	lsrs	r3, r3, #26
 8002158:	f003 031f 	and.w	r3, r3, #31
 800215c:	e016      	b.n	800218c <HAL_ADC_ConfigChannel+0x358>
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002166:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800216a:	fa93 f3a3 	rbit	r3, r3
 800216e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002170:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002172:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002176:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800217a:	2b00      	cmp	r3, #0
 800217c:	d101      	bne.n	8002182 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800217e:	2320      	movs	r3, #32
 8002180:	e004      	b.n	800218c <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002182:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002186:	fab3 f383 	clz	r3, r3
 800218a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800218c:	429a      	cmp	r2, r3
 800218e:	d106      	bne.n	800219e <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2200      	movs	r2, #0
 8002196:	2102      	movs	r1, #2
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff f801 	bl	80011a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2103      	movs	r1, #3
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7fe ffe5 	bl	8001174 <LL_ADC_GetOffsetChannel>
 80021aa:	4603      	mov	r3, r0
 80021ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d10a      	bne.n	80021ca <HAL_ADC_ConfigChannel+0x396>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2103      	movs	r1, #3
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7fe ffda 	bl	8001174 <LL_ADC_GetOffsetChannel>
 80021c0:	4603      	mov	r3, r0
 80021c2:	0e9b      	lsrs	r3, r3, #26
 80021c4:	f003 021f 	and.w	r2, r3, #31
 80021c8:	e017      	b.n	80021fa <HAL_ADC_ConfigChannel+0x3c6>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2103      	movs	r1, #3
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7fe ffcf 	bl	8001174 <LL_ADC_GetOffsetChannel>
 80021d6:	4603      	mov	r3, r0
 80021d8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021dc:	fa93 f3a3 	rbit	r3, r3
 80021e0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80021e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021e4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80021e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d101      	bne.n	80021f0 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80021ec:	2320      	movs	r3, #32
 80021ee:	e003      	b.n	80021f8 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80021f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021f2:	fab3 f383 	clz	r3, r3
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002202:	2b00      	cmp	r3, #0
 8002204:	d105      	bne.n	8002212 <HAL_ADC_ConfigChannel+0x3de>
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	0e9b      	lsrs	r3, r3, #26
 800220c:	f003 031f 	and.w	r3, r3, #31
 8002210:	e011      	b.n	8002236 <HAL_ADC_ConfigChannel+0x402>
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002218:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800221a:	fa93 f3a3 	rbit	r3, r3
 800221e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002220:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002222:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002224:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002226:	2b00      	cmp	r3, #0
 8002228:	d101      	bne.n	800222e <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800222a:	2320      	movs	r3, #32
 800222c:	e003      	b.n	8002236 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800222e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002230:	fab3 f383 	clz	r3, r3
 8002234:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002236:	429a      	cmp	r2, r3
 8002238:	d106      	bne.n	8002248 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2200      	movs	r2, #0
 8002240:	2103      	movs	r1, #3
 8002242:	4618      	mov	r0, r3
 8002244:	f7fe ffac 	bl	80011a0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4618      	mov	r0, r3
 800224e:	f7ff f8e1 	bl	8001414 <LL_ADC_IsEnabled>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	f040 813f 	bne.w	80024d8 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6818      	ldr	r0, [r3, #0]
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	6819      	ldr	r1, [r3, #0]
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	461a      	mov	r2, r3
 8002268:	f7ff f832 	bl	80012d0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	4a8e      	ldr	r2, [pc, #568]	; (80024ac <HAL_ADC_ConfigChannel+0x678>)
 8002272:	4293      	cmp	r3, r2
 8002274:	f040 8130 	bne.w	80024d8 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002284:	2b00      	cmp	r3, #0
 8002286:	d10b      	bne.n	80022a0 <HAL_ADC_ConfigChannel+0x46c>
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	0e9b      	lsrs	r3, r3, #26
 800228e:	3301      	adds	r3, #1
 8002290:	f003 031f 	and.w	r3, r3, #31
 8002294:	2b09      	cmp	r3, #9
 8002296:	bf94      	ite	ls
 8002298:	2301      	movls	r3, #1
 800229a:	2300      	movhi	r3, #0
 800229c:	b2db      	uxtb	r3, r3
 800229e:	e019      	b.n	80022d4 <HAL_ADC_ConfigChannel+0x4a0>
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022a8:	fa93 f3a3 	rbit	r3, r3
 80022ac:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80022ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022b0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80022b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d101      	bne.n	80022bc <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80022b8:	2320      	movs	r3, #32
 80022ba:	e003      	b.n	80022c4 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80022bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80022be:	fab3 f383 	clz	r3, r3
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	3301      	adds	r3, #1
 80022c6:	f003 031f 	and.w	r3, r3, #31
 80022ca:	2b09      	cmp	r3, #9
 80022cc:	bf94      	ite	ls
 80022ce:	2301      	movls	r3, #1
 80022d0:	2300      	movhi	r3, #0
 80022d2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d079      	beq.n	80023cc <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d107      	bne.n	80022f4 <HAL_ADC_ConfigChannel+0x4c0>
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	0e9b      	lsrs	r3, r3, #26
 80022ea:	3301      	adds	r3, #1
 80022ec:	069b      	lsls	r3, r3, #26
 80022ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022f2:	e015      	b.n	8002320 <HAL_ADC_ConfigChannel+0x4ec>
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022fc:	fa93 f3a3 	rbit	r3, r3
 8002300:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002302:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002304:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002306:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002308:	2b00      	cmp	r3, #0
 800230a:	d101      	bne.n	8002310 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 800230c:	2320      	movs	r3, #32
 800230e:	e003      	b.n	8002318 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002310:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002312:	fab3 f383 	clz	r3, r3
 8002316:	b2db      	uxtb	r3, r3
 8002318:	3301      	adds	r3, #1
 800231a:	069b      	lsls	r3, r3, #26
 800231c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002328:	2b00      	cmp	r3, #0
 800232a:	d109      	bne.n	8002340 <HAL_ADC_ConfigChannel+0x50c>
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	0e9b      	lsrs	r3, r3, #26
 8002332:	3301      	adds	r3, #1
 8002334:	f003 031f 	and.w	r3, r3, #31
 8002338:	2101      	movs	r1, #1
 800233a:	fa01 f303 	lsl.w	r3, r1, r3
 800233e:	e017      	b.n	8002370 <HAL_ADC_ConfigChannel+0x53c>
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002346:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002348:	fa93 f3a3 	rbit	r3, r3
 800234c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800234e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002350:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002352:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002354:	2b00      	cmp	r3, #0
 8002356:	d101      	bne.n	800235c <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002358:	2320      	movs	r3, #32
 800235a:	e003      	b.n	8002364 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 800235c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800235e:	fab3 f383 	clz	r3, r3
 8002362:	b2db      	uxtb	r3, r3
 8002364:	3301      	adds	r3, #1
 8002366:	f003 031f 	and.w	r3, r3, #31
 800236a:	2101      	movs	r1, #1
 800236c:	fa01 f303 	lsl.w	r3, r1, r3
 8002370:	ea42 0103 	orr.w	r1, r2, r3
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800237c:	2b00      	cmp	r3, #0
 800237e:	d10a      	bne.n	8002396 <HAL_ADC_ConfigChannel+0x562>
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	0e9b      	lsrs	r3, r3, #26
 8002386:	3301      	adds	r3, #1
 8002388:	f003 021f 	and.w	r2, r3, #31
 800238c:	4613      	mov	r3, r2
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	4413      	add	r3, r2
 8002392:	051b      	lsls	r3, r3, #20
 8002394:	e018      	b.n	80023c8 <HAL_ADC_ConfigChannel+0x594>
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800239c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800239e:	fa93 f3a3 	rbit	r3, r3
 80023a2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80023a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80023a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d101      	bne.n	80023b2 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80023ae:	2320      	movs	r3, #32
 80023b0:	e003      	b.n	80023ba <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80023b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023b4:	fab3 f383 	clz	r3, r3
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	3301      	adds	r3, #1
 80023bc:	f003 021f 	and.w	r2, r3, #31
 80023c0:	4613      	mov	r3, r2
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	4413      	add	r3, r2
 80023c6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023c8:	430b      	orrs	r3, r1
 80023ca:	e080      	b.n	80024ce <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d107      	bne.n	80023e8 <HAL_ADC_ConfigChannel+0x5b4>
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	0e9b      	lsrs	r3, r3, #26
 80023de:	3301      	adds	r3, #1
 80023e0:	069b      	lsls	r3, r3, #26
 80023e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023e6:	e015      	b.n	8002414 <HAL_ADC_ConfigChannel+0x5e0>
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023f0:	fa93 f3a3 	rbit	r3, r3
 80023f4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80023f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023f8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80023fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d101      	bne.n	8002404 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002400:	2320      	movs	r3, #32
 8002402:	e003      	b.n	800240c <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002406:	fab3 f383 	clz	r3, r3
 800240a:	b2db      	uxtb	r3, r3
 800240c:	3301      	adds	r3, #1
 800240e:	069b      	lsls	r3, r3, #26
 8002410:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800241c:	2b00      	cmp	r3, #0
 800241e:	d109      	bne.n	8002434 <HAL_ADC_ConfigChannel+0x600>
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	0e9b      	lsrs	r3, r3, #26
 8002426:	3301      	adds	r3, #1
 8002428:	f003 031f 	and.w	r3, r3, #31
 800242c:	2101      	movs	r1, #1
 800242e:	fa01 f303 	lsl.w	r3, r1, r3
 8002432:	e017      	b.n	8002464 <HAL_ADC_ConfigChannel+0x630>
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800243a:	6a3b      	ldr	r3, [r7, #32]
 800243c:	fa93 f3a3 	rbit	r3, r3
 8002440:	61fb      	str	r3, [r7, #28]
  return result;
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002448:	2b00      	cmp	r3, #0
 800244a:	d101      	bne.n	8002450 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 800244c:	2320      	movs	r3, #32
 800244e:	e003      	b.n	8002458 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002452:	fab3 f383 	clz	r3, r3
 8002456:	b2db      	uxtb	r3, r3
 8002458:	3301      	adds	r3, #1
 800245a:	f003 031f 	and.w	r3, r3, #31
 800245e:	2101      	movs	r1, #1
 8002460:	fa01 f303 	lsl.w	r3, r1, r3
 8002464:	ea42 0103 	orr.w	r1, r2, r3
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002470:	2b00      	cmp	r3, #0
 8002472:	d10d      	bne.n	8002490 <HAL_ADC_ConfigChannel+0x65c>
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	0e9b      	lsrs	r3, r3, #26
 800247a:	3301      	adds	r3, #1
 800247c:	f003 021f 	and.w	r2, r3, #31
 8002480:	4613      	mov	r3, r2
 8002482:	005b      	lsls	r3, r3, #1
 8002484:	4413      	add	r3, r2
 8002486:	3b1e      	subs	r3, #30
 8002488:	051b      	lsls	r3, r3, #20
 800248a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800248e:	e01d      	b.n	80024cc <HAL_ADC_ConfigChannel+0x698>
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	fa93 f3a3 	rbit	r3, r3
 800249c:	613b      	str	r3, [r7, #16]
  return result;
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d103      	bne.n	80024b0 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80024a8:	2320      	movs	r3, #32
 80024aa:	e005      	b.n	80024b8 <HAL_ADC_ConfigChannel+0x684>
 80024ac:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	fab3 f383 	clz	r3, r3
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	3301      	adds	r3, #1
 80024ba:	f003 021f 	and.w	r2, r3, #31
 80024be:	4613      	mov	r3, r2
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	4413      	add	r3, r2
 80024c4:	3b1e      	subs	r3, #30
 80024c6:	051b      	lsls	r3, r3, #20
 80024c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024cc:	430b      	orrs	r3, r1
 80024ce:	683a      	ldr	r2, [r7, #0]
 80024d0:	6892      	ldr	r2, [r2, #8]
 80024d2:	4619      	mov	r1, r3
 80024d4:	f7fe fed1 	bl	800127a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	4b43      	ldr	r3, [pc, #268]	; (80025ec <HAL_ADC_ConfigChannel+0x7b8>)
 80024de:	4013      	ands	r3, r2
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d079      	beq.n	80025d8 <HAL_ADC_ConfigChannel+0x7a4>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80024e4:	4842      	ldr	r0, [pc, #264]	; (80025f0 <HAL_ADC_ConfigChannel+0x7bc>)
 80024e6:	f7fe fe13 	bl	8001110 <LL_ADC_GetCommonPathInternalCh>
 80024ea:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a40      	ldr	r2, [pc, #256]	; (80025f4 <HAL_ADC_ConfigChannel+0x7c0>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d12b      	bne.n	8002550 <HAL_ADC_ConfigChannel+0x71c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80024f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d125      	bne.n	8002550 <HAL_ADC_ConfigChannel+0x71c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a3b      	ldr	r2, [pc, #236]	; (80025f8 <HAL_ADC_ConfigChannel+0x7c4>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d004      	beq.n	8002518 <HAL_ADC_ConfigChannel+0x6e4>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a3a      	ldr	r2, [pc, #232]	; (80025fc <HAL_ADC_ConfigChannel+0x7c8>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d15c      	bne.n	80025d2 <HAL_ADC_ConfigChannel+0x79e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002518:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800251c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002520:	4619      	mov	r1, r3
 8002522:	4833      	ldr	r0, [pc, #204]	; (80025f0 <HAL_ADC_ConfigChannel+0x7bc>)
 8002524:	f7fe fde1 	bl	80010ea <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002528:	4b35      	ldr	r3, [pc, #212]	; (8002600 <HAL_ADC_ConfigChannel+0x7cc>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	099b      	lsrs	r3, r3, #6
 800252e:	4a35      	ldr	r2, [pc, #212]	; (8002604 <HAL_ADC_ConfigChannel+0x7d0>)
 8002530:	fba2 2303 	umull	r2, r3, r2, r3
 8002534:	099a      	lsrs	r2, r3, #6
 8002536:	4613      	mov	r3, r2
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	4413      	add	r3, r2
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002540:	e002      	b.n	8002548 <HAL_ADC_ConfigChannel+0x714>
          {
            wait_loop_index--;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	3b01      	subs	r3, #1
 8002546:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d1f9      	bne.n	8002542 <HAL_ADC_ConfigChannel+0x70e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800254e:	e040      	b.n	80025d2 <HAL_ADC_ConfigChannel+0x79e>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a2c      	ldr	r2, [pc, #176]	; (8002608 <HAL_ADC_ConfigChannel+0x7d4>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d118      	bne.n	800258c <HAL_ADC_ConfigChannel+0x758>
 800255a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800255e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d112      	bne.n	800258c <HAL_ADC_ConfigChannel+0x758>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a23      	ldr	r2, [pc, #140]	; (80025f8 <HAL_ADC_ConfigChannel+0x7c4>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d004      	beq.n	800257a <HAL_ADC_ConfigChannel+0x746>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a21      	ldr	r2, [pc, #132]	; (80025fc <HAL_ADC_ConfigChannel+0x7c8>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d12d      	bne.n	80025d6 <HAL_ADC_ConfigChannel+0x7a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800257a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800257e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002582:	4619      	mov	r1, r3
 8002584:	481a      	ldr	r0, [pc, #104]	; (80025f0 <HAL_ADC_ConfigChannel+0x7bc>)
 8002586:	f7fe fdb0 	bl	80010ea <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800258a:	e024      	b.n	80025d6 <HAL_ADC_ConfigChannel+0x7a2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a1e      	ldr	r2, [pc, #120]	; (800260c <HAL_ADC_ConfigChannel+0x7d8>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d120      	bne.n	80025d8 <HAL_ADC_ConfigChannel+0x7a4>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002596:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800259a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d11a      	bne.n	80025d8 <HAL_ADC_ConfigChannel+0x7a4>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a14      	ldr	r2, [pc, #80]	; (80025f8 <HAL_ADC_ConfigChannel+0x7c4>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d115      	bne.n	80025d8 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80025b4:	4619      	mov	r1, r3
 80025b6:	480e      	ldr	r0, [pc, #56]	; (80025f0 <HAL_ADC_ConfigChannel+0x7bc>)
 80025b8:	f7fe fd97 	bl	80010ea <LL_ADC_SetCommonPathInternalCh>
 80025bc:	e00c      	b.n	80025d8 <HAL_ADC_ConfigChannel+0x7a4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025c2:	f043 0220 	orr.w	r2, r3, #32
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80025d0:	e002      	b.n	80025d8 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80025d2:	bf00      	nop
 80025d4:	e000      	b.n	80025d8 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80025d6:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80025e0:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	37d8      	adds	r7, #216	; 0xd8
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	80080000 	.word	0x80080000
 80025f0:	50040300 	.word	0x50040300
 80025f4:	c7520000 	.word	0xc7520000
 80025f8:	50040000 	.word	0x50040000
 80025fc:	50040200 	.word	0x50040200
 8002600:	20000010 	.word	0x20000010
 8002604:	053e2d63 	.word	0x053e2d63
 8002608:	cb840000 	.word	0xcb840000
 800260c:	80000001 	.word	0x80000001

08002610 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4618      	mov	r0, r3
 800261e:	f7fe fef9 	bl	8001414 <LL_ADC_IsEnabled>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d146      	bne.n	80026b6 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	689a      	ldr	r2, [r3, #8]
 800262e:	4b24      	ldr	r3, [pc, #144]	; (80026c0 <ADC_Enable+0xb0>)
 8002630:	4013      	ands	r3, r2
 8002632:	2b00      	cmp	r3, #0
 8002634:	d00d      	beq.n	8002652 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800263a:	f043 0210 	orr.w	r2, r3, #16
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002646:	f043 0201 	orr.w	r2, r3, #1
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e032      	b.n	80026b8 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4618      	mov	r0, r3
 8002658:	f7fe fec8 	bl	80013ec <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800265c:	f7fe fd04 	bl	8001068 <HAL_GetTick>
 8002660:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002662:	e021      	b.n	80026a8 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4618      	mov	r0, r3
 800266a:	f7fe fed3 	bl	8001414 <LL_ADC_IsEnabled>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d104      	bne.n	800267e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4618      	mov	r0, r3
 800267a:	f7fe feb7 	bl	80013ec <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800267e:	f7fe fcf3 	bl	8001068 <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	2b02      	cmp	r3, #2
 800268a:	d90d      	bls.n	80026a8 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002690:	f043 0210 	orr.w	r2, r3, #16
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800269c:	f043 0201 	orr.w	r2, r3, #1
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e007      	b.n	80026b8 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d1d6      	bne.n	8002664 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80026b6:	2300      	movs	r3, #0
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3710      	adds	r7, #16
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	8000003f 	.word	0x8000003f

080026c4 <LL_ADC_IsEnabled>:
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f003 0301 	and.w	r3, r3, #1
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d101      	bne.n	80026dc <LL_ADC_IsEnabled+0x18>
 80026d8:	2301      	movs	r3, #1
 80026da:	e000      	b.n	80026de <LL_ADC_IsEnabled+0x1a>
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	370c      	adds	r7, #12
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr

080026ea <LL_ADC_REG_IsConversionOngoing>:
{
 80026ea:	b480      	push	{r7}
 80026ec:	b083      	sub	sp, #12
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f003 0304 	and.w	r3, r3, #4
 80026fa:	2b04      	cmp	r3, #4
 80026fc:	d101      	bne.n	8002702 <LL_ADC_REG_IsConversionOngoing+0x18>
 80026fe:	2301      	movs	r3, #1
 8002700:	e000      	b.n	8002704 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002718:	bf00      	nop
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr

08002724 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800272c:	bf00      	nop
 800272e:	370c      	adds	r7, #12
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr

08002738 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002740:	bf00      	nop
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002754:	bf00      	nop
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002768:	bf00      	nop
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr

08002774 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002774:	b590      	push	{r4, r7, lr}
 8002776:	b09f      	sub	sp, #124	; 0x7c
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800277e:	2300      	movs	r3, #0
 8002780:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800278a:	2b01      	cmp	r3, #1
 800278c:	d101      	bne.n	8002792 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800278e:	2302      	movs	r3, #2
 8002790:	e08f      	b.n	80028b2 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2201      	movs	r2, #1
 8002796:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a47      	ldr	r2, [pc, #284]	; (80028bc <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d102      	bne.n	80027aa <HAL_ADCEx_MultiModeConfigChannel+0x36>
 80027a4:	4b46      	ldr	r3, [pc, #280]	; (80028c0 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80027a6:	60bb      	str	r3, [r7, #8]
 80027a8:	e001      	b.n	80027ae <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 80027aa:	2300      	movs	r3, #0
 80027ac:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d10b      	bne.n	80027cc <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027b8:	f043 0220 	orr.w	r2, r3, #32
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e072      	b.n	80028b2 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7ff ff8b 	bl	80026ea <LL_ADC_REG_IsConversionOngoing>
 80027d4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4618      	mov	r0, r3
 80027dc:	f7ff ff85 	bl	80026ea <LL_ADC_REG_IsConversionOngoing>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d154      	bne.n	8002890 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80027e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d151      	bne.n	8002890 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80027ec:	4b35      	ldr	r3, [pc, #212]	; (80028c4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80027ee:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d02c      	beq.n	8002852 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80027f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	6859      	ldr	r1, [r3, #4]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800280a:	035b      	lsls	r3, r3, #13
 800280c:	430b      	orrs	r3, r1
 800280e:	431a      	orrs	r2, r3
 8002810:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002812:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002814:	4829      	ldr	r0, [pc, #164]	; (80028bc <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002816:	f7ff ff55 	bl	80026c4 <LL_ADC_IsEnabled>
 800281a:	4604      	mov	r4, r0
 800281c:	4828      	ldr	r0, [pc, #160]	; (80028c0 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 800281e:	f7ff ff51 	bl	80026c4 <LL_ADC_IsEnabled>
 8002822:	4603      	mov	r3, r0
 8002824:	431c      	orrs	r4, r3
 8002826:	4828      	ldr	r0, [pc, #160]	; (80028c8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002828:	f7ff ff4c 	bl	80026c4 <LL_ADC_IsEnabled>
 800282c:	4603      	mov	r3, r0
 800282e:	4323      	orrs	r3, r4
 8002830:	2b00      	cmp	r3, #0
 8002832:	d137      	bne.n	80028a4 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002834:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800283c:	f023 030f 	bic.w	r3, r3, #15
 8002840:	683a      	ldr	r2, [r7, #0]
 8002842:	6811      	ldr	r1, [r2, #0]
 8002844:	683a      	ldr	r2, [r7, #0]
 8002846:	6892      	ldr	r2, [r2, #8]
 8002848:	430a      	orrs	r2, r1
 800284a:	431a      	orrs	r2, r3
 800284c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800284e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002850:	e028      	b.n	80028a4 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002852:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800285a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800285c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800285e:	4817      	ldr	r0, [pc, #92]	; (80028bc <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002860:	f7ff ff30 	bl	80026c4 <LL_ADC_IsEnabled>
 8002864:	4604      	mov	r4, r0
 8002866:	4816      	ldr	r0, [pc, #88]	; (80028c0 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002868:	f7ff ff2c 	bl	80026c4 <LL_ADC_IsEnabled>
 800286c:	4603      	mov	r3, r0
 800286e:	431c      	orrs	r4, r3
 8002870:	4815      	ldr	r0, [pc, #84]	; (80028c8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002872:	f7ff ff27 	bl	80026c4 <LL_ADC_IsEnabled>
 8002876:	4603      	mov	r3, r0
 8002878:	4323      	orrs	r3, r4
 800287a:	2b00      	cmp	r3, #0
 800287c:	d112      	bne.n	80028a4 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800287e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002886:	f023 030f 	bic.w	r3, r3, #15
 800288a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800288c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800288e:	e009      	b.n	80028a4 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002894:	f043 0220 	orr.w	r2, r3, #32
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80028a2:	e000      	b.n	80028a6 <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80028a4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80028ae:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	377c      	adds	r7, #124	; 0x7c
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd90      	pop	{r4, r7, pc}
 80028ba:	bf00      	nop
 80028bc:	50040000 	.word	0x50040000
 80028c0:	50040100 	.word	0x50040100
 80028c4:	50040300 	.word	0x50040300
 80028c8:	50040200 	.word	0x50040200

080028cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b085      	sub	sp, #20
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f003 0307 	and.w	r3, r3, #7
 80028da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028dc:	4b0c      	ldr	r3, [pc, #48]	; (8002910 <__NVIC_SetPriorityGrouping+0x44>)
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028e2:	68ba      	ldr	r2, [r7, #8]
 80028e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028e8:	4013      	ands	r3, r2
 80028ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028fe:	4a04      	ldr	r2, [pc, #16]	; (8002910 <__NVIC_SetPriorityGrouping+0x44>)
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	60d3      	str	r3, [r2, #12]
}
 8002904:	bf00      	nop
 8002906:	3714      	adds	r7, #20
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr
 8002910:	e000ed00 	.word	0xe000ed00

08002914 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002918:	4b04      	ldr	r3, [pc, #16]	; (800292c <__NVIC_GetPriorityGrouping+0x18>)
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	0a1b      	lsrs	r3, r3, #8
 800291e:	f003 0307 	and.w	r3, r3, #7
}
 8002922:	4618      	mov	r0, r3
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr
 800292c:	e000ed00 	.word	0xe000ed00

08002930 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	4603      	mov	r3, r0
 8002938:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800293a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800293e:	2b00      	cmp	r3, #0
 8002940:	db0b      	blt.n	800295a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002942:	79fb      	ldrb	r3, [r7, #7]
 8002944:	f003 021f 	and.w	r2, r3, #31
 8002948:	4907      	ldr	r1, [pc, #28]	; (8002968 <__NVIC_EnableIRQ+0x38>)
 800294a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800294e:	095b      	lsrs	r3, r3, #5
 8002950:	2001      	movs	r0, #1
 8002952:	fa00 f202 	lsl.w	r2, r0, r2
 8002956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800295a:	bf00      	nop
 800295c:	370c      	adds	r7, #12
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	e000e100 	.word	0xe000e100

0800296c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	4603      	mov	r3, r0
 8002974:	6039      	str	r1, [r7, #0]
 8002976:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800297c:	2b00      	cmp	r3, #0
 800297e:	db0a      	blt.n	8002996 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	b2da      	uxtb	r2, r3
 8002984:	490c      	ldr	r1, [pc, #48]	; (80029b8 <__NVIC_SetPriority+0x4c>)
 8002986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800298a:	0112      	lsls	r2, r2, #4
 800298c:	b2d2      	uxtb	r2, r2
 800298e:	440b      	add	r3, r1
 8002990:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002994:	e00a      	b.n	80029ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	b2da      	uxtb	r2, r3
 800299a:	4908      	ldr	r1, [pc, #32]	; (80029bc <__NVIC_SetPriority+0x50>)
 800299c:	79fb      	ldrb	r3, [r7, #7]
 800299e:	f003 030f 	and.w	r3, r3, #15
 80029a2:	3b04      	subs	r3, #4
 80029a4:	0112      	lsls	r2, r2, #4
 80029a6:	b2d2      	uxtb	r2, r2
 80029a8:	440b      	add	r3, r1
 80029aa:	761a      	strb	r2, [r3, #24]
}
 80029ac:	bf00      	nop
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr
 80029b8:	e000e100 	.word	0xe000e100
 80029bc:	e000ed00 	.word	0xe000ed00

080029c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b089      	sub	sp, #36	; 0x24
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f003 0307 	and.w	r3, r3, #7
 80029d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	f1c3 0307 	rsb	r3, r3, #7
 80029da:	2b04      	cmp	r3, #4
 80029dc:	bf28      	it	cs
 80029de:	2304      	movcs	r3, #4
 80029e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	3304      	adds	r3, #4
 80029e6:	2b06      	cmp	r3, #6
 80029e8:	d902      	bls.n	80029f0 <NVIC_EncodePriority+0x30>
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	3b03      	subs	r3, #3
 80029ee:	e000      	b.n	80029f2 <NVIC_EncodePriority+0x32>
 80029f0:	2300      	movs	r3, #0
 80029f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029f4:	f04f 32ff 	mov.w	r2, #4294967295
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	fa02 f303 	lsl.w	r3, r2, r3
 80029fe:	43da      	mvns	r2, r3
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	401a      	ands	r2, r3
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a08:	f04f 31ff 	mov.w	r1, #4294967295
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a12:	43d9      	mvns	r1, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a18:	4313      	orrs	r3, r2
         );
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3724      	adds	r7, #36	; 0x24
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
	...

08002a28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	3b01      	subs	r3, #1
 8002a34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a38:	d301      	bcc.n	8002a3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e00f      	b.n	8002a5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a3e:	4a0a      	ldr	r2, [pc, #40]	; (8002a68 <SysTick_Config+0x40>)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	3b01      	subs	r3, #1
 8002a44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a46:	210f      	movs	r1, #15
 8002a48:	f04f 30ff 	mov.w	r0, #4294967295
 8002a4c:	f7ff ff8e 	bl	800296c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a50:	4b05      	ldr	r3, [pc, #20]	; (8002a68 <SysTick_Config+0x40>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a56:	4b04      	ldr	r3, [pc, #16]	; (8002a68 <SysTick_Config+0x40>)
 8002a58:	2207      	movs	r2, #7
 8002a5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3708      	adds	r7, #8
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	e000e010 	.word	0xe000e010

08002a6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f7ff ff29 	bl	80028cc <__NVIC_SetPriorityGrouping>
}
 8002a7a:	bf00      	nop
 8002a7c:	3708      	adds	r7, #8
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b086      	sub	sp, #24
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	4603      	mov	r3, r0
 8002a8a:	60b9      	str	r1, [r7, #8]
 8002a8c:	607a      	str	r2, [r7, #4]
 8002a8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002a90:	2300      	movs	r3, #0
 8002a92:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a94:	f7ff ff3e 	bl	8002914 <__NVIC_GetPriorityGrouping>
 8002a98:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	68b9      	ldr	r1, [r7, #8]
 8002a9e:	6978      	ldr	r0, [r7, #20]
 8002aa0:	f7ff ff8e 	bl	80029c0 <NVIC_EncodePriority>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aaa:	4611      	mov	r1, r2
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7ff ff5d 	bl	800296c <__NVIC_SetPriority>
}
 8002ab2:	bf00      	nop
 8002ab4:	3718      	adds	r7, #24
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b082      	sub	sp, #8
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7ff ff31 	bl	8002930 <__NVIC_EnableIRQ>
}
 8002ace:	bf00      	nop
 8002ad0:	3708      	adds	r7, #8
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}

08002ad6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ad6:	b580      	push	{r7, lr}
 8002ad8:	b082      	sub	sp, #8
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f7ff ffa2 	bl	8002a28 <SysTick_Config>
 8002ae4:	4603      	mov	r3, r0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3708      	adds	r7, #8
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}

08002aee <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002aee:	b580      	push	{r7, lr}
 8002af0:	b082      	sub	sp, #8
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d101      	bne.n	8002b00 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e014      	b.n	8002b2a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	791b      	ldrb	r3, [r3, #4]
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d105      	bne.n	8002b16 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f7fd fe1d 	bl	8000750 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2202      	movs	r2, #2
 8002b1a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2201      	movs	r2, #1
 8002b26:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3708      	adds	r7, #8
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
	...

08002b34 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b086      	sub	sp, #24
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	607a      	str	r2, [r7, #4]
 8002b40:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8002b42:	2300      	movs	r3, #0
 8002b44:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	795b      	ldrb	r3, [r3, #5]
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d101      	bne.n	8002b52 <HAL_DAC_Start_DMA+0x1e>
 8002b4e:	2302      	movs	r3, #2
 8002b50:	e09e      	b.n	8002c90 <HAL_DAC_Start_DMA+0x15c>
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2201      	movs	r2, #1
 8002b56:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2202      	movs	r2, #2
 8002b5c:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d12a      	bne.n	8002bba <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	4a4b      	ldr	r2, [pc, #300]	; (8002c98 <HAL_DAC_Start_DMA+0x164>)
 8002b6a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	4a4a      	ldr	r2, [pc, #296]	; (8002c9c <HAL_DAC_Start_DMA+0x168>)
 8002b72:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	4a49      	ldr	r2, [pc, #292]	; (8002ca0 <HAL_DAC_Start_DMA+0x16c>)
 8002b7a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002b8a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002b8c:	6a3b      	ldr	r3, [r7, #32]
 8002b8e:	2b04      	cmp	r3, #4
 8002b90:	d009      	beq.n	8002ba6 <HAL_DAC_Start_DMA+0x72>
 8002b92:	2b08      	cmp	r3, #8
 8002b94:	d00c      	beq.n	8002bb0 <HAL_DAC_Start_DMA+0x7c>
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d000      	beq.n	8002b9c <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8002b9a:	e039      	b.n	8002c10 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	3308      	adds	r3, #8
 8002ba2:	613b      	str	r3, [r7, #16]
        break;
 8002ba4:	e034      	b.n	8002c10 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	330c      	adds	r3, #12
 8002bac:	613b      	str	r3, [r7, #16]
        break;
 8002bae:	e02f      	b.n	8002c10 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	3310      	adds	r3, #16
 8002bb6:	613b      	str	r3, [r7, #16]
        break;
 8002bb8:	e02a      	b.n	8002c10 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	4a39      	ldr	r2, [pc, #228]	; (8002ca4 <HAL_DAC_Start_DMA+0x170>)
 8002bc0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	4a38      	ldr	r2, [pc, #224]	; (8002ca8 <HAL_DAC_Start_DMA+0x174>)
 8002bc8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	4a37      	ldr	r2, [pc, #220]	; (8002cac <HAL_DAC_Start_DMA+0x178>)
 8002bd0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002be0:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002be2:	6a3b      	ldr	r3, [r7, #32]
 8002be4:	2b04      	cmp	r3, #4
 8002be6:	d009      	beq.n	8002bfc <HAL_DAC_Start_DMA+0xc8>
 8002be8:	2b08      	cmp	r3, #8
 8002bea:	d00c      	beq.n	8002c06 <HAL_DAC_Start_DMA+0xd2>
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d000      	beq.n	8002bf2 <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002bf0:	e00e      	b.n	8002c10 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	3314      	adds	r3, #20
 8002bf8:	613b      	str	r3, [r7, #16]
        break;
 8002bfa:	e009      	b.n	8002c10 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	3318      	adds	r3, #24
 8002c02:	613b      	str	r3, [r7, #16]
        break;
 8002c04:	e004      	b.n	8002c10 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	331c      	adds	r3, #28
 8002c0c:	613b      	str	r3, [r7, #16]
        break;
 8002c0e:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d111      	bne.n	8002c3a <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c24:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6898      	ldr	r0, [r3, #8]
 8002c2a:	6879      	ldr	r1, [r7, #4]
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	693a      	ldr	r2, [r7, #16]
 8002c30:	f000 fade 	bl	80031f0 <HAL_DMA_Start_IT>
 8002c34:	4603      	mov	r3, r0
 8002c36:	75fb      	strb	r3, [r7, #23]
 8002c38:	e010      	b.n	8002c5c <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002c48:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	68d8      	ldr	r0, [r3, #12]
 8002c4e:	6879      	ldr	r1, [r7, #4]
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	693a      	ldr	r2, [r7, #16]
 8002c54:	f000 facc 	bl	80031f0 <HAL_DMA_Start_IT>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002c62:	7dfb      	ldrb	r3, [r7, #23]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d10c      	bne.n	8002c82 <HAL_DAC_Start_DMA+0x14e>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	6819      	ldr	r1, [r3, #0]
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	f003 0310 	and.w	r3, r3, #16
 8002c74:	2201      	movs	r2, #1
 8002c76:	409a      	lsls	r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	601a      	str	r2, [r3, #0]
 8002c80:	e005      	b.n	8002c8e <HAL_DAC_Start_DMA+0x15a>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	691b      	ldr	r3, [r3, #16]
 8002c86:	f043 0204 	orr.w	r2, r3, #4
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8002c8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3718      	adds	r7, #24
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	08002f6b 	.word	0x08002f6b
 8002c9c:	08002f8d 	.word	0x08002f8d
 8002ca0:	08002fa9 	.word	0x08002fa9
 8002ca4:	08003013 	.word	0x08003013
 8002ca8:	08003035 	.word	0x08003035
 8002cac:	08003051 	.word	0x08003051

08002cb0 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b087      	sub	sp, #28
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	607a      	str	r2, [r7, #4]
 8002cbc:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d105      	bne.n	8002cda <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002cce:	697a      	ldr	r2, [r7, #20]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	4413      	add	r3, r2
 8002cd4:	3308      	adds	r3, #8
 8002cd6:	617b      	str	r3, [r7, #20]
 8002cd8:	e004      	b.n	8002ce4 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002cda:	697a      	ldr	r2, [r7, #20]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4413      	add	r3, r2
 8002ce0:	3314      	adds	r3, #20
 8002ce2:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	371c      	adds	r7, #28
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr

08002cfa <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002cfa:	b480      	push	{r7}
 8002cfc:	b083      	sub	sp, #12
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8002d02:	bf00      	nop
 8002d04:	370c      	adds	r7, #12
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr

08002d0e <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002d0e:	b480      	push	{r7}
 8002d10:	b083      	sub	sp, #12
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002d16:	bf00      	nop
 8002d18:	370c      	adds	r7, #12
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr

08002d22 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002d22:	b480      	push	{r7}
 8002d24:	b083      	sub	sp, #12
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002d2a:	bf00      	nop
 8002d2c:	370c      	adds	r7, #12
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr

08002d36 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b088      	sub	sp, #32
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	60f8      	str	r0, [r7, #12]
 8002d3e:	60b9      	str	r1, [r7, #8]
 8002d40:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002d42:	2300      	movs	r3, #0
 8002d44:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	795b      	ldrb	r3, [r3, #5]
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d101      	bne.n	8002d52 <HAL_DAC_ConfigChannel+0x1c>
 8002d4e:	2302      	movs	r3, #2
 8002d50:	e107      	b.n	8002f62 <HAL_DAC_ConfigChannel+0x22c>
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2201      	movs	r2, #1
 8002d56:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2202      	movs	r2, #2
 8002d5c:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2b04      	cmp	r3, #4
 8002d64:	d174      	bne.n	8002e50 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002d66:	f7fe f97f 	bl	8001068 <HAL_GetTick>
 8002d6a:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d134      	bne.n	8002ddc <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002d72:	e011      	b.n	8002d98 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002d74:	f7fe f978 	bl	8001068 <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d90a      	bls.n	8002d98 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	f043 0208 	orr.w	r2, r3, #8
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2203      	movs	r2, #3
 8002d92:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e0e4      	b.n	8002f62 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d1e6      	bne.n	8002d74 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8002da6:	2001      	movs	r0, #1
 8002da8:	f7fe f96a 	bl	8001080 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68ba      	ldr	r2, [r7, #8]
 8002db2:	6992      	ldr	r2, [r2, #24]
 8002db4:	641a      	str	r2, [r3, #64]	; 0x40
 8002db6:	e01e      	b.n	8002df6 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002db8:	f7fe f956 	bl	8001068 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d90a      	bls.n	8002ddc <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	691b      	ldr	r3, [r3, #16]
 8002dca:	f043 0208 	orr.w	r2, r3, #8
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2203      	movs	r2, #3
 8002dd6:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e0c2      	b.n	8002f62 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	dbe8      	blt.n	8002db8 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8002de6:	2001      	movs	r0, #1
 8002de8:	f7fe f94a 	bl	8001080 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	68ba      	ldr	r2, [r7, #8]
 8002df2:	6992      	ldr	r2, [r2, #24]
 8002df4:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f003 0310 	and.w	r3, r3, #16
 8002e02:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002e06:	fa01 f303 	lsl.w	r3, r1, r3
 8002e0a:	43db      	mvns	r3, r3
 8002e0c:	ea02 0103 	and.w	r1, r2, r3
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	69da      	ldr	r2, [r3, #28]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f003 0310 	and.w	r3, r3, #16
 8002e1a:	409a      	lsls	r2, r3
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	430a      	orrs	r2, r1
 8002e22:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f003 0310 	and.w	r3, r3, #16
 8002e30:	21ff      	movs	r1, #255	; 0xff
 8002e32:	fa01 f303 	lsl.w	r3, r1, r3
 8002e36:	43db      	mvns	r3, r3
 8002e38:	ea02 0103 	and.w	r1, r2, r3
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	6a1a      	ldr	r2, [r3, #32]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f003 0310 	and.w	r3, r3, #16
 8002e46:	409a      	lsls	r2, r3
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	430a      	orrs	r2, r1
 8002e4e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	691b      	ldr	r3, [r3, #16]
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d11d      	bne.n	8002e94 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e5e:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f003 0310 	and.w	r3, r3, #16
 8002e66:	221f      	movs	r2, #31
 8002e68:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6c:	43db      	mvns	r3, r3
 8002e6e:	69ba      	ldr	r2, [r7, #24]
 8002e70:	4013      	ands	r3, r2
 8002e72:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	695b      	ldr	r3, [r3, #20]
 8002e78:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f003 0310 	and.w	r3, r3, #16
 8002e80:	697a      	ldr	r2, [r7, #20]
 8002e82:	fa02 f303 	lsl.w	r3, r2, r3
 8002e86:	69ba      	ldr	r2, [r7, #24]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e9a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f003 0310 	and.w	r3, r3, #16
 8002ea2:	2207      	movs	r2, #7
 8002ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea8:	43db      	mvns	r3, r3
 8002eaa:	69ba      	ldr	r2, [r7, #24]
 8002eac:	4013      	ands	r3, r2
 8002eae:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	431a      	orrs	r2, r3
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f003 0310 	and.w	r3, r3, #16
 8002ec8:	697a      	ldr	r2, [r7, #20]
 8002eca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ece:	69ba      	ldr	r2, [r7, #24]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	69ba      	ldr	r2, [r7, #24]
 8002eda:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	6819      	ldr	r1, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f003 0310 	and.w	r3, r3, #16
 8002ee8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002eec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef0:	43da      	mvns	r2, r3
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	400a      	ands	r2, r1
 8002ef8:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f003 0310 	and.w	r3, r3, #16
 8002f08:	f640 72fc 	movw	r2, #4092	; 0xffc
 8002f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f10:	43db      	mvns	r3, r3
 8002f12:	69ba      	ldr	r2, [r7, #24]
 8002f14:	4013      	ands	r3, r2
 8002f16:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f003 0310 	and.w	r3, r3, #16
 8002f24:	697a      	ldr	r2, [r7, #20]
 8002f26:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2a:	69ba      	ldr	r2, [r7, #24]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	69ba      	ldr	r2, [r7, #24]
 8002f36:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	6819      	ldr	r1, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f003 0310 	and.w	r3, r3, #16
 8002f44:	22c0      	movs	r2, #192	; 0xc0
 8002f46:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4a:	43da      	mvns	r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	400a      	ands	r2, r1
 8002f52:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2201      	movs	r2, #1
 8002f58:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3720      	adds	r7, #32
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b084      	sub	sp, #16
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f76:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8002f78:	68f8      	ldr	r0, [r7, #12]
 8002f7a:	f7ff febe 	bl	8002cfa <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2201      	movs	r2, #1
 8002f82:	711a      	strb	r2, [r3, #4]
}
 8002f84:	bf00      	nop
 8002f86:	3710      	adds	r7, #16
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f98:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002f9a:	68f8      	ldr	r0, [r7, #12]
 8002f9c:	f7ff feb7 	bl	8002d0e <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002fa0:	bf00      	nop
 8002fa2:	3710      	adds	r7, #16
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb4:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	f043 0204 	orr.w	r2, r3, #4
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8002fc2:	68f8      	ldr	r0, [r7, #12]
 8002fc4:	f7ff fead 	bl	8002d22 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	711a      	strb	r2, [r3, #4]
}
 8002fce:	bf00      	nop
 8002fd0:	3710      	adds	r7, #16
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}

08002fd6 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002fd6:	b480      	push	{r7}
 8002fd8:	b083      	sub	sp, #12
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8002fde:	bf00      	nop
 8002fe0:	370c      	adds	r7, #12
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr

08002fea <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002fea:	b480      	push	{r7}
 8002fec:	b083      	sub	sp, #12
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002ff2:	bf00      	nop
 8002ff4:	370c      	adds	r7, #12
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr

08002ffe <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002ffe:	b480      	push	{r7}
 8003000:	b083      	sub	sp, #12
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8003006:	bf00      	nop
 8003008:	370c      	adds	r7, #12
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr

08003012 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003012:	b580      	push	{r7, lr}
 8003014:	b084      	sub	sp, #16
 8003016:	af00      	add	r7, sp, #0
 8003018:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800301e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8003020:	68f8      	ldr	r0, [r7, #12]
 8003022:	f7ff ffd8 	bl	8002fd6 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2201      	movs	r2, #1
 800302a:	711a      	strb	r2, [r3, #4]
}
 800302c:	bf00      	nop
 800302e:	3710      	adds	r7, #16
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}

08003034 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003040:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8003042:	68f8      	ldr	r0, [r7, #12]
 8003044:	f7ff ffd1 	bl	8002fea <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003048:	bf00      	nop
 800304a:	3710      	adds	r7, #16
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}

08003050 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800305c:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	f043 0204 	orr.w	r2, r3, #4
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800306a:	68f8      	ldr	r0, [r7, #12]
 800306c:	f7ff ffc7 	bl	8002ffe <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2201      	movs	r2, #1
 8003074:	711a      	strb	r2, [r3, #4]
}
 8003076:	bf00      	nop
 8003078:	3710      	adds	r7, #16
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
	...

08003080 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003080:	b480      	push	{r7}
 8003082:	b085      	sub	sp, #20
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d101      	bne.n	8003092 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e098      	b.n	80031c4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	461a      	mov	r2, r3
 8003098:	4b4d      	ldr	r3, [pc, #308]	; (80031d0 <HAL_DMA_Init+0x150>)
 800309a:	429a      	cmp	r2, r3
 800309c:	d80f      	bhi.n	80030be <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	461a      	mov	r2, r3
 80030a4:	4b4b      	ldr	r3, [pc, #300]	; (80031d4 <HAL_DMA_Init+0x154>)
 80030a6:	4413      	add	r3, r2
 80030a8:	4a4b      	ldr	r2, [pc, #300]	; (80031d8 <HAL_DMA_Init+0x158>)
 80030aa:	fba2 2303 	umull	r2, r3, r2, r3
 80030ae:	091b      	lsrs	r3, r3, #4
 80030b0:	009a      	lsls	r2, r3, #2
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a48      	ldr	r2, [pc, #288]	; (80031dc <HAL_DMA_Init+0x15c>)
 80030ba:	641a      	str	r2, [r3, #64]	; 0x40
 80030bc:	e00e      	b.n	80030dc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	461a      	mov	r2, r3
 80030c4:	4b46      	ldr	r3, [pc, #280]	; (80031e0 <HAL_DMA_Init+0x160>)
 80030c6:	4413      	add	r3, r2
 80030c8:	4a43      	ldr	r2, [pc, #268]	; (80031d8 <HAL_DMA_Init+0x158>)
 80030ca:	fba2 2303 	umull	r2, r3, r2, r3
 80030ce:	091b      	lsrs	r3, r3, #4
 80030d0:	009a      	lsls	r2, r3, #2
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a42      	ldr	r2, [pc, #264]	; (80031e4 <HAL_DMA_Init+0x164>)
 80030da:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2202      	movs	r2, #2
 80030e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80030f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030f6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003100:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800310c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	699b      	ldr	r3, [r3, #24]
 8003112:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003118:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a1b      	ldr	r3, [r3, #32]
 800311e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003120:	68fa      	ldr	r2, [r7, #12]
 8003122:	4313      	orrs	r3, r2
 8003124:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68fa      	ldr	r2, [r7, #12]
 800312c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003136:	d039      	beq.n	80031ac <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313c:	4a27      	ldr	r2, [pc, #156]	; (80031dc <HAL_DMA_Init+0x15c>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d11a      	bne.n	8003178 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003142:	4b29      	ldr	r3, [pc, #164]	; (80031e8 <HAL_DMA_Init+0x168>)
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800314a:	f003 031c 	and.w	r3, r3, #28
 800314e:	210f      	movs	r1, #15
 8003150:	fa01 f303 	lsl.w	r3, r1, r3
 8003154:	43db      	mvns	r3, r3
 8003156:	4924      	ldr	r1, [pc, #144]	; (80031e8 <HAL_DMA_Init+0x168>)
 8003158:	4013      	ands	r3, r2
 800315a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800315c:	4b22      	ldr	r3, [pc, #136]	; (80031e8 <HAL_DMA_Init+0x168>)
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6859      	ldr	r1, [r3, #4]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003168:	f003 031c 	and.w	r3, r3, #28
 800316c:	fa01 f303 	lsl.w	r3, r1, r3
 8003170:	491d      	ldr	r1, [pc, #116]	; (80031e8 <HAL_DMA_Init+0x168>)
 8003172:	4313      	orrs	r3, r2
 8003174:	600b      	str	r3, [r1, #0]
 8003176:	e019      	b.n	80031ac <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003178:	4b1c      	ldr	r3, [pc, #112]	; (80031ec <HAL_DMA_Init+0x16c>)
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003180:	f003 031c 	and.w	r3, r3, #28
 8003184:	210f      	movs	r1, #15
 8003186:	fa01 f303 	lsl.w	r3, r1, r3
 800318a:	43db      	mvns	r3, r3
 800318c:	4917      	ldr	r1, [pc, #92]	; (80031ec <HAL_DMA_Init+0x16c>)
 800318e:	4013      	ands	r3, r2
 8003190:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003192:	4b16      	ldr	r3, [pc, #88]	; (80031ec <HAL_DMA_Init+0x16c>)
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6859      	ldr	r1, [r3, #4]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800319e:	f003 031c 	and.w	r3, r3, #28
 80031a2:	fa01 f303 	lsl.w	r3, r1, r3
 80031a6:	4911      	ldr	r1, [pc, #68]	; (80031ec <HAL_DMA_Init+0x16c>)
 80031a8:	4313      	orrs	r3, r2
 80031aa:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2201      	movs	r2, #1
 80031b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80031c2:	2300      	movs	r3, #0
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3714      	adds	r7, #20
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr
 80031d0:	40020407 	.word	0x40020407
 80031d4:	bffdfff8 	.word	0xbffdfff8
 80031d8:	cccccccd 	.word	0xcccccccd
 80031dc:	40020000 	.word	0x40020000
 80031e0:	bffdfbf8 	.word	0xbffdfbf8
 80031e4:	40020400 	.word	0x40020400
 80031e8:	400200a8 	.word	0x400200a8
 80031ec:	400204a8 	.word	0x400204a8

080031f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b086      	sub	sp, #24
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	60b9      	str	r1, [r7, #8]
 80031fa:	607a      	str	r2, [r7, #4]
 80031fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031fe:	2300      	movs	r3, #0
 8003200:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003208:	2b01      	cmp	r3, #1
 800320a:	d101      	bne.n	8003210 <HAL_DMA_Start_IT+0x20>
 800320c:	2302      	movs	r3, #2
 800320e:	e04b      	b.n	80032a8 <HAL_DMA_Start_IT+0xb8>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800321e:	b2db      	uxtb	r3, r3
 8003220:	2b01      	cmp	r3, #1
 8003222:	d13a      	bne.n	800329a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2202      	movs	r2, #2
 8003228:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2200      	movs	r2, #0
 8003230:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f022 0201 	bic.w	r2, r2, #1
 8003240:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	68b9      	ldr	r1, [r7, #8]
 8003248:	68f8      	ldr	r0, [r7, #12]
 800324a:	f000 f8e0 	bl	800340e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003252:	2b00      	cmp	r3, #0
 8003254:	d008      	beq.n	8003268 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f042 020e 	orr.w	r2, r2, #14
 8003264:	601a      	str	r2, [r3, #0]
 8003266:	e00f      	b.n	8003288 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f022 0204 	bic.w	r2, r2, #4
 8003276:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f042 020a 	orr.w	r2, r2, #10
 8003286:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f042 0201 	orr.w	r2, r2, #1
 8003296:	601a      	str	r2, [r3, #0]
 8003298:	e005      	b.n	80032a6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2200      	movs	r2, #0
 800329e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80032a2:	2302      	movs	r3, #2
 80032a4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80032a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3718      	adds	r7, #24
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032cc:	f003 031c 	and.w	r3, r3, #28
 80032d0:	2204      	movs	r2, #4
 80032d2:	409a      	lsls	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	4013      	ands	r3, r2
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d026      	beq.n	800332a <HAL_DMA_IRQHandler+0x7a>
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	f003 0304 	and.w	r3, r3, #4
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d021      	beq.n	800332a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0320 	and.w	r3, r3, #32
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d107      	bne.n	8003304 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f022 0204 	bic.w	r2, r2, #4
 8003302:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003308:	f003 021c 	and.w	r2, r3, #28
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003310:	2104      	movs	r1, #4
 8003312:	fa01 f202 	lsl.w	r2, r1, r2
 8003316:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331c:	2b00      	cmp	r3, #0
 800331e:	d071      	beq.n	8003404 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003328:	e06c      	b.n	8003404 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800332e:	f003 031c 	and.w	r3, r3, #28
 8003332:	2202      	movs	r2, #2
 8003334:	409a      	lsls	r2, r3
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	4013      	ands	r3, r2
 800333a:	2b00      	cmp	r3, #0
 800333c:	d02e      	beq.n	800339c <HAL_DMA_IRQHandler+0xec>
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	f003 0302 	and.w	r3, r3, #2
 8003344:	2b00      	cmp	r3, #0
 8003346:	d029      	beq.n	800339c <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0320 	and.w	r3, r3, #32
 8003352:	2b00      	cmp	r3, #0
 8003354:	d10b      	bne.n	800336e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f022 020a 	bic.w	r2, r2, #10
 8003364:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2201      	movs	r2, #1
 800336a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003372:	f003 021c 	and.w	r2, r3, #28
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337a:	2102      	movs	r1, #2
 800337c:	fa01 f202 	lsl.w	r2, r1, r2
 8003380:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338e:	2b00      	cmp	r3, #0
 8003390:	d038      	beq.n	8003404 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800339a:	e033      	b.n	8003404 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a0:	f003 031c 	and.w	r3, r3, #28
 80033a4:	2208      	movs	r2, #8
 80033a6:	409a      	lsls	r2, r3
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	4013      	ands	r3, r2
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d02a      	beq.n	8003406 <HAL_DMA_IRQHandler+0x156>
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	f003 0308 	and.w	r3, r3, #8
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d025      	beq.n	8003406 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f022 020e 	bic.w	r2, r2, #14
 80033c8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ce:	f003 021c 	and.w	r2, r3, #28
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d6:	2101      	movs	r1, #1
 80033d8:	fa01 f202 	lsl.w	r2, r1, r2
 80033dc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2201      	movs	r2, #1
 80033e2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d004      	beq.n	8003406 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003404:	bf00      	nop
 8003406:	bf00      	nop
}
 8003408:	3710      	adds	r7, #16
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800340e:	b480      	push	{r7}
 8003410:	b085      	sub	sp, #20
 8003412:	af00      	add	r7, sp, #0
 8003414:	60f8      	str	r0, [r7, #12]
 8003416:	60b9      	str	r1, [r7, #8]
 8003418:	607a      	str	r2, [r7, #4]
 800341a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003420:	f003 021c 	and.w	r2, r3, #28
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003428:	2101      	movs	r1, #1
 800342a:	fa01 f202 	lsl.w	r2, r1, r2
 800342e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	683a      	ldr	r2, [r7, #0]
 8003436:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	2b10      	cmp	r3, #16
 800343e:	d108      	bne.n	8003452 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	68ba      	ldr	r2, [r7, #8]
 800344e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003450:	e007      	b.n	8003462 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	68ba      	ldr	r2, [r7, #8]
 8003458:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	60da      	str	r2, [r3, #12]
}
 8003462:	bf00      	nop
 8003464:	3714      	adds	r7, #20
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
	...

08003470 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003470:	b480      	push	{r7}
 8003472:	b087      	sub	sp, #28
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800347a:	2300      	movs	r3, #0
 800347c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800347e:	e17f      	b.n	8003780 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	2101      	movs	r1, #1
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	fa01 f303 	lsl.w	r3, r1, r3
 800348c:	4013      	ands	r3, r2
 800348e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2b00      	cmp	r3, #0
 8003494:	f000 8171 	beq.w	800377a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	2b01      	cmp	r3, #1
 800349e:	d00b      	beq.n	80034b8 <HAL_GPIO_Init+0x48>
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d007      	beq.n	80034b8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80034ac:	2b11      	cmp	r3, #17
 80034ae:	d003      	beq.n	80034b8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	2b12      	cmp	r3, #18
 80034b6:	d130      	bne.n	800351a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	005b      	lsls	r3, r3, #1
 80034c2:	2203      	movs	r2, #3
 80034c4:	fa02 f303 	lsl.w	r3, r2, r3
 80034c8:	43db      	mvns	r3, r3
 80034ca:	693a      	ldr	r2, [r7, #16]
 80034cc:	4013      	ands	r3, r2
 80034ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	68da      	ldr	r2, [r3, #12]
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	005b      	lsls	r3, r3, #1
 80034d8:	fa02 f303 	lsl.w	r3, r2, r3
 80034dc:	693a      	ldr	r2, [r7, #16]
 80034de:	4313      	orrs	r3, r2
 80034e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	693a      	ldr	r2, [r7, #16]
 80034e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80034ee:	2201      	movs	r2, #1
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	fa02 f303 	lsl.w	r3, r2, r3
 80034f6:	43db      	mvns	r3, r3
 80034f8:	693a      	ldr	r2, [r7, #16]
 80034fa:	4013      	ands	r3, r2
 80034fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	091b      	lsrs	r3, r3, #4
 8003504:	f003 0201 	and.w	r2, r3, #1
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	fa02 f303 	lsl.w	r3, r2, r3
 800350e:	693a      	ldr	r2, [r7, #16]
 8003510:	4313      	orrs	r3, r2
 8003512:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	693a      	ldr	r2, [r7, #16]
 8003518:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f003 0303 	and.w	r3, r3, #3
 8003522:	2b03      	cmp	r3, #3
 8003524:	d118      	bne.n	8003558 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800352c:	2201      	movs	r2, #1
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	fa02 f303 	lsl.w	r3, r2, r3
 8003534:	43db      	mvns	r3, r3
 8003536:	693a      	ldr	r2, [r7, #16]
 8003538:	4013      	ands	r3, r2
 800353a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	08db      	lsrs	r3, r3, #3
 8003542:	f003 0201 	and.w	r2, r3, #1
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	fa02 f303 	lsl.w	r3, r2, r3
 800354c:	693a      	ldr	r2, [r7, #16]
 800354e:	4313      	orrs	r3, r2
 8003550:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	693a      	ldr	r2, [r7, #16]
 8003556:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	005b      	lsls	r3, r3, #1
 8003562:	2203      	movs	r2, #3
 8003564:	fa02 f303 	lsl.w	r3, r2, r3
 8003568:	43db      	mvns	r3, r3
 800356a:	693a      	ldr	r2, [r7, #16]
 800356c:	4013      	ands	r3, r2
 800356e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	689a      	ldr	r2, [r3, #8]
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	005b      	lsls	r3, r3, #1
 8003578:	fa02 f303 	lsl.w	r3, r2, r3
 800357c:	693a      	ldr	r2, [r7, #16]
 800357e:	4313      	orrs	r3, r2
 8003580:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	693a      	ldr	r2, [r7, #16]
 8003586:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	2b02      	cmp	r3, #2
 800358e:	d003      	beq.n	8003598 <HAL_GPIO_Init+0x128>
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	2b12      	cmp	r3, #18
 8003596:	d123      	bne.n	80035e0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	08da      	lsrs	r2, r3, #3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	3208      	adds	r2, #8
 80035a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	f003 0307 	and.w	r3, r3, #7
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	220f      	movs	r2, #15
 80035b0:	fa02 f303 	lsl.w	r3, r2, r3
 80035b4:	43db      	mvns	r3, r3
 80035b6:	693a      	ldr	r2, [r7, #16]
 80035b8:	4013      	ands	r3, r2
 80035ba:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	691a      	ldr	r2, [r3, #16]
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	f003 0307 	and.w	r3, r3, #7
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	fa02 f303 	lsl.w	r3, r2, r3
 80035cc:	693a      	ldr	r2, [r7, #16]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	08da      	lsrs	r2, r3, #3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	3208      	adds	r2, #8
 80035da:	6939      	ldr	r1, [r7, #16]
 80035dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	005b      	lsls	r3, r3, #1
 80035ea:	2203      	movs	r2, #3
 80035ec:	fa02 f303 	lsl.w	r3, r2, r3
 80035f0:	43db      	mvns	r3, r3
 80035f2:	693a      	ldr	r2, [r7, #16]
 80035f4:	4013      	ands	r3, r2
 80035f6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f003 0203 	and.w	r2, r3, #3
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	005b      	lsls	r3, r3, #1
 8003604:	fa02 f303 	lsl.w	r3, r2, r3
 8003608:	693a      	ldr	r2, [r7, #16]
 800360a:	4313      	orrs	r3, r2
 800360c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	693a      	ldr	r2, [r7, #16]
 8003612:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800361c:	2b00      	cmp	r3, #0
 800361e:	f000 80ac 	beq.w	800377a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003622:	4b5e      	ldr	r3, [pc, #376]	; (800379c <HAL_GPIO_Init+0x32c>)
 8003624:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003626:	4a5d      	ldr	r2, [pc, #372]	; (800379c <HAL_GPIO_Init+0x32c>)
 8003628:	f043 0301 	orr.w	r3, r3, #1
 800362c:	6613      	str	r3, [r2, #96]	; 0x60
 800362e:	4b5b      	ldr	r3, [pc, #364]	; (800379c <HAL_GPIO_Init+0x32c>)
 8003630:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003632:	f003 0301 	and.w	r3, r3, #1
 8003636:	60bb      	str	r3, [r7, #8]
 8003638:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800363a:	4a59      	ldr	r2, [pc, #356]	; (80037a0 <HAL_GPIO_Init+0x330>)
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	089b      	lsrs	r3, r3, #2
 8003640:	3302      	adds	r3, #2
 8003642:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003646:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	f003 0303 	and.w	r3, r3, #3
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	220f      	movs	r2, #15
 8003652:	fa02 f303 	lsl.w	r3, r2, r3
 8003656:	43db      	mvns	r3, r3
 8003658:	693a      	ldr	r2, [r7, #16]
 800365a:	4013      	ands	r3, r2
 800365c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003664:	d025      	beq.n	80036b2 <HAL_GPIO_Init+0x242>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a4e      	ldr	r2, [pc, #312]	; (80037a4 <HAL_GPIO_Init+0x334>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d01f      	beq.n	80036ae <HAL_GPIO_Init+0x23e>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a4d      	ldr	r2, [pc, #308]	; (80037a8 <HAL_GPIO_Init+0x338>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d019      	beq.n	80036aa <HAL_GPIO_Init+0x23a>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a4c      	ldr	r2, [pc, #304]	; (80037ac <HAL_GPIO_Init+0x33c>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d013      	beq.n	80036a6 <HAL_GPIO_Init+0x236>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a4b      	ldr	r2, [pc, #300]	; (80037b0 <HAL_GPIO_Init+0x340>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d00d      	beq.n	80036a2 <HAL_GPIO_Init+0x232>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a4a      	ldr	r2, [pc, #296]	; (80037b4 <HAL_GPIO_Init+0x344>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d007      	beq.n	800369e <HAL_GPIO_Init+0x22e>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a49      	ldr	r2, [pc, #292]	; (80037b8 <HAL_GPIO_Init+0x348>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d101      	bne.n	800369a <HAL_GPIO_Init+0x22a>
 8003696:	2306      	movs	r3, #6
 8003698:	e00c      	b.n	80036b4 <HAL_GPIO_Init+0x244>
 800369a:	2307      	movs	r3, #7
 800369c:	e00a      	b.n	80036b4 <HAL_GPIO_Init+0x244>
 800369e:	2305      	movs	r3, #5
 80036a0:	e008      	b.n	80036b4 <HAL_GPIO_Init+0x244>
 80036a2:	2304      	movs	r3, #4
 80036a4:	e006      	b.n	80036b4 <HAL_GPIO_Init+0x244>
 80036a6:	2303      	movs	r3, #3
 80036a8:	e004      	b.n	80036b4 <HAL_GPIO_Init+0x244>
 80036aa:	2302      	movs	r3, #2
 80036ac:	e002      	b.n	80036b4 <HAL_GPIO_Init+0x244>
 80036ae:	2301      	movs	r3, #1
 80036b0:	e000      	b.n	80036b4 <HAL_GPIO_Init+0x244>
 80036b2:	2300      	movs	r3, #0
 80036b4:	697a      	ldr	r2, [r7, #20]
 80036b6:	f002 0203 	and.w	r2, r2, #3
 80036ba:	0092      	lsls	r2, r2, #2
 80036bc:	4093      	lsls	r3, r2
 80036be:	693a      	ldr	r2, [r7, #16]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80036c4:	4936      	ldr	r1, [pc, #216]	; (80037a0 <HAL_GPIO_Init+0x330>)
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	089b      	lsrs	r3, r3, #2
 80036ca:	3302      	adds	r3, #2
 80036cc:	693a      	ldr	r2, [r7, #16]
 80036ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80036d2:	4b3a      	ldr	r3, [pc, #232]	; (80037bc <HAL_GPIO_Init+0x34c>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	43db      	mvns	r3, r3
 80036dc:	693a      	ldr	r2, [r7, #16]
 80036de:	4013      	ands	r3, r2
 80036e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d003      	beq.n	80036f6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80036ee:	693a      	ldr	r2, [r7, #16]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80036f6:	4a31      	ldr	r2, [pc, #196]	; (80037bc <HAL_GPIO_Init+0x34c>)
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80036fc:	4b2f      	ldr	r3, [pc, #188]	; (80037bc <HAL_GPIO_Init+0x34c>)
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	43db      	mvns	r3, r3
 8003706:	693a      	ldr	r2, [r7, #16]
 8003708:	4013      	ands	r3, r2
 800370a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d003      	beq.n	8003720 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003718:	693a      	ldr	r2, [r7, #16]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	4313      	orrs	r3, r2
 800371e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003720:	4a26      	ldr	r2, [pc, #152]	; (80037bc <HAL_GPIO_Init+0x34c>)
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003726:	4b25      	ldr	r3, [pc, #148]	; (80037bc <HAL_GPIO_Init+0x34c>)
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	43db      	mvns	r3, r3
 8003730:	693a      	ldr	r2, [r7, #16]
 8003732:	4013      	ands	r3, r2
 8003734:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d003      	beq.n	800374a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003742:	693a      	ldr	r2, [r7, #16]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	4313      	orrs	r3, r2
 8003748:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800374a:	4a1c      	ldr	r2, [pc, #112]	; (80037bc <HAL_GPIO_Init+0x34c>)
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003750:	4b1a      	ldr	r3, [pc, #104]	; (80037bc <HAL_GPIO_Init+0x34c>)
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	43db      	mvns	r3, r3
 800375a:	693a      	ldr	r2, [r7, #16]
 800375c:	4013      	ands	r3, r2
 800375e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d003      	beq.n	8003774 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800376c:	693a      	ldr	r2, [r7, #16]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	4313      	orrs	r3, r2
 8003772:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003774:	4a11      	ldr	r2, [pc, #68]	; (80037bc <HAL_GPIO_Init+0x34c>)
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	3301      	adds	r3, #1
 800377e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	fa22 f303 	lsr.w	r3, r2, r3
 800378a:	2b00      	cmp	r3, #0
 800378c:	f47f ae78 	bne.w	8003480 <HAL_GPIO_Init+0x10>
  }
}
 8003790:	bf00      	nop
 8003792:	371c      	adds	r7, #28
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr
 800379c:	40021000 	.word	0x40021000
 80037a0:	40010000 	.word	0x40010000
 80037a4:	48000400 	.word	0x48000400
 80037a8:	48000800 	.word	0x48000800
 80037ac:	48000c00 	.word	0x48000c00
 80037b0:	48001000 	.word	0x48001000
 80037b4:	48001400 	.word	0x48001400
 80037b8:	48001800 	.word	0x48001800
 80037bc:	40010400 	.word	0x40010400

080037c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	460b      	mov	r3, r1
 80037ca:	807b      	strh	r3, [r7, #2]
 80037cc:	4613      	mov	r3, r2
 80037ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037d0:	787b      	ldrb	r3, [r7, #1]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d003      	beq.n	80037de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80037d6:	887a      	ldrh	r2, [r7, #2]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80037dc:	e002      	b.n	80037e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80037de:	887a      	ldrh	r2, [r7, #2]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80037e4:	bf00      	nop
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80037f0:	b480      	push	{r7}
 80037f2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80037f4:	4b04      	ldr	r3, [pc, #16]	; (8003808 <HAL_PWREx_GetVoltageRange+0x18>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	40007000 	.word	0x40007000

0800380c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800380c:	b480      	push	{r7}
 800380e:	b085      	sub	sp, #20
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800381a:	d130      	bne.n	800387e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800381c:	4b23      	ldr	r3, [pc, #140]	; (80038ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003824:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003828:	d038      	beq.n	800389c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800382a:	4b20      	ldr	r3, [pc, #128]	; (80038ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003832:	4a1e      	ldr	r2, [pc, #120]	; (80038ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003834:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003838:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800383a:	4b1d      	ldr	r3, [pc, #116]	; (80038b0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	2232      	movs	r2, #50	; 0x32
 8003840:	fb02 f303 	mul.w	r3, r2, r3
 8003844:	4a1b      	ldr	r2, [pc, #108]	; (80038b4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003846:	fba2 2303 	umull	r2, r3, r2, r3
 800384a:	0c9b      	lsrs	r3, r3, #18
 800384c:	3301      	adds	r3, #1
 800384e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003850:	e002      	b.n	8003858 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	3b01      	subs	r3, #1
 8003856:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003858:	4b14      	ldr	r3, [pc, #80]	; (80038ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800385a:	695b      	ldr	r3, [r3, #20]
 800385c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003860:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003864:	d102      	bne.n	800386c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d1f2      	bne.n	8003852 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800386c:	4b0f      	ldr	r3, [pc, #60]	; (80038ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800386e:	695b      	ldr	r3, [r3, #20]
 8003870:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003874:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003878:	d110      	bne.n	800389c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e00f      	b.n	800389e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800387e:	4b0b      	ldr	r3, [pc, #44]	; (80038ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003886:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800388a:	d007      	beq.n	800389c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800388c:	4b07      	ldr	r3, [pc, #28]	; (80038ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003894:	4a05      	ldr	r2, [pc, #20]	; (80038ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003896:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800389a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3714      	adds	r7, #20
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	40007000 	.word	0x40007000
 80038b0:	20000010 	.word	0x20000010
 80038b4:	431bde83 	.word	0x431bde83

080038b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b088      	sub	sp, #32
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d101      	bne.n	80038ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e3d4      	b.n	8004074 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038ca:	4ba1      	ldr	r3, [pc, #644]	; (8003b50 <HAL_RCC_OscConfig+0x298>)
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f003 030c 	and.w	r3, r3, #12
 80038d2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038d4:	4b9e      	ldr	r3, [pc, #632]	; (8003b50 <HAL_RCC_OscConfig+0x298>)
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	f003 0303 	and.w	r3, r3, #3
 80038dc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0310 	and.w	r3, r3, #16
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	f000 80e4 	beq.w	8003ab4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d007      	beq.n	8003902 <HAL_RCC_OscConfig+0x4a>
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	2b0c      	cmp	r3, #12
 80038f6:	f040 808b 	bne.w	8003a10 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	f040 8087 	bne.w	8003a10 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003902:	4b93      	ldr	r3, [pc, #588]	; (8003b50 <HAL_RCC_OscConfig+0x298>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0302 	and.w	r3, r3, #2
 800390a:	2b00      	cmp	r3, #0
 800390c:	d005      	beq.n	800391a <HAL_RCC_OscConfig+0x62>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	699b      	ldr	r3, [r3, #24]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d101      	bne.n	800391a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e3ac      	b.n	8004074 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6a1a      	ldr	r2, [r3, #32]
 800391e:	4b8c      	ldr	r3, [pc, #560]	; (8003b50 <HAL_RCC_OscConfig+0x298>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0308 	and.w	r3, r3, #8
 8003926:	2b00      	cmp	r3, #0
 8003928:	d004      	beq.n	8003934 <HAL_RCC_OscConfig+0x7c>
 800392a:	4b89      	ldr	r3, [pc, #548]	; (8003b50 <HAL_RCC_OscConfig+0x298>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003932:	e005      	b.n	8003940 <HAL_RCC_OscConfig+0x88>
 8003934:	4b86      	ldr	r3, [pc, #536]	; (8003b50 <HAL_RCC_OscConfig+0x298>)
 8003936:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800393a:	091b      	lsrs	r3, r3, #4
 800393c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003940:	4293      	cmp	r3, r2
 8003942:	d223      	bcs.n	800398c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6a1b      	ldr	r3, [r3, #32]
 8003948:	4618      	mov	r0, r3
 800394a:	f000 fd3f 	bl	80043cc <RCC_SetFlashLatencyFromMSIRange>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d001      	beq.n	8003958 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e38d      	b.n	8004074 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003958:	4b7d      	ldr	r3, [pc, #500]	; (8003b50 <HAL_RCC_OscConfig+0x298>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a7c      	ldr	r2, [pc, #496]	; (8003b50 <HAL_RCC_OscConfig+0x298>)
 800395e:	f043 0308 	orr.w	r3, r3, #8
 8003962:	6013      	str	r3, [r2, #0]
 8003964:	4b7a      	ldr	r3, [pc, #488]	; (8003b50 <HAL_RCC_OscConfig+0x298>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a1b      	ldr	r3, [r3, #32]
 8003970:	4977      	ldr	r1, [pc, #476]	; (8003b50 <HAL_RCC_OscConfig+0x298>)
 8003972:	4313      	orrs	r3, r2
 8003974:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003976:	4b76      	ldr	r3, [pc, #472]	; (8003b50 <HAL_RCC_OscConfig+0x298>)
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	69db      	ldr	r3, [r3, #28]
 8003982:	021b      	lsls	r3, r3, #8
 8003984:	4972      	ldr	r1, [pc, #456]	; (8003b50 <HAL_RCC_OscConfig+0x298>)
 8003986:	4313      	orrs	r3, r2
 8003988:	604b      	str	r3, [r1, #4]
 800398a:	e025      	b.n	80039d8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800398c:	4b70      	ldr	r3, [pc, #448]	; (8003b50 <HAL_RCC_OscConfig+0x298>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a6f      	ldr	r2, [pc, #444]	; (8003b50 <HAL_RCC_OscConfig+0x298>)
 8003992:	f043 0308 	orr.w	r3, r3, #8
 8003996:	6013      	str	r3, [r2, #0]
 8003998:	4b6d      	ldr	r3, [pc, #436]	; (8003b50 <HAL_RCC_OscConfig+0x298>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a1b      	ldr	r3, [r3, #32]
 80039a4:	496a      	ldr	r1, [pc, #424]	; (8003b50 <HAL_RCC_OscConfig+0x298>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039aa:	4b69      	ldr	r3, [pc, #420]	; (8003b50 <HAL_RCC_OscConfig+0x298>)
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	69db      	ldr	r3, [r3, #28]
 80039b6:	021b      	lsls	r3, r3, #8
 80039b8:	4965      	ldr	r1, [pc, #404]	; (8003b50 <HAL_RCC_OscConfig+0x298>)
 80039ba:	4313      	orrs	r3, r2
 80039bc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d109      	bne.n	80039d8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a1b      	ldr	r3, [r3, #32]
 80039c8:	4618      	mov	r0, r3
 80039ca:	f000 fcff 	bl	80043cc <RCC_SetFlashLatencyFromMSIRange>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d001      	beq.n	80039d8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e34d      	b.n	8004074 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80039d8:	f000 fc36 	bl	8004248 <HAL_RCC_GetSysClockFreq>
 80039dc:	4601      	mov	r1, r0
 80039de:	4b5c      	ldr	r3, [pc, #368]	; (8003b50 <HAL_RCC_OscConfig+0x298>)
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	091b      	lsrs	r3, r3, #4
 80039e4:	f003 030f 	and.w	r3, r3, #15
 80039e8:	4a5a      	ldr	r2, [pc, #360]	; (8003b54 <HAL_RCC_OscConfig+0x29c>)
 80039ea:	5cd3      	ldrb	r3, [r2, r3]
 80039ec:	f003 031f 	and.w	r3, r3, #31
 80039f0:	fa21 f303 	lsr.w	r3, r1, r3
 80039f4:	4a58      	ldr	r2, [pc, #352]	; (8003b58 <HAL_RCC_OscConfig+0x2a0>)
 80039f6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80039f8:	4b58      	ldr	r3, [pc, #352]	; (8003b5c <HAL_RCC_OscConfig+0x2a4>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4618      	mov	r0, r3
 80039fe:	f7fd fae3 	bl	8000fc8 <HAL_InitTick>
 8003a02:	4603      	mov	r3, r0
 8003a04:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003a06:	7bfb      	ldrb	r3, [r7, #15]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d052      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003a0c:	7bfb      	ldrb	r3, [r7, #15]
 8003a0e:	e331      	b.n	8004074 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	699b      	ldr	r3, [r3, #24]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d032      	beq.n	8003a7e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003a18:	4b4d      	ldr	r3, [pc, #308]	; (8003b50 <HAL_RCC_OscConfig+0x298>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a4c      	ldr	r2, [pc, #304]	; (8003b50 <HAL_RCC_OscConfig+0x298>)
 8003a1e:	f043 0301 	orr.w	r3, r3, #1
 8003a22:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a24:	f7fd fb20 	bl	8001068 <HAL_GetTick>
 8003a28:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a2a:	e008      	b.n	8003a3e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a2c:	f7fd fb1c 	bl	8001068 <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d901      	bls.n	8003a3e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e31a      	b.n	8004074 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a3e:	4b44      	ldr	r3, [pc, #272]	; (8003b50 <HAL_RCC_OscConfig+0x298>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0302 	and.w	r3, r3, #2
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d0f0      	beq.n	8003a2c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a4a:	4b41      	ldr	r3, [pc, #260]	; (8003b50 <HAL_RCC_OscConfig+0x298>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a40      	ldr	r2, [pc, #256]	; (8003b50 <HAL_RCC_OscConfig+0x298>)
 8003a50:	f043 0308 	orr.w	r3, r3, #8
 8003a54:	6013      	str	r3, [r2, #0]
 8003a56:	4b3e      	ldr	r3, [pc, #248]	; (8003b50 <HAL_RCC_OscConfig+0x298>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a1b      	ldr	r3, [r3, #32]
 8003a62:	493b      	ldr	r1, [pc, #236]	; (8003b50 <HAL_RCC_OscConfig+0x298>)
 8003a64:	4313      	orrs	r3, r2
 8003a66:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a68:	4b39      	ldr	r3, [pc, #228]	; (8003b50 <HAL_RCC_OscConfig+0x298>)
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	69db      	ldr	r3, [r3, #28]
 8003a74:	021b      	lsls	r3, r3, #8
 8003a76:	4936      	ldr	r1, [pc, #216]	; (8003b50 <HAL_RCC_OscConfig+0x298>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	604b      	str	r3, [r1, #4]
 8003a7c:	e01a      	b.n	8003ab4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003a7e:	4b34      	ldr	r3, [pc, #208]	; (8003b50 <HAL_RCC_OscConfig+0x298>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a33      	ldr	r2, [pc, #204]	; (8003b50 <HAL_RCC_OscConfig+0x298>)
 8003a84:	f023 0301 	bic.w	r3, r3, #1
 8003a88:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a8a:	f7fd faed 	bl	8001068 <HAL_GetTick>
 8003a8e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a90:	e008      	b.n	8003aa4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a92:	f7fd fae9 	bl	8001068 <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d901      	bls.n	8003aa4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e2e7      	b.n	8004074 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003aa4:	4b2a      	ldr	r3, [pc, #168]	; (8003b50 <HAL_RCC_OscConfig+0x298>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0302 	and.w	r3, r3, #2
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d1f0      	bne.n	8003a92 <HAL_RCC_OscConfig+0x1da>
 8003ab0:	e000      	b.n	8003ab4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003ab2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0301 	and.w	r3, r3, #1
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d074      	beq.n	8003baa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003ac0:	69bb      	ldr	r3, [r7, #24]
 8003ac2:	2b08      	cmp	r3, #8
 8003ac4:	d005      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x21a>
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	2b0c      	cmp	r3, #12
 8003aca:	d10e      	bne.n	8003aea <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	2b03      	cmp	r3, #3
 8003ad0:	d10b      	bne.n	8003aea <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ad2:	4b1f      	ldr	r3, [pc, #124]	; (8003b50 <HAL_RCC_OscConfig+0x298>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d064      	beq.n	8003ba8 <HAL_RCC_OscConfig+0x2f0>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d160      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e2c4      	b.n	8004074 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003af2:	d106      	bne.n	8003b02 <HAL_RCC_OscConfig+0x24a>
 8003af4:	4b16      	ldr	r3, [pc, #88]	; (8003b50 <HAL_RCC_OscConfig+0x298>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a15      	ldr	r2, [pc, #84]	; (8003b50 <HAL_RCC_OscConfig+0x298>)
 8003afa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003afe:	6013      	str	r3, [r2, #0]
 8003b00:	e01d      	b.n	8003b3e <HAL_RCC_OscConfig+0x286>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b0a:	d10c      	bne.n	8003b26 <HAL_RCC_OscConfig+0x26e>
 8003b0c:	4b10      	ldr	r3, [pc, #64]	; (8003b50 <HAL_RCC_OscConfig+0x298>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a0f      	ldr	r2, [pc, #60]	; (8003b50 <HAL_RCC_OscConfig+0x298>)
 8003b12:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b16:	6013      	str	r3, [r2, #0]
 8003b18:	4b0d      	ldr	r3, [pc, #52]	; (8003b50 <HAL_RCC_OscConfig+0x298>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a0c      	ldr	r2, [pc, #48]	; (8003b50 <HAL_RCC_OscConfig+0x298>)
 8003b1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b22:	6013      	str	r3, [r2, #0]
 8003b24:	e00b      	b.n	8003b3e <HAL_RCC_OscConfig+0x286>
 8003b26:	4b0a      	ldr	r3, [pc, #40]	; (8003b50 <HAL_RCC_OscConfig+0x298>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a09      	ldr	r2, [pc, #36]	; (8003b50 <HAL_RCC_OscConfig+0x298>)
 8003b2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b30:	6013      	str	r3, [r2, #0]
 8003b32:	4b07      	ldr	r3, [pc, #28]	; (8003b50 <HAL_RCC_OscConfig+0x298>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a06      	ldr	r2, [pc, #24]	; (8003b50 <HAL_RCC_OscConfig+0x298>)
 8003b38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b3c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d01c      	beq.n	8003b80 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b46:	f7fd fa8f 	bl	8001068 <HAL_GetTick>
 8003b4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b4c:	e011      	b.n	8003b72 <HAL_RCC_OscConfig+0x2ba>
 8003b4e:	bf00      	nop
 8003b50:	40021000 	.word	0x40021000
 8003b54:	080069ac 	.word	0x080069ac
 8003b58:	20000010 	.word	0x20000010
 8003b5c:	20000014 	.word	0x20000014
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b60:	f7fd fa82 	bl	8001068 <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	2b64      	cmp	r3, #100	; 0x64
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e280      	b.n	8004074 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b72:	4baf      	ldr	r3, [pc, #700]	; (8003e30 <HAL_RCC_OscConfig+0x578>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d0f0      	beq.n	8003b60 <HAL_RCC_OscConfig+0x2a8>
 8003b7e:	e014      	b.n	8003baa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b80:	f7fd fa72 	bl	8001068 <HAL_GetTick>
 8003b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b86:	e008      	b.n	8003b9a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b88:	f7fd fa6e 	bl	8001068 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	2b64      	cmp	r3, #100	; 0x64
 8003b94:	d901      	bls.n	8003b9a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e26c      	b.n	8004074 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b9a:	4ba5      	ldr	r3, [pc, #660]	; (8003e30 <HAL_RCC_OscConfig+0x578>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d1f0      	bne.n	8003b88 <HAL_RCC_OscConfig+0x2d0>
 8003ba6:	e000      	b.n	8003baa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ba8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0302 	and.w	r3, r3, #2
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d060      	beq.n	8003c78 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	2b04      	cmp	r3, #4
 8003bba:	d005      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x310>
 8003bbc:	69bb      	ldr	r3, [r7, #24]
 8003bbe:	2b0c      	cmp	r3, #12
 8003bc0:	d119      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d116      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bc8:	4b99      	ldr	r3, [pc, #612]	; (8003e30 <HAL_RCC_OscConfig+0x578>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d005      	beq.n	8003be0 <HAL_RCC_OscConfig+0x328>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d101      	bne.n	8003be0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e249      	b.n	8004074 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003be0:	4b93      	ldr	r3, [pc, #588]	; (8003e30 <HAL_RCC_OscConfig+0x578>)
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	691b      	ldr	r3, [r3, #16]
 8003bec:	061b      	lsls	r3, r3, #24
 8003bee:	4990      	ldr	r1, [pc, #576]	; (8003e30 <HAL_RCC_OscConfig+0x578>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bf4:	e040      	b.n	8003c78 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d023      	beq.n	8003c46 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bfe:	4b8c      	ldr	r3, [pc, #560]	; (8003e30 <HAL_RCC_OscConfig+0x578>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a8b      	ldr	r2, [pc, #556]	; (8003e30 <HAL_RCC_OscConfig+0x578>)
 8003c04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c0a:	f7fd fa2d 	bl	8001068 <HAL_GetTick>
 8003c0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c10:	e008      	b.n	8003c24 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c12:	f7fd fa29 	bl	8001068 <HAL_GetTick>
 8003c16:	4602      	mov	r2, r0
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d901      	bls.n	8003c24 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	e227      	b.n	8004074 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c24:	4b82      	ldr	r3, [pc, #520]	; (8003e30 <HAL_RCC_OscConfig+0x578>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d0f0      	beq.n	8003c12 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c30:	4b7f      	ldr	r3, [pc, #508]	; (8003e30 <HAL_RCC_OscConfig+0x578>)
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	691b      	ldr	r3, [r3, #16]
 8003c3c:	061b      	lsls	r3, r3, #24
 8003c3e:	497c      	ldr	r1, [pc, #496]	; (8003e30 <HAL_RCC_OscConfig+0x578>)
 8003c40:	4313      	orrs	r3, r2
 8003c42:	604b      	str	r3, [r1, #4]
 8003c44:	e018      	b.n	8003c78 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c46:	4b7a      	ldr	r3, [pc, #488]	; (8003e30 <HAL_RCC_OscConfig+0x578>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a79      	ldr	r2, [pc, #484]	; (8003e30 <HAL_RCC_OscConfig+0x578>)
 8003c4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c52:	f7fd fa09 	bl	8001068 <HAL_GetTick>
 8003c56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c58:	e008      	b.n	8003c6c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c5a:	f7fd fa05 	bl	8001068 <HAL_GetTick>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d901      	bls.n	8003c6c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	e203      	b.n	8004074 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c6c:	4b70      	ldr	r3, [pc, #448]	; (8003e30 <HAL_RCC_OscConfig+0x578>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d1f0      	bne.n	8003c5a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0308 	and.w	r3, r3, #8
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d03c      	beq.n	8003cfe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	695b      	ldr	r3, [r3, #20]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d01c      	beq.n	8003cc6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c8c:	4b68      	ldr	r3, [pc, #416]	; (8003e30 <HAL_RCC_OscConfig+0x578>)
 8003c8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c92:	4a67      	ldr	r2, [pc, #412]	; (8003e30 <HAL_RCC_OscConfig+0x578>)
 8003c94:	f043 0301 	orr.w	r3, r3, #1
 8003c98:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c9c:	f7fd f9e4 	bl	8001068 <HAL_GetTick>
 8003ca0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ca2:	e008      	b.n	8003cb6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ca4:	f7fd f9e0 	bl	8001068 <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d901      	bls.n	8003cb6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e1de      	b.n	8004074 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003cb6:	4b5e      	ldr	r3, [pc, #376]	; (8003e30 <HAL_RCC_OscConfig+0x578>)
 8003cb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cbc:	f003 0302 	and.w	r3, r3, #2
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d0ef      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x3ec>
 8003cc4:	e01b      	b.n	8003cfe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cc6:	4b5a      	ldr	r3, [pc, #360]	; (8003e30 <HAL_RCC_OscConfig+0x578>)
 8003cc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ccc:	4a58      	ldr	r2, [pc, #352]	; (8003e30 <HAL_RCC_OscConfig+0x578>)
 8003cce:	f023 0301 	bic.w	r3, r3, #1
 8003cd2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cd6:	f7fd f9c7 	bl	8001068 <HAL_GetTick>
 8003cda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003cdc:	e008      	b.n	8003cf0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cde:	f7fd f9c3 	bl	8001068 <HAL_GetTick>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d901      	bls.n	8003cf0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	e1c1      	b.n	8004074 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003cf0:	4b4f      	ldr	r3, [pc, #316]	; (8003e30 <HAL_RCC_OscConfig+0x578>)
 8003cf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cf6:	f003 0302 	and.w	r3, r3, #2
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d1ef      	bne.n	8003cde <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0304 	and.w	r3, r3, #4
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	f000 80a6 	beq.w	8003e58 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003d10:	4b47      	ldr	r3, [pc, #284]	; (8003e30 <HAL_RCC_OscConfig+0x578>)
 8003d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d10d      	bne.n	8003d38 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d1c:	4b44      	ldr	r3, [pc, #272]	; (8003e30 <HAL_RCC_OscConfig+0x578>)
 8003d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d20:	4a43      	ldr	r2, [pc, #268]	; (8003e30 <HAL_RCC_OscConfig+0x578>)
 8003d22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d26:	6593      	str	r3, [r2, #88]	; 0x58
 8003d28:	4b41      	ldr	r3, [pc, #260]	; (8003e30 <HAL_RCC_OscConfig+0x578>)
 8003d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d30:	60bb      	str	r3, [r7, #8]
 8003d32:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d34:	2301      	movs	r3, #1
 8003d36:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d38:	4b3e      	ldr	r3, [pc, #248]	; (8003e34 <HAL_RCC_OscConfig+0x57c>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d118      	bne.n	8003d76 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d44:	4b3b      	ldr	r3, [pc, #236]	; (8003e34 <HAL_RCC_OscConfig+0x57c>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a3a      	ldr	r2, [pc, #232]	; (8003e34 <HAL_RCC_OscConfig+0x57c>)
 8003d4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d4e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d50:	f7fd f98a 	bl	8001068 <HAL_GetTick>
 8003d54:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d56:	e008      	b.n	8003d6a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d58:	f7fd f986 	bl	8001068 <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d901      	bls.n	8003d6a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e184      	b.n	8004074 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d6a:	4b32      	ldr	r3, [pc, #200]	; (8003e34 <HAL_RCC_OscConfig+0x57c>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d0f0      	beq.n	8003d58 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d108      	bne.n	8003d90 <HAL_RCC_OscConfig+0x4d8>
 8003d7e:	4b2c      	ldr	r3, [pc, #176]	; (8003e30 <HAL_RCC_OscConfig+0x578>)
 8003d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d84:	4a2a      	ldr	r2, [pc, #168]	; (8003e30 <HAL_RCC_OscConfig+0x578>)
 8003d86:	f043 0301 	orr.w	r3, r3, #1
 8003d8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d8e:	e024      	b.n	8003dda <HAL_RCC_OscConfig+0x522>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	2b05      	cmp	r3, #5
 8003d96:	d110      	bne.n	8003dba <HAL_RCC_OscConfig+0x502>
 8003d98:	4b25      	ldr	r3, [pc, #148]	; (8003e30 <HAL_RCC_OscConfig+0x578>)
 8003d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d9e:	4a24      	ldr	r2, [pc, #144]	; (8003e30 <HAL_RCC_OscConfig+0x578>)
 8003da0:	f043 0304 	orr.w	r3, r3, #4
 8003da4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003da8:	4b21      	ldr	r3, [pc, #132]	; (8003e30 <HAL_RCC_OscConfig+0x578>)
 8003daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dae:	4a20      	ldr	r2, [pc, #128]	; (8003e30 <HAL_RCC_OscConfig+0x578>)
 8003db0:	f043 0301 	orr.w	r3, r3, #1
 8003db4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003db8:	e00f      	b.n	8003dda <HAL_RCC_OscConfig+0x522>
 8003dba:	4b1d      	ldr	r3, [pc, #116]	; (8003e30 <HAL_RCC_OscConfig+0x578>)
 8003dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dc0:	4a1b      	ldr	r2, [pc, #108]	; (8003e30 <HAL_RCC_OscConfig+0x578>)
 8003dc2:	f023 0301 	bic.w	r3, r3, #1
 8003dc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003dca:	4b19      	ldr	r3, [pc, #100]	; (8003e30 <HAL_RCC_OscConfig+0x578>)
 8003dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dd0:	4a17      	ldr	r2, [pc, #92]	; (8003e30 <HAL_RCC_OscConfig+0x578>)
 8003dd2:	f023 0304 	bic.w	r3, r3, #4
 8003dd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d016      	beq.n	8003e10 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003de2:	f7fd f941 	bl	8001068 <HAL_GetTick>
 8003de6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003de8:	e00a      	b.n	8003e00 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dea:	f7fd f93d 	bl	8001068 <HAL_GetTick>
 8003dee:	4602      	mov	r2, r0
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	1ad3      	subs	r3, r2, r3
 8003df4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d901      	bls.n	8003e00 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003dfc:	2303      	movs	r3, #3
 8003dfe:	e139      	b.n	8004074 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e00:	4b0b      	ldr	r3, [pc, #44]	; (8003e30 <HAL_RCC_OscConfig+0x578>)
 8003e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e06:	f003 0302 	and.w	r3, r3, #2
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d0ed      	beq.n	8003dea <HAL_RCC_OscConfig+0x532>
 8003e0e:	e01a      	b.n	8003e46 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e10:	f7fd f92a 	bl	8001068 <HAL_GetTick>
 8003e14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e16:	e00f      	b.n	8003e38 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e18:	f7fd f926 	bl	8001068 <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d906      	bls.n	8003e38 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e122      	b.n	8004074 <HAL_RCC_OscConfig+0x7bc>
 8003e2e:	bf00      	nop
 8003e30:	40021000 	.word	0x40021000
 8003e34:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e38:	4b90      	ldr	r3, [pc, #576]	; (800407c <HAL_RCC_OscConfig+0x7c4>)
 8003e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e3e:	f003 0302 	and.w	r3, r3, #2
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d1e8      	bne.n	8003e18 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e46:	7ffb      	ldrb	r3, [r7, #31]
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d105      	bne.n	8003e58 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e4c:	4b8b      	ldr	r3, [pc, #556]	; (800407c <HAL_RCC_OscConfig+0x7c4>)
 8003e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e50:	4a8a      	ldr	r2, [pc, #552]	; (800407c <HAL_RCC_OscConfig+0x7c4>)
 8003e52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e56:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	f000 8108 	beq.w	8004072 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	f040 80d0 	bne.w	800400c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003e6c:	4b83      	ldr	r3, [pc, #524]	; (800407c <HAL_RCC_OscConfig+0x7c4>)
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	f003 0203 	and.w	r2, r3, #3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d130      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8a:	3b01      	subs	r3, #1
 8003e8c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d127      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e9c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d11f      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003eac:	2a07      	cmp	r2, #7
 8003eae:	bf14      	ite	ne
 8003eb0:	2201      	movne	r2, #1
 8003eb2:	2200      	moveq	r2, #0
 8003eb4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d113      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ec4:	085b      	lsrs	r3, r3, #1
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d109      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed8:	085b      	lsrs	r3, r3, #1
 8003eda:	3b01      	subs	r3, #1
 8003edc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d06e      	beq.n	8003fc0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ee2:	69bb      	ldr	r3, [r7, #24]
 8003ee4:	2b0c      	cmp	r3, #12
 8003ee6:	d069      	beq.n	8003fbc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003ee8:	4b64      	ldr	r3, [pc, #400]	; (800407c <HAL_RCC_OscConfig+0x7c4>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d105      	bne.n	8003f00 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003ef4:	4b61      	ldr	r3, [pc, #388]	; (800407c <HAL_RCC_OscConfig+0x7c4>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d001      	beq.n	8003f04 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e0b7      	b.n	8004074 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003f04:	4b5d      	ldr	r3, [pc, #372]	; (800407c <HAL_RCC_OscConfig+0x7c4>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a5c      	ldr	r2, [pc, #368]	; (800407c <HAL_RCC_OscConfig+0x7c4>)
 8003f0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f0e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f10:	f7fd f8aa 	bl	8001068 <HAL_GetTick>
 8003f14:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f16:	e008      	b.n	8003f2a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f18:	f7fd f8a6 	bl	8001068 <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d901      	bls.n	8003f2a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e0a4      	b.n	8004074 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f2a:	4b54      	ldr	r3, [pc, #336]	; (800407c <HAL_RCC_OscConfig+0x7c4>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d1f0      	bne.n	8003f18 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f36:	4b51      	ldr	r3, [pc, #324]	; (800407c <HAL_RCC_OscConfig+0x7c4>)
 8003f38:	68da      	ldr	r2, [r3, #12]
 8003f3a:	4b51      	ldr	r3, [pc, #324]	; (8004080 <HAL_RCC_OscConfig+0x7c8>)
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003f46:	3a01      	subs	r2, #1
 8003f48:	0112      	lsls	r2, r2, #4
 8003f4a:	4311      	orrs	r1, r2
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003f50:	0212      	lsls	r2, r2, #8
 8003f52:	4311      	orrs	r1, r2
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003f58:	0852      	lsrs	r2, r2, #1
 8003f5a:	3a01      	subs	r2, #1
 8003f5c:	0552      	lsls	r2, r2, #21
 8003f5e:	4311      	orrs	r1, r2
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003f64:	0852      	lsrs	r2, r2, #1
 8003f66:	3a01      	subs	r2, #1
 8003f68:	0652      	lsls	r2, r2, #25
 8003f6a:	4311      	orrs	r1, r2
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f70:	0912      	lsrs	r2, r2, #4
 8003f72:	0452      	lsls	r2, r2, #17
 8003f74:	430a      	orrs	r2, r1
 8003f76:	4941      	ldr	r1, [pc, #260]	; (800407c <HAL_RCC_OscConfig+0x7c4>)
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003f7c:	4b3f      	ldr	r3, [pc, #252]	; (800407c <HAL_RCC_OscConfig+0x7c4>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a3e      	ldr	r2, [pc, #248]	; (800407c <HAL_RCC_OscConfig+0x7c4>)
 8003f82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f86:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f88:	4b3c      	ldr	r3, [pc, #240]	; (800407c <HAL_RCC_OscConfig+0x7c4>)
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	4a3b      	ldr	r2, [pc, #236]	; (800407c <HAL_RCC_OscConfig+0x7c4>)
 8003f8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f92:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f94:	f7fd f868 	bl	8001068 <HAL_GetTick>
 8003f98:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f9a:	e008      	b.n	8003fae <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f9c:	f7fd f864 	bl	8001068 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d901      	bls.n	8003fae <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e062      	b.n	8004074 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fae:	4b33      	ldr	r3, [pc, #204]	; (800407c <HAL_RCC_OscConfig+0x7c4>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d0f0      	beq.n	8003f9c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003fba:	e05a      	b.n	8004072 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e059      	b.n	8004074 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fc0:	4b2e      	ldr	r3, [pc, #184]	; (800407c <HAL_RCC_OscConfig+0x7c4>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d152      	bne.n	8004072 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003fcc:	4b2b      	ldr	r3, [pc, #172]	; (800407c <HAL_RCC_OscConfig+0x7c4>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a2a      	ldr	r2, [pc, #168]	; (800407c <HAL_RCC_OscConfig+0x7c4>)
 8003fd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fd6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003fd8:	4b28      	ldr	r3, [pc, #160]	; (800407c <HAL_RCC_OscConfig+0x7c4>)
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	4a27      	ldr	r2, [pc, #156]	; (800407c <HAL_RCC_OscConfig+0x7c4>)
 8003fde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fe2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003fe4:	f7fd f840 	bl	8001068 <HAL_GetTick>
 8003fe8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fea:	e008      	b.n	8003ffe <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fec:	f7fd f83c 	bl	8001068 <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d901      	bls.n	8003ffe <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e03a      	b.n	8004074 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ffe:	4b1f      	ldr	r3, [pc, #124]	; (800407c <HAL_RCC_OscConfig+0x7c4>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d0f0      	beq.n	8003fec <HAL_RCC_OscConfig+0x734>
 800400a:	e032      	b.n	8004072 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800400c:	69bb      	ldr	r3, [r7, #24]
 800400e:	2b0c      	cmp	r3, #12
 8004010:	d02d      	beq.n	800406e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004012:	4b1a      	ldr	r3, [pc, #104]	; (800407c <HAL_RCC_OscConfig+0x7c4>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a19      	ldr	r2, [pc, #100]	; (800407c <HAL_RCC_OscConfig+0x7c4>)
 8004018:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800401c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800401e:	4b17      	ldr	r3, [pc, #92]	; (800407c <HAL_RCC_OscConfig+0x7c4>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d105      	bne.n	8004036 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800402a:	4b14      	ldr	r3, [pc, #80]	; (800407c <HAL_RCC_OscConfig+0x7c4>)
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	4a13      	ldr	r2, [pc, #76]	; (800407c <HAL_RCC_OscConfig+0x7c4>)
 8004030:	f023 0303 	bic.w	r3, r3, #3
 8004034:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004036:	4b11      	ldr	r3, [pc, #68]	; (800407c <HAL_RCC_OscConfig+0x7c4>)
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	4a10      	ldr	r2, [pc, #64]	; (800407c <HAL_RCC_OscConfig+0x7c4>)
 800403c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004040:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004044:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004046:	f7fd f80f 	bl	8001068 <HAL_GetTick>
 800404a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800404c:	e008      	b.n	8004060 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800404e:	f7fd f80b 	bl	8001068 <HAL_GetTick>
 8004052:	4602      	mov	r2, r0
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	2b02      	cmp	r3, #2
 800405a:	d901      	bls.n	8004060 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e009      	b.n	8004074 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004060:	4b06      	ldr	r3, [pc, #24]	; (800407c <HAL_RCC_OscConfig+0x7c4>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d1f0      	bne.n	800404e <HAL_RCC_OscConfig+0x796>
 800406c:	e001      	b.n	8004072 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e000      	b.n	8004074 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8004072:	2300      	movs	r3, #0
}
 8004074:	4618      	mov	r0, r3
 8004076:	3720      	adds	r7, #32
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}
 800407c:	40021000 	.word	0x40021000
 8004080:	f99d808c 	.word	0xf99d808c

08004084 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d101      	bne.n	8004098 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e0c8      	b.n	800422a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004098:	4b66      	ldr	r3, [pc, #408]	; (8004234 <HAL_RCC_ClockConfig+0x1b0>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0307 	and.w	r3, r3, #7
 80040a0:	683a      	ldr	r2, [r7, #0]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d910      	bls.n	80040c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040a6:	4b63      	ldr	r3, [pc, #396]	; (8004234 <HAL_RCC_ClockConfig+0x1b0>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f023 0207 	bic.w	r2, r3, #7
 80040ae:	4961      	ldr	r1, [pc, #388]	; (8004234 <HAL_RCC_ClockConfig+0x1b0>)
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040b6:	4b5f      	ldr	r3, [pc, #380]	; (8004234 <HAL_RCC_ClockConfig+0x1b0>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0307 	and.w	r3, r3, #7
 80040be:	683a      	ldr	r2, [r7, #0]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d001      	beq.n	80040c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e0b0      	b.n	800422a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0301 	and.w	r3, r3, #1
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d04c      	beq.n	800416e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	2b03      	cmp	r3, #3
 80040da:	d107      	bne.n	80040ec <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040dc:	4b56      	ldr	r3, [pc, #344]	; (8004238 <HAL_RCC_ClockConfig+0x1b4>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d121      	bne.n	800412c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e09e      	b.n	800422a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	d107      	bne.n	8004104 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040f4:	4b50      	ldr	r3, [pc, #320]	; (8004238 <HAL_RCC_ClockConfig+0x1b4>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d115      	bne.n	800412c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e092      	b.n	800422a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d107      	bne.n	800411c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800410c:	4b4a      	ldr	r3, [pc, #296]	; (8004238 <HAL_RCC_ClockConfig+0x1b4>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0302 	and.w	r3, r3, #2
 8004114:	2b00      	cmp	r3, #0
 8004116:	d109      	bne.n	800412c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e086      	b.n	800422a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800411c:	4b46      	ldr	r3, [pc, #280]	; (8004238 <HAL_RCC_ClockConfig+0x1b4>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004124:	2b00      	cmp	r3, #0
 8004126:	d101      	bne.n	800412c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e07e      	b.n	800422a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800412c:	4b42      	ldr	r3, [pc, #264]	; (8004238 <HAL_RCC_ClockConfig+0x1b4>)
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	f023 0203 	bic.w	r2, r3, #3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	493f      	ldr	r1, [pc, #252]	; (8004238 <HAL_RCC_ClockConfig+0x1b4>)
 800413a:	4313      	orrs	r3, r2
 800413c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800413e:	f7fc ff93 	bl	8001068 <HAL_GetTick>
 8004142:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004144:	e00a      	b.n	800415c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004146:	f7fc ff8f 	bl	8001068 <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	f241 3288 	movw	r2, #5000	; 0x1388
 8004154:	4293      	cmp	r3, r2
 8004156:	d901      	bls.n	800415c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004158:	2303      	movs	r3, #3
 800415a:	e066      	b.n	800422a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800415c:	4b36      	ldr	r3, [pc, #216]	; (8004238 <HAL_RCC_ClockConfig+0x1b4>)
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	f003 020c 	and.w	r2, r3, #12
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	429a      	cmp	r2, r3
 800416c:	d1eb      	bne.n	8004146 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0302 	and.w	r3, r3, #2
 8004176:	2b00      	cmp	r3, #0
 8004178:	d008      	beq.n	800418c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800417a:	4b2f      	ldr	r3, [pc, #188]	; (8004238 <HAL_RCC_ClockConfig+0x1b4>)
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	492c      	ldr	r1, [pc, #176]	; (8004238 <HAL_RCC_ClockConfig+0x1b4>)
 8004188:	4313      	orrs	r3, r2
 800418a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800418c:	4b29      	ldr	r3, [pc, #164]	; (8004234 <HAL_RCC_ClockConfig+0x1b0>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0307 	and.w	r3, r3, #7
 8004194:	683a      	ldr	r2, [r7, #0]
 8004196:	429a      	cmp	r2, r3
 8004198:	d210      	bcs.n	80041bc <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800419a:	4b26      	ldr	r3, [pc, #152]	; (8004234 <HAL_RCC_ClockConfig+0x1b0>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f023 0207 	bic.w	r2, r3, #7
 80041a2:	4924      	ldr	r1, [pc, #144]	; (8004234 <HAL_RCC_ClockConfig+0x1b0>)
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041aa:	4b22      	ldr	r3, [pc, #136]	; (8004234 <HAL_RCC_ClockConfig+0x1b0>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0307 	and.w	r3, r3, #7
 80041b2:	683a      	ldr	r2, [r7, #0]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d001      	beq.n	80041bc <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e036      	b.n	800422a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0304 	and.w	r3, r3, #4
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d008      	beq.n	80041da <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041c8:	4b1b      	ldr	r3, [pc, #108]	; (8004238 <HAL_RCC_ClockConfig+0x1b4>)
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	4918      	ldr	r1, [pc, #96]	; (8004238 <HAL_RCC_ClockConfig+0x1b4>)
 80041d6:	4313      	orrs	r3, r2
 80041d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0308 	and.w	r3, r3, #8
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d009      	beq.n	80041fa <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041e6:	4b14      	ldr	r3, [pc, #80]	; (8004238 <HAL_RCC_ClockConfig+0x1b4>)
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	00db      	lsls	r3, r3, #3
 80041f4:	4910      	ldr	r1, [pc, #64]	; (8004238 <HAL_RCC_ClockConfig+0x1b4>)
 80041f6:	4313      	orrs	r3, r2
 80041f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80041fa:	f000 f825 	bl	8004248 <HAL_RCC_GetSysClockFreq>
 80041fe:	4601      	mov	r1, r0
 8004200:	4b0d      	ldr	r3, [pc, #52]	; (8004238 <HAL_RCC_ClockConfig+0x1b4>)
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	091b      	lsrs	r3, r3, #4
 8004206:	f003 030f 	and.w	r3, r3, #15
 800420a:	4a0c      	ldr	r2, [pc, #48]	; (800423c <HAL_RCC_ClockConfig+0x1b8>)
 800420c:	5cd3      	ldrb	r3, [r2, r3]
 800420e:	f003 031f 	and.w	r3, r3, #31
 8004212:	fa21 f303 	lsr.w	r3, r1, r3
 8004216:	4a0a      	ldr	r2, [pc, #40]	; (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 8004218:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800421a:	4b0a      	ldr	r3, [pc, #40]	; (8004244 <HAL_RCC_ClockConfig+0x1c0>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4618      	mov	r0, r3
 8004220:	f7fc fed2 	bl	8000fc8 <HAL_InitTick>
 8004224:	4603      	mov	r3, r0
 8004226:	72fb      	strb	r3, [r7, #11]

  return status;
 8004228:	7afb      	ldrb	r3, [r7, #11]
}
 800422a:	4618      	mov	r0, r3
 800422c:	3710      	adds	r7, #16
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	40022000 	.word	0x40022000
 8004238:	40021000 	.word	0x40021000
 800423c:	080069ac 	.word	0x080069ac
 8004240:	20000010 	.word	0x20000010
 8004244:	20000014 	.word	0x20000014

08004248 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004248:	b480      	push	{r7}
 800424a:	b089      	sub	sp, #36	; 0x24
 800424c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800424e:	2300      	movs	r3, #0
 8004250:	61fb      	str	r3, [r7, #28]
 8004252:	2300      	movs	r3, #0
 8004254:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004256:	4b3d      	ldr	r3, [pc, #244]	; (800434c <HAL_RCC_GetSysClockFreq+0x104>)
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f003 030c 	and.w	r3, r3, #12
 800425e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004260:	4b3a      	ldr	r3, [pc, #232]	; (800434c <HAL_RCC_GetSysClockFreq+0x104>)
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	f003 0303 	and.w	r3, r3, #3
 8004268:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d005      	beq.n	800427c <HAL_RCC_GetSysClockFreq+0x34>
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	2b0c      	cmp	r3, #12
 8004274:	d121      	bne.n	80042ba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2b01      	cmp	r3, #1
 800427a:	d11e      	bne.n	80042ba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800427c:	4b33      	ldr	r3, [pc, #204]	; (800434c <HAL_RCC_GetSysClockFreq+0x104>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0308 	and.w	r3, r3, #8
 8004284:	2b00      	cmp	r3, #0
 8004286:	d107      	bne.n	8004298 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004288:	4b30      	ldr	r3, [pc, #192]	; (800434c <HAL_RCC_GetSysClockFreq+0x104>)
 800428a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800428e:	0a1b      	lsrs	r3, r3, #8
 8004290:	f003 030f 	and.w	r3, r3, #15
 8004294:	61fb      	str	r3, [r7, #28]
 8004296:	e005      	b.n	80042a4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004298:	4b2c      	ldr	r3, [pc, #176]	; (800434c <HAL_RCC_GetSysClockFreq+0x104>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	091b      	lsrs	r3, r3, #4
 800429e:	f003 030f 	and.w	r3, r3, #15
 80042a2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80042a4:	4a2a      	ldr	r2, [pc, #168]	; (8004350 <HAL_RCC_GetSysClockFreq+0x108>)
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042ac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d10d      	bne.n	80042d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80042b8:	e00a      	b.n	80042d0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	2b04      	cmp	r3, #4
 80042be:	d102      	bne.n	80042c6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80042c0:	4b24      	ldr	r3, [pc, #144]	; (8004354 <HAL_RCC_GetSysClockFreq+0x10c>)
 80042c2:	61bb      	str	r3, [r7, #24]
 80042c4:	e004      	b.n	80042d0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	2b08      	cmp	r3, #8
 80042ca:	d101      	bne.n	80042d0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80042cc:	4b22      	ldr	r3, [pc, #136]	; (8004358 <HAL_RCC_GetSysClockFreq+0x110>)
 80042ce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	2b0c      	cmp	r3, #12
 80042d4:	d133      	bne.n	800433e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80042d6:	4b1d      	ldr	r3, [pc, #116]	; (800434c <HAL_RCC_GetSysClockFreq+0x104>)
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	f003 0303 	and.w	r3, r3, #3
 80042de:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d002      	beq.n	80042ec <HAL_RCC_GetSysClockFreq+0xa4>
 80042e6:	2b03      	cmp	r3, #3
 80042e8:	d003      	beq.n	80042f2 <HAL_RCC_GetSysClockFreq+0xaa>
 80042ea:	e005      	b.n	80042f8 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80042ec:	4b19      	ldr	r3, [pc, #100]	; (8004354 <HAL_RCC_GetSysClockFreq+0x10c>)
 80042ee:	617b      	str	r3, [r7, #20]
      break;
 80042f0:	e005      	b.n	80042fe <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80042f2:	4b19      	ldr	r3, [pc, #100]	; (8004358 <HAL_RCC_GetSysClockFreq+0x110>)
 80042f4:	617b      	str	r3, [r7, #20]
      break;
 80042f6:	e002      	b.n	80042fe <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80042f8:	69fb      	ldr	r3, [r7, #28]
 80042fa:	617b      	str	r3, [r7, #20]
      break;
 80042fc:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80042fe:	4b13      	ldr	r3, [pc, #76]	; (800434c <HAL_RCC_GetSysClockFreq+0x104>)
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	091b      	lsrs	r3, r3, #4
 8004304:	f003 0307 	and.w	r3, r3, #7
 8004308:	3301      	adds	r3, #1
 800430a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800430c:	4b0f      	ldr	r3, [pc, #60]	; (800434c <HAL_RCC_GetSysClockFreq+0x104>)
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	0a1b      	lsrs	r3, r3, #8
 8004312:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004316:	697a      	ldr	r2, [r7, #20]
 8004318:	fb02 f203 	mul.w	r2, r2, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004322:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004324:	4b09      	ldr	r3, [pc, #36]	; (800434c <HAL_RCC_GetSysClockFreq+0x104>)
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	0e5b      	lsrs	r3, r3, #25
 800432a:	f003 0303 	and.w	r3, r3, #3
 800432e:	3301      	adds	r3, #1
 8004330:	005b      	lsls	r3, r3, #1
 8004332:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004334:	697a      	ldr	r2, [r7, #20]
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	fbb2 f3f3 	udiv	r3, r2, r3
 800433c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800433e:	69bb      	ldr	r3, [r7, #24]
}
 8004340:	4618      	mov	r0, r3
 8004342:	3724      	adds	r7, #36	; 0x24
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr
 800434c:	40021000 	.word	0x40021000
 8004350:	080069c4 	.word	0x080069c4
 8004354:	00f42400 	.word	0x00f42400
 8004358:	007a1200 	.word	0x007a1200

0800435c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800435c:	b480      	push	{r7}
 800435e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004360:	4b03      	ldr	r3, [pc, #12]	; (8004370 <HAL_RCC_GetHCLKFreq+0x14>)
 8004362:	681b      	ldr	r3, [r3, #0]
}
 8004364:	4618      	mov	r0, r3
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr
 800436e:	bf00      	nop
 8004370:	20000010 	.word	0x20000010

08004374 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004378:	f7ff fff0 	bl	800435c <HAL_RCC_GetHCLKFreq>
 800437c:	4601      	mov	r1, r0
 800437e:	4b06      	ldr	r3, [pc, #24]	; (8004398 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	0a1b      	lsrs	r3, r3, #8
 8004384:	f003 0307 	and.w	r3, r3, #7
 8004388:	4a04      	ldr	r2, [pc, #16]	; (800439c <HAL_RCC_GetPCLK1Freq+0x28>)
 800438a:	5cd3      	ldrb	r3, [r2, r3]
 800438c:	f003 031f 	and.w	r3, r3, #31
 8004390:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004394:	4618      	mov	r0, r3
 8004396:	bd80      	pop	{r7, pc}
 8004398:	40021000 	.word	0x40021000
 800439c:	080069bc 	.word	0x080069bc

080043a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80043a4:	f7ff ffda 	bl	800435c <HAL_RCC_GetHCLKFreq>
 80043a8:	4601      	mov	r1, r0
 80043aa:	4b06      	ldr	r3, [pc, #24]	; (80043c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	0adb      	lsrs	r3, r3, #11
 80043b0:	f003 0307 	and.w	r3, r3, #7
 80043b4:	4a04      	ldr	r2, [pc, #16]	; (80043c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80043b6:	5cd3      	ldrb	r3, [r2, r3]
 80043b8:	f003 031f 	and.w	r3, r3, #31
 80043bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	40021000 	.word	0x40021000
 80043c8:	080069bc 	.word	0x080069bc

080043cc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b086      	sub	sp, #24
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80043d4:	2300      	movs	r3, #0
 80043d6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80043d8:	4b2a      	ldr	r3, [pc, #168]	; (8004484 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d003      	beq.n	80043ec <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80043e4:	f7ff fa04 	bl	80037f0 <HAL_PWREx_GetVoltageRange>
 80043e8:	6178      	str	r0, [r7, #20]
 80043ea:	e014      	b.n	8004416 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80043ec:	4b25      	ldr	r3, [pc, #148]	; (8004484 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043f0:	4a24      	ldr	r2, [pc, #144]	; (8004484 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043f6:	6593      	str	r3, [r2, #88]	; 0x58
 80043f8:	4b22      	ldr	r3, [pc, #136]	; (8004484 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004400:	60fb      	str	r3, [r7, #12]
 8004402:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004404:	f7ff f9f4 	bl	80037f0 <HAL_PWREx_GetVoltageRange>
 8004408:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800440a:	4b1e      	ldr	r3, [pc, #120]	; (8004484 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800440c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800440e:	4a1d      	ldr	r2, [pc, #116]	; (8004484 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004410:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004414:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800441c:	d10b      	bne.n	8004436 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2b80      	cmp	r3, #128	; 0x80
 8004422:	d919      	bls.n	8004458 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2ba0      	cmp	r3, #160	; 0xa0
 8004428:	d902      	bls.n	8004430 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800442a:	2302      	movs	r3, #2
 800442c:	613b      	str	r3, [r7, #16]
 800442e:	e013      	b.n	8004458 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004430:	2301      	movs	r3, #1
 8004432:	613b      	str	r3, [r7, #16]
 8004434:	e010      	b.n	8004458 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2b80      	cmp	r3, #128	; 0x80
 800443a:	d902      	bls.n	8004442 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800443c:	2303      	movs	r3, #3
 800443e:	613b      	str	r3, [r7, #16]
 8004440:	e00a      	b.n	8004458 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2b80      	cmp	r3, #128	; 0x80
 8004446:	d102      	bne.n	800444e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004448:	2302      	movs	r3, #2
 800444a:	613b      	str	r3, [r7, #16]
 800444c:	e004      	b.n	8004458 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2b70      	cmp	r3, #112	; 0x70
 8004452:	d101      	bne.n	8004458 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004454:	2301      	movs	r3, #1
 8004456:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004458:	4b0b      	ldr	r3, [pc, #44]	; (8004488 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f023 0207 	bic.w	r2, r3, #7
 8004460:	4909      	ldr	r1, [pc, #36]	; (8004488 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	4313      	orrs	r3, r2
 8004466:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004468:	4b07      	ldr	r3, [pc, #28]	; (8004488 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0307 	and.w	r3, r3, #7
 8004470:	693a      	ldr	r2, [r7, #16]
 8004472:	429a      	cmp	r2, r3
 8004474:	d001      	beq.n	800447a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e000      	b.n	800447c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800447a:	2300      	movs	r3, #0
}
 800447c:	4618      	mov	r0, r3
 800447e:	3718      	adds	r7, #24
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}
 8004484:	40021000 	.word	0x40021000
 8004488:	40022000 	.word	0x40022000

0800448c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b086      	sub	sp, #24
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004494:	2300      	movs	r3, #0
 8004496:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004498:	2300      	movs	r3, #0
 800449a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d03f      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044b0:	d01c      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x60>
 80044b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044b6:	d802      	bhi.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x32>
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d00e      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80044bc:	e01f      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x72>
 80044be:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80044c2:	d003      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x40>
 80044c4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80044c8:	d01c      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80044ca:	e018      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80044cc:	4b85      	ldr	r3, [pc, #532]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	4a84      	ldr	r2, [pc, #528]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80044d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044d6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80044d8:	e015      	b.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	3304      	adds	r3, #4
 80044de:	2100      	movs	r1, #0
 80044e0:	4618      	mov	r0, r3
 80044e2:	f000 fab9 	bl	8004a58 <RCCEx_PLLSAI1_Config>
 80044e6:	4603      	mov	r3, r0
 80044e8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80044ea:	e00c      	b.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	3320      	adds	r3, #32
 80044f0:	2100      	movs	r1, #0
 80044f2:	4618      	mov	r0, r3
 80044f4:	f000 fba0 	bl	8004c38 <RCCEx_PLLSAI2_Config>
 80044f8:	4603      	mov	r3, r0
 80044fa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80044fc:	e003      	b.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	74fb      	strb	r3, [r7, #19]
      break;
 8004502:	e000      	b.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8004504:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004506:	7cfb      	ldrb	r3, [r7, #19]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d10b      	bne.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800450c:	4b75      	ldr	r3, [pc, #468]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800450e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004512:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800451a:	4972      	ldr	r1, [pc, #456]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800451c:	4313      	orrs	r3, r2
 800451e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004522:	e001      	b.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004524:	7cfb      	ldrb	r3, [r7, #19]
 8004526:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004530:	2b00      	cmp	r3, #0
 8004532:	d03f      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004538:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800453c:	d01c      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800453e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004542:	d802      	bhi.n	800454a <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8004544:	2b00      	cmp	r3, #0
 8004546:	d00e      	beq.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8004548:	e01f      	b.n	800458a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800454a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800454e:	d003      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8004550:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004554:	d01c      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8004556:	e018      	b.n	800458a <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004558:	4b62      	ldr	r3, [pc, #392]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	4a61      	ldr	r2, [pc, #388]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800455e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004562:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004564:	e015      	b.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	3304      	adds	r3, #4
 800456a:	2100      	movs	r1, #0
 800456c:	4618      	mov	r0, r3
 800456e:	f000 fa73 	bl	8004a58 <RCCEx_PLLSAI1_Config>
 8004572:	4603      	mov	r3, r0
 8004574:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004576:	e00c      	b.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	3320      	adds	r3, #32
 800457c:	2100      	movs	r1, #0
 800457e:	4618      	mov	r0, r3
 8004580:	f000 fb5a 	bl	8004c38 <RCCEx_PLLSAI2_Config>
 8004584:	4603      	mov	r3, r0
 8004586:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004588:	e003      	b.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	74fb      	strb	r3, [r7, #19]
      break;
 800458e:	e000      	b.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004590:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004592:	7cfb      	ldrb	r3, [r7, #19]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d10b      	bne.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004598:	4b52      	ldr	r3, [pc, #328]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800459a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800459e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045a6:	494f      	ldr	r1, [pc, #316]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80045a8:	4313      	orrs	r3, r2
 80045aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80045ae:	e001      	b.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045b0:	7cfb      	ldrb	r3, [r7, #19]
 80045b2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	f000 80a0 	beq.w	8004702 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045c2:	2300      	movs	r3, #0
 80045c4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80045c6:	4b47      	ldr	r3, [pc, #284]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80045c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d101      	bne.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80045d2:	2301      	movs	r3, #1
 80045d4:	e000      	b.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80045d6:	2300      	movs	r3, #0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d00d      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045dc:	4b41      	ldr	r3, [pc, #260]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80045de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045e0:	4a40      	ldr	r2, [pc, #256]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80045e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045e6:	6593      	str	r3, [r2, #88]	; 0x58
 80045e8:	4b3e      	ldr	r3, [pc, #248]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80045ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045f0:	60bb      	str	r3, [r7, #8]
 80045f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045f4:	2301      	movs	r3, #1
 80045f6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045f8:	4b3b      	ldr	r3, [pc, #236]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a3a      	ldr	r2, [pc, #232]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80045fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004602:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004604:	f7fc fd30 	bl	8001068 <HAL_GetTick>
 8004608:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800460a:	e009      	b.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800460c:	f7fc fd2c 	bl	8001068 <HAL_GetTick>
 8004610:	4602      	mov	r2, r0
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	2b02      	cmp	r3, #2
 8004618:	d902      	bls.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 800461a:	2303      	movs	r3, #3
 800461c:	74fb      	strb	r3, [r7, #19]
        break;
 800461e:	e005      	b.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004620:	4b31      	ldr	r3, [pc, #196]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004628:	2b00      	cmp	r3, #0
 800462a:	d0ef      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 800462c:	7cfb      	ldrb	r3, [r7, #19]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d15c      	bne.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004632:	4b2c      	ldr	r3, [pc, #176]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004634:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004638:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800463c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d01f      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800464a:	697a      	ldr	r2, [r7, #20]
 800464c:	429a      	cmp	r2, r3
 800464e:	d019      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004650:	4b24      	ldr	r3, [pc, #144]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004656:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800465a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800465c:	4b21      	ldr	r3, [pc, #132]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800465e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004662:	4a20      	ldr	r2, [pc, #128]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004664:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004668:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800466c:	4b1d      	ldr	r3, [pc, #116]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800466e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004672:	4a1c      	ldr	r2, [pc, #112]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004674:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004678:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800467c:	4a19      	ldr	r2, [pc, #100]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	f003 0301 	and.w	r3, r3, #1
 800468a:	2b00      	cmp	r3, #0
 800468c:	d016      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800468e:	f7fc fceb 	bl	8001068 <HAL_GetTick>
 8004692:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004694:	e00b      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004696:	f7fc fce7 	bl	8001068 <HAL_GetTick>
 800469a:	4602      	mov	r2, r0
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d902      	bls.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	74fb      	strb	r3, [r7, #19]
            break;
 80046ac:	e006      	b.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046ae:	4b0d      	ldr	r3, [pc, #52]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80046b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046b4:	f003 0302 	and.w	r3, r3, #2
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d0ec      	beq.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80046bc:	7cfb      	ldrb	r3, [r7, #19]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d10c      	bne.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046c2:	4b08      	ldr	r3, [pc, #32]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80046c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046d2:	4904      	ldr	r1, [pc, #16]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80046d4:	4313      	orrs	r3, r2
 80046d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80046da:	e009      	b.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80046dc:	7cfb      	ldrb	r3, [r7, #19]
 80046de:	74bb      	strb	r3, [r7, #18]
 80046e0:	e006      	b.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80046e2:	bf00      	nop
 80046e4:	40021000 	.word	0x40021000
 80046e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046ec:	7cfb      	ldrb	r3, [r7, #19]
 80046ee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046f0:	7c7b      	ldrb	r3, [r7, #17]
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d105      	bne.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046f6:	4b9e      	ldr	r3, [pc, #632]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80046f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046fa:	4a9d      	ldr	r2, [pc, #628]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80046fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004700:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0301 	and.w	r3, r3, #1
 800470a:	2b00      	cmp	r3, #0
 800470c:	d00a      	beq.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800470e:	4b98      	ldr	r3, [pc, #608]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004710:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004714:	f023 0203 	bic.w	r2, r3, #3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800471c:	4994      	ldr	r1, [pc, #592]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800471e:	4313      	orrs	r3, r2
 8004720:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 0302 	and.w	r3, r3, #2
 800472c:	2b00      	cmp	r3, #0
 800472e:	d00a      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004730:	4b8f      	ldr	r3, [pc, #572]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004736:	f023 020c 	bic.w	r2, r3, #12
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800473e:	498c      	ldr	r1, [pc, #560]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004740:	4313      	orrs	r3, r2
 8004742:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0304 	and.w	r3, r3, #4
 800474e:	2b00      	cmp	r3, #0
 8004750:	d00a      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004752:	4b87      	ldr	r3, [pc, #540]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004754:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004758:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004760:	4983      	ldr	r1, [pc, #524]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004762:	4313      	orrs	r3, r2
 8004764:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0308 	and.w	r3, r3, #8
 8004770:	2b00      	cmp	r3, #0
 8004772:	d00a      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004774:	4b7e      	ldr	r3, [pc, #504]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800477a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004782:	497b      	ldr	r1, [pc, #492]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004784:	4313      	orrs	r3, r2
 8004786:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 0310 	and.w	r3, r3, #16
 8004792:	2b00      	cmp	r3, #0
 8004794:	d00a      	beq.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004796:	4b76      	ldr	r3, [pc, #472]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004798:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800479c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047a4:	4972      	ldr	r1, [pc, #456]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80047a6:	4313      	orrs	r3, r2
 80047a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0320 	and.w	r3, r3, #32
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d00a      	beq.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80047b8:	4b6d      	ldr	r3, [pc, #436]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80047ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047be:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047c6:	496a      	ldr	r1, [pc, #424]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80047c8:	4313      	orrs	r3, r2
 80047ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d00a      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80047da:	4b65      	ldr	r3, [pc, #404]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80047dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047e0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047e8:	4961      	ldr	r1, [pc, #388]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80047ea:	4313      	orrs	r3, r2
 80047ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d00a      	beq.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80047fc:	4b5c      	ldr	r3, [pc, #368]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80047fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004802:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800480a:	4959      	ldr	r1, [pc, #356]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800480c:	4313      	orrs	r3, r2
 800480e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800481a:	2b00      	cmp	r3, #0
 800481c:	d00a      	beq.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800481e:	4b54      	ldr	r3, [pc, #336]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004820:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004824:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800482c:	4950      	ldr	r1, [pc, #320]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800482e:	4313      	orrs	r3, r2
 8004830:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800483c:	2b00      	cmp	r3, #0
 800483e:	d00a      	beq.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004840:	4b4b      	ldr	r3, [pc, #300]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004846:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800484e:	4948      	ldr	r1, [pc, #288]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004850:	4313      	orrs	r3, r2
 8004852:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800485e:	2b00      	cmp	r3, #0
 8004860:	d00a      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004862:	4b43      	ldr	r3, [pc, #268]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004868:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004870:	493f      	ldr	r1, [pc, #252]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004872:	4313      	orrs	r3, r2
 8004874:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004880:	2b00      	cmp	r3, #0
 8004882:	d028      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004884:	4b3a      	ldr	r3, [pc, #232]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800488a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004892:	4937      	ldr	r1, [pc, #220]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004894:	4313      	orrs	r3, r2
 8004896:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800489e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048a2:	d106      	bne.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048a4:	4b32      	ldr	r3, [pc, #200]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	4a31      	ldr	r2, [pc, #196]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80048aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048ae:	60d3      	str	r3, [r2, #12]
 80048b0:	e011      	b.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80048ba:	d10c      	bne.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	3304      	adds	r3, #4
 80048c0:	2101      	movs	r1, #1
 80048c2:	4618      	mov	r0, r3
 80048c4:	f000 f8c8 	bl	8004a58 <RCCEx_PLLSAI1_Config>
 80048c8:	4603      	mov	r3, r0
 80048ca:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80048cc:	7cfb      	ldrb	r3, [r7, #19]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d001      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 80048d2:	7cfb      	ldrb	r3, [r7, #19]
 80048d4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d028      	beq.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80048e2:	4b23      	ldr	r3, [pc, #140]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80048e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048e8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048f0:	491f      	ldr	r1, [pc, #124]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004900:	d106      	bne.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004902:	4b1b      	ldr	r3, [pc, #108]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	4a1a      	ldr	r2, [pc, #104]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004908:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800490c:	60d3      	str	r3, [r2, #12]
 800490e:	e011      	b.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004914:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004918:	d10c      	bne.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	3304      	adds	r3, #4
 800491e:	2101      	movs	r1, #1
 8004920:	4618      	mov	r0, r3
 8004922:	f000 f899 	bl	8004a58 <RCCEx_PLLSAI1_Config>
 8004926:	4603      	mov	r3, r0
 8004928:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800492a:	7cfb      	ldrb	r3, [r7, #19]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d001      	beq.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8004930:	7cfb      	ldrb	r3, [r7, #19]
 8004932:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800493c:	2b00      	cmp	r3, #0
 800493e:	d02b      	beq.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004940:	4b0b      	ldr	r3, [pc, #44]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004946:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800494e:	4908      	ldr	r1, [pc, #32]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004950:	4313      	orrs	r3, r2
 8004952:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800495a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800495e:	d109      	bne.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004960:	4b03      	ldr	r3, [pc, #12]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	4a02      	ldr	r2, [pc, #8]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004966:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800496a:	60d3      	str	r3, [r2, #12]
 800496c:	e014      	b.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800496e:	bf00      	nop
 8004970:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004978:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800497c:	d10c      	bne.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	3304      	adds	r3, #4
 8004982:	2101      	movs	r1, #1
 8004984:	4618      	mov	r0, r3
 8004986:	f000 f867 	bl	8004a58 <RCCEx_PLLSAI1_Config>
 800498a:	4603      	mov	r3, r0
 800498c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800498e:	7cfb      	ldrb	r3, [r7, #19]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d001      	beq.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8004994:	7cfb      	ldrb	r3, [r7, #19]
 8004996:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d02f      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80049a4:	4b2b      	ldr	r3, [pc, #172]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80049a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049aa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049b2:	4928      	ldr	r1, [pc, #160]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80049b4:	4313      	orrs	r3, r2
 80049b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049c2:	d10d      	bne.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	3304      	adds	r3, #4
 80049c8:	2102      	movs	r1, #2
 80049ca:	4618      	mov	r0, r3
 80049cc:	f000 f844 	bl	8004a58 <RCCEx_PLLSAI1_Config>
 80049d0:	4603      	mov	r3, r0
 80049d2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80049d4:	7cfb      	ldrb	r3, [r7, #19]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d014      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80049da:	7cfb      	ldrb	r3, [r7, #19]
 80049dc:	74bb      	strb	r3, [r7, #18]
 80049de:	e011      	b.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049e8:	d10c      	bne.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	3320      	adds	r3, #32
 80049ee:	2102      	movs	r1, #2
 80049f0:	4618      	mov	r0, r3
 80049f2:	f000 f921 	bl	8004c38 <RCCEx_PLLSAI2_Config>
 80049f6:	4603      	mov	r3, r0
 80049f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80049fa:	7cfb      	ldrb	r3, [r7, #19]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d001      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8004a00:	7cfb      	ldrb	r3, [r7, #19]
 8004a02:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d00a      	beq.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004a10:	4b10      	ldr	r3, [pc, #64]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a16:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a1e:	490d      	ldr	r1, [pc, #52]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a20:	4313      	orrs	r3, r2
 8004a22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d00b      	beq.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004a32:	4b08      	ldr	r3, [pc, #32]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a38:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a42:	4904      	ldr	r1, [pc, #16]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a44:	4313      	orrs	r3, r2
 8004a46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004a4a:	7cbb      	ldrb	r3, [r7, #18]
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3718      	adds	r7, #24
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	40021000 	.word	0x40021000

08004a58 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b084      	sub	sp, #16
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a62:	2300      	movs	r3, #0
 8004a64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004a66:	4b73      	ldr	r3, [pc, #460]	; (8004c34 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	f003 0303 	and.w	r3, r3, #3
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d018      	beq.n	8004aa4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004a72:	4b70      	ldr	r3, [pc, #448]	; (8004c34 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	f003 0203 	and.w	r2, r3, #3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d10d      	bne.n	8004a9e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
       ||
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d009      	beq.n	8004a9e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004a8a:	4b6a      	ldr	r3, [pc, #424]	; (8004c34 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	091b      	lsrs	r3, r3, #4
 8004a90:	f003 0307 	and.w	r3, r3, #7
 8004a94:	1c5a      	adds	r2, r3, #1
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	685b      	ldr	r3, [r3, #4]
       ||
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d044      	beq.n	8004b28 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	73fb      	strb	r3, [r7, #15]
 8004aa2:	e041      	b.n	8004b28 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2b02      	cmp	r3, #2
 8004aaa:	d00c      	beq.n	8004ac6 <RCCEx_PLLSAI1_Config+0x6e>
 8004aac:	2b03      	cmp	r3, #3
 8004aae:	d013      	beq.n	8004ad8 <RCCEx_PLLSAI1_Config+0x80>
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d120      	bne.n	8004af6 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004ab4:	4b5f      	ldr	r3, [pc, #380]	; (8004c34 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0302 	and.w	r3, r3, #2
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d11d      	bne.n	8004afc <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ac4:	e01a      	b.n	8004afc <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004ac6:	4b5b      	ldr	r3, [pc, #364]	; (8004c34 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d116      	bne.n	8004b00 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ad6:	e013      	b.n	8004b00 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004ad8:	4b56      	ldr	r3, [pc, #344]	; (8004c34 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d10f      	bne.n	8004b04 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004ae4:	4b53      	ldr	r3, [pc, #332]	; (8004c34 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d109      	bne.n	8004b04 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004af4:	e006      	b.n	8004b04 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	73fb      	strb	r3, [r7, #15]
      break;
 8004afa:	e004      	b.n	8004b06 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004afc:	bf00      	nop
 8004afe:	e002      	b.n	8004b06 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004b00:	bf00      	nop
 8004b02:	e000      	b.n	8004b06 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004b04:	bf00      	nop
    }

    if(status == HAL_OK)
 8004b06:	7bfb      	ldrb	r3, [r7, #15]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d10d      	bne.n	8004b28 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004b0c:	4b49      	ldr	r3, [pc, #292]	; (8004c34 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6819      	ldr	r1, [r3, #0]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	3b01      	subs	r3, #1
 8004b1e:	011b      	lsls	r3, r3, #4
 8004b20:	430b      	orrs	r3, r1
 8004b22:	4944      	ldr	r1, [pc, #272]	; (8004c34 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004b24:	4313      	orrs	r3, r2
 8004b26:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004b28:	7bfb      	ldrb	r3, [r7, #15]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d17d      	bne.n	8004c2a <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004b2e:	4b41      	ldr	r3, [pc, #260]	; (8004c34 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a40      	ldr	r2, [pc, #256]	; (8004c34 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004b34:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004b38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b3a:	f7fc fa95 	bl	8001068 <HAL_GetTick>
 8004b3e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004b40:	e009      	b.n	8004b56 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b42:	f7fc fa91 	bl	8001068 <HAL_GetTick>
 8004b46:	4602      	mov	r2, r0
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	1ad3      	subs	r3, r2, r3
 8004b4c:	2b02      	cmp	r3, #2
 8004b4e:	d902      	bls.n	8004b56 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004b50:	2303      	movs	r3, #3
 8004b52:	73fb      	strb	r3, [r7, #15]
        break;
 8004b54:	e005      	b.n	8004b62 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004b56:	4b37      	ldr	r3, [pc, #220]	; (8004c34 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d1ef      	bne.n	8004b42 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004b62:	7bfb      	ldrb	r3, [r7, #15]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d160      	bne.n	8004c2a <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d111      	bne.n	8004b92 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b6e:	4b31      	ldr	r3, [pc, #196]	; (8004c34 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004b76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	6892      	ldr	r2, [r2, #8]
 8004b7e:	0211      	lsls	r1, r2, #8
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	68d2      	ldr	r2, [r2, #12]
 8004b84:	0912      	lsrs	r2, r2, #4
 8004b86:	0452      	lsls	r2, r2, #17
 8004b88:	430a      	orrs	r2, r1
 8004b8a:	492a      	ldr	r1, [pc, #168]	; (8004c34 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	610b      	str	r3, [r1, #16]
 8004b90:	e027      	b.n	8004be2 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d112      	bne.n	8004bbe <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b98:	4b26      	ldr	r3, [pc, #152]	; (8004c34 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004b9a:	691b      	ldr	r3, [r3, #16]
 8004b9c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004ba0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	6892      	ldr	r2, [r2, #8]
 8004ba8:	0211      	lsls	r1, r2, #8
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	6912      	ldr	r2, [r2, #16]
 8004bae:	0852      	lsrs	r2, r2, #1
 8004bb0:	3a01      	subs	r2, #1
 8004bb2:	0552      	lsls	r2, r2, #21
 8004bb4:	430a      	orrs	r2, r1
 8004bb6:	491f      	ldr	r1, [pc, #124]	; (8004c34 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	610b      	str	r3, [r1, #16]
 8004bbc:	e011      	b.n	8004be2 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004bbe:	4b1d      	ldr	r3, [pc, #116]	; (8004c34 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004bc0:	691b      	ldr	r3, [r3, #16]
 8004bc2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004bc6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	6892      	ldr	r2, [r2, #8]
 8004bce:	0211      	lsls	r1, r2, #8
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	6952      	ldr	r2, [r2, #20]
 8004bd4:	0852      	lsrs	r2, r2, #1
 8004bd6:	3a01      	subs	r2, #1
 8004bd8:	0652      	lsls	r2, r2, #25
 8004bda:	430a      	orrs	r2, r1
 8004bdc:	4915      	ldr	r1, [pc, #84]	; (8004c34 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004bde:	4313      	orrs	r3, r2
 8004be0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004be2:	4b14      	ldr	r3, [pc, #80]	; (8004c34 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a13      	ldr	r2, [pc, #76]	; (8004c34 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004be8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004bec:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bee:	f7fc fa3b 	bl	8001068 <HAL_GetTick>
 8004bf2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004bf4:	e009      	b.n	8004c0a <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004bf6:	f7fc fa37 	bl	8001068 <HAL_GetTick>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	d902      	bls.n	8004c0a <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8004c04:	2303      	movs	r3, #3
 8004c06:	73fb      	strb	r3, [r7, #15]
          break;
 8004c08:	e005      	b.n	8004c16 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c0a:	4b0a      	ldr	r3, [pc, #40]	; (8004c34 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d0ef      	beq.n	8004bf6 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8004c16:	7bfb      	ldrb	r3, [r7, #15]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d106      	bne.n	8004c2a <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004c1c:	4b05      	ldr	r3, [pc, #20]	; (8004c34 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004c1e:	691a      	ldr	r2, [r3, #16]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	699b      	ldr	r3, [r3, #24]
 8004c24:	4903      	ldr	r1, [pc, #12]	; (8004c34 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004c26:	4313      	orrs	r3, r2
 8004c28:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004c2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3710      	adds	r7, #16
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	40021000 	.word	0x40021000

08004c38 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c42:	2300      	movs	r3, #0
 8004c44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004c46:	4b68      	ldr	r3, [pc, #416]	; (8004de8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	f003 0303 	and.w	r3, r3, #3
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d018      	beq.n	8004c84 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004c52:	4b65      	ldr	r3, [pc, #404]	; (8004de8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	f003 0203 	and.w	r2, r3, #3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d10d      	bne.n	8004c7e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
       ||
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d009      	beq.n	8004c7e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004c6a:	4b5f      	ldr	r3, [pc, #380]	; (8004de8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	091b      	lsrs	r3, r3, #4
 8004c70:	f003 0307 	and.w	r3, r3, #7
 8004c74:	1c5a      	adds	r2, r3, #1
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	685b      	ldr	r3, [r3, #4]
       ||
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d044      	beq.n	8004d08 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	73fb      	strb	r3, [r7, #15]
 8004c82:	e041      	b.n	8004d08 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	d00c      	beq.n	8004ca6 <RCCEx_PLLSAI2_Config+0x6e>
 8004c8c:	2b03      	cmp	r3, #3
 8004c8e:	d013      	beq.n	8004cb8 <RCCEx_PLLSAI2_Config+0x80>
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d120      	bne.n	8004cd6 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004c94:	4b54      	ldr	r3, [pc, #336]	; (8004de8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 0302 	and.w	r3, r3, #2
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d11d      	bne.n	8004cdc <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ca4:	e01a      	b.n	8004cdc <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004ca6:	4b50      	ldr	r3, [pc, #320]	; (8004de8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d116      	bne.n	8004ce0 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cb6:	e013      	b.n	8004ce0 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004cb8:	4b4b      	ldr	r3, [pc, #300]	; (8004de8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d10f      	bne.n	8004ce4 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004cc4:	4b48      	ldr	r3, [pc, #288]	; (8004de8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d109      	bne.n	8004ce4 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004cd4:	e006      	b.n	8004ce4 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	73fb      	strb	r3, [r7, #15]
      break;
 8004cda:	e004      	b.n	8004ce6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004cdc:	bf00      	nop
 8004cde:	e002      	b.n	8004ce6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004ce0:	bf00      	nop
 8004ce2:	e000      	b.n	8004ce6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004ce4:	bf00      	nop
    }

    if(status == HAL_OK)
 8004ce6:	7bfb      	ldrb	r3, [r7, #15]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d10d      	bne.n	8004d08 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004cec:	4b3e      	ldr	r3, [pc, #248]	; (8004de8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6819      	ldr	r1, [r3, #0]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	3b01      	subs	r3, #1
 8004cfe:	011b      	lsls	r3, r3, #4
 8004d00:	430b      	orrs	r3, r1
 8004d02:	4939      	ldr	r1, [pc, #228]	; (8004de8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004d04:	4313      	orrs	r3, r2
 8004d06:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004d08:	7bfb      	ldrb	r3, [r7, #15]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d167      	bne.n	8004dde <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004d0e:	4b36      	ldr	r3, [pc, #216]	; (8004de8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a35      	ldr	r2, [pc, #212]	; (8004de8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004d14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d1a:	f7fc f9a5 	bl	8001068 <HAL_GetTick>
 8004d1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004d20:	e009      	b.n	8004d36 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004d22:	f7fc f9a1 	bl	8001068 <HAL_GetTick>
 8004d26:	4602      	mov	r2, r0
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	1ad3      	subs	r3, r2, r3
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d902      	bls.n	8004d36 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004d30:	2303      	movs	r3, #3
 8004d32:	73fb      	strb	r3, [r7, #15]
        break;
 8004d34:	e005      	b.n	8004d42 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004d36:	4b2c      	ldr	r3, [pc, #176]	; (8004de8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d1ef      	bne.n	8004d22 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004d42:	7bfb      	ldrb	r3, [r7, #15]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d14a      	bne.n	8004dde <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d111      	bne.n	8004d72 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004d4e:	4b26      	ldr	r3, [pc, #152]	; (8004de8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004d50:	695b      	ldr	r3, [r3, #20]
 8004d52:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004d56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	6892      	ldr	r2, [r2, #8]
 8004d5e:	0211      	lsls	r1, r2, #8
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	68d2      	ldr	r2, [r2, #12]
 8004d64:	0912      	lsrs	r2, r2, #4
 8004d66:	0452      	lsls	r2, r2, #17
 8004d68:	430a      	orrs	r2, r1
 8004d6a:	491f      	ldr	r1, [pc, #124]	; (8004de8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	614b      	str	r3, [r1, #20]
 8004d70:	e011      	b.n	8004d96 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004d72:	4b1d      	ldr	r3, [pc, #116]	; (8004de8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004d74:	695b      	ldr	r3, [r3, #20]
 8004d76:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004d7a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	6892      	ldr	r2, [r2, #8]
 8004d82:	0211      	lsls	r1, r2, #8
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	6912      	ldr	r2, [r2, #16]
 8004d88:	0852      	lsrs	r2, r2, #1
 8004d8a:	3a01      	subs	r2, #1
 8004d8c:	0652      	lsls	r2, r2, #25
 8004d8e:	430a      	orrs	r2, r1
 8004d90:	4915      	ldr	r1, [pc, #84]	; (8004de8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004d92:	4313      	orrs	r3, r2
 8004d94:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004d96:	4b14      	ldr	r3, [pc, #80]	; (8004de8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a13      	ldr	r2, [pc, #76]	; (8004de8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004d9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004da0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004da2:	f7fc f961 	bl	8001068 <HAL_GetTick>
 8004da6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004da8:	e009      	b.n	8004dbe <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004daa:	f7fc f95d 	bl	8001068 <HAL_GetTick>
 8004dae:	4602      	mov	r2, r0
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	1ad3      	subs	r3, r2, r3
 8004db4:	2b02      	cmp	r3, #2
 8004db6:	d902      	bls.n	8004dbe <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8004db8:	2303      	movs	r3, #3
 8004dba:	73fb      	strb	r3, [r7, #15]
          break;
 8004dbc:	e005      	b.n	8004dca <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004dbe:	4b0a      	ldr	r3, [pc, #40]	; (8004de8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d0ef      	beq.n	8004daa <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8004dca:	7bfb      	ldrb	r3, [r7, #15]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d106      	bne.n	8004dde <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004dd0:	4b05      	ldr	r3, [pc, #20]	; (8004de8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004dd2:	695a      	ldr	r2, [r3, #20]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	695b      	ldr	r3, [r3, #20]
 8004dd8:	4903      	ldr	r1, [pc, #12]	; (8004de8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3710      	adds	r7, #16
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	40021000 	.word	0x40021000

08004dec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b082      	sub	sp, #8
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d101      	bne.n	8004dfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e049      	b.n	8004e92 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d106      	bne.n	8004e18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f7fb fffc 	bl	8000e10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2202      	movs	r2, #2
 8004e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	3304      	adds	r3, #4
 8004e28:	4619      	mov	r1, r3
 8004e2a:	4610      	mov	r0, r2
 8004e2c:	f000 f89e 	bl	8004f6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e90:	2300      	movs	r3, #0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3708      	adds	r7, #8
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
	...

08004e9c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b085      	sub	sp, #20
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d001      	beq.n	8004eb4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e047      	b.n	8004f44 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2202      	movs	r2, #2
 8004eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a23      	ldr	r2, [pc, #140]	; (8004f50 <HAL_TIM_Base_Start+0xb4>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d01d      	beq.n	8004f02 <HAL_TIM_Base_Start+0x66>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ece:	d018      	beq.n	8004f02 <HAL_TIM_Base_Start+0x66>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a1f      	ldr	r2, [pc, #124]	; (8004f54 <HAL_TIM_Base_Start+0xb8>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d013      	beq.n	8004f02 <HAL_TIM_Base_Start+0x66>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a1e      	ldr	r2, [pc, #120]	; (8004f58 <HAL_TIM_Base_Start+0xbc>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d00e      	beq.n	8004f02 <HAL_TIM_Base_Start+0x66>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a1c      	ldr	r2, [pc, #112]	; (8004f5c <HAL_TIM_Base_Start+0xc0>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d009      	beq.n	8004f02 <HAL_TIM_Base_Start+0x66>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a1b      	ldr	r2, [pc, #108]	; (8004f60 <HAL_TIM_Base_Start+0xc4>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d004      	beq.n	8004f02 <HAL_TIM_Base_Start+0x66>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a19      	ldr	r2, [pc, #100]	; (8004f64 <HAL_TIM_Base_Start+0xc8>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d115      	bne.n	8004f2e <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	689a      	ldr	r2, [r3, #8]
 8004f08:	4b17      	ldr	r3, [pc, #92]	; (8004f68 <HAL_TIM_Base_Start+0xcc>)
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2b06      	cmp	r3, #6
 8004f12:	d015      	beq.n	8004f40 <HAL_TIM_Base_Start+0xa4>
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f1a:	d011      	beq.n	8004f40 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f042 0201 	orr.w	r2, r2, #1
 8004f2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f2c:	e008      	b.n	8004f40 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f042 0201 	orr.w	r2, r2, #1
 8004f3c:	601a      	str	r2, [r3, #0]
 8004f3e:	e000      	b.n	8004f42 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f40:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f42:	2300      	movs	r3, #0
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3714      	adds	r7, #20
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr
 8004f50:	40012c00 	.word	0x40012c00
 8004f54:	40000400 	.word	0x40000400
 8004f58:	40000800 	.word	0x40000800
 8004f5c:	40000c00 	.word	0x40000c00
 8004f60:	40013400 	.word	0x40013400
 8004f64:	40014000 	.word	0x40014000
 8004f68:	00010007 	.word	0x00010007

08004f6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b085      	sub	sp, #20
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4a40      	ldr	r2, [pc, #256]	; (8005080 <TIM_Base_SetConfig+0x114>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d013      	beq.n	8004fac <TIM_Base_SetConfig+0x40>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f8a:	d00f      	beq.n	8004fac <TIM_Base_SetConfig+0x40>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	4a3d      	ldr	r2, [pc, #244]	; (8005084 <TIM_Base_SetConfig+0x118>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d00b      	beq.n	8004fac <TIM_Base_SetConfig+0x40>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	4a3c      	ldr	r2, [pc, #240]	; (8005088 <TIM_Base_SetConfig+0x11c>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d007      	beq.n	8004fac <TIM_Base_SetConfig+0x40>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	4a3b      	ldr	r2, [pc, #236]	; (800508c <TIM_Base_SetConfig+0x120>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d003      	beq.n	8004fac <TIM_Base_SetConfig+0x40>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	4a3a      	ldr	r2, [pc, #232]	; (8005090 <TIM_Base_SetConfig+0x124>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d108      	bne.n	8004fbe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	68fa      	ldr	r2, [r7, #12]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a2f      	ldr	r2, [pc, #188]	; (8005080 <TIM_Base_SetConfig+0x114>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d01f      	beq.n	8005006 <TIM_Base_SetConfig+0x9a>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fcc:	d01b      	beq.n	8005006 <TIM_Base_SetConfig+0x9a>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4a2c      	ldr	r2, [pc, #176]	; (8005084 <TIM_Base_SetConfig+0x118>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d017      	beq.n	8005006 <TIM_Base_SetConfig+0x9a>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a2b      	ldr	r2, [pc, #172]	; (8005088 <TIM_Base_SetConfig+0x11c>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d013      	beq.n	8005006 <TIM_Base_SetConfig+0x9a>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a2a      	ldr	r2, [pc, #168]	; (800508c <TIM_Base_SetConfig+0x120>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d00f      	beq.n	8005006 <TIM_Base_SetConfig+0x9a>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a29      	ldr	r2, [pc, #164]	; (8005090 <TIM_Base_SetConfig+0x124>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d00b      	beq.n	8005006 <TIM_Base_SetConfig+0x9a>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a28      	ldr	r2, [pc, #160]	; (8005094 <TIM_Base_SetConfig+0x128>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d007      	beq.n	8005006 <TIM_Base_SetConfig+0x9a>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a27      	ldr	r2, [pc, #156]	; (8005098 <TIM_Base_SetConfig+0x12c>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d003      	beq.n	8005006 <TIM_Base_SetConfig+0x9a>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a26      	ldr	r2, [pc, #152]	; (800509c <TIM_Base_SetConfig+0x130>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d108      	bne.n	8005018 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800500c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	68db      	ldr	r3, [r3, #12]
 8005012:	68fa      	ldr	r2, [r7, #12]
 8005014:	4313      	orrs	r3, r2
 8005016:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	695b      	ldr	r3, [r3, #20]
 8005022:	4313      	orrs	r3, r2
 8005024:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	68fa      	ldr	r2, [r7, #12]
 800502a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	689a      	ldr	r2, [r3, #8]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	4a10      	ldr	r2, [pc, #64]	; (8005080 <TIM_Base_SetConfig+0x114>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d00f      	beq.n	8005064 <TIM_Base_SetConfig+0xf8>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	4a12      	ldr	r2, [pc, #72]	; (8005090 <TIM_Base_SetConfig+0x124>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d00b      	beq.n	8005064 <TIM_Base_SetConfig+0xf8>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	4a11      	ldr	r2, [pc, #68]	; (8005094 <TIM_Base_SetConfig+0x128>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d007      	beq.n	8005064 <TIM_Base_SetConfig+0xf8>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	4a10      	ldr	r2, [pc, #64]	; (8005098 <TIM_Base_SetConfig+0x12c>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d003      	beq.n	8005064 <TIM_Base_SetConfig+0xf8>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	4a0f      	ldr	r2, [pc, #60]	; (800509c <TIM_Base_SetConfig+0x130>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d103      	bne.n	800506c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	691a      	ldr	r2, [r3, #16]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	615a      	str	r2, [r3, #20]
}
 8005072:	bf00      	nop
 8005074:	3714      	adds	r7, #20
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr
 800507e:	bf00      	nop
 8005080:	40012c00 	.word	0x40012c00
 8005084:	40000400 	.word	0x40000400
 8005088:	40000800 	.word	0x40000800
 800508c:	40000c00 	.word	0x40000c00
 8005090:	40013400 	.word	0x40013400
 8005094:	40014000 	.word	0x40014000
 8005098:	40014400 	.word	0x40014400
 800509c:	40014800 	.word	0x40014800

080050a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b085      	sub	sp, #20
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d101      	bne.n	80050b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050b4:	2302      	movs	r3, #2
 80050b6:	e068      	b.n	800518a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2202      	movs	r2, #2
 80050c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a2e      	ldr	r2, [pc, #184]	; (8005198 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d004      	beq.n	80050ec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a2d      	ldr	r2, [pc, #180]	; (800519c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d108      	bne.n	80050fe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80050f2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	68fa      	ldr	r2, [r7, #12]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005104:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	68fa      	ldr	r2, [r7, #12]
 800510c:	4313      	orrs	r3, r2
 800510e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	68fa      	ldr	r2, [r7, #12]
 8005116:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a1e      	ldr	r2, [pc, #120]	; (8005198 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d01d      	beq.n	800515e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800512a:	d018      	beq.n	800515e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a1b      	ldr	r2, [pc, #108]	; (80051a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d013      	beq.n	800515e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a1a      	ldr	r2, [pc, #104]	; (80051a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d00e      	beq.n	800515e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a18      	ldr	r2, [pc, #96]	; (80051a8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d009      	beq.n	800515e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a13      	ldr	r2, [pc, #76]	; (800519c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d004      	beq.n	800515e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a14      	ldr	r2, [pc, #80]	; (80051ac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d10c      	bne.n	8005178 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005164:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	68ba      	ldr	r2, [r7, #8]
 800516c:	4313      	orrs	r3, r2
 800516e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	68ba      	ldr	r2, [r7, #8]
 8005176:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2200      	movs	r2, #0
 8005184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005188:	2300      	movs	r3, #0
}
 800518a:	4618      	mov	r0, r3
 800518c:	3714      	adds	r7, #20
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr
 8005196:	bf00      	nop
 8005198:	40012c00 	.word	0x40012c00
 800519c:	40013400 	.word	0x40013400
 80051a0:	40000400 	.word	0x40000400
 80051a4:	40000800 	.word	0x40000800
 80051a8:	40000c00 	.word	0x40000c00
 80051ac:	40014000 	.word	0x40014000

080051b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b082      	sub	sp, #8
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d101      	bne.n	80051c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e040      	b.n	8005244 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d106      	bne.n	80051d8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2200      	movs	r2, #0
 80051ce:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f7fb fe6c 	bl	8000eb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2224      	movs	r2, #36	; 0x24
 80051dc:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f022 0201 	bic.w	r2, r2, #1
 80051ec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f000 f8c0 	bl	8005374 <UART_SetConfig>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d101      	bne.n	80051fe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e022      	b.n	8005244 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005202:	2b00      	cmp	r3, #0
 8005204:	d002      	beq.n	800520c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 fb3e 	bl	8005888 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	685a      	ldr	r2, [r3, #4]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800521a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	689a      	ldr	r2, [r3, #8]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800522a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f042 0201 	orr.w	r2, r2, #1
 800523a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f000 fbc5 	bl	80059cc <UART_CheckIdleState>
 8005242:	4603      	mov	r3, r0
}
 8005244:	4618      	mov	r0, r3
 8005246:	3708      	adds	r7, #8
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}

0800524c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b08a      	sub	sp, #40	; 0x28
 8005250:	af02      	add	r7, sp, #8
 8005252:	60f8      	str	r0, [r7, #12]
 8005254:	60b9      	str	r1, [r7, #8]
 8005256:	603b      	str	r3, [r7, #0]
 8005258:	4613      	mov	r3, r2
 800525a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005260:	2b20      	cmp	r3, #32
 8005262:	f040 8081 	bne.w	8005368 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d002      	beq.n	8005272 <HAL_UART_Transmit+0x26>
 800526c:	88fb      	ldrh	r3, [r7, #6]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d101      	bne.n	8005276 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e079      	b.n	800536a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800527c:	2b01      	cmp	r3, #1
 800527e:	d101      	bne.n	8005284 <HAL_UART_Transmit+0x38>
 8005280:	2302      	movs	r3, #2
 8005282:	e072      	b.n	800536a <HAL_UART_Transmit+0x11e>
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2200      	movs	r2, #0
 8005290:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2221      	movs	r2, #33	; 0x21
 8005296:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005298:	f7fb fee6 	bl	8001068 <HAL_GetTick>
 800529c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	88fa      	ldrh	r2, [r7, #6]
 80052a2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	88fa      	ldrh	r2, [r7, #6]
 80052aa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052b6:	d108      	bne.n	80052ca <HAL_UART_Transmit+0x7e>
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	691b      	ldr	r3, [r3, #16]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d104      	bne.n	80052ca <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80052c0:	2300      	movs	r3, #0
 80052c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	61bb      	str	r3, [r7, #24]
 80052c8:	e003      	b.n	80052d2 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80052ce:	2300      	movs	r3, #0
 80052d0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2200      	movs	r2, #0
 80052d6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80052da:	e02d      	b.n	8005338 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	9300      	str	r3, [sp, #0]
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	2200      	movs	r2, #0
 80052e4:	2180      	movs	r1, #128	; 0x80
 80052e6:	68f8      	ldr	r0, [r7, #12]
 80052e8:	f000 fbb5 	bl	8005a56 <UART_WaitOnFlagUntilTimeout>
 80052ec:	4603      	mov	r3, r0
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d001      	beq.n	80052f6 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 80052f2:	2303      	movs	r3, #3
 80052f4:	e039      	b.n	800536a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d10b      	bne.n	8005314 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80052fc:	69bb      	ldr	r3, [r7, #24]
 80052fe:	881a      	ldrh	r2, [r3, #0]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005308:	b292      	uxth	r2, r2
 800530a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800530c:	69bb      	ldr	r3, [r7, #24]
 800530e:	3302      	adds	r3, #2
 8005310:	61bb      	str	r3, [r7, #24]
 8005312:	e008      	b.n	8005326 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005314:	69fb      	ldr	r3, [r7, #28]
 8005316:	781a      	ldrb	r2, [r3, #0]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	b292      	uxth	r2, r2
 800531e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	3301      	adds	r3, #1
 8005324:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800532c:	b29b      	uxth	r3, r3
 800532e:	3b01      	subs	r3, #1
 8005330:	b29a      	uxth	r2, r3
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800533e:	b29b      	uxth	r3, r3
 8005340:	2b00      	cmp	r3, #0
 8005342:	d1cb      	bne.n	80052dc <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	9300      	str	r3, [sp, #0]
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	2200      	movs	r2, #0
 800534c:	2140      	movs	r1, #64	; 0x40
 800534e:	68f8      	ldr	r0, [r7, #12]
 8005350:	f000 fb81 	bl	8005a56 <UART_WaitOnFlagUntilTimeout>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d001      	beq.n	800535e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800535a:	2303      	movs	r3, #3
 800535c:	e005      	b.n	800536a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2220      	movs	r2, #32
 8005362:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8005364:	2300      	movs	r3, #0
 8005366:	e000      	b.n	800536a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8005368:	2302      	movs	r3, #2
  }
}
 800536a:	4618      	mov	r0, r3
 800536c:	3720      	adds	r7, #32
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
	...

08005374 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005374:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005378:	b088      	sub	sp, #32
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800537e:	2300      	movs	r3, #0
 8005380:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	689a      	ldr	r2, [r3, #8]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	691b      	ldr	r3, [r3, #16]
 800538a:	431a      	orrs	r2, r3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	695b      	ldr	r3, [r3, #20]
 8005390:	431a      	orrs	r2, r3
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	69db      	ldr	r3, [r3, #28]
 8005396:	4313      	orrs	r3, r2
 8005398:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	4bac      	ldr	r3, [pc, #688]	; (8005654 <UART_SetConfig+0x2e0>)
 80053a2:	4013      	ands	r3, r2
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	6812      	ldr	r2, [r2, #0]
 80053a8:	69f9      	ldr	r1, [r7, #28]
 80053aa:	430b      	orrs	r3, r1
 80053ac:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	68da      	ldr	r2, [r3, #12]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	430a      	orrs	r2, r1
 80053c2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	699b      	ldr	r3, [r3, #24]
 80053c8:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4aa2      	ldr	r2, [pc, #648]	; (8005658 <UART_SetConfig+0x2e4>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d004      	beq.n	80053de <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6a1b      	ldr	r3, [r3, #32]
 80053d8:	69fa      	ldr	r2, [r7, #28]
 80053da:	4313      	orrs	r3, r2
 80053dc:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	69fa      	ldr	r2, [r7, #28]
 80053ee:	430a      	orrs	r2, r1
 80053f0:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a99      	ldr	r2, [pc, #612]	; (800565c <UART_SetConfig+0x2e8>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d121      	bne.n	8005440 <UART_SetConfig+0xcc>
 80053fc:	4b98      	ldr	r3, [pc, #608]	; (8005660 <UART_SetConfig+0x2ec>)
 80053fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005402:	f003 0303 	and.w	r3, r3, #3
 8005406:	2b03      	cmp	r3, #3
 8005408:	d816      	bhi.n	8005438 <UART_SetConfig+0xc4>
 800540a:	a201      	add	r2, pc, #4	; (adr r2, 8005410 <UART_SetConfig+0x9c>)
 800540c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005410:	08005421 	.word	0x08005421
 8005414:	0800542d 	.word	0x0800542d
 8005418:	08005427 	.word	0x08005427
 800541c:	08005433 	.word	0x08005433
 8005420:	2301      	movs	r3, #1
 8005422:	76fb      	strb	r3, [r7, #27]
 8005424:	e0e8      	b.n	80055f8 <UART_SetConfig+0x284>
 8005426:	2302      	movs	r3, #2
 8005428:	76fb      	strb	r3, [r7, #27]
 800542a:	e0e5      	b.n	80055f8 <UART_SetConfig+0x284>
 800542c:	2304      	movs	r3, #4
 800542e:	76fb      	strb	r3, [r7, #27]
 8005430:	e0e2      	b.n	80055f8 <UART_SetConfig+0x284>
 8005432:	2308      	movs	r3, #8
 8005434:	76fb      	strb	r3, [r7, #27]
 8005436:	e0df      	b.n	80055f8 <UART_SetConfig+0x284>
 8005438:	2310      	movs	r3, #16
 800543a:	76fb      	strb	r3, [r7, #27]
 800543c:	bf00      	nop
 800543e:	e0db      	b.n	80055f8 <UART_SetConfig+0x284>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a87      	ldr	r2, [pc, #540]	; (8005664 <UART_SetConfig+0x2f0>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d134      	bne.n	80054b4 <UART_SetConfig+0x140>
 800544a:	4b85      	ldr	r3, [pc, #532]	; (8005660 <UART_SetConfig+0x2ec>)
 800544c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005450:	f003 030c 	and.w	r3, r3, #12
 8005454:	2b0c      	cmp	r3, #12
 8005456:	d829      	bhi.n	80054ac <UART_SetConfig+0x138>
 8005458:	a201      	add	r2, pc, #4	; (adr r2, 8005460 <UART_SetConfig+0xec>)
 800545a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800545e:	bf00      	nop
 8005460:	08005495 	.word	0x08005495
 8005464:	080054ad 	.word	0x080054ad
 8005468:	080054ad 	.word	0x080054ad
 800546c:	080054ad 	.word	0x080054ad
 8005470:	080054a1 	.word	0x080054a1
 8005474:	080054ad 	.word	0x080054ad
 8005478:	080054ad 	.word	0x080054ad
 800547c:	080054ad 	.word	0x080054ad
 8005480:	0800549b 	.word	0x0800549b
 8005484:	080054ad 	.word	0x080054ad
 8005488:	080054ad 	.word	0x080054ad
 800548c:	080054ad 	.word	0x080054ad
 8005490:	080054a7 	.word	0x080054a7
 8005494:	2300      	movs	r3, #0
 8005496:	76fb      	strb	r3, [r7, #27]
 8005498:	e0ae      	b.n	80055f8 <UART_SetConfig+0x284>
 800549a:	2302      	movs	r3, #2
 800549c:	76fb      	strb	r3, [r7, #27]
 800549e:	e0ab      	b.n	80055f8 <UART_SetConfig+0x284>
 80054a0:	2304      	movs	r3, #4
 80054a2:	76fb      	strb	r3, [r7, #27]
 80054a4:	e0a8      	b.n	80055f8 <UART_SetConfig+0x284>
 80054a6:	2308      	movs	r3, #8
 80054a8:	76fb      	strb	r3, [r7, #27]
 80054aa:	e0a5      	b.n	80055f8 <UART_SetConfig+0x284>
 80054ac:	2310      	movs	r3, #16
 80054ae:	76fb      	strb	r3, [r7, #27]
 80054b0:	bf00      	nop
 80054b2:	e0a1      	b.n	80055f8 <UART_SetConfig+0x284>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a6b      	ldr	r2, [pc, #428]	; (8005668 <UART_SetConfig+0x2f4>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d120      	bne.n	8005500 <UART_SetConfig+0x18c>
 80054be:	4b68      	ldr	r3, [pc, #416]	; (8005660 <UART_SetConfig+0x2ec>)
 80054c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054c4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80054c8:	2b10      	cmp	r3, #16
 80054ca:	d00f      	beq.n	80054ec <UART_SetConfig+0x178>
 80054cc:	2b10      	cmp	r3, #16
 80054ce:	d802      	bhi.n	80054d6 <UART_SetConfig+0x162>
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d005      	beq.n	80054e0 <UART_SetConfig+0x16c>
 80054d4:	e010      	b.n	80054f8 <UART_SetConfig+0x184>
 80054d6:	2b20      	cmp	r3, #32
 80054d8:	d005      	beq.n	80054e6 <UART_SetConfig+0x172>
 80054da:	2b30      	cmp	r3, #48	; 0x30
 80054dc:	d009      	beq.n	80054f2 <UART_SetConfig+0x17e>
 80054de:	e00b      	b.n	80054f8 <UART_SetConfig+0x184>
 80054e0:	2300      	movs	r3, #0
 80054e2:	76fb      	strb	r3, [r7, #27]
 80054e4:	e088      	b.n	80055f8 <UART_SetConfig+0x284>
 80054e6:	2302      	movs	r3, #2
 80054e8:	76fb      	strb	r3, [r7, #27]
 80054ea:	e085      	b.n	80055f8 <UART_SetConfig+0x284>
 80054ec:	2304      	movs	r3, #4
 80054ee:	76fb      	strb	r3, [r7, #27]
 80054f0:	e082      	b.n	80055f8 <UART_SetConfig+0x284>
 80054f2:	2308      	movs	r3, #8
 80054f4:	76fb      	strb	r3, [r7, #27]
 80054f6:	e07f      	b.n	80055f8 <UART_SetConfig+0x284>
 80054f8:	2310      	movs	r3, #16
 80054fa:	76fb      	strb	r3, [r7, #27]
 80054fc:	bf00      	nop
 80054fe:	e07b      	b.n	80055f8 <UART_SetConfig+0x284>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a59      	ldr	r2, [pc, #356]	; (800566c <UART_SetConfig+0x2f8>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d120      	bne.n	800554c <UART_SetConfig+0x1d8>
 800550a:	4b55      	ldr	r3, [pc, #340]	; (8005660 <UART_SetConfig+0x2ec>)
 800550c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005510:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005514:	2b40      	cmp	r3, #64	; 0x40
 8005516:	d00f      	beq.n	8005538 <UART_SetConfig+0x1c4>
 8005518:	2b40      	cmp	r3, #64	; 0x40
 800551a:	d802      	bhi.n	8005522 <UART_SetConfig+0x1ae>
 800551c:	2b00      	cmp	r3, #0
 800551e:	d005      	beq.n	800552c <UART_SetConfig+0x1b8>
 8005520:	e010      	b.n	8005544 <UART_SetConfig+0x1d0>
 8005522:	2b80      	cmp	r3, #128	; 0x80
 8005524:	d005      	beq.n	8005532 <UART_SetConfig+0x1be>
 8005526:	2bc0      	cmp	r3, #192	; 0xc0
 8005528:	d009      	beq.n	800553e <UART_SetConfig+0x1ca>
 800552a:	e00b      	b.n	8005544 <UART_SetConfig+0x1d0>
 800552c:	2300      	movs	r3, #0
 800552e:	76fb      	strb	r3, [r7, #27]
 8005530:	e062      	b.n	80055f8 <UART_SetConfig+0x284>
 8005532:	2302      	movs	r3, #2
 8005534:	76fb      	strb	r3, [r7, #27]
 8005536:	e05f      	b.n	80055f8 <UART_SetConfig+0x284>
 8005538:	2304      	movs	r3, #4
 800553a:	76fb      	strb	r3, [r7, #27]
 800553c:	e05c      	b.n	80055f8 <UART_SetConfig+0x284>
 800553e:	2308      	movs	r3, #8
 8005540:	76fb      	strb	r3, [r7, #27]
 8005542:	e059      	b.n	80055f8 <UART_SetConfig+0x284>
 8005544:	2310      	movs	r3, #16
 8005546:	76fb      	strb	r3, [r7, #27]
 8005548:	bf00      	nop
 800554a:	e055      	b.n	80055f8 <UART_SetConfig+0x284>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a47      	ldr	r2, [pc, #284]	; (8005670 <UART_SetConfig+0x2fc>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d124      	bne.n	80055a0 <UART_SetConfig+0x22c>
 8005556:	4b42      	ldr	r3, [pc, #264]	; (8005660 <UART_SetConfig+0x2ec>)
 8005558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800555c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005560:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005564:	d012      	beq.n	800558c <UART_SetConfig+0x218>
 8005566:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800556a:	d802      	bhi.n	8005572 <UART_SetConfig+0x1fe>
 800556c:	2b00      	cmp	r3, #0
 800556e:	d007      	beq.n	8005580 <UART_SetConfig+0x20c>
 8005570:	e012      	b.n	8005598 <UART_SetConfig+0x224>
 8005572:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005576:	d006      	beq.n	8005586 <UART_SetConfig+0x212>
 8005578:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800557c:	d009      	beq.n	8005592 <UART_SetConfig+0x21e>
 800557e:	e00b      	b.n	8005598 <UART_SetConfig+0x224>
 8005580:	2300      	movs	r3, #0
 8005582:	76fb      	strb	r3, [r7, #27]
 8005584:	e038      	b.n	80055f8 <UART_SetConfig+0x284>
 8005586:	2302      	movs	r3, #2
 8005588:	76fb      	strb	r3, [r7, #27]
 800558a:	e035      	b.n	80055f8 <UART_SetConfig+0x284>
 800558c:	2304      	movs	r3, #4
 800558e:	76fb      	strb	r3, [r7, #27]
 8005590:	e032      	b.n	80055f8 <UART_SetConfig+0x284>
 8005592:	2308      	movs	r3, #8
 8005594:	76fb      	strb	r3, [r7, #27]
 8005596:	e02f      	b.n	80055f8 <UART_SetConfig+0x284>
 8005598:	2310      	movs	r3, #16
 800559a:	76fb      	strb	r3, [r7, #27]
 800559c:	bf00      	nop
 800559e:	e02b      	b.n	80055f8 <UART_SetConfig+0x284>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a2c      	ldr	r2, [pc, #176]	; (8005658 <UART_SetConfig+0x2e4>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d124      	bne.n	80055f4 <UART_SetConfig+0x280>
 80055aa:	4b2d      	ldr	r3, [pc, #180]	; (8005660 <UART_SetConfig+0x2ec>)
 80055ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055b0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80055b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055b8:	d012      	beq.n	80055e0 <UART_SetConfig+0x26c>
 80055ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055be:	d802      	bhi.n	80055c6 <UART_SetConfig+0x252>
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d007      	beq.n	80055d4 <UART_SetConfig+0x260>
 80055c4:	e012      	b.n	80055ec <UART_SetConfig+0x278>
 80055c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055ca:	d006      	beq.n	80055da <UART_SetConfig+0x266>
 80055cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80055d0:	d009      	beq.n	80055e6 <UART_SetConfig+0x272>
 80055d2:	e00b      	b.n	80055ec <UART_SetConfig+0x278>
 80055d4:	2300      	movs	r3, #0
 80055d6:	76fb      	strb	r3, [r7, #27]
 80055d8:	e00e      	b.n	80055f8 <UART_SetConfig+0x284>
 80055da:	2302      	movs	r3, #2
 80055dc:	76fb      	strb	r3, [r7, #27]
 80055de:	e00b      	b.n	80055f8 <UART_SetConfig+0x284>
 80055e0:	2304      	movs	r3, #4
 80055e2:	76fb      	strb	r3, [r7, #27]
 80055e4:	e008      	b.n	80055f8 <UART_SetConfig+0x284>
 80055e6:	2308      	movs	r3, #8
 80055e8:	76fb      	strb	r3, [r7, #27]
 80055ea:	e005      	b.n	80055f8 <UART_SetConfig+0x284>
 80055ec:	2310      	movs	r3, #16
 80055ee:	76fb      	strb	r3, [r7, #27]
 80055f0:	bf00      	nop
 80055f2:	e001      	b.n	80055f8 <UART_SetConfig+0x284>
 80055f4:	2310      	movs	r3, #16
 80055f6:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a16      	ldr	r2, [pc, #88]	; (8005658 <UART_SetConfig+0x2e4>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	f040 8087 	bne.w	8005712 <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005604:	7efb      	ldrb	r3, [r7, #27]
 8005606:	2b08      	cmp	r3, #8
 8005608:	d836      	bhi.n	8005678 <UART_SetConfig+0x304>
 800560a:	a201      	add	r2, pc, #4	; (adr r2, 8005610 <UART_SetConfig+0x29c>)
 800560c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005610:	08005635 	.word	0x08005635
 8005614:	08005679 	.word	0x08005679
 8005618:	0800563d 	.word	0x0800563d
 800561c:	08005679 	.word	0x08005679
 8005620:	08005643 	.word	0x08005643
 8005624:	08005679 	.word	0x08005679
 8005628:	08005679 	.word	0x08005679
 800562c:	08005679 	.word	0x08005679
 8005630:	0800564b 	.word	0x0800564b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005634:	f7fe fe9e 	bl	8004374 <HAL_RCC_GetPCLK1Freq>
 8005638:	6178      	str	r0, [r7, #20]
        break;
 800563a:	e022      	b.n	8005682 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800563c:	4b0d      	ldr	r3, [pc, #52]	; (8005674 <UART_SetConfig+0x300>)
 800563e:	617b      	str	r3, [r7, #20]
        break;
 8005640:	e01f      	b.n	8005682 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005642:	f7fe fe01 	bl	8004248 <HAL_RCC_GetSysClockFreq>
 8005646:	6178      	str	r0, [r7, #20]
        break;
 8005648:	e01b      	b.n	8005682 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800564a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800564e:	617b      	str	r3, [r7, #20]
        break;
 8005650:	e017      	b.n	8005682 <UART_SetConfig+0x30e>
 8005652:	bf00      	nop
 8005654:	efff69f3 	.word	0xefff69f3
 8005658:	40008000 	.word	0x40008000
 800565c:	40013800 	.word	0x40013800
 8005660:	40021000 	.word	0x40021000
 8005664:	40004400 	.word	0x40004400
 8005668:	40004800 	.word	0x40004800
 800566c:	40004c00 	.word	0x40004c00
 8005670:	40005000 	.word	0x40005000
 8005674:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005678:	2300      	movs	r3, #0
 800567a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	76bb      	strb	r3, [r7, #26]
        break;
 8005680:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	2b00      	cmp	r3, #0
 8005686:	f000 80f1 	beq.w	800586c <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	685a      	ldr	r2, [r3, #4]
 800568e:	4613      	mov	r3, r2
 8005690:	005b      	lsls	r3, r3, #1
 8005692:	4413      	add	r3, r2
 8005694:	697a      	ldr	r2, [r7, #20]
 8005696:	429a      	cmp	r2, r3
 8005698:	d305      	bcc.n	80056a6 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80056a0:	697a      	ldr	r2, [r7, #20]
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d902      	bls.n	80056ac <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	76bb      	strb	r3, [r7, #26]
 80056aa:	e0df      	b.n	800586c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	4619      	mov	r1, r3
 80056b0:	f04f 0200 	mov.w	r2, #0
 80056b4:	f04f 0300 	mov.w	r3, #0
 80056b8:	f04f 0400 	mov.w	r4, #0
 80056bc:	0214      	lsls	r4, r2, #8
 80056be:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80056c2:	020b      	lsls	r3, r1, #8
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	6852      	ldr	r2, [r2, #4]
 80056c8:	0852      	lsrs	r2, r2, #1
 80056ca:	4611      	mov	r1, r2
 80056cc:	f04f 0200 	mov.w	r2, #0
 80056d0:	eb13 0b01 	adds.w	fp, r3, r1
 80056d4:	eb44 0c02 	adc.w	ip, r4, r2
 80056d8:	4658      	mov	r0, fp
 80056da:	4661      	mov	r1, ip
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	f04f 0400 	mov.w	r4, #0
 80056e4:	461a      	mov	r2, r3
 80056e6:	4623      	mov	r3, r4
 80056e8:	f7fa fdc2 	bl	8000270 <__aeabi_uldivmod>
 80056ec:	4603      	mov	r3, r0
 80056ee:	460c      	mov	r4, r1
 80056f0:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056f8:	d308      	bcc.n	800570c <UART_SetConfig+0x398>
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005700:	d204      	bcs.n	800570c <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	693a      	ldr	r2, [r7, #16]
 8005708:	60da      	str	r2, [r3, #12]
 800570a:	e0af      	b.n	800586c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	76bb      	strb	r3, [r7, #26]
 8005710:	e0ac      	b.n	800586c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	69db      	ldr	r3, [r3, #28]
 8005716:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800571a:	d15b      	bne.n	80057d4 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800571c:	7efb      	ldrb	r3, [r7, #27]
 800571e:	2b08      	cmp	r3, #8
 8005720:	d827      	bhi.n	8005772 <UART_SetConfig+0x3fe>
 8005722:	a201      	add	r2, pc, #4	; (adr r2, 8005728 <UART_SetConfig+0x3b4>)
 8005724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005728:	0800574d 	.word	0x0800574d
 800572c:	08005755 	.word	0x08005755
 8005730:	0800575d 	.word	0x0800575d
 8005734:	08005773 	.word	0x08005773
 8005738:	08005763 	.word	0x08005763
 800573c:	08005773 	.word	0x08005773
 8005740:	08005773 	.word	0x08005773
 8005744:	08005773 	.word	0x08005773
 8005748:	0800576b 	.word	0x0800576b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800574c:	f7fe fe12 	bl	8004374 <HAL_RCC_GetPCLK1Freq>
 8005750:	6178      	str	r0, [r7, #20]
        break;
 8005752:	e013      	b.n	800577c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005754:	f7fe fe24 	bl	80043a0 <HAL_RCC_GetPCLK2Freq>
 8005758:	6178      	str	r0, [r7, #20]
        break;
 800575a:	e00f      	b.n	800577c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800575c:	4b49      	ldr	r3, [pc, #292]	; (8005884 <UART_SetConfig+0x510>)
 800575e:	617b      	str	r3, [r7, #20]
        break;
 8005760:	e00c      	b.n	800577c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005762:	f7fe fd71 	bl	8004248 <HAL_RCC_GetSysClockFreq>
 8005766:	6178      	str	r0, [r7, #20]
        break;
 8005768:	e008      	b.n	800577c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800576a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800576e:	617b      	str	r3, [r7, #20]
        break;
 8005770:	e004      	b.n	800577c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8005772:	2300      	movs	r3, #0
 8005774:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	76bb      	strb	r3, [r7, #26]
        break;
 800577a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d074      	beq.n	800586c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	005a      	lsls	r2, r3, #1
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	085b      	lsrs	r3, r3, #1
 800578c:	441a      	add	r2, r3
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	fbb2 f3f3 	udiv	r3, r2, r3
 8005796:	b29b      	uxth	r3, r3
 8005798:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	2b0f      	cmp	r3, #15
 800579e:	d916      	bls.n	80057ce <UART_SetConfig+0x45a>
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057a6:	d212      	bcs.n	80057ce <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	f023 030f 	bic.w	r3, r3, #15
 80057b0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	085b      	lsrs	r3, r3, #1
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	f003 0307 	and.w	r3, r3, #7
 80057bc:	b29a      	uxth	r2, r3
 80057be:	89fb      	ldrh	r3, [r7, #14]
 80057c0:	4313      	orrs	r3, r2
 80057c2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	89fa      	ldrh	r2, [r7, #14]
 80057ca:	60da      	str	r2, [r3, #12]
 80057cc:	e04e      	b.n	800586c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	76bb      	strb	r3, [r7, #26]
 80057d2:	e04b      	b.n	800586c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80057d4:	7efb      	ldrb	r3, [r7, #27]
 80057d6:	2b08      	cmp	r3, #8
 80057d8:	d827      	bhi.n	800582a <UART_SetConfig+0x4b6>
 80057da:	a201      	add	r2, pc, #4	; (adr r2, 80057e0 <UART_SetConfig+0x46c>)
 80057dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057e0:	08005805 	.word	0x08005805
 80057e4:	0800580d 	.word	0x0800580d
 80057e8:	08005815 	.word	0x08005815
 80057ec:	0800582b 	.word	0x0800582b
 80057f0:	0800581b 	.word	0x0800581b
 80057f4:	0800582b 	.word	0x0800582b
 80057f8:	0800582b 	.word	0x0800582b
 80057fc:	0800582b 	.word	0x0800582b
 8005800:	08005823 	.word	0x08005823
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005804:	f7fe fdb6 	bl	8004374 <HAL_RCC_GetPCLK1Freq>
 8005808:	6178      	str	r0, [r7, #20]
        break;
 800580a:	e013      	b.n	8005834 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800580c:	f7fe fdc8 	bl	80043a0 <HAL_RCC_GetPCLK2Freq>
 8005810:	6178      	str	r0, [r7, #20]
        break;
 8005812:	e00f      	b.n	8005834 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005814:	4b1b      	ldr	r3, [pc, #108]	; (8005884 <UART_SetConfig+0x510>)
 8005816:	617b      	str	r3, [r7, #20]
        break;
 8005818:	e00c      	b.n	8005834 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800581a:	f7fe fd15 	bl	8004248 <HAL_RCC_GetSysClockFreq>
 800581e:	6178      	str	r0, [r7, #20]
        break;
 8005820:	e008      	b.n	8005834 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005822:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005826:	617b      	str	r3, [r7, #20]
        break;
 8005828:	e004      	b.n	8005834 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800582a:	2300      	movs	r3, #0
 800582c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	76bb      	strb	r3, [r7, #26]
        break;
 8005832:	bf00      	nop
    }

    if (pclk != 0U)
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d018      	beq.n	800586c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	085a      	lsrs	r2, r3, #1
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	441a      	add	r2, r3
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	fbb2 f3f3 	udiv	r3, r2, r3
 800584c:	b29b      	uxth	r3, r3
 800584e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	2b0f      	cmp	r3, #15
 8005854:	d908      	bls.n	8005868 <UART_SetConfig+0x4f4>
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800585c:	d204      	bcs.n	8005868 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	693a      	ldr	r2, [r7, #16]
 8005864:	60da      	str	r2, [r3, #12]
 8005866:	e001      	b.n	800586c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2200      	movs	r2, #0
 8005870:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2200      	movs	r2, #0
 8005876:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005878:	7ebb      	ldrb	r3, [r7, #26]
}
 800587a:	4618      	mov	r0, r3
 800587c:	3720      	adds	r7, #32
 800587e:	46bd      	mov	sp, r7
 8005880:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8005884:	00f42400 	.word	0x00f42400

08005888 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005888:	b480      	push	{r7}
 800588a:	b083      	sub	sp, #12
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005894:	f003 0301 	and.w	r3, r3, #1
 8005898:	2b00      	cmp	r3, #0
 800589a:	d00a      	beq.n	80058b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	430a      	orrs	r2, r1
 80058b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b6:	f003 0302 	and.w	r3, r3, #2
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d00a      	beq.n	80058d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	430a      	orrs	r2, r1
 80058d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d8:	f003 0304 	and.w	r3, r3, #4
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d00a      	beq.n	80058f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	430a      	orrs	r2, r1
 80058f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fa:	f003 0308 	and.w	r3, r3, #8
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d00a      	beq.n	8005918 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	430a      	orrs	r2, r1
 8005916:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591c:	f003 0310 	and.w	r3, r3, #16
 8005920:	2b00      	cmp	r3, #0
 8005922:	d00a      	beq.n	800593a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	430a      	orrs	r2, r1
 8005938:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593e:	f003 0320 	and.w	r3, r3, #32
 8005942:	2b00      	cmp	r3, #0
 8005944:	d00a      	beq.n	800595c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	430a      	orrs	r2, r1
 800595a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005964:	2b00      	cmp	r3, #0
 8005966:	d01a      	beq.n	800599e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	430a      	orrs	r2, r1
 800597c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005982:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005986:	d10a      	bne.n	800599e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	430a      	orrs	r2, r1
 800599c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d00a      	beq.n	80059c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	430a      	orrs	r2, r1
 80059be:	605a      	str	r2, [r3, #4]
  }
}
 80059c0:	bf00      	nop
 80059c2:	370c      	adds	r7, #12
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr

080059cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b086      	sub	sp, #24
 80059d0:	af02      	add	r7, sp, #8
 80059d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80059da:	f7fb fb45 	bl	8001068 <HAL_GetTick>
 80059de:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f003 0308 	and.w	r3, r3, #8
 80059ea:	2b08      	cmp	r3, #8
 80059ec:	d10e      	bne.n	8005a0c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059ee:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80059f2:	9300      	str	r3, [sp, #0]
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2200      	movs	r2, #0
 80059f8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f000 f82a 	bl	8005a56 <UART_WaitOnFlagUntilTimeout>
 8005a02:	4603      	mov	r3, r0
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d001      	beq.n	8005a0c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a08:	2303      	movs	r3, #3
 8005a0a:	e020      	b.n	8005a4e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f003 0304 	and.w	r3, r3, #4
 8005a16:	2b04      	cmp	r3, #4
 8005a18:	d10e      	bne.n	8005a38 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a1a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a1e:	9300      	str	r3, [sp, #0]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f000 f814 	bl	8005a56 <UART_WaitOnFlagUntilTimeout>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d001      	beq.n	8005a38 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a34:	2303      	movs	r3, #3
 8005a36:	e00a      	b.n	8005a4e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2220      	movs	r2, #32
 8005a3c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2220      	movs	r2, #32
 8005a42:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005a4c:	2300      	movs	r3, #0
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3710      	adds	r7, #16
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}

08005a56 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a56:	b580      	push	{r7, lr}
 8005a58:	b084      	sub	sp, #16
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	60f8      	str	r0, [r7, #12]
 8005a5e:	60b9      	str	r1, [r7, #8]
 8005a60:	603b      	str	r3, [r7, #0]
 8005a62:	4613      	mov	r3, r2
 8005a64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a66:	e05d      	b.n	8005b24 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a68:	69bb      	ldr	r3, [r7, #24]
 8005a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a6e:	d059      	beq.n	8005b24 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a70:	f7fb fafa 	bl	8001068 <HAL_GetTick>
 8005a74:	4602      	mov	r2, r0
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	1ad3      	subs	r3, r2, r3
 8005a7a:	69ba      	ldr	r2, [r7, #24]
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d302      	bcc.n	8005a86 <UART_WaitOnFlagUntilTimeout+0x30>
 8005a80:	69bb      	ldr	r3, [r7, #24]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d11b      	bne.n	8005abe <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005a94:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	689a      	ldr	r2, [r3, #8]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f022 0201 	bic.w	r2, r2, #1
 8005aa4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2220      	movs	r2, #32
 8005aaa:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2220      	movs	r2, #32
 8005ab0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005aba:	2303      	movs	r3, #3
 8005abc:	e042      	b.n	8005b44 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f003 0304 	and.w	r3, r3, #4
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d02b      	beq.n	8005b24 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	69db      	ldr	r3, [r3, #28]
 8005ad2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ad6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ada:	d123      	bne.n	8005b24 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ae4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005af4:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	689a      	ldr	r2, [r3, #8]
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f022 0201 	bic.w	r2, r2, #1
 8005b04:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2220      	movs	r2, #32
 8005b0a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2220      	movs	r2, #32
 8005b10:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2220      	movs	r2, #32
 8005b16:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8005b20:	2303      	movs	r3, #3
 8005b22:	e00f      	b.n	8005b44 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	69da      	ldr	r2, [r3, #28]
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	4013      	ands	r3, r2
 8005b2e:	68ba      	ldr	r2, [r7, #8]
 8005b30:	429a      	cmp	r2, r3
 8005b32:	bf0c      	ite	eq
 8005b34:	2301      	moveq	r3, #1
 8005b36:	2300      	movne	r3, #0
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	79fb      	ldrb	r3, [r7, #7]
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d092      	beq.n	8005a68 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b42:	2300      	movs	r3, #0
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3710      	adds	r7, #16
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <__errno>:
 8005b4c:	4b01      	ldr	r3, [pc, #4]	; (8005b54 <__errno+0x8>)
 8005b4e:	6818      	ldr	r0, [r3, #0]
 8005b50:	4770      	bx	lr
 8005b52:	bf00      	nop
 8005b54:	2000001c 	.word	0x2000001c

08005b58 <__libc_init_array>:
 8005b58:	b570      	push	{r4, r5, r6, lr}
 8005b5a:	4e0d      	ldr	r6, [pc, #52]	; (8005b90 <__libc_init_array+0x38>)
 8005b5c:	4c0d      	ldr	r4, [pc, #52]	; (8005b94 <__libc_init_array+0x3c>)
 8005b5e:	1ba4      	subs	r4, r4, r6
 8005b60:	10a4      	asrs	r4, r4, #2
 8005b62:	2500      	movs	r5, #0
 8005b64:	42a5      	cmp	r5, r4
 8005b66:	d109      	bne.n	8005b7c <__libc_init_array+0x24>
 8005b68:	4e0b      	ldr	r6, [pc, #44]	; (8005b98 <__libc_init_array+0x40>)
 8005b6a:	4c0c      	ldr	r4, [pc, #48]	; (8005b9c <__libc_init_array+0x44>)
 8005b6c:	f000 ff04 	bl	8006978 <_init>
 8005b70:	1ba4      	subs	r4, r4, r6
 8005b72:	10a4      	asrs	r4, r4, #2
 8005b74:	2500      	movs	r5, #0
 8005b76:	42a5      	cmp	r5, r4
 8005b78:	d105      	bne.n	8005b86 <__libc_init_array+0x2e>
 8005b7a:	bd70      	pop	{r4, r5, r6, pc}
 8005b7c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005b80:	4798      	blx	r3
 8005b82:	3501      	adds	r5, #1
 8005b84:	e7ee      	b.n	8005b64 <__libc_init_array+0xc>
 8005b86:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005b8a:	4798      	blx	r3
 8005b8c:	3501      	adds	r5, #1
 8005b8e:	e7f2      	b.n	8005b76 <__libc_init_array+0x1e>
 8005b90:	08006a94 	.word	0x08006a94
 8005b94:	08006a94 	.word	0x08006a94
 8005b98:	08006a94 	.word	0x08006a94
 8005b9c:	08006a98 	.word	0x08006a98

08005ba0 <memset>:
 8005ba0:	4402      	add	r2, r0
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d100      	bne.n	8005baa <memset+0xa>
 8005ba8:	4770      	bx	lr
 8005baa:	f803 1b01 	strb.w	r1, [r3], #1
 8005bae:	e7f9      	b.n	8005ba4 <memset+0x4>

08005bb0 <iprintf>:
 8005bb0:	b40f      	push	{r0, r1, r2, r3}
 8005bb2:	4b0a      	ldr	r3, [pc, #40]	; (8005bdc <iprintf+0x2c>)
 8005bb4:	b513      	push	{r0, r1, r4, lr}
 8005bb6:	681c      	ldr	r4, [r3, #0]
 8005bb8:	b124      	cbz	r4, 8005bc4 <iprintf+0x14>
 8005bba:	69a3      	ldr	r3, [r4, #24]
 8005bbc:	b913      	cbnz	r3, 8005bc4 <iprintf+0x14>
 8005bbe:	4620      	mov	r0, r4
 8005bc0:	f000 f84e 	bl	8005c60 <__sinit>
 8005bc4:	ab05      	add	r3, sp, #20
 8005bc6:	9a04      	ldr	r2, [sp, #16]
 8005bc8:	68a1      	ldr	r1, [r4, #8]
 8005bca:	9301      	str	r3, [sp, #4]
 8005bcc:	4620      	mov	r0, r4
 8005bce:	f000 f955 	bl	8005e7c <_vfiprintf_r>
 8005bd2:	b002      	add	sp, #8
 8005bd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bd8:	b004      	add	sp, #16
 8005bda:	4770      	bx	lr
 8005bdc:	2000001c 	.word	0x2000001c

08005be0 <std>:
 8005be0:	2300      	movs	r3, #0
 8005be2:	b510      	push	{r4, lr}
 8005be4:	4604      	mov	r4, r0
 8005be6:	e9c0 3300 	strd	r3, r3, [r0]
 8005bea:	6083      	str	r3, [r0, #8]
 8005bec:	8181      	strh	r1, [r0, #12]
 8005bee:	6643      	str	r3, [r0, #100]	; 0x64
 8005bf0:	81c2      	strh	r2, [r0, #14]
 8005bf2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005bf6:	6183      	str	r3, [r0, #24]
 8005bf8:	4619      	mov	r1, r3
 8005bfa:	2208      	movs	r2, #8
 8005bfc:	305c      	adds	r0, #92	; 0x5c
 8005bfe:	f7ff ffcf 	bl	8005ba0 <memset>
 8005c02:	4b05      	ldr	r3, [pc, #20]	; (8005c18 <std+0x38>)
 8005c04:	6263      	str	r3, [r4, #36]	; 0x24
 8005c06:	4b05      	ldr	r3, [pc, #20]	; (8005c1c <std+0x3c>)
 8005c08:	62a3      	str	r3, [r4, #40]	; 0x28
 8005c0a:	4b05      	ldr	r3, [pc, #20]	; (8005c20 <std+0x40>)
 8005c0c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005c0e:	4b05      	ldr	r3, [pc, #20]	; (8005c24 <std+0x44>)
 8005c10:	6224      	str	r4, [r4, #32]
 8005c12:	6323      	str	r3, [r4, #48]	; 0x30
 8005c14:	bd10      	pop	{r4, pc}
 8005c16:	bf00      	nop
 8005c18:	080063d9 	.word	0x080063d9
 8005c1c:	080063fb 	.word	0x080063fb
 8005c20:	08006433 	.word	0x08006433
 8005c24:	08006457 	.word	0x08006457

08005c28 <_cleanup_r>:
 8005c28:	4901      	ldr	r1, [pc, #4]	; (8005c30 <_cleanup_r+0x8>)
 8005c2a:	f000 b885 	b.w	8005d38 <_fwalk_reent>
 8005c2e:	bf00      	nop
 8005c30:	08006731 	.word	0x08006731

08005c34 <__sfmoreglue>:
 8005c34:	b570      	push	{r4, r5, r6, lr}
 8005c36:	1e4a      	subs	r2, r1, #1
 8005c38:	2568      	movs	r5, #104	; 0x68
 8005c3a:	4355      	muls	r5, r2
 8005c3c:	460e      	mov	r6, r1
 8005c3e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005c42:	f000 f897 	bl	8005d74 <_malloc_r>
 8005c46:	4604      	mov	r4, r0
 8005c48:	b140      	cbz	r0, 8005c5c <__sfmoreglue+0x28>
 8005c4a:	2100      	movs	r1, #0
 8005c4c:	e9c0 1600 	strd	r1, r6, [r0]
 8005c50:	300c      	adds	r0, #12
 8005c52:	60a0      	str	r0, [r4, #8]
 8005c54:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005c58:	f7ff ffa2 	bl	8005ba0 <memset>
 8005c5c:	4620      	mov	r0, r4
 8005c5e:	bd70      	pop	{r4, r5, r6, pc}

08005c60 <__sinit>:
 8005c60:	6983      	ldr	r3, [r0, #24]
 8005c62:	b510      	push	{r4, lr}
 8005c64:	4604      	mov	r4, r0
 8005c66:	bb33      	cbnz	r3, 8005cb6 <__sinit+0x56>
 8005c68:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8005c6c:	6503      	str	r3, [r0, #80]	; 0x50
 8005c6e:	4b12      	ldr	r3, [pc, #72]	; (8005cb8 <__sinit+0x58>)
 8005c70:	4a12      	ldr	r2, [pc, #72]	; (8005cbc <__sinit+0x5c>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	6282      	str	r2, [r0, #40]	; 0x28
 8005c76:	4298      	cmp	r0, r3
 8005c78:	bf04      	itt	eq
 8005c7a:	2301      	moveq	r3, #1
 8005c7c:	6183      	streq	r3, [r0, #24]
 8005c7e:	f000 f81f 	bl	8005cc0 <__sfp>
 8005c82:	6060      	str	r0, [r4, #4]
 8005c84:	4620      	mov	r0, r4
 8005c86:	f000 f81b 	bl	8005cc0 <__sfp>
 8005c8a:	60a0      	str	r0, [r4, #8]
 8005c8c:	4620      	mov	r0, r4
 8005c8e:	f000 f817 	bl	8005cc0 <__sfp>
 8005c92:	2200      	movs	r2, #0
 8005c94:	60e0      	str	r0, [r4, #12]
 8005c96:	2104      	movs	r1, #4
 8005c98:	6860      	ldr	r0, [r4, #4]
 8005c9a:	f7ff ffa1 	bl	8005be0 <std>
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	2109      	movs	r1, #9
 8005ca2:	68a0      	ldr	r0, [r4, #8]
 8005ca4:	f7ff ff9c 	bl	8005be0 <std>
 8005ca8:	2202      	movs	r2, #2
 8005caa:	2112      	movs	r1, #18
 8005cac:	68e0      	ldr	r0, [r4, #12]
 8005cae:	f7ff ff97 	bl	8005be0 <std>
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	61a3      	str	r3, [r4, #24]
 8005cb6:	bd10      	pop	{r4, pc}
 8005cb8:	080069f4 	.word	0x080069f4
 8005cbc:	08005c29 	.word	0x08005c29

08005cc0 <__sfp>:
 8005cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cc2:	4b1b      	ldr	r3, [pc, #108]	; (8005d30 <__sfp+0x70>)
 8005cc4:	681e      	ldr	r6, [r3, #0]
 8005cc6:	69b3      	ldr	r3, [r6, #24]
 8005cc8:	4607      	mov	r7, r0
 8005cca:	b913      	cbnz	r3, 8005cd2 <__sfp+0x12>
 8005ccc:	4630      	mov	r0, r6
 8005cce:	f7ff ffc7 	bl	8005c60 <__sinit>
 8005cd2:	3648      	adds	r6, #72	; 0x48
 8005cd4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005cd8:	3b01      	subs	r3, #1
 8005cda:	d503      	bpl.n	8005ce4 <__sfp+0x24>
 8005cdc:	6833      	ldr	r3, [r6, #0]
 8005cde:	b133      	cbz	r3, 8005cee <__sfp+0x2e>
 8005ce0:	6836      	ldr	r6, [r6, #0]
 8005ce2:	e7f7      	b.n	8005cd4 <__sfp+0x14>
 8005ce4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005ce8:	b16d      	cbz	r5, 8005d06 <__sfp+0x46>
 8005cea:	3468      	adds	r4, #104	; 0x68
 8005cec:	e7f4      	b.n	8005cd8 <__sfp+0x18>
 8005cee:	2104      	movs	r1, #4
 8005cf0:	4638      	mov	r0, r7
 8005cf2:	f7ff ff9f 	bl	8005c34 <__sfmoreglue>
 8005cf6:	6030      	str	r0, [r6, #0]
 8005cf8:	2800      	cmp	r0, #0
 8005cfa:	d1f1      	bne.n	8005ce0 <__sfp+0x20>
 8005cfc:	230c      	movs	r3, #12
 8005cfe:	603b      	str	r3, [r7, #0]
 8005d00:	4604      	mov	r4, r0
 8005d02:	4620      	mov	r0, r4
 8005d04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d06:	4b0b      	ldr	r3, [pc, #44]	; (8005d34 <__sfp+0x74>)
 8005d08:	6665      	str	r5, [r4, #100]	; 0x64
 8005d0a:	e9c4 5500 	strd	r5, r5, [r4]
 8005d0e:	60a5      	str	r5, [r4, #8]
 8005d10:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8005d14:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8005d18:	2208      	movs	r2, #8
 8005d1a:	4629      	mov	r1, r5
 8005d1c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005d20:	f7ff ff3e 	bl	8005ba0 <memset>
 8005d24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005d28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005d2c:	e7e9      	b.n	8005d02 <__sfp+0x42>
 8005d2e:	bf00      	nop
 8005d30:	080069f4 	.word	0x080069f4
 8005d34:	ffff0001 	.word	0xffff0001

08005d38 <_fwalk_reent>:
 8005d38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d3c:	4680      	mov	r8, r0
 8005d3e:	4689      	mov	r9, r1
 8005d40:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005d44:	2600      	movs	r6, #0
 8005d46:	b914      	cbnz	r4, 8005d4e <_fwalk_reent+0x16>
 8005d48:	4630      	mov	r0, r6
 8005d4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d4e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8005d52:	3f01      	subs	r7, #1
 8005d54:	d501      	bpl.n	8005d5a <_fwalk_reent+0x22>
 8005d56:	6824      	ldr	r4, [r4, #0]
 8005d58:	e7f5      	b.n	8005d46 <_fwalk_reent+0xe>
 8005d5a:	89ab      	ldrh	r3, [r5, #12]
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d907      	bls.n	8005d70 <_fwalk_reent+0x38>
 8005d60:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005d64:	3301      	adds	r3, #1
 8005d66:	d003      	beq.n	8005d70 <_fwalk_reent+0x38>
 8005d68:	4629      	mov	r1, r5
 8005d6a:	4640      	mov	r0, r8
 8005d6c:	47c8      	blx	r9
 8005d6e:	4306      	orrs	r6, r0
 8005d70:	3568      	adds	r5, #104	; 0x68
 8005d72:	e7ee      	b.n	8005d52 <_fwalk_reent+0x1a>

08005d74 <_malloc_r>:
 8005d74:	b570      	push	{r4, r5, r6, lr}
 8005d76:	1ccd      	adds	r5, r1, #3
 8005d78:	f025 0503 	bic.w	r5, r5, #3
 8005d7c:	3508      	adds	r5, #8
 8005d7e:	2d0c      	cmp	r5, #12
 8005d80:	bf38      	it	cc
 8005d82:	250c      	movcc	r5, #12
 8005d84:	2d00      	cmp	r5, #0
 8005d86:	4606      	mov	r6, r0
 8005d88:	db01      	blt.n	8005d8e <_malloc_r+0x1a>
 8005d8a:	42a9      	cmp	r1, r5
 8005d8c:	d903      	bls.n	8005d96 <_malloc_r+0x22>
 8005d8e:	230c      	movs	r3, #12
 8005d90:	6033      	str	r3, [r6, #0]
 8005d92:	2000      	movs	r0, #0
 8005d94:	bd70      	pop	{r4, r5, r6, pc}
 8005d96:	f000 fd6b 	bl	8006870 <__malloc_lock>
 8005d9a:	4a21      	ldr	r2, [pc, #132]	; (8005e20 <_malloc_r+0xac>)
 8005d9c:	6814      	ldr	r4, [r2, #0]
 8005d9e:	4621      	mov	r1, r4
 8005da0:	b991      	cbnz	r1, 8005dc8 <_malloc_r+0x54>
 8005da2:	4c20      	ldr	r4, [pc, #128]	; (8005e24 <_malloc_r+0xb0>)
 8005da4:	6823      	ldr	r3, [r4, #0]
 8005da6:	b91b      	cbnz	r3, 8005db0 <_malloc_r+0x3c>
 8005da8:	4630      	mov	r0, r6
 8005daa:	f000 fb05 	bl	80063b8 <_sbrk_r>
 8005dae:	6020      	str	r0, [r4, #0]
 8005db0:	4629      	mov	r1, r5
 8005db2:	4630      	mov	r0, r6
 8005db4:	f000 fb00 	bl	80063b8 <_sbrk_r>
 8005db8:	1c43      	adds	r3, r0, #1
 8005dba:	d124      	bne.n	8005e06 <_malloc_r+0x92>
 8005dbc:	230c      	movs	r3, #12
 8005dbe:	6033      	str	r3, [r6, #0]
 8005dc0:	4630      	mov	r0, r6
 8005dc2:	f000 fd56 	bl	8006872 <__malloc_unlock>
 8005dc6:	e7e4      	b.n	8005d92 <_malloc_r+0x1e>
 8005dc8:	680b      	ldr	r3, [r1, #0]
 8005dca:	1b5b      	subs	r3, r3, r5
 8005dcc:	d418      	bmi.n	8005e00 <_malloc_r+0x8c>
 8005dce:	2b0b      	cmp	r3, #11
 8005dd0:	d90f      	bls.n	8005df2 <_malloc_r+0x7e>
 8005dd2:	600b      	str	r3, [r1, #0]
 8005dd4:	50cd      	str	r5, [r1, r3]
 8005dd6:	18cc      	adds	r4, r1, r3
 8005dd8:	4630      	mov	r0, r6
 8005dda:	f000 fd4a 	bl	8006872 <__malloc_unlock>
 8005dde:	f104 000b 	add.w	r0, r4, #11
 8005de2:	1d23      	adds	r3, r4, #4
 8005de4:	f020 0007 	bic.w	r0, r0, #7
 8005de8:	1ac3      	subs	r3, r0, r3
 8005dea:	d0d3      	beq.n	8005d94 <_malloc_r+0x20>
 8005dec:	425a      	negs	r2, r3
 8005dee:	50e2      	str	r2, [r4, r3]
 8005df0:	e7d0      	b.n	8005d94 <_malloc_r+0x20>
 8005df2:	428c      	cmp	r4, r1
 8005df4:	684b      	ldr	r3, [r1, #4]
 8005df6:	bf16      	itet	ne
 8005df8:	6063      	strne	r3, [r4, #4]
 8005dfa:	6013      	streq	r3, [r2, #0]
 8005dfc:	460c      	movne	r4, r1
 8005dfe:	e7eb      	b.n	8005dd8 <_malloc_r+0x64>
 8005e00:	460c      	mov	r4, r1
 8005e02:	6849      	ldr	r1, [r1, #4]
 8005e04:	e7cc      	b.n	8005da0 <_malloc_r+0x2c>
 8005e06:	1cc4      	adds	r4, r0, #3
 8005e08:	f024 0403 	bic.w	r4, r4, #3
 8005e0c:	42a0      	cmp	r0, r4
 8005e0e:	d005      	beq.n	8005e1c <_malloc_r+0xa8>
 8005e10:	1a21      	subs	r1, r4, r0
 8005e12:	4630      	mov	r0, r6
 8005e14:	f000 fad0 	bl	80063b8 <_sbrk_r>
 8005e18:	3001      	adds	r0, #1
 8005e1a:	d0cf      	beq.n	8005dbc <_malloc_r+0x48>
 8005e1c:	6025      	str	r5, [r4, #0]
 8005e1e:	e7db      	b.n	8005dd8 <_malloc_r+0x64>
 8005e20:	200000a0 	.word	0x200000a0
 8005e24:	200000a4 	.word	0x200000a4

08005e28 <__sfputc_r>:
 8005e28:	6893      	ldr	r3, [r2, #8]
 8005e2a:	3b01      	subs	r3, #1
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	b410      	push	{r4}
 8005e30:	6093      	str	r3, [r2, #8]
 8005e32:	da08      	bge.n	8005e46 <__sfputc_r+0x1e>
 8005e34:	6994      	ldr	r4, [r2, #24]
 8005e36:	42a3      	cmp	r3, r4
 8005e38:	db01      	blt.n	8005e3e <__sfputc_r+0x16>
 8005e3a:	290a      	cmp	r1, #10
 8005e3c:	d103      	bne.n	8005e46 <__sfputc_r+0x1e>
 8005e3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e42:	f000 bb0d 	b.w	8006460 <__swbuf_r>
 8005e46:	6813      	ldr	r3, [r2, #0]
 8005e48:	1c58      	adds	r0, r3, #1
 8005e4a:	6010      	str	r0, [r2, #0]
 8005e4c:	7019      	strb	r1, [r3, #0]
 8005e4e:	4608      	mov	r0, r1
 8005e50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e54:	4770      	bx	lr

08005e56 <__sfputs_r>:
 8005e56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e58:	4606      	mov	r6, r0
 8005e5a:	460f      	mov	r7, r1
 8005e5c:	4614      	mov	r4, r2
 8005e5e:	18d5      	adds	r5, r2, r3
 8005e60:	42ac      	cmp	r4, r5
 8005e62:	d101      	bne.n	8005e68 <__sfputs_r+0x12>
 8005e64:	2000      	movs	r0, #0
 8005e66:	e007      	b.n	8005e78 <__sfputs_r+0x22>
 8005e68:	463a      	mov	r2, r7
 8005e6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e6e:	4630      	mov	r0, r6
 8005e70:	f7ff ffda 	bl	8005e28 <__sfputc_r>
 8005e74:	1c43      	adds	r3, r0, #1
 8005e76:	d1f3      	bne.n	8005e60 <__sfputs_r+0xa>
 8005e78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005e7c <_vfiprintf_r>:
 8005e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e80:	460c      	mov	r4, r1
 8005e82:	b09d      	sub	sp, #116	; 0x74
 8005e84:	4617      	mov	r7, r2
 8005e86:	461d      	mov	r5, r3
 8005e88:	4606      	mov	r6, r0
 8005e8a:	b118      	cbz	r0, 8005e94 <_vfiprintf_r+0x18>
 8005e8c:	6983      	ldr	r3, [r0, #24]
 8005e8e:	b90b      	cbnz	r3, 8005e94 <_vfiprintf_r+0x18>
 8005e90:	f7ff fee6 	bl	8005c60 <__sinit>
 8005e94:	4b7c      	ldr	r3, [pc, #496]	; (8006088 <_vfiprintf_r+0x20c>)
 8005e96:	429c      	cmp	r4, r3
 8005e98:	d158      	bne.n	8005f4c <_vfiprintf_r+0xd0>
 8005e9a:	6874      	ldr	r4, [r6, #4]
 8005e9c:	89a3      	ldrh	r3, [r4, #12]
 8005e9e:	0718      	lsls	r0, r3, #28
 8005ea0:	d55e      	bpl.n	8005f60 <_vfiprintf_r+0xe4>
 8005ea2:	6923      	ldr	r3, [r4, #16]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d05b      	beq.n	8005f60 <_vfiprintf_r+0xe4>
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	9309      	str	r3, [sp, #36]	; 0x24
 8005eac:	2320      	movs	r3, #32
 8005eae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005eb2:	2330      	movs	r3, #48	; 0x30
 8005eb4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005eb8:	9503      	str	r5, [sp, #12]
 8005eba:	f04f 0b01 	mov.w	fp, #1
 8005ebe:	46b8      	mov	r8, r7
 8005ec0:	4645      	mov	r5, r8
 8005ec2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005ec6:	b10b      	cbz	r3, 8005ecc <_vfiprintf_r+0x50>
 8005ec8:	2b25      	cmp	r3, #37	; 0x25
 8005eca:	d154      	bne.n	8005f76 <_vfiprintf_r+0xfa>
 8005ecc:	ebb8 0a07 	subs.w	sl, r8, r7
 8005ed0:	d00b      	beq.n	8005eea <_vfiprintf_r+0x6e>
 8005ed2:	4653      	mov	r3, sl
 8005ed4:	463a      	mov	r2, r7
 8005ed6:	4621      	mov	r1, r4
 8005ed8:	4630      	mov	r0, r6
 8005eda:	f7ff ffbc 	bl	8005e56 <__sfputs_r>
 8005ede:	3001      	adds	r0, #1
 8005ee0:	f000 80c2 	beq.w	8006068 <_vfiprintf_r+0x1ec>
 8005ee4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ee6:	4453      	add	r3, sl
 8005ee8:	9309      	str	r3, [sp, #36]	; 0x24
 8005eea:	f898 3000 	ldrb.w	r3, [r8]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	f000 80ba 	beq.w	8006068 <_vfiprintf_r+0x1ec>
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	f04f 32ff 	mov.w	r2, #4294967295
 8005efa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005efe:	9304      	str	r3, [sp, #16]
 8005f00:	9307      	str	r3, [sp, #28]
 8005f02:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005f06:	931a      	str	r3, [sp, #104]	; 0x68
 8005f08:	46a8      	mov	r8, r5
 8005f0a:	2205      	movs	r2, #5
 8005f0c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8005f10:	485e      	ldr	r0, [pc, #376]	; (800608c <_vfiprintf_r+0x210>)
 8005f12:	f7fa f95d 	bl	80001d0 <memchr>
 8005f16:	9b04      	ldr	r3, [sp, #16]
 8005f18:	bb78      	cbnz	r0, 8005f7a <_vfiprintf_r+0xfe>
 8005f1a:	06d9      	lsls	r1, r3, #27
 8005f1c:	bf44      	itt	mi
 8005f1e:	2220      	movmi	r2, #32
 8005f20:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005f24:	071a      	lsls	r2, r3, #28
 8005f26:	bf44      	itt	mi
 8005f28:	222b      	movmi	r2, #43	; 0x2b
 8005f2a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005f2e:	782a      	ldrb	r2, [r5, #0]
 8005f30:	2a2a      	cmp	r2, #42	; 0x2a
 8005f32:	d02a      	beq.n	8005f8a <_vfiprintf_r+0x10e>
 8005f34:	9a07      	ldr	r2, [sp, #28]
 8005f36:	46a8      	mov	r8, r5
 8005f38:	2000      	movs	r0, #0
 8005f3a:	250a      	movs	r5, #10
 8005f3c:	4641      	mov	r1, r8
 8005f3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f42:	3b30      	subs	r3, #48	; 0x30
 8005f44:	2b09      	cmp	r3, #9
 8005f46:	d969      	bls.n	800601c <_vfiprintf_r+0x1a0>
 8005f48:	b360      	cbz	r0, 8005fa4 <_vfiprintf_r+0x128>
 8005f4a:	e024      	b.n	8005f96 <_vfiprintf_r+0x11a>
 8005f4c:	4b50      	ldr	r3, [pc, #320]	; (8006090 <_vfiprintf_r+0x214>)
 8005f4e:	429c      	cmp	r4, r3
 8005f50:	d101      	bne.n	8005f56 <_vfiprintf_r+0xda>
 8005f52:	68b4      	ldr	r4, [r6, #8]
 8005f54:	e7a2      	b.n	8005e9c <_vfiprintf_r+0x20>
 8005f56:	4b4f      	ldr	r3, [pc, #316]	; (8006094 <_vfiprintf_r+0x218>)
 8005f58:	429c      	cmp	r4, r3
 8005f5a:	bf08      	it	eq
 8005f5c:	68f4      	ldreq	r4, [r6, #12]
 8005f5e:	e79d      	b.n	8005e9c <_vfiprintf_r+0x20>
 8005f60:	4621      	mov	r1, r4
 8005f62:	4630      	mov	r0, r6
 8005f64:	f000 fae0 	bl	8006528 <__swsetup_r>
 8005f68:	2800      	cmp	r0, #0
 8005f6a:	d09d      	beq.n	8005ea8 <_vfiprintf_r+0x2c>
 8005f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f70:	b01d      	add	sp, #116	; 0x74
 8005f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f76:	46a8      	mov	r8, r5
 8005f78:	e7a2      	b.n	8005ec0 <_vfiprintf_r+0x44>
 8005f7a:	4a44      	ldr	r2, [pc, #272]	; (800608c <_vfiprintf_r+0x210>)
 8005f7c:	1a80      	subs	r0, r0, r2
 8005f7e:	fa0b f000 	lsl.w	r0, fp, r0
 8005f82:	4318      	orrs	r0, r3
 8005f84:	9004      	str	r0, [sp, #16]
 8005f86:	4645      	mov	r5, r8
 8005f88:	e7be      	b.n	8005f08 <_vfiprintf_r+0x8c>
 8005f8a:	9a03      	ldr	r2, [sp, #12]
 8005f8c:	1d11      	adds	r1, r2, #4
 8005f8e:	6812      	ldr	r2, [r2, #0]
 8005f90:	9103      	str	r1, [sp, #12]
 8005f92:	2a00      	cmp	r2, #0
 8005f94:	db01      	blt.n	8005f9a <_vfiprintf_r+0x11e>
 8005f96:	9207      	str	r2, [sp, #28]
 8005f98:	e004      	b.n	8005fa4 <_vfiprintf_r+0x128>
 8005f9a:	4252      	negs	r2, r2
 8005f9c:	f043 0302 	orr.w	r3, r3, #2
 8005fa0:	9207      	str	r2, [sp, #28]
 8005fa2:	9304      	str	r3, [sp, #16]
 8005fa4:	f898 3000 	ldrb.w	r3, [r8]
 8005fa8:	2b2e      	cmp	r3, #46	; 0x2e
 8005faa:	d10e      	bne.n	8005fca <_vfiprintf_r+0x14e>
 8005fac:	f898 3001 	ldrb.w	r3, [r8, #1]
 8005fb0:	2b2a      	cmp	r3, #42	; 0x2a
 8005fb2:	d138      	bne.n	8006026 <_vfiprintf_r+0x1aa>
 8005fb4:	9b03      	ldr	r3, [sp, #12]
 8005fb6:	1d1a      	adds	r2, r3, #4
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	9203      	str	r2, [sp, #12]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	bfb8      	it	lt
 8005fc0:	f04f 33ff 	movlt.w	r3, #4294967295
 8005fc4:	f108 0802 	add.w	r8, r8, #2
 8005fc8:	9305      	str	r3, [sp, #20]
 8005fca:	4d33      	ldr	r5, [pc, #204]	; (8006098 <_vfiprintf_r+0x21c>)
 8005fcc:	f898 1000 	ldrb.w	r1, [r8]
 8005fd0:	2203      	movs	r2, #3
 8005fd2:	4628      	mov	r0, r5
 8005fd4:	f7fa f8fc 	bl	80001d0 <memchr>
 8005fd8:	b140      	cbz	r0, 8005fec <_vfiprintf_r+0x170>
 8005fda:	2340      	movs	r3, #64	; 0x40
 8005fdc:	1b40      	subs	r0, r0, r5
 8005fde:	fa03 f000 	lsl.w	r0, r3, r0
 8005fe2:	9b04      	ldr	r3, [sp, #16]
 8005fe4:	4303      	orrs	r3, r0
 8005fe6:	f108 0801 	add.w	r8, r8, #1
 8005fea:	9304      	str	r3, [sp, #16]
 8005fec:	f898 1000 	ldrb.w	r1, [r8]
 8005ff0:	482a      	ldr	r0, [pc, #168]	; (800609c <_vfiprintf_r+0x220>)
 8005ff2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005ff6:	2206      	movs	r2, #6
 8005ff8:	f108 0701 	add.w	r7, r8, #1
 8005ffc:	f7fa f8e8 	bl	80001d0 <memchr>
 8006000:	2800      	cmp	r0, #0
 8006002:	d037      	beq.n	8006074 <_vfiprintf_r+0x1f8>
 8006004:	4b26      	ldr	r3, [pc, #152]	; (80060a0 <_vfiprintf_r+0x224>)
 8006006:	bb1b      	cbnz	r3, 8006050 <_vfiprintf_r+0x1d4>
 8006008:	9b03      	ldr	r3, [sp, #12]
 800600a:	3307      	adds	r3, #7
 800600c:	f023 0307 	bic.w	r3, r3, #7
 8006010:	3308      	adds	r3, #8
 8006012:	9303      	str	r3, [sp, #12]
 8006014:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006016:	444b      	add	r3, r9
 8006018:	9309      	str	r3, [sp, #36]	; 0x24
 800601a:	e750      	b.n	8005ebe <_vfiprintf_r+0x42>
 800601c:	fb05 3202 	mla	r2, r5, r2, r3
 8006020:	2001      	movs	r0, #1
 8006022:	4688      	mov	r8, r1
 8006024:	e78a      	b.n	8005f3c <_vfiprintf_r+0xc0>
 8006026:	2300      	movs	r3, #0
 8006028:	f108 0801 	add.w	r8, r8, #1
 800602c:	9305      	str	r3, [sp, #20]
 800602e:	4619      	mov	r1, r3
 8006030:	250a      	movs	r5, #10
 8006032:	4640      	mov	r0, r8
 8006034:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006038:	3a30      	subs	r2, #48	; 0x30
 800603a:	2a09      	cmp	r2, #9
 800603c:	d903      	bls.n	8006046 <_vfiprintf_r+0x1ca>
 800603e:	2b00      	cmp	r3, #0
 8006040:	d0c3      	beq.n	8005fca <_vfiprintf_r+0x14e>
 8006042:	9105      	str	r1, [sp, #20]
 8006044:	e7c1      	b.n	8005fca <_vfiprintf_r+0x14e>
 8006046:	fb05 2101 	mla	r1, r5, r1, r2
 800604a:	2301      	movs	r3, #1
 800604c:	4680      	mov	r8, r0
 800604e:	e7f0      	b.n	8006032 <_vfiprintf_r+0x1b6>
 8006050:	ab03      	add	r3, sp, #12
 8006052:	9300      	str	r3, [sp, #0]
 8006054:	4622      	mov	r2, r4
 8006056:	4b13      	ldr	r3, [pc, #76]	; (80060a4 <_vfiprintf_r+0x228>)
 8006058:	a904      	add	r1, sp, #16
 800605a:	4630      	mov	r0, r6
 800605c:	f3af 8000 	nop.w
 8006060:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006064:	4681      	mov	r9, r0
 8006066:	d1d5      	bne.n	8006014 <_vfiprintf_r+0x198>
 8006068:	89a3      	ldrh	r3, [r4, #12]
 800606a:	065b      	lsls	r3, r3, #25
 800606c:	f53f af7e 	bmi.w	8005f6c <_vfiprintf_r+0xf0>
 8006070:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006072:	e77d      	b.n	8005f70 <_vfiprintf_r+0xf4>
 8006074:	ab03      	add	r3, sp, #12
 8006076:	9300      	str	r3, [sp, #0]
 8006078:	4622      	mov	r2, r4
 800607a:	4b0a      	ldr	r3, [pc, #40]	; (80060a4 <_vfiprintf_r+0x228>)
 800607c:	a904      	add	r1, sp, #16
 800607e:	4630      	mov	r0, r6
 8006080:	f000 f888 	bl	8006194 <_printf_i>
 8006084:	e7ec      	b.n	8006060 <_vfiprintf_r+0x1e4>
 8006086:	bf00      	nop
 8006088:	08006a18 	.word	0x08006a18
 800608c:	08006a58 	.word	0x08006a58
 8006090:	08006a38 	.word	0x08006a38
 8006094:	080069f8 	.word	0x080069f8
 8006098:	08006a5e 	.word	0x08006a5e
 800609c:	08006a62 	.word	0x08006a62
 80060a0:	00000000 	.word	0x00000000
 80060a4:	08005e57 	.word	0x08005e57

080060a8 <_printf_common>:
 80060a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060ac:	4691      	mov	r9, r2
 80060ae:	461f      	mov	r7, r3
 80060b0:	688a      	ldr	r2, [r1, #8]
 80060b2:	690b      	ldr	r3, [r1, #16]
 80060b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80060b8:	4293      	cmp	r3, r2
 80060ba:	bfb8      	it	lt
 80060bc:	4613      	movlt	r3, r2
 80060be:	f8c9 3000 	str.w	r3, [r9]
 80060c2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80060c6:	4606      	mov	r6, r0
 80060c8:	460c      	mov	r4, r1
 80060ca:	b112      	cbz	r2, 80060d2 <_printf_common+0x2a>
 80060cc:	3301      	adds	r3, #1
 80060ce:	f8c9 3000 	str.w	r3, [r9]
 80060d2:	6823      	ldr	r3, [r4, #0]
 80060d4:	0699      	lsls	r1, r3, #26
 80060d6:	bf42      	ittt	mi
 80060d8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80060dc:	3302      	addmi	r3, #2
 80060de:	f8c9 3000 	strmi.w	r3, [r9]
 80060e2:	6825      	ldr	r5, [r4, #0]
 80060e4:	f015 0506 	ands.w	r5, r5, #6
 80060e8:	d107      	bne.n	80060fa <_printf_common+0x52>
 80060ea:	f104 0a19 	add.w	sl, r4, #25
 80060ee:	68e3      	ldr	r3, [r4, #12]
 80060f0:	f8d9 2000 	ldr.w	r2, [r9]
 80060f4:	1a9b      	subs	r3, r3, r2
 80060f6:	42ab      	cmp	r3, r5
 80060f8:	dc28      	bgt.n	800614c <_printf_common+0xa4>
 80060fa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80060fe:	6822      	ldr	r2, [r4, #0]
 8006100:	3300      	adds	r3, #0
 8006102:	bf18      	it	ne
 8006104:	2301      	movne	r3, #1
 8006106:	0692      	lsls	r2, r2, #26
 8006108:	d42d      	bmi.n	8006166 <_printf_common+0xbe>
 800610a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800610e:	4639      	mov	r1, r7
 8006110:	4630      	mov	r0, r6
 8006112:	47c0      	blx	r8
 8006114:	3001      	adds	r0, #1
 8006116:	d020      	beq.n	800615a <_printf_common+0xb2>
 8006118:	6823      	ldr	r3, [r4, #0]
 800611a:	68e5      	ldr	r5, [r4, #12]
 800611c:	f8d9 2000 	ldr.w	r2, [r9]
 8006120:	f003 0306 	and.w	r3, r3, #6
 8006124:	2b04      	cmp	r3, #4
 8006126:	bf08      	it	eq
 8006128:	1aad      	subeq	r5, r5, r2
 800612a:	68a3      	ldr	r3, [r4, #8]
 800612c:	6922      	ldr	r2, [r4, #16]
 800612e:	bf0c      	ite	eq
 8006130:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006134:	2500      	movne	r5, #0
 8006136:	4293      	cmp	r3, r2
 8006138:	bfc4      	itt	gt
 800613a:	1a9b      	subgt	r3, r3, r2
 800613c:	18ed      	addgt	r5, r5, r3
 800613e:	f04f 0900 	mov.w	r9, #0
 8006142:	341a      	adds	r4, #26
 8006144:	454d      	cmp	r5, r9
 8006146:	d11a      	bne.n	800617e <_printf_common+0xd6>
 8006148:	2000      	movs	r0, #0
 800614a:	e008      	b.n	800615e <_printf_common+0xb6>
 800614c:	2301      	movs	r3, #1
 800614e:	4652      	mov	r2, sl
 8006150:	4639      	mov	r1, r7
 8006152:	4630      	mov	r0, r6
 8006154:	47c0      	blx	r8
 8006156:	3001      	adds	r0, #1
 8006158:	d103      	bne.n	8006162 <_printf_common+0xba>
 800615a:	f04f 30ff 	mov.w	r0, #4294967295
 800615e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006162:	3501      	adds	r5, #1
 8006164:	e7c3      	b.n	80060ee <_printf_common+0x46>
 8006166:	18e1      	adds	r1, r4, r3
 8006168:	1c5a      	adds	r2, r3, #1
 800616a:	2030      	movs	r0, #48	; 0x30
 800616c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006170:	4422      	add	r2, r4
 8006172:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006176:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800617a:	3302      	adds	r3, #2
 800617c:	e7c5      	b.n	800610a <_printf_common+0x62>
 800617e:	2301      	movs	r3, #1
 8006180:	4622      	mov	r2, r4
 8006182:	4639      	mov	r1, r7
 8006184:	4630      	mov	r0, r6
 8006186:	47c0      	blx	r8
 8006188:	3001      	adds	r0, #1
 800618a:	d0e6      	beq.n	800615a <_printf_common+0xb2>
 800618c:	f109 0901 	add.w	r9, r9, #1
 8006190:	e7d8      	b.n	8006144 <_printf_common+0x9c>
	...

08006194 <_printf_i>:
 8006194:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006198:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800619c:	460c      	mov	r4, r1
 800619e:	7e09      	ldrb	r1, [r1, #24]
 80061a0:	b085      	sub	sp, #20
 80061a2:	296e      	cmp	r1, #110	; 0x6e
 80061a4:	4617      	mov	r7, r2
 80061a6:	4606      	mov	r6, r0
 80061a8:	4698      	mov	r8, r3
 80061aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80061ac:	f000 80b3 	beq.w	8006316 <_printf_i+0x182>
 80061b0:	d822      	bhi.n	80061f8 <_printf_i+0x64>
 80061b2:	2963      	cmp	r1, #99	; 0x63
 80061b4:	d036      	beq.n	8006224 <_printf_i+0x90>
 80061b6:	d80a      	bhi.n	80061ce <_printf_i+0x3a>
 80061b8:	2900      	cmp	r1, #0
 80061ba:	f000 80b9 	beq.w	8006330 <_printf_i+0x19c>
 80061be:	2958      	cmp	r1, #88	; 0x58
 80061c0:	f000 8083 	beq.w	80062ca <_printf_i+0x136>
 80061c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061c8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80061cc:	e032      	b.n	8006234 <_printf_i+0xa0>
 80061ce:	2964      	cmp	r1, #100	; 0x64
 80061d0:	d001      	beq.n	80061d6 <_printf_i+0x42>
 80061d2:	2969      	cmp	r1, #105	; 0x69
 80061d4:	d1f6      	bne.n	80061c4 <_printf_i+0x30>
 80061d6:	6820      	ldr	r0, [r4, #0]
 80061d8:	6813      	ldr	r3, [r2, #0]
 80061da:	0605      	lsls	r5, r0, #24
 80061dc:	f103 0104 	add.w	r1, r3, #4
 80061e0:	d52a      	bpl.n	8006238 <_printf_i+0xa4>
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	6011      	str	r1, [r2, #0]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	da03      	bge.n	80061f2 <_printf_i+0x5e>
 80061ea:	222d      	movs	r2, #45	; 0x2d
 80061ec:	425b      	negs	r3, r3
 80061ee:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80061f2:	486f      	ldr	r0, [pc, #444]	; (80063b0 <_printf_i+0x21c>)
 80061f4:	220a      	movs	r2, #10
 80061f6:	e039      	b.n	800626c <_printf_i+0xd8>
 80061f8:	2973      	cmp	r1, #115	; 0x73
 80061fa:	f000 809d 	beq.w	8006338 <_printf_i+0x1a4>
 80061fe:	d808      	bhi.n	8006212 <_printf_i+0x7e>
 8006200:	296f      	cmp	r1, #111	; 0x6f
 8006202:	d020      	beq.n	8006246 <_printf_i+0xb2>
 8006204:	2970      	cmp	r1, #112	; 0x70
 8006206:	d1dd      	bne.n	80061c4 <_printf_i+0x30>
 8006208:	6823      	ldr	r3, [r4, #0]
 800620a:	f043 0320 	orr.w	r3, r3, #32
 800620e:	6023      	str	r3, [r4, #0]
 8006210:	e003      	b.n	800621a <_printf_i+0x86>
 8006212:	2975      	cmp	r1, #117	; 0x75
 8006214:	d017      	beq.n	8006246 <_printf_i+0xb2>
 8006216:	2978      	cmp	r1, #120	; 0x78
 8006218:	d1d4      	bne.n	80061c4 <_printf_i+0x30>
 800621a:	2378      	movs	r3, #120	; 0x78
 800621c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006220:	4864      	ldr	r0, [pc, #400]	; (80063b4 <_printf_i+0x220>)
 8006222:	e055      	b.n	80062d0 <_printf_i+0x13c>
 8006224:	6813      	ldr	r3, [r2, #0]
 8006226:	1d19      	adds	r1, r3, #4
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	6011      	str	r1, [r2, #0]
 800622c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006230:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006234:	2301      	movs	r3, #1
 8006236:	e08c      	b.n	8006352 <_printf_i+0x1be>
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	6011      	str	r1, [r2, #0]
 800623c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006240:	bf18      	it	ne
 8006242:	b21b      	sxthne	r3, r3
 8006244:	e7cf      	b.n	80061e6 <_printf_i+0x52>
 8006246:	6813      	ldr	r3, [r2, #0]
 8006248:	6825      	ldr	r5, [r4, #0]
 800624a:	1d18      	adds	r0, r3, #4
 800624c:	6010      	str	r0, [r2, #0]
 800624e:	0628      	lsls	r0, r5, #24
 8006250:	d501      	bpl.n	8006256 <_printf_i+0xc2>
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	e002      	b.n	800625c <_printf_i+0xc8>
 8006256:	0668      	lsls	r0, r5, #25
 8006258:	d5fb      	bpl.n	8006252 <_printf_i+0xbe>
 800625a:	881b      	ldrh	r3, [r3, #0]
 800625c:	4854      	ldr	r0, [pc, #336]	; (80063b0 <_printf_i+0x21c>)
 800625e:	296f      	cmp	r1, #111	; 0x6f
 8006260:	bf14      	ite	ne
 8006262:	220a      	movne	r2, #10
 8006264:	2208      	moveq	r2, #8
 8006266:	2100      	movs	r1, #0
 8006268:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800626c:	6865      	ldr	r5, [r4, #4]
 800626e:	60a5      	str	r5, [r4, #8]
 8006270:	2d00      	cmp	r5, #0
 8006272:	f2c0 8095 	blt.w	80063a0 <_printf_i+0x20c>
 8006276:	6821      	ldr	r1, [r4, #0]
 8006278:	f021 0104 	bic.w	r1, r1, #4
 800627c:	6021      	str	r1, [r4, #0]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d13d      	bne.n	80062fe <_printf_i+0x16a>
 8006282:	2d00      	cmp	r5, #0
 8006284:	f040 808e 	bne.w	80063a4 <_printf_i+0x210>
 8006288:	4665      	mov	r5, ip
 800628a:	2a08      	cmp	r2, #8
 800628c:	d10b      	bne.n	80062a6 <_printf_i+0x112>
 800628e:	6823      	ldr	r3, [r4, #0]
 8006290:	07db      	lsls	r3, r3, #31
 8006292:	d508      	bpl.n	80062a6 <_printf_i+0x112>
 8006294:	6923      	ldr	r3, [r4, #16]
 8006296:	6862      	ldr	r2, [r4, #4]
 8006298:	429a      	cmp	r2, r3
 800629a:	bfde      	ittt	le
 800629c:	2330      	movle	r3, #48	; 0x30
 800629e:	f805 3c01 	strble.w	r3, [r5, #-1]
 80062a2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80062a6:	ebac 0305 	sub.w	r3, ip, r5
 80062aa:	6123      	str	r3, [r4, #16]
 80062ac:	f8cd 8000 	str.w	r8, [sp]
 80062b0:	463b      	mov	r3, r7
 80062b2:	aa03      	add	r2, sp, #12
 80062b4:	4621      	mov	r1, r4
 80062b6:	4630      	mov	r0, r6
 80062b8:	f7ff fef6 	bl	80060a8 <_printf_common>
 80062bc:	3001      	adds	r0, #1
 80062be:	d14d      	bne.n	800635c <_printf_i+0x1c8>
 80062c0:	f04f 30ff 	mov.w	r0, #4294967295
 80062c4:	b005      	add	sp, #20
 80062c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80062ca:	4839      	ldr	r0, [pc, #228]	; (80063b0 <_printf_i+0x21c>)
 80062cc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80062d0:	6813      	ldr	r3, [r2, #0]
 80062d2:	6821      	ldr	r1, [r4, #0]
 80062d4:	1d1d      	adds	r5, r3, #4
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	6015      	str	r5, [r2, #0]
 80062da:	060a      	lsls	r2, r1, #24
 80062dc:	d50b      	bpl.n	80062f6 <_printf_i+0x162>
 80062de:	07ca      	lsls	r2, r1, #31
 80062e0:	bf44      	itt	mi
 80062e2:	f041 0120 	orrmi.w	r1, r1, #32
 80062e6:	6021      	strmi	r1, [r4, #0]
 80062e8:	b91b      	cbnz	r3, 80062f2 <_printf_i+0x15e>
 80062ea:	6822      	ldr	r2, [r4, #0]
 80062ec:	f022 0220 	bic.w	r2, r2, #32
 80062f0:	6022      	str	r2, [r4, #0]
 80062f2:	2210      	movs	r2, #16
 80062f4:	e7b7      	b.n	8006266 <_printf_i+0xd2>
 80062f6:	064d      	lsls	r5, r1, #25
 80062f8:	bf48      	it	mi
 80062fa:	b29b      	uxthmi	r3, r3
 80062fc:	e7ef      	b.n	80062de <_printf_i+0x14a>
 80062fe:	4665      	mov	r5, ip
 8006300:	fbb3 f1f2 	udiv	r1, r3, r2
 8006304:	fb02 3311 	mls	r3, r2, r1, r3
 8006308:	5cc3      	ldrb	r3, [r0, r3]
 800630a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800630e:	460b      	mov	r3, r1
 8006310:	2900      	cmp	r1, #0
 8006312:	d1f5      	bne.n	8006300 <_printf_i+0x16c>
 8006314:	e7b9      	b.n	800628a <_printf_i+0xf6>
 8006316:	6813      	ldr	r3, [r2, #0]
 8006318:	6825      	ldr	r5, [r4, #0]
 800631a:	6961      	ldr	r1, [r4, #20]
 800631c:	1d18      	adds	r0, r3, #4
 800631e:	6010      	str	r0, [r2, #0]
 8006320:	0628      	lsls	r0, r5, #24
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	d501      	bpl.n	800632a <_printf_i+0x196>
 8006326:	6019      	str	r1, [r3, #0]
 8006328:	e002      	b.n	8006330 <_printf_i+0x19c>
 800632a:	066a      	lsls	r2, r5, #25
 800632c:	d5fb      	bpl.n	8006326 <_printf_i+0x192>
 800632e:	8019      	strh	r1, [r3, #0]
 8006330:	2300      	movs	r3, #0
 8006332:	6123      	str	r3, [r4, #16]
 8006334:	4665      	mov	r5, ip
 8006336:	e7b9      	b.n	80062ac <_printf_i+0x118>
 8006338:	6813      	ldr	r3, [r2, #0]
 800633a:	1d19      	adds	r1, r3, #4
 800633c:	6011      	str	r1, [r2, #0]
 800633e:	681d      	ldr	r5, [r3, #0]
 8006340:	6862      	ldr	r2, [r4, #4]
 8006342:	2100      	movs	r1, #0
 8006344:	4628      	mov	r0, r5
 8006346:	f7f9 ff43 	bl	80001d0 <memchr>
 800634a:	b108      	cbz	r0, 8006350 <_printf_i+0x1bc>
 800634c:	1b40      	subs	r0, r0, r5
 800634e:	6060      	str	r0, [r4, #4]
 8006350:	6863      	ldr	r3, [r4, #4]
 8006352:	6123      	str	r3, [r4, #16]
 8006354:	2300      	movs	r3, #0
 8006356:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800635a:	e7a7      	b.n	80062ac <_printf_i+0x118>
 800635c:	6923      	ldr	r3, [r4, #16]
 800635e:	462a      	mov	r2, r5
 8006360:	4639      	mov	r1, r7
 8006362:	4630      	mov	r0, r6
 8006364:	47c0      	blx	r8
 8006366:	3001      	adds	r0, #1
 8006368:	d0aa      	beq.n	80062c0 <_printf_i+0x12c>
 800636a:	6823      	ldr	r3, [r4, #0]
 800636c:	079b      	lsls	r3, r3, #30
 800636e:	d413      	bmi.n	8006398 <_printf_i+0x204>
 8006370:	68e0      	ldr	r0, [r4, #12]
 8006372:	9b03      	ldr	r3, [sp, #12]
 8006374:	4298      	cmp	r0, r3
 8006376:	bfb8      	it	lt
 8006378:	4618      	movlt	r0, r3
 800637a:	e7a3      	b.n	80062c4 <_printf_i+0x130>
 800637c:	2301      	movs	r3, #1
 800637e:	464a      	mov	r2, r9
 8006380:	4639      	mov	r1, r7
 8006382:	4630      	mov	r0, r6
 8006384:	47c0      	blx	r8
 8006386:	3001      	adds	r0, #1
 8006388:	d09a      	beq.n	80062c0 <_printf_i+0x12c>
 800638a:	3501      	adds	r5, #1
 800638c:	68e3      	ldr	r3, [r4, #12]
 800638e:	9a03      	ldr	r2, [sp, #12]
 8006390:	1a9b      	subs	r3, r3, r2
 8006392:	42ab      	cmp	r3, r5
 8006394:	dcf2      	bgt.n	800637c <_printf_i+0x1e8>
 8006396:	e7eb      	b.n	8006370 <_printf_i+0x1dc>
 8006398:	2500      	movs	r5, #0
 800639a:	f104 0919 	add.w	r9, r4, #25
 800639e:	e7f5      	b.n	800638c <_printf_i+0x1f8>
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d1ac      	bne.n	80062fe <_printf_i+0x16a>
 80063a4:	7803      	ldrb	r3, [r0, #0]
 80063a6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80063aa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80063ae:	e76c      	b.n	800628a <_printf_i+0xf6>
 80063b0:	08006a69 	.word	0x08006a69
 80063b4:	08006a7a 	.word	0x08006a7a

080063b8 <_sbrk_r>:
 80063b8:	b538      	push	{r3, r4, r5, lr}
 80063ba:	4c06      	ldr	r4, [pc, #24]	; (80063d4 <_sbrk_r+0x1c>)
 80063bc:	2300      	movs	r3, #0
 80063be:	4605      	mov	r5, r0
 80063c0:	4608      	mov	r0, r1
 80063c2:	6023      	str	r3, [r4, #0]
 80063c4:	f7fa fc80 	bl	8000cc8 <_sbrk>
 80063c8:	1c43      	adds	r3, r0, #1
 80063ca:	d102      	bne.n	80063d2 <_sbrk_r+0x1a>
 80063cc:	6823      	ldr	r3, [r4, #0]
 80063ce:	b103      	cbz	r3, 80063d2 <_sbrk_r+0x1a>
 80063d0:	602b      	str	r3, [r5, #0]
 80063d2:	bd38      	pop	{r3, r4, r5, pc}
 80063d4:	20000240 	.word	0x20000240

080063d8 <__sread>:
 80063d8:	b510      	push	{r4, lr}
 80063da:	460c      	mov	r4, r1
 80063dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063e0:	f000 fa96 	bl	8006910 <_read_r>
 80063e4:	2800      	cmp	r0, #0
 80063e6:	bfab      	itete	ge
 80063e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80063ea:	89a3      	ldrhlt	r3, [r4, #12]
 80063ec:	181b      	addge	r3, r3, r0
 80063ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80063f2:	bfac      	ite	ge
 80063f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80063f6:	81a3      	strhlt	r3, [r4, #12]
 80063f8:	bd10      	pop	{r4, pc}

080063fa <__swrite>:
 80063fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063fe:	461f      	mov	r7, r3
 8006400:	898b      	ldrh	r3, [r1, #12]
 8006402:	05db      	lsls	r3, r3, #23
 8006404:	4605      	mov	r5, r0
 8006406:	460c      	mov	r4, r1
 8006408:	4616      	mov	r6, r2
 800640a:	d505      	bpl.n	8006418 <__swrite+0x1e>
 800640c:	2302      	movs	r3, #2
 800640e:	2200      	movs	r2, #0
 8006410:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006414:	f000 f9b6 	bl	8006784 <_lseek_r>
 8006418:	89a3      	ldrh	r3, [r4, #12]
 800641a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800641e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006422:	81a3      	strh	r3, [r4, #12]
 8006424:	4632      	mov	r2, r6
 8006426:	463b      	mov	r3, r7
 8006428:	4628      	mov	r0, r5
 800642a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800642e:	f000 b869 	b.w	8006504 <_write_r>

08006432 <__sseek>:
 8006432:	b510      	push	{r4, lr}
 8006434:	460c      	mov	r4, r1
 8006436:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800643a:	f000 f9a3 	bl	8006784 <_lseek_r>
 800643e:	1c43      	adds	r3, r0, #1
 8006440:	89a3      	ldrh	r3, [r4, #12]
 8006442:	bf15      	itete	ne
 8006444:	6560      	strne	r0, [r4, #84]	; 0x54
 8006446:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800644a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800644e:	81a3      	strheq	r3, [r4, #12]
 8006450:	bf18      	it	ne
 8006452:	81a3      	strhne	r3, [r4, #12]
 8006454:	bd10      	pop	{r4, pc}

08006456 <__sclose>:
 8006456:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800645a:	f000 b8d3 	b.w	8006604 <_close_r>
	...

08006460 <__swbuf_r>:
 8006460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006462:	460e      	mov	r6, r1
 8006464:	4614      	mov	r4, r2
 8006466:	4605      	mov	r5, r0
 8006468:	b118      	cbz	r0, 8006472 <__swbuf_r+0x12>
 800646a:	6983      	ldr	r3, [r0, #24]
 800646c:	b90b      	cbnz	r3, 8006472 <__swbuf_r+0x12>
 800646e:	f7ff fbf7 	bl	8005c60 <__sinit>
 8006472:	4b21      	ldr	r3, [pc, #132]	; (80064f8 <__swbuf_r+0x98>)
 8006474:	429c      	cmp	r4, r3
 8006476:	d12a      	bne.n	80064ce <__swbuf_r+0x6e>
 8006478:	686c      	ldr	r4, [r5, #4]
 800647a:	69a3      	ldr	r3, [r4, #24]
 800647c:	60a3      	str	r3, [r4, #8]
 800647e:	89a3      	ldrh	r3, [r4, #12]
 8006480:	071a      	lsls	r2, r3, #28
 8006482:	d52e      	bpl.n	80064e2 <__swbuf_r+0x82>
 8006484:	6923      	ldr	r3, [r4, #16]
 8006486:	b363      	cbz	r3, 80064e2 <__swbuf_r+0x82>
 8006488:	6923      	ldr	r3, [r4, #16]
 800648a:	6820      	ldr	r0, [r4, #0]
 800648c:	1ac0      	subs	r0, r0, r3
 800648e:	6963      	ldr	r3, [r4, #20]
 8006490:	b2f6      	uxtb	r6, r6
 8006492:	4283      	cmp	r3, r0
 8006494:	4637      	mov	r7, r6
 8006496:	dc04      	bgt.n	80064a2 <__swbuf_r+0x42>
 8006498:	4621      	mov	r1, r4
 800649a:	4628      	mov	r0, r5
 800649c:	f000 f948 	bl	8006730 <_fflush_r>
 80064a0:	bb28      	cbnz	r0, 80064ee <__swbuf_r+0x8e>
 80064a2:	68a3      	ldr	r3, [r4, #8]
 80064a4:	3b01      	subs	r3, #1
 80064a6:	60a3      	str	r3, [r4, #8]
 80064a8:	6823      	ldr	r3, [r4, #0]
 80064aa:	1c5a      	adds	r2, r3, #1
 80064ac:	6022      	str	r2, [r4, #0]
 80064ae:	701e      	strb	r6, [r3, #0]
 80064b0:	6963      	ldr	r3, [r4, #20]
 80064b2:	3001      	adds	r0, #1
 80064b4:	4283      	cmp	r3, r0
 80064b6:	d004      	beq.n	80064c2 <__swbuf_r+0x62>
 80064b8:	89a3      	ldrh	r3, [r4, #12]
 80064ba:	07db      	lsls	r3, r3, #31
 80064bc:	d519      	bpl.n	80064f2 <__swbuf_r+0x92>
 80064be:	2e0a      	cmp	r6, #10
 80064c0:	d117      	bne.n	80064f2 <__swbuf_r+0x92>
 80064c2:	4621      	mov	r1, r4
 80064c4:	4628      	mov	r0, r5
 80064c6:	f000 f933 	bl	8006730 <_fflush_r>
 80064ca:	b190      	cbz	r0, 80064f2 <__swbuf_r+0x92>
 80064cc:	e00f      	b.n	80064ee <__swbuf_r+0x8e>
 80064ce:	4b0b      	ldr	r3, [pc, #44]	; (80064fc <__swbuf_r+0x9c>)
 80064d0:	429c      	cmp	r4, r3
 80064d2:	d101      	bne.n	80064d8 <__swbuf_r+0x78>
 80064d4:	68ac      	ldr	r4, [r5, #8]
 80064d6:	e7d0      	b.n	800647a <__swbuf_r+0x1a>
 80064d8:	4b09      	ldr	r3, [pc, #36]	; (8006500 <__swbuf_r+0xa0>)
 80064da:	429c      	cmp	r4, r3
 80064dc:	bf08      	it	eq
 80064de:	68ec      	ldreq	r4, [r5, #12]
 80064e0:	e7cb      	b.n	800647a <__swbuf_r+0x1a>
 80064e2:	4621      	mov	r1, r4
 80064e4:	4628      	mov	r0, r5
 80064e6:	f000 f81f 	bl	8006528 <__swsetup_r>
 80064ea:	2800      	cmp	r0, #0
 80064ec:	d0cc      	beq.n	8006488 <__swbuf_r+0x28>
 80064ee:	f04f 37ff 	mov.w	r7, #4294967295
 80064f2:	4638      	mov	r0, r7
 80064f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064f6:	bf00      	nop
 80064f8:	08006a18 	.word	0x08006a18
 80064fc:	08006a38 	.word	0x08006a38
 8006500:	080069f8 	.word	0x080069f8

08006504 <_write_r>:
 8006504:	b538      	push	{r3, r4, r5, lr}
 8006506:	4c07      	ldr	r4, [pc, #28]	; (8006524 <_write_r+0x20>)
 8006508:	4605      	mov	r5, r0
 800650a:	4608      	mov	r0, r1
 800650c:	4611      	mov	r1, r2
 800650e:	2200      	movs	r2, #0
 8006510:	6022      	str	r2, [r4, #0]
 8006512:	461a      	mov	r2, r3
 8006514:	f7fa fafe 	bl	8000b14 <_write>
 8006518:	1c43      	adds	r3, r0, #1
 800651a:	d102      	bne.n	8006522 <_write_r+0x1e>
 800651c:	6823      	ldr	r3, [r4, #0]
 800651e:	b103      	cbz	r3, 8006522 <_write_r+0x1e>
 8006520:	602b      	str	r3, [r5, #0]
 8006522:	bd38      	pop	{r3, r4, r5, pc}
 8006524:	20000240 	.word	0x20000240

08006528 <__swsetup_r>:
 8006528:	4b32      	ldr	r3, [pc, #200]	; (80065f4 <__swsetup_r+0xcc>)
 800652a:	b570      	push	{r4, r5, r6, lr}
 800652c:	681d      	ldr	r5, [r3, #0]
 800652e:	4606      	mov	r6, r0
 8006530:	460c      	mov	r4, r1
 8006532:	b125      	cbz	r5, 800653e <__swsetup_r+0x16>
 8006534:	69ab      	ldr	r3, [r5, #24]
 8006536:	b913      	cbnz	r3, 800653e <__swsetup_r+0x16>
 8006538:	4628      	mov	r0, r5
 800653a:	f7ff fb91 	bl	8005c60 <__sinit>
 800653e:	4b2e      	ldr	r3, [pc, #184]	; (80065f8 <__swsetup_r+0xd0>)
 8006540:	429c      	cmp	r4, r3
 8006542:	d10f      	bne.n	8006564 <__swsetup_r+0x3c>
 8006544:	686c      	ldr	r4, [r5, #4]
 8006546:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800654a:	b29a      	uxth	r2, r3
 800654c:	0715      	lsls	r5, r2, #28
 800654e:	d42c      	bmi.n	80065aa <__swsetup_r+0x82>
 8006550:	06d0      	lsls	r0, r2, #27
 8006552:	d411      	bmi.n	8006578 <__swsetup_r+0x50>
 8006554:	2209      	movs	r2, #9
 8006556:	6032      	str	r2, [r6, #0]
 8006558:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800655c:	81a3      	strh	r3, [r4, #12]
 800655e:	f04f 30ff 	mov.w	r0, #4294967295
 8006562:	e03e      	b.n	80065e2 <__swsetup_r+0xba>
 8006564:	4b25      	ldr	r3, [pc, #148]	; (80065fc <__swsetup_r+0xd4>)
 8006566:	429c      	cmp	r4, r3
 8006568:	d101      	bne.n	800656e <__swsetup_r+0x46>
 800656a:	68ac      	ldr	r4, [r5, #8]
 800656c:	e7eb      	b.n	8006546 <__swsetup_r+0x1e>
 800656e:	4b24      	ldr	r3, [pc, #144]	; (8006600 <__swsetup_r+0xd8>)
 8006570:	429c      	cmp	r4, r3
 8006572:	bf08      	it	eq
 8006574:	68ec      	ldreq	r4, [r5, #12]
 8006576:	e7e6      	b.n	8006546 <__swsetup_r+0x1e>
 8006578:	0751      	lsls	r1, r2, #29
 800657a:	d512      	bpl.n	80065a2 <__swsetup_r+0x7a>
 800657c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800657e:	b141      	cbz	r1, 8006592 <__swsetup_r+0x6a>
 8006580:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006584:	4299      	cmp	r1, r3
 8006586:	d002      	beq.n	800658e <__swsetup_r+0x66>
 8006588:	4630      	mov	r0, r6
 800658a:	f000 f973 	bl	8006874 <_free_r>
 800658e:	2300      	movs	r3, #0
 8006590:	6363      	str	r3, [r4, #52]	; 0x34
 8006592:	89a3      	ldrh	r3, [r4, #12]
 8006594:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006598:	81a3      	strh	r3, [r4, #12]
 800659a:	2300      	movs	r3, #0
 800659c:	6063      	str	r3, [r4, #4]
 800659e:	6923      	ldr	r3, [r4, #16]
 80065a0:	6023      	str	r3, [r4, #0]
 80065a2:	89a3      	ldrh	r3, [r4, #12]
 80065a4:	f043 0308 	orr.w	r3, r3, #8
 80065a8:	81a3      	strh	r3, [r4, #12]
 80065aa:	6923      	ldr	r3, [r4, #16]
 80065ac:	b94b      	cbnz	r3, 80065c2 <__swsetup_r+0x9a>
 80065ae:	89a3      	ldrh	r3, [r4, #12]
 80065b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80065b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065b8:	d003      	beq.n	80065c2 <__swsetup_r+0x9a>
 80065ba:	4621      	mov	r1, r4
 80065bc:	4630      	mov	r0, r6
 80065be:	f000 f917 	bl	80067f0 <__smakebuf_r>
 80065c2:	89a2      	ldrh	r2, [r4, #12]
 80065c4:	f012 0301 	ands.w	r3, r2, #1
 80065c8:	d00c      	beq.n	80065e4 <__swsetup_r+0xbc>
 80065ca:	2300      	movs	r3, #0
 80065cc:	60a3      	str	r3, [r4, #8]
 80065ce:	6963      	ldr	r3, [r4, #20]
 80065d0:	425b      	negs	r3, r3
 80065d2:	61a3      	str	r3, [r4, #24]
 80065d4:	6923      	ldr	r3, [r4, #16]
 80065d6:	b953      	cbnz	r3, 80065ee <__swsetup_r+0xc6>
 80065d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065dc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80065e0:	d1ba      	bne.n	8006558 <__swsetup_r+0x30>
 80065e2:	bd70      	pop	{r4, r5, r6, pc}
 80065e4:	0792      	lsls	r2, r2, #30
 80065e6:	bf58      	it	pl
 80065e8:	6963      	ldrpl	r3, [r4, #20]
 80065ea:	60a3      	str	r3, [r4, #8]
 80065ec:	e7f2      	b.n	80065d4 <__swsetup_r+0xac>
 80065ee:	2000      	movs	r0, #0
 80065f0:	e7f7      	b.n	80065e2 <__swsetup_r+0xba>
 80065f2:	bf00      	nop
 80065f4:	2000001c 	.word	0x2000001c
 80065f8:	08006a18 	.word	0x08006a18
 80065fc:	08006a38 	.word	0x08006a38
 8006600:	080069f8 	.word	0x080069f8

08006604 <_close_r>:
 8006604:	b538      	push	{r3, r4, r5, lr}
 8006606:	4c06      	ldr	r4, [pc, #24]	; (8006620 <_close_r+0x1c>)
 8006608:	2300      	movs	r3, #0
 800660a:	4605      	mov	r5, r0
 800660c:	4608      	mov	r0, r1
 800660e:	6023      	str	r3, [r4, #0]
 8006610:	f7fa fb25 	bl	8000c5e <_close>
 8006614:	1c43      	adds	r3, r0, #1
 8006616:	d102      	bne.n	800661e <_close_r+0x1a>
 8006618:	6823      	ldr	r3, [r4, #0]
 800661a:	b103      	cbz	r3, 800661e <_close_r+0x1a>
 800661c:	602b      	str	r3, [r5, #0]
 800661e:	bd38      	pop	{r3, r4, r5, pc}
 8006620:	20000240 	.word	0x20000240

08006624 <__sflush_r>:
 8006624:	898a      	ldrh	r2, [r1, #12]
 8006626:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800662a:	4605      	mov	r5, r0
 800662c:	0710      	lsls	r0, r2, #28
 800662e:	460c      	mov	r4, r1
 8006630:	d458      	bmi.n	80066e4 <__sflush_r+0xc0>
 8006632:	684b      	ldr	r3, [r1, #4]
 8006634:	2b00      	cmp	r3, #0
 8006636:	dc05      	bgt.n	8006644 <__sflush_r+0x20>
 8006638:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800663a:	2b00      	cmp	r3, #0
 800663c:	dc02      	bgt.n	8006644 <__sflush_r+0x20>
 800663e:	2000      	movs	r0, #0
 8006640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006644:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006646:	2e00      	cmp	r6, #0
 8006648:	d0f9      	beq.n	800663e <__sflush_r+0x1a>
 800664a:	2300      	movs	r3, #0
 800664c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006650:	682f      	ldr	r7, [r5, #0]
 8006652:	6a21      	ldr	r1, [r4, #32]
 8006654:	602b      	str	r3, [r5, #0]
 8006656:	d032      	beq.n	80066be <__sflush_r+0x9a>
 8006658:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800665a:	89a3      	ldrh	r3, [r4, #12]
 800665c:	075a      	lsls	r2, r3, #29
 800665e:	d505      	bpl.n	800666c <__sflush_r+0x48>
 8006660:	6863      	ldr	r3, [r4, #4]
 8006662:	1ac0      	subs	r0, r0, r3
 8006664:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006666:	b10b      	cbz	r3, 800666c <__sflush_r+0x48>
 8006668:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800666a:	1ac0      	subs	r0, r0, r3
 800666c:	2300      	movs	r3, #0
 800666e:	4602      	mov	r2, r0
 8006670:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006672:	6a21      	ldr	r1, [r4, #32]
 8006674:	4628      	mov	r0, r5
 8006676:	47b0      	blx	r6
 8006678:	1c43      	adds	r3, r0, #1
 800667a:	89a3      	ldrh	r3, [r4, #12]
 800667c:	d106      	bne.n	800668c <__sflush_r+0x68>
 800667e:	6829      	ldr	r1, [r5, #0]
 8006680:	291d      	cmp	r1, #29
 8006682:	d848      	bhi.n	8006716 <__sflush_r+0xf2>
 8006684:	4a29      	ldr	r2, [pc, #164]	; (800672c <__sflush_r+0x108>)
 8006686:	40ca      	lsrs	r2, r1
 8006688:	07d6      	lsls	r6, r2, #31
 800668a:	d544      	bpl.n	8006716 <__sflush_r+0xf2>
 800668c:	2200      	movs	r2, #0
 800668e:	6062      	str	r2, [r4, #4]
 8006690:	04d9      	lsls	r1, r3, #19
 8006692:	6922      	ldr	r2, [r4, #16]
 8006694:	6022      	str	r2, [r4, #0]
 8006696:	d504      	bpl.n	80066a2 <__sflush_r+0x7e>
 8006698:	1c42      	adds	r2, r0, #1
 800669a:	d101      	bne.n	80066a0 <__sflush_r+0x7c>
 800669c:	682b      	ldr	r3, [r5, #0]
 800669e:	b903      	cbnz	r3, 80066a2 <__sflush_r+0x7e>
 80066a0:	6560      	str	r0, [r4, #84]	; 0x54
 80066a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80066a4:	602f      	str	r7, [r5, #0]
 80066a6:	2900      	cmp	r1, #0
 80066a8:	d0c9      	beq.n	800663e <__sflush_r+0x1a>
 80066aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80066ae:	4299      	cmp	r1, r3
 80066b0:	d002      	beq.n	80066b8 <__sflush_r+0x94>
 80066b2:	4628      	mov	r0, r5
 80066b4:	f000 f8de 	bl	8006874 <_free_r>
 80066b8:	2000      	movs	r0, #0
 80066ba:	6360      	str	r0, [r4, #52]	; 0x34
 80066bc:	e7c0      	b.n	8006640 <__sflush_r+0x1c>
 80066be:	2301      	movs	r3, #1
 80066c0:	4628      	mov	r0, r5
 80066c2:	47b0      	blx	r6
 80066c4:	1c41      	adds	r1, r0, #1
 80066c6:	d1c8      	bne.n	800665a <__sflush_r+0x36>
 80066c8:	682b      	ldr	r3, [r5, #0]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d0c5      	beq.n	800665a <__sflush_r+0x36>
 80066ce:	2b1d      	cmp	r3, #29
 80066d0:	d001      	beq.n	80066d6 <__sflush_r+0xb2>
 80066d2:	2b16      	cmp	r3, #22
 80066d4:	d101      	bne.n	80066da <__sflush_r+0xb6>
 80066d6:	602f      	str	r7, [r5, #0]
 80066d8:	e7b1      	b.n	800663e <__sflush_r+0x1a>
 80066da:	89a3      	ldrh	r3, [r4, #12]
 80066dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066e0:	81a3      	strh	r3, [r4, #12]
 80066e2:	e7ad      	b.n	8006640 <__sflush_r+0x1c>
 80066e4:	690f      	ldr	r7, [r1, #16]
 80066e6:	2f00      	cmp	r7, #0
 80066e8:	d0a9      	beq.n	800663e <__sflush_r+0x1a>
 80066ea:	0793      	lsls	r3, r2, #30
 80066ec:	680e      	ldr	r6, [r1, #0]
 80066ee:	bf08      	it	eq
 80066f0:	694b      	ldreq	r3, [r1, #20]
 80066f2:	600f      	str	r7, [r1, #0]
 80066f4:	bf18      	it	ne
 80066f6:	2300      	movne	r3, #0
 80066f8:	eba6 0807 	sub.w	r8, r6, r7
 80066fc:	608b      	str	r3, [r1, #8]
 80066fe:	f1b8 0f00 	cmp.w	r8, #0
 8006702:	dd9c      	ble.n	800663e <__sflush_r+0x1a>
 8006704:	4643      	mov	r3, r8
 8006706:	463a      	mov	r2, r7
 8006708:	6a21      	ldr	r1, [r4, #32]
 800670a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800670c:	4628      	mov	r0, r5
 800670e:	47b0      	blx	r6
 8006710:	2800      	cmp	r0, #0
 8006712:	dc06      	bgt.n	8006722 <__sflush_r+0xfe>
 8006714:	89a3      	ldrh	r3, [r4, #12]
 8006716:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800671a:	81a3      	strh	r3, [r4, #12]
 800671c:	f04f 30ff 	mov.w	r0, #4294967295
 8006720:	e78e      	b.n	8006640 <__sflush_r+0x1c>
 8006722:	4407      	add	r7, r0
 8006724:	eba8 0800 	sub.w	r8, r8, r0
 8006728:	e7e9      	b.n	80066fe <__sflush_r+0xda>
 800672a:	bf00      	nop
 800672c:	20400001 	.word	0x20400001

08006730 <_fflush_r>:
 8006730:	b538      	push	{r3, r4, r5, lr}
 8006732:	690b      	ldr	r3, [r1, #16]
 8006734:	4605      	mov	r5, r0
 8006736:	460c      	mov	r4, r1
 8006738:	b1db      	cbz	r3, 8006772 <_fflush_r+0x42>
 800673a:	b118      	cbz	r0, 8006744 <_fflush_r+0x14>
 800673c:	6983      	ldr	r3, [r0, #24]
 800673e:	b90b      	cbnz	r3, 8006744 <_fflush_r+0x14>
 8006740:	f7ff fa8e 	bl	8005c60 <__sinit>
 8006744:	4b0c      	ldr	r3, [pc, #48]	; (8006778 <_fflush_r+0x48>)
 8006746:	429c      	cmp	r4, r3
 8006748:	d109      	bne.n	800675e <_fflush_r+0x2e>
 800674a:	686c      	ldr	r4, [r5, #4]
 800674c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006750:	b17b      	cbz	r3, 8006772 <_fflush_r+0x42>
 8006752:	4621      	mov	r1, r4
 8006754:	4628      	mov	r0, r5
 8006756:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800675a:	f7ff bf63 	b.w	8006624 <__sflush_r>
 800675e:	4b07      	ldr	r3, [pc, #28]	; (800677c <_fflush_r+0x4c>)
 8006760:	429c      	cmp	r4, r3
 8006762:	d101      	bne.n	8006768 <_fflush_r+0x38>
 8006764:	68ac      	ldr	r4, [r5, #8]
 8006766:	e7f1      	b.n	800674c <_fflush_r+0x1c>
 8006768:	4b05      	ldr	r3, [pc, #20]	; (8006780 <_fflush_r+0x50>)
 800676a:	429c      	cmp	r4, r3
 800676c:	bf08      	it	eq
 800676e:	68ec      	ldreq	r4, [r5, #12]
 8006770:	e7ec      	b.n	800674c <_fflush_r+0x1c>
 8006772:	2000      	movs	r0, #0
 8006774:	bd38      	pop	{r3, r4, r5, pc}
 8006776:	bf00      	nop
 8006778:	08006a18 	.word	0x08006a18
 800677c:	08006a38 	.word	0x08006a38
 8006780:	080069f8 	.word	0x080069f8

08006784 <_lseek_r>:
 8006784:	b538      	push	{r3, r4, r5, lr}
 8006786:	4c07      	ldr	r4, [pc, #28]	; (80067a4 <_lseek_r+0x20>)
 8006788:	4605      	mov	r5, r0
 800678a:	4608      	mov	r0, r1
 800678c:	4611      	mov	r1, r2
 800678e:	2200      	movs	r2, #0
 8006790:	6022      	str	r2, [r4, #0]
 8006792:	461a      	mov	r2, r3
 8006794:	f7fa fa8a 	bl	8000cac <_lseek>
 8006798:	1c43      	adds	r3, r0, #1
 800679a:	d102      	bne.n	80067a2 <_lseek_r+0x1e>
 800679c:	6823      	ldr	r3, [r4, #0]
 800679e:	b103      	cbz	r3, 80067a2 <_lseek_r+0x1e>
 80067a0:	602b      	str	r3, [r5, #0]
 80067a2:	bd38      	pop	{r3, r4, r5, pc}
 80067a4:	20000240 	.word	0x20000240

080067a8 <__swhatbuf_r>:
 80067a8:	b570      	push	{r4, r5, r6, lr}
 80067aa:	460e      	mov	r6, r1
 80067ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067b0:	2900      	cmp	r1, #0
 80067b2:	b096      	sub	sp, #88	; 0x58
 80067b4:	4614      	mov	r4, r2
 80067b6:	461d      	mov	r5, r3
 80067b8:	da07      	bge.n	80067ca <__swhatbuf_r+0x22>
 80067ba:	2300      	movs	r3, #0
 80067bc:	602b      	str	r3, [r5, #0]
 80067be:	89b3      	ldrh	r3, [r6, #12]
 80067c0:	061a      	lsls	r2, r3, #24
 80067c2:	d410      	bmi.n	80067e6 <__swhatbuf_r+0x3e>
 80067c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80067c8:	e00e      	b.n	80067e8 <__swhatbuf_r+0x40>
 80067ca:	466a      	mov	r2, sp
 80067cc:	f000 f8b2 	bl	8006934 <_fstat_r>
 80067d0:	2800      	cmp	r0, #0
 80067d2:	dbf2      	blt.n	80067ba <__swhatbuf_r+0x12>
 80067d4:	9a01      	ldr	r2, [sp, #4]
 80067d6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80067da:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80067de:	425a      	negs	r2, r3
 80067e0:	415a      	adcs	r2, r3
 80067e2:	602a      	str	r2, [r5, #0]
 80067e4:	e7ee      	b.n	80067c4 <__swhatbuf_r+0x1c>
 80067e6:	2340      	movs	r3, #64	; 0x40
 80067e8:	2000      	movs	r0, #0
 80067ea:	6023      	str	r3, [r4, #0]
 80067ec:	b016      	add	sp, #88	; 0x58
 80067ee:	bd70      	pop	{r4, r5, r6, pc}

080067f0 <__smakebuf_r>:
 80067f0:	898b      	ldrh	r3, [r1, #12]
 80067f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80067f4:	079d      	lsls	r5, r3, #30
 80067f6:	4606      	mov	r6, r0
 80067f8:	460c      	mov	r4, r1
 80067fa:	d507      	bpl.n	800680c <__smakebuf_r+0x1c>
 80067fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006800:	6023      	str	r3, [r4, #0]
 8006802:	6123      	str	r3, [r4, #16]
 8006804:	2301      	movs	r3, #1
 8006806:	6163      	str	r3, [r4, #20]
 8006808:	b002      	add	sp, #8
 800680a:	bd70      	pop	{r4, r5, r6, pc}
 800680c:	ab01      	add	r3, sp, #4
 800680e:	466a      	mov	r2, sp
 8006810:	f7ff ffca 	bl	80067a8 <__swhatbuf_r>
 8006814:	9900      	ldr	r1, [sp, #0]
 8006816:	4605      	mov	r5, r0
 8006818:	4630      	mov	r0, r6
 800681a:	f7ff faab 	bl	8005d74 <_malloc_r>
 800681e:	b948      	cbnz	r0, 8006834 <__smakebuf_r+0x44>
 8006820:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006824:	059a      	lsls	r2, r3, #22
 8006826:	d4ef      	bmi.n	8006808 <__smakebuf_r+0x18>
 8006828:	f023 0303 	bic.w	r3, r3, #3
 800682c:	f043 0302 	orr.w	r3, r3, #2
 8006830:	81a3      	strh	r3, [r4, #12]
 8006832:	e7e3      	b.n	80067fc <__smakebuf_r+0xc>
 8006834:	4b0d      	ldr	r3, [pc, #52]	; (800686c <__smakebuf_r+0x7c>)
 8006836:	62b3      	str	r3, [r6, #40]	; 0x28
 8006838:	89a3      	ldrh	r3, [r4, #12]
 800683a:	6020      	str	r0, [r4, #0]
 800683c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006840:	81a3      	strh	r3, [r4, #12]
 8006842:	9b00      	ldr	r3, [sp, #0]
 8006844:	6163      	str	r3, [r4, #20]
 8006846:	9b01      	ldr	r3, [sp, #4]
 8006848:	6120      	str	r0, [r4, #16]
 800684a:	b15b      	cbz	r3, 8006864 <__smakebuf_r+0x74>
 800684c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006850:	4630      	mov	r0, r6
 8006852:	f000 f881 	bl	8006958 <_isatty_r>
 8006856:	b128      	cbz	r0, 8006864 <__smakebuf_r+0x74>
 8006858:	89a3      	ldrh	r3, [r4, #12]
 800685a:	f023 0303 	bic.w	r3, r3, #3
 800685e:	f043 0301 	orr.w	r3, r3, #1
 8006862:	81a3      	strh	r3, [r4, #12]
 8006864:	89a3      	ldrh	r3, [r4, #12]
 8006866:	431d      	orrs	r5, r3
 8006868:	81a5      	strh	r5, [r4, #12]
 800686a:	e7cd      	b.n	8006808 <__smakebuf_r+0x18>
 800686c:	08005c29 	.word	0x08005c29

08006870 <__malloc_lock>:
 8006870:	4770      	bx	lr

08006872 <__malloc_unlock>:
 8006872:	4770      	bx	lr

08006874 <_free_r>:
 8006874:	b538      	push	{r3, r4, r5, lr}
 8006876:	4605      	mov	r5, r0
 8006878:	2900      	cmp	r1, #0
 800687a:	d045      	beq.n	8006908 <_free_r+0x94>
 800687c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006880:	1f0c      	subs	r4, r1, #4
 8006882:	2b00      	cmp	r3, #0
 8006884:	bfb8      	it	lt
 8006886:	18e4      	addlt	r4, r4, r3
 8006888:	f7ff fff2 	bl	8006870 <__malloc_lock>
 800688c:	4a1f      	ldr	r2, [pc, #124]	; (800690c <_free_r+0x98>)
 800688e:	6813      	ldr	r3, [r2, #0]
 8006890:	4610      	mov	r0, r2
 8006892:	b933      	cbnz	r3, 80068a2 <_free_r+0x2e>
 8006894:	6063      	str	r3, [r4, #4]
 8006896:	6014      	str	r4, [r2, #0]
 8006898:	4628      	mov	r0, r5
 800689a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800689e:	f7ff bfe8 	b.w	8006872 <__malloc_unlock>
 80068a2:	42a3      	cmp	r3, r4
 80068a4:	d90c      	bls.n	80068c0 <_free_r+0x4c>
 80068a6:	6821      	ldr	r1, [r4, #0]
 80068a8:	1862      	adds	r2, r4, r1
 80068aa:	4293      	cmp	r3, r2
 80068ac:	bf04      	itt	eq
 80068ae:	681a      	ldreq	r2, [r3, #0]
 80068b0:	685b      	ldreq	r3, [r3, #4]
 80068b2:	6063      	str	r3, [r4, #4]
 80068b4:	bf04      	itt	eq
 80068b6:	1852      	addeq	r2, r2, r1
 80068b8:	6022      	streq	r2, [r4, #0]
 80068ba:	6004      	str	r4, [r0, #0]
 80068bc:	e7ec      	b.n	8006898 <_free_r+0x24>
 80068be:	4613      	mov	r3, r2
 80068c0:	685a      	ldr	r2, [r3, #4]
 80068c2:	b10a      	cbz	r2, 80068c8 <_free_r+0x54>
 80068c4:	42a2      	cmp	r2, r4
 80068c6:	d9fa      	bls.n	80068be <_free_r+0x4a>
 80068c8:	6819      	ldr	r1, [r3, #0]
 80068ca:	1858      	adds	r0, r3, r1
 80068cc:	42a0      	cmp	r0, r4
 80068ce:	d10b      	bne.n	80068e8 <_free_r+0x74>
 80068d0:	6820      	ldr	r0, [r4, #0]
 80068d2:	4401      	add	r1, r0
 80068d4:	1858      	adds	r0, r3, r1
 80068d6:	4282      	cmp	r2, r0
 80068d8:	6019      	str	r1, [r3, #0]
 80068da:	d1dd      	bne.n	8006898 <_free_r+0x24>
 80068dc:	6810      	ldr	r0, [r2, #0]
 80068de:	6852      	ldr	r2, [r2, #4]
 80068e0:	605a      	str	r2, [r3, #4]
 80068e2:	4401      	add	r1, r0
 80068e4:	6019      	str	r1, [r3, #0]
 80068e6:	e7d7      	b.n	8006898 <_free_r+0x24>
 80068e8:	d902      	bls.n	80068f0 <_free_r+0x7c>
 80068ea:	230c      	movs	r3, #12
 80068ec:	602b      	str	r3, [r5, #0]
 80068ee:	e7d3      	b.n	8006898 <_free_r+0x24>
 80068f0:	6820      	ldr	r0, [r4, #0]
 80068f2:	1821      	adds	r1, r4, r0
 80068f4:	428a      	cmp	r2, r1
 80068f6:	bf04      	itt	eq
 80068f8:	6811      	ldreq	r1, [r2, #0]
 80068fa:	6852      	ldreq	r2, [r2, #4]
 80068fc:	6062      	str	r2, [r4, #4]
 80068fe:	bf04      	itt	eq
 8006900:	1809      	addeq	r1, r1, r0
 8006902:	6021      	streq	r1, [r4, #0]
 8006904:	605c      	str	r4, [r3, #4]
 8006906:	e7c7      	b.n	8006898 <_free_r+0x24>
 8006908:	bd38      	pop	{r3, r4, r5, pc}
 800690a:	bf00      	nop
 800690c:	200000a0 	.word	0x200000a0

08006910 <_read_r>:
 8006910:	b538      	push	{r3, r4, r5, lr}
 8006912:	4c07      	ldr	r4, [pc, #28]	; (8006930 <_read_r+0x20>)
 8006914:	4605      	mov	r5, r0
 8006916:	4608      	mov	r0, r1
 8006918:	4611      	mov	r1, r2
 800691a:	2200      	movs	r2, #0
 800691c:	6022      	str	r2, [r4, #0]
 800691e:	461a      	mov	r2, r3
 8006920:	f7fa f980 	bl	8000c24 <_read>
 8006924:	1c43      	adds	r3, r0, #1
 8006926:	d102      	bne.n	800692e <_read_r+0x1e>
 8006928:	6823      	ldr	r3, [r4, #0]
 800692a:	b103      	cbz	r3, 800692e <_read_r+0x1e>
 800692c:	602b      	str	r3, [r5, #0]
 800692e:	bd38      	pop	{r3, r4, r5, pc}
 8006930:	20000240 	.word	0x20000240

08006934 <_fstat_r>:
 8006934:	b538      	push	{r3, r4, r5, lr}
 8006936:	4c07      	ldr	r4, [pc, #28]	; (8006954 <_fstat_r+0x20>)
 8006938:	2300      	movs	r3, #0
 800693a:	4605      	mov	r5, r0
 800693c:	4608      	mov	r0, r1
 800693e:	4611      	mov	r1, r2
 8006940:	6023      	str	r3, [r4, #0]
 8006942:	f7fa f998 	bl	8000c76 <_fstat>
 8006946:	1c43      	adds	r3, r0, #1
 8006948:	d102      	bne.n	8006950 <_fstat_r+0x1c>
 800694a:	6823      	ldr	r3, [r4, #0]
 800694c:	b103      	cbz	r3, 8006950 <_fstat_r+0x1c>
 800694e:	602b      	str	r3, [r5, #0]
 8006950:	bd38      	pop	{r3, r4, r5, pc}
 8006952:	bf00      	nop
 8006954:	20000240 	.word	0x20000240

08006958 <_isatty_r>:
 8006958:	b538      	push	{r3, r4, r5, lr}
 800695a:	4c06      	ldr	r4, [pc, #24]	; (8006974 <_isatty_r+0x1c>)
 800695c:	2300      	movs	r3, #0
 800695e:	4605      	mov	r5, r0
 8006960:	4608      	mov	r0, r1
 8006962:	6023      	str	r3, [r4, #0]
 8006964:	f7fa f997 	bl	8000c96 <_isatty>
 8006968:	1c43      	adds	r3, r0, #1
 800696a:	d102      	bne.n	8006972 <_isatty_r+0x1a>
 800696c:	6823      	ldr	r3, [r4, #0]
 800696e:	b103      	cbz	r3, 8006972 <_isatty_r+0x1a>
 8006970:	602b      	str	r3, [r5, #0]
 8006972:	bd38      	pop	{r3, r4, r5, pc}
 8006974:	20000240 	.word	0x20000240

08006978 <_init>:
 8006978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800697a:	bf00      	nop
 800697c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800697e:	bc08      	pop	{r3}
 8006980:	469e      	mov	lr, r3
 8006982:	4770      	bx	lr

08006984 <_fini>:
 8006984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006986:	bf00      	nop
 8006988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800698a:	bc08      	pop	{r3}
 800698c:	469e      	mov	lr, r3
 800698e:	4770      	bx	lr
