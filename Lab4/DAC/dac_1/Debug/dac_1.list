
dac_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cf4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08005e84  08005e84  00015e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f98  08005f98  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005f98  08005f98  00015f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005fa0  08005fa0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fa0  08005fa0  00015fa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005fa4  08005fa4  00015fa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005fa8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000130  20000070  08006018  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a0  08006018  000201a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000120a7  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000025bb  00000000  00000000  00032147  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e60  00000000  00000000  00034708  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d18  00000000  00000000  00035568  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029690  00000000  00000000  00036280  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cd62  00000000  00000000  0005f910  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ff086  00000000  00000000  0006c672  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016b6f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000418c  00000000  00000000  0016b774  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005e6c 	.word	0x08005e6c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005e6c 	.word	0x08005e6c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b08a      	sub	sp, #40	; 0x28
 8000574:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8000576:	f107 031c 	add.w	r3, r7, #28
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
 800057e:	605a      	str	r2, [r3, #4]
 8000580:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000582:	1d3b      	adds	r3, r7, #4
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	60da      	str	r2, [r3, #12]
 800058e:	611a      	str	r2, [r3, #16]
 8000590:	615a      	str	r2, [r3, #20]

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000592:	4b2f      	ldr	r3, [pc, #188]	; (8000650 <MX_ADC1_Init+0xe0>)
 8000594:	4a2f      	ldr	r2, [pc, #188]	; (8000654 <MX_ADC1_Init+0xe4>)
 8000596:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000598:	4b2d      	ldr	r3, [pc, #180]	; (8000650 <MX_ADC1_Init+0xe0>)
 800059a:	2200      	movs	r2, #0
 800059c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800059e:	4b2c      	ldr	r3, [pc, #176]	; (8000650 <MX_ADC1_Init+0xe0>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005a4:	4b2a      	ldr	r3, [pc, #168]	; (8000650 <MX_ADC1_Init+0xe0>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005aa:	4b29      	ldr	r3, [pc, #164]	; (8000650 <MX_ADC1_Init+0xe0>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005b0:	4b27      	ldr	r3, [pc, #156]	; (8000650 <MX_ADC1_Init+0xe0>)
 80005b2:	2204      	movs	r2, #4
 80005b4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005b6:	4b26      	ldr	r3, [pc, #152]	; (8000650 <MX_ADC1_Init+0xe0>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005bc:	4b24      	ldr	r3, [pc, #144]	; (8000650 <MX_ADC1_Init+0xe0>)
 80005be:	2200      	movs	r2, #0
 80005c0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80005c2:	4b23      	ldr	r3, [pc, #140]	; (8000650 <MX_ADC1_Init+0xe0>)
 80005c4:	2201      	movs	r2, #1
 80005c6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005c8:	4b21      	ldr	r3, [pc, #132]	; (8000650 <MX_ADC1_Init+0xe0>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005d0:	4b1f      	ldr	r3, [pc, #124]	; (8000650 <MX_ADC1_Init+0xe0>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005d6:	4b1e      	ldr	r3, [pc, #120]	; (8000650 <MX_ADC1_Init+0xe0>)
 80005d8:	2200      	movs	r2, #0
 80005da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005dc:	4b1c      	ldr	r3, [pc, #112]	; (8000650 <MX_ADC1_Init+0xe0>)
 80005de:	2200      	movs	r2, #0
 80005e0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005e4:	4b1a      	ldr	r3, [pc, #104]	; (8000650 <MX_ADC1_Init+0xe0>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80005ea:	4b19      	ldr	r3, [pc, #100]	; (8000650 <MX_ADC1_Init+0xe0>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005f2:	4817      	ldr	r0, [pc, #92]	; (8000650 <MX_ADC1_Init+0xe0>)
 80005f4:	f000 feca 	bl	800138c <HAL_ADC_Init>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80005fe:	f000 fa73 	bl	8000ae8 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000602:	2300      	movs	r3, #0
 8000604:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000606:	f107 031c 	add.w	r3, r7, #28
 800060a:	4619      	mov	r1, r3
 800060c:	4810      	ldr	r0, [pc, #64]	; (8000650 <MX_ADC1_Init+0xe0>)
 800060e:	f002 f81f 	bl	8002650 <HAL_ADCEx_MultiModeConfigChannel>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000618:	f000 fa66 	bl	8000ae8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800061c:	4b0e      	ldr	r3, [pc, #56]	; (8000658 <MX_ADC1_Init+0xe8>)
 800061e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000620:	2306      	movs	r3, #6
 8000622:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8000624:	2305      	movs	r3, #5
 8000626:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000628:	237f      	movs	r3, #127	; 0x7f
 800062a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800062c:	2304      	movs	r3, #4
 800062e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000630:	2300      	movs	r3, #0
 8000632:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000634:	1d3b      	adds	r3, r7, #4
 8000636:	4619      	mov	r1, r3
 8000638:	4805      	ldr	r0, [pc, #20]	; (8000650 <MX_ADC1_Init+0xe0>)
 800063a:	f001 fb69 	bl	8001d10 <HAL_ADC_ConfigChannel>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000644:	f000 fa50 	bl	8000ae8 <Error_Handler>
  }

}
 8000648:	bf00      	nop
 800064a:	3728      	adds	r7, #40	; 0x28
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	20000098 	.word	0x20000098
 8000654:	50040000 	.word	0x50040000
 8000658:	3ef08000 	.word	0x3ef08000

0800065c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b08a      	sub	sp, #40	; 0x28
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000664:	f107 0314 	add.w	r3, r7, #20
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a19      	ldr	r2, [pc, #100]	; (80006e0 <HAL_ADC_MspInit+0x84>)
 800067a:	4293      	cmp	r3, r2
 800067c:	d12b      	bne.n	80006d6 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800067e:	4b19      	ldr	r3, [pc, #100]	; (80006e4 <HAL_ADC_MspInit+0x88>)
 8000680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000682:	4a18      	ldr	r2, [pc, #96]	; (80006e4 <HAL_ADC_MspInit+0x88>)
 8000684:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000688:	64d3      	str	r3, [r2, #76]	; 0x4c
 800068a:	4b16      	ldr	r3, [pc, #88]	; (80006e4 <HAL_ADC_MspInit+0x88>)
 800068c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800068e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000692:	613b      	str	r3, [r7, #16]
 8000694:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000696:	4b13      	ldr	r3, [pc, #76]	; (80006e4 <HAL_ADC_MspInit+0x88>)
 8000698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069a:	4a12      	ldr	r2, [pc, #72]	; (80006e4 <HAL_ADC_MspInit+0x88>)
 800069c:	f043 0302 	orr.w	r3, r3, #2
 80006a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006a2:	4b10      	ldr	r3, [pc, #64]	; (80006e4 <HAL_ADC_MspInit+0x88>)
 80006a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006a6:	f003 0302 	and.w	r3, r3, #2
 80006aa:	60fb      	str	r3, [r7, #12]
 80006ac:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006ae:	2301      	movs	r3, #1
 80006b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80006b2:	230b      	movs	r3, #11
 80006b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b6:	2300      	movs	r3, #0
 80006b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ba:	f107 0314 	add.w	r3, r7, #20
 80006be:	4619      	mov	r1, r3
 80006c0:	4809      	ldr	r0, [pc, #36]	; (80006e8 <HAL_ADC_MspInit+0x8c>)
 80006c2:	f002 fb31 	bl	8002d28 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80006c6:	2200      	movs	r2, #0
 80006c8:	2100      	movs	r1, #0
 80006ca:	2012      	movs	r0, #18
 80006cc:	f002 f947 	bl	800295e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80006d0:	2012      	movs	r0, #18
 80006d2:	f002 f960 	bl	8002996 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006d6:	bf00      	nop
 80006d8:	3728      	adds	r7, #40	; 0x28
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	50040000 	.word	0x50040000
 80006e4:	40021000 	.word	0x40021000
 80006e8:	48000400 	.word	0x48000400

080006ec <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b08a      	sub	sp, #40	; 0x28
 80006f0:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	2224      	movs	r2, #36	; 0x24
 80006f6:	2100      	movs	r1, #0
 80006f8:	4618      	mov	r0, r3
 80006fa:	f004 fccb 	bl	8005094 <memset>

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80006fe:	4b12      	ldr	r3, [pc, #72]	; (8000748 <MX_DAC1_Init+0x5c>)
 8000700:	4a12      	ldr	r2, [pc, #72]	; (800074c <MX_DAC1_Init+0x60>)
 8000702:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000704:	4810      	ldr	r0, [pc, #64]	; (8000748 <MX_DAC1_Init+0x5c>)
 8000706:	f002 f960 	bl	80029ca <HAL_DAC_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000710:	f000 f9ea 	bl	8000ae8 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000714:	2300      	movs	r3, #0
 8000716:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000718:	2300      	movs	r3, #0
 800071a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800071c:	2300      	movs	r3, #0
 800071e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000720:	2300      	movs	r3, #0
 8000722:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000724:	2300      	movs	r3, #0
 8000726:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000728:	1d3b      	adds	r3, r7, #4
 800072a:	2200      	movs	r2, #0
 800072c:	4619      	mov	r1, r3
 800072e:	4806      	ldr	r0, [pc, #24]	; (8000748 <MX_DAC1_Init+0x5c>)
 8000730:	f002 f9df 	bl	8002af2 <HAL_DAC_ConfigChannel>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800073a:	f000 f9d5 	bl	8000ae8 <Error_Handler>
  }

}
 800073e:	bf00      	nop
 8000740:	3728      	adds	r7, #40	; 0x28
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	200000fc 	.word	0x200000fc
 800074c:	40007400 	.word	0x40007400

08000750 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b08a      	sub	sp, #40	; 0x28
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000758:	f107 0314 	add.w	r3, r7, #20
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
 8000764:	60da      	str	r2, [r3, #12]
 8000766:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a15      	ldr	r2, [pc, #84]	; (80007c4 <HAL_DAC_MspInit+0x74>)
 800076e:	4293      	cmp	r3, r2
 8000770:	d124      	bne.n	80007bc <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000772:	4b15      	ldr	r3, [pc, #84]	; (80007c8 <HAL_DAC_MspInit+0x78>)
 8000774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000776:	4a14      	ldr	r2, [pc, #80]	; (80007c8 <HAL_DAC_MspInit+0x78>)
 8000778:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800077c:	6593      	str	r3, [r2, #88]	; 0x58
 800077e:	4b12      	ldr	r3, [pc, #72]	; (80007c8 <HAL_DAC_MspInit+0x78>)
 8000780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000782:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000786:	613b      	str	r3, [r7, #16]
 8000788:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800078a:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <HAL_DAC_MspInit+0x78>)
 800078c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078e:	4a0e      	ldr	r2, [pc, #56]	; (80007c8 <HAL_DAC_MspInit+0x78>)
 8000790:	f043 0301 	orr.w	r3, r3, #1
 8000794:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000796:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <HAL_DAC_MspInit+0x78>)
 8000798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079a:	f003 0301 	and.w	r3, r3, #1
 800079e:	60fb      	str	r3, [r7, #12]
 80007a0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80007a2:	2310      	movs	r3, #16
 80007a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007a6:	2303      	movs	r3, #3
 80007a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	2300      	movs	r3, #0
 80007ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ae:	f107 0314 	add.w	r3, r7, #20
 80007b2:	4619      	mov	r1, r3
 80007b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007b8:	f002 fab6 	bl	8002d28 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 80007bc:	bf00      	nop
 80007be:	3728      	adds	r7, #40	; 0x28
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	40007400 	.word	0x40007400
 80007c8:	40021000 	.word	0x40021000

080007cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08a      	sub	sp, #40	; 0x28
 80007d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d2:	f107 0314 	add.w	r3, r7, #20
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]
 80007de:	60da      	str	r2, [r3, #12]
 80007e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e2:	4b2b      	ldr	r3, [pc, #172]	; (8000890 <MX_GPIO_Init+0xc4>)
 80007e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e6:	4a2a      	ldr	r2, [pc, #168]	; (8000890 <MX_GPIO_Init+0xc4>)
 80007e8:	f043 0304 	orr.w	r3, r3, #4
 80007ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ee:	4b28      	ldr	r3, [pc, #160]	; (8000890 <MX_GPIO_Init+0xc4>)
 80007f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f2:	f003 0304 	and.w	r3, r3, #4
 80007f6:	613b      	str	r3, [r7, #16]
 80007f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007fa:	4b25      	ldr	r3, [pc, #148]	; (8000890 <MX_GPIO_Init+0xc4>)
 80007fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fe:	4a24      	ldr	r2, [pc, #144]	; (8000890 <MX_GPIO_Init+0xc4>)
 8000800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000804:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000806:	4b22      	ldr	r3, [pc, #136]	; (8000890 <MX_GPIO_Init+0xc4>)
 8000808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000812:	4b1f      	ldr	r3, [pc, #124]	; (8000890 <MX_GPIO_Init+0xc4>)
 8000814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000816:	4a1e      	ldr	r2, [pc, #120]	; (8000890 <MX_GPIO_Init+0xc4>)
 8000818:	f043 0301 	orr.w	r3, r3, #1
 800081c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800081e:	4b1c      	ldr	r3, [pc, #112]	; (8000890 <MX_GPIO_Init+0xc4>)
 8000820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000822:	f003 0301 	and.w	r3, r3, #1
 8000826:	60bb      	str	r3, [r7, #8]
 8000828:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800082a:	4b19      	ldr	r3, [pc, #100]	; (8000890 <MX_GPIO_Init+0xc4>)
 800082c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082e:	4a18      	ldr	r2, [pc, #96]	; (8000890 <MX_GPIO_Init+0xc4>)
 8000830:	f043 0302 	orr.w	r3, r3, #2
 8000834:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000836:	4b16      	ldr	r3, [pc, #88]	; (8000890 <MX_GPIO_Init+0xc4>)
 8000838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083a:	f003 0302 	and.w	r3, r3, #2
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000842:	2200      	movs	r2, #0
 8000844:	2120      	movs	r1, #32
 8000846:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800084a:	f002 fc15 	bl	8003078 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800084e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000852:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000854:	4b0f      	ldr	r3, [pc, #60]	; (8000894 <MX_GPIO_Init+0xc8>)
 8000856:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800085c:	f107 0314 	add.w	r3, r7, #20
 8000860:	4619      	mov	r1, r3
 8000862:	480d      	ldr	r0, [pc, #52]	; (8000898 <MX_GPIO_Init+0xcc>)
 8000864:	f002 fa60 	bl	8002d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000868:	2320      	movs	r3, #32
 800086a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086c:	2301      	movs	r3, #1
 800086e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000874:	2300      	movs	r3, #0
 8000876:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000878:	f107 0314 	add.w	r3, r7, #20
 800087c:	4619      	mov	r1, r3
 800087e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000882:	f002 fa51 	bl	8002d28 <HAL_GPIO_Init>

}
 8000886:	bf00      	nop
 8000888:	3728      	adds	r7, #40	; 0x28
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40021000 	.word	0x40021000
 8000894:	10210000 	.word	0x10210000
 8000898:	48000800 	.word	0x48000800

0800089c <HAL_ADC_ConvCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
	if(hadc == &hadc1) {
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	4a08      	ldr	r2, [pc, #32]	; (80008c8 <HAL_ADC_ConvCpltCallback+0x2c>)
 80008a8:	4293      	cmp	r3, r2
 80008aa:	d109      	bne.n	80008c0 <HAL_ADC_ConvCpltCallback+0x24>
		adc_value = HAL_ADC_GetValue(hadc);
 80008ac:	6878      	ldr	r0, [r7, #4]
 80008ae:	f000 fff3 	bl	8001898 <HAL_ADC_GetValue>
 80008b2:	4603      	mov	r3, r0
 80008b4:	b29a      	uxth	r2, r3
 80008b6:	4b05      	ldr	r3, [pc, #20]	; (80008cc <HAL_ADC_ConvCpltCallback+0x30>)
 80008b8:	801a      	strh	r2, [r3, #0]
		adc_flag = 1;
 80008ba:	4b05      	ldr	r3, [pc, #20]	; (80008d0 <HAL_ADC_ConvCpltCallback+0x34>)
 80008bc:	2201      	movs	r2, #1
 80008be:	701a      	strb	r2, [r3, #0]
	}
}
 80008c0:	bf00      	nop
 80008c2:	3708      	adds	r7, #8
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	20000098 	.word	0x20000098
 80008cc:	20000112 	.word	0x20000112
 80008d0:	20000110 	.word	0x20000110

080008d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008d8:	f000 fac4 	bl	8000e64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008dc:	f000 f862 	bl	80009a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008e0:	f7ff ff74 	bl	80007cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80008e4:	f000 fa22 	bl	8000d2c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80008e8:	f7ff fe42 	bl	8000570 <MX_ADC1_Init>
  MX_DAC1_Init();
 80008ec:	f7ff fefe 	bl	80006ec <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80008f0:	2100      	movs	r1, #0
 80008f2:	4824      	ldr	r0, [pc, #144]	; (8000984 <main+0xb0>)
 80008f4:	f002 f88b 	bl	8002a0e <HAL_DAC_Start>
  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_8B_R, 0);
 80008f8:	2300      	movs	r3, #0
 80008fa:	2208      	movs	r2, #8
 80008fc:	2100      	movs	r1, #0
 80008fe:	4821      	ldr	r0, [pc, #132]	; (8000984 <main+0xb0>)
 8000900:	f002 f8d2 	bl	8002aa8 <HAL_DAC_SetValue>
  HAL_ADC_Start_IT(&hadc1);
 8000904:	4820      	ldr	r0, [pc, #128]	; (8000988 <main+0xb4>)
 8000906:	f000 fe95 	bl	8001634 <HAL_ADC_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(adc_flag == 1){
 800090a:	4b20      	ldr	r3, [pc, #128]	; (800098c <main+0xb8>)
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	b2db      	uxtb	r3, r3
 8000910:	2b01      	cmp	r3, #1
 8000912:	d131      	bne.n	8000978 <main+0xa4>
		  printf("Zadana wartosc to %d\r\n", dac_value);
 8000914:	4b1e      	ldr	r3, [pc, #120]	; (8000990 <main+0xbc>)
 8000916:	881b      	ldrh	r3, [r3, #0]
 8000918:	b29b      	uxth	r3, r3
 800091a:	4619      	mov	r1, r3
 800091c:	481d      	ldr	r0, [pc, #116]	; (8000994 <main+0xc0>)
 800091e:	f004 fbc1 	bl	80050a4 <iprintf>
		  printf("Zmierzona wartosc to %d\r\n", adc_value);
 8000922:	4b1d      	ldr	r3, [pc, #116]	; (8000998 <main+0xc4>)
 8000924:	881b      	ldrh	r3, [r3, #0]
 8000926:	b29b      	uxth	r3, r3
 8000928:	4619      	mov	r1, r3
 800092a:	481c      	ldr	r0, [pc, #112]	; (800099c <main+0xc8>)
 800092c:	f004 fbba 	bl	80050a4 <iprintf>
		  adc_flag = 0;
 8000930:	4b16      	ldr	r3, [pc, #88]	; (800098c <main+0xb8>)
 8000932:	2200      	movs	r2, #0
 8000934:	701a      	strb	r2, [r3, #0]

		  dac_value += 50;
 8000936:	4b16      	ldr	r3, [pc, #88]	; (8000990 <main+0xbc>)
 8000938:	881b      	ldrh	r3, [r3, #0]
 800093a:	b29b      	uxth	r3, r3
 800093c:	3332      	adds	r3, #50	; 0x32
 800093e:	b29a      	uxth	r2, r3
 8000940:	4b13      	ldr	r3, [pc, #76]	; (8000990 <main+0xbc>)
 8000942:	801a      	strh	r2, [r3, #0]
		  dac_value %= 300;
 8000944:	4b12      	ldr	r3, [pc, #72]	; (8000990 <main+0xbc>)
 8000946:	881b      	ldrh	r3, [r3, #0]
 8000948:	b29b      	uxth	r3, r3
 800094a:	4a15      	ldr	r2, [pc, #84]	; (80009a0 <main+0xcc>)
 800094c:	fba2 1203 	umull	r1, r2, r2, r3
 8000950:	0952      	lsrs	r2, r2, #5
 8000952:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000956:	fb01 f202 	mul.w	r2, r1, r2
 800095a:	1a9b      	subs	r3, r3, r2
 800095c:	b29a      	uxth	r2, r3
 800095e:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <main+0xbc>)
 8000960:	801a      	strh	r2, [r3, #0]
		  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_8B_R, dac_value);
 8000962:	4b0b      	ldr	r3, [pc, #44]	; (8000990 <main+0xbc>)
 8000964:	881b      	ldrh	r3, [r3, #0]
 8000966:	b29b      	uxth	r3, r3
 8000968:	2208      	movs	r2, #8
 800096a:	2100      	movs	r1, #0
 800096c:	4805      	ldr	r0, [pc, #20]	; (8000984 <main+0xb0>)
 800096e:	f002 f89b 	bl	8002aa8 <HAL_DAC_SetValue>

		  HAL_ADC_Start_IT(&hadc1);
 8000972:	4805      	ldr	r0, [pc, #20]	; (8000988 <main+0xb4>)
 8000974:	f000 fe5e 	bl	8001634 <HAL_ADC_Start_IT>
	  }
	  HAL_Delay(1000);
 8000978:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800097c:	f000 faee 	bl	8000f5c <HAL_Delay>
	  if(adc_flag == 1){
 8000980:	e7c3      	b.n	800090a <main+0x36>
 8000982:	bf00      	nop
 8000984:	200000fc 	.word	0x200000fc
 8000988:	20000098 	.word	0x20000098
 800098c:	20000110 	.word	0x20000110
 8000990:	20000114 	.word	0x20000114
 8000994:	08005e84 	.word	0x08005e84
 8000998:	20000112 	.word	0x20000112
 800099c:	08005e9c 	.word	0x08005e9c
 80009a0:	1b4e81b5 	.word	0x1b4e81b5

080009a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b0b8      	sub	sp, #224	; 0xe0
 80009a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009aa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80009ae:	2244      	movs	r2, #68	; 0x44
 80009b0:	2100      	movs	r1, #0
 80009b2:	4618      	mov	r0, r3
 80009b4:	f004 fb6e 	bl	8005094 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009b8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	609a      	str	r2, [r3, #8]
 80009c4:	60da      	str	r2, [r3, #12]
 80009c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009c8:	463b      	mov	r3, r7
 80009ca:	2288      	movs	r2, #136	; 0x88
 80009cc:	2100      	movs	r1, #0
 80009ce:	4618      	mov	r0, r3
 80009d0:	f004 fb60 	bl	8005094 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009d4:	2302      	movs	r3, #2
 80009d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009e2:	2310      	movs	r3, #16
 80009e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009e8:	2302      	movs	r3, #2
 80009ea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009ee:	2302      	movs	r3, #2
 80009f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009f4:	2301      	movs	r3, #1
 80009f6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 80009fa:	230a      	movs	r3, #10
 80009fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a00:	2307      	movs	r3, #7
 8000a02:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a06:	2302      	movs	r3, #2
 8000a08:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a12:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a16:	4618      	mov	r0, r3
 8000a18:	f002 fbaa 	bl	8003170 <HAL_RCC_OscConfig>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000a22:	f000 f861 	bl	8000ae8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a26:	230f      	movs	r3, #15
 8000a28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a2c:	2303      	movs	r3, #3
 8000a2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a32:	2300      	movs	r3, #0
 8000a34:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a44:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000a48:	2104      	movs	r1, #4
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f002 ff76 	bl	800393c <HAL_RCC_ClockConfig>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000a56:	f000 f847 	bl	8000ae8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 8000a5a:	f244 0302 	movw	r3, #16386	; 0x4002
 8000a5e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a60:	2300      	movs	r3, #0
 8000a62:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000a64:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a68:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000a72:	2308      	movs	r3, #8
 8000a74:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000a76:	2307      	movs	r3, #7
 8000a78:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000a82:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a86:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a88:	463b      	mov	r3, r7
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f003 f95a 	bl	8003d44 <HAL_RCCEx_PeriphCLKConfig>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000a96:	f000 f827 	bl	8000ae8 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a9a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a9e:	f002 fb11 	bl	80030c4 <HAL_PWREx_ControlVoltageScaling>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <SystemClock_Config+0x108>
  {
    Error_Handler();
 8000aa8:	f000 f81e 	bl	8000ae8 <Error_Handler>
  }
}
 8000aac:	bf00      	nop
 8000aae:	37e0      	adds	r7, #224	; 0xe0
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len){
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	60f8      	str	r0, [r7, #12]
 8000abc:	60b9      	str	r1, [r7, #8]
 8000abe:	607a      	str	r2, [r7, #4]

	  if(HAL_UART_Transmit(&huart2, (uint8_t *) ptr, len, 100) != HAL_OK){
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	b29a      	uxth	r2, r3
 8000ac4:	2364      	movs	r3, #100	; 0x64
 8000ac6:	68b9      	ldr	r1, [r7, #8]
 8000ac8:	4806      	ldr	r0, [pc, #24]	; (8000ae4 <_write+0x30>)
 8000aca:	f003 fe39 	bl	8004740 <HAL_UART_Transmit>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <_write+0x24>
		  Error_Handler();
 8000ad4:	f000 f808 	bl	8000ae8 <Error_Handler>
	  }

	return len;
 8000ad8:	687b      	ldr	r3, [r7, #4]
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3710      	adds	r7, #16
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	20000118 	.word	0x20000118

08000ae8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000aec:	bf00      	nop
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
	...

08000af8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000afe:	4b0f      	ldr	r3, [pc, #60]	; (8000b3c <HAL_MspInit+0x44>)
 8000b00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b02:	4a0e      	ldr	r2, [pc, #56]	; (8000b3c <HAL_MspInit+0x44>)
 8000b04:	f043 0301 	orr.w	r3, r3, #1
 8000b08:	6613      	str	r3, [r2, #96]	; 0x60
 8000b0a:	4b0c      	ldr	r3, [pc, #48]	; (8000b3c <HAL_MspInit+0x44>)
 8000b0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b0e:	f003 0301 	and.w	r3, r3, #1
 8000b12:	607b      	str	r3, [r7, #4]
 8000b14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b16:	4b09      	ldr	r3, [pc, #36]	; (8000b3c <HAL_MspInit+0x44>)
 8000b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b1a:	4a08      	ldr	r2, [pc, #32]	; (8000b3c <HAL_MspInit+0x44>)
 8000b1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b20:	6593      	str	r3, [r2, #88]	; 0x58
 8000b22:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <HAL_MspInit+0x44>)
 8000b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b2a:	603b      	str	r3, [r7, #0]
 8000b2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	370c      	adds	r7, #12
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	40021000 	.word	0x40021000

08000b40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b44:	bf00      	nop
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr

08000b4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b52:	e7fe      	b.n	8000b52 <HardFault_Handler+0x4>

08000b54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b58:	e7fe      	b.n	8000b58 <MemManage_Handler+0x4>

08000b5a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b5e:	e7fe      	b.n	8000b5e <BusFault_Handler+0x4>

08000b60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b64:	e7fe      	b.n	8000b64 <UsageFault_Handler+0x4>

08000b66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b66:	b480      	push	{r7}
 8000b68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr

08000b74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b78:	bf00      	nop
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr

08000b82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b94:	f000 f9c2 	bl	8000f1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b98:	bf00      	nop
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000ba0:	4802      	ldr	r0, [pc, #8]	; (8000bac <ADC1_2_IRQHandler+0x10>)
 8000ba2:	f000 fe87 	bl	80018b4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	20000098 	.word	0x20000098

08000bb0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b086      	sub	sp, #24
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	60f8      	str	r0, [r7, #12]
 8000bb8:	60b9      	str	r1, [r7, #8]
 8000bba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	617b      	str	r3, [r7, #20]
 8000bc0:	e00a      	b.n	8000bd8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000bc2:	f3af 8000 	nop.w
 8000bc6:	4601      	mov	r1, r0
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	1c5a      	adds	r2, r3, #1
 8000bcc:	60ba      	str	r2, [r7, #8]
 8000bce:	b2ca      	uxtb	r2, r1
 8000bd0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	617b      	str	r3, [r7, #20]
 8000bd8:	697a      	ldr	r2, [r7, #20]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	dbf0      	blt.n	8000bc2 <_read+0x12>
	}

return len;
 8000be0:	687b      	ldr	r3, [r7, #4]
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3718      	adds	r7, #24
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}

08000bea <_close>:
	}
	return len;
}

int _close(int file)
{
 8000bea:	b480      	push	{r7}
 8000bec:	b083      	sub	sp, #12
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	6078      	str	r0, [r7, #4]
	return -1;
 8000bf2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	370c      	adds	r7, #12
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr

08000c02 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c02:	b480      	push	{r7}
 8000c04:	b083      	sub	sp, #12
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	6078      	str	r0, [r7, #4]
 8000c0a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c12:	605a      	str	r2, [r3, #4]
	return 0;
 8000c14:	2300      	movs	r3, #0
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr

08000c22 <_isatty>:

int _isatty(int file)
{
 8000c22:	b480      	push	{r7}
 8000c24:	b083      	sub	sp, #12
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	6078      	str	r0, [r7, #4]
	return 1;
 8000c2a:	2301      	movs	r3, #1
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr

08000c38 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b085      	sub	sp, #20
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	60f8      	str	r0, [r7, #12]
 8000c40:	60b9      	str	r1, [r7, #8]
 8000c42:	607a      	str	r2, [r7, #4]
	return 0;
 8000c44:	2300      	movs	r3, #0
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3714      	adds	r7, #20
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
	...

08000c54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c5c:	4a14      	ldr	r2, [pc, #80]	; (8000cb0 <_sbrk+0x5c>)
 8000c5e:	4b15      	ldr	r3, [pc, #84]	; (8000cb4 <_sbrk+0x60>)
 8000c60:	1ad3      	subs	r3, r2, r3
 8000c62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c68:	4b13      	ldr	r3, [pc, #76]	; (8000cb8 <_sbrk+0x64>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d102      	bne.n	8000c76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c70:	4b11      	ldr	r3, [pc, #68]	; (8000cb8 <_sbrk+0x64>)
 8000c72:	4a12      	ldr	r2, [pc, #72]	; (8000cbc <_sbrk+0x68>)
 8000c74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c76:	4b10      	ldr	r3, [pc, #64]	; (8000cb8 <_sbrk+0x64>)
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d207      	bcs.n	8000c94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c84:	f004 f9dc 	bl	8005040 <__errno>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	230c      	movs	r3, #12
 8000c8c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c92:	e009      	b.n	8000ca8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c94:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <_sbrk+0x64>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c9a:	4b07      	ldr	r3, [pc, #28]	; (8000cb8 <_sbrk+0x64>)
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4413      	add	r3, r2
 8000ca2:	4a05      	ldr	r2, [pc, #20]	; (8000cb8 <_sbrk+0x64>)
 8000ca4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ca6:	68fb      	ldr	r3, [r7, #12]
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3718      	adds	r7, #24
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	20018000 	.word	0x20018000
 8000cb4:	00000400 	.word	0x00000400
 8000cb8:	2000008c 	.word	0x2000008c
 8000cbc:	200001a0 	.word	0x200001a0

08000cc0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cc4:	4b17      	ldr	r3, [pc, #92]	; (8000d24 <SystemInit+0x64>)
 8000cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cca:	4a16      	ldr	r2, [pc, #88]	; (8000d24 <SystemInit+0x64>)
 8000ccc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000cd4:	4b14      	ldr	r3, [pc, #80]	; (8000d28 <SystemInit+0x68>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a13      	ldr	r2, [pc, #76]	; (8000d28 <SystemInit+0x68>)
 8000cda:	f043 0301 	orr.w	r3, r3, #1
 8000cde:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000ce0:	4b11      	ldr	r3, [pc, #68]	; (8000d28 <SystemInit+0x68>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000ce6:	4b10      	ldr	r3, [pc, #64]	; (8000d28 <SystemInit+0x68>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4a0f      	ldr	r2, [pc, #60]	; (8000d28 <SystemInit+0x68>)
 8000cec:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000cf0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000cf4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000cf6:	4b0c      	ldr	r3, [pc, #48]	; (8000d28 <SystemInit+0x68>)
 8000cf8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000cfc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000cfe:	4b0a      	ldr	r3, [pc, #40]	; (8000d28 <SystemInit+0x68>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4a09      	ldr	r2, [pc, #36]	; (8000d28 <SystemInit+0x68>)
 8000d04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d08:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000d0a:	4b07      	ldr	r3, [pc, #28]	; (8000d28 <SystemInit+0x68>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d10:	4b04      	ldr	r3, [pc, #16]	; (8000d24 <SystemInit+0x64>)
 8000d12:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d16:	609a      	str	r2, [r3, #8]
#endif
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	e000ed00 	.word	0xe000ed00
 8000d28:	40021000 	.word	0x40021000

08000d2c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000d30:	4b14      	ldr	r3, [pc, #80]	; (8000d84 <MX_USART2_UART_Init+0x58>)
 8000d32:	4a15      	ldr	r2, [pc, #84]	; (8000d88 <MX_USART2_UART_Init+0x5c>)
 8000d34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d36:	4b13      	ldr	r3, [pc, #76]	; (8000d84 <MX_USART2_UART_Init+0x58>)
 8000d38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d3c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d3e:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <MX_USART2_UART_Init+0x58>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d44:	4b0f      	ldr	r3, [pc, #60]	; (8000d84 <MX_USART2_UART_Init+0x58>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d4a:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <MX_USART2_UART_Init+0x58>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d50:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <MX_USART2_UART_Init+0x58>)
 8000d52:	220c      	movs	r2, #12
 8000d54:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d56:	4b0b      	ldr	r3, [pc, #44]	; (8000d84 <MX_USART2_UART_Init+0x58>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d5c:	4b09      	ldr	r3, [pc, #36]	; (8000d84 <MX_USART2_UART_Init+0x58>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d62:	4b08      	ldr	r3, [pc, #32]	; (8000d84 <MX_USART2_UART_Init+0x58>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d68:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <MX_USART2_UART_Init+0x58>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d6e:	4805      	ldr	r0, [pc, #20]	; (8000d84 <MX_USART2_UART_Init+0x58>)
 8000d70:	f003 fc98 	bl	80046a4 <HAL_UART_Init>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000d7a:	f7ff feb5 	bl	8000ae8 <Error_Handler>
  }

}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	20000118 	.word	0x20000118
 8000d88:	40004400 	.word	0x40004400

08000d8c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b08a      	sub	sp, #40	; 0x28
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d94:	f107 0314 	add.w	r3, r7, #20
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
 8000da2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a17      	ldr	r2, [pc, #92]	; (8000e08 <HAL_UART_MspInit+0x7c>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d128      	bne.n	8000e00 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dae:	4b17      	ldr	r3, [pc, #92]	; (8000e0c <HAL_UART_MspInit+0x80>)
 8000db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000db2:	4a16      	ldr	r2, [pc, #88]	; (8000e0c <HAL_UART_MspInit+0x80>)
 8000db4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000db8:	6593      	str	r3, [r2, #88]	; 0x58
 8000dba:	4b14      	ldr	r3, [pc, #80]	; (8000e0c <HAL_UART_MspInit+0x80>)
 8000dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dc2:	613b      	str	r3, [r7, #16]
 8000dc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc6:	4b11      	ldr	r3, [pc, #68]	; (8000e0c <HAL_UART_MspInit+0x80>)
 8000dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dca:	4a10      	ldr	r2, [pc, #64]	; (8000e0c <HAL_UART_MspInit+0x80>)
 8000dcc:	f043 0301 	orr.w	r3, r3, #1
 8000dd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dd2:	4b0e      	ldr	r3, [pc, #56]	; (8000e0c <HAL_UART_MspInit+0x80>)
 8000dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd6:	f003 0301 	and.w	r3, r3, #1
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000dde:	230c      	movs	r3, #12
 8000de0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de2:	2302      	movs	r3, #2
 8000de4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dea:	2303      	movs	r3, #3
 8000dec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dee:	2307      	movs	r3, #7
 8000df0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df2:	f107 0314 	add.w	r3, r7, #20
 8000df6:	4619      	mov	r1, r3
 8000df8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dfc:	f001 ff94 	bl	8002d28 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000e00:	bf00      	nop
 8000e02:	3728      	adds	r7, #40	; 0x28
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	40004400 	.word	0x40004400
 8000e0c:	40021000 	.word	0x40021000

08000e10 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e48 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e14:	f7ff ff54 	bl	8000cc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000e18:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000e1a:	e003      	b.n	8000e24 <LoopCopyDataInit>

08000e1c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000e1c:	4b0b      	ldr	r3, [pc, #44]	; (8000e4c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000e1e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000e20:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000e22:	3104      	adds	r1, #4

08000e24 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000e24:	480a      	ldr	r0, [pc, #40]	; (8000e50 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000e26:	4b0b      	ldr	r3, [pc, #44]	; (8000e54 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000e28:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000e2a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000e2c:	d3f6      	bcc.n	8000e1c <CopyDataInit>
	ldr	r2, =_sbss
 8000e2e:	4a0a      	ldr	r2, [pc, #40]	; (8000e58 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000e30:	e002      	b.n	8000e38 <LoopFillZerobss>

08000e32 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000e32:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000e34:	f842 3b04 	str.w	r3, [r2], #4

08000e38 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000e38:	4b08      	ldr	r3, [pc, #32]	; (8000e5c <LoopForever+0x16>)
	cmp	r2, r3
 8000e3a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000e3c:	d3f9      	bcc.n	8000e32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e3e:	f004 f905 	bl	800504c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e42:	f7ff fd47 	bl	80008d4 <main>

08000e46 <LoopForever>:

LoopForever:
    b LoopForever
 8000e46:	e7fe      	b.n	8000e46 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e48:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000e4c:	08005fa8 	.word	0x08005fa8
	ldr	r0, =_sdata
 8000e50:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000e54:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8000e58:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8000e5c:	200001a0 	.word	0x200001a0

08000e60 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e60:	e7fe      	b.n	8000e60 <ADC3_IRQHandler>
	...

08000e64 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ea0 <HAL_Init+0x3c>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4a0b      	ldr	r2, [pc, #44]	; (8000ea0 <HAL_Init+0x3c>)
 8000e74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e78:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e7a:	2003      	movs	r0, #3
 8000e7c:	f001 fd64 	bl	8002948 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e80:	2000      	movs	r0, #0
 8000e82:	f000 f80f 	bl	8000ea4 <HAL_InitTick>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d002      	beq.n	8000e92 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	71fb      	strb	r3, [r7, #7]
 8000e90:	e001      	b.n	8000e96 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e92:	f7ff fe31 	bl	8000af8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e96:	79fb      	ldrb	r3, [r7, #7]
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3708      	adds	r7, #8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	40022000 	.word	0x40022000

08000ea4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000eac:	2300      	movs	r3, #0
 8000eae:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000eb0:	4b17      	ldr	r3, [pc, #92]	; (8000f10 <HAL_InitTick+0x6c>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d023      	beq.n	8000f00 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000eb8:	4b16      	ldr	r3, [pc, #88]	; (8000f14 <HAL_InitTick+0x70>)
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	4b14      	ldr	r3, [pc, #80]	; (8000f10 <HAL_InitTick+0x6c>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ec6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f001 fd6f 	bl	80029b2 <HAL_SYSTICK_Config>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d10f      	bne.n	8000efa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2b0f      	cmp	r3, #15
 8000ede:	d809      	bhi.n	8000ef4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	6879      	ldr	r1, [r7, #4]
 8000ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee8:	f001 fd39 	bl	800295e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000eec:	4a0a      	ldr	r2, [pc, #40]	; (8000f18 <HAL_InitTick+0x74>)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6013      	str	r3, [r2, #0]
 8000ef2:	e007      	b.n	8000f04 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	73fb      	strb	r3, [r7, #15]
 8000ef8:	e004      	b.n	8000f04 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	73fb      	strb	r3, [r7, #15]
 8000efe:	e001      	b.n	8000f04 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f00:	2301      	movs	r3, #1
 8000f02:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3710      	adds	r7, #16
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	20000008 	.word	0x20000008
 8000f14:	20000000 	.word	0x20000000
 8000f18:	20000004 	.word	0x20000004

08000f1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f20:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <HAL_IncTick+0x20>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	461a      	mov	r2, r3
 8000f26:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <HAL_IncTick+0x24>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	4a04      	ldr	r2, [pc, #16]	; (8000f40 <HAL_IncTick+0x24>)
 8000f2e:	6013      	str	r3, [r2, #0]
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	20000008 	.word	0x20000008
 8000f40:	20000198 	.word	0x20000198

08000f44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  return uwTick;
 8000f48:	4b03      	ldr	r3, [pc, #12]	; (8000f58 <HAL_GetTick+0x14>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	20000198 	.word	0x20000198

08000f5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f64:	f7ff ffee 	bl	8000f44 <HAL_GetTick>
 8000f68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f74:	d005      	beq.n	8000f82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000f76:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <HAL_Delay+0x40>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	4413      	add	r3, r2
 8000f80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f82:	bf00      	nop
 8000f84:	f7ff ffde 	bl	8000f44 <HAL_GetTick>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	68fa      	ldr	r2, [r7, #12]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d8f7      	bhi.n	8000f84 <HAL_Delay+0x28>
  {
  }
}
 8000f94:	bf00      	nop
 8000f96:	3710      	adds	r7, #16
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	20000008 	.word	0x20000008

08000fa0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	689b      	ldr	r3, [r3, #8]
 8000fae:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	431a      	orrs	r2, r3
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	609a      	str	r2, [r3, #8]
}
 8000fba:	bf00      	nop
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr

08000fc6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	b083      	sub	sp, #12
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
 8000fce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	431a      	orrs	r2, r3
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	609a      	str	r2, [r3, #8]
}
 8000fe0:	bf00      	nop
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr

08001008 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001008:	b480      	push	{r7}
 800100a:	b087      	sub	sp, #28
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	607a      	str	r2, [r7, #4]
 8001014:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	3360      	adds	r3, #96	; 0x60
 800101a:	461a      	mov	r2, r3
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	4413      	add	r3, r2
 8001022:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	4b08      	ldr	r3, [pc, #32]	; (800104c <LL_ADC_SetOffset+0x44>)
 800102a:	4013      	ands	r3, r2
 800102c:	687a      	ldr	r2, [r7, #4]
 800102e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001032:	683a      	ldr	r2, [r7, #0]
 8001034:	430a      	orrs	r2, r1
 8001036:	4313      	orrs	r3, r2
 8001038:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001040:	bf00      	nop
 8001042:	371c      	adds	r7, #28
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	03fff000 	.word	0x03fff000

08001050 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	3360      	adds	r3, #96	; 0x60
 800105e:	461a      	mov	r2, r3
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	4413      	add	r3, r2
 8001066:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001070:	4618      	mov	r0, r3
 8001072:	3714      	adds	r7, #20
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800107c:	b480      	push	{r7}
 800107e:	b087      	sub	sp, #28
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	3360      	adds	r3, #96	; 0x60
 800108c:	461a      	mov	r2, r3
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	4413      	add	r3, r2
 8001094:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	431a      	orrs	r2, r3
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80010a6:	bf00      	nop
 80010a8:	371c      	adds	r7, #28
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr

080010b2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80010b2:	b480      	push	{r7}
 80010b4:	b083      	sub	sp, #12
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	68db      	ldr	r3, [r3, #12]
 80010be:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d101      	bne.n	80010ca <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80010c6:	2301      	movs	r3, #1
 80010c8:	e000      	b.n	80010cc <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80010ca:	2300      	movs	r3, #0
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80010d8:	b480      	push	{r7}
 80010da:	b087      	sub	sp, #28
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	60b9      	str	r1, [r7, #8]
 80010e2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	3330      	adds	r3, #48	; 0x30
 80010e8:	461a      	mov	r2, r3
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	0a1b      	lsrs	r3, r3, #8
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	f003 030c 	and.w	r3, r3, #12
 80010f4:	4413      	add	r3, r2
 80010f6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	f003 031f 	and.w	r3, r3, #31
 8001102:	211f      	movs	r1, #31
 8001104:	fa01 f303 	lsl.w	r3, r1, r3
 8001108:	43db      	mvns	r3, r3
 800110a:	401a      	ands	r2, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	0e9b      	lsrs	r3, r3, #26
 8001110:	f003 011f 	and.w	r1, r3, #31
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	f003 031f 	and.w	r3, r3, #31
 800111a:	fa01 f303 	lsl.w	r3, r1, r3
 800111e:	431a      	orrs	r2, r3
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001124:	bf00      	nop
 8001126:	371c      	adds	r7, #28
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d101      	bne.n	8001148 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001144:	2301      	movs	r3, #1
 8001146:	e000      	b.n	800114a <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001148:	2300      	movs	r3, #0
}
 800114a:	4618      	mov	r0, r3
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr

08001156 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001156:	b480      	push	{r7}
 8001158:	b087      	sub	sp, #28
 800115a:	af00      	add	r7, sp, #0
 800115c:	60f8      	str	r0, [r7, #12]
 800115e:	60b9      	str	r1, [r7, #8]
 8001160:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	3314      	adds	r3, #20
 8001166:	461a      	mov	r2, r3
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	0e5b      	lsrs	r3, r3, #25
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	f003 0304 	and.w	r3, r3, #4
 8001172:	4413      	add	r3, r2
 8001174:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	0d1b      	lsrs	r3, r3, #20
 800117e:	f003 031f 	and.w	r3, r3, #31
 8001182:	2107      	movs	r1, #7
 8001184:	fa01 f303 	lsl.w	r3, r1, r3
 8001188:	43db      	mvns	r3, r3
 800118a:	401a      	ands	r2, r3
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	0d1b      	lsrs	r3, r3, #20
 8001190:	f003 031f 	and.w	r3, r3, #31
 8001194:	6879      	ldr	r1, [r7, #4]
 8001196:	fa01 f303 	lsl.w	r3, r1, r3
 800119a:	431a      	orrs	r2, r3
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80011a0:	bf00      	nop
 80011a2:	371c      	adds	r7, #28
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b085      	sub	sp, #20
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	60f8      	str	r0, [r7, #12]
 80011b4:	60b9      	str	r1, [r7, #8]
 80011b6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011c4:	43db      	mvns	r3, r3
 80011c6:	401a      	ands	r2, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f003 0318 	and.w	r3, r3, #24
 80011ce:	4908      	ldr	r1, [pc, #32]	; (80011f0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80011d0:	40d9      	lsrs	r1, r3
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	400b      	ands	r3, r1
 80011d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011da:	431a      	orrs	r2, r3
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80011e2:	bf00      	nop
 80011e4:	3714      	adds	r7, #20
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	0007ffff 	.word	0x0007ffff

080011f4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	f003 031f 	and.w	r3, r3, #31
}
 8001204:	4618      	mov	r0, r3
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr

08001210 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001220:	4618      	mov	r0, r3
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800123c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001240:	687a      	ldr	r2, [r7, #4]
 8001242:	6093      	str	r3, [r2, #8]
}
 8001244:	bf00      	nop
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001260:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001264:	d101      	bne.n	800126a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001266:	2301      	movs	r3, #1
 8001268:	e000      	b.n	800126c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800126a:	2300      	movs	r3, #0
}
 800126c:	4618      	mov	r0, r3
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr

08001278 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001288:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800128c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001294:	bf00      	nop
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr

080012a0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80012b4:	d101      	bne.n	80012ba <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80012b6:	2301      	movs	r3, #1
 80012b8:	e000      	b.n	80012bc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80012ba:	2300      	movs	r3, #0
}
 80012bc:	4618      	mov	r0, r3
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr

080012c8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80012d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012dc:	f043 0201 	orr.w	r2, r3, #1
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80012e4:	bf00      	nop
 80012e6:	370c      	adds	r7, #12
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr

080012f0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	f003 0301 	and.w	r3, r3, #1
 8001300:	2b01      	cmp	r3, #1
 8001302:	d101      	bne.n	8001308 <LL_ADC_IsEnabled+0x18>
 8001304:	2301      	movs	r3, #1
 8001306:	e000      	b.n	800130a <LL_ADC_IsEnabled+0x1a>
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	370c      	adds	r7, #12
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr

08001316 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001316:	b480      	push	{r7}
 8001318:	b083      	sub	sp, #12
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001326:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800132a:	f043 0204 	orr.w	r2, r3, #4
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001332:	bf00      	nop
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr

0800133e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800133e:	b480      	push	{r7}
 8001340:	b083      	sub	sp, #12
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	f003 0304 	and.w	r3, r3, #4
 800134e:	2b04      	cmp	r3, #4
 8001350:	d101      	bne.n	8001356 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001352:	2301      	movs	r3, #1
 8001354:	e000      	b.n	8001358 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001356:	2300      	movs	r3, #0
}
 8001358:	4618      	mov	r0, r3
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	f003 0308 	and.w	r3, r3, #8
 8001374:	2b08      	cmp	r3, #8
 8001376:	d101      	bne.n	800137c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001378:	2301      	movs	r3, #1
 800137a:	e000      	b.n	800137e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800137c:	2300      	movs	r3, #0
}
 800137e:	4618      	mov	r0, r3
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
	...

0800138c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800138c:	b590      	push	{r4, r7, lr}
 800138e:	b089      	sub	sp, #36	; 0x24
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001394:	2300      	movs	r3, #0
 8001396:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001398:	2300      	movs	r3, #0
 800139a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d101      	bne.n	80013a6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e134      	b.n	8001610 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	691b      	ldr	r3, [r3, #16]
 80013aa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d109      	bne.n	80013c8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f7ff f951 	bl	800065c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2200      	movs	r2, #0
 80013be:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2200      	movs	r2, #0
 80013c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff ff3f 	bl	8001250 <LL_ADC_IsDeepPowerDownEnabled>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d004      	beq.n	80013e2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff ff25 	bl	800122c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff ff5a 	bl	80012a0 <LL_ADC_IsInternalRegulatorEnabled>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d113      	bne.n	800141a <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff ff3e 	bl	8001278 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80013fc:	4b86      	ldr	r3, [pc, #536]	; (8001618 <HAL_ADC_Init+0x28c>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	099b      	lsrs	r3, r3, #6
 8001402:	4a86      	ldr	r2, [pc, #536]	; (800161c <HAL_ADC_Init+0x290>)
 8001404:	fba2 2303 	umull	r2, r3, r2, r3
 8001408:	099b      	lsrs	r3, r3, #6
 800140a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800140c:	e002      	b.n	8001414 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	3b01      	subs	r3, #1
 8001412:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d1f9      	bne.n	800140e <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff ff3e 	bl	80012a0 <LL_ADC_IsInternalRegulatorEnabled>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d10d      	bne.n	8001446 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800142e:	f043 0210 	orr.w	r2, r3, #16
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800143a:	f043 0201 	orr.w	r2, r3, #1
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff ff77 	bl	800133e <LL_ADC_REG_IsConversionOngoing>
 8001450:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001456:	f003 0310 	and.w	r3, r3, #16
 800145a:	2b00      	cmp	r3, #0
 800145c:	f040 80cf 	bne.w	80015fe <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	2b00      	cmp	r3, #0
 8001464:	f040 80cb 	bne.w	80015fe <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800146c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001470:	f043 0202 	orr.w	r2, r3, #2
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff ff37 	bl	80012f0 <LL_ADC_IsEnabled>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d115      	bne.n	80014b4 <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001488:	4865      	ldr	r0, [pc, #404]	; (8001620 <HAL_ADC_Init+0x294>)
 800148a:	f7ff ff31 	bl	80012f0 <LL_ADC_IsEnabled>
 800148e:	4604      	mov	r4, r0
 8001490:	4864      	ldr	r0, [pc, #400]	; (8001624 <HAL_ADC_Init+0x298>)
 8001492:	f7ff ff2d 	bl	80012f0 <LL_ADC_IsEnabled>
 8001496:	4603      	mov	r3, r0
 8001498:	431c      	orrs	r4, r3
 800149a:	4863      	ldr	r0, [pc, #396]	; (8001628 <HAL_ADC_Init+0x29c>)
 800149c:	f7ff ff28 	bl	80012f0 <LL_ADC_IsEnabled>
 80014a0:	4603      	mov	r3, r0
 80014a2:	4323      	orrs	r3, r4
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d105      	bne.n	80014b4 <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	4619      	mov	r1, r3
 80014ae:	485f      	ldr	r0, [pc, #380]	; (800162c <HAL_ADC_Init+0x2a0>)
 80014b0:	f7ff fd76 	bl	8000fa0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	7e5b      	ldrb	r3, [r3, #25]
 80014b8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80014be:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80014c4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80014ca:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014d2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80014d4:	4313      	orrs	r3, r2
 80014d6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d106      	bne.n	80014f0 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e6:	3b01      	subs	r3, #1
 80014e8:	045b      	lsls	r3, r3, #17
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d009      	beq.n	800150c <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014fc:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001504:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001506:	69ba      	ldr	r2, [r7, #24]
 8001508:	4313      	orrs	r3, r2
 800150a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	68da      	ldr	r2, [r3, #12]
 8001512:	4b47      	ldr	r3, [pc, #284]	; (8001630 <HAL_ADC_Init+0x2a4>)
 8001514:	4013      	ands	r3, r2
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	6812      	ldr	r2, [r2, #0]
 800151a:	69b9      	ldr	r1, [r7, #24]
 800151c:	430b      	orrs	r3, r1
 800151e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff ff0a 	bl	800133e <LL_ADC_REG_IsConversionOngoing>
 800152a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff ff17 	bl	8001364 <LL_ADC_INJ_IsConversionOngoing>
 8001536:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d13d      	bne.n	80015ba <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d13a      	bne.n	80015ba <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001548:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001550:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001552:	4313      	orrs	r3, r2
 8001554:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001560:	f023 0302 	bic.w	r3, r3, #2
 8001564:	687a      	ldr	r2, [r7, #4]
 8001566:	6812      	ldr	r2, [r2, #0]
 8001568:	69b9      	ldr	r1, [r7, #24]
 800156a:	430b      	orrs	r3, r1
 800156c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001574:	2b01      	cmp	r3, #1
 8001576:	d118      	bne.n	80015aa <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	691b      	ldr	r3, [r3, #16]
 800157e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001582:	f023 0304 	bic.w	r3, r3, #4
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800158e:	4311      	orrs	r1, r2
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001594:	4311      	orrs	r1, r2
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800159a:	430a      	orrs	r2, r1
 800159c:	431a      	orrs	r2, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f042 0201 	orr.w	r2, r2, #1
 80015a6:	611a      	str	r2, [r3, #16]
 80015a8:	e007      	b.n	80015ba <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	691a      	ldr	r2, [r3, #16]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f022 0201 	bic.w	r2, r2, #1
 80015b8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	691b      	ldr	r3, [r3, #16]
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d10c      	bne.n	80015dc <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c8:	f023 010f 	bic.w	r1, r3, #15
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	69db      	ldr	r3, [r3, #28]
 80015d0:	1e5a      	subs	r2, r3, #1
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	430a      	orrs	r2, r1
 80015d8:	631a      	str	r2, [r3, #48]	; 0x30
 80015da:	e007      	b.n	80015ec <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f022 020f 	bic.w	r2, r2, #15
 80015ea:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015f0:	f023 0303 	bic.w	r3, r3, #3
 80015f4:	f043 0201 	orr.w	r2, r3, #1
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	655a      	str	r2, [r3, #84]	; 0x54
 80015fc:	e007      	b.n	800160e <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001602:	f043 0210 	orr.w	r2, r3, #16
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800160e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001610:	4618      	mov	r0, r3
 8001612:	3724      	adds	r7, #36	; 0x24
 8001614:	46bd      	mov	sp, r7
 8001616:	bd90      	pop	{r4, r7, pc}
 8001618:	20000000 	.word	0x20000000
 800161c:	053e2d63 	.word	0x053e2d63
 8001620:	50040000 	.word	0x50040000
 8001624:	50040100 	.word	0x50040100
 8001628:	50040200 	.word	0x50040200
 800162c:	50040300 	.word	0x50040300
 8001630:	fff0c007 	.word	0xfff0c007

08001634 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b086      	sub	sp, #24
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800163c:	4893      	ldr	r0, [pc, #588]	; (800188c <HAL_ADC_Start_IT+0x258>)
 800163e:	f7ff fdd9 	bl	80011f4 <LL_ADC_GetMultimode>
 8001642:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff fe78 	bl	800133e <LL_ADC_REG_IsConversionOngoing>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	f040 8112 	bne.w	800187a <HAL_ADC_Start_IT+0x246>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800165c:	2b01      	cmp	r3, #1
 800165e:	d101      	bne.n	8001664 <HAL_ADC_Start_IT+0x30>
 8001660:	2302      	movs	r3, #2
 8001662:	e10f      	b.n	8001884 <HAL_ADC_Start_IT+0x250>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2201      	movs	r2, #1
 8001668:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f000 ff3d 	bl	80024ec <ADC_Enable>
 8001672:	4603      	mov	r3, r0
 8001674:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001676:	7dfb      	ldrb	r3, [r7, #23]
 8001678:	2b00      	cmp	r3, #0
 800167a:	f040 80f9 	bne.w	8001870 <HAL_ADC_Start_IT+0x23c>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001682:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001686:	f023 0301 	bic.w	r3, r3, #1
 800168a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a7e      	ldr	r2, [pc, #504]	; (8001890 <HAL_ADC_Start_IT+0x25c>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d002      	beq.n	80016a2 <HAL_ADC_Start_IT+0x6e>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	e000      	b.n	80016a4 <HAL_ADC_Start_IT+0x70>
 80016a2:	4b7c      	ldr	r3, [pc, #496]	; (8001894 <HAL_ADC_Start_IT+0x260>)
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	6812      	ldr	r2, [r2, #0]
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d002      	beq.n	80016b2 <HAL_ADC_Start_IT+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d105      	bne.n	80016be <HAL_ADC_Start_IT+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016b6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d006      	beq.n	80016d8 <HAL_ADC_Start_IT+0xa4>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ce:	f023 0206 	bic.w	r2, r3, #6
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	659a      	str	r2, [r3, #88]	; 0x58
 80016d6:	e002      	b.n	80016de <HAL_ADC_Start_IT+0xaa>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2200      	movs	r2, #0
 80016dc:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	221c      	movs	r2, #28
 80016e4:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2200      	movs	r2, #0
 80016ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	685a      	ldr	r2, [r3, #4]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f022 021c 	bic.w	r2, r2, #28
 80016fc:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	695b      	ldr	r3, [r3, #20]
 8001702:	2b08      	cmp	r3, #8
 8001704:	d108      	bne.n	8001718 <HAL_ADC_Start_IT+0xe4>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	685a      	ldr	r2, [r3, #4]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f042 0208 	orr.w	r2, r2, #8
 8001714:	605a      	str	r2, [r3, #4]
          break;
 8001716:	e008      	b.n	800172a <HAL_ADC_Start_IT+0xf6>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	685a      	ldr	r2, [r3, #4]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f042 0204 	orr.w	r2, r2, #4
 8001726:	605a      	str	r2, [r3, #4]
          break;
 8001728:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800172e:	2b00      	cmp	r3, #0
 8001730:	d107      	bne.n	8001742 <HAL_ADC_Start_IT+0x10e>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	685a      	ldr	r2, [r3, #4]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f042 0210 	orr.w	r2, r2, #16
 8001740:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a52      	ldr	r2, [pc, #328]	; (8001890 <HAL_ADC_Start_IT+0x25c>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d002      	beq.n	8001752 <HAL_ADC_Start_IT+0x11e>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	e000      	b.n	8001754 <HAL_ADC_Start_IT+0x120>
 8001752:	4b50      	ldr	r3, [pc, #320]	; (8001894 <HAL_ADC_Start_IT+0x260>)
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	6812      	ldr	r2, [r2, #0]
 8001758:	4293      	cmp	r3, r2
 800175a:	d008      	beq.n	800176e <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d005      	beq.n	800176e <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	2b05      	cmp	r3, #5
 8001766:	d002      	beq.n	800176e <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	2b09      	cmp	r3, #9
 800176c:	d13b      	bne.n	80017e6 <HAL_ADC_Start_IT+0x1b2>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001778:	2b00      	cmp	r3, #0
 800177a:	d02d      	beq.n	80017d8 <HAL_ADC_Start_IT+0x1a4>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001780:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001784:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	695b      	ldr	r3, [r3, #20]
 8001790:	2b08      	cmp	r3, #8
 8001792:	d110      	bne.n	80017b6 <HAL_ADC_Start_IT+0x182>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	685a      	ldr	r2, [r3, #4]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f022 0220 	bic.w	r2, r2, #32
 80017a2:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	685a      	ldr	r2, [r3, #4]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017b2:	605a      	str	r2, [r3, #4]
              break;
 80017b4:	e011      	b.n	80017da <HAL_ADC_Start_IT+0x1a6>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	685a      	ldr	r2, [r3, #4]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80017c4:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	685a      	ldr	r2, [r3, #4]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f042 0220 	orr.w	r2, r2, #32
 80017d4:	605a      	str	r2, [r3, #4]
              break;
 80017d6:	e000      	b.n	80017da <HAL_ADC_Start_IT+0x1a6>
          }
        }
 80017d8:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4618      	mov	r0, r3
 80017e0:	f7ff fd99 	bl	8001316 <LL_ADC_REG_StartConversion>
 80017e4:	e04d      	b.n	8001882 <HAL_ADC_Start_IT+0x24e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a26      	ldr	r2, [pc, #152]	; (8001890 <HAL_ADC_Start_IT+0x25c>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d002      	beq.n	8001802 <HAL_ADC_Start_IT+0x1ce>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	e000      	b.n	8001804 <HAL_ADC_Start_IT+0x1d0>
 8001802:	4b24      	ldr	r3, [pc, #144]	; (8001894 <HAL_ADC_Start_IT+0x260>)
 8001804:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	68db      	ldr	r3, [r3, #12]
 800180a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d036      	beq.n	8001880 <HAL_ADC_Start_IT+0x24c>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001816:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800181a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	655a      	str	r2, [r3, #84]	; 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	695b      	ldr	r3, [r3, #20]
 8001826:	2b08      	cmp	r3, #8
 8001828:	d110      	bne.n	800184c <HAL_ADC_Start_IT+0x218>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	685a      	ldr	r2, [r3, #4]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f022 0220 	bic.w	r2, r2, #32
 8001838:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	685a      	ldr	r2, [r3, #4]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001848:	605a      	str	r2, [r3, #4]
              break;
 800184a:	e01a      	b.n	8001882 <HAL_ADC_Start_IT+0x24e>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	685a      	ldr	r2, [r3, #4]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800185a:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	685a      	ldr	r2, [r3, #4]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f042 0220 	orr.w	r2, r2, #32
 800186a:	605a      	str	r2, [r3, #4]
              break;
 800186c:	bf00      	nop
 800186e:	e008      	b.n	8001882 <HAL_ADC_Start_IT+0x24e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2200      	movs	r2, #0
 8001874:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001878:	e003      	b.n	8001882 <HAL_ADC_Start_IT+0x24e>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800187a:	2302      	movs	r3, #2
 800187c:	75fb      	strb	r3, [r7, #23]
 800187e:	e000      	b.n	8001882 <HAL_ADC_Start_IT+0x24e>
        }
 8001880:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 8001882:	7dfb      	ldrb	r3, [r7, #23]
}
 8001884:	4618      	mov	r0, r3
 8001886:	3718      	adds	r7, #24
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	50040300 	.word	0x50040300
 8001890:	50040100 	.word	0x50040100
 8001894:	50040000 	.word	0x50040000

08001898 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
	...

080018b4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b08a      	sub	sp, #40	; 0x28
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80018bc:	2300      	movs	r3, #0
 80018be:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80018d0:	4882      	ldr	r0, [pc, #520]	; (8001adc <HAL_ADC_IRQHandler+0x228>)
 80018d2:	f7ff fc8f 	bl	80011f4 <LL_ADC_GetMultimode>
 80018d6:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d017      	beq.n	8001912 <HAL_ADC_IRQHandler+0x5e>
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	f003 0302 	and.w	r3, r3, #2
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d012      	beq.n	8001912 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018f0:	f003 0310 	and.w	r3, r3, #16
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d105      	bne.n	8001904 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018fc:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f000 fe99 	bl	800263c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2202      	movs	r2, #2
 8001910:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	f003 0304 	and.w	r3, r3, #4
 8001918:	2b00      	cmp	r3, #0
 800191a:	d004      	beq.n	8001926 <HAL_ADC_IRQHandler+0x72>
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	f003 0304 	and.w	r3, r3, #4
 8001922:	2b00      	cmp	r3, #0
 8001924:	d10a      	bne.n	800193c <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800192c:	2b00      	cmp	r3, #0
 800192e:	f000 8083 	beq.w	8001a38 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	f003 0308 	and.w	r3, r3, #8
 8001938:	2b00      	cmp	r3, #0
 800193a:	d07d      	beq.n	8001a38 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001940:	f003 0310 	and.w	r3, r3, #16
 8001944:	2b00      	cmp	r3, #0
 8001946:	d105      	bne.n	8001954 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800194c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff fbaa 	bl	80010b2 <LL_ADC_REG_IsTriggerSourceSWStart>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d062      	beq.n	8001a2a <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a5d      	ldr	r2, [pc, #372]	; (8001ae0 <HAL_ADC_IRQHandler+0x22c>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d002      	beq.n	8001974 <HAL_ADC_IRQHandler+0xc0>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	e000      	b.n	8001976 <HAL_ADC_IRQHandler+0xc2>
 8001974:	4b5b      	ldr	r3, [pc, #364]	; (8001ae4 <HAL_ADC_IRQHandler+0x230>)
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	6812      	ldr	r2, [r2, #0]
 800197a:	4293      	cmp	r3, r2
 800197c:	d008      	beq.n	8001990 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d005      	beq.n	8001990 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	2b05      	cmp	r3, #5
 8001988:	d002      	beq.n	8001990 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	2b09      	cmp	r3, #9
 800198e:	d104      	bne.n	800199a <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	623b      	str	r3, [r7, #32]
 8001998:	e00c      	b.n	80019b4 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a50      	ldr	r2, [pc, #320]	; (8001ae0 <HAL_ADC_IRQHandler+0x22c>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d002      	beq.n	80019aa <HAL_ADC_IRQHandler+0xf6>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	e000      	b.n	80019ac <HAL_ADC_IRQHandler+0xf8>
 80019aa:	4b4e      	ldr	r3, [pc, #312]	; (8001ae4 <HAL_ADC_IRQHandler+0x230>)
 80019ac:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	68db      	ldr	r3, [r3, #12]
 80019b2:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80019b4:	6a3b      	ldr	r3, [r7, #32]
 80019b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d135      	bne.n	8001a2a <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0308 	and.w	r3, r3, #8
 80019c8:	2b08      	cmp	r3, #8
 80019ca:	d12e      	bne.n	8001a2a <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff fcb4 	bl	800133e <LL_ADC_REG_IsConversionOngoing>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d11a      	bne.n	8001a12 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	685a      	ldr	r2, [r3, #4]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f022 020c 	bic.w	r2, r2, #12
 80019ea:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d112      	bne.n	8001a2a <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a08:	f043 0201 	orr.w	r2, r3, #1
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	655a      	str	r2, [r3, #84]	; 0x54
 8001a10:	e00b      	b.n	8001a2a <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a16:	f043 0210 	orr.w	r2, r3, #16
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a22:	f043 0201 	orr.w	r2, r3, #1
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f7fe ff36 	bl	800089c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	220c      	movs	r2, #12
 8001a36:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	f003 0320 	and.w	r3, r3, #32
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d004      	beq.n	8001a4c <HAL_ADC_IRQHandler+0x198>
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	f003 0320 	and.w	r3, r3, #32
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d10b      	bne.n	8001a64 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	f000 809f 	beq.w	8001b96 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	f000 8099 	beq.w	8001b96 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a68:	f003 0310 	and.w	r3, r3, #16
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d105      	bne.n	8001a7c <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a74:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff fb55 	bl	8001130 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001a86:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7ff fb10 	bl	80010b2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001a92:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a11      	ldr	r2, [pc, #68]	; (8001ae0 <HAL_ADC_IRQHandler+0x22c>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d002      	beq.n	8001aa4 <HAL_ADC_IRQHandler+0x1f0>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	e000      	b.n	8001aa6 <HAL_ADC_IRQHandler+0x1f2>
 8001aa4:	4b0f      	ldr	r3, [pc, #60]	; (8001ae4 <HAL_ADC_IRQHandler+0x230>)
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	6812      	ldr	r2, [r2, #0]
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d008      	beq.n	8001ac0 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d005      	beq.n	8001ac0 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	2b06      	cmp	r3, #6
 8001ab8:	d002      	beq.n	8001ac0 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	2b07      	cmp	r3, #7
 8001abe:	d104      	bne.n	8001aca <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	68db      	ldr	r3, [r3, #12]
 8001ac6:	623b      	str	r3, [r7, #32]
 8001ac8:	e013      	b.n	8001af2 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a04      	ldr	r2, [pc, #16]	; (8001ae0 <HAL_ADC_IRQHandler+0x22c>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d009      	beq.n	8001ae8 <HAL_ADC_IRQHandler+0x234>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	e007      	b.n	8001aea <HAL_ADC_IRQHandler+0x236>
 8001ada:	bf00      	nop
 8001adc:	50040300 	.word	0x50040300
 8001ae0:	50040100 	.word	0x50040100
 8001ae4:	50040000 	.word	0x50040000
 8001ae8:	4b7d      	ldr	r3, [pc, #500]	; (8001ce0 <HAL_ADC_IRQHandler+0x42c>)
 8001aea:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d10c      	bne.n	8001b12 <HAL_ADC_IRQHandler+0x25e>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8001af8:	6a3b      	ldr	r3, [r7, #32]
 8001afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d142      	bne.n	8001b88 <HAL_ADC_IRQHandler+0x2d4>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d03f      	beq.n	8001b88 <HAL_ADC_IRQHandler+0x2d4>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 8001b08:	6a3b      	ldr	r3, [r7, #32]
 8001b0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d13a      	bne.n	8001b88 <HAL_ADC_IRQHandler+0x2d4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b1c:	2b40      	cmp	r3, #64	; 0x40
 8001b1e:	d133      	bne.n	8001b88 <HAL_ADC_IRQHandler+0x2d4>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001b20:	6a3b      	ldr	r3, [r7, #32]
 8001b22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d12e      	bne.n	8001b88 <HAL_ADC_IRQHandler+0x2d4>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff fc18 	bl	8001364 <LL_ADC_INJ_IsConversionOngoing>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d11a      	bne.n	8001b70 <HAL_ADC_IRQHandler+0x2bc>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	685a      	ldr	r2, [r3, #4]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001b48:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d112      	bne.n	8001b88 <HAL_ADC_IRQHandler+0x2d4>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b66:	f043 0201 	orr.w	r2, r3, #1
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	655a      	str	r2, [r3, #84]	; 0x54
 8001b6e:	e00b      	b.n	8001b88 <HAL_ADC_IRQHandler+0x2d4>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b74:	f043 0210 	orr.w	r2, r3, #16
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b80:	f043 0201 	orr.w	r2, r3, #1
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f000 fd2f 	bl	80025ec <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2260      	movs	r2, #96	; 0x60
 8001b94:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d011      	beq.n	8001bc4 <HAL_ADC_IRQHandler+0x310>
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d00c      	beq.n	8001bc4 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f000 f896 	bl	8001ce8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2280      	movs	r2, #128	; 0x80
 8001bc2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d012      	beq.n	8001bf4 <HAL_ADC_IRQHandler+0x340>
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d00d      	beq.n	8001bf4 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bdc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f000 fd15 	bl	8002614 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bf2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d012      	beq.n	8001c24 <HAL_ADC_IRQHandler+0x370>
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d00d      	beq.n	8001c24 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c0c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f000 fd07 	bl	8002628 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c22:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	f003 0310 	and.w	r3, r3, #16
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d036      	beq.n	8001c9c <HAL_ADC_IRQHandler+0x3e8>
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	f003 0310 	and.w	r3, r3, #16
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d031      	beq.n	8001c9c <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d102      	bne.n	8001c46 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8001c40:	2301      	movs	r3, #1
 8001c42:	627b      	str	r3, [r7, #36]	; 0x24
 8001c44:	e014      	b.n	8001c70 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d008      	beq.n	8001c5e <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001c4c:	4825      	ldr	r0, [pc, #148]	; (8001ce4 <HAL_ADC_IRQHandler+0x430>)
 8001c4e:	f7ff fadf 	bl	8001210 <LL_ADC_GetMultiDMATransfer>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d00b      	beq.n	8001c70 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	627b      	str	r3, [r7, #36]	; 0x24
 8001c5c:	e008      	b.n	8001c70 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	f003 0301 	and.w	r3, r3, #1
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8001c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d10e      	bne.n	8001c94 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c7a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c86:	f043 0202 	orr.w	r2, r3, #2
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f000 f834 	bl	8001cfc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2210      	movs	r2, #16
 8001c9a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d018      	beq.n	8001cd8 <HAL_ADC_IRQHandler+0x424>
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d013      	beq.n	8001cd8 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cb4:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc0:	f043 0208 	orr.w	r2, r3, #8
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cd0:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f000 fc94 	bl	8002600 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001cd8:	bf00      	nop
 8001cda:	3728      	adds	r7, #40	; 0x28
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	50040000 	.word	0x50040000
 8001ce4:	50040300 	.word	0x50040300

08001ce8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001cf0:	bf00      	nop
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001d04:	bf00      	nop
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b0b6      	sub	sp, #216	; 0xd8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001d20:	2300      	movs	r3, #0
 8001d22:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d101      	bne.n	8001d32 <HAL_ADC_ConfigChannel+0x22>
 8001d2e:	2302      	movs	r3, #2
 8001d30:	e3c6      	b.n	80024c0 <HAL_ADC_ConfigChannel+0x7b0>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2201      	movs	r2, #1
 8001d36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff fafd 	bl	800133e <LL_ADC_REG_IsConversionOngoing>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	f040 83a7 	bne.w	800249a <HAL_ADC_ConfigChannel+0x78a>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	2b05      	cmp	r3, #5
 8001d52:	d824      	bhi.n	8001d9e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	3b02      	subs	r3, #2
 8001d5a:	2b03      	cmp	r3, #3
 8001d5c:	d81b      	bhi.n	8001d96 <HAL_ADC_ConfigChannel+0x86>
 8001d5e:	a201      	add	r2, pc, #4	; (adr r2, 8001d64 <HAL_ADC_ConfigChannel+0x54>)
 8001d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d64:	08001d75 	.word	0x08001d75
 8001d68:	08001d7d 	.word	0x08001d7d
 8001d6c:	08001d85 	.word	0x08001d85
 8001d70:	08001d8d 	.word	0x08001d8d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	220c      	movs	r2, #12
 8001d78:	605a      	str	r2, [r3, #4]
          break;
 8001d7a:	e011      	b.n	8001da0 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	2212      	movs	r2, #18
 8001d80:	605a      	str	r2, [r3, #4]
          break;
 8001d82:	e00d      	b.n	8001da0 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	2218      	movs	r2, #24
 8001d88:	605a      	str	r2, [r3, #4]
          break;
 8001d8a:	e009      	b.n	8001da0 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d92:	605a      	str	r2, [r3, #4]
          break;
 8001d94:	e004      	b.n	8001da0 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	2206      	movs	r2, #6
 8001d9a:	605a      	str	r2, [r3, #4]
          break;
 8001d9c:	e000      	b.n	8001da0 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001d9e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6818      	ldr	r0, [r3, #0]
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	6859      	ldr	r1, [r3, #4]
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	461a      	mov	r2, r3
 8001dae:	f7ff f993 	bl	80010d8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7ff fac1 	bl	800133e <LL_ADC_REG_IsConversionOngoing>
 8001dbc:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff facd 	bl	8001364 <LL_ADC_INJ_IsConversionOngoing>
 8001dca:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001dce:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	f040 81a6 	bne.w	8002124 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001dd8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	f040 81a1 	bne.w	8002124 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6818      	ldr	r0, [r3, #0]
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	6819      	ldr	r1, [r3, #0]
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	461a      	mov	r2, r3
 8001df0:	f7ff f9b1 	bl	8001156 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	695a      	ldr	r2, [r3, #20]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	08db      	lsrs	r3, r3, #3
 8001e00:	f003 0303 	and.w	r3, r3, #3
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	691b      	ldr	r3, [r3, #16]
 8001e12:	2b04      	cmp	r3, #4
 8001e14:	d00a      	beq.n	8001e2c <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6818      	ldr	r0, [r3, #0]
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	6919      	ldr	r1, [r3, #16]
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001e26:	f7ff f8ef 	bl	8001008 <LL_ADC_SetOffset>
 8001e2a:	e17b      	b.n	8002124 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2100      	movs	r1, #0
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7ff f90c 	bl	8001050 <LL_ADC_GetOffsetChannel>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d10a      	bne.n	8001e58 <HAL_ADC_ConfigChannel+0x148>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	2100      	movs	r1, #0
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7ff f901 	bl	8001050 <LL_ADC_GetOffsetChannel>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	0e9b      	lsrs	r3, r3, #26
 8001e52:	f003 021f 	and.w	r2, r3, #31
 8001e56:	e01e      	b.n	8001e96 <HAL_ADC_ConfigChannel+0x186>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2100      	movs	r1, #0
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7ff f8f6 	bl	8001050 <LL_ADC_GetOffsetChannel>
 8001e64:	4603      	mov	r3, r0
 8001e66:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e6a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001e6e:	fa93 f3a3 	rbit	r3, r3
 8001e72:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e76:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001e7a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001e7e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d101      	bne.n	8001e8a <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001e86:	2320      	movs	r3, #32
 8001e88:	e004      	b.n	8001e94 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001e8a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e8e:	fab3 f383 	clz	r3, r3
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d105      	bne.n	8001eae <HAL_ADC_ConfigChannel+0x19e>
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	0e9b      	lsrs	r3, r3, #26
 8001ea8:	f003 031f 	and.w	r3, r3, #31
 8001eac:	e018      	b.n	8001ee0 <HAL_ADC_ConfigChannel+0x1d0>
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001eba:	fa93 f3a3 	rbit	r3, r3
 8001ebe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001ec2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001ec6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001eca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d101      	bne.n	8001ed6 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001ed2:	2320      	movs	r3, #32
 8001ed4:	e004      	b.n	8001ee0 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001ed6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001eda:	fab3 f383 	clz	r3, r3
 8001ede:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d106      	bne.n	8001ef2 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	2100      	movs	r1, #0
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7ff f8c5 	bl	800107c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	2101      	movs	r1, #1
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7ff f8a9 	bl	8001050 <LL_ADC_GetOffsetChannel>
 8001efe:	4603      	mov	r3, r0
 8001f00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d10a      	bne.n	8001f1e <HAL_ADC_ConfigChannel+0x20e>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2101      	movs	r1, #1
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff f89e 	bl	8001050 <LL_ADC_GetOffsetChannel>
 8001f14:	4603      	mov	r3, r0
 8001f16:	0e9b      	lsrs	r3, r3, #26
 8001f18:	f003 021f 	and.w	r2, r3, #31
 8001f1c:	e01e      	b.n	8001f5c <HAL_ADC_ConfigChannel+0x24c>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2101      	movs	r1, #1
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7ff f893 	bl	8001050 <LL_ADC_GetOffsetChannel>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f30:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001f34:	fa93 f3a3 	rbit	r3, r3
 8001f38:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001f3c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001f40:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001f44:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d101      	bne.n	8001f50 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001f4c:	2320      	movs	r3, #32
 8001f4e:	e004      	b.n	8001f5a <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001f50:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001f54:	fab3 f383 	clz	r3, r3
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d105      	bne.n	8001f74 <HAL_ADC_ConfigChannel+0x264>
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	0e9b      	lsrs	r3, r3, #26
 8001f6e:	f003 031f 	and.w	r3, r3, #31
 8001f72:	e018      	b.n	8001fa6 <HAL_ADC_ConfigChannel+0x296>
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001f80:	fa93 f3a3 	rbit	r3, r3
 8001f84:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001f88:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001f8c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001f90:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d101      	bne.n	8001f9c <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001f98:	2320      	movs	r3, #32
 8001f9a:	e004      	b.n	8001fa6 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001f9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001fa0:	fab3 f383 	clz	r3, r3
 8001fa4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d106      	bne.n	8001fb8 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	2101      	movs	r1, #1
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7ff f862 	bl	800107c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2102      	movs	r1, #2
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7ff f846 	bl	8001050 <LL_ADC_GetOffsetChannel>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d10a      	bne.n	8001fe4 <HAL_ADC_ConfigChannel+0x2d4>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2102      	movs	r1, #2
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7ff f83b 	bl	8001050 <LL_ADC_GetOffsetChannel>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	0e9b      	lsrs	r3, r3, #26
 8001fde:	f003 021f 	and.w	r2, r3, #31
 8001fe2:	e01e      	b.n	8002022 <HAL_ADC_ConfigChannel+0x312>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2102      	movs	r1, #2
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7ff f830 	bl	8001050 <LL_ADC_GetOffsetChannel>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ffa:	fa93 f3a3 	rbit	r3, r3
 8001ffe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002002:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002006:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800200a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800200e:	2b00      	cmp	r3, #0
 8002010:	d101      	bne.n	8002016 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002012:	2320      	movs	r3, #32
 8002014:	e004      	b.n	8002020 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002016:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800201a:	fab3 f383 	clz	r3, r3
 800201e:	b2db      	uxtb	r3, r3
 8002020:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800202a:	2b00      	cmp	r3, #0
 800202c:	d105      	bne.n	800203a <HAL_ADC_ConfigChannel+0x32a>
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	0e9b      	lsrs	r3, r3, #26
 8002034:	f003 031f 	and.w	r3, r3, #31
 8002038:	e016      	b.n	8002068 <HAL_ADC_ConfigChannel+0x358>
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002042:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002046:	fa93 f3a3 	rbit	r3, r3
 800204a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800204c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800204e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002052:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002056:	2b00      	cmp	r3, #0
 8002058:	d101      	bne.n	800205e <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800205a:	2320      	movs	r3, #32
 800205c:	e004      	b.n	8002068 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800205e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002062:	fab3 f383 	clz	r3, r3
 8002066:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002068:	429a      	cmp	r2, r3
 800206a:	d106      	bne.n	800207a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2200      	movs	r2, #0
 8002072:	2102      	movs	r1, #2
 8002074:	4618      	mov	r0, r3
 8002076:	f7ff f801 	bl	800107c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	2103      	movs	r1, #3
 8002080:	4618      	mov	r0, r3
 8002082:	f7fe ffe5 	bl	8001050 <LL_ADC_GetOffsetChannel>
 8002086:	4603      	mov	r3, r0
 8002088:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800208c:	2b00      	cmp	r3, #0
 800208e:	d10a      	bne.n	80020a6 <HAL_ADC_ConfigChannel+0x396>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2103      	movs	r1, #3
 8002096:	4618      	mov	r0, r3
 8002098:	f7fe ffda 	bl	8001050 <LL_ADC_GetOffsetChannel>
 800209c:	4603      	mov	r3, r0
 800209e:	0e9b      	lsrs	r3, r3, #26
 80020a0:	f003 021f 	and.w	r2, r3, #31
 80020a4:	e017      	b.n	80020d6 <HAL_ADC_ConfigChannel+0x3c6>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2103      	movs	r1, #3
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7fe ffcf 	bl	8001050 <LL_ADC_GetOffsetChannel>
 80020b2:	4603      	mov	r3, r0
 80020b4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020b8:	fa93 f3a3 	rbit	r3, r3
 80020bc:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80020be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020c0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80020c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d101      	bne.n	80020cc <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80020c8:	2320      	movs	r3, #32
 80020ca:	e003      	b.n	80020d4 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80020cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020ce:	fab3 f383 	clz	r3, r3
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d105      	bne.n	80020ee <HAL_ADC_ConfigChannel+0x3de>
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	0e9b      	lsrs	r3, r3, #26
 80020e8:	f003 031f 	and.w	r3, r3, #31
 80020ec:	e011      	b.n	8002112 <HAL_ADC_ConfigChannel+0x402>
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020f6:	fa93 f3a3 	rbit	r3, r3
 80020fa:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80020fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80020fe:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002100:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002102:	2b00      	cmp	r3, #0
 8002104:	d101      	bne.n	800210a <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002106:	2320      	movs	r3, #32
 8002108:	e003      	b.n	8002112 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800210a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800210c:	fab3 f383 	clz	r3, r3
 8002110:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002112:	429a      	cmp	r2, r3
 8002114:	d106      	bne.n	8002124 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	2200      	movs	r2, #0
 800211c:	2103      	movs	r1, #3
 800211e:	4618      	mov	r0, r3
 8002120:	f7fe ffac 	bl	800107c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4618      	mov	r0, r3
 800212a:	f7ff f8e1 	bl	80012f0 <LL_ADC_IsEnabled>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	f040 813f 	bne.w	80023b4 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6818      	ldr	r0, [r3, #0]
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	6819      	ldr	r1, [r3, #0]
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	461a      	mov	r2, r3
 8002144:	f7ff f832 	bl	80011ac <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	4a8e      	ldr	r2, [pc, #568]	; (8002388 <HAL_ADC_ConfigChannel+0x678>)
 800214e:	4293      	cmp	r3, r2
 8002150:	f040 8130 	bne.w	80023b4 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002160:	2b00      	cmp	r3, #0
 8002162:	d10b      	bne.n	800217c <HAL_ADC_ConfigChannel+0x46c>
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	0e9b      	lsrs	r3, r3, #26
 800216a:	3301      	adds	r3, #1
 800216c:	f003 031f 	and.w	r3, r3, #31
 8002170:	2b09      	cmp	r3, #9
 8002172:	bf94      	ite	ls
 8002174:	2301      	movls	r3, #1
 8002176:	2300      	movhi	r3, #0
 8002178:	b2db      	uxtb	r3, r3
 800217a:	e019      	b.n	80021b0 <HAL_ADC_ConfigChannel+0x4a0>
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002182:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002184:	fa93 f3a3 	rbit	r3, r3
 8002188:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800218a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800218c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800218e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002190:	2b00      	cmp	r3, #0
 8002192:	d101      	bne.n	8002198 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002194:	2320      	movs	r3, #32
 8002196:	e003      	b.n	80021a0 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002198:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800219a:	fab3 f383 	clz	r3, r3
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	3301      	adds	r3, #1
 80021a2:	f003 031f 	and.w	r3, r3, #31
 80021a6:	2b09      	cmp	r3, #9
 80021a8:	bf94      	ite	ls
 80021aa:	2301      	movls	r3, #1
 80021ac:	2300      	movhi	r3, #0
 80021ae:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d079      	beq.n	80022a8 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d107      	bne.n	80021d0 <HAL_ADC_ConfigChannel+0x4c0>
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	0e9b      	lsrs	r3, r3, #26
 80021c6:	3301      	adds	r3, #1
 80021c8:	069b      	lsls	r3, r3, #26
 80021ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021ce:	e015      	b.n	80021fc <HAL_ADC_ConfigChannel+0x4ec>
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021d8:	fa93 f3a3 	rbit	r3, r3
 80021dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80021de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021e0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80021e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d101      	bne.n	80021ec <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80021e8:	2320      	movs	r3, #32
 80021ea:	e003      	b.n	80021f4 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80021ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021ee:	fab3 f383 	clz	r3, r3
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	3301      	adds	r3, #1
 80021f6:	069b      	lsls	r3, r3, #26
 80021f8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002204:	2b00      	cmp	r3, #0
 8002206:	d109      	bne.n	800221c <HAL_ADC_ConfigChannel+0x50c>
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	0e9b      	lsrs	r3, r3, #26
 800220e:	3301      	adds	r3, #1
 8002210:	f003 031f 	and.w	r3, r3, #31
 8002214:	2101      	movs	r1, #1
 8002216:	fa01 f303 	lsl.w	r3, r1, r3
 800221a:	e017      	b.n	800224c <HAL_ADC_ConfigChannel+0x53c>
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002222:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002224:	fa93 f3a3 	rbit	r3, r3
 8002228:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800222a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800222c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800222e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002230:	2b00      	cmp	r3, #0
 8002232:	d101      	bne.n	8002238 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002234:	2320      	movs	r3, #32
 8002236:	e003      	b.n	8002240 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002238:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800223a:	fab3 f383 	clz	r3, r3
 800223e:	b2db      	uxtb	r3, r3
 8002240:	3301      	adds	r3, #1
 8002242:	f003 031f 	and.w	r3, r3, #31
 8002246:	2101      	movs	r1, #1
 8002248:	fa01 f303 	lsl.w	r3, r1, r3
 800224c:	ea42 0103 	orr.w	r1, r2, r3
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002258:	2b00      	cmp	r3, #0
 800225a:	d10a      	bne.n	8002272 <HAL_ADC_ConfigChannel+0x562>
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	0e9b      	lsrs	r3, r3, #26
 8002262:	3301      	adds	r3, #1
 8002264:	f003 021f 	and.w	r2, r3, #31
 8002268:	4613      	mov	r3, r2
 800226a:	005b      	lsls	r3, r3, #1
 800226c:	4413      	add	r3, r2
 800226e:	051b      	lsls	r3, r3, #20
 8002270:	e018      	b.n	80022a4 <HAL_ADC_ConfigChannel+0x594>
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800227a:	fa93 f3a3 	rbit	r3, r3
 800227e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002282:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002284:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002286:	2b00      	cmp	r3, #0
 8002288:	d101      	bne.n	800228e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800228a:	2320      	movs	r3, #32
 800228c:	e003      	b.n	8002296 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800228e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002290:	fab3 f383 	clz	r3, r3
 8002294:	b2db      	uxtb	r3, r3
 8002296:	3301      	adds	r3, #1
 8002298:	f003 021f 	and.w	r2, r3, #31
 800229c:	4613      	mov	r3, r2
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	4413      	add	r3, r2
 80022a2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022a4:	430b      	orrs	r3, r1
 80022a6:	e080      	b.n	80023aa <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d107      	bne.n	80022c4 <HAL_ADC_ConfigChannel+0x5b4>
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	0e9b      	lsrs	r3, r3, #26
 80022ba:	3301      	adds	r3, #1
 80022bc:	069b      	lsls	r3, r3, #26
 80022be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022c2:	e015      	b.n	80022f0 <HAL_ADC_ConfigChannel+0x5e0>
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022cc:	fa93 f3a3 	rbit	r3, r3
 80022d0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80022d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022d4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80022d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d101      	bne.n	80022e0 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80022dc:	2320      	movs	r3, #32
 80022de:	e003      	b.n	80022e8 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80022e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022e2:	fab3 f383 	clz	r3, r3
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	3301      	adds	r3, #1
 80022ea:	069b      	lsls	r3, r3, #26
 80022ec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d109      	bne.n	8002310 <HAL_ADC_ConfigChannel+0x600>
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	0e9b      	lsrs	r3, r3, #26
 8002302:	3301      	adds	r3, #1
 8002304:	f003 031f 	and.w	r3, r3, #31
 8002308:	2101      	movs	r1, #1
 800230a:	fa01 f303 	lsl.w	r3, r1, r3
 800230e:	e017      	b.n	8002340 <HAL_ADC_ConfigChannel+0x630>
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002316:	6a3b      	ldr	r3, [r7, #32]
 8002318:	fa93 f3a3 	rbit	r3, r3
 800231c:	61fb      	str	r3, [r7, #28]
  return result;
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002324:	2b00      	cmp	r3, #0
 8002326:	d101      	bne.n	800232c <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002328:	2320      	movs	r3, #32
 800232a:	e003      	b.n	8002334 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 800232c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232e:	fab3 f383 	clz	r3, r3
 8002332:	b2db      	uxtb	r3, r3
 8002334:	3301      	adds	r3, #1
 8002336:	f003 031f 	and.w	r3, r3, #31
 800233a:	2101      	movs	r1, #1
 800233c:	fa01 f303 	lsl.w	r3, r1, r3
 8002340:	ea42 0103 	orr.w	r1, r2, r3
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800234c:	2b00      	cmp	r3, #0
 800234e:	d10d      	bne.n	800236c <HAL_ADC_ConfigChannel+0x65c>
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	0e9b      	lsrs	r3, r3, #26
 8002356:	3301      	adds	r3, #1
 8002358:	f003 021f 	and.w	r2, r3, #31
 800235c:	4613      	mov	r3, r2
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	4413      	add	r3, r2
 8002362:	3b1e      	subs	r3, #30
 8002364:	051b      	lsls	r3, r3, #20
 8002366:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800236a:	e01d      	b.n	80023a8 <HAL_ADC_ConfigChannel+0x698>
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	fa93 f3a3 	rbit	r3, r3
 8002378:	613b      	str	r3, [r7, #16]
  return result;
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d103      	bne.n	800238c <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002384:	2320      	movs	r3, #32
 8002386:	e005      	b.n	8002394 <HAL_ADC_ConfigChannel+0x684>
 8002388:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	fab3 f383 	clz	r3, r3
 8002392:	b2db      	uxtb	r3, r3
 8002394:	3301      	adds	r3, #1
 8002396:	f003 021f 	and.w	r2, r3, #31
 800239a:	4613      	mov	r3, r2
 800239c:	005b      	lsls	r3, r3, #1
 800239e:	4413      	add	r3, r2
 80023a0:	3b1e      	subs	r3, #30
 80023a2:	051b      	lsls	r3, r3, #20
 80023a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023a8:	430b      	orrs	r3, r1
 80023aa:	683a      	ldr	r2, [r7, #0]
 80023ac:	6892      	ldr	r2, [r2, #8]
 80023ae:	4619      	mov	r1, r3
 80023b0:	f7fe fed1 	bl	8001156 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	4b43      	ldr	r3, [pc, #268]	; (80024c8 <HAL_ADC_ConfigChannel+0x7b8>)
 80023ba:	4013      	ands	r3, r2
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d079      	beq.n	80024b4 <HAL_ADC_ConfigChannel+0x7a4>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023c0:	4842      	ldr	r0, [pc, #264]	; (80024cc <HAL_ADC_ConfigChannel+0x7bc>)
 80023c2:	f7fe fe13 	bl	8000fec <LL_ADC_GetCommonPathInternalCh>
 80023c6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a40      	ldr	r2, [pc, #256]	; (80024d0 <HAL_ADC_ConfigChannel+0x7c0>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d12b      	bne.n	800242c <HAL_ADC_ConfigChannel+0x71c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80023d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d125      	bne.n	800242c <HAL_ADC_ConfigChannel+0x71c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a3b      	ldr	r2, [pc, #236]	; (80024d4 <HAL_ADC_ConfigChannel+0x7c4>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d004      	beq.n	80023f4 <HAL_ADC_ConfigChannel+0x6e4>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a3a      	ldr	r2, [pc, #232]	; (80024d8 <HAL_ADC_ConfigChannel+0x7c8>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d15c      	bne.n	80024ae <HAL_ADC_ConfigChannel+0x79e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80023f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80023fc:	4619      	mov	r1, r3
 80023fe:	4833      	ldr	r0, [pc, #204]	; (80024cc <HAL_ADC_ConfigChannel+0x7bc>)
 8002400:	f7fe fde1 	bl	8000fc6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002404:	4b35      	ldr	r3, [pc, #212]	; (80024dc <HAL_ADC_ConfigChannel+0x7cc>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	099b      	lsrs	r3, r3, #6
 800240a:	4a35      	ldr	r2, [pc, #212]	; (80024e0 <HAL_ADC_ConfigChannel+0x7d0>)
 800240c:	fba2 2303 	umull	r2, r3, r2, r3
 8002410:	099a      	lsrs	r2, r3, #6
 8002412:	4613      	mov	r3, r2
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	4413      	add	r3, r2
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800241c:	e002      	b.n	8002424 <HAL_ADC_ConfigChannel+0x714>
          {
            wait_loop_index--;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	3b01      	subs	r3, #1
 8002422:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1f9      	bne.n	800241e <HAL_ADC_ConfigChannel+0x70e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800242a:	e040      	b.n	80024ae <HAL_ADC_ConfigChannel+0x79e>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a2c      	ldr	r2, [pc, #176]	; (80024e4 <HAL_ADC_ConfigChannel+0x7d4>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d118      	bne.n	8002468 <HAL_ADC_ConfigChannel+0x758>
 8002436:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800243a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d112      	bne.n	8002468 <HAL_ADC_ConfigChannel+0x758>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a23      	ldr	r2, [pc, #140]	; (80024d4 <HAL_ADC_ConfigChannel+0x7c4>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d004      	beq.n	8002456 <HAL_ADC_ConfigChannel+0x746>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a21      	ldr	r2, [pc, #132]	; (80024d8 <HAL_ADC_ConfigChannel+0x7c8>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d12d      	bne.n	80024b2 <HAL_ADC_ConfigChannel+0x7a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002456:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800245a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800245e:	4619      	mov	r1, r3
 8002460:	481a      	ldr	r0, [pc, #104]	; (80024cc <HAL_ADC_ConfigChannel+0x7bc>)
 8002462:	f7fe fdb0 	bl	8000fc6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002466:	e024      	b.n	80024b2 <HAL_ADC_ConfigChannel+0x7a2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a1e      	ldr	r2, [pc, #120]	; (80024e8 <HAL_ADC_ConfigChannel+0x7d8>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d120      	bne.n	80024b4 <HAL_ADC_ConfigChannel+0x7a4>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002472:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002476:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d11a      	bne.n	80024b4 <HAL_ADC_ConfigChannel+0x7a4>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a14      	ldr	r2, [pc, #80]	; (80024d4 <HAL_ADC_ConfigChannel+0x7c4>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d115      	bne.n	80024b4 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002488:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800248c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002490:	4619      	mov	r1, r3
 8002492:	480e      	ldr	r0, [pc, #56]	; (80024cc <HAL_ADC_ConfigChannel+0x7bc>)
 8002494:	f7fe fd97 	bl	8000fc6 <LL_ADC_SetCommonPathInternalCh>
 8002498:	e00c      	b.n	80024b4 <HAL_ADC_ConfigChannel+0x7a4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800249e:	f043 0220 	orr.w	r2, r3, #32
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80024ac:	e002      	b.n	80024b4 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80024ae:	bf00      	nop
 80024b0:	e000      	b.n	80024b4 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80024b2:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80024bc:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	37d8      	adds	r7, #216	; 0xd8
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	80080000 	.word	0x80080000
 80024cc:	50040300 	.word	0x50040300
 80024d0:	c7520000 	.word	0xc7520000
 80024d4:	50040000 	.word	0x50040000
 80024d8:	50040200 	.word	0x50040200
 80024dc:	20000000 	.word	0x20000000
 80024e0:	053e2d63 	.word	0x053e2d63
 80024e4:	cb840000 	.word	0xcb840000
 80024e8:	80000001 	.word	0x80000001

080024ec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7fe fef9 	bl	80012f0 <LL_ADC_IsEnabled>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d146      	bne.n	8002592 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	689a      	ldr	r2, [r3, #8]
 800250a:	4b24      	ldr	r3, [pc, #144]	; (800259c <ADC_Enable+0xb0>)
 800250c:	4013      	ands	r3, r2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d00d      	beq.n	800252e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002516:	f043 0210 	orr.w	r2, r3, #16
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002522:	f043 0201 	orr.w	r2, r3, #1
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e032      	b.n	8002594 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4618      	mov	r0, r3
 8002534:	f7fe fec8 	bl	80012c8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002538:	f7fe fd04 	bl	8000f44 <HAL_GetTick>
 800253c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800253e:	e021      	b.n	8002584 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4618      	mov	r0, r3
 8002546:	f7fe fed3 	bl	80012f0 <LL_ADC_IsEnabled>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d104      	bne.n	800255a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4618      	mov	r0, r3
 8002556:	f7fe feb7 	bl	80012c8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800255a:	f7fe fcf3 	bl	8000f44 <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	2b02      	cmp	r3, #2
 8002566:	d90d      	bls.n	8002584 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800256c:	f043 0210 	orr.w	r2, r3, #16
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002578:	f043 0201 	orr.w	r2, r3, #1
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e007      	b.n	8002594 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0301 	and.w	r3, r3, #1
 800258e:	2b01      	cmp	r3, #1
 8002590:	d1d6      	bne.n	8002540 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002592:	2300      	movs	r3, #0
}
 8002594:	4618      	mov	r0, r3
 8002596:	3710      	adds	r7, #16
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	8000003f 	.word	0x8000003f

080025a0 <LL_ADC_IsEnabled>:
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	f003 0301 	and.w	r3, r3, #1
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d101      	bne.n	80025b8 <LL_ADC_IsEnabled+0x18>
 80025b4:	2301      	movs	r3, #1
 80025b6:	e000      	b.n	80025ba <LL_ADC_IsEnabled+0x1a>
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	370c      	adds	r7, #12
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr

080025c6 <LL_ADC_REG_IsConversionOngoing>:
{
 80025c6:	b480      	push	{r7}
 80025c8:	b083      	sub	sp, #12
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f003 0304 	and.w	r3, r3, #4
 80025d6:	2b04      	cmp	r3, #4
 80025d8:	d101      	bne.n	80025de <LL_ADC_REG_IsConversionOngoing+0x18>
 80025da:	2301      	movs	r3, #1
 80025dc:	e000      	b.n	80025e0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80025de:	2300      	movs	r3, #0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80025f4:	bf00      	nop
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002608:	bf00      	nop
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800261c:	bf00      	nop
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002630:	bf00      	nop
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002644:	bf00      	nop
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002650:	b590      	push	{r4, r7, lr}
 8002652:	b09f      	sub	sp, #124	; 0x7c
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800265a:	2300      	movs	r3, #0
 800265c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002666:	2b01      	cmp	r3, #1
 8002668:	d101      	bne.n	800266e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800266a:	2302      	movs	r3, #2
 800266c:	e08f      	b.n	800278e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2201      	movs	r2, #1
 8002672:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a47      	ldr	r2, [pc, #284]	; (8002798 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d102      	bne.n	8002686 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002680:	4b46      	ldr	r3, [pc, #280]	; (800279c <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002682:	60bb      	str	r3, [r7, #8]
 8002684:	e001      	b.n	800268a <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8002686:	2300      	movs	r3, #0
 8002688:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d10b      	bne.n	80026a8 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002694:	f043 0220 	orr.w	r2, r3, #32
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e072      	b.n	800278e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7ff ff8b 	bl	80025c6 <LL_ADC_REG_IsConversionOngoing>
 80026b0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7ff ff85 	bl	80025c6 <LL_ADC_REG_IsConversionOngoing>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d154      	bne.n	800276c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80026c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d151      	bne.n	800276c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80026c8:	4b35      	ldr	r3, [pc, #212]	; (80027a0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80026ca:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d02c      	beq.n	800272e <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80026d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	6859      	ldr	r1, [r3, #4]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80026e6:	035b      	lsls	r3, r3, #13
 80026e8:	430b      	orrs	r3, r1
 80026ea:	431a      	orrs	r2, r3
 80026ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026ee:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026f0:	4829      	ldr	r0, [pc, #164]	; (8002798 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80026f2:	f7ff ff55 	bl	80025a0 <LL_ADC_IsEnabled>
 80026f6:	4604      	mov	r4, r0
 80026f8:	4828      	ldr	r0, [pc, #160]	; (800279c <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80026fa:	f7ff ff51 	bl	80025a0 <LL_ADC_IsEnabled>
 80026fe:	4603      	mov	r3, r0
 8002700:	431c      	orrs	r4, r3
 8002702:	4828      	ldr	r0, [pc, #160]	; (80027a4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002704:	f7ff ff4c 	bl	80025a0 <LL_ADC_IsEnabled>
 8002708:	4603      	mov	r3, r0
 800270a:	4323      	orrs	r3, r4
 800270c:	2b00      	cmp	r3, #0
 800270e:	d137      	bne.n	8002780 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002710:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002718:	f023 030f 	bic.w	r3, r3, #15
 800271c:	683a      	ldr	r2, [r7, #0]
 800271e:	6811      	ldr	r1, [r2, #0]
 8002720:	683a      	ldr	r2, [r7, #0]
 8002722:	6892      	ldr	r2, [r2, #8]
 8002724:	430a      	orrs	r2, r1
 8002726:	431a      	orrs	r2, r3
 8002728:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800272a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800272c:	e028      	b.n	8002780 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800272e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002736:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002738:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800273a:	4817      	ldr	r0, [pc, #92]	; (8002798 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 800273c:	f7ff ff30 	bl	80025a0 <LL_ADC_IsEnabled>
 8002740:	4604      	mov	r4, r0
 8002742:	4816      	ldr	r0, [pc, #88]	; (800279c <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002744:	f7ff ff2c 	bl	80025a0 <LL_ADC_IsEnabled>
 8002748:	4603      	mov	r3, r0
 800274a:	431c      	orrs	r4, r3
 800274c:	4815      	ldr	r0, [pc, #84]	; (80027a4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800274e:	f7ff ff27 	bl	80025a0 <LL_ADC_IsEnabled>
 8002752:	4603      	mov	r3, r0
 8002754:	4323      	orrs	r3, r4
 8002756:	2b00      	cmp	r3, #0
 8002758:	d112      	bne.n	8002780 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800275a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002762:	f023 030f 	bic.w	r3, r3, #15
 8002766:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002768:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800276a:	e009      	b.n	8002780 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002770:	f043 0220 	orr.w	r2, r3, #32
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800277e:	e000      	b.n	8002782 <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002780:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800278a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800278e:	4618      	mov	r0, r3
 8002790:	377c      	adds	r7, #124	; 0x7c
 8002792:	46bd      	mov	sp, r7
 8002794:	bd90      	pop	{r4, r7, pc}
 8002796:	bf00      	nop
 8002798:	50040000 	.word	0x50040000
 800279c:	50040100 	.word	0x50040100
 80027a0:	50040300 	.word	0x50040300
 80027a4:	50040200 	.word	0x50040200

080027a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b085      	sub	sp, #20
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f003 0307 	and.w	r3, r3, #7
 80027b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027b8:	4b0c      	ldr	r3, [pc, #48]	; (80027ec <__NVIC_SetPriorityGrouping+0x44>)
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027be:	68ba      	ldr	r2, [r7, #8]
 80027c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027c4:	4013      	ands	r3, r2
 80027c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027da:	4a04      	ldr	r2, [pc, #16]	; (80027ec <__NVIC_SetPriorityGrouping+0x44>)
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	60d3      	str	r3, [r2, #12]
}
 80027e0:	bf00      	nop
 80027e2:	3714      	adds	r7, #20
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr
 80027ec:	e000ed00 	.word	0xe000ed00

080027f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027f4:	4b04      	ldr	r3, [pc, #16]	; (8002808 <__NVIC_GetPriorityGrouping+0x18>)
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	0a1b      	lsrs	r3, r3, #8
 80027fa:	f003 0307 	and.w	r3, r3, #7
}
 80027fe:	4618      	mov	r0, r3
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr
 8002808:	e000ed00 	.word	0xe000ed00

0800280c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	4603      	mov	r3, r0
 8002814:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800281a:	2b00      	cmp	r3, #0
 800281c:	db0b      	blt.n	8002836 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800281e:	79fb      	ldrb	r3, [r7, #7]
 8002820:	f003 021f 	and.w	r2, r3, #31
 8002824:	4907      	ldr	r1, [pc, #28]	; (8002844 <__NVIC_EnableIRQ+0x38>)
 8002826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800282a:	095b      	lsrs	r3, r3, #5
 800282c:	2001      	movs	r0, #1
 800282e:	fa00 f202 	lsl.w	r2, r0, r2
 8002832:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002836:	bf00      	nop
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	e000e100 	.word	0xe000e100

08002848 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	4603      	mov	r3, r0
 8002850:	6039      	str	r1, [r7, #0]
 8002852:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002858:	2b00      	cmp	r3, #0
 800285a:	db0a      	blt.n	8002872 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	b2da      	uxtb	r2, r3
 8002860:	490c      	ldr	r1, [pc, #48]	; (8002894 <__NVIC_SetPriority+0x4c>)
 8002862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002866:	0112      	lsls	r2, r2, #4
 8002868:	b2d2      	uxtb	r2, r2
 800286a:	440b      	add	r3, r1
 800286c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002870:	e00a      	b.n	8002888 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	b2da      	uxtb	r2, r3
 8002876:	4908      	ldr	r1, [pc, #32]	; (8002898 <__NVIC_SetPriority+0x50>)
 8002878:	79fb      	ldrb	r3, [r7, #7]
 800287a:	f003 030f 	and.w	r3, r3, #15
 800287e:	3b04      	subs	r3, #4
 8002880:	0112      	lsls	r2, r2, #4
 8002882:	b2d2      	uxtb	r2, r2
 8002884:	440b      	add	r3, r1
 8002886:	761a      	strb	r2, [r3, #24]
}
 8002888:	bf00      	nop
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr
 8002894:	e000e100 	.word	0xe000e100
 8002898:	e000ed00 	.word	0xe000ed00

0800289c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800289c:	b480      	push	{r7}
 800289e:	b089      	sub	sp, #36	; 0x24
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f003 0307 	and.w	r3, r3, #7
 80028ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	f1c3 0307 	rsb	r3, r3, #7
 80028b6:	2b04      	cmp	r3, #4
 80028b8:	bf28      	it	cs
 80028ba:	2304      	movcs	r3, #4
 80028bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	3304      	adds	r3, #4
 80028c2:	2b06      	cmp	r3, #6
 80028c4:	d902      	bls.n	80028cc <NVIC_EncodePriority+0x30>
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	3b03      	subs	r3, #3
 80028ca:	e000      	b.n	80028ce <NVIC_EncodePriority+0x32>
 80028cc:	2300      	movs	r3, #0
 80028ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028d0:	f04f 32ff 	mov.w	r2, #4294967295
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	fa02 f303 	lsl.w	r3, r2, r3
 80028da:	43da      	mvns	r2, r3
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	401a      	ands	r2, r3
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028e4:	f04f 31ff 	mov.w	r1, #4294967295
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	fa01 f303 	lsl.w	r3, r1, r3
 80028ee:	43d9      	mvns	r1, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028f4:	4313      	orrs	r3, r2
         );
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3724      	adds	r7, #36	; 0x24
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
	...

08002904 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	3b01      	subs	r3, #1
 8002910:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002914:	d301      	bcc.n	800291a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002916:	2301      	movs	r3, #1
 8002918:	e00f      	b.n	800293a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800291a:	4a0a      	ldr	r2, [pc, #40]	; (8002944 <SysTick_Config+0x40>)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	3b01      	subs	r3, #1
 8002920:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002922:	210f      	movs	r1, #15
 8002924:	f04f 30ff 	mov.w	r0, #4294967295
 8002928:	f7ff ff8e 	bl	8002848 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800292c:	4b05      	ldr	r3, [pc, #20]	; (8002944 <SysTick_Config+0x40>)
 800292e:	2200      	movs	r2, #0
 8002930:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002932:	4b04      	ldr	r3, [pc, #16]	; (8002944 <SysTick_Config+0x40>)
 8002934:	2207      	movs	r2, #7
 8002936:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3708      	adds	r7, #8
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	e000e010 	.word	0xe000e010

08002948 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f7ff ff29 	bl	80027a8 <__NVIC_SetPriorityGrouping>
}
 8002956:	bf00      	nop
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}

0800295e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800295e:	b580      	push	{r7, lr}
 8002960:	b086      	sub	sp, #24
 8002962:	af00      	add	r7, sp, #0
 8002964:	4603      	mov	r3, r0
 8002966:	60b9      	str	r1, [r7, #8]
 8002968:	607a      	str	r2, [r7, #4]
 800296a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800296c:	2300      	movs	r3, #0
 800296e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002970:	f7ff ff3e 	bl	80027f0 <__NVIC_GetPriorityGrouping>
 8002974:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	68b9      	ldr	r1, [r7, #8]
 800297a:	6978      	ldr	r0, [r7, #20]
 800297c:	f7ff ff8e 	bl	800289c <NVIC_EncodePriority>
 8002980:	4602      	mov	r2, r0
 8002982:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002986:	4611      	mov	r1, r2
 8002988:	4618      	mov	r0, r3
 800298a:	f7ff ff5d 	bl	8002848 <__NVIC_SetPriority>
}
 800298e:	bf00      	nop
 8002990:	3718      	adds	r7, #24
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}

08002996 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002996:	b580      	push	{r7, lr}
 8002998:	b082      	sub	sp, #8
 800299a:	af00      	add	r7, sp, #0
 800299c:	4603      	mov	r3, r0
 800299e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7ff ff31 	bl	800280c <__NVIC_EnableIRQ>
}
 80029aa:	bf00      	nop
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b082      	sub	sp, #8
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f7ff ffa2 	bl	8002904 <SysTick_Config>
 80029c0:	4603      	mov	r3, r0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3708      	adds	r7, #8
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}

080029ca <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80029ca:	b580      	push	{r7, lr}
 80029cc:	b082      	sub	sp, #8
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d101      	bne.n	80029dc <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e014      	b.n	8002a06 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	791b      	ldrb	r3, [r3, #4]
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d105      	bne.n	80029f2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f7fd feaf 	bl	8000750 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2202      	movs	r2, #2
 80029f6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2201      	movs	r2, #1
 8002a02:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3708      	adds	r7, #8
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}

08002a0e <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002a0e:	b480      	push	{r7}
 8002a10:	b083      	sub	sp, #12
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
 8002a16:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	795b      	ldrb	r3, [r3, #5]
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d101      	bne.n	8002a24 <HAL_DAC_Start+0x16>
 8002a20:	2302      	movs	r3, #2
 8002a22:	e03b      	b.n	8002a9c <HAL_DAC_Start+0x8e>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2202      	movs	r2, #2
 8002a2e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	6819      	ldr	r1, [r3, #0]
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	f003 0310 	and.w	r3, r3, #16
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	409a      	lsls	r2, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	430a      	orrs	r2, r1
 8002a46:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d10f      	bne.n	8002a6e <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8002a58:	2b04      	cmp	r3, #4
 8002a5a:	d118      	bne.n	8002a8e <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	685a      	ldr	r2, [r3, #4]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f042 0201 	orr.w	r2, r2, #1
 8002a6a:	605a      	str	r2, [r3, #4]
 8002a6c:	e00f      	b.n	8002a8e <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002a78:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a7c:	d107      	bne.n	8002a8e <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	685a      	ldr	r2, [r3, #4]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f042 0202 	orr.w	r2, r2, #2
 8002a8c:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2201      	movs	r2, #1
 8002a92:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002a9a:	2300      	movs	r3, #0
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b087      	sub	sp, #28
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	607a      	str	r2, [r7, #4]
 8002ab4:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d105      	bne.n	8002ad2 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002ac6:	697a      	ldr	r2, [r7, #20]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4413      	add	r3, r2
 8002acc:	3308      	adds	r3, #8
 8002ace:	617b      	str	r3, [r7, #20]
 8002ad0:	e004      	b.n	8002adc <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002ad2:	697a      	ldr	r2, [r7, #20]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	3314      	adds	r3, #20
 8002ada:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	461a      	mov	r2, r3
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	371c      	adds	r7, #28
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr

08002af2 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002af2:	b580      	push	{r7, lr}
 8002af4:	b088      	sub	sp, #32
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	60f8      	str	r0, [r7, #12]
 8002afa:	60b9      	str	r1, [r7, #8]
 8002afc:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002afe:	2300      	movs	r3, #0
 8002b00:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	795b      	ldrb	r3, [r3, #5]
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d101      	bne.n	8002b0e <HAL_DAC_ConfigChannel+0x1c>
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	e107      	b.n	8002d1e <HAL_DAC_ConfigChannel+0x22c>
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2201      	movs	r2, #1
 8002b12:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2202      	movs	r2, #2
 8002b18:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2b04      	cmp	r3, #4
 8002b20:	d174      	bne.n	8002c0c <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002b22:	f7fe fa0f 	bl	8000f44 <HAL_GetTick>
 8002b26:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d134      	bne.n	8002b98 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002b2e:	e011      	b.n	8002b54 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002b30:	f7fe fa08 	bl	8000f44 <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d90a      	bls.n	8002b54 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	f043 0208 	orr.w	r2, r3, #8
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2203      	movs	r2, #3
 8002b4e:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	e0e4      	b.n	8002d1e <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d1e6      	bne.n	8002b30 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8002b62:	2001      	movs	r0, #1
 8002b64:	f7fe f9fa 	bl	8000f5c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	68ba      	ldr	r2, [r7, #8]
 8002b6e:	6992      	ldr	r2, [r2, #24]
 8002b70:	641a      	str	r2, [r3, #64]	; 0x40
 8002b72:	e01e      	b.n	8002bb2 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002b74:	f7fe f9e6 	bl	8000f44 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d90a      	bls.n	8002b98 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	f043 0208 	orr.w	r2, r3, #8
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2203      	movs	r2, #3
 8002b92:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002b94:	2303      	movs	r3, #3
 8002b96:	e0c2      	b.n	8002d1e <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	dbe8      	blt.n	8002b74 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8002ba2:	2001      	movs	r0, #1
 8002ba4:	f7fe f9da 	bl	8000f5c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	68ba      	ldr	r2, [r7, #8]
 8002bae:	6992      	ldr	r2, [r2, #24]
 8002bb0:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f003 0310 	and.w	r3, r3, #16
 8002bbe:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8002bc6:	43db      	mvns	r3, r3
 8002bc8:	ea02 0103 	and.w	r1, r2, r3
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	69da      	ldr	r2, [r3, #28]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f003 0310 	and.w	r3, r3, #16
 8002bd6:	409a      	lsls	r2, r3
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	430a      	orrs	r2, r1
 8002bde:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f003 0310 	and.w	r3, r3, #16
 8002bec:	21ff      	movs	r1, #255	; 0xff
 8002bee:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf2:	43db      	mvns	r3, r3
 8002bf4:	ea02 0103 	and.w	r1, r2, r3
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	6a1a      	ldr	r2, [r3, #32]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f003 0310 	and.w	r3, r3, #16
 8002c02:	409a      	lsls	r2, r3
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	430a      	orrs	r2, r1
 8002c0a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	691b      	ldr	r3, [r3, #16]
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d11d      	bne.n	8002c50 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c1a:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f003 0310 	and.w	r3, r3, #16
 8002c22:	221f      	movs	r2, #31
 8002c24:	fa02 f303 	lsl.w	r3, r2, r3
 8002c28:	43db      	mvns	r3, r3
 8002c2a:	69ba      	ldr	r2, [r7, #24]
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	695b      	ldr	r3, [r3, #20]
 8002c34:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f003 0310 	and.w	r3, r3, #16
 8002c3c:	697a      	ldr	r2, [r7, #20]
 8002c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c42:	69ba      	ldr	r2, [r7, #24]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	69ba      	ldr	r2, [r7, #24]
 8002c4e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c56:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f003 0310 	and.w	r3, r3, #16
 8002c5e:	2207      	movs	r2, #7
 8002c60:	fa02 f303 	lsl.w	r3, r2, r3
 8002c64:	43db      	mvns	r3, r3
 8002c66:	69ba      	ldr	r2, [r7, #24]
 8002c68:	4013      	ands	r3, r2
 8002c6a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	431a      	orrs	r2, r3
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f003 0310 	and.w	r3, r3, #16
 8002c84:	697a      	ldr	r2, [r7, #20]
 8002c86:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8a:	69ba      	ldr	r2, [r7, #24]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	6819      	ldr	r1, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f003 0310 	and.w	r3, r3, #16
 8002ca4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cac:	43da      	mvns	r2, r3
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	400a      	ands	r2, r1
 8002cb4:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f003 0310 	and.w	r3, r3, #16
 8002cc4:	f640 72fc 	movw	r2, #4092	; 0xffc
 8002cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ccc:	43db      	mvns	r3, r3
 8002cce:	69ba      	ldr	r2, [r7, #24]
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f003 0310 	and.w	r3, r3, #16
 8002ce0:	697a      	ldr	r2, [r7, #20]
 8002ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	6819      	ldr	r1, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f003 0310 	and.w	r3, r3, #16
 8002d00:	22c0      	movs	r2, #192	; 0xc0
 8002d02:	fa02 f303 	lsl.w	r3, r2, r3
 8002d06:	43da      	mvns	r2, r3
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	400a      	ands	r2, r1
 8002d0e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2201      	movs	r2, #1
 8002d14:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3720      	adds	r7, #32
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
	...

08002d28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b087      	sub	sp, #28
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d32:	2300      	movs	r3, #0
 8002d34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d36:	e17f      	b.n	8003038 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	2101      	movs	r1, #1
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	fa01 f303 	lsl.w	r3, r1, r3
 8002d44:	4013      	ands	r3, r2
 8002d46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	f000 8171 	beq.w	8003032 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d00b      	beq.n	8002d70 <HAL_GPIO_Init+0x48>
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d007      	beq.n	8002d70 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d64:	2b11      	cmp	r3, #17
 8002d66:	d003      	beq.n	8002d70 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	2b12      	cmp	r3, #18
 8002d6e:	d130      	bne.n	8002dd2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	005b      	lsls	r3, r3, #1
 8002d7a:	2203      	movs	r2, #3
 8002d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d80:	43db      	mvns	r3, r3
 8002d82:	693a      	ldr	r2, [r7, #16]
 8002d84:	4013      	ands	r3, r2
 8002d86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	68da      	ldr	r2, [r3, #12]
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	005b      	lsls	r3, r3, #1
 8002d90:	fa02 f303 	lsl.w	r3, r2, r3
 8002d94:	693a      	ldr	r2, [r7, #16]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	693a      	ldr	r2, [r7, #16]
 8002d9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002da6:	2201      	movs	r2, #1
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dae:	43db      	mvns	r3, r3
 8002db0:	693a      	ldr	r2, [r7, #16]
 8002db2:	4013      	ands	r3, r2
 8002db4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	091b      	lsrs	r3, r3, #4
 8002dbc:	f003 0201 	and.w	r2, r3, #1
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc6:	693a      	ldr	r2, [r7, #16]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	693a      	ldr	r2, [r7, #16]
 8002dd0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	f003 0303 	and.w	r3, r3, #3
 8002dda:	2b03      	cmp	r3, #3
 8002ddc:	d118      	bne.n	8002e10 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002de4:	2201      	movs	r2, #1
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dec:	43db      	mvns	r3, r3
 8002dee:	693a      	ldr	r2, [r7, #16]
 8002df0:	4013      	ands	r3, r2
 8002df2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	08db      	lsrs	r3, r3, #3
 8002dfa:	f003 0201 	and.w	r2, r3, #1
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	fa02 f303 	lsl.w	r3, r2, r3
 8002e04:	693a      	ldr	r2, [r7, #16]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	693a      	ldr	r2, [r7, #16]
 8002e0e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	005b      	lsls	r3, r3, #1
 8002e1a:	2203      	movs	r2, #3
 8002e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e20:	43db      	mvns	r3, r3
 8002e22:	693a      	ldr	r2, [r7, #16]
 8002e24:	4013      	ands	r3, r2
 8002e26:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	689a      	ldr	r2, [r3, #8]
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	005b      	lsls	r3, r3, #1
 8002e30:	fa02 f303 	lsl.w	r3, r2, r3
 8002e34:	693a      	ldr	r2, [r7, #16]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	693a      	ldr	r2, [r7, #16]
 8002e3e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d003      	beq.n	8002e50 <HAL_GPIO_Init+0x128>
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	2b12      	cmp	r3, #18
 8002e4e:	d123      	bne.n	8002e98 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	08da      	lsrs	r2, r3, #3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	3208      	adds	r2, #8
 8002e58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	f003 0307 	and.w	r3, r3, #7
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	220f      	movs	r2, #15
 8002e68:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6c:	43db      	mvns	r3, r3
 8002e6e:	693a      	ldr	r2, [r7, #16]
 8002e70:	4013      	ands	r3, r2
 8002e72:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	691a      	ldr	r2, [r3, #16]
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	f003 0307 	and.w	r3, r3, #7
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	fa02 f303 	lsl.w	r3, r2, r3
 8002e84:	693a      	ldr	r2, [r7, #16]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	08da      	lsrs	r2, r3, #3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	3208      	adds	r2, #8
 8002e92:	6939      	ldr	r1, [r7, #16]
 8002e94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	005b      	lsls	r3, r3, #1
 8002ea2:	2203      	movs	r2, #3
 8002ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea8:	43db      	mvns	r3, r3
 8002eaa:	693a      	ldr	r2, [r7, #16]
 8002eac:	4013      	ands	r3, r2
 8002eae:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f003 0203 	and.w	r2, r3, #3
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	005b      	lsls	r3, r3, #1
 8002ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec0:	693a      	ldr	r2, [r7, #16]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	693a      	ldr	r2, [r7, #16]
 8002eca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	f000 80ac 	beq.w	8003032 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eda:	4b5e      	ldr	r3, [pc, #376]	; (8003054 <HAL_GPIO_Init+0x32c>)
 8002edc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ede:	4a5d      	ldr	r2, [pc, #372]	; (8003054 <HAL_GPIO_Init+0x32c>)
 8002ee0:	f043 0301 	orr.w	r3, r3, #1
 8002ee4:	6613      	str	r3, [r2, #96]	; 0x60
 8002ee6:	4b5b      	ldr	r3, [pc, #364]	; (8003054 <HAL_GPIO_Init+0x32c>)
 8002ee8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eea:	f003 0301 	and.w	r3, r3, #1
 8002eee:	60bb      	str	r3, [r7, #8]
 8002ef0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002ef2:	4a59      	ldr	r2, [pc, #356]	; (8003058 <HAL_GPIO_Init+0x330>)
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	089b      	lsrs	r3, r3, #2
 8002ef8:	3302      	adds	r3, #2
 8002efa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002efe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	f003 0303 	and.w	r3, r3, #3
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	220f      	movs	r2, #15
 8002f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0e:	43db      	mvns	r3, r3
 8002f10:	693a      	ldr	r2, [r7, #16]
 8002f12:	4013      	ands	r3, r2
 8002f14:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002f1c:	d025      	beq.n	8002f6a <HAL_GPIO_Init+0x242>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a4e      	ldr	r2, [pc, #312]	; (800305c <HAL_GPIO_Init+0x334>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d01f      	beq.n	8002f66 <HAL_GPIO_Init+0x23e>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a4d      	ldr	r2, [pc, #308]	; (8003060 <HAL_GPIO_Init+0x338>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d019      	beq.n	8002f62 <HAL_GPIO_Init+0x23a>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a4c      	ldr	r2, [pc, #304]	; (8003064 <HAL_GPIO_Init+0x33c>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d013      	beq.n	8002f5e <HAL_GPIO_Init+0x236>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a4b      	ldr	r2, [pc, #300]	; (8003068 <HAL_GPIO_Init+0x340>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d00d      	beq.n	8002f5a <HAL_GPIO_Init+0x232>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a4a      	ldr	r2, [pc, #296]	; (800306c <HAL_GPIO_Init+0x344>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d007      	beq.n	8002f56 <HAL_GPIO_Init+0x22e>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a49      	ldr	r2, [pc, #292]	; (8003070 <HAL_GPIO_Init+0x348>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d101      	bne.n	8002f52 <HAL_GPIO_Init+0x22a>
 8002f4e:	2306      	movs	r3, #6
 8002f50:	e00c      	b.n	8002f6c <HAL_GPIO_Init+0x244>
 8002f52:	2307      	movs	r3, #7
 8002f54:	e00a      	b.n	8002f6c <HAL_GPIO_Init+0x244>
 8002f56:	2305      	movs	r3, #5
 8002f58:	e008      	b.n	8002f6c <HAL_GPIO_Init+0x244>
 8002f5a:	2304      	movs	r3, #4
 8002f5c:	e006      	b.n	8002f6c <HAL_GPIO_Init+0x244>
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e004      	b.n	8002f6c <HAL_GPIO_Init+0x244>
 8002f62:	2302      	movs	r3, #2
 8002f64:	e002      	b.n	8002f6c <HAL_GPIO_Init+0x244>
 8002f66:	2301      	movs	r3, #1
 8002f68:	e000      	b.n	8002f6c <HAL_GPIO_Init+0x244>
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	697a      	ldr	r2, [r7, #20]
 8002f6e:	f002 0203 	and.w	r2, r2, #3
 8002f72:	0092      	lsls	r2, r2, #2
 8002f74:	4093      	lsls	r3, r2
 8002f76:	693a      	ldr	r2, [r7, #16]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002f7c:	4936      	ldr	r1, [pc, #216]	; (8003058 <HAL_GPIO_Init+0x330>)
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	089b      	lsrs	r3, r3, #2
 8002f82:	3302      	adds	r3, #2
 8002f84:	693a      	ldr	r2, [r7, #16]
 8002f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002f8a:	4b3a      	ldr	r3, [pc, #232]	; (8003074 <HAL_GPIO_Init+0x34c>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	43db      	mvns	r3, r3
 8002f94:	693a      	ldr	r2, [r7, #16]
 8002f96:	4013      	ands	r3, r2
 8002f98:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d003      	beq.n	8002fae <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002fa6:	693a      	ldr	r2, [r7, #16]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002fae:	4a31      	ldr	r2, [pc, #196]	; (8003074 <HAL_GPIO_Init+0x34c>)
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002fb4:	4b2f      	ldr	r3, [pc, #188]	; (8003074 <HAL_GPIO_Init+0x34c>)
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	43db      	mvns	r3, r3
 8002fbe:	693a      	ldr	r2, [r7, #16]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d003      	beq.n	8002fd8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002fd0:	693a      	ldr	r2, [r7, #16]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002fd8:	4a26      	ldr	r2, [pc, #152]	; (8003074 <HAL_GPIO_Init+0x34c>)
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002fde:	4b25      	ldr	r3, [pc, #148]	; (8003074 <HAL_GPIO_Init+0x34c>)
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	43db      	mvns	r3, r3
 8002fe8:	693a      	ldr	r2, [r7, #16]
 8002fea:	4013      	ands	r3, r2
 8002fec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d003      	beq.n	8003002 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002ffa:	693a      	ldr	r2, [r7, #16]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003002:	4a1c      	ldr	r2, [pc, #112]	; (8003074 <HAL_GPIO_Init+0x34c>)
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003008:	4b1a      	ldr	r3, [pc, #104]	; (8003074 <HAL_GPIO_Init+0x34c>)
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	43db      	mvns	r3, r3
 8003012:	693a      	ldr	r2, [r7, #16]
 8003014:	4013      	ands	r3, r2
 8003016:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d003      	beq.n	800302c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003024:	693a      	ldr	r2, [r7, #16]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	4313      	orrs	r3, r2
 800302a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800302c:	4a11      	ldr	r2, [pc, #68]	; (8003074 <HAL_GPIO_Init+0x34c>)
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	3301      	adds	r3, #1
 8003036:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	fa22 f303 	lsr.w	r3, r2, r3
 8003042:	2b00      	cmp	r3, #0
 8003044:	f47f ae78 	bne.w	8002d38 <HAL_GPIO_Init+0x10>
  }
}
 8003048:	bf00      	nop
 800304a:	371c      	adds	r7, #28
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr
 8003054:	40021000 	.word	0x40021000
 8003058:	40010000 	.word	0x40010000
 800305c:	48000400 	.word	0x48000400
 8003060:	48000800 	.word	0x48000800
 8003064:	48000c00 	.word	0x48000c00
 8003068:	48001000 	.word	0x48001000
 800306c:	48001400 	.word	0x48001400
 8003070:	48001800 	.word	0x48001800
 8003074:	40010400 	.word	0x40010400

08003078 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	460b      	mov	r3, r1
 8003082:	807b      	strh	r3, [r7, #2]
 8003084:	4613      	mov	r3, r2
 8003086:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003088:	787b      	ldrb	r3, [r7, #1]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d003      	beq.n	8003096 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800308e:	887a      	ldrh	r2, [r7, #2]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003094:	e002      	b.n	800309c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003096:	887a      	ldrh	r2, [r7, #2]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800309c:	bf00      	nop
 800309e:	370c      	adds	r7, #12
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr

080030a8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80030a8:	b480      	push	{r7}
 80030aa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80030ac:	4b04      	ldr	r3, [pc, #16]	; (80030c0 <HAL_PWREx_GetVoltageRange+0x18>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	40007000 	.word	0x40007000

080030c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b085      	sub	sp, #20
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030d2:	d130      	bne.n	8003136 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80030d4:	4b23      	ldr	r3, [pc, #140]	; (8003164 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80030dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030e0:	d038      	beq.n	8003154 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80030e2:	4b20      	ldr	r3, [pc, #128]	; (8003164 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80030ea:	4a1e      	ldr	r2, [pc, #120]	; (8003164 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030f0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80030f2:	4b1d      	ldr	r3, [pc, #116]	; (8003168 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2232      	movs	r2, #50	; 0x32
 80030f8:	fb02 f303 	mul.w	r3, r2, r3
 80030fc:	4a1b      	ldr	r2, [pc, #108]	; (800316c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80030fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003102:	0c9b      	lsrs	r3, r3, #18
 8003104:	3301      	adds	r3, #1
 8003106:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003108:	e002      	b.n	8003110 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	3b01      	subs	r3, #1
 800310e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003110:	4b14      	ldr	r3, [pc, #80]	; (8003164 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003112:	695b      	ldr	r3, [r3, #20]
 8003114:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003118:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800311c:	d102      	bne.n	8003124 <HAL_PWREx_ControlVoltageScaling+0x60>
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d1f2      	bne.n	800310a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003124:	4b0f      	ldr	r3, [pc, #60]	; (8003164 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003126:	695b      	ldr	r3, [r3, #20]
 8003128:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800312c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003130:	d110      	bne.n	8003154 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e00f      	b.n	8003156 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003136:	4b0b      	ldr	r3, [pc, #44]	; (8003164 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800313e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003142:	d007      	beq.n	8003154 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003144:	4b07      	ldr	r3, [pc, #28]	; (8003164 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800314c:	4a05      	ldr	r2, [pc, #20]	; (8003164 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800314e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003152:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	3714      	adds	r7, #20
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	40007000 	.word	0x40007000
 8003168:	20000000 	.word	0x20000000
 800316c:	431bde83 	.word	0x431bde83

08003170 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b088      	sub	sp, #32
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d101      	bne.n	8003182 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e3d4      	b.n	800392c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003182:	4ba1      	ldr	r3, [pc, #644]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f003 030c 	and.w	r3, r3, #12
 800318a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800318c:	4b9e      	ldr	r3, [pc, #632]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	f003 0303 	and.w	r3, r3, #3
 8003194:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0310 	and.w	r3, r3, #16
 800319e:	2b00      	cmp	r3, #0
 80031a0:	f000 80e4 	beq.w	800336c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d007      	beq.n	80031ba <HAL_RCC_OscConfig+0x4a>
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	2b0c      	cmp	r3, #12
 80031ae:	f040 808b 	bne.w	80032c8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	f040 8087 	bne.w	80032c8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80031ba:	4b93      	ldr	r3, [pc, #588]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0302 	and.w	r3, r3, #2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d005      	beq.n	80031d2 <HAL_RCC_OscConfig+0x62>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d101      	bne.n	80031d2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e3ac      	b.n	800392c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a1a      	ldr	r2, [r3, #32]
 80031d6:	4b8c      	ldr	r3, [pc, #560]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0308 	and.w	r3, r3, #8
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d004      	beq.n	80031ec <HAL_RCC_OscConfig+0x7c>
 80031e2:	4b89      	ldr	r3, [pc, #548]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031ea:	e005      	b.n	80031f8 <HAL_RCC_OscConfig+0x88>
 80031ec:	4b86      	ldr	r3, [pc, #536]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 80031ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031f2:	091b      	lsrs	r3, r3, #4
 80031f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d223      	bcs.n	8003244 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a1b      	ldr	r3, [r3, #32]
 8003200:	4618      	mov	r0, r3
 8003202:	f000 fd3f 	bl	8003c84 <RCC_SetFlashLatencyFromMSIRange>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d001      	beq.n	8003210 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e38d      	b.n	800392c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003210:	4b7d      	ldr	r3, [pc, #500]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a7c      	ldr	r2, [pc, #496]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 8003216:	f043 0308 	orr.w	r3, r3, #8
 800321a:	6013      	str	r3, [r2, #0]
 800321c:	4b7a      	ldr	r3, [pc, #488]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6a1b      	ldr	r3, [r3, #32]
 8003228:	4977      	ldr	r1, [pc, #476]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 800322a:	4313      	orrs	r3, r2
 800322c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800322e:	4b76      	ldr	r3, [pc, #472]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	69db      	ldr	r3, [r3, #28]
 800323a:	021b      	lsls	r3, r3, #8
 800323c:	4972      	ldr	r1, [pc, #456]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 800323e:	4313      	orrs	r3, r2
 8003240:	604b      	str	r3, [r1, #4]
 8003242:	e025      	b.n	8003290 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003244:	4b70      	ldr	r3, [pc, #448]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a6f      	ldr	r2, [pc, #444]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 800324a:	f043 0308 	orr.w	r3, r3, #8
 800324e:	6013      	str	r3, [r2, #0]
 8003250:	4b6d      	ldr	r3, [pc, #436]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a1b      	ldr	r3, [r3, #32]
 800325c:	496a      	ldr	r1, [pc, #424]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 800325e:	4313      	orrs	r3, r2
 8003260:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003262:	4b69      	ldr	r3, [pc, #420]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	69db      	ldr	r3, [r3, #28]
 800326e:	021b      	lsls	r3, r3, #8
 8003270:	4965      	ldr	r1, [pc, #404]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 8003272:	4313      	orrs	r3, r2
 8003274:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003276:	69bb      	ldr	r3, [r7, #24]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d109      	bne.n	8003290 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6a1b      	ldr	r3, [r3, #32]
 8003280:	4618      	mov	r0, r3
 8003282:	f000 fcff 	bl	8003c84 <RCC_SetFlashLatencyFromMSIRange>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d001      	beq.n	8003290 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e34d      	b.n	800392c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003290:	f000 fc36 	bl	8003b00 <HAL_RCC_GetSysClockFreq>
 8003294:	4601      	mov	r1, r0
 8003296:	4b5c      	ldr	r3, [pc, #368]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	091b      	lsrs	r3, r3, #4
 800329c:	f003 030f 	and.w	r3, r3, #15
 80032a0:	4a5a      	ldr	r2, [pc, #360]	; (800340c <HAL_RCC_OscConfig+0x29c>)
 80032a2:	5cd3      	ldrb	r3, [r2, r3]
 80032a4:	f003 031f 	and.w	r3, r3, #31
 80032a8:	fa21 f303 	lsr.w	r3, r1, r3
 80032ac:	4a58      	ldr	r2, [pc, #352]	; (8003410 <HAL_RCC_OscConfig+0x2a0>)
 80032ae:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80032b0:	4b58      	ldr	r3, [pc, #352]	; (8003414 <HAL_RCC_OscConfig+0x2a4>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7fd fdf5 	bl	8000ea4 <HAL_InitTick>
 80032ba:	4603      	mov	r3, r0
 80032bc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80032be:	7bfb      	ldrb	r3, [r7, #15]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d052      	beq.n	800336a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80032c4:	7bfb      	ldrb	r3, [r7, #15]
 80032c6:	e331      	b.n	800392c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	699b      	ldr	r3, [r3, #24]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d032      	beq.n	8003336 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80032d0:	4b4d      	ldr	r3, [pc, #308]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a4c      	ldr	r2, [pc, #304]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 80032d6:	f043 0301 	orr.w	r3, r3, #1
 80032da:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80032dc:	f7fd fe32 	bl	8000f44 <HAL_GetTick>
 80032e0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032e2:	e008      	b.n	80032f6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80032e4:	f7fd fe2e 	bl	8000f44 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d901      	bls.n	80032f6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e31a      	b.n	800392c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032f6:	4b44      	ldr	r3, [pc, #272]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0302 	and.w	r3, r3, #2
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d0f0      	beq.n	80032e4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003302:	4b41      	ldr	r3, [pc, #260]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a40      	ldr	r2, [pc, #256]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 8003308:	f043 0308 	orr.w	r3, r3, #8
 800330c:	6013      	str	r3, [r2, #0]
 800330e:	4b3e      	ldr	r3, [pc, #248]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a1b      	ldr	r3, [r3, #32]
 800331a:	493b      	ldr	r1, [pc, #236]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 800331c:	4313      	orrs	r3, r2
 800331e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003320:	4b39      	ldr	r3, [pc, #228]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	69db      	ldr	r3, [r3, #28]
 800332c:	021b      	lsls	r3, r3, #8
 800332e:	4936      	ldr	r1, [pc, #216]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 8003330:	4313      	orrs	r3, r2
 8003332:	604b      	str	r3, [r1, #4]
 8003334:	e01a      	b.n	800336c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003336:	4b34      	ldr	r3, [pc, #208]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a33      	ldr	r2, [pc, #204]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 800333c:	f023 0301 	bic.w	r3, r3, #1
 8003340:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003342:	f7fd fdff 	bl	8000f44 <HAL_GetTick>
 8003346:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003348:	e008      	b.n	800335c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800334a:	f7fd fdfb 	bl	8000f44 <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	2b02      	cmp	r3, #2
 8003356:	d901      	bls.n	800335c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e2e7      	b.n	800392c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800335c:	4b2a      	ldr	r3, [pc, #168]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0302 	and.w	r3, r3, #2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d1f0      	bne.n	800334a <HAL_RCC_OscConfig+0x1da>
 8003368:	e000      	b.n	800336c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800336a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0301 	and.w	r3, r3, #1
 8003374:	2b00      	cmp	r3, #0
 8003376:	d074      	beq.n	8003462 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	2b08      	cmp	r3, #8
 800337c:	d005      	beq.n	800338a <HAL_RCC_OscConfig+0x21a>
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	2b0c      	cmp	r3, #12
 8003382:	d10e      	bne.n	80033a2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	2b03      	cmp	r3, #3
 8003388:	d10b      	bne.n	80033a2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800338a:	4b1f      	ldr	r3, [pc, #124]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d064      	beq.n	8003460 <HAL_RCC_OscConfig+0x2f0>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d160      	bne.n	8003460 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e2c4      	b.n	800392c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033aa:	d106      	bne.n	80033ba <HAL_RCC_OscConfig+0x24a>
 80033ac:	4b16      	ldr	r3, [pc, #88]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a15      	ldr	r2, [pc, #84]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 80033b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033b6:	6013      	str	r3, [r2, #0]
 80033b8:	e01d      	b.n	80033f6 <HAL_RCC_OscConfig+0x286>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033c2:	d10c      	bne.n	80033de <HAL_RCC_OscConfig+0x26e>
 80033c4:	4b10      	ldr	r3, [pc, #64]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a0f      	ldr	r2, [pc, #60]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 80033ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033ce:	6013      	str	r3, [r2, #0]
 80033d0:	4b0d      	ldr	r3, [pc, #52]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a0c      	ldr	r2, [pc, #48]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 80033d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033da:	6013      	str	r3, [r2, #0]
 80033dc:	e00b      	b.n	80033f6 <HAL_RCC_OscConfig+0x286>
 80033de:	4b0a      	ldr	r3, [pc, #40]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a09      	ldr	r2, [pc, #36]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 80033e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033e8:	6013      	str	r3, [r2, #0]
 80033ea:	4b07      	ldr	r3, [pc, #28]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a06      	ldr	r2, [pc, #24]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 80033f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033f4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d01c      	beq.n	8003438 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033fe:	f7fd fda1 	bl	8000f44 <HAL_GetTick>
 8003402:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003404:	e011      	b.n	800342a <HAL_RCC_OscConfig+0x2ba>
 8003406:	bf00      	nop
 8003408:	40021000 	.word	0x40021000
 800340c:	08005eb8 	.word	0x08005eb8
 8003410:	20000000 	.word	0x20000000
 8003414:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003418:	f7fd fd94 	bl	8000f44 <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	2b64      	cmp	r3, #100	; 0x64
 8003424:	d901      	bls.n	800342a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e280      	b.n	800392c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800342a:	4baf      	ldr	r3, [pc, #700]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d0f0      	beq.n	8003418 <HAL_RCC_OscConfig+0x2a8>
 8003436:	e014      	b.n	8003462 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003438:	f7fd fd84 	bl	8000f44 <HAL_GetTick>
 800343c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800343e:	e008      	b.n	8003452 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003440:	f7fd fd80 	bl	8000f44 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b64      	cmp	r3, #100	; 0x64
 800344c:	d901      	bls.n	8003452 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e26c      	b.n	800392c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003452:	4ba5      	ldr	r3, [pc, #660]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d1f0      	bne.n	8003440 <HAL_RCC_OscConfig+0x2d0>
 800345e:	e000      	b.n	8003462 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003460:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	2b00      	cmp	r3, #0
 800346c:	d060      	beq.n	8003530 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	2b04      	cmp	r3, #4
 8003472:	d005      	beq.n	8003480 <HAL_RCC_OscConfig+0x310>
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	2b0c      	cmp	r3, #12
 8003478:	d119      	bne.n	80034ae <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	2b02      	cmp	r3, #2
 800347e:	d116      	bne.n	80034ae <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003480:	4b99      	ldr	r3, [pc, #612]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003488:	2b00      	cmp	r3, #0
 800348a:	d005      	beq.n	8003498 <HAL_RCC_OscConfig+0x328>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d101      	bne.n	8003498 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e249      	b.n	800392c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003498:	4b93      	ldr	r3, [pc, #588]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	691b      	ldr	r3, [r3, #16]
 80034a4:	061b      	lsls	r3, r3, #24
 80034a6:	4990      	ldr	r1, [pc, #576]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 80034a8:	4313      	orrs	r3, r2
 80034aa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034ac:	e040      	b.n	8003530 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d023      	beq.n	80034fe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034b6:	4b8c      	ldr	r3, [pc, #560]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a8b      	ldr	r2, [pc, #556]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 80034bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c2:	f7fd fd3f 	bl	8000f44 <HAL_GetTick>
 80034c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034c8:	e008      	b.n	80034dc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034ca:	f7fd fd3b 	bl	8000f44 <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d901      	bls.n	80034dc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	e227      	b.n	800392c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034dc:	4b82      	ldr	r3, [pc, #520]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d0f0      	beq.n	80034ca <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034e8:	4b7f      	ldr	r3, [pc, #508]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	691b      	ldr	r3, [r3, #16]
 80034f4:	061b      	lsls	r3, r3, #24
 80034f6:	497c      	ldr	r1, [pc, #496]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	604b      	str	r3, [r1, #4]
 80034fc:	e018      	b.n	8003530 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034fe:	4b7a      	ldr	r3, [pc, #488]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a79      	ldr	r2, [pc, #484]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 8003504:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003508:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800350a:	f7fd fd1b 	bl	8000f44 <HAL_GetTick>
 800350e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003510:	e008      	b.n	8003524 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003512:	f7fd fd17 	bl	8000f44 <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	2b02      	cmp	r3, #2
 800351e:	d901      	bls.n	8003524 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e203      	b.n	800392c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003524:	4b70      	ldr	r3, [pc, #448]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800352c:	2b00      	cmp	r3, #0
 800352e:	d1f0      	bne.n	8003512 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0308 	and.w	r3, r3, #8
 8003538:	2b00      	cmp	r3, #0
 800353a:	d03c      	beq.n	80035b6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	695b      	ldr	r3, [r3, #20]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d01c      	beq.n	800357e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003544:	4b68      	ldr	r3, [pc, #416]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 8003546:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800354a:	4a67      	ldr	r2, [pc, #412]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 800354c:	f043 0301 	orr.w	r3, r3, #1
 8003550:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003554:	f7fd fcf6 	bl	8000f44 <HAL_GetTick>
 8003558:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800355a:	e008      	b.n	800356e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800355c:	f7fd fcf2 	bl	8000f44 <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	2b02      	cmp	r3, #2
 8003568:	d901      	bls.n	800356e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e1de      	b.n	800392c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800356e:	4b5e      	ldr	r3, [pc, #376]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 8003570:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003574:	f003 0302 	and.w	r3, r3, #2
 8003578:	2b00      	cmp	r3, #0
 800357a:	d0ef      	beq.n	800355c <HAL_RCC_OscConfig+0x3ec>
 800357c:	e01b      	b.n	80035b6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800357e:	4b5a      	ldr	r3, [pc, #360]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 8003580:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003584:	4a58      	ldr	r2, [pc, #352]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 8003586:	f023 0301 	bic.w	r3, r3, #1
 800358a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800358e:	f7fd fcd9 	bl	8000f44 <HAL_GetTick>
 8003592:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003594:	e008      	b.n	80035a8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003596:	f7fd fcd5 	bl	8000f44 <HAL_GetTick>
 800359a:	4602      	mov	r2, r0
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d901      	bls.n	80035a8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e1c1      	b.n	800392c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035a8:	4b4f      	ldr	r3, [pc, #316]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 80035aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035ae:	f003 0302 	and.w	r3, r3, #2
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d1ef      	bne.n	8003596 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0304 	and.w	r3, r3, #4
 80035be:	2b00      	cmp	r3, #0
 80035c0:	f000 80a6 	beq.w	8003710 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035c4:	2300      	movs	r3, #0
 80035c6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80035c8:	4b47      	ldr	r3, [pc, #284]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 80035ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d10d      	bne.n	80035f0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035d4:	4b44      	ldr	r3, [pc, #272]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 80035d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d8:	4a43      	ldr	r2, [pc, #268]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 80035da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035de:	6593      	str	r3, [r2, #88]	; 0x58
 80035e0:	4b41      	ldr	r3, [pc, #260]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 80035e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035e8:	60bb      	str	r3, [r7, #8]
 80035ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035ec:	2301      	movs	r3, #1
 80035ee:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035f0:	4b3e      	ldr	r3, [pc, #248]	; (80036ec <HAL_RCC_OscConfig+0x57c>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d118      	bne.n	800362e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035fc:	4b3b      	ldr	r3, [pc, #236]	; (80036ec <HAL_RCC_OscConfig+0x57c>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a3a      	ldr	r2, [pc, #232]	; (80036ec <HAL_RCC_OscConfig+0x57c>)
 8003602:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003606:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003608:	f7fd fc9c 	bl	8000f44 <HAL_GetTick>
 800360c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800360e:	e008      	b.n	8003622 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003610:	f7fd fc98 	bl	8000f44 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	2b02      	cmp	r3, #2
 800361c:	d901      	bls.n	8003622 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e184      	b.n	800392c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003622:	4b32      	ldr	r3, [pc, #200]	; (80036ec <HAL_RCC_OscConfig+0x57c>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800362a:	2b00      	cmp	r3, #0
 800362c:	d0f0      	beq.n	8003610 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	2b01      	cmp	r3, #1
 8003634:	d108      	bne.n	8003648 <HAL_RCC_OscConfig+0x4d8>
 8003636:	4b2c      	ldr	r3, [pc, #176]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 8003638:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800363c:	4a2a      	ldr	r2, [pc, #168]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 800363e:	f043 0301 	orr.w	r3, r3, #1
 8003642:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003646:	e024      	b.n	8003692 <HAL_RCC_OscConfig+0x522>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	2b05      	cmp	r3, #5
 800364e:	d110      	bne.n	8003672 <HAL_RCC_OscConfig+0x502>
 8003650:	4b25      	ldr	r3, [pc, #148]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 8003652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003656:	4a24      	ldr	r2, [pc, #144]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 8003658:	f043 0304 	orr.w	r3, r3, #4
 800365c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003660:	4b21      	ldr	r3, [pc, #132]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 8003662:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003666:	4a20      	ldr	r2, [pc, #128]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 8003668:	f043 0301 	orr.w	r3, r3, #1
 800366c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003670:	e00f      	b.n	8003692 <HAL_RCC_OscConfig+0x522>
 8003672:	4b1d      	ldr	r3, [pc, #116]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 8003674:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003678:	4a1b      	ldr	r2, [pc, #108]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 800367a:	f023 0301 	bic.w	r3, r3, #1
 800367e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003682:	4b19      	ldr	r3, [pc, #100]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 8003684:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003688:	4a17      	ldr	r2, [pc, #92]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 800368a:	f023 0304 	bic.w	r3, r3, #4
 800368e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d016      	beq.n	80036c8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800369a:	f7fd fc53 	bl	8000f44 <HAL_GetTick>
 800369e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036a0:	e00a      	b.n	80036b8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036a2:	f7fd fc4f 	bl	8000f44 <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d901      	bls.n	80036b8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	e139      	b.n	800392c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036b8:	4b0b      	ldr	r3, [pc, #44]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 80036ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036be:	f003 0302 	and.w	r3, r3, #2
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d0ed      	beq.n	80036a2 <HAL_RCC_OscConfig+0x532>
 80036c6:	e01a      	b.n	80036fe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036c8:	f7fd fc3c 	bl	8000f44 <HAL_GetTick>
 80036cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036ce:	e00f      	b.n	80036f0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036d0:	f7fd fc38 	bl	8000f44 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	f241 3288 	movw	r2, #5000	; 0x1388
 80036de:	4293      	cmp	r3, r2
 80036e0:	d906      	bls.n	80036f0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e122      	b.n	800392c <HAL_RCC_OscConfig+0x7bc>
 80036e6:	bf00      	nop
 80036e8:	40021000 	.word	0x40021000
 80036ec:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036f0:	4b90      	ldr	r3, [pc, #576]	; (8003934 <HAL_RCC_OscConfig+0x7c4>)
 80036f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036f6:	f003 0302 	and.w	r3, r3, #2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d1e8      	bne.n	80036d0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036fe:	7ffb      	ldrb	r3, [r7, #31]
 8003700:	2b01      	cmp	r3, #1
 8003702:	d105      	bne.n	8003710 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003704:	4b8b      	ldr	r3, [pc, #556]	; (8003934 <HAL_RCC_OscConfig+0x7c4>)
 8003706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003708:	4a8a      	ldr	r2, [pc, #552]	; (8003934 <HAL_RCC_OscConfig+0x7c4>)
 800370a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800370e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003714:	2b00      	cmp	r3, #0
 8003716:	f000 8108 	beq.w	800392a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800371e:	2b02      	cmp	r3, #2
 8003720:	f040 80d0 	bne.w	80038c4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003724:	4b83      	ldr	r3, [pc, #524]	; (8003934 <HAL_RCC_OscConfig+0x7c4>)
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	f003 0203 	and.w	r2, r3, #3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003734:	429a      	cmp	r2, r3
 8003736:	d130      	bne.n	800379a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003742:	3b01      	subs	r3, #1
 8003744:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003746:	429a      	cmp	r2, r3
 8003748:	d127      	bne.n	800379a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003754:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003756:	429a      	cmp	r2, r3
 8003758:	d11f      	bne.n	800379a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003764:	2a07      	cmp	r2, #7
 8003766:	bf14      	ite	ne
 8003768:	2201      	movne	r2, #1
 800376a:	2200      	moveq	r2, #0
 800376c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800376e:	4293      	cmp	r3, r2
 8003770:	d113      	bne.n	800379a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800377c:	085b      	lsrs	r3, r3, #1
 800377e:	3b01      	subs	r3, #1
 8003780:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003782:	429a      	cmp	r2, r3
 8003784:	d109      	bne.n	800379a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003790:	085b      	lsrs	r3, r3, #1
 8003792:	3b01      	subs	r3, #1
 8003794:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003796:	429a      	cmp	r2, r3
 8003798:	d06e      	beq.n	8003878 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	2b0c      	cmp	r3, #12
 800379e:	d069      	beq.n	8003874 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80037a0:	4b64      	ldr	r3, [pc, #400]	; (8003934 <HAL_RCC_OscConfig+0x7c4>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d105      	bne.n	80037b8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80037ac:	4b61      	ldr	r3, [pc, #388]	; (8003934 <HAL_RCC_OscConfig+0x7c4>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d001      	beq.n	80037bc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e0b7      	b.n	800392c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80037bc:	4b5d      	ldr	r3, [pc, #372]	; (8003934 <HAL_RCC_OscConfig+0x7c4>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a5c      	ldr	r2, [pc, #368]	; (8003934 <HAL_RCC_OscConfig+0x7c4>)
 80037c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037c6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80037c8:	f7fd fbbc 	bl	8000f44 <HAL_GetTick>
 80037cc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037ce:	e008      	b.n	80037e2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037d0:	f7fd fbb8 	bl	8000f44 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d901      	bls.n	80037e2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e0a4      	b.n	800392c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037e2:	4b54      	ldr	r3, [pc, #336]	; (8003934 <HAL_RCC_OscConfig+0x7c4>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d1f0      	bne.n	80037d0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037ee:	4b51      	ldr	r3, [pc, #324]	; (8003934 <HAL_RCC_OscConfig+0x7c4>)
 80037f0:	68da      	ldr	r2, [r3, #12]
 80037f2:	4b51      	ldr	r3, [pc, #324]	; (8003938 <HAL_RCC_OscConfig+0x7c8>)
 80037f4:	4013      	ands	r3, r2
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80037fe:	3a01      	subs	r2, #1
 8003800:	0112      	lsls	r2, r2, #4
 8003802:	4311      	orrs	r1, r2
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003808:	0212      	lsls	r2, r2, #8
 800380a:	4311      	orrs	r1, r2
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003810:	0852      	lsrs	r2, r2, #1
 8003812:	3a01      	subs	r2, #1
 8003814:	0552      	lsls	r2, r2, #21
 8003816:	4311      	orrs	r1, r2
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800381c:	0852      	lsrs	r2, r2, #1
 800381e:	3a01      	subs	r2, #1
 8003820:	0652      	lsls	r2, r2, #25
 8003822:	4311      	orrs	r1, r2
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003828:	0912      	lsrs	r2, r2, #4
 800382a:	0452      	lsls	r2, r2, #17
 800382c:	430a      	orrs	r2, r1
 800382e:	4941      	ldr	r1, [pc, #260]	; (8003934 <HAL_RCC_OscConfig+0x7c4>)
 8003830:	4313      	orrs	r3, r2
 8003832:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003834:	4b3f      	ldr	r3, [pc, #252]	; (8003934 <HAL_RCC_OscConfig+0x7c4>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a3e      	ldr	r2, [pc, #248]	; (8003934 <HAL_RCC_OscConfig+0x7c4>)
 800383a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800383e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003840:	4b3c      	ldr	r3, [pc, #240]	; (8003934 <HAL_RCC_OscConfig+0x7c4>)
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	4a3b      	ldr	r2, [pc, #236]	; (8003934 <HAL_RCC_OscConfig+0x7c4>)
 8003846:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800384a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800384c:	f7fd fb7a 	bl	8000f44 <HAL_GetTick>
 8003850:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003852:	e008      	b.n	8003866 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003854:	f7fd fb76 	bl	8000f44 <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	2b02      	cmp	r3, #2
 8003860:	d901      	bls.n	8003866 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e062      	b.n	800392c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003866:	4b33      	ldr	r3, [pc, #204]	; (8003934 <HAL_RCC_OscConfig+0x7c4>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d0f0      	beq.n	8003854 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003872:	e05a      	b.n	800392a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e059      	b.n	800392c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003878:	4b2e      	ldr	r3, [pc, #184]	; (8003934 <HAL_RCC_OscConfig+0x7c4>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d152      	bne.n	800392a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003884:	4b2b      	ldr	r3, [pc, #172]	; (8003934 <HAL_RCC_OscConfig+0x7c4>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a2a      	ldr	r2, [pc, #168]	; (8003934 <HAL_RCC_OscConfig+0x7c4>)
 800388a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800388e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003890:	4b28      	ldr	r3, [pc, #160]	; (8003934 <HAL_RCC_OscConfig+0x7c4>)
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	4a27      	ldr	r2, [pc, #156]	; (8003934 <HAL_RCC_OscConfig+0x7c4>)
 8003896:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800389a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800389c:	f7fd fb52 	bl	8000f44 <HAL_GetTick>
 80038a0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038a2:	e008      	b.n	80038b6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038a4:	f7fd fb4e 	bl	8000f44 <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d901      	bls.n	80038b6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e03a      	b.n	800392c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038b6:	4b1f      	ldr	r3, [pc, #124]	; (8003934 <HAL_RCC_OscConfig+0x7c4>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d0f0      	beq.n	80038a4 <HAL_RCC_OscConfig+0x734>
 80038c2:	e032      	b.n	800392a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	2b0c      	cmp	r3, #12
 80038c8:	d02d      	beq.n	8003926 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038ca:	4b1a      	ldr	r3, [pc, #104]	; (8003934 <HAL_RCC_OscConfig+0x7c4>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a19      	ldr	r2, [pc, #100]	; (8003934 <HAL_RCC_OscConfig+0x7c4>)
 80038d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038d4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80038d6:	4b17      	ldr	r3, [pc, #92]	; (8003934 <HAL_RCC_OscConfig+0x7c4>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d105      	bne.n	80038ee <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80038e2:	4b14      	ldr	r3, [pc, #80]	; (8003934 <HAL_RCC_OscConfig+0x7c4>)
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	4a13      	ldr	r2, [pc, #76]	; (8003934 <HAL_RCC_OscConfig+0x7c4>)
 80038e8:	f023 0303 	bic.w	r3, r3, #3
 80038ec:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80038ee:	4b11      	ldr	r3, [pc, #68]	; (8003934 <HAL_RCC_OscConfig+0x7c4>)
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	4a10      	ldr	r2, [pc, #64]	; (8003934 <HAL_RCC_OscConfig+0x7c4>)
 80038f4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80038f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038fc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038fe:	f7fd fb21 	bl	8000f44 <HAL_GetTick>
 8003902:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003904:	e008      	b.n	8003918 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003906:	f7fd fb1d 	bl	8000f44 <HAL_GetTick>
 800390a:	4602      	mov	r2, r0
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	2b02      	cmp	r3, #2
 8003912:	d901      	bls.n	8003918 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	e009      	b.n	800392c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003918:	4b06      	ldr	r3, [pc, #24]	; (8003934 <HAL_RCC_OscConfig+0x7c4>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d1f0      	bne.n	8003906 <HAL_RCC_OscConfig+0x796>
 8003924:	e001      	b.n	800392a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e000      	b.n	800392c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800392a:	2300      	movs	r3, #0
}
 800392c:	4618      	mov	r0, r3
 800392e:	3720      	adds	r7, #32
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	40021000 	.word	0x40021000
 8003938:	f99d808c 	.word	0xf99d808c

0800393c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d101      	bne.n	8003950 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e0c8      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003950:	4b66      	ldr	r3, [pc, #408]	; (8003aec <HAL_RCC_ClockConfig+0x1b0>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0307 	and.w	r3, r3, #7
 8003958:	683a      	ldr	r2, [r7, #0]
 800395a:	429a      	cmp	r2, r3
 800395c:	d910      	bls.n	8003980 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800395e:	4b63      	ldr	r3, [pc, #396]	; (8003aec <HAL_RCC_ClockConfig+0x1b0>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f023 0207 	bic.w	r2, r3, #7
 8003966:	4961      	ldr	r1, [pc, #388]	; (8003aec <HAL_RCC_ClockConfig+0x1b0>)
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	4313      	orrs	r3, r2
 800396c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800396e:	4b5f      	ldr	r3, [pc, #380]	; (8003aec <HAL_RCC_ClockConfig+0x1b0>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0307 	and.w	r3, r3, #7
 8003976:	683a      	ldr	r2, [r7, #0]
 8003978:	429a      	cmp	r2, r3
 800397a:	d001      	beq.n	8003980 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e0b0      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0301 	and.w	r3, r3, #1
 8003988:	2b00      	cmp	r3, #0
 800398a:	d04c      	beq.n	8003a26 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	2b03      	cmp	r3, #3
 8003992:	d107      	bne.n	80039a4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003994:	4b56      	ldr	r3, [pc, #344]	; (8003af0 <HAL_RCC_ClockConfig+0x1b4>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800399c:	2b00      	cmp	r3, #0
 800399e:	d121      	bne.n	80039e4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e09e      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d107      	bne.n	80039bc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039ac:	4b50      	ldr	r3, [pc, #320]	; (8003af0 <HAL_RCC_ClockConfig+0x1b4>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d115      	bne.n	80039e4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e092      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d107      	bne.n	80039d4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80039c4:	4b4a      	ldr	r3, [pc, #296]	; (8003af0 <HAL_RCC_ClockConfig+0x1b4>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0302 	and.w	r3, r3, #2
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d109      	bne.n	80039e4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e086      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039d4:	4b46      	ldr	r3, [pc, #280]	; (8003af0 <HAL_RCC_ClockConfig+0x1b4>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d101      	bne.n	80039e4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e07e      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80039e4:	4b42      	ldr	r3, [pc, #264]	; (8003af0 <HAL_RCC_ClockConfig+0x1b4>)
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	f023 0203 	bic.w	r2, r3, #3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	493f      	ldr	r1, [pc, #252]	; (8003af0 <HAL_RCC_ClockConfig+0x1b4>)
 80039f2:	4313      	orrs	r3, r2
 80039f4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039f6:	f7fd faa5 	bl	8000f44 <HAL_GetTick>
 80039fa:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039fc:	e00a      	b.n	8003a14 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039fe:	f7fd faa1 	bl	8000f44 <HAL_GetTick>
 8003a02:	4602      	mov	r2, r0
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d901      	bls.n	8003a14 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	e066      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a14:	4b36      	ldr	r3, [pc, #216]	; (8003af0 <HAL_RCC_ClockConfig+0x1b4>)
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	f003 020c 	and.w	r2, r3, #12
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d1eb      	bne.n	80039fe <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0302 	and.w	r3, r3, #2
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d008      	beq.n	8003a44 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a32:	4b2f      	ldr	r3, [pc, #188]	; (8003af0 <HAL_RCC_ClockConfig+0x1b4>)
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	492c      	ldr	r1, [pc, #176]	; (8003af0 <HAL_RCC_ClockConfig+0x1b4>)
 8003a40:	4313      	orrs	r3, r2
 8003a42:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a44:	4b29      	ldr	r3, [pc, #164]	; (8003aec <HAL_RCC_ClockConfig+0x1b0>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0307 	and.w	r3, r3, #7
 8003a4c:	683a      	ldr	r2, [r7, #0]
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d210      	bcs.n	8003a74 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a52:	4b26      	ldr	r3, [pc, #152]	; (8003aec <HAL_RCC_ClockConfig+0x1b0>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f023 0207 	bic.w	r2, r3, #7
 8003a5a:	4924      	ldr	r1, [pc, #144]	; (8003aec <HAL_RCC_ClockConfig+0x1b0>)
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a62:	4b22      	ldr	r3, [pc, #136]	; (8003aec <HAL_RCC_ClockConfig+0x1b0>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0307 	and.w	r3, r3, #7
 8003a6a:	683a      	ldr	r2, [r7, #0]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d001      	beq.n	8003a74 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e036      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0304 	and.w	r3, r3, #4
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d008      	beq.n	8003a92 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a80:	4b1b      	ldr	r3, [pc, #108]	; (8003af0 <HAL_RCC_ClockConfig+0x1b4>)
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	4918      	ldr	r1, [pc, #96]	; (8003af0 <HAL_RCC_ClockConfig+0x1b4>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0308 	and.w	r3, r3, #8
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d009      	beq.n	8003ab2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a9e:	4b14      	ldr	r3, [pc, #80]	; (8003af0 <HAL_RCC_ClockConfig+0x1b4>)
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	691b      	ldr	r3, [r3, #16]
 8003aaa:	00db      	lsls	r3, r3, #3
 8003aac:	4910      	ldr	r1, [pc, #64]	; (8003af0 <HAL_RCC_ClockConfig+0x1b4>)
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ab2:	f000 f825 	bl	8003b00 <HAL_RCC_GetSysClockFreq>
 8003ab6:	4601      	mov	r1, r0
 8003ab8:	4b0d      	ldr	r3, [pc, #52]	; (8003af0 <HAL_RCC_ClockConfig+0x1b4>)
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	091b      	lsrs	r3, r3, #4
 8003abe:	f003 030f 	and.w	r3, r3, #15
 8003ac2:	4a0c      	ldr	r2, [pc, #48]	; (8003af4 <HAL_RCC_ClockConfig+0x1b8>)
 8003ac4:	5cd3      	ldrb	r3, [r2, r3]
 8003ac6:	f003 031f 	and.w	r3, r3, #31
 8003aca:	fa21 f303 	lsr.w	r3, r1, r3
 8003ace:	4a0a      	ldr	r2, [pc, #40]	; (8003af8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003ad2:	4b0a      	ldr	r3, [pc, #40]	; (8003afc <HAL_RCC_ClockConfig+0x1c0>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7fd f9e4 	bl	8000ea4 <HAL_InitTick>
 8003adc:	4603      	mov	r3, r0
 8003ade:	72fb      	strb	r3, [r7, #11]

  return status;
 8003ae0:	7afb      	ldrb	r3, [r7, #11]
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3710      	adds	r7, #16
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	40022000 	.word	0x40022000
 8003af0:	40021000 	.word	0x40021000
 8003af4:	08005eb8 	.word	0x08005eb8
 8003af8:	20000000 	.word	0x20000000
 8003afc:	20000004 	.word	0x20000004

08003b00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b089      	sub	sp, #36	; 0x24
 8003b04:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003b06:	2300      	movs	r3, #0
 8003b08:	61fb      	str	r3, [r7, #28]
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b0e:	4b3d      	ldr	r3, [pc, #244]	; (8003c04 <HAL_RCC_GetSysClockFreq+0x104>)
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	f003 030c 	and.w	r3, r3, #12
 8003b16:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b18:	4b3a      	ldr	r3, [pc, #232]	; (8003c04 <HAL_RCC_GetSysClockFreq+0x104>)
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	f003 0303 	and.w	r3, r3, #3
 8003b20:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d005      	beq.n	8003b34 <HAL_RCC_GetSysClockFreq+0x34>
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	2b0c      	cmp	r3, #12
 8003b2c:	d121      	bne.n	8003b72 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d11e      	bne.n	8003b72 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003b34:	4b33      	ldr	r3, [pc, #204]	; (8003c04 <HAL_RCC_GetSysClockFreq+0x104>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0308 	and.w	r3, r3, #8
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d107      	bne.n	8003b50 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003b40:	4b30      	ldr	r3, [pc, #192]	; (8003c04 <HAL_RCC_GetSysClockFreq+0x104>)
 8003b42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b46:	0a1b      	lsrs	r3, r3, #8
 8003b48:	f003 030f 	and.w	r3, r3, #15
 8003b4c:	61fb      	str	r3, [r7, #28]
 8003b4e:	e005      	b.n	8003b5c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003b50:	4b2c      	ldr	r3, [pc, #176]	; (8003c04 <HAL_RCC_GetSysClockFreq+0x104>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	091b      	lsrs	r3, r3, #4
 8003b56:	f003 030f 	and.w	r3, r3, #15
 8003b5a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003b5c:	4a2a      	ldr	r2, [pc, #168]	; (8003c08 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b64:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d10d      	bne.n	8003b88 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b70:	e00a      	b.n	8003b88 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	2b04      	cmp	r3, #4
 8003b76:	d102      	bne.n	8003b7e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003b78:	4b24      	ldr	r3, [pc, #144]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003b7a:	61bb      	str	r3, [r7, #24]
 8003b7c:	e004      	b.n	8003b88 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	2b08      	cmp	r3, #8
 8003b82:	d101      	bne.n	8003b88 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003b84:	4b22      	ldr	r3, [pc, #136]	; (8003c10 <HAL_RCC_GetSysClockFreq+0x110>)
 8003b86:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	2b0c      	cmp	r3, #12
 8003b8c:	d133      	bne.n	8003bf6 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b8e:	4b1d      	ldr	r3, [pc, #116]	; (8003c04 <HAL_RCC_GetSysClockFreq+0x104>)
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	f003 0303 	and.w	r3, r3, #3
 8003b96:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d002      	beq.n	8003ba4 <HAL_RCC_GetSysClockFreq+0xa4>
 8003b9e:	2b03      	cmp	r3, #3
 8003ba0:	d003      	beq.n	8003baa <HAL_RCC_GetSysClockFreq+0xaa>
 8003ba2:	e005      	b.n	8003bb0 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003ba4:	4b19      	ldr	r3, [pc, #100]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003ba6:	617b      	str	r3, [r7, #20]
      break;
 8003ba8:	e005      	b.n	8003bb6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003baa:	4b19      	ldr	r3, [pc, #100]	; (8003c10 <HAL_RCC_GetSysClockFreq+0x110>)
 8003bac:	617b      	str	r3, [r7, #20]
      break;
 8003bae:	e002      	b.n	8003bb6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	617b      	str	r3, [r7, #20]
      break;
 8003bb4:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003bb6:	4b13      	ldr	r3, [pc, #76]	; (8003c04 <HAL_RCC_GetSysClockFreq+0x104>)
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	091b      	lsrs	r3, r3, #4
 8003bbc:	f003 0307 	and.w	r3, r3, #7
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003bc4:	4b0f      	ldr	r3, [pc, #60]	; (8003c04 <HAL_RCC_GetSysClockFreq+0x104>)
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	0a1b      	lsrs	r3, r3, #8
 8003bca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bce:	697a      	ldr	r2, [r7, #20]
 8003bd0:	fb02 f203 	mul.w	r2, r2, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bda:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003bdc:	4b09      	ldr	r3, [pc, #36]	; (8003c04 <HAL_RCC_GetSysClockFreq+0x104>)
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	0e5b      	lsrs	r3, r3, #25
 8003be2:	f003 0303 	and.w	r3, r3, #3
 8003be6:	3301      	adds	r3, #1
 8003be8:	005b      	lsls	r3, r3, #1
 8003bea:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003bec:	697a      	ldr	r2, [r7, #20]
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bf4:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003bf6:	69bb      	ldr	r3, [r7, #24]
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3724      	adds	r7, #36	; 0x24
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr
 8003c04:	40021000 	.word	0x40021000
 8003c08:	08005ed0 	.word	0x08005ed0
 8003c0c:	00f42400 	.word	0x00f42400
 8003c10:	007a1200 	.word	0x007a1200

08003c14 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c14:	b480      	push	{r7}
 8003c16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c18:	4b03      	ldr	r3, [pc, #12]	; (8003c28 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr
 8003c26:	bf00      	nop
 8003c28:	20000000 	.word	0x20000000

08003c2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003c30:	f7ff fff0 	bl	8003c14 <HAL_RCC_GetHCLKFreq>
 8003c34:	4601      	mov	r1, r0
 8003c36:	4b06      	ldr	r3, [pc, #24]	; (8003c50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	0a1b      	lsrs	r3, r3, #8
 8003c3c:	f003 0307 	and.w	r3, r3, #7
 8003c40:	4a04      	ldr	r2, [pc, #16]	; (8003c54 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003c42:	5cd3      	ldrb	r3, [r2, r3]
 8003c44:	f003 031f 	and.w	r3, r3, #31
 8003c48:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	40021000 	.word	0x40021000
 8003c54:	08005ec8 	.word	0x08005ec8

08003c58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003c5c:	f7ff ffda 	bl	8003c14 <HAL_RCC_GetHCLKFreq>
 8003c60:	4601      	mov	r1, r0
 8003c62:	4b06      	ldr	r3, [pc, #24]	; (8003c7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	0adb      	lsrs	r3, r3, #11
 8003c68:	f003 0307 	and.w	r3, r3, #7
 8003c6c:	4a04      	ldr	r2, [pc, #16]	; (8003c80 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003c6e:	5cd3      	ldrb	r3, [r2, r3]
 8003c70:	f003 031f 	and.w	r3, r3, #31
 8003c74:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	40021000 	.word	0x40021000
 8003c80:	08005ec8 	.word	0x08005ec8

08003c84 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b086      	sub	sp, #24
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003c90:	4b2a      	ldr	r3, [pc, #168]	; (8003d3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d003      	beq.n	8003ca4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003c9c:	f7ff fa04 	bl	80030a8 <HAL_PWREx_GetVoltageRange>
 8003ca0:	6178      	str	r0, [r7, #20]
 8003ca2:	e014      	b.n	8003cce <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ca4:	4b25      	ldr	r3, [pc, #148]	; (8003d3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ca8:	4a24      	ldr	r2, [pc, #144]	; (8003d3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003caa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cae:	6593      	str	r3, [r2, #88]	; 0x58
 8003cb0:	4b22      	ldr	r3, [pc, #136]	; (8003d3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003cb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cb8:	60fb      	str	r3, [r7, #12]
 8003cba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003cbc:	f7ff f9f4 	bl	80030a8 <HAL_PWREx_GetVoltageRange>
 8003cc0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003cc2:	4b1e      	ldr	r3, [pc, #120]	; (8003d3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cc6:	4a1d      	ldr	r2, [pc, #116]	; (8003d3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003cc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ccc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cd4:	d10b      	bne.n	8003cee <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2b80      	cmp	r3, #128	; 0x80
 8003cda:	d919      	bls.n	8003d10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2ba0      	cmp	r3, #160	; 0xa0
 8003ce0:	d902      	bls.n	8003ce8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ce2:	2302      	movs	r3, #2
 8003ce4:	613b      	str	r3, [r7, #16]
 8003ce6:	e013      	b.n	8003d10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ce8:	2301      	movs	r3, #1
 8003cea:	613b      	str	r3, [r7, #16]
 8003cec:	e010      	b.n	8003d10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2b80      	cmp	r3, #128	; 0x80
 8003cf2:	d902      	bls.n	8003cfa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	613b      	str	r3, [r7, #16]
 8003cf8:	e00a      	b.n	8003d10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2b80      	cmp	r3, #128	; 0x80
 8003cfe:	d102      	bne.n	8003d06 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003d00:	2302      	movs	r3, #2
 8003d02:	613b      	str	r3, [r7, #16]
 8003d04:	e004      	b.n	8003d10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2b70      	cmp	r3, #112	; 0x70
 8003d0a:	d101      	bne.n	8003d10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003d10:	4b0b      	ldr	r3, [pc, #44]	; (8003d40 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f023 0207 	bic.w	r2, r3, #7
 8003d18:	4909      	ldr	r1, [pc, #36]	; (8003d40 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003d20:	4b07      	ldr	r3, [pc, #28]	; (8003d40 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0307 	and.w	r3, r3, #7
 8003d28:	693a      	ldr	r2, [r7, #16]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d001      	beq.n	8003d32 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e000      	b.n	8003d34 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003d32:	2300      	movs	r3, #0
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3718      	adds	r7, #24
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	40021000 	.word	0x40021000
 8003d40:	40022000 	.word	0x40022000

08003d44 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b086      	sub	sp, #24
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d50:	2300      	movs	r3, #0
 8003d52:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d03f      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d68:	d01c      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003d6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d6e:	d802      	bhi.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d00e      	beq.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003d74:	e01f      	b.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003d76:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003d7a:	d003      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003d7c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003d80:	d01c      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003d82:	e018      	b.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003d84:	4b85      	ldr	r3, [pc, #532]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	4a84      	ldr	r2, [pc, #528]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d8e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d90:	e015      	b.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	3304      	adds	r3, #4
 8003d96:	2100      	movs	r1, #0
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f000 fab9 	bl	8004310 <RCCEx_PLLSAI1_Config>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003da2:	e00c      	b.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	3320      	adds	r3, #32
 8003da8:	2100      	movs	r1, #0
 8003daa:	4618      	mov	r0, r3
 8003dac:	f000 fba0 	bl	80044f0 <RCCEx_PLLSAI2_Config>
 8003db0:	4603      	mov	r3, r0
 8003db2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003db4:	e003      	b.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	74fb      	strb	r3, [r7, #19]
      break;
 8003dba:	e000      	b.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003dbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dbe:	7cfb      	ldrb	r3, [r7, #19]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d10b      	bne.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003dc4:	4b75      	ldr	r3, [pc, #468]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003dd2:	4972      	ldr	r1, [pc, #456]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003dda:	e001      	b.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ddc:	7cfb      	ldrb	r3, [r7, #19]
 8003dde:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d03f      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003df0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003df4:	d01c      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003df6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003dfa:	d802      	bhi.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d00e      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0xda>
 8003e00:	e01f      	b.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003e02:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e06:	d003      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8003e08:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003e0c:	d01c      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8003e0e:	e018      	b.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003e10:	4b62      	ldr	r3, [pc, #392]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	4a61      	ldr	r2, [pc, #388]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e1a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e1c:	e015      	b.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	3304      	adds	r3, #4
 8003e22:	2100      	movs	r1, #0
 8003e24:	4618      	mov	r0, r3
 8003e26:	f000 fa73 	bl	8004310 <RCCEx_PLLSAI1_Config>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e2e:	e00c      	b.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	3320      	adds	r3, #32
 8003e34:	2100      	movs	r1, #0
 8003e36:	4618      	mov	r0, r3
 8003e38:	f000 fb5a 	bl	80044f0 <RCCEx_PLLSAI2_Config>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e40:	e003      	b.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	74fb      	strb	r3, [r7, #19]
      break;
 8003e46:	e000      	b.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003e48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e4a:	7cfb      	ldrb	r3, [r7, #19]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d10b      	bne.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003e50:	4b52      	ldr	r3, [pc, #328]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e56:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e5e:	494f      	ldr	r1, [pc, #316]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e60:	4313      	orrs	r3, r2
 8003e62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003e66:	e001      	b.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e68:	7cfb      	ldrb	r3, [r7, #19]
 8003e6a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	f000 80a0 	beq.w	8003fba <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003e7e:	4b47      	ldr	r3, [pc, #284]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d101      	bne.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e000      	b.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003e8e:	2300      	movs	r3, #0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d00d      	beq.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e94:	4b41      	ldr	r3, [pc, #260]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e98:	4a40      	ldr	r2, [pc, #256]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e9e:	6593      	str	r3, [r2, #88]	; 0x58
 8003ea0:	4b3e      	ldr	r3, [pc, #248]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ea4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ea8:	60bb      	str	r3, [r7, #8]
 8003eaa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003eac:	2301      	movs	r3, #1
 8003eae:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003eb0:	4b3b      	ldr	r3, [pc, #236]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a3a      	ldr	r2, [pc, #232]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003eb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003eba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ebc:	f7fd f842 	bl	8000f44 <HAL_GetTick>
 8003ec0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003ec2:	e009      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ec4:	f7fd f83e 	bl	8000f44 <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d902      	bls.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	74fb      	strb	r3, [r7, #19]
        break;
 8003ed6:	e005      	b.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003ed8:	4b31      	ldr	r3, [pc, #196]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d0ef      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8003ee4:	7cfb      	ldrb	r3, [r7, #19]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d15c      	bne.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003eea:	4b2c      	ldr	r3, [pc, #176]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ef0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ef4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d01f      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f02:	697a      	ldr	r2, [r7, #20]
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d019      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003f08:	4b24      	ldr	r3, [pc, #144]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f12:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f14:	4b21      	ldr	r3, [pc, #132]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f1a:	4a20      	ldr	r2, [pc, #128]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f24:	4b1d      	ldr	r3, [pc, #116]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f2a:	4a1c      	ldr	r2, [pc, #112]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003f34:	4a19      	ldr	r2, [pc, #100]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	f003 0301 	and.w	r3, r3, #1
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d016      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f46:	f7fc fffd 	bl	8000f44 <HAL_GetTick>
 8003f4a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f4c:	e00b      	b.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f4e:	f7fc fff9 	bl	8000f44 <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d902      	bls.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8003f60:	2303      	movs	r3, #3
 8003f62:	74fb      	strb	r3, [r7, #19]
            break;
 8003f64:	e006      	b.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f66:	4b0d      	ldr	r3, [pc, #52]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f6c:	f003 0302 	and.w	r3, r3, #2
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d0ec      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8003f74:	7cfb      	ldrb	r3, [r7, #19]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d10c      	bne.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f7a:	4b08      	ldr	r3, [pc, #32]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f8a:	4904      	ldr	r1, [pc, #16]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003f92:	e009      	b.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f94:	7cfb      	ldrb	r3, [r7, #19]
 8003f96:	74bb      	strb	r3, [r7, #18]
 8003f98:	e006      	b.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8003f9a:	bf00      	nop
 8003f9c:	40021000 	.word	0x40021000
 8003fa0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fa4:	7cfb      	ldrb	r3, [r7, #19]
 8003fa6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fa8:	7c7b      	ldrb	r3, [r7, #17]
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d105      	bne.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fae:	4b9e      	ldr	r3, [pc, #632]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fb2:	4a9d      	ldr	r2, [pc, #628]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003fb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fb8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0301 	and.w	r3, r3, #1
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d00a      	beq.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003fc6:	4b98      	ldr	r3, [pc, #608]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fcc:	f023 0203 	bic.w	r2, r3, #3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd4:	4994      	ldr	r1, [pc, #592]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0302 	and.w	r3, r3, #2
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d00a      	beq.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003fe8:	4b8f      	ldr	r3, [pc, #572]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fee:	f023 020c 	bic.w	r2, r3, #12
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ff6:	498c      	ldr	r1, [pc, #560]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0304 	and.w	r3, r3, #4
 8004006:	2b00      	cmp	r3, #0
 8004008:	d00a      	beq.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800400a:	4b87      	ldr	r3, [pc, #540]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800400c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004010:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004018:	4983      	ldr	r1, [pc, #524]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800401a:	4313      	orrs	r3, r2
 800401c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0308 	and.w	r3, r3, #8
 8004028:	2b00      	cmp	r3, #0
 800402a:	d00a      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800402c:	4b7e      	ldr	r3, [pc, #504]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800402e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004032:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800403a:	497b      	ldr	r1, [pc, #492]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800403c:	4313      	orrs	r3, r2
 800403e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0310 	and.w	r3, r3, #16
 800404a:	2b00      	cmp	r3, #0
 800404c:	d00a      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800404e:	4b76      	ldr	r3, [pc, #472]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004050:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004054:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800405c:	4972      	ldr	r1, [pc, #456]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800405e:	4313      	orrs	r3, r2
 8004060:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0320 	and.w	r3, r3, #32
 800406c:	2b00      	cmp	r3, #0
 800406e:	d00a      	beq.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004070:	4b6d      	ldr	r3, [pc, #436]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004076:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800407e:	496a      	ldr	r1, [pc, #424]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004080:	4313      	orrs	r3, r2
 8004082:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800408e:	2b00      	cmp	r3, #0
 8004090:	d00a      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004092:	4b65      	ldr	r3, [pc, #404]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004098:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040a0:	4961      	ldr	r1, [pc, #388]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80040a2:	4313      	orrs	r3, r2
 80040a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d00a      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80040b4:	4b5c      	ldr	r3, [pc, #368]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80040b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040c2:	4959      	ldr	r1, [pc, #356]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80040c4:	4313      	orrs	r3, r2
 80040c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d00a      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040d6:	4b54      	ldr	r3, [pc, #336]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80040d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040dc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040e4:	4950      	ldr	r1, [pc, #320]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80040e6:	4313      	orrs	r3, r2
 80040e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d00a      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80040f8:	4b4b      	ldr	r3, [pc, #300]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80040fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040fe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004106:	4948      	ldr	r1, [pc, #288]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004108:	4313      	orrs	r3, r2
 800410a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004116:	2b00      	cmp	r3, #0
 8004118:	d00a      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800411a:	4b43      	ldr	r3, [pc, #268]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800411c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004120:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004128:	493f      	ldr	r1, [pc, #252]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800412a:	4313      	orrs	r3, r2
 800412c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004138:	2b00      	cmp	r3, #0
 800413a:	d028      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800413c:	4b3a      	ldr	r3, [pc, #232]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800413e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004142:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800414a:	4937      	ldr	r1, [pc, #220]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800414c:	4313      	orrs	r3, r2
 800414e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004156:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800415a:	d106      	bne.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800415c:	4b32      	ldr	r3, [pc, #200]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	4a31      	ldr	r2, [pc, #196]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004162:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004166:	60d3      	str	r3, [r2, #12]
 8004168:	e011      	b.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800416e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004172:	d10c      	bne.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	3304      	adds	r3, #4
 8004178:	2101      	movs	r1, #1
 800417a:	4618      	mov	r0, r3
 800417c:	f000 f8c8 	bl	8004310 <RCCEx_PLLSAI1_Config>
 8004180:	4603      	mov	r3, r0
 8004182:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004184:	7cfb      	ldrb	r3, [r7, #19]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d001      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 800418a:	7cfb      	ldrb	r3, [r7, #19]
 800418c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d028      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800419a:	4b23      	ldr	r3, [pc, #140]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800419c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041a0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041a8:	491f      	ldr	r1, [pc, #124]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041b8:	d106      	bne.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041ba:	4b1b      	ldr	r3, [pc, #108]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	4a1a      	ldr	r2, [pc, #104]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80041c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041c4:	60d3      	str	r3, [r2, #12]
 80041c6:	e011      	b.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80041d0:	d10c      	bne.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	3304      	adds	r3, #4
 80041d6:	2101      	movs	r1, #1
 80041d8:	4618      	mov	r0, r3
 80041da:	f000 f899 	bl	8004310 <RCCEx_PLLSAI1_Config>
 80041de:	4603      	mov	r3, r0
 80041e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041e2:	7cfb      	ldrb	r3, [r7, #19]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d001      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 80041e8:	7cfb      	ldrb	r3, [r7, #19]
 80041ea:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d02b      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80041f8:	4b0b      	ldr	r3, [pc, #44]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80041fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004206:	4908      	ldr	r1, [pc, #32]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004208:	4313      	orrs	r3, r2
 800420a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004212:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004216:	d109      	bne.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004218:	4b03      	ldr	r3, [pc, #12]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	4a02      	ldr	r2, [pc, #8]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800421e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004222:	60d3      	str	r3, [r2, #12]
 8004224:	e014      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8004226:	bf00      	nop
 8004228:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004230:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004234:	d10c      	bne.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	3304      	adds	r3, #4
 800423a:	2101      	movs	r1, #1
 800423c:	4618      	mov	r0, r3
 800423e:	f000 f867 	bl	8004310 <RCCEx_PLLSAI1_Config>
 8004242:	4603      	mov	r3, r0
 8004244:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004246:	7cfb      	ldrb	r3, [r7, #19]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d001      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 800424c:	7cfb      	ldrb	r3, [r7, #19]
 800424e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004258:	2b00      	cmp	r3, #0
 800425a:	d02f      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800425c:	4b2b      	ldr	r3, [pc, #172]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800425e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004262:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800426a:	4928      	ldr	r1, [pc, #160]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800426c:	4313      	orrs	r3, r2
 800426e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004276:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800427a:	d10d      	bne.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	3304      	adds	r3, #4
 8004280:	2102      	movs	r1, #2
 8004282:	4618      	mov	r0, r3
 8004284:	f000 f844 	bl	8004310 <RCCEx_PLLSAI1_Config>
 8004288:	4603      	mov	r3, r0
 800428a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800428c:	7cfb      	ldrb	r3, [r7, #19]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d014      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8004292:	7cfb      	ldrb	r3, [r7, #19]
 8004294:	74bb      	strb	r3, [r7, #18]
 8004296:	e011      	b.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800429c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042a0:	d10c      	bne.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	3320      	adds	r3, #32
 80042a6:	2102      	movs	r1, #2
 80042a8:	4618      	mov	r0, r3
 80042aa:	f000 f921 	bl	80044f0 <RCCEx_PLLSAI2_Config>
 80042ae:	4603      	mov	r3, r0
 80042b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80042b2:	7cfb      	ldrb	r3, [r7, #19]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d001      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80042b8:	7cfb      	ldrb	r3, [r7, #19]
 80042ba:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d00a      	beq.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80042c8:	4b10      	ldr	r3, [pc, #64]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80042ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ce:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042d6:	490d      	ldr	r1, [pc, #52]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d00b      	beq.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80042ea:	4b08      	ldr	r3, [pc, #32]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80042ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042f0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042fa:	4904      	ldr	r1, [pc, #16]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80042fc:	4313      	orrs	r3, r2
 80042fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004302:	7cbb      	ldrb	r3, [r7, #18]
}
 8004304:	4618      	mov	r0, r3
 8004306:	3718      	adds	r7, #24
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	40021000 	.word	0x40021000

08004310 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800431a:	2300      	movs	r3, #0
 800431c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800431e:	4b73      	ldr	r3, [pc, #460]	; (80044ec <RCCEx_PLLSAI1_Config+0x1dc>)
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	f003 0303 	and.w	r3, r3, #3
 8004326:	2b00      	cmp	r3, #0
 8004328:	d018      	beq.n	800435c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800432a:	4b70      	ldr	r3, [pc, #448]	; (80044ec <RCCEx_PLLSAI1_Config+0x1dc>)
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	f003 0203 	and.w	r2, r3, #3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	429a      	cmp	r2, r3
 8004338:	d10d      	bne.n	8004356 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
       ||
 800433e:	2b00      	cmp	r3, #0
 8004340:	d009      	beq.n	8004356 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004342:	4b6a      	ldr	r3, [pc, #424]	; (80044ec <RCCEx_PLLSAI1_Config+0x1dc>)
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	091b      	lsrs	r3, r3, #4
 8004348:	f003 0307 	and.w	r3, r3, #7
 800434c:	1c5a      	adds	r2, r3, #1
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
       ||
 8004352:	429a      	cmp	r2, r3
 8004354:	d044      	beq.n	80043e0 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	73fb      	strb	r3, [r7, #15]
 800435a:	e041      	b.n	80043e0 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2b02      	cmp	r3, #2
 8004362:	d00c      	beq.n	800437e <RCCEx_PLLSAI1_Config+0x6e>
 8004364:	2b03      	cmp	r3, #3
 8004366:	d013      	beq.n	8004390 <RCCEx_PLLSAI1_Config+0x80>
 8004368:	2b01      	cmp	r3, #1
 800436a:	d120      	bne.n	80043ae <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800436c:	4b5f      	ldr	r3, [pc, #380]	; (80044ec <RCCEx_PLLSAI1_Config+0x1dc>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 0302 	and.w	r3, r3, #2
 8004374:	2b00      	cmp	r3, #0
 8004376:	d11d      	bne.n	80043b4 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800437c:	e01a      	b.n	80043b4 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800437e:	4b5b      	ldr	r3, [pc, #364]	; (80044ec <RCCEx_PLLSAI1_Config+0x1dc>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004386:	2b00      	cmp	r3, #0
 8004388:	d116      	bne.n	80043b8 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800438e:	e013      	b.n	80043b8 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004390:	4b56      	ldr	r3, [pc, #344]	; (80044ec <RCCEx_PLLSAI1_Config+0x1dc>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d10f      	bne.n	80043bc <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800439c:	4b53      	ldr	r3, [pc, #332]	; (80044ec <RCCEx_PLLSAI1_Config+0x1dc>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d109      	bne.n	80043bc <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80043ac:	e006      	b.n	80043bc <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	73fb      	strb	r3, [r7, #15]
      break;
 80043b2:	e004      	b.n	80043be <RCCEx_PLLSAI1_Config+0xae>
      break;
 80043b4:	bf00      	nop
 80043b6:	e002      	b.n	80043be <RCCEx_PLLSAI1_Config+0xae>
      break;
 80043b8:	bf00      	nop
 80043ba:	e000      	b.n	80043be <RCCEx_PLLSAI1_Config+0xae>
      break;
 80043bc:	bf00      	nop
    }

    if(status == HAL_OK)
 80043be:	7bfb      	ldrb	r3, [r7, #15]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d10d      	bne.n	80043e0 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80043c4:	4b49      	ldr	r3, [pc, #292]	; (80044ec <RCCEx_PLLSAI1_Config+0x1dc>)
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6819      	ldr	r1, [r3, #0]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	3b01      	subs	r3, #1
 80043d6:	011b      	lsls	r3, r3, #4
 80043d8:	430b      	orrs	r3, r1
 80043da:	4944      	ldr	r1, [pc, #272]	; (80044ec <RCCEx_PLLSAI1_Config+0x1dc>)
 80043dc:	4313      	orrs	r3, r2
 80043de:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80043e0:	7bfb      	ldrb	r3, [r7, #15]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d17d      	bne.n	80044e2 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80043e6:	4b41      	ldr	r3, [pc, #260]	; (80044ec <RCCEx_PLLSAI1_Config+0x1dc>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a40      	ldr	r2, [pc, #256]	; (80044ec <RCCEx_PLLSAI1_Config+0x1dc>)
 80043ec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80043f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043f2:	f7fc fda7 	bl	8000f44 <HAL_GetTick>
 80043f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80043f8:	e009      	b.n	800440e <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80043fa:	f7fc fda3 	bl	8000f44 <HAL_GetTick>
 80043fe:	4602      	mov	r2, r0
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	2b02      	cmp	r3, #2
 8004406:	d902      	bls.n	800440e <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004408:	2303      	movs	r3, #3
 800440a:	73fb      	strb	r3, [r7, #15]
        break;
 800440c:	e005      	b.n	800441a <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800440e:	4b37      	ldr	r3, [pc, #220]	; (80044ec <RCCEx_PLLSAI1_Config+0x1dc>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d1ef      	bne.n	80043fa <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800441a:	7bfb      	ldrb	r3, [r7, #15]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d160      	bne.n	80044e2 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d111      	bne.n	800444a <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004426:	4b31      	ldr	r3, [pc, #196]	; (80044ec <RCCEx_PLLSAI1_Config+0x1dc>)
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800442e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	6892      	ldr	r2, [r2, #8]
 8004436:	0211      	lsls	r1, r2, #8
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	68d2      	ldr	r2, [r2, #12]
 800443c:	0912      	lsrs	r2, r2, #4
 800443e:	0452      	lsls	r2, r2, #17
 8004440:	430a      	orrs	r2, r1
 8004442:	492a      	ldr	r1, [pc, #168]	; (80044ec <RCCEx_PLLSAI1_Config+0x1dc>)
 8004444:	4313      	orrs	r3, r2
 8004446:	610b      	str	r3, [r1, #16]
 8004448:	e027      	b.n	800449a <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	2b01      	cmp	r3, #1
 800444e:	d112      	bne.n	8004476 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004450:	4b26      	ldr	r3, [pc, #152]	; (80044ec <RCCEx_PLLSAI1_Config+0x1dc>)
 8004452:	691b      	ldr	r3, [r3, #16]
 8004454:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004458:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	6892      	ldr	r2, [r2, #8]
 8004460:	0211      	lsls	r1, r2, #8
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	6912      	ldr	r2, [r2, #16]
 8004466:	0852      	lsrs	r2, r2, #1
 8004468:	3a01      	subs	r2, #1
 800446a:	0552      	lsls	r2, r2, #21
 800446c:	430a      	orrs	r2, r1
 800446e:	491f      	ldr	r1, [pc, #124]	; (80044ec <RCCEx_PLLSAI1_Config+0x1dc>)
 8004470:	4313      	orrs	r3, r2
 8004472:	610b      	str	r3, [r1, #16]
 8004474:	e011      	b.n	800449a <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004476:	4b1d      	ldr	r3, [pc, #116]	; (80044ec <RCCEx_PLLSAI1_Config+0x1dc>)
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800447e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	6892      	ldr	r2, [r2, #8]
 8004486:	0211      	lsls	r1, r2, #8
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	6952      	ldr	r2, [r2, #20]
 800448c:	0852      	lsrs	r2, r2, #1
 800448e:	3a01      	subs	r2, #1
 8004490:	0652      	lsls	r2, r2, #25
 8004492:	430a      	orrs	r2, r1
 8004494:	4915      	ldr	r1, [pc, #84]	; (80044ec <RCCEx_PLLSAI1_Config+0x1dc>)
 8004496:	4313      	orrs	r3, r2
 8004498:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800449a:	4b14      	ldr	r3, [pc, #80]	; (80044ec <RCCEx_PLLSAI1_Config+0x1dc>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a13      	ldr	r2, [pc, #76]	; (80044ec <RCCEx_PLLSAI1_Config+0x1dc>)
 80044a0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80044a4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044a6:	f7fc fd4d 	bl	8000f44 <HAL_GetTick>
 80044aa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80044ac:	e009      	b.n	80044c2 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80044ae:	f7fc fd49 	bl	8000f44 <HAL_GetTick>
 80044b2:	4602      	mov	r2, r0
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	2b02      	cmp	r3, #2
 80044ba:	d902      	bls.n	80044c2 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80044bc:	2303      	movs	r3, #3
 80044be:	73fb      	strb	r3, [r7, #15]
          break;
 80044c0:	e005      	b.n	80044ce <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80044c2:	4b0a      	ldr	r3, [pc, #40]	; (80044ec <RCCEx_PLLSAI1_Config+0x1dc>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d0ef      	beq.n	80044ae <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80044ce:	7bfb      	ldrb	r3, [r7, #15]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d106      	bne.n	80044e2 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80044d4:	4b05      	ldr	r3, [pc, #20]	; (80044ec <RCCEx_PLLSAI1_Config+0x1dc>)
 80044d6:	691a      	ldr	r2, [r3, #16]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	699b      	ldr	r3, [r3, #24]
 80044dc:	4903      	ldr	r1, [pc, #12]	; (80044ec <RCCEx_PLLSAI1_Config+0x1dc>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80044e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3710      	adds	r7, #16
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}
 80044ec:	40021000 	.word	0x40021000

080044f0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80044fa:	2300      	movs	r3, #0
 80044fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80044fe:	4b68      	ldr	r3, [pc, #416]	; (80046a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	f003 0303 	and.w	r3, r3, #3
 8004506:	2b00      	cmp	r3, #0
 8004508:	d018      	beq.n	800453c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800450a:	4b65      	ldr	r3, [pc, #404]	; (80046a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	f003 0203 	and.w	r2, r3, #3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	429a      	cmp	r2, r3
 8004518:	d10d      	bne.n	8004536 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
       ||
 800451e:	2b00      	cmp	r3, #0
 8004520:	d009      	beq.n	8004536 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004522:	4b5f      	ldr	r3, [pc, #380]	; (80046a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	091b      	lsrs	r3, r3, #4
 8004528:	f003 0307 	and.w	r3, r3, #7
 800452c:	1c5a      	adds	r2, r3, #1
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	685b      	ldr	r3, [r3, #4]
       ||
 8004532:	429a      	cmp	r2, r3
 8004534:	d044      	beq.n	80045c0 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	73fb      	strb	r3, [r7, #15]
 800453a:	e041      	b.n	80045c0 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	2b02      	cmp	r3, #2
 8004542:	d00c      	beq.n	800455e <RCCEx_PLLSAI2_Config+0x6e>
 8004544:	2b03      	cmp	r3, #3
 8004546:	d013      	beq.n	8004570 <RCCEx_PLLSAI2_Config+0x80>
 8004548:	2b01      	cmp	r3, #1
 800454a:	d120      	bne.n	800458e <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800454c:	4b54      	ldr	r3, [pc, #336]	; (80046a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0302 	and.w	r3, r3, #2
 8004554:	2b00      	cmp	r3, #0
 8004556:	d11d      	bne.n	8004594 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800455c:	e01a      	b.n	8004594 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800455e:	4b50      	ldr	r3, [pc, #320]	; (80046a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004566:	2b00      	cmp	r3, #0
 8004568:	d116      	bne.n	8004598 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800456e:	e013      	b.n	8004598 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004570:	4b4b      	ldr	r3, [pc, #300]	; (80046a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004578:	2b00      	cmp	r3, #0
 800457a:	d10f      	bne.n	800459c <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800457c:	4b48      	ldr	r3, [pc, #288]	; (80046a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004584:	2b00      	cmp	r3, #0
 8004586:	d109      	bne.n	800459c <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800458c:	e006      	b.n	800459c <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	73fb      	strb	r3, [r7, #15]
      break;
 8004592:	e004      	b.n	800459e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004594:	bf00      	nop
 8004596:	e002      	b.n	800459e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004598:	bf00      	nop
 800459a:	e000      	b.n	800459e <RCCEx_PLLSAI2_Config+0xae>
      break;
 800459c:	bf00      	nop
    }

    if(status == HAL_OK)
 800459e:	7bfb      	ldrb	r3, [r7, #15]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d10d      	bne.n	80045c0 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80045a4:	4b3e      	ldr	r3, [pc, #248]	; (80046a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6819      	ldr	r1, [r3, #0]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	3b01      	subs	r3, #1
 80045b6:	011b      	lsls	r3, r3, #4
 80045b8:	430b      	orrs	r3, r1
 80045ba:	4939      	ldr	r1, [pc, #228]	; (80046a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80045bc:	4313      	orrs	r3, r2
 80045be:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80045c0:	7bfb      	ldrb	r3, [r7, #15]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d167      	bne.n	8004696 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80045c6:	4b36      	ldr	r3, [pc, #216]	; (80046a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a35      	ldr	r2, [pc, #212]	; (80046a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80045cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045d2:	f7fc fcb7 	bl	8000f44 <HAL_GetTick>
 80045d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80045d8:	e009      	b.n	80045ee <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80045da:	f7fc fcb3 	bl	8000f44 <HAL_GetTick>
 80045de:	4602      	mov	r2, r0
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	2b02      	cmp	r3, #2
 80045e6:	d902      	bls.n	80045ee <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80045e8:	2303      	movs	r3, #3
 80045ea:	73fb      	strb	r3, [r7, #15]
        break;
 80045ec:	e005      	b.n	80045fa <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80045ee:	4b2c      	ldr	r3, [pc, #176]	; (80046a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d1ef      	bne.n	80045da <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80045fa:	7bfb      	ldrb	r3, [r7, #15]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d14a      	bne.n	8004696 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d111      	bne.n	800462a <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004606:	4b26      	ldr	r3, [pc, #152]	; (80046a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800460e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	6892      	ldr	r2, [r2, #8]
 8004616:	0211      	lsls	r1, r2, #8
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	68d2      	ldr	r2, [r2, #12]
 800461c:	0912      	lsrs	r2, r2, #4
 800461e:	0452      	lsls	r2, r2, #17
 8004620:	430a      	orrs	r2, r1
 8004622:	491f      	ldr	r1, [pc, #124]	; (80046a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004624:	4313      	orrs	r3, r2
 8004626:	614b      	str	r3, [r1, #20]
 8004628:	e011      	b.n	800464e <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800462a:	4b1d      	ldr	r3, [pc, #116]	; (80046a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800462c:	695b      	ldr	r3, [r3, #20]
 800462e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004632:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	6892      	ldr	r2, [r2, #8]
 800463a:	0211      	lsls	r1, r2, #8
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	6912      	ldr	r2, [r2, #16]
 8004640:	0852      	lsrs	r2, r2, #1
 8004642:	3a01      	subs	r2, #1
 8004644:	0652      	lsls	r2, r2, #25
 8004646:	430a      	orrs	r2, r1
 8004648:	4915      	ldr	r1, [pc, #84]	; (80046a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800464a:	4313      	orrs	r3, r2
 800464c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800464e:	4b14      	ldr	r3, [pc, #80]	; (80046a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a13      	ldr	r2, [pc, #76]	; (80046a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004654:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004658:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800465a:	f7fc fc73 	bl	8000f44 <HAL_GetTick>
 800465e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004660:	e009      	b.n	8004676 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004662:	f7fc fc6f 	bl	8000f44 <HAL_GetTick>
 8004666:	4602      	mov	r2, r0
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	2b02      	cmp	r3, #2
 800466e:	d902      	bls.n	8004676 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8004670:	2303      	movs	r3, #3
 8004672:	73fb      	strb	r3, [r7, #15]
          break;
 8004674:	e005      	b.n	8004682 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004676:	4b0a      	ldr	r3, [pc, #40]	; (80046a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d0ef      	beq.n	8004662 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8004682:	7bfb      	ldrb	r3, [r7, #15]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d106      	bne.n	8004696 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004688:	4b05      	ldr	r3, [pc, #20]	; (80046a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800468a:	695a      	ldr	r2, [r3, #20]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	695b      	ldr	r3, [r3, #20]
 8004690:	4903      	ldr	r1, [pc, #12]	; (80046a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004692:	4313      	orrs	r3, r2
 8004694:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004696:	7bfb      	ldrb	r3, [r7, #15]
}
 8004698:	4618      	mov	r0, r3
 800469a:	3710      	adds	r7, #16
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	40021000 	.word	0x40021000

080046a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b082      	sub	sp, #8
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d101      	bne.n	80046b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e040      	b.n	8004738 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d106      	bne.n	80046cc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f7fc fb60 	bl	8000d8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2224      	movs	r2, #36	; 0x24
 80046d0:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f022 0201 	bic.w	r2, r2, #1
 80046e0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f000 f8c0 	bl	8004868 <UART_SetConfig>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d101      	bne.n	80046f2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e022      	b.n	8004738 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d002      	beq.n	8004700 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 fb3e 	bl	8004d7c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	685a      	ldr	r2, [r3, #4]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800470e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	689a      	ldr	r2, [r3, #8]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800471e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f042 0201 	orr.w	r2, r2, #1
 800472e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f000 fbc5 	bl	8004ec0 <UART_CheckIdleState>
 8004736:	4603      	mov	r3, r0
}
 8004738:	4618      	mov	r0, r3
 800473a:	3708      	adds	r7, #8
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}

08004740 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b08a      	sub	sp, #40	; 0x28
 8004744:	af02      	add	r7, sp, #8
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	60b9      	str	r1, [r7, #8]
 800474a:	603b      	str	r3, [r7, #0]
 800474c:	4613      	mov	r3, r2
 800474e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004754:	2b20      	cmp	r3, #32
 8004756:	f040 8081 	bne.w	800485c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d002      	beq.n	8004766 <HAL_UART_Transmit+0x26>
 8004760:	88fb      	ldrh	r3, [r7, #6]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d101      	bne.n	800476a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e079      	b.n	800485e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004770:	2b01      	cmp	r3, #1
 8004772:	d101      	bne.n	8004778 <HAL_UART_Transmit+0x38>
 8004774:	2302      	movs	r3, #2
 8004776:	e072      	b.n	800485e <HAL_UART_Transmit+0x11e>
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2200      	movs	r2, #0
 8004784:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2221      	movs	r2, #33	; 0x21
 800478a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800478c:	f7fc fbda 	bl	8000f44 <HAL_GetTick>
 8004790:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	88fa      	ldrh	r2, [r7, #6]
 8004796:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	88fa      	ldrh	r2, [r7, #6]
 800479e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047aa:	d108      	bne.n	80047be <HAL_UART_Transmit+0x7e>
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	691b      	ldr	r3, [r3, #16]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d104      	bne.n	80047be <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80047b4:	2300      	movs	r3, #0
 80047b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	61bb      	str	r3, [r7, #24]
 80047bc:	e003      	b.n	80047c6 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80047c2:	2300      	movs	r3, #0
 80047c4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80047ce:	e02d      	b.n	800482c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	9300      	str	r3, [sp, #0]
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	2200      	movs	r2, #0
 80047d8:	2180      	movs	r1, #128	; 0x80
 80047da:	68f8      	ldr	r0, [r7, #12]
 80047dc:	f000 fbb5 	bl	8004f4a <UART_WaitOnFlagUntilTimeout>
 80047e0:	4603      	mov	r3, r0
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d001      	beq.n	80047ea <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e039      	b.n	800485e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d10b      	bne.n	8004808 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80047f0:	69bb      	ldr	r3, [r7, #24]
 80047f2:	881a      	ldrh	r2, [r3, #0]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047fc:	b292      	uxth	r2, r2
 80047fe:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004800:	69bb      	ldr	r3, [r7, #24]
 8004802:	3302      	adds	r3, #2
 8004804:	61bb      	str	r3, [r7, #24]
 8004806:	e008      	b.n	800481a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	781a      	ldrb	r2, [r3, #0]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	b292      	uxth	r2, r2
 8004812:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	3301      	adds	r3, #1
 8004818:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004820:	b29b      	uxth	r3, r3
 8004822:	3b01      	subs	r3, #1
 8004824:	b29a      	uxth	r2, r3
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004832:	b29b      	uxth	r3, r3
 8004834:	2b00      	cmp	r3, #0
 8004836:	d1cb      	bne.n	80047d0 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	9300      	str	r3, [sp, #0]
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	2200      	movs	r2, #0
 8004840:	2140      	movs	r1, #64	; 0x40
 8004842:	68f8      	ldr	r0, [r7, #12]
 8004844:	f000 fb81 	bl	8004f4a <UART_WaitOnFlagUntilTimeout>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d001      	beq.n	8004852 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e005      	b.n	800485e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2220      	movs	r2, #32
 8004856:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8004858:	2300      	movs	r3, #0
 800485a:	e000      	b.n	800485e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800485c:	2302      	movs	r3, #2
  }
}
 800485e:	4618      	mov	r0, r3
 8004860:	3720      	adds	r7, #32
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
	...

08004868 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004868:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800486c:	b088      	sub	sp, #32
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004872:	2300      	movs	r3, #0
 8004874:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	689a      	ldr	r2, [r3, #8]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	431a      	orrs	r2, r3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	695b      	ldr	r3, [r3, #20]
 8004884:	431a      	orrs	r2, r3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	69db      	ldr	r3, [r3, #28]
 800488a:	4313      	orrs	r3, r2
 800488c:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	4bac      	ldr	r3, [pc, #688]	; (8004b48 <UART_SetConfig+0x2e0>)
 8004896:	4013      	ands	r3, r2
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	6812      	ldr	r2, [r2, #0]
 800489c:	69f9      	ldr	r1, [r7, #28]
 800489e:	430b      	orrs	r3, r1
 80048a0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	68da      	ldr	r2, [r3, #12]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	430a      	orrs	r2, r1
 80048b6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	699b      	ldr	r3, [r3, #24]
 80048bc:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4aa2      	ldr	r2, [pc, #648]	; (8004b4c <UART_SetConfig+0x2e4>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d004      	beq.n	80048d2 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6a1b      	ldr	r3, [r3, #32]
 80048cc:	69fa      	ldr	r2, [r7, #28]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	69fa      	ldr	r2, [r7, #28]
 80048e2:	430a      	orrs	r2, r1
 80048e4:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a99      	ldr	r2, [pc, #612]	; (8004b50 <UART_SetConfig+0x2e8>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d121      	bne.n	8004934 <UART_SetConfig+0xcc>
 80048f0:	4b98      	ldr	r3, [pc, #608]	; (8004b54 <UART_SetConfig+0x2ec>)
 80048f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048f6:	f003 0303 	and.w	r3, r3, #3
 80048fa:	2b03      	cmp	r3, #3
 80048fc:	d816      	bhi.n	800492c <UART_SetConfig+0xc4>
 80048fe:	a201      	add	r2, pc, #4	; (adr r2, 8004904 <UART_SetConfig+0x9c>)
 8004900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004904:	08004915 	.word	0x08004915
 8004908:	08004921 	.word	0x08004921
 800490c:	0800491b 	.word	0x0800491b
 8004910:	08004927 	.word	0x08004927
 8004914:	2301      	movs	r3, #1
 8004916:	76fb      	strb	r3, [r7, #27]
 8004918:	e0e8      	b.n	8004aec <UART_SetConfig+0x284>
 800491a:	2302      	movs	r3, #2
 800491c:	76fb      	strb	r3, [r7, #27]
 800491e:	e0e5      	b.n	8004aec <UART_SetConfig+0x284>
 8004920:	2304      	movs	r3, #4
 8004922:	76fb      	strb	r3, [r7, #27]
 8004924:	e0e2      	b.n	8004aec <UART_SetConfig+0x284>
 8004926:	2308      	movs	r3, #8
 8004928:	76fb      	strb	r3, [r7, #27]
 800492a:	e0df      	b.n	8004aec <UART_SetConfig+0x284>
 800492c:	2310      	movs	r3, #16
 800492e:	76fb      	strb	r3, [r7, #27]
 8004930:	bf00      	nop
 8004932:	e0db      	b.n	8004aec <UART_SetConfig+0x284>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a87      	ldr	r2, [pc, #540]	; (8004b58 <UART_SetConfig+0x2f0>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d134      	bne.n	80049a8 <UART_SetConfig+0x140>
 800493e:	4b85      	ldr	r3, [pc, #532]	; (8004b54 <UART_SetConfig+0x2ec>)
 8004940:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004944:	f003 030c 	and.w	r3, r3, #12
 8004948:	2b0c      	cmp	r3, #12
 800494a:	d829      	bhi.n	80049a0 <UART_SetConfig+0x138>
 800494c:	a201      	add	r2, pc, #4	; (adr r2, 8004954 <UART_SetConfig+0xec>)
 800494e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004952:	bf00      	nop
 8004954:	08004989 	.word	0x08004989
 8004958:	080049a1 	.word	0x080049a1
 800495c:	080049a1 	.word	0x080049a1
 8004960:	080049a1 	.word	0x080049a1
 8004964:	08004995 	.word	0x08004995
 8004968:	080049a1 	.word	0x080049a1
 800496c:	080049a1 	.word	0x080049a1
 8004970:	080049a1 	.word	0x080049a1
 8004974:	0800498f 	.word	0x0800498f
 8004978:	080049a1 	.word	0x080049a1
 800497c:	080049a1 	.word	0x080049a1
 8004980:	080049a1 	.word	0x080049a1
 8004984:	0800499b 	.word	0x0800499b
 8004988:	2300      	movs	r3, #0
 800498a:	76fb      	strb	r3, [r7, #27]
 800498c:	e0ae      	b.n	8004aec <UART_SetConfig+0x284>
 800498e:	2302      	movs	r3, #2
 8004990:	76fb      	strb	r3, [r7, #27]
 8004992:	e0ab      	b.n	8004aec <UART_SetConfig+0x284>
 8004994:	2304      	movs	r3, #4
 8004996:	76fb      	strb	r3, [r7, #27]
 8004998:	e0a8      	b.n	8004aec <UART_SetConfig+0x284>
 800499a:	2308      	movs	r3, #8
 800499c:	76fb      	strb	r3, [r7, #27]
 800499e:	e0a5      	b.n	8004aec <UART_SetConfig+0x284>
 80049a0:	2310      	movs	r3, #16
 80049a2:	76fb      	strb	r3, [r7, #27]
 80049a4:	bf00      	nop
 80049a6:	e0a1      	b.n	8004aec <UART_SetConfig+0x284>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a6b      	ldr	r2, [pc, #428]	; (8004b5c <UART_SetConfig+0x2f4>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d120      	bne.n	80049f4 <UART_SetConfig+0x18c>
 80049b2:	4b68      	ldr	r3, [pc, #416]	; (8004b54 <UART_SetConfig+0x2ec>)
 80049b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049b8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80049bc:	2b10      	cmp	r3, #16
 80049be:	d00f      	beq.n	80049e0 <UART_SetConfig+0x178>
 80049c0:	2b10      	cmp	r3, #16
 80049c2:	d802      	bhi.n	80049ca <UART_SetConfig+0x162>
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d005      	beq.n	80049d4 <UART_SetConfig+0x16c>
 80049c8:	e010      	b.n	80049ec <UART_SetConfig+0x184>
 80049ca:	2b20      	cmp	r3, #32
 80049cc:	d005      	beq.n	80049da <UART_SetConfig+0x172>
 80049ce:	2b30      	cmp	r3, #48	; 0x30
 80049d0:	d009      	beq.n	80049e6 <UART_SetConfig+0x17e>
 80049d2:	e00b      	b.n	80049ec <UART_SetConfig+0x184>
 80049d4:	2300      	movs	r3, #0
 80049d6:	76fb      	strb	r3, [r7, #27]
 80049d8:	e088      	b.n	8004aec <UART_SetConfig+0x284>
 80049da:	2302      	movs	r3, #2
 80049dc:	76fb      	strb	r3, [r7, #27]
 80049de:	e085      	b.n	8004aec <UART_SetConfig+0x284>
 80049e0:	2304      	movs	r3, #4
 80049e2:	76fb      	strb	r3, [r7, #27]
 80049e4:	e082      	b.n	8004aec <UART_SetConfig+0x284>
 80049e6:	2308      	movs	r3, #8
 80049e8:	76fb      	strb	r3, [r7, #27]
 80049ea:	e07f      	b.n	8004aec <UART_SetConfig+0x284>
 80049ec:	2310      	movs	r3, #16
 80049ee:	76fb      	strb	r3, [r7, #27]
 80049f0:	bf00      	nop
 80049f2:	e07b      	b.n	8004aec <UART_SetConfig+0x284>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a59      	ldr	r2, [pc, #356]	; (8004b60 <UART_SetConfig+0x2f8>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d120      	bne.n	8004a40 <UART_SetConfig+0x1d8>
 80049fe:	4b55      	ldr	r3, [pc, #340]	; (8004b54 <UART_SetConfig+0x2ec>)
 8004a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a04:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004a08:	2b40      	cmp	r3, #64	; 0x40
 8004a0a:	d00f      	beq.n	8004a2c <UART_SetConfig+0x1c4>
 8004a0c:	2b40      	cmp	r3, #64	; 0x40
 8004a0e:	d802      	bhi.n	8004a16 <UART_SetConfig+0x1ae>
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d005      	beq.n	8004a20 <UART_SetConfig+0x1b8>
 8004a14:	e010      	b.n	8004a38 <UART_SetConfig+0x1d0>
 8004a16:	2b80      	cmp	r3, #128	; 0x80
 8004a18:	d005      	beq.n	8004a26 <UART_SetConfig+0x1be>
 8004a1a:	2bc0      	cmp	r3, #192	; 0xc0
 8004a1c:	d009      	beq.n	8004a32 <UART_SetConfig+0x1ca>
 8004a1e:	e00b      	b.n	8004a38 <UART_SetConfig+0x1d0>
 8004a20:	2300      	movs	r3, #0
 8004a22:	76fb      	strb	r3, [r7, #27]
 8004a24:	e062      	b.n	8004aec <UART_SetConfig+0x284>
 8004a26:	2302      	movs	r3, #2
 8004a28:	76fb      	strb	r3, [r7, #27]
 8004a2a:	e05f      	b.n	8004aec <UART_SetConfig+0x284>
 8004a2c:	2304      	movs	r3, #4
 8004a2e:	76fb      	strb	r3, [r7, #27]
 8004a30:	e05c      	b.n	8004aec <UART_SetConfig+0x284>
 8004a32:	2308      	movs	r3, #8
 8004a34:	76fb      	strb	r3, [r7, #27]
 8004a36:	e059      	b.n	8004aec <UART_SetConfig+0x284>
 8004a38:	2310      	movs	r3, #16
 8004a3a:	76fb      	strb	r3, [r7, #27]
 8004a3c:	bf00      	nop
 8004a3e:	e055      	b.n	8004aec <UART_SetConfig+0x284>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a47      	ldr	r2, [pc, #284]	; (8004b64 <UART_SetConfig+0x2fc>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d124      	bne.n	8004a94 <UART_SetConfig+0x22c>
 8004a4a:	4b42      	ldr	r3, [pc, #264]	; (8004b54 <UART_SetConfig+0x2ec>)
 8004a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a58:	d012      	beq.n	8004a80 <UART_SetConfig+0x218>
 8004a5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a5e:	d802      	bhi.n	8004a66 <UART_SetConfig+0x1fe>
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d007      	beq.n	8004a74 <UART_SetConfig+0x20c>
 8004a64:	e012      	b.n	8004a8c <UART_SetConfig+0x224>
 8004a66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a6a:	d006      	beq.n	8004a7a <UART_SetConfig+0x212>
 8004a6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a70:	d009      	beq.n	8004a86 <UART_SetConfig+0x21e>
 8004a72:	e00b      	b.n	8004a8c <UART_SetConfig+0x224>
 8004a74:	2300      	movs	r3, #0
 8004a76:	76fb      	strb	r3, [r7, #27]
 8004a78:	e038      	b.n	8004aec <UART_SetConfig+0x284>
 8004a7a:	2302      	movs	r3, #2
 8004a7c:	76fb      	strb	r3, [r7, #27]
 8004a7e:	e035      	b.n	8004aec <UART_SetConfig+0x284>
 8004a80:	2304      	movs	r3, #4
 8004a82:	76fb      	strb	r3, [r7, #27]
 8004a84:	e032      	b.n	8004aec <UART_SetConfig+0x284>
 8004a86:	2308      	movs	r3, #8
 8004a88:	76fb      	strb	r3, [r7, #27]
 8004a8a:	e02f      	b.n	8004aec <UART_SetConfig+0x284>
 8004a8c:	2310      	movs	r3, #16
 8004a8e:	76fb      	strb	r3, [r7, #27]
 8004a90:	bf00      	nop
 8004a92:	e02b      	b.n	8004aec <UART_SetConfig+0x284>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a2c      	ldr	r2, [pc, #176]	; (8004b4c <UART_SetConfig+0x2e4>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d124      	bne.n	8004ae8 <UART_SetConfig+0x280>
 8004a9e:	4b2d      	ldr	r3, [pc, #180]	; (8004b54 <UART_SetConfig+0x2ec>)
 8004aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aa4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004aa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004aac:	d012      	beq.n	8004ad4 <UART_SetConfig+0x26c>
 8004aae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ab2:	d802      	bhi.n	8004aba <UART_SetConfig+0x252>
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d007      	beq.n	8004ac8 <UART_SetConfig+0x260>
 8004ab8:	e012      	b.n	8004ae0 <UART_SetConfig+0x278>
 8004aba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004abe:	d006      	beq.n	8004ace <UART_SetConfig+0x266>
 8004ac0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ac4:	d009      	beq.n	8004ada <UART_SetConfig+0x272>
 8004ac6:	e00b      	b.n	8004ae0 <UART_SetConfig+0x278>
 8004ac8:	2300      	movs	r3, #0
 8004aca:	76fb      	strb	r3, [r7, #27]
 8004acc:	e00e      	b.n	8004aec <UART_SetConfig+0x284>
 8004ace:	2302      	movs	r3, #2
 8004ad0:	76fb      	strb	r3, [r7, #27]
 8004ad2:	e00b      	b.n	8004aec <UART_SetConfig+0x284>
 8004ad4:	2304      	movs	r3, #4
 8004ad6:	76fb      	strb	r3, [r7, #27]
 8004ad8:	e008      	b.n	8004aec <UART_SetConfig+0x284>
 8004ada:	2308      	movs	r3, #8
 8004adc:	76fb      	strb	r3, [r7, #27]
 8004ade:	e005      	b.n	8004aec <UART_SetConfig+0x284>
 8004ae0:	2310      	movs	r3, #16
 8004ae2:	76fb      	strb	r3, [r7, #27]
 8004ae4:	bf00      	nop
 8004ae6:	e001      	b.n	8004aec <UART_SetConfig+0x284>
 8004ae8:	2310      	movs	r3, #16
 8004aea:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a16      	ldr	r2, [pc, #88]	; (8004b4c <UART_SetConfig+0x2e4>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	f040 8087 	bne.w	8004c06 <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004af8:	7efb      	ldrb	r3, [r7, #27]
 8004afa:	2b08      	cmp	r3, #8
 8004afc:	d836      	bhi.n	8004b6c <UART_SetConfig+0x304>
 8004afe:	a201      	add	r2, pc, #4	; (adr r2, 8004b04 <UART_SetConfig+0x29c>)
 8004b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b04:	08004b29 	.word	0x08004b29
 8004b08:	08004b6d 	.word	0x08004b6d
 8004b0c:	08004b31 	.word	0x08004b31
 8004b10:	08004b6d 	.word	0x08004b6d
 8004b14:	08004b37 	.word	0x08004b37
 8004b18:	08004b6d 	.word	0x08004b6d
 8004b1c:	08004b6d 	.word	0x08004b6d
 8004b20:	08004b6d 	.word	0x08004b6d
 8004b24:	08004b3f 	.word	0x08004b3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b28:	f7ff f880 	bl	8003c2c <HAL_RCC_GetPCLK1Freq>
 8004b2c:	6178      	str	r0, [r7, #20]
        break;
 8004b2e:	e022      	b.n	8004b76 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b30:	4b0d      	ldr	r3, [pc, #52]	; (8004b68 <UART_SetConfig+0x300>)
 8004b32:	617b      	str	r3, [r7, #20]
        break;
 8004b34:	e01f      	b.n	8004b76 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b36:	f7fe ffe3 	bl	8003b00 <HAL_RCC_GetSysClockFreq>
 8004b3a:	6178      	str	r0, [r7, #20]
        break;
 8004b3c:	e01b      	b.n	8004b76 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b42:	617b      	str	r3, [r7, #20]
        break;
 8004b44:	e017      	b.n	8004b76 <UART_SetConfig+0x30e>
 8004b46:	bf00      	nop
 8004b48:	efff69f3 	.word	0xefff69f3
 8004b4c:	40008000 	.word	0x40008000
 8004b50:	40013800 	.word	0x40013800
 8004b54:	40021000 	.word	0x40021000
 8004b58:	40004400 	.word	0x40004400
 8004b5c:	40004800 	.word	0x40004800
 8004b60:	40004c00 	.word	0x40004c00
 8004b64:	40005000 	.word	0x40005000
 8004b68:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	76bb      	strb	r3, [r7, #26]
        break;
 8004b74:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	f000 80f1 	beq.w	8004d60 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	685a      	ldr	r2, [r3, #4]
 8004b82:	4613      	mov	r3, r2
 8004b84:	005b      	lsls	r3, r3, #1
 8004b86:	4413      	add	r3, r2
 8004b88:	697a      	ldr	r2, [r7, #20]
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d305      	bcc.n	8004b9a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004b94:	697a      	ldr	r2, [r7, #20]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d902      	bls.n	8004ba0 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	76bb      	strb	r3, [r7, #26]
 8004b9e:	e0df      	b.n	8004d60 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	4619      	mov	r1, r3
 8004ba4:	f04f 0200 	mov.w	r2, #0
 8004ba8:	f04f 0300 	mov.w	r3, #0
 8004bac:	f04f 0400 	mov.w	r4, #0
 8004bb0:	0214      	lsls	r4, r2, #8
 8004bb2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004bb6:	020b      	lsls	r3, r1, #8
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	6852      	ldr	r2, [r2, #4]
 8004bbc:	0852      	lsrs	r2, r2, #1
 8004bbe:	4611      	mov	r1, r2
 8004bc0:	f04f 0200 	mov.w	r2, #0
 8004bc4:	eb13 0b01 	adds.w	fp, r3, r1
 8004bc8:	eb44 0c02 	adc.w	ip, r4, r2
 8004bcc:	4658      	mov	r0, fp
 8004bce:	4661      	mov	r1, ip
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	f04f 0400 	mov.w	r4, #0
 8004bd8:	461a      	mov	r2, r3
 8004bda:	4623      	mov	r3, r4
 8004bdc:	f7fb fb48 	bl	8000270 <__aeabi_uldivmod>
 8004be0:	4603      	mov	r3, r0
 8004be2:	460c      	mov	r4, r1
 8004be4:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bec:	d308      	bcc.n	8004c00 <UART_SetConfig+0x398>
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bf4:	d204      	bcs.n	8004c00 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	693a      	ldr	r2, [r7, #16]
 8004bfc:	60da      	str	r2, [r3, #12]
 8004bfe:	e0af      	b.n	8004d60 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	76bb      	strb	r3, [r7, #26]
 8004c04:	e0ac      	b.n	8004d60 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	69db      	ldr	r3, [r3, #28]
 8004c0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c0e:	d15b      	bne.n	8004cc8 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8004c10:	7efb      	ldrb	r3, [r7, #27]
 8004c12:	2b08      	cmp	r3, #8
 8004c14:	d827      	bhi.n	8004c66 <UART_SetConfig+0x3fe>
 8004c16:	a201      	add	r2, pc, #4	; (adr r2, 8004c1c <UART_SetConfig+0x3b4>)
 8004c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c1c:	08004c41 	.word	0x08004c41
 8004c20:	08004c49 	.word	0x08004c49
 8004c24:	08004c51 	.word	0x08004c51
 8004c28:	08004c67 	.word	0x08004c67
 8004c2c:	08004c57 	.word	0x08004c57
 8004c30:	08004c67 	.word	0x08004c67
 8004c34:	08004c67 	.word	0x08004c67
 8004c38:	08004c67 	.word	0x08004c67
 8004c3c:	08004c5f 	.word	0x08004c5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c40:	f7fe fff4 	bl	8003c2c <HAL_RCC_GetPCLK1Freq>
 8004c44:	6178      	str	r0, [r7, #20]
        break;
 8004c46:	e013      	b.n	8004c70 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c48:	f7ff f806 	bl	8003c58 <HAL_RCC_GetPCLK2Freq>
 8004c4c:	6178      	str	r0, [r7, #20]
        break;
 8004c4e:	e00f      	b.n	8004c70 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c50:	4b49      	ldr	r3, [pc, #292]	; (8004d78 <UART_SetConfig+0x510>)
 8004c52:	617b      	str	r3, [r7, #20]
        break;
 8004c54:	e00c      	b.n	8004c70 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c56:	f7fe ff53 	bl	8003b00 <HAL_RCC_GetSysClockFreq>
 8004c5a:	6178      	str	r0, [r7, #20]
        break;
 8004c5c:	e008      	b.n	8004c70 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c62:	617b      	str	r3, [r7, #20]
        break;
 8004c64:	e004      	b.n	8004c70 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004c66:	2300      	movs	r3, #0
 8004c68:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	76bb      	strb	r3, [r7, #26]
        break;
 8004c6e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d074      	beq.n	8004d60 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	005a      	lsls	r2, r3, #1
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	085b      	lsrs	r3, r3, #1
 8004c80:	441a      	add	r2, r3
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	2b0f      	cmp	r3, #15
 8004c92:	d916      	bls.n	8004cc2 <UART_SetConfig+0x45a>
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c9a:	d212      	bcs.n	8004cc2 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	f023 030f 	bic.w	r3, r3, #15
 8004ca4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	085b      	lsrs	r3, r3, #1
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	f003 0307 	and.w	r3, r3, #7
 8004cb0:	b29a      	uxth	r2, r3
 8004cb2:	89fb      	ldrh	r3, [r7, #14]
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	89fa      	ldrh	r2, [r7, #14]
 8004cbe:	60da      	str	r2, [r3, #12]
 8004cc0:	e04e      	b.n	8004d60 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	76bb      	strb	r3, [r7, #26]
 8004cc6:	e04b      	b.n	8004d60 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004cc8:	7efb      	ldrb	r3, [r7, #27]
 8004cca:	2b08      	cmp	r3, #8
 8004ccc:	d827      	bhi.n	8004d1e <UART_SetConfig+0x4b6>
 8004cce:	a201      	add	r2, pc, #4	; (adr r2, 8004cd4 <UART_SetConfig+0x46c>)
 8004cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cd4:	08004cf9 	.word	0x08004cf9
 8004cd8:	08004d01 	.word	0x08004d01
 8004cdc:	08004d09 	.word	0x08004d09
 8004ce0:	08004d1f 	.word	0x08004d1f
 8004ce4:	08004d0f 	.word	0x08004d0f
 8004ce8:	08004d1f 	.word	0x08004d1f
 8004cec:	08004d1f 	.word	0x08004d1f
 8004cf0:	08004d1f 	.word	0x08004d1f
 8004cf4:	08004d17 	.word	0x08004d17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cf8:	f7fe ff98 	bl	8003c2c <HAL_RCC_GetPCLK1Freq>
 8004cfc:	6178      	str	r0, [r7, #20]
        break;
 8004cfe:	e013      	b.n	8004d28 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d00:	f7fe ffaa 	bl	8003c58 <HAL_RCC_GetPCLK2Freq>
 8004d04:	6178      	str	r0, [r7, #20]
        break;
 8004d06:	e00f      	b.n	8004d28 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d08:	4b1b      	ldr	r3, [pc, #108]	; (8004d78 <UART_SetConfig+0x510>)
 8004d0a:	617b      	str	r3, [r7, #20]
        break;
 8004d0c:	e00c      	b.n	8004d28 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d0e:	f7fe fef7 	bl	8003b00 <HAL_RCC_GetSysClockFreq>
 8004d12:	6178      	str	r0, [r7, #20]
        break;
 8004d14:	e008      	b.n	8004d28 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d1a:	617b      	str	r3, [r7, #20]
        break;
 8004d1c:	e004      	b.n	8004d28 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	76bb      	strb	r3, [r7, #26]
        break;
 8004d26:	bf00      	nop
    }

    if (pclk != 0U)
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d018      	beq.n	8004d60 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	085a      	lsrs	r2, r3, #1
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	441a      	add	r2, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	2b0f      	cmp	r3, #15
 8004d48:	d908      	bls.n	8004d5c <UART_SetConfig+0x4f4>
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d50:	d204      	bcs.n	8004d5c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	693a      	ldr	r2, [r7, #16]
 8004d58:	60da      	str	r2, [r3, #12]
 8004d5a:	e001      	b.n	8004d60 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004d6c:	7ebb      	ldrb	r3, [r7, #26]
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3720      	adds	r7, #32
 8004d72:	46bd      	mov	sp, r7
 8004d74:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004d78:	00f42400 	.word	0x00f42400

08004d7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d88:	f003 0301 	and.w	r3, r3, #1
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d00a      	beq.n	8004da6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	430a      	orrs	r2, r1
 8004da4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004daa:	f003 0302 	and.w	r3, r3, #2
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d00a      	beq.n	8004dc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	430a      	orrs	r2, r1
 8004dc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dcc:	f003 0304 	and.w	r3, r3, #4
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d00a      	beq.n	8004dea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	430a      	orrs	r2, r1
 8004de8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dee:	f003 0308 	and.w	r3, r3, #8
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d00a      	beq.n	8004e0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	430a      	orrs	r2, r1
 8004e0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e10:	f003 0310 	and.w	r3, r3, #16
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d00a      	beq.n	8004e2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	430a      	orrs	r2, r1
 8004e2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e32:	f003 0320 	and.w	r3, r3, #32
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d00a      	beq.n	8004e50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	430a      	orrs	r2, r1
 8004e4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d01a      	beq.n	8004e92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	430a      	orrs	r2, r1
 8004e70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e7a:	d10a      	bne.n	8004e92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	430a      	orrs	r2, r1
 8004e90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00a      	beq.n	8004eb4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	430a      	orrs	r2, r1
 8004eb2:	605a      	str	r2, [r3, #4]
  }
}
 8004eb4:	bf00      	nop
 8004eb6:	370c      	adds	r7, #12
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr

08004ec0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b086      	sub	sp, #24
 8004ec4:	af02      	add	r7, sp, #8
 8004ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004ece:	f7fc f839 	bl	8000f44 <HAL_GetTick>
 8004ed2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 0308 	and.w	r3, r3, #8
 8004ede:	2b08      	cmp	r3, #8
 8004ee0:	d10e      	bne.n	8004f00 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ee2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ee6:	9300      	str	r3, [sp, #0]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2200      	movs	r2, #0
 8004eec:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f000 f82a 	bl	8004f4a <UART_WaitOnFlagUntilTimeout>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d001      	beq.n	8004f00 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004efc:	2303      	movs	r3, #3
 8004efe:	e020      	b.n	8004f42 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 0304 	and.w	r3, r3, #4
 8004f0a:	2b04      	cmp	r3, #4
 8004f0c:	d10e      	bne.n	8004f2c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f0e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f12:	9300      	str	r3, [sp, #0]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2200      	movs	r2, #0
 8004f18:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f000 f814 	bl	8004f4a <UART_WaitOnFlagUntilTimeout>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d001      	beq.n	8004f2c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f28:	2303      	movs	r3, #3
 8004f2a:	e00a      	b.n	8004f42 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2220      	movs	r2, #32
 8004f30:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2220      	movs	r2, #32
 8004f36:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004f40:	2300      	movs	r3, #0
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3710      	adds	r7, #16
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}

08004f4a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f4a:	b580      	push	{r7, lr}
 8004f4c:	b084      	sub	sp, #16
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	60f8      	str	r0, [r7, #12]
 8004f52:	60b9      	str	r1, [r7, #8]
 8004f54:	603b      	str	r3, [r7, #0]
 8004f56:	4613      	mov	r3, r2
 8004f58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f5a:	e05d      	b.n	8005018 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f62:	d059      	beq.n	8005018 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f64:	f7fb ffee 	bl	8000f44 <HAL_GetTick>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	1ad3      	subs	r3, r2, r3
 8004f6e:	69ba      	ldr	r2, [r7, #24]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d302      	bcc.n	8004f7a <UART_WaitOnFlagUntilTimeout+0x30>
 8004f74:	69bb      	ldr	r3, [r7, #24]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d11b      	bne.n	8004fb2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004f88:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	689a      	ldr	r2, [r3, #8]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f022 0201 	bic.w	r2, r2, #1
 8004f98:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2220      	movs	r2, #32
 8004f9e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2220      	movs	r2, #32
 8004fa4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004fae:	2303      	movs	r3, #3
 8004fb0:	e042      	b.n	8005038 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 0304 	and.w	r3, r3, #4
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d02b      	beq.n	8005018 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	69db      	ldr	r3, [r3, #28]
 8004fc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fce:	d123      	bne.n	8005018 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004fd8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004fe8:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	689a      	ldr	r2, [r3, #8]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f022 0201 	bic.w	r2, r2, #1
 8004ff8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2220      	movs	r2, #32
 8004ffe:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2220      	movs	r2, #32
 8005004:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2220      	movs	r2, #32
 800500a:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2200      	movs	r2, #0
 8005010:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8005014:	2303      	movs	r3, #3
 8005016:	e00f      	b.n	8005038 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	69da      	ldr	r2, [r3, #28]
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	4013      	ands	r3, r2
 8005022:	68ba      	ldr	r2, [r7, #8]
 8005024:	429a      	cmp	r2, r3
 8005026:	bf0c      	ite	eq
 8005028:	2301      	moveq	r3, #1
 800502a:	2300      	movne	r3, #0
 800502c:	b2db      	uxtb	r3, r3
 800502e:	461a      	mov	r2, r3
 8005030:	79fb      	ldrb	r3, [r7, #7]
 8005032:	429a      	cmp	r2, r3
 8005034:	d092      	beq.n	8004f5c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005036:	2300      	movs	r3, #0
}
 8005038:	4618      	mov	r0, r3
 800503a:	3710      	adds	r7, #16
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}

08005040 <__errno>:
 8005040:	4b01      	ldr	r3, [pc, #4]	; (8005048 <__errno+0x8>)
 8005042:	6818      	ldr	r0, [r3, #0]
 8005044:	4770      	bx	lr
 8005046:	bf00      	nop
 8005048:	2000000c 	.word	0x2000000c

0800504c <__libc_init_array>:
 800504c:	b570      	push	{r4, r5, r6, lr}
 800504e:	4e0d      	ldr	r6, [pc, #52]	; (8005084 <__libc_init_array+0x38>)
 8005050:	4c0d      	ldr	r4, [pc, #52]	; (8005088 <__libc_init_array+0x3c>)
 8005052:	1ba4      	subs	r4, r4, r6
 8005054:	10a4      	asrs	r4, r4, #2
 8005056:	2500      	movs	r5, #0
 8005058:	42a5      	cmp	r5, r4
 800505a:	d109      	bne.n	8005070 <__libc_init_array+0x24>
 800505c:	4e0b      	ldr	r6, [pc, #44]	; (800508c <__libc_init_array+0x40>)
 800505e:	4c0c      	ldr	r4, [pc, #48]	; (8005090 <__libc_init_array+0x44>)
 8005060:	f000 ff04 	bl	8005e6c <_init>
 8005064:	1ba4      	subs	r4, r4, r6
 8005066:	10a4      	asrs	r4, r4, #2
 8005068:	2500      	movs	r5, #0
 800506a:	42a5      	cmp	r5, r4
 800506c:	d105      	bne.n	800507a <__libc_init_array+0x2e>
 800506e:	bd70      	pop	{r4, r5, r6, pc}
 8005070:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005074:	4798      	blx	r3
 8005076:	3501      	adds	r5, #1
 8005078:	e7ee      	b.n	8005058 <__libc_init_array+0xc>
 800507a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800507e:	4798      	blx	r3
 8005080:	3501      	adds	r5, #1
 8005082:	e7f2      	b.n	800506a <__libc_init_array+0x1e>
 8005084:	08005fa0 	.word	0x08005fa0
 8005088:	08005fa0 	.word	0x08005fa0
 800508c:	08005fa0 	.word	0x08005fa0
 8005090:	08005fa4 	.word	0x08005fa4

08005094 <memset>:
 8005094:	4402      	add	r2, r0
 8005096:	4603      	mov	r3, r0
 8005098:	4293      	cmp	r3, r2
 800509a:	d100      	bne.n	800509e <memset+0xa>
 800509c:	4770      	bx	lr
 800509e:	f803 1b01 	strb.w	r1, [r3], #1
 80050a2:	e7f9      	b.n	8005098 <memset+0x4>

080050a4 <iprintf>:
 80050a4:	b40f      	push	{r0, r1, r2, r3}
 80050a6:	4b0a      	ldr	r3, [pc, #40]	; (80050d0 <iprintf+0x2c>)
 80050a8:	b513      	push	{r0, r1, r4, lr}
 80050aa:	681c      	ldr	r4, [r3, #0]
 80050ac:	b124      	cbz	r4, 80050b8 <iprintf+0x14>
 80050ae:	69a3      	ldr	r3, [r4, #24]
 80050b0:	b913      	cbnz	r3, 80050b8 <iprintf+0x14>
 80050b2:	4620      	mov	r0, r4
 80050b4:	f000 f84e 	bl	8005154 <__sinit>
 80050b8:	ab05      	add	r3, sp, #20
 80050ba:	9a04      	ldr	r2, [sp, #16]
 80050bc:	68a1      	ldr	r1, [r4, #8]
 80050be:	9301      	str	r3, [sp, #4]
 80050c0:	4620      	mov	r0, r4
 80050c2:	f000 f955 	bl	8005370 <_vfiprintf_r>
 80050c6:	b002      	add	sp, #8
 80050c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050cc:	b004      	add	sp, #16
 80050ce:	4770      	bx	lr
 80050d0:	2000000c 	.word	0x2000000c

080050d4 <std>:
 80050d4:	2300      	movs	r3, #0
 80050d6:	b510      	push	{r4, lr}
 80050d8:	4604      	mov	r4, r0
 80050da:	e9c0 3300 	strd	r3, r3, [r0]
 80050de:	6083      	str	r3, [r0, #8]
 80050e0:	8181      	strh	r1, [r0, #12]
 80050e2:	6643      	str	r3, [r0, #100]	; 0x64
 80050e4:	81c2      	strh	r2, [r0, #14]
 80050e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80050ea:	6183      	str	r3, [r0, #24]
 80050ec:	4619      	mov	r1, r3
 80050ee:	2208      	movs	r2, #8
 80050f0:	305c      	adds	r0, #92	; 0x5c
 80050f2:	f7ff ffcf 	bl	8005094 <memset>
 80050f6:	4b05      	ldr	r3, [pc, #20]	; (800510c <std+0x38>)
 80050f8:	6263      	str	r3, [r4, #36]	; 0x24
 80050fa:	4b05      	ldr	r3, [pc, #20]	; (8005110 <std+0x3c>)
 80050fc:	62a3      	str	r3, [r4, #40]	; 0x28
 80050fe:	4b05      	ldr	r3, [pc, #20]	; (8005114 <std+0x40>)
 8005100:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005102:	4b05      	ldr	r3, [pc, #20]	; (8005118 <std+0x44>)
 8005104:	6224      	str	r4, [r4, #32]
 8005106:	6323      	str	r3, [r4, #48]	; 0x30
 8005108:	bd10      	pop	{r4, pc}
 800510a:	bf00      	nop
 800510c:	080058cd 	.word	0x080058cd
 8005110:	080058ef 	.word	0x080058ef
 8005114:	08005927 	.word	0x08005927
 8005118:	0800594b 	.word	0x0800594b

0800511c <_cleanup_r>:
 800511c:	4901      	ldr	r1, [pc, #4]	; (8005124 <_cleanup_r+0x8>)
 800511e:	f000 b885 	b.w	800522c <_fwalk_reent>
 8005122:	bf00      	nop
 8005124:	08005c25 	.word	0x08005c25

08005128 <__sfmoreglue>:
 8005128:	b570      	push	{r4, r5, r6, lr}
 800512a:	1e4a      	subs	r2, r1, #1
 800512c:	2568      	movs	r5, #104	; 0x68
 800512e:	4355      	muls	r5, r2
 8005130:	460e      	mov	r6, r1
 8005132:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005136:	f000 f897 	bl	8005268 <_malloc_r>
 800513a:	4604      	mov	r4, r0
 800513c:	b140      	cbz	r0, 8005150 <__sfmoreglue+0x28>
 800513e:	2100      	movs	r1, #0
 8005140:	e9c0 1600 	strd	r1, r6, [r0]
 8005144:	300c      	adds	r0, #12
 8005146:	60a0      	str	r0, [r4, #8]
 8005148:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800514c:	f7ff ffa2 	bl	8005094 <memset>
 8005150:	4620      	mov	r0, r4
 8005152:	bd70      	pop	{r4, r5, r6, pc}

08005154 <__sinit>:
 8005154:	6983      	ldr	r3, [r0, #24]
 8005156:	b510      	push	{r4, lr}
 8005158:	4604      	mov	r4, r0
 800515a:	bb33      	cbnz	r3, 80051aa <__sinit+0x56>
 800515c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8005160:	6503      	str	r3, [r0, #80]	; 0x50
 8005162:	4b12      	ldr	r3, [pc, #72]	; (80051ac <__sinit+0x58>)
 8005164:	4a12      	ldr	r2, [pc, #72]	; (80051b0 <__sinit+0x5c>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	6282      	str	r2, [r0, #40]	; 0x28
 800516a:	4298      	cmp	r0, r3
 800516c:	bf04      	itt	eq
 800516e:	2301      	moveq	r3, #1
 8005170:	6183      	streq	r3, [r0, #24]
 8005172:	f000 f81f 	bl	80051b4 <__sfp>
 8005176:	6060      	str	r0, [r4, #4]
 8005178:	4620      	mov	r0, r4
 800517a:	f000 f81b 	bl	80051b4 <__sfp>
 800517e:	60a0      	str	r0, [r4, #8]
 8005180:	4620      	mov	r0, r4
 8005182:	f000 f817 	bl	80051b4 <__sfp>
 8005186:	2200      	movs	r2, #0
 8005188:	60e0      	str	r0, [r4, #12]
 800518a:	2104      	movs	r1, #4
 800518c:	6860      	ldr	r0, [r4, #4]
 800518e:	f7ff ffa1 	bl	80050d4 <std>
 8005192:	2201      	movs	r2, #1
 8005194:	2109      	movs	r1, #9
 8005196:	68a0      	ldr	r0, [r4, #8]
 8005198:	f7ff ff9c 	bl	80050d4 <std>
 800519c:	2202      	movs	r2, #2
 800519e:	2112      	movs	r1, #18
 80051a0:	68e0      	ldr	r0, [r4, #12]
 80051a2:	f7ff ff97 	bl	80050d4 <std>
 80051a6:	2301      	movs	r3, #1
 80051a8:	61a3      	str	r3, [r4, #24]
 80051aa:	bd10      	pop	{r4, pc}
 80051ac:	08005f00 	.word	0x08005f00
 80051b0:	0800511d 	.word	0x0800511d

080051b4 <__sfp>:
 80051b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051b6:	4b1b      	ldr	r3, [pc, #108]	; (8005224 <__sfp+0x70>)
 80051b8:	681e      	ldr	r6, [r3, #0]
 80051ba:	69b3      	ldr	r3, [r6, #24]
 80051bc:	4607      	mov	r7, r0
 80051be:	b913      	cbnz	r3, 80051c6 <__sfp+0x12>
 80051c0:	4630      	mov	r0, r6
 80051c2:	f7ff ffc7 	bl	8005154 <__sinit>
 80051c6:	3648      	adds	r6, #72	; 0x48
 80051c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80051cc:	3b01      	subs	r3, #1
 80051ce:	d503      	bpl.n	80051d8 <__sfp+0x24>
 80051d0:	6833      	ldr	r3, [r6, #0]
 80051d2:	b133      	cbz	r3, 80051e2 <__sfp+0x2e>
 80051d4:	6836      	ldr	r6, [r6, #0]
 80051d6:	e7f7      	b.n	80051c8 <__sfp+0x14>
 80051d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80051dc:	b16d      	cbz	r5, 80051fa <__sfp+0x46>
 80051de:	3468      	adds	r4, #104	; 0x68
 80051e0:	e7f4      	b.n	80051cc <__sfp+0x18>
 80051e2:	2104      	movs	r1, #4
 80051e4:	4638      	mov	r0, r7
 80051e6:	f7ff ff9f 	bl	8005128 <__sfmoreglue>
 80051ea:	6030      	str	r0, [r6, #0]
 80051ec:	2800      	cmp	r0, #0
 80051ee:	d1f1      	bne.n	80051d4 <__sfp+0x20>
 80051f0:	230c      	movs	r3, #12
 80051f2:	603b      	str	r3, [r7, #0]
 80051f4:	4604      	mov	r4, r0
 80051f6:	4620      	mov	r0, r4
 80051f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051fa:	4b0b      	ldr	r3, [pc, #44]	; (8005228 <__sfp+0x74>)
 80051fc:	6665      	str	r5, [r4, #100]	; 0x64
 80051fe:	e9c4 5500 	strd	r5, r5, [r4]
 8005202:	60a5      	str	r5, [r4, #8]
 8005204:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8005208:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800520c:	2208      	movs	r2, #8
 800520e:	4629      	mov	r1, r5
 8005210:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005214:	f7ff ff3e 	bl	8005094 <memset>
 8005218:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800521c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005220:	e7e9      	b.n	80051f6 <__sfp+0x42>
 8005222:	bf00      	nop
 8005224:	08005f00 	.word	0x08005f00
 8005228:	ffff0001 	.word	0xffff0001

0800522c <_fwalk_reent>:
 800522c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005230:	4680      	mov	r8, r0
 8005232:	4689      	mov	r9, r1
 8005234:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005238:	2600      	movs	r6, #0
 800523a:	b914      	cbnz	r4, 8005242 <_fwalk_reent+0x16>
 800523c:	4630      	mov	r0, r6
 800523e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005242:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8005246:	3f01      	subs	r7, #1
 8005248:	d501      	bpl.n	800524e <_fwalk_reent+0x22>
 800524a:	6824      	ldr	r4, [r4, #0]
 800524c:	e7f5      	b.n	800523a <_fwalk_reent+0xe>
 800524e:	89ab      	ldrh	r3, [r5, #12]
 8005250:	2b01      	cmp	r3, #1
 8005252:	d907      	bls.n	8005264 <_fwalk_reent+0x38>
 8005254:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005258:	3301      	adds	r3, #1
 800525a:	d003      	beq.n	8005264 <_fwalk_reent+0x38>
 800525c:	4629      	mov	r1, r5
 800525e:	4640      	mov	r0, r8
 8005260:	47c8      	blx	r9
 8005262:	4306      	orrs	r6, r0
 8005264:	3568      	adds	r5, #104	; 0x68
 8005266:	e7ee      	b.n	8005246 <_fwalk_reent+0x1a>

08005268 <_malloc_r>:
 8005268:	b570      	push	{r4, r5, r6, lr}
 800526a:	1ccd      	adds	r5, r1, #3
 800526c:	f025 0503 	bic.w	r5, r5, #3
 8005270:	3508      	adds	r5, #8
 8005272:	2d0c      	cmp	r5, #12
 8005274:	bf38      	it	cc
 8005276:	250c      	movcc	r5, #12
 8005278:	2d00      	cmp	r5, #0
 800527a:	4606      	mov	r6, r0
 800527c:	db01      	blt.n	8005282 <_malloc_r+0x1a>
 800527e:	42a9      	cmp	r1, r5
 8005280:	d903      	bls.n	800528a <_malloc_r+0x22>
 8005282:	230c      	movs	r3, #12
 8005284:	6033      	str	r3, [r6, #0]
 8005286:	2000      	movs	r0, #0
 8005288:	bd70      	pop	{r4, r5, r6, pc}
 800528a:	f000 fd6b 	bl	8005d64 <__malloc_lock>
 800528e:	4a21      	ldr	r2, [pc, #132]	; (8005314 <_malloc_r+0xac>)
 8005290:	6814      	ldr	r4, [r2, #0]
 8005292:	4621      	mov	r1, r4
 8005294:	b991      	cbnz	r1, 80052bc <_malloc_r+0x54>
 8005296:	4c20      	ldr	r4, [pc, #128]	; (8005318 <_malloc_r+0xb0>)
 8005298:	6823      	ldr	r3, [r4, #0]
 800529a:	b91b      	cbnz	r3, 80052a4 <_malloc_r+0x3c>
 800529c:	4630      	mov	r0, r6
 800529e:	f000 fb05 	bl	80058ac <_sbrk_r>
 80052a2:	6020      	str	r0, [r4, #0]
 80052a4:	4629      	mov	r1, r5
 80052a6:	4630      	mov	r0, r6
 80052a8:	f000 fb00 	bl	80058ac <_sbrk_r>
 80052ac:	1c43      	adds	r3, r0, #1
 80052ae:	d124      	bne.n	80052fa <_malloc_r+0x92>
 80052b0:	230c      	movs	r3, #12
 80052b2:	6033      	str	r3, [r6, #0]
 80052b4:	4630      	mov	r0, r6
 80052b6:	f000 fd56 	bl	8005d66 <__malloc_unlock>
 80052ba:	e7e4      	b.n	8005286 <_malloc_r+0x1e>
 80052bc:	680b      	ldr	r3, [r1, #0]
 80052be:	1b5b      	subs	r3, r3, r5
 80052c0:	d418      	bmi.n	80052f4 <_malloc_r+0x8c>
 80052c2:	2b0b      	cmp	r3, #11
 80052c4:	d90f      	bls.n	80052e6 <_malloc_r+0x7e>
 80052c6:	600b      	str	r3, [r1, #0]
 80052c8:	50cd      	str	r5, [r1, r3]
 80052ca:	18cc      	adds	r4, r1, r3
 80052cc:	4630      	mov	r0, r6
 80052ce:	f000 fd4a 	bl	8005d66 <__malloc_unlock>
 80052d2:	f104 000b 	add.w	r0, r4, #11
 80052d6:	1d23      	adds	r3, r4, #4
 80052d8:	f020 0007 	bic.w	r0, r0, #7
 80052dc:	1ac3      	subs	r3, r0, r3
 80052de:	d0d3      	beq.n	8005288 <_malloc_r+0x20>
 80052e0:	425a      	negs	r2, r3
 80052e2:	50e2      	str	r2, [r4, r3]
 80052e4:	e7d0      	b.n	8005288 <_malloc_r+0x20>
 80052e6:	428c      	cmp	r4, r1
 80052e8:	684b      	ldr	r3, [r1, #4]
 80052ea:	bf16      	itet	ne
 80052ec:	6063      	strne	r3, [r4, #4]
 80052ee:	6013      	streq	r3, [r2, #0]
 80052f0:	460c      	movne	r4, r1
 80052f2:	e7eb      	b.n	80052cc <_malloc_r+0x64>
 80052f4:	460c      	mov	r4, r1
 80052f6:	6849      	ldr	r1, [r1, #4]
 80052f8:	e7cc      	b.n	8005294 <_malloc_r+0x2c>
 80052fa:	1cc4      	adds	r4, r0, #3
 80052fc:	f024 0403 	bic.w	r4, r4, #3
 8005300:	42a0      	cmp	r0, r4
 8005302:	d005      	beq.n	8005310 <_malloc_r+0xa8>
 8005304:	1a21      	subs	r1, r4, r0
 8005306:	4630      	mov	r0, r6
 8005308:	f000 fad0 	bl	80058ac <_sbrk_r>
 800530c:	3001      	adds	r0, #1
 800530e:	d0cf      	beq.n	80052b0 <_malloc_r+0x48>
 8005310:	6025      	str	r5, [r4, #0]
 8005312:	e7db      	b.n	80052cc <_malloc_r+0x64>
 8005314:	20000090 	.word	0x20000090
 8005318:	20000094 	.word	0x20000094

0800531c <__sfputc_r>:
 800531c:	6893      	ldr	r3, [r2, #8]
 800531e:	3b01      	subs	r3, #1
 8005320:	2b00      	cmp	r3, #0
 8005322:	b410      	push	{r4}
 8005324:	6093      	str	r3, [r2, #8]
 8005326:	da08      	bge.n	800533a <__sfputc_r+0x1e>
 8005328:	6994      	ldr	r4, [r2, #24]
 800532a:	42a3      	cmp	r3, r4
 800532c:	db01      	blt.n	8005332 <__sfputc_r+0x16>
 800532e:	290a      	cmp	r1, #10
 8005330:	d103      	bne.n	800533a <__sfputc_r+0x1e>
 8005332:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005336:	f000 bb0d 	b.w	8005954 <__swbuf_r>
 800533a:	6813      	ldr	r3, [r2, #0]
 800533c:	1c58      	adds	r0, r3, #1
 800533e:	6010      	str	r0, [r2, #0]
 8005340:	7019      	strb	r1, [r3, #0]
 8005342:	4608      	mov	r0, r1
 8005344:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005348:	4770      	bx	lr

0800534a <__sfputs_r>:
 800534a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800534c:	4606      	mov	r6, r0
 800534e:	460f      	mov	r7, r1
 8005350:	4614      	mov	r4, r2
 8005352:	18d5      	adds	r5, r2, r3
 8005354:	42ac      	cmp	r4, r5
 8005356:	d101      	bne.n	800535c <__sfputs_r+0x12>
 8005358:	2000      	movs	r0, #0
 800535a:	e007      	b.n	800536c <__sfputs_r+0x22>
 800535c:	463a      	mov	r2, r7
 800535e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005362:	4630      	mov	r0, r6
 8005364:	f7ff ffda 	bl	800531c <__sfputc_r>
 8005368:	1c43      	adds	r3, r0, #1
 800536a:	d1f3      	bne.n	8005354 <__sfputs_r+0xa>
 800536c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005370 <_vfiprintf_r>:
 8005370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005374:	460c      	mov	r4, r1
 8005376:	b09d      	sub	sp, #116	; 0x74
 8005378:	4617      	mov	r7, r2
 800537a:	461d      	mov	r5, r3
 800537c:	4606      	mov	r6, r0
 800537e:	b118      	cbz	r0, 8005388 <_vfiprintf_r+0x18>
 8005380:	6983      	ldr	r3, [r0, #24]
 8005382:	b90b      	cbnz	r3, 8005388 <_vfiprintf_r+0x18>
 8005384:	f7ff fee6 	bl	8005154 <__sinit>
 8005388:	4b7c      	ldr	r3, [pc, #496]	; (800557c <_vfiprintf_r+0x20c>)
 800538a:	429c      	cmp	r4, r3
 800538c:	d158      	bne.n	8005440 <_vfiprintf_r+0xd0>
 800538e:	6874      	ldr	r4, [r6, #4]
 8005390:	89a3      	ldrh	r3, [r4, #12]
 8005392:	0718      	lsls	r0, r3, #28
 8005394:	d55e      	bpl.n	8005454 <_vfiprintf_r+0xe4>
 8005396:	6923      	ldr	r3, [r4, #16]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d05b      	beq.n	8005454 <_vfiprintf_r+0xe4>
 800539c:	2300      	movs	r3, #0
 800539e:	9309      	str	r3, [sp, #36]	; 0x24
 80053a0:	2320      	movs	r3, #32
 80053a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80053a6:	2330      	movs	r3, #48	; 0x30
 80053a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80053ac:	9503      	str	r5, [sp, #12]
 80053ae:	f04f 0b01 	mov.w	fp, #1
 80053b2:	46b8      	mov	r8, r7
 80053b4:	4645      	mov	r5, r8
 80053b6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80053ba:	b10b      	cbz	r3, 80053c0 <_vfiprintf_r+0x50>
 80053bc:	2b25      	cmp	r3, #37	; 0x25
 80053be:	d154      	bne.n	800546a <_vfiprintf_r+0xfa>
 80053c0:	ebb8 0a07 	subs.w	sl, r8, r7
 80053c4:	d00b      	beq.n	80053de <_vfiprintf_r+0x6e>
 80053c6:	4653      	mov	r3, sl
 80053c8:	463a      	mov	r2, r7
 80053ca:	4621      	mov	r1, r4
 80053cc:	4630      	mov	r0, r6
 80053ce:	f7ff ffbc 	bl	800534a <__sfputs_r>
 80053d2:	3001      	adds	r0, #1
 80053d4:	f000 80c2 	beq.w	800555c <_vfiprintf_r+0x1ec>
 80053d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053da:	4453      	add	r3, sl
 80053dc:	9309      	str	r3, [sp, #36]	; 0x24
 80053de:	f898 3000 	ldrb.w	r3, [r8]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	f000 80ba 	beq.w	800555c <_vfiprintf_r+0x1ec>
 80053e8:	2300      	movs	r3, #0
 80053ea:	f04f 32ff 	mov.w	r2, #4294967295
 80053ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80053f2:	9304      	str	r3, [sp, #16]
 80053f4:	9307      	str	r3, [sp, #28]
 80053f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80053fa:	931a      	str	r3, [sp, #104]	; 0x68
 80053fc:	46a8      	mov	r8, r5
 80053fe:	2205      	movs	r2, #5
 8005400:	f818 1b01 	ldrb.w	r1, [r8], #1
 8005404:	485e      	ldr	r0, [pc, #376]	; (8005580 <_vfiprintf_r+0x210>)
 8005406:	f7fa fee3 	bl	80001d0 <memchr>
 800540a:	9b04      	ldr	r3, [sp, #16]
 800540c:	bb78      	cbnz	r0, 800546e <_vfiprintf_r+0xfe>
 800540e:	06d9      	lsls	r1, r3, #27
 8005410:	bf44      	itt	mi
 8005412:	2220      	movmi	r2, #32
 8005414:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005418:	071a      	lsls	r2, r3, #28
 800541a:	bf44      	itt	mi
 800541c:	222b      	movmi	r2, #43	; 0x2b
 800541e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005422:	782a      	ldrb	r2, [r5, #0]
 8005424:	2a2a      	cmp	r2, #42	; 0x2a
 8005426:	d02a      	beq.n	800547e <_vfiprintf_r+0x10e>
 8005428:	9a07      	ldr	r2, [sp, #28]
 800542a:	46a8      	mov	r8, r5
 800542c:	2000      	movs	r0, #0
 800542e:	250a      	movs	r5, #10
 8005430:	4641      	mov	r1, r8
 8005432:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005436:	3b30      	subs	r3, #48	; 0x30
 8005438:	2b09      	cmp	r3, #9
 800543a:	d969      	bls.n	8005510 <_vfiprintf_r+0x1a0>
 800543c:	b360      	cbz	r0, 8005498 <_vfiprintf_r+0x128>
 800543e:	e024      	b.n	800548a <_vfiprintf_r+0x11a>
 8005440:	4b50      	ldr	r3, [pc, #320]	; (8005584 <_vfiprintf_r+0x214>)
 8005442:	429c      	cmp	r4, r3
 8005444:	d101      	bne.n	800544a <_vfiprintf_r+0xda>
 8005446:	68b4      	ldr	r4, [r6, #8]
 8005448:	e7a2      	b.n	8005390 <_vfiprintf_r+0x20>
 800544a:	4b4f      	ldr	r3, [pc, #316]	; (8005588 <_vfiprintf_r+0x218>)
 800544c:	429c      	cmp	r4, r3
 800544e:	bf08      	it	eq
 8005450:	68f4      	ldreq	r4, [r6, #12]
 8005452:	e79d      	b.n	8005390 <_vfiprintf_r+0x20>
 8005454:	4621      	mov	r1, r4
 8005456:	4630      	mov	r0, r6
 8005458:	f000 fae0 	bl	8005a1c <__swsetup_r>
 800545c:	2800      	cmp	r0, #0
 800545e:	d09d      	beq.n	800539c <_vfiprintf_r+0x2c>
 8005460:	f04f 30ff 	mov.w	r0, #4294967295
 8005464:	b01d      	add	sp, #116	; 0x74
 8005466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800546a:	46a8      	mov	r8, r5
 800546c:	e7a2      	b.n	80053b4 <_vfiprintf_r+0x44>
 800546e:	4a44      	ldr	r2, [pc, #272]	; (8005580 <_vfiprintf_r+0x210>)
 8005470:	1a80      	subs	r0, r0, r2
 8005472:	fa0b f000 	lsl.w	r0, fp, r0
 8005476:	4318      	orrs	r0, r3
 8005478:	9004      	str	r0, [sp, #16]
 800547a:	4645      	mov	r5, r8
 800547c:	e7be      	b.n	80053fc <_vfiprintf_r+0x8c>
 800547e:	9a03      	ldr	r2, [sp, #12]
 8005480:	1d11      	adds	r1, r2, #4
 8005482:	6812      	ldr	r2, [r2, #0]
 8005484:	9103      	str	r1, [sp, #12]
 8005486:	2a00      	cmp	r2, #0
 8005488:	db01      	blt.n	800548e <_vfiprintf_r+0x11e>
 800548a:	9207      	str	r2, [sp, #28]
 800548c:	e004      	b.n	8005498 <_vfiprintf_r+0x128>
 800548e:	4252      	negs	r2, r2
 8005490:	f043 0302 	orr.w	r3, r3, #2
 8005494:	9207      	str	r2, [sp, #28]
 8005496:	9304      	str	r3, [sp, #16]
 8005498:	f898 3000 	ldrb.w	r3, [r8]
 800549c:	2b2e      	cmp	r3, #46	; 0x2e
 800549e:	d10e      	bne.n	80054be <_vfiprintf_r+0x14e>
 80054a0:	f898 3001 	ldrb.w	r3, [r8, #1]
 80054a4:	2b2a      	cmp	r3, #42	; 0x2a
 80054a6:	d138      	bne.n	800551a <_vfiprintf_r+0x1aa>
 80054a8:	9b03      	ldr	r3, [sp, #12]
 80054aa:	1d1a      	adds	r2, r3, #4
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	9203      	str	r2, [sp, #12]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	bfb8      	it	lt
 80054b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80054b8:	f108 0802 	add.w	r8, r8, #2
 80054bc:	9305      	str	r3, [sp, #20]
 80054be:	4d33      	ldr	r5, [pc, #204]	; (800558c <_vfiprintf_r+0x21c>)
 80054c0:	f898 1000 	ldrb.w	r1, [r8]
 80054c4:	2203      	movs	r2, #3
 80054c6:	4628      	mov	r0, r5
 80054c8:	f7fa fe82 	bl	80001d0 <memchr>
 80054cc:	b140      	cbz	r0, 80054e0 <_vfiprintf_r+0x170>
 80054ce:	2340      	movs	r3, #64	; 0x40
 80054d0:	1b40      	subs	r0, r0, r5
 80054d2:	fa03 f000 	lsl.w	r0, r3, r0
 80054d6:	9b04      	ldr	r3, [sp, #16]
 80054d8:	4303      	orrs	r3, r0
 80054da:	f108 0801 	add.w	r8, r8, #1
 80054de:	9304      	str	r3, [sp, #16]
 80054e0:	f898 1000 	ldrb.w	r1, [r8]
 80054e4:	482a      	ldr	r0, [pc, #168]	; (8005590 <_vfiprintf_r+0x220>)
 80054e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80054ea:	2206      	movs	r2, #6
 80054ec:	f108 0701 	add.w	r7, r8, #1
 80054f0:	f7fa fe6e 	bl	80001d0 <memchr>
 80054f4:	2800      	cmp	r0, #0
 80054f6:	d037      	beq.n	8005568 <_vfiprintf_r+0x1f8>
 80054f8:	4b26      	ldr	r3, [pc, #152]	; (8005594 <_vfiprintf_r+0x224>)
 80054fa:	bb1b      	cbnz	r3, 8005544 <_vfiprintf_r+0x1d4>
 80054fc:	9b03      	ldr	r3, [sp, #12]
 80054fe:	3307      	adds	r3, #7
 8005500:	f023 0307 	bic.w	r3, r3, #7
 8005504:	3308      	adds	r3, #8
 8005506:	9303      	str	r3, [sp, #12]
 8005508:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800550a:	444b      	add	r3, r9
 800550c:	9309      	str	r3, [sp, #36]	; 0x24
 800550e:	e750      	b.n	80053b2 <_vfiprintf_r+0x42>
 8005510:	fb05 3202 	mla	r2, r5, r2, r3
 8005514:	2001      	movs	r0, #1
 8005516:	4688      	mov	r8, r1
 8005518:	e78a      	b.n	8005430 <_vfiprintf_r+0xc0>
 800551a:	2300      	movs	r3, #0
 800551c:	f108 0801 	add.w	r8, r8, #1
 8005520:	9305      	str	r3, [sp, #20]
 8005522:	4619      	mov	r1, r3
 8005524:	250a      	movs	r5, #10
 8005526:	4640      	mov	r0, r8
 8005528:	f810 2b01 	ldrb.w	r2, [r0], #1
 800552c:	3a30      	subs	r2, #48	; 0x30
 800552e:	2a09      	cmp	r2, #9
 8005530:	d903      	bls.n	800553a <_vfiprintf_r+0x1ca>
 8005532:	2b00      	cmp	r3, #0
 8005534:	d0c3      	beq.n	80054be <_vfiprintf_r+0x14e>
 8005536:	9105      	str	r1, [sp, #20]
 8005538:	e7c1      	b.n	80054be <_vfiprintf_r+0x14e>
 800553a:	fb05 2101 	mla	r1, r5, r1, r2
 800553e:	2301      	movs	r3, #1
 8005540:	4680      	mov	r8, r0
 8005542:	e7f0      	b.n	8005526 <_vfiprintf_r+0x1b6>
 8005544:	ab03      	add	r3, sp, #12
 8005546:	9300      	str	r3, [sp, #0]
 8005548:	4622      	mov	r2, r4
 800554a:	4b13      	ldr	r3, [pc, #76]	; (8005598 <_vfiprintf_r+0x228>)
 800554c:	a904      	add	r1, sp, #16
 800554e:	4630      	mov	r0, r6
 8005550:	f3af 8000 	nop.w
 8005554:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005558:	4681      	mov	r9, r0
 800555a:	d1d5      	bne.n	8005508 <_vfiprintf_r+0x198>
 800555c:	89a3      	ldrh	r3, [r4, #12]
 800555e:	065b      	lsls	r3, r3, #25
 8005560:	f53f af7e 	bmi.w	8005460 <_vfiprintf_r+0xf0>
 8005564:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005566:	e77d      	b.n	8005464 <_vfiprintf_r+0xf4>
 8005568:	ab03      	add	r3, sp, #12
 800556a:	9300      	str	r3, [sp, #0]
 800556c:	4622      	mov	r2, r4
 800556e:	4b0a      	ldr	r3, [pc, #40]	; (8005598 <_vfiprintf_r+0x228>)
 8005570:	a904      	add	r1, sp, #16
 8005572:	4630      	mov	r0, r6
 8005574:	f000 f888 	bl	8005688 <_printf_i>
 8005578:	e7ec      	b.n	8005554 <_vfiprintf_r+0x1e4>
 800557a:	bf00      	nop
 800557c:	08005f24 	.word	0x08005f24
 8005580:	08005f64 	.word	0x08005f64
 8005584:	08005f44 	.word	0x08005f44
 8005588:	08005f04 	.word	0x08005f04
 800558c:	08005f6a 	.word	0x08005f6a
 8005590:	08005f6e 	.word	0x08005f6e
 8005594:	00000000 	.word	0x00000000
 8005598:	0800534b 	.word	0x0800534b

0800559c <_printf_common>:
 800559c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055a0:	4691      	mov	r9, r2
 80055a2:	461f      	mov	r7, r3
 80055a4:	688a      	ldr	r2, [r1, #8]
 80055a6:	690b      	ldr	r3, [r1, #16]
 80055a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80055ac:	4293      	cmp	r3, r2
 80055ae:	bfb8      	it	lt
 80055b0:	4613      	movlt	r3, r2
 80055b2:	f8c9 3000 	str.w	r3, [r9]
 80055b6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80055ba:	4606      	mov	r6, r0
 80055bc:	460c      	mov	r4, r1
 80055be:	b112      	cbz	r2, 80055c6 <_printf_common+0x2a>
 80055c0:	3301      	adds	r3, #1
 80055c2:	f8c9 3000 	str.w	r3, [r9]
 80055c6:	6823      	ldr	r3, [r4, #0]
 80055c8:	0699      	lsls	r1, r3, #26
 80055ca:	bf42      	ittt	mi
 80055cc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80055d0:	3302      	addmi	r3, #2
 80055d2:	f8c9 3000 	strmi.w	r3, [r9]
 80055d6:	6825      	ldr	r5, [r4, #0]
 80055d8:	f015 0506 	ands.w	r5, r5, #6
 80055dc:	d107      	bne.n	80055ee <_printf_common+0x52>
 80055de:	f104 0a19 	add.w	sl, r4, #25
 80055e2:	68e3      	ldr	r3, [r4, #12]
 80055e4:	f8d9 2000 	ldr.w	r2, [r9]
 80055e8:	1a9b      	subs	r3, r3, r2
 80055ea:	42ab      	cmp	r3, r5
 80055ec:	dc28      	bgt.n	8005640 <_printf_common+0xa4>
 80055ee:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80055f2:	6822      	ldr	r2, [r4, #0]
 80055f4:	3300      	adds	r3, #0
 80055f6:	bf18      	it	ne
 80055f8:	2301      	movne	r3, #1
 80055fa:	0692      	lsls	r2, r2, #26
 80055fc:	d42d      	bmi.n	800565a <_printf_common+0xbe>
 80055fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005602:	4639      	mov	r1, r7
 8005604:	4630      	mov	r0, r6
 8005606:	47c0      	blx	r8
 8005608:	3001      	adds	r0, #1
 800560a:	d020      	beq.n	800564e <_printf_common+0xb2>
 800560c:	6823      	ldr	r3, [r4, #0]
 800560e:	68e5      	ldr	r5, [r4, #12]
 8005610:	f8d9 2000 	ldr.w	r2, [r9]
 8005614:	f003 0306 	and.w	r3, r3, #6
 8005618:	2b04      	cmp	r3, #4
 800561a:	bf08      	it	eq
 800561c:	1aad      	subeq	r5, r5, r2
 800561e:	68a3      	ldr	r3, [r4, #8]
 8005620:	6922      	ldr	r2, [r4, #16]
 8005622:	bf0c      	ite	eq
 8005624:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005628:	2500      	movne	r5, #0
 800562a:	4293      	cmp	r3, r2
 800562c:	bfc4      	itt	gt
 800562e:	1a9b      	subgt	r3, r3, r2
 8005630:	18ed      	addgt	r5, r5, r3
 8005632:	f04f 0900 	mov.w	r9, #0
 8005636:	341a      	adds	r4, #26
 8005638:	454d      	cmp	r5, r9
 800563a:	d11a      	bne.n	8005672 <_printf_common+0xd6>
 800563c:	2000      	movs	r0, #0
 800563e:	e008      	b.n	8005652 <_printf_common+0xb6>
 8005640:	2301      	movs	r3, #1
 8005642:	4652      	mov	r2, sl
 8005644:	4639      	mov	r1, r7
 8005646:	4630      	mov	r0, r6
 8005648:	47c0      	blx	r8
 800564a:	3001      	adds	r0, #1
 800564c:	d103      	bne.n	8005656 <_printf_common+0xba>
 800564e:	f04f 30ff 	mov.w	r0, #4294967295
 8005652:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005656:	3501      	adds	r5, #1
 8005658:	e7c3      	b.n	80055e2 <_printf_common+0x46>
 800565a:	18e1      	adds	r1, r4, r3
 800565c:	1c5a      	adds	r2, r3, #1
 800565e:	2030      	movs	r0, #48	; 0x30
 8005660:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005664:	4422      	add	r2, r4
 8005666:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800566a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800566e:	3302      	adds	r3, #2
 8005670:	e7c5      	b.n	80055fe <_printf_common+0x62>
 8005672:	2301      	movs	r3, #1
 8005674:	4622      	mov	r2, r4
 8005676:	4639      	mov	r1, r7
 8005678:	4630      	mov	r0, r6
 800567a:	47c0      	blx	r8
 800567c:	3001      	adds	r0, #1
 800567e:	d0e6      	beq.n	800564e <_printf_common+0xb2>
 8005680:	f109 0901 	add.w	r9, r9, #1
 8005684:	e7d8      	b.n	8005638 <_printf_common+0x9c>
	...

08005688 <_printf_i>:
 8005688:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800568c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005690:	460c      	mov	r4, r1
 8005692:	7e09      	ldrb	r1, [r1, #24]
 8005694:	b085      	sub	sp, #20
 8005696:	296e      	cmp	r1, #110	; 0x6e
 8005698:	4617      	mov	r7, r2
 800569a:	4606      	mov	r6, r0
 800569c:	4698      	mov	r8, r3
 800569e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80056a0:	f000 80b3 	beq.w	800580a <_printf_i+0x182>
 80056a4:	d822      	bhi.n	80056ec <_printf_i+0x64>
 80056a6:	2963      	cmp	r1, #99	; 0x63
 80056a8:	d036      	beq.n	8005718 <_printf_i+0x90>
 80056aa:	d80a      	bhi.n	80056c2 <_printf_i+0x3a>
 80056ac:	2900      	cmp	r1, #0
 80056ae:	f000 80b9 	beq.w	8005824 <_printf_i+0x19c>
 80056b2:	2958      	cmp	r1, #88	; 0x58
 80056b4:	f000 8083 	beq.w	80057be <_printf_i+0x136>
 80056b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056bc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80056c0:	e032      	b.n	8005728 <_printf_i+0xa0>
 80056c2:	2964      	cmp	r1, #100	; 0x64
 80056c4:	d001      	beq.n	80056ca <_printf_i+0x42>
 80056c6:	2969      	cmp	r1, #105	; 0x69
 80056c8:	d1f6      	bne.n	80056b8 <_printf_i+0x30>
 80056ca:	6820      	ldr	r0, [r4, #0]
 80056cc:	6813      	ldr	r3, [r2, #0]
 80056ce:	0605      	lsls	r5, r0, #24
 80056d0:	f103 0104 	add.w	r1, r3, #4
 80056d4:	d52a      	bpl.n	800572c <_printf_i+0xa4>
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	6011      	str	r1, [r2, #0]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	da03      	bge.n	80056e6 <_printf_i+0x5e>
 80056de:	222d      	movs	r2, #45	; 0x2d
 80056e0:	425b      	negs	r3, r3
 80056e2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80056e6:	486f      	ldr	r0, [pc, #444]	; (80058a4 <_printf_i+0x21c>)
 80056e8:	220a      	movs	r2, #10
 80056ea:	e039      	b.n	8005760 <_printf_i+0xd8>
 80056ec:	2973      	cmp	r1, #115	; 0x73
 80056ee:	f000 809d 	beq.w	800582c <_printf_i+0x1a4>
 80056f2:	d808      	bhi.n	8005706 <_printf_i+0x7e>
 80056f4:	296f      	cmp	r1, #111	; 0x6f
 80056f6:	d020      	beq.n	800573a <_printf_i+0xb2>
 80056f8:	2970      	cmp	r1, #112	; 0x70
 80056fa:	d1dd      	bne.n	80056b8 <_printf_i+0x30>
 80056fc:	6823      	ldr	r3, [r4, #0]
 80056fe:	f043 0320 	orr.w	r3, r3, #32
 8005702:	6023      	str	r3, [r4, #0]
 8005704:	e003      	b.n	800570e <_printf_i+0x86>
 8005706:	2975      	cmp	r1, #117	; 0x75
 8005708:	d017      	beq.n	800573a <_printf_i+0xb2>
 800570a:	2978      	cmp	r1, #120	; 0x78
 800570c:	d1d4      	bne.n	80056b8 <_printf_i+0x30>
 800570e:	2378      	movs	r3, #120	; 0x78
 8005710:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005714:	4864      	ldr	r0, [pc, #400]	; (80058a8 <_printf_i+0x220>)
 8005716:	e055      	b.n	80057c4 <_printf_i+0x13c>
 8005718:	6813      	ldr	r3, [r2, #0]
 800571a:	1d19      	adds	r1, r3, #4
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	6011      	str	r1, [r2, #0]
 8005720:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005724:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005728:	2301      	movs	r3, #1
 800572a:	e08c      	b.n	8005846 <_printf_i+0x1be>
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	6011      	str	r1, [r2, #0]
 8005730:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005734:	bf18      	it	ne
 8005736:	b21b      	sxthne	r3, r3
 8005738:	e7cf      	b.n	80056da <_printf_i+0x52>
 800573a:	6813      	ldr	r3, [r2, #0]
 800573c:	6825      	ldr	r5, [r4, #0]
 800573e:	1d18      	adds	r0, r3, #4
 8005740:	6010      	str	r0, [r2, #0]
 8005742:	0628      	lsls	r0, r5, #24
 8005744:	d501      	bpl.n	800574a <_printf_i+0xc2>
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	e002      	b.n	8005750 <_printf_i+0xc8>
 800574a:	0668      	lsls	r0, r5, #25
 800574c:	d5fb      	bpl.n	8005746 <_printf_i+0xbe>
 800574e:	881b      	ldrh	r3, [r3, #0]
 8005750:	4854      	ldr	r0, [pc, #336]	; (80058a4 <_printf_i+0x21c>)
 8005752:	296f      	cmp	r1, #111	; 0x6f
 8005754:	bf14      	ite	ne
 8005756:	220a      	movne	r2, #10
 8005758:	2208      	moveq	r2, #8
 800575a:	2100      	movs	r1, #0
 800575c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005760:	6865      	ldr	r5, [r4, #4]
 8005762:	60a5      	str	r5, [r4, #8]
 8005764:	2d00      	cmp	r5, #0
 8005766:	f2c0 8095 	blt.w	8005894 <_printf_i+0x20c>
 800576a:	6821      	ldr	r1, [r4, #0]
 800576c:	f021 0104 	bic.w	r1, r1, #4
 8005770:	6021      	str	r1, [r4, #0]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d13d      	bne.n	80057f2 <_printf_i+0x16a>
 8005776:	2d00      	cmp	r5, #0
 8005778:	f040 808e 	bne.w	8005898 <_printf_i+0x210>
 800577c:	4665      	mov	r5, ip
 800577e:	2a08      	cmp	r2, #8
 8005780:	d10b      	bne.n	800579a <_printf_i+0x112>
 8005782:	6823      	ldr	r3, [r4, #0]
 8005784:	07db      	lsls	r3, r3, #31
 8005786:	d508      	bpl.n	800579a <_printf_i+0x112>
 8005788:	6923      	ldr	r3, [r4, #16]
 800578a:	6862      	ldr	r2, [r4, #4]
 800578c:	429a      	cmp	r2, r3
 800578e:	bfde      	ittt	le
 8005790:	2330      	movle	r3, #48	; 0x30
 8005792:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005796:	f105 35ff 	addle.w	r5, r5, #4294967295
 800579a:	ebac 0305 	sub.w	r3, ip, r5
 800579e:	6123      	str	r3, [r4, #16]
 80057a0:	f8cd 8000 	str.w	r8, [sp]
 80057a4:	463b      	mov	r3, r7
 80057a6:	aa03      	add	r2, sp, #12
 80057a8:	4621      	mov	r1, r4
 80057aa:	4630      	mov	r0, r6
 80057ac:	f7ff fef6 	bl	800559c <_printf_common>
 80057b0:	3001      	adds	r0, #1
 80057b2:	d14d      	bne.n	8005850 <_printf_i+0x1c8>
 80057b4:	f04f 30ff 	mov.w	r0, #4294967295
 80057b8:	b005      	add	sp, #20
 80057ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80057be:	4839      	ldr	r0, [pc, #228]	; (80058a4 <_printf_i+0x21c>)
 80057c0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80057c4:	6813      	ldr	r3, [r2, #0]
 80057c6:	6821      	ldr	r1, [r4, #0]
 80057c8:	1d1d      	adds	r5, r3, #4
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	6015      	str	r5, [r2, #0]
 80057ce:	060a      	lsls	r2, r1, #24
 80057d0:	d50b      	bpl.n	80057ea <_printf_i+0x162>
 80057d2:	07ca      	lsls	r2, r1, #31
 80057d4:	bf44      	itt	mi
 80057d6:	f041 0120 	orrmi.w	r1, r1, #32
 80057da:	6021      	strmi	r1, [r4, #0]
 80057dc:	b91b      	cbnz	r3, 80057e6 <_printf_i+0x15e>
 80057de:	6822      	ldr	r2, [r4, #0]
 80057e0:	f022 0220 	bic.w	r2, r2, #32
 80057e4:	6022      	str	r2, [r4, #0]
 80057e6:	2210      	movs	r2, #16
 80057e8:	e7b7      	b.n	800575a <_printf_i+0xd2>
 80057ea:	064d      	lsls	r5, r1, #25
 80057ec:	bf48      	it	mi
 80057ee:	b29b      	uxthmi	r3, r3
 80057f0:	e7ef      	b.n	80057d2 <_printf_i+0x14a>
 80057f2:	4665      	mov	r5, ip
 80057f4:	fbb3 f1f2 	udiv	r1, r3, r2
 80057f8:	fb02 3311 	mls	r3, r2, r1, r3
 80057fc:	5cc3      	ldrb	r3, [r0, r3]
 80057fe:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005802:	460b      	mov	r3, r1
 8005804:	2900      	cmp	r1, #0
 8005806:	d1f5      	bne.n	80057f4 <_printf_i+0x16c>
 8005808:	e7b9      	b.n	800577e <_printf_i+0xf6>
 800580a:	6813      	ldr	r3, [r2, #0]
 800580c:	6825      	ldr	r5, [r4, #0]
 800580e:	6961      	ldr	r1, [r4, #20]
 8005810:	1d18      	adds	r0, r3, #4
 8005812:	6010      	str	r0, [r2, #0]
 8005814:	0628      	lsls	r0, r5, #24
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	d501      	bpl.n	800581e <_printf_i+0x196>
 800581a:	6019      	str	r1, [r3, #0]
 800581c:	e002      	b.n	8005824 <_printf_i+0x19c>
 800581e:	066a      	lsls	r2, r5, #25
 8005820:	d5fb      	bpl.n	800581a <_printf_i+0x192>
 8005822:	8019      	strh	r1, [r3, #0]
 8005824:	2300      	movs	r3, #0
 8005826:	6123      	str	r3, [r4, #16]
 8005828:	4665      	mov	r5, ip
 800582a:	e7b9      	b.n	80057a0 <_printf_i+0x118>
 800582c:	6813      	ldr	r3, [r2, #0]
 800582e:	1d19      	adds	r1, r3, #4
 8005830:	6011      	str	r1, [r2, #0]
 8005832:	681d      	ldr	r5, [r3, #0]
 8005834:	6862      	ldr	r2, [r4, #4]
 8005836:	2100      	movs	r1, #0
 8005838:	4628      	mov	r0, r5
 800583a:	f7fa fcc9 	bl	80001d0 <memchr>
 800583e:	b108      	cbz	r0, 8005844 <_printf_i+0x1bc>
 8005840:	1b40      	subs	r0, r0, r5
 8005842:	6060      	str	r0, [r4, #4]
 8005844:	6863      	ldr	r3, [r4, #4]
 8005846:	6123      	str	r3, [r4, #16]
 8005848:	2300      	movs	r3, #0
 800584a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800584e:	e7a7      	b.n	80057a0 <_printf_i+0x118>
 8005850:	6923      	ldr	r3, [r4, #16]
 8005852:	462a      	mov	r2, r5
 8005854:	4639      	mov	r1, r7
 8005856:	4630      	mov	r0, r6
 8005858:	47c0      	blx	r8
 800585a:	3001      	adds	r0, #1
 800585c:	d0aa      	beq.n	80057b4 <_printf_i+0x12c>
 800585e:	6823      	ldr	r3, [r4, #0]
 8005860:	079b      	lsls	r3, r3, #30
 8005862:	d413      	bmi.n	800588c <_printf_i+0x204>
 8005864:	68e0      	ldr	r0, [r4, #12]
 8005866:	9b03      	ldr	r3, [sp, #12]
 8005868:	4298      	cmp	r0, r3
 800586a:	bfb8      	it	lt
 800586c:	4618      	movlt	r0, r3
 800586e:	e7a3      	b.n	80057b8 <_printf_i+0x130>
 8005870:	2301      	movs	r3, #1
 8005872:	464a      	mov	r2, r9
 8005874:	4639      	mov	r1, r7
 8005876:	4630      	mov	r0, r6
 8005878:	47c0      	blx	r8
 800587a:	3001      	adds	r0, #1
 800587c:	d09a      	beq.n	80057b4 <_printf_i+0x12c>
 800587e:	3501      	adds	r5, #1
 8005880:	68e3      	ldr	r3, [r4, #12]
 8005882:	9a03      	ldr	r2, [sp, #12]
 8005884:	1a9b      	subs	r3, r3, r2
 8005886:	42ab      	cmp	r3, r5
 8005888:	dcf2      	bgt.n	8005870 <_printf_i+0x1e8>
 800588a:	e7eb      	b.n	8005864 <_printf_i+0x1dc>
 800588c:	2500      	movs	r5, #0
 800588e:	f104 0919 	add.w	r9, r4, #25
 8005892:	e7f5      	b.n	8005880 <_printf_i+0x1f8>
 8005894:	2b00      	cmp	r3, #0
 8005896:	d1ac      	bne.n	80057f2 <_printf_i+0x16a>
 8005898:	7803      	ldrb	r3, [r0, #0]
 800589a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800589e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058a2:	e76c      	b.n	800577e <_printf_i+0xf6>
 80058a4:	08005f75 	.word	0x08005f75
 80058a8:	08005f86 	.word	0x08005f86

080058ac <_sbrk_r>:
 80058ac:	b538      	push	{r3, r4, r5, lr}
 80058ae:	4c06      	ldr	r4, [pc, #24]	; (80058c8 <_sbrk_r+0x1c>)
 80058b0:	2300      	movs	r3, #0
 80058b2:	4605      	mov	r5, r0
 80058b4:	4608      	mov	r0, r1
 80058b6:	6023      	str	r3, [r4, #0]
 80058b8:	f7fb f9cc 	bl	8000c54 <_sbrk>
 80058bc:	1c43      	adds	r3, r0, #1
 80058be:	d102      	bne.n	80058c6 <_sbrk_r+0x1a>
 80058c0:	6823      	ldr	r3, [r4, #0]
 80058c2:	b103      	cbz	r3, 80058c6 <_sbrk_r+0x1a>
 80058c4:	602b      	str	r3, [r5, #0]
 80058c6:	bd38      	pop	{r3, r4, r5, pc}
 80058c8:	2000019c 	.word	0x2000019c

080058cc <__sread>:
 80058cc:	b510      	push	{r4, lr}
 80058ce:	460c      	mov	r4, r1
 80058d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058d4:	f000 fa96 	bl	8005e04 <_read_r>
 80058d8:	2800      	cmp	r0, #0
 80058da:	bfab      	itete	ge
 80058dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80058de:	89a3      	ldrhlt	r3, [r4, #12]
 80058e0:	181b      	addge	r3, r3, r0
 80058e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80058e6:	bfac      	ite	ge
 80058e8:	6563      	strge	r3, [r4, #84]	; 0x54
 80058ea:	81a3      	strhlt	r3, [r4, #12]
 80058ec:	bd10      	pop	{r4, pc}

080058ee <__swrite>:
 80058ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058f2:	461f      	mov	r7, r3
 80058f4:	898b      	ldrh	r3, [r1, #12]
 80058f6:	05db      	lsls	r3, r3, #23
 80058f8:	4605      	mov	r5, r0
 80058fa:	460c      	mov	r4, r1
 80058fc:	4616      	mov	r6, r2
 80058fe:	d505      	bpl.n	800590c <__swrite+0x1e>
 8005900:	2302      	movs	r3, #2
 8005902:	2200      	movs	r2, #0
 8005904:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005908:	f000 f9b6 	bl	8005c78 <_lseek_r>
 800590c:	89a3      	ldrh	r3, [r4, #12]
 800590e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005912:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005916:	81a3      	strh	r3, [r4, #12]
 8005918:	4632      	mov	r2, r6
 800591a:	463b      	mov	r3, r7
 800591c:	4628      	mov	r0, r5
 800591e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005922:	f000 b869 	b.w	80059f8 <_write_r>

08005926 <__sseek>:
 8005926:	b510      	push	{r4, lr}
 8005928:	460c      	mov	r4, r1
 800592a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800592e:	f000 f9a3 	bl	8005c78 <_lseek_r>
 8005932:	1c43      	adds	r3, r0, #1
 8005934:	89a3      	ldrh	r3, [r4, #12]
 8005936:	bf15      	itete	ne
 8005938:	6560      	strne	r0, [r4, #84]	; 0x54
 800593a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800593e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005942:	81a3      	strheq	r3, [r4, #12]
 8005944:	bf18      	it	ne
 8005946:	81a3      	strhne	r3, [r4, #12]
 8005948:	bd10      	pop	{r4, pc}

0800594a <__sclose>:
 800594a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800594e:	f000 b8d3 	b.w	8005af8 <_close_r>
	...

08005954 <__swbuf_r>:
 8005954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005956:	460e      	mov	r6, r1
 8005958:	4614      	mov	r4, r2
 800595a:	4605      	mov	r5, r0
 800595c:	b118      	cbz	r0, 8005966 <__swbuf_r+0x12>
 800595e:	6983      	ldr	r3, [r0, #24]
 8005960:	b90b      	cbnz	r3, 8005966 <__swbuf_r+0x12>
 8005962:	f7ff fbf7 	bl	8005154 <__sinit>
 8005966:	4b21      	ldr	r3, [pc, #132]	; (80059ec <__swbuf_r+0x98>)
 8005968:	429c      	cmp	r4, r3
 800596a:	d12a      	bne.n	80059c2 <__swbuf_r+0x6e>
 800596c:	686c      	ldr	r4, [r5, #4]
 800596e:	69a3      	ldr	r3, [r4, #24]
 8005970:	60a3      	str	r3, [r4, #8]
 8005972:	89a3      	ldrh	r3, [r4, #12]
 8005974:	071a      	lsls	r2, r3, #28
 8005976:	d52e      	bpl.n	80059d6 <__swbuf_r+0x82>
 8005978:	6923      	ldr	r3, [r4, #16]
 800597a:	b363      	cbz	r3, 80059d6 <__swbuf_r+0x82>
 800597c:	6923      	ldr	r3, [r4, #16]
 800597e:	6820      	ldr	r0, [r4, #0]
 8005980:	1ac0      	subs	r0, r0, r3
 8005982:	6963      	ldr	r3, [r4, #20]
 8005984:	b2f6      	uxtb	r6, r6
 8005986:	4283      	cmp	r3, r0
 8005988:	4637      	mov	r7, r6
 800598a:	dc04      	bgt.n	8005996 <__swbuf_r+0x42>
 800598c:	4621      	mov	r1, r4
 800598e:	4628      	mov	r0, r5
 8005990:	f000 f948 	bl	8005c24 <_fflush_r>
 8005994:	bb28      	cbnz	r0, 80059e2 <__swbuf_r+0x8e>
 8005996:	68a3      	ldr	r3, [r4, #8]
 8005998:	3b01      	subs	r3, #1
 800599a:	60a3      	str	r3, [r4, #8]
 800599c:	6823      	ldr	r3, [r4, #0]
 800599e:	1c5a      	adds	r2, r3, #1
 80059a0:	6022      	str	r2, [r4, #0]
 80059a2:	701e      	strb	r6, [r3, #0]
 80059a4:	6963      	ldr	r3, [r4, #20]
 80059a6:	3001      	adds	r0, #1
 80059a8:	4283      	cmp	r3, r0
 80059aa:	d004      	beq.n	80059b6 <__swbuf_r+0x62>
 80059ac:	89a3      	ldrh	r3, [r4, #12]
 80059ae:	07db      	lsls	r3, r3, #31
 80059b0:	d519      	bpl.n	80059e6 <__swbuf_r+0x92>
 80059b2:	2e0a      	cmp	r6, #10
 80059b4:	d117      	bne.n	80059e6 <__swbuf_r+0x92>
 80059b6:	4621      	mov	r1, r4
 80059b8:	4628      	mov	r0, r5
 80059ba:	f000 f933 	bl	8005c24 <_fflush_r>
 80059be:	b190      	cbz	r0, 80059e6 <__swbuf_r+0x92>
 80059c0:	e00f      	b.n	80059e2 <__swbuf_r+0x8e>
 80059c2:	4b0b      	ldr	r3, [pc, #44]	; (80059f0 <__swbuf_r+0x9c>)
 80059c4:	429c      	cmp	r4, r3
 80059c6:	d101      	bne.n	80059cc <__swbuf_r+0x78>
 80059c8:	68ac      	ldr	r4, [r5, #8]
 80059ca:	e7d0      	b.n	800596e <__swbuf_r+0x1a>
 80059cc:	4b09      	ldr	r3, [pc, #36]	; (80059f4 <__swbuf_r+0xa0>)
 80059ce:	429c      	cmp	r4, r3
 80059d0:	bf08      	it	eq
 80059d2:	68ec      	ldreq	r4, [r5, #12]
 80059d4:	e7cb      	b.n	800596e <__swbuf_r+0x1a>
 80059d6:	4621      	mov	r1, r4
 80059d8:	4628      	mov	r0, r5
 80059da:	f000 f81f 	bl	8005a1c <__swsetup_r>
 80059de:	2800      	cmp	r0, #0
 80059e0:	d0cc      	beq.n	800597c <__swbuf_r+0x28>
 80059e2:	f04f 37ff 	mov.w	r7, #4294967295
 80059e6:	4638      	mov	r0, r7
 80059e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059ea:	bf00      	nop
 80059ec:	08005f24 	.word	0x08005f24
 80059f0:	08005f44 	.word	0x08005f44
 80059f4:	08005f04 	.word	0x08005f04

080059f8 <_write_r>:
 80059f8:	b538      	push	{r3, r4, r5, lr}
 80059fa:	4c07      	ldr	r4, [pc, #28]	; (8005a18 <_write_r+0x20>)
 80059fc:	4605      	mov	r5, r0
 80059fe:	4608      	mov	r0, r1
 8005a00:	4611      	mov	r1, r2
 8005a02:	2200      	movs	r2, #0
 8005a04:	6022      	str	r2, [r4, #0]
 8005a06:	461a      	mov	r2, r3
 8005a08:	f7fb f854 	bl	8000ab4 <_write>
 8005a0c:	1c43      	adds	r3, r0, #1
 8005a0e:	d102      	bne.n	8005a16 <_write_r+0x1e>
 8005a10:	6823      	ldr	r3, [r4, #0]
 8005a12:	b103      	cbz	r3, 8005a16 <_write_r+0x1e>
 8005a14:	602b      	str	r3, [r5, #0]
 8005a16:	bd38      	pop	{r3, r4, r5, pc}
 8005a18:	2000019c 	.word	0x2000019c

08005a1c <__swsetup_r>:
 8005a1c:	4b32      	ldr	r3, [pc, #200]	; (8005ae8 <__swsetup_r+0xcc>)
 8005a1e:	b570      	push	{r4, r5, r6, lr}
 8005a20:	681d      	ldr	r5, [r3, #0]
 8005a22:	4606      	mov	r6, r0
 8005a24:	460c      	mov	r4, r1
 8005a26:	b125      	cbz	r5, 8005a32 <__swsetup_r+0x16>
 8005a28:	69ab      	ldr	r3, [r5, #24]
 8005a2a:	b913      	cbnz	r3, 8005a32 <__swsetup_r+0x16>
 8005a2c:	4628      	mov	r0, r5
 8005a2e:	f7ff fb91 	bl	8005154 <__sinit>
 8005a32:	4b2e      	ldr	r3, [pc, #184]	; (8005aec <__swsetup_r+0xd0>)
 8005a34:	429c      	cmp	r4, r3
 8005a36:	d10f      	bne.n	8005a58 <__swsetup_r+0x3c>
 8005a38:	686c      	ldr	r4, [r5, #4]
 8005a3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a3e:	b29a      	uxth	r2, r3
 8005a40:	0715      	lsls	r5, r2, #28
 8005a42:	d42c      	bmi.n	8005a9e <__swsetup_r+0x82>
 8005a44:	06d0      	lsls	r0, r2, #27
 8005a46:	d411      	bmi.n	8005a6c <__swsetup_r+0x50>
 8005a48:	2209      	movs	r2, #9
 8005a4a:	6032      	str	r2, [r6, #0]
 8005a4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a50:	81a3      	strh	r3, [r4, #12]
 8005a52:	f04f 30ff 	mov.w	r0, #4294967295
 8005a56:	e03e      	b.n	8005ad6 <__swsetup_r+0xba>
 8005a58:	4b25      	ldr	r3, [pc, #148]	; (8005af0 <__swsetup_r+0xd4>)
 8005a5a:	429c      	cmp	r4, r3
 8005a5c:	d101      	bne.n	8005a62 <__swsetup_r+0x46>
 8005a5e:	68ac      	ldr	r4, [r5, #8]
 8005a60:	e7eb      	b.n	8005a3a <__swsetup_r+0x1e>
 8005a62:	4b24      	ldr	r3, [pc, #144]	; (8005af4 <__swsetup_r+0xd8>)
 8005a64:	429c      	cmp	r4, r3
 8005a66:	bf08      	it	eq
 8005a68:	68ec      	ldreq	r4, [r5, #12]
 8005a6a:	e7e6      	b.n	8005a3a <__swsetup_r+0x1e>
 8005a6c:	0751      	lsls	r1, r2, #29
 8005a6e:	d512      	bpl.n	8005a96 <__swsetup_r+0x7a>
 8005a70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a72:	b141      	cbz	r1, 8005a86 <__swsetup_r+0x6a>
 8005a74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a78:	4299      	cmp	r1, r3
 8005a7a:	d002      	beq.n	8005a82 <__swsetup_r+0x66>
 8005a7c:	4630      	mov	r0, r6
 8005a7e:	f000 f973 	bl	8005d68 <_free_r>
 8005a82:	2300      	movs	r3, #0
 8005a84:	6363      	str	r3, [r4, #52]	; 0x34
 8005a86:	89a3      	ldrh	r3, [r4, #12]
 8005a88:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005a8c:	81a3      	strh	r3, [r4, #12]
 8005a8e:	2300      	movs	r3, #0
 8005a90:	6063      	str	r3, [r4, #4]
 8005a92:	6923      	ldr	r3, [r4, #16]
 8005a94:	6023      	str	r3, [r4, #0]
 8005a96:	89a3      	ldrh	r3, [r4, #12]
 8005a98:	f043 0308 	orr.w	r3, r3, #8
 8005a9c:	81a3      	strh	r3, [r4, #12]
 8005a9e:	6923      	ldr	r3, [r4, #16]
 8005aa0:	b94b      	cbnz	r3, 8005ab6 <__swsetup_r+0x9a>
 8005aa2:	89a3      	ldrh	r3, [r4, #12]
 8005aa4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005aa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005aac:	d003      	beq.n	8005ab6 <__swsetup_r+0x9a>
 8005aae:	4621      	mov	r1, r4
 8005ab0:	4630      	mov	r0, r6
 8005ab2:	f000 f917 	bl	8005ce4 <__smakebuf_r>
 8005ab6:	89a2      	ldrh	r2, [r4, #12]
 8005ab8:	f012 0301 	ands.w	r3, r2, #1
 8005abc:	d00c      	beq.n	8005ad8 <__swsetup_r+0xbc>
 8005abe:	2300      	movs	r3, #0
 8005ac0:	60a3      	str	r3, [r4, #8]
 8005ac2:	6963      	ldr	r3, [r4, #20]
 8005ac4:	425b      	negs	r3, r3
 8005ac6:	61a3      	str	r3, [r4, #24]
 8005ac8:	6923      	ldr	r3, [r4, #16]
 8005aca:	b953      	cbnz	r3, 8005ae2 <__swsetup_r+0xc6>
 8005acc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ad0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005ad4:	d1ba      	bne.n	8005a4c <__swsetup_r+0x30>
 8005ad6:	bd70      	pop	{r4, r5, r6, pc}
 8005ad8:	0792      	lsls	r2, r2, #30
 8005ada:	bf58      	it	pl
 8005adc:	6963      	ldrpl	r3, [r4, #20]
 8005ade:	60a3      	str	r3, [r4, #8]
 8005ae0:	e7f2      	b.n	8005ac8 <__swsetup_r+0xac>
 8005ae2:	2000      	movs	r0, #0
 8005ae4:	e7f7      	b.n	8005ad6 <__swsetup_r+0xba>
 8005ae6:	bf00      	nop
 8005ae8:	2000000c 	.word	0x2000000c
 8005aec:	08005f24 	.word	0x08005f24
 8005af0:	08005f44 	.word	0x08005f44
 8005af4:	08005f04 	.word	0x08005f04

08005af8 <_close_r>:
 8005af8:	b538      	push	{r3, r4, r5, lr}
 8005afa:	4c06      	ldr	r4, [pc, #24]	; (8005b14 <_close_r+0x1c>)
 8005afc:	2300      	movs	r3, #0
 8005afe:	4605      	mov	r5, r0
 8005b00:	4608      	mov	r0, r1
 8005b02:	6023      	str	r3, [r4, #0]
 8005b04:	f7fb f871 	bl	8000bea <_close>
 8005b08:	1c43      	adds	r3, r0, #1
 8005b0a:	d102      	bne.n	8005b12 <_close_r+0x1a>
 8005b0c:	6823      	ldr	r3, [r4, #0]
 8005b0e:	b103      	cbz	r3, 8005b12 <_close_r+0x1a>
 8005b10:	602b      	str	r3, [r5, #0]
 8005b12:	bd38      	pop	{r3, r4, r5, pc}
 8005b14:	2000019c 	.word	0x2000019c

08005b18 <__sflush_r>:
 8005b18:	898a      	ldrh	r2, [r1, #12]
 8005b1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b1e:	4605      	mov	r5, r0
 8005b20:	0710      	lsls	r0, r2, #28
 8005b22:	460c      	mov	r4, r1
 8005b24:	d458      	bmi.n	8005bd8 <__sflush_r+0xc0>
 8005b26:	684b      	ldr	r3, [r1, #4]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	dc05      	bgt.n	8005b38 <__sflush_r+0x20>
 8005b2c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	dc02      	bgt.n	8005b38 <__sflush_r+0x20>
 8005b32:	2000      	movs	r0, #0
 8005b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b3a:	2e00      	cmp	r6, #0
 8005b3c:	d0f9      	beq.n	8005b32 <__sflush_r+0x1a>
 8005b3e:	2300      	movs	r3, #0
 8005b40:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005b44:	682f      	ldr	r7, [r5, #0]
 8005b46:	6a21      	ldr	r1, [r4, #32]
 8005b48:	602b      	str	r3, [r5, #0]
 8005b4a:	d032      	beq.n	8005bb2 <__sflush_r+0x9a>
 8005b4c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005b4e:	89a3      	ldrh	r3, [r4, #12]
 8005b50:	075a      	lsls	r2, r3, #29
 8005b52:	d505      	bpl.n	8005b60 <__sflush_r+0x48>
 8005b54:	6863      	ldr	r3, [r4, #4]
 8005b56:	1ac0      	subs	r0, r0, r3
 8005b58:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005b5a:	b10b      	cbz	r3, 8005b60 <__sflush_r+0x48>
 8005b5c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b5e:	1ac0      	subs	r0, r0, r3
 8005b60:	2300      	movs	r3, #0
 8005b62:	4602      	mov	r2, r0
 8005b64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b66:	6a21      	ldr	r1, [r4, #32]
 8005b68:	4628      	mov	r0, r5
 8005b6a:	47b0      	blx	r6
 8005b6c:	1c43      	adds	r3, r0, #1
 8005b6e:	89a3      	ldrh	r3, [r4, #12]
 8005b70:	d106      	bne.n	8005b80 <__sflush_r+0x68>
 8005b72:	6829      	ldr	r1, [r5, #0]
 8005b74:	291d      	cmp	r1, #29
 8005b76:	d848      	bhi.n	8005c0a <__sflush_r+0xf2>
 8005b78:	4a29      	ldr	r2, [pc, #164]	; (8005c20 <__sflush_r+0x108>)
 8005b7a:	40ca      	lsrs	r2, r1
 8005b7c:	07d6      	lsls	r6, r2, #31
 8005b7e:	d544      	bpl.n	8005c0a <__sflush_r+0xf2>
 8005b80:	2200      	movs	r2, #0
 8005b82:	6062      	str	r2, [r4, #4]
 8005b84:	04d9      	lsls	r1, r3, #19
 8005b86:	6922      	ldr	r2, [r4, #16]
 8005b88:	6022      	str	r2, [r4, #0]
 8005b8a:	d504      	bpl.n	8005b96 <__sflush_r+0x7e>
 8005b8c:	1c42      	adds	r2, r0, #1
 8005b8e:	d101      	bne.n	8005b94 <__sflush_r+0x7c>
 8005b90:	682b      	ldr	r3, [r5, #0]
 8005b92:	b903      	cbnz	r3, 8005b96 <__sflush_r+0x7e>
 8005b94:	6560      	str	r0, [r4, #84]	; 0x54
 8005b96:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b98:	602f      	str	r7, [r5, #0]
 8005b9a:	2900      	cmp	r1, #0
 8005b9c:	d0c9      	beq.n	8005b32 <__sflush_r+0x1a>
 8005b9e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ba2:	4299      	cmp	r1, r3
 8005ba4:	d002      	beq.n	8005bac <__sflush_r+0x94>
 8005ba6:	4628      	mov	r0, r5
 8005ba8:	f000 f8de 	bl	8005d68 <_free_r>
 8005bac:	2000      	movs	r0, #0
 8005bae:	6360      	str	r0, [r4, #52]	; 0x34
 8005bb0:	e7c0      	b.n	8005b34 <__sflush_r+0x1c>
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	4628      	mov	r0, r5
 8005bb6:	47b0      	blx	r6
 8005bb8:	1c41      	adds	r1, r0, #1
 8005bba:	d1c8      	bne.n	8005b4e <__sflush_r+0x36>
 8005bbc:	682b      	ldr	r3, [r5, #0]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d0c5      	beq.n	8005b4e <__sflush_r+0x36>
 8005bc2:	2b1d      	cmp	r3, #29
 8005bc4:	d001      	beq.n	8005bca <__sflush_r+0xb2>
 8005bc6:	2b16      	cmp	r3, #22
 8005bc8:	d101      	bne.n	8005bce <__sflush_r+0xb6>
 8005bca:	602f      	str	r7, [r5, #0]
 8005bcc:	e7b1      	b.n	8005b32 <__sflush_r+0x1a>
 8005bce:	89a3      	ldrh	r3, [r4, #12]
 8005bd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bd4:	81a3      	strh	r3, [r4, #12]
 8005bd6:	e7ad      	b.n	8005b34 <__sflush_r+0x1c>
 8005bd8:	690f      	ldr	r7, [r1, #16]
 8005bda:	2f00      	cmp	r7, #0
 8005bdc:	d0a9      	beq.n	8005b32 <__sflush_r+0x1a>
 8005bde:	0793      	lsls	r3, r2, #30
 8005be0:	680e      	ldr	r6, [r1, #0]
 8005be2:	bf08      	it	eq
 8005be4:	694b      	ldreq	r3, [r1, #20]
 8005be6:	600f      	str	r7, [r1, #0]
 8005be8:	bf18      	it	ne
 8005bea:	2300      	movne	r3, #0
 8005bec:	eba6 0807 	sub.w	r8, r6, r7
 8005bf0:	608b      	str	r3, [r1, #8]
 8005bf2:	f1b8 0f00 	cmp.w	r8, #0
 8005bf6:	dd9c      	ble.n	8005b32 <__sflush_r+0x1a>
 8005bf8:	4643      	mov	r3, r8
 8005bfa:	463a      	mov	r2, r7
 8005bfc:	6a21      	ldr	r1, [r4, #32]
 8005bfe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005c00:	4628      	mov	r0, r5
 8005c02:	47b0      	blx	r6
 8005c04:	2800      	cmp	r0, #0
 8005c06:	dc06      	bgt.n	8005c16 <__sflush_r+0xfe>
 8005c08:	89a3      	ldrh	r3, [r4, #12]
 8005c0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c0e:	81a3      	strh	r3, [r4, #12]
 8005c10:	f04f 30ff 	mov.w	r0, #4294967295
 8005c14:	e78e      	b.n	8005b34 <__sflush_r+0x1c>
 8005c16:	4407      	add	r7, r0
 8005c18:	eba8 0800 	sub.w	r8, r8, r0
 8005c1c:	e7e9      	b.n	8005bf2 <__sflush_r+0xda>
 8005c1e:	bf00      	nop
 8005c20:	20400001 	.word	0x20400001

08005c24 <_fflush_r>:
 8005c24:	b538      	push	{r3, r4, r5, lr}
 8005c26:	690b      	ldr	r3, [r1, #16]
 8005c28:	4605      	mov	r5, r0
 8005c2a:	460c      	mov	r4, r1
 8005c2c:	b1db      	cbz	r3, 8005c66 <_fflush_r+0x42>
 8005c2e:	b118      	cbz	r0, 8005c38 <_fflush_r+0x14>
 8005c30:	6983      	ldr	r3, [r0, #24]
 8005c32:	b90b      	cbnz	r3, 8005c38 <_fflush_r+0x14>
 8005c34:	f7ff fa8e 	bl	8005154 <__sinit>
 8005c38:	4b0c      	ldr	r3, [pc, #48]	; (8005c6c <_fflush_r+0x48>)
 8005c3a:	429c      	cmp	r4, r3
 8005c3c:	d109      	bne.n	8005c52 <_fflush_r+0x2e>
 8005c3e:	686c      	ldr	r4, [r5, #4]
 8005c40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c44:	b17b      	cbz	r3, 8005c66 <_fflush_r+0x42>
 8005c46:	4621      	mov	r1, r4
 8005c48:	4628      	mov	r0, r5
 8005c4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c4e:	f7ff bf63 	b.w	8005b18 <__sflush_r>
 8005c52:	4b07      	ldr	r3, [pc, #28]	; (8005c70 <_fflush_r+0x4c>)
 8005c54:	429c      	cmp	r4, r3
 8005c56:	d101      	bne.n	8005c5c <_fflush_r+0x38>
 8005c58:	68ac      	ldr	r4, [r5, #8]
 8005c5a:	e7f1      	b.n	8005c40 <_fflush_r+0x1c>
 8005c5c:	4b05      	ldr	r3, [pc, #20]	; (8005c74 <_fflush_r+0x50>)
 8005c5e:	429c      	cmp	r4, r3
 8005c60:	bf08      	it	eq
 8005c62:	68ec      	ldreq	r4, [r5, #12]
 8005c64:	e7ec      	b.n	8005c40 <_fflush_r+0x1c>
 8005c66:	2000      	movs	r0, #0
 8005c68:	bd38      	pop	{r3, r4, r5, pc}
 8005c6a:	bf00      	nop
 8005c6c:	08005f24 	.word	0x08005f24
 8005c70:	08005f44 	.word	0x08005f44
 8005c74:	08005f04 	.word	0x08005f04

08005c78 <_lseek_r>:
 8005c78:	b538      	push	{r3, r4, r5, lr}
 8005c7a:	4c07      	ldr	r4, [pc, #28]	; (8005c98 <_lseek_r+0x20>)
 8005c7c:	4605      	mov	r5, r0
 8005c7e:	4608      	mov	r0, r1
 8005c80:	4611      	mov	r1, r2
 8005c82:	2200      	movs	r2, #0
 8005c84:	6022      	str	r2, [r4, #0]
 8005c86:	461a      	mov	r2, r3
 8005c88:	f7fa ffd6 	bl	8000c38 <_lseek>
 8005c8c:	1c43      	adds	r3, r0, #1
 8005c8e:	d102      	bne.n	8005c96 <_lseek_r+0x1e>
 8005c90:	6823      	ldr	r3, [r4, #0]
 8005c92:	b103      	cbz	r3, 8005c96 <_lseek_r+0x1e>
 8005c94:	602b      	str	r3, [r5, #0]
 8005c96:	bd38      	pop	{r3, r4, r5, pc}
 8005c98:	2000019c 	.word	0x2000019c

08005c9c <__swhatbuf_r>:
 8005c9c:	b570      	push	{r4, r5, r6, lr}
 8005c9e:	460e      	mov	r6, r1
 8005ca0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ca4:	2900      	cmp	r1, #0
 8005ca6:	b096      	sub	sp, #88	; 0x58
 8005ca8:	4614      	mov	r4, r2
 8005caa:	461d      	mov	r5, r3
 8005cac:	da07      	bge.n	8005cbe <__swhatbuf_r+0x22>
 8005cae:	2300      	movs	r3, #0
 8005cb0:	602b      	str	r3, [r5, #0]
 8005cb2:	89b3      	ldrh	r3, [r6, #12]
 8005cb4:	061a      	lsls	r2, r3, #24
 8005cb6:	d410      	bmi.n	8005cda <__swhatbuf_r+0x3e>
 8005cb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005cbc:	e00e      	b.n	8005cdc <__swhatbuf_r+0x40>
 8005cbe:	466a      	mov	r2, sp
 8005cc0:	f000 f8b2 	bl	8005e28 <_fstat_r>
 8005cc4:	2800      	cmp	r0, #0
 8005cc6:	dbf2      	blt.n	8005cae <__swhatbuf_r+0x12>
 8005cc8:	9a01      	ldr	r2, [sp, #4]
 8005cca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005cce:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005cd2:	425a      	negs	r2, r3
 8005cd4:	415a      	adcs	r2, r3
 8005cd6:	602a      	str	r2, [r5, #0]
 8005cd8:	e7ee      	b.n	8005cb8 <__swhatbuf_r+0x1c>
 8005cda:	2340      	movs	r3, #64	; 0x40
 8005cdc:	2000      	movs	r0, #0
 8005cde:	6023      	str	r3, [r4, #0]
 8005ce0:	b016      	add	sp, #88	; 0x58
 8005ce2:	bd70      	pop	{r4, r5, r6, pc}

08005ce4 <__smakebuf_r>:
 8005ce4:	898b      	ldrh	r3, [r1, #12]
 8005ce6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005ce8:	079d      	lsls	r5, r3, #30
 8005cea:	4606      	mov	r6, r0
 8005cec:	460c      	mov	r4, r1
 8005cee:	d507      	bpl.n	8005d00 <__smakebuf_r+0x1c>
 8005cf0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005cf4:	6023      	str	r3, [r4, #0]
 8005cf6:	6123      	str	r3, [r4, #16]
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	6163      	str	r3, [r4, #20]
 8005cfc:	b002      	add	sp, #8
 8005cfe:	bd70      	pop	{r4, r5, r6, pc}
 8005d00:	ab01      	add	r3, sp, #4
 8005d02:	466a      	mov	r2, sp
 8005d04:	f7ff ffca 	bl	8005c9c <__swhatbuf_r>
 8005d08:	9900      	ldr	r1, [sp, #0]
 8005d0a:	4605      	mov	r5, r0
 8005d0c:	4630      	mov	r0, r6
 8005d0e:	f7ff faab 	bl	8005268 <_malloc_r>
 8005d12:	b948      	cbnz	r0, 8005d28 <__smakebuf_r+0x44>
 8005d14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d18:	059a      	lsls	r2, r3, #22
 8005d1a:	d4ef      	bmi.n	8005cfc <__smakebuf_r+0x18>
 8005d1c:	f023 0303 	bic.w	r3, r3, #3
 8005d20:	f043 0302 	orr.w	r3, r3, #2
 8005d24:	81a3      	strh	r3, [r4, #12]
 8005d26:	e7e3      	b.n	8005cf0 <__smakebuf_r+0xc>
 8005d28:	4b0d      	ldr	r3, [pc, #52]	; (8005d60 <__smakebuf_r+0x7c>)
 8005d2a:	62b3      	str	r3, [r6, #40]	; 0x28
 8005d2c:	89a3      	ldrh	r3, [r4, #12]
 8005d2e:	6020      	str	r0, [r4, #0]
 8005d30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d34:	81a3      	strh	r3, [r4, #12]
 8005d36:	9b00      	ldr	r3, [sp, #0]
 8005d38:	6163      	str	r3, [r4, #20]
 8005d3a:	9b01      	ldr	r3, [sp, #4]
 8005d3c:	6120      	str	r0, [r4, #16]
 8005d3e:	b15b      	cbz	r3, 8005d58 <__smakebuf_r+0x74>
 8005d40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d44:	4630      	mov	r0, r6
 8005d46:	f000 f881 	bl	8005e4c <_isatty_r>
 8005d4a:	b128      	cbz	r0, 8005d58 <__smakebuf_r+0x74>
 8005d4c:	89a3      	ldrh	r3, [r4, #12]
 8005d4e:	f023 0303 	bic.w	r3, r3, #3
 8005d52:	f043 0301 	orr.w	r3, r3, #1
 8005d56:	81a3      	strh	r3, [r4, #12]
 8005d58:	89a3      	ldrh	r3, [r4, #12]
 8005d5a:	431d      	orrs	r5, r3
 8005d5c:	81a5      	strh	r5, [r4, #12]
 8005d5e:	e7cd      	b.n	8005cfc <__smakebuf_r+0x18>
 8005d60:	0800511d 	.word	0x0800511d

08005d64 <__malloc_lock>:
 8005d64:	4770      	bx	lr

08005d66 <__malloc_unlock>:
 8005d66:	4770      	bx	lr

08005d68 <_free_r>:
 8005d68:	b538      	push	{r3, r4, r5, lr}
 8005d6a:	4605      	mov	r5, r0
 8005d6c:	2900      	cmp	r1, #0
 8005d6e:	d045      	beq.n	8005dfc <_free_r+0x94>
 8005d70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d74:	1f0c      	subs	r4, r1, #4
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	bfb8      	it	lt
 8005d7a:	18e4      	addlt	r4, r4, r3
 8005d7c:	f7ff fff2 	bl	8005d64 <__malloc_lock>
 8005d80:	4a1f      	ldr	r2, [pc, #124]	; (8005e00 <_free_r+0x98>)
 8005d82:	6813      	ldr	r3, [r2, #0]
 8005d84:	4610      	mov	r0, r2
 8005d86:	b933      	cbnz	r3, 8005d96 <_free_r+0x2e>
 8005d88:	6063      	str	r3, [r4, #4]
 8005d8a:	6014      	str	r4, [r2, #0]
 8005d8c:	4628      	mov	r0, r5
 8005d8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d92:	f7ff bfe8 	b.w	8005d66 <__malloc_unlock>
 8005d96:	42a3      	cmp	r3, r4
 8005d98:	d90c      	bls.n	8005db4 <_free_r+0x4c>
 8005d9a:	6821      	ldr	r1, [r4, #0]
 8005d9c:	1862      	adds	r2, r4, r1
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	bf04      	itt	eq
 8005da2:	681a      	ldreq	r2, [r3, #0]
 8005da4:	685b      	ldreq	r3, [r3, #4]
 8005da6:	6063      	str	r3, [r4, #4]
 8005da8:	bf04      	itt	eq
 8005daa:	1852      	addeq	r2, r2, r1
 8005dac:	6022      	streq	r2, [r4, #0]
 8005dae:	6004      	str	r4, [r0, #0]
 8005db0:	e7ec      	b.n	8005d8c <_free_r+0x24>
 8005db2:	4613      	mov	r3, r2
 8005db4:	685a      	ldr	r2, [r3, #4]
 8005db6:	b10a      	cbz	r2, 8005dbc <_free_r+0x54>
 8005db8:	42a2      	cmp	r2, r4
 8005dba:	d9fa      	bls.n	8005db2 <_free_r+0x4a>
 8005dbc:	6819      	ldr	r1, [r3, #0]
 8005dbe:	1858      	adds	r0, r3, r1
 8005dc0:	42a0      	cmp	r0, r4
 8005dc2:	d10b      	bne.n	8005ddc <_free_r+0x74>
 8005dc4:	6820      	ldr	r0, [r4, #0]
 8005dc6:	4401      	add	r1, r0
 8005dc8:	1858      	adds	r0, r3, r1
 8005dca:	4282      	cmp	r2, r0
 8005dcc:	6019      	str	r1, [r3, #0]
 8005dce:	d1dd      	bne.n	8005d8c <_free_r+0x24>
 8005dd0:	6810      	ldr	r0, [r2, #0]
 8005dd2:	6852      	ldr	r2, [r2, #4]
 8005dd4:	605a      	str	r2, [r3, #4]
 8005dd6:	4401      	add	r1, r0
 8005dd8:	6019      	str	r1, [r3, #0]
 8005dda:	e7d7      	b.n	8005d8c <_free_r+0x24>
 8005ddc:	d902      	bls.n	8005de4 <_free_r+0x7c>
 8005dde:	230c      	movs	r3, #12
 8005de0:	602b      	str	r3, [r5, #0]
 8005de2:	e7d3      	b.n	8005d8c <_free_r+0x24>
 8005de4:	6820      	ldr	r0, [r4, #0]
 8005de6:	1821      	adds	r1, r4, r0
 8005de8:	428a      	cmp	r2, r1
 8005dea:	bf04      	itt	eq
 8005dec:	6811      	ldreq	r1, [r2, #0]
 8005dee:	6852      	ldreq	r2, [r2, #4]
 8005df0:	6062      	str	r2, [r4, #4]
 8005df2:	bf04      	itt	eq
 8005df4:	1809      	addeq	r1, r1, r0
 8005df6:	6021      	streq	r1, [r4, #0]
 8005df8:	605c      	str	r4, [r3, #4]
 8005dfa:	e7c7      	b.n	8005d8c <_free_r+0x24>
 8005dfc:	bd38      	pop	{r3, r4, r5, pc}
 8005dfe:	bf00      	nop
 8005e00:	20000090 	.word	0x20000090

08005e04 <_read_r>:
 8005e04:	b538      	push	{r3, r4, r5, lr}
 8005e06:	4c07      	ldr	r4, [pc, #28]	; (8005e24 <_read_r+0x20>)
 8005e08:	4605      	mov	r5, r0
 8005e0a:	4608      	mov	r0, r1
 8005e0c:	4611      	mov	r1, r2
 8005e0e:	2200      	movs	r2, #0
 8005e10:	6022      	str	r2, [r4, #0]
 8005e12:	461a      	mov	r2, r3
 8005e14:	f7fa fecc 	bl	8000bb0 <_read>
 8005e18:	1c43      	adds	r3, r0, #1
 8005e1a:	d102      	bne.n	8005e22 <_read_r+0x1e>
 8005e1c:	6823      	ldr	r3, [r4, #0]
 8005e1e:	b103      	cbz	r3, 8005e22 <_read_r+0x1e>
 8005e20:	602b      	str	r3, [r5, #0]
 8005e22:	bd38      	pop	{r3, r4, r5, pc}
 8005e24:	2000019c 	.word	0x2000019c

08005e28 <_fstat_r>:
 8005e28:	b538      	push	{r3, r4, r5, lr}
 8005e2a:	4c07      	ldr	r4, [pc, #28]	; (8005e48 <_fstat_r+0x20>)
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	4605      	mov	r5, r0
 8005e30:	4608      	mov	r0, r1
 8005e32:	4611      	mov	r1, r2
 8005e34:	6023      	str	r3, [r4, #0]
 8005e36:	f7fa fee4 	bl	8000c02 <_fstat>
 8005e3a:	1c43      	adds	r3, r0, #1
 8005e3c:	d102      	bne.n	8005e44 <_fstat_r+0x1c>
 8005e3e:	6823      	ldr	r3, [r4, #0]
 8005e40:	b103      	cbz	r3, 8005e44 <_fstat_r+0x1c>
 8005e42:	602b      	str	r3, [r5, #0]
 8005e44:	bd38      	pop	{r3, r4, r5, pc}
 8005e46:	bf00      	nop
 8005e48:	2000019c 	.word	0x2000019c

08005e4c <_isatty_r>:
 8005e4c:	b538      	push	{r3, r4, r5, lr}
 8005e4e:	4c06      	ldr	r4, [pc, #24]	; (8005e68 <_isatty_r+0x1c>)
 8005e50:	2300      	movs	r3, #0
 8005e52:	4605      	mov	r5, r0
 8005e54:	4608      	mov	r0, r1
 8005e56:	6023      	str	r3, [r4, #0]
 8005e58:	f7fa fee3 	bl	8000c22 <_isatty>
 8005e5c:	1c43      	adds	r3, r0, #1
 8005e5e:	d102      	bne.n	8005e66 <_isatty_r+0x1a>
 8005e60:	6823      	ldr	r3, [r4, #0]
 8005e62:	b103      	cbz	r3, 8005e66 <_isatty_r+0x1a>
 8005e64:	602b      	str	r3, [r5, #0]
 8005e66:	bd38      	pop	{r3, r4, r5, pc}
 8005e68:	2000019c 	.word	0x2000019c

08005e6c <_init>:
 8005e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e6e:	bf00      	nop
 8005e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e72:	bc08      	pop	{r3}
 8005e74:	469e      	mov	lr, r3
 8005e76:	4770      	bx	lr

08005e78 <_fini>:
 8005e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e7a:	bf00      	nop
 8005e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e7e:	bc08      	pop	{r3}
 8005e80:	469e      	mov	lr, r3
 8005e82:	4770      	bx	lr
