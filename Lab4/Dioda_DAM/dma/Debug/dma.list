
dma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005198  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08005328  08005328  00015328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005424  08005424  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005424  08005424  00015424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800542c  0800542c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800542c  0800542c  0001542c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005430  08005430  00015430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005434  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  20000070  080054a4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  080054a4  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013d17  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002905  00000000  00000000  00033db7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001110  00000000  00000000  000366c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fb8  00000000  00000000  000377d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028a91  00000000  00000000  00038788  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000eddd  00000000  00000000  00061219  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f6bd1  00000000  00000000  0006fff6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00166bc7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d88  00000000  00000000  00166c44  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005310 	.word	0x08005310

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005310 	.word	0x08005310

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <HAL_DAC_MspInit>:
  }

}

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b08a      	sub	sp, #40	; 0x28
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000578:	f107 0314 	add.w	r3, r7, #20
 800057c:	2200      	movs	r2, #0
 800057e:	601a      	str	r2, [r3, #0]
 8000580:	605a      	str	r2, [r3, #4]
 8000582:	609a      	str	r2, [r3, #8]
 8000584:	60da      	str	r2, [r3, #12]
 8000586:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a2e      	ldr	r2, [pc, #184]	; (8000648 <HAL_DAC_MspInit+0xd8>)
 800058e:	4293      	cmp	r3, r2
 8000590:	d155      	bne.n	800063e <HAL_DAC_MspInit+0xce>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000592:	4b2e      	ldr	r3, [pc, #184]	; (800064c <HAL_DAC_MspInit+0xdc>)
 8000594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000596:	4a2d      	ldr	r2, [pc, #180]	; (800064c <HAL_DAC_MspInit+0xdc>)
 8000598:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800059c:	6593      	str	r3, [r2, #88]	; 0x58
 800059e:	4b2b      	ldr	r3, [pc, #172]	; (800064c <HAL_DAC_MspInit+0xdc>)
 80005a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80005a6:	613b      	str	r3, [r7, #16]
 80005a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005aa:	4b28      	ldr	r3, [pc, #160]	; (800064c <HAL_DAC_MspInit+0xdc>)
 80005ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ae:	4a27      	ldr	r2, [pc, #156]	; (800064c <HAL_DAC_MspInit+0xdc>)
 80005b0:	f043 0301 	orr.w	r3, r3, #1
 80005b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005b6:	4b25      	ldr	r3, [pc, #148]	; (800064c <HAL_DAC_MspInit+0xdc>)
 80005b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ba:	f003 0301 	and.w	r3, r3, #1
 80005be:	60fb      	str	r3, [r7, #12]
 80005c0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80005c2:	2320      	movs	r3, #32
 80005c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005c6:	2303      	movs	r3, #3
 80005c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ca:	2300      	movs	r3, #0
 80005cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ce:	f107 0314 	add.w	r3, r7, #20
 80005d2:	4619      	mov	r1, r3
 80005d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005d8:	f001 fac0 	bl	8001b5c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH2 Init */
    hdma_dac_ch2.Instance = DMA1_Channel4;
 80005dc:	4b1c      	ldr	r3, [pc, #112]	; (8000650 <HAL_DAC_MspInit+0xe0>)
 80005de:	4a1d      	ldr	r2, [pc, #116]	; (8000654 <HAL_DAC_MspInit+0xe4>)
 80005e0:	601a      	str	r2, [r3, #0]
    hdma_dac_ch2.Init.Request = DMA_REQUEST_5;
 80005e2:	4b1b      	ldr	r3, [pc, #108]	; (8000650 <HAL_DAC_MspInit+0xe0>)
 80005e4:	2205      	movs	r2, #5
 80005e6:	605a      	str	r2, [r3, #4]
    hdma_dac_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80005e8:	4b19      	ldr	r3, [pc, #100]	; (8000650 <HAL_DAC_MspInit+0xe0>)
 80005ea:	2210      	movs	r2, #16
 80005ec:	609a      	str	r2, [r3, #8]
    hdma_dac_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80005ee:	4b18      	ldr	r3, [pc, #96]	; (8000650 <HAL_DAC_MspInit+0xe0>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	60da      	str	r2, [r3, #12]
    hdma_dac_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80005f4:	4b16      	ldr	r3, [pc, #88]	; (8000650 <HAL_DAC_MspInit+0xe0>)
 80005f6:	2280      	movs	r2, #128	; 0x80
 80005f8:	611a      	str	r2, [r3, #16]
    hdma_dac_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80005fa:	4b15      	ldr	r3, [pc, #84]	; (8000650 <HAL_DAC_MspInit+0xe0>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	615a      	str	r2, [r3, #20]
    hdma_dac_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000600:	4b13      	ldr	r3, [pc, #76]	; (8000650 <HAL_DAC_MspInit+0xe0>)
 8000602:	2200      	movs	r2, #0
 8000604:	619a      	str	r2, [r3, #24]
    hdma_dac_ch2.Init.Mode = DMA_CIRCULAR;
 8000606:	4b12      	ldr	r3, [pc, #72]	; (8000650 <HAL_DAC_MspInit+0xe0>)
 8000608:	2220      	movs	r2, #32
 800060a:	61da      	str	r2, [r3, #28]
    hdma_dac_ch2.Init.Priority = DMA_PRIORITY_LOW;
 800060c:	4b10      	ldr	r3, [pc, #64]	; (8000650 <HAL_DAC_MspInit+0xe0>)
 800060e:	2200      	movs	r2, #0
 8000610:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch2) != HAL_OK)
 8000612:	480f      	ldr	r0, [pc, #60]	; (8000650 <HAL_DAC_MspInit+0xe0>)
 8000614:	f001 f8aa 	bl	800176c <HAL_DMA_Init>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <HAL_DAC_MspInit+0xb2>
    {
      Error_Handler();
 800061e:	f000 fa0d 	bl	8000a3c <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle2,hdma_dac_ch2);
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	4a0a      	ldr	r2, [pc, #40]	; (8000650 <HAL_DAC_MspInit+0xe0>)
 8000626:	60da      	str	r2, [r3, #12]
 8000628:	4a09      	ldr	r2, [pc, #36]	; (8000650 <HAL_DAC_MspInit+0xe0>)
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800062e:	2200      	movs	r2, #0
 8000630:	2100      	movs	r1, #0
 8000632:	2036      	movs	r0, #54	; 0x36
 8000634:	f000 fd3d 	bl	80010b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000638:	2036      	movs	r0, #54	; 0x36
 800063a:	f000 fd56 	bl	80010ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 800063e:	bf00      	nop
 8000640:	3728      	adds	r7, #40	; 0x28
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40007400 	.word	0x40007400
 800064c:	40021000 	.word	0x40021000
 8000650:	200000ac 	.word	0x200000ac
 8000654:	40020044 	.word	0x40020044

08000658 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
 800065e:	60f8      	str	r0, [r7, #12]
 8000660:	60b9      	str	r1, [r7, #8]
 8000662:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, 50);
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	b29a      	uxth	r2, r3
 8000668:	2332      	movs	r3, #50	; 0x32
 800066a:	68b9      	ldr	r1, [r7, #8]
 800066c:	4803      	ldr	r0, [pc, #12]	; (800067c <_write+0x24>)
 800066e:	f003 fab9 	bl	8003be4 <HAL_UART_Transmit>
	return len;
 8000672:	687b      	ldr	r3, [r7, #4]
}
 8000674:	4618      	mov	r0, r3
 8000676:	3710      	adds	r7, #16
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	20000140 	.word	0x20000140

08000680 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
	if(htim == &htim6) {
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	4a06      	ldr	r2, [pc, #24]	; (80006a4 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800068c:	4293      	cmp	r3, r2
 800068e:	d102      	bne.n	8000696 <HAL_TIM_PeriodElapsedCallback+0x16>
		timINT = 1;
 8000690:	4b05      	ldr	r3, [pc, #20]	; (80006a8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000692:	2201      	movs	r2, #1
 8000694:	701a      	strb	r2, [r3, #0]
	}
}
 8000696:	bf00      	nop
 8000698:	370c      	adds	r7, #12
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	200000f4 	.word	0x200000f4
 80006a8:	200001c0 	.word	0x200001c0

080006ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b086      	sub	sp, #24
 80006b0:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

	uint8_t dacValue[] = {0,39,77,116,154,193,231,255};
 80006b2:	4a1c      	ldr	r2, [pc, #112]	; (8000724 <main+0x78>)
 80006b4:	f107 0308 	add.w	r3, r7, #8
 80006b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006bc:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t tab[] = {0,39,77,116,155,193,232,255};
 80006c0:	4a19      	ldr	r2, [pc, #100]	; (8000728 <main+0x7c>)
 80006c2:	463b      	mov	r3, r7
 80006c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006c8:	e883 0003 	stmia.w	r3, {r0, r1}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006cc:	f000 fb78 	bl	8000dc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006d0:	f000 f834 	bl	800073c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d4:	f000 f960 	bl	8000998 <MX_GPIO_Init>
  MX_DMA_Init();
 80006d8:	f000 f940 	bl	800095c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80006dc:	f000 f90e 	bl	80008fc <MX_USART2_UART_Init>
  MX_DAC1_Init();
 80006e0:	f000 f8a2 	bl	8000828 <MX_DAC1_Init>
  MX_TIM6_Init();
 80006e4:	f000 f8d2 	bl	800088c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
//  HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
//  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_8B_R, 255);
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_2, (uint32_t*)tab, 8, DAC_ALIGN_8B_R);
 80006e8:	463a      	mov	r2, r7
 80006ea:	2308      	movs	r3, #8
 80006ec:	9300      	str	r3, [sp, #0]
 80006ee:	2308      	movs	r3, #8
 80006f0:	2110      	movs	r1, #16
 80006f2:	480e      	ldr	r0, [pc, #56]	; (800072c <main+0x80>)
 80006f4:	f000 fd36 	bl	8001164 <HAL_DAC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim6);
 80006f8:	480d      	ldr	r0, [pc, #52]	; (8000730 <main+0x84>)
 80006fa:	f002 ff2d 	bl	8003558 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(timINT) {
 80006fe:	4b0d      	ldr	r3, [pc, #52]	; (8000734 <main+0x88>)
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	b2db      	uxtb	r3, r3
 8000704:	2b00      	cmp	r3, #0
 8000706:	d0fa      	beq.n	80006fe <main+0x52>
		  timINT = 0;
 8000708:	4b0a      	ldr	r3, [pc, #40]	; (8000734 <main+0x88>)
 800070a:	2200      	movs	r2, #0
 800070c:	701a      	strb	r2, [r3, #0]
		  printf("DAC %ld\r\n", HAL_DAC_GetValue(&hdac1, DAC_CHANNEL_2));
 800070e:	2110      	movs	r1, #16
 8000710:	4806      	ldr	r0, [pc, #24]	; (800072c <main+0x80>)
 8000712:	f000 fe67 	bl	80013e4 <HAL_DAC_GetValue>
 8000716:	4603      	mov	r3, r0
 8000718:	4619      	mov	r1, r3
 800071a:	4807      	ldr	r0, [pc, #28]	; (8000738 <main+0x8c>)
 800071c:	f003 ff14 	bl	8004548 <iprintf>
	  if(timINT) {
 8000720:	e7ed      	b.n	80006fe <main+0x52>
 8000722:	bf00      	nop
 8000724:	08005334 	.word	0x08005334
 8000728:	0800533c 	.word	0x0800533c
 800072c:	20000098 	.word	0x20000098
 8000730:	200000f4 	.word	0x200000f4
 8000734:	200001c0 	.word	0x200001c0
 8000738:	08005328 	.word	0x08005328

0800073c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b0b8      	sub	sp, #224	; 0xe0
 8000740:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000742:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000746:	2244      	movs	r2, #68	; 0x44
 8000748:	2100      	movs	r1, #0
 800074a:	4618      	mov	r0, r3
 800074c:	f003 fef4 	bl	8004538 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000750:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000760:	463b      	mov	r3, r7
 8000762:	2288      	movs	r2, #136	; 0x88
 8000764:	2100      	movs	r1, #0
 8000766:	4618      	mov	r0, r3
 8000768:	f003 fee6 	bl	8004538 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800076c:	2302      	movs	r3, #2
 800076e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000772:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000776:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800077a:	2310      	movs	r3, #16
 800077c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000780:	2302      	movs	r3, #2
 8000782:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000786:	2302      	movs	r3, #2
 8000788:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800078c:	2301      	movs	r3, #1
 800078e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000792:	230a      	movs	r3, #10
 8000794:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000798:	2307      	movs	r3, #7
 800079a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800079e:	2302      	movs	r3, #2
 80007a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007a4:	2302      	movs	r3, #2
 80007a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007aa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80007ae:	4618      	mov	r0, r3
 80007b0:	f001 fbe0 	bl	8001f74 <HAL_RCC_OscConfig>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <SystemClock_Config+0x82>
  {
    Error_Handler();
 80007ba:	f000 f93f 	bl	8000a3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007be:	230f      	movs	r3, #15
 80007c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c4:	2303      	movs	r3, #3
 80007c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ca:	2300      	movs	r3, #0
 80007cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007d0:	2300      	movs	r3, #0
 80007d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007d6:	2300      	movs	r3, #0
 80007d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007dc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80007e0:	2104      	movs	r1, #4
 80007e2:	4618      	mov	r0, r3
 80007e4:	f001 ffac 	bl	8002740 <HAL_RCC_ClockConfig>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80007ee:	f000 f925 	bl	8000a3c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80007f2:	2302      	movs	r3, #2
 80007f4:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80007f6:	2300      	movs	r3, #0
 80007f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007fa:	463b      	mov	r3, r7
 80007fc:	4618      	mov	r0, r3
 80007fe:	f002 f9a3 	bl	8002b48 <HAL_RCCEx_PeriphCLKConfig>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000808:	f000 f918 	bl	8000a3c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800080c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000810:	f001 fb5a 	bl	8001ec8 <HAL_PWREx_ControlVoltageScaling>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <SystemClock_Config+0xe2>
  {
    Error_Handler();
 800081a:	f000 f90f 	bl	8000a3c <Error_Handler>
  }
}
 800081e:	bf00      	nop
 8000820:	37e0      	adds	r7, #224	; 0xe0
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
	...

08000828 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b08a      	sub	sp, #40	; 0x28
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	2224      	movs	r2, #36	; 0x24
 8000832:	2100      	movs	r1, #0
 8000834:	4618      	mov	r0, r3
 8000836:	f003 fe7f 	bl	8004538 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800083a:	4b12      	ldr	r3, [pc, #72]	; (8000884 <MX_DAC1_Init+0x5c>)
 800083c:	4a12      	ldr	r2, [pc, #72]	; (8000888 <MX_DAC1_Init+0x60>)
 800083e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000840:	4810      	ldr	r0, [pc, #64]	; (8000884 <MX_DAC1_Init+0x5c>)
 8000842:	f000 fc6c 	bl	800111e <HAL_DAC_Init>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800084c:	f000 f8f6 	bl	8000a3c <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000850:	2300      	movs	r3, #0
 8000852:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8000854:	2304      	movs	r3, #4
 8000856:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000858:	2300      	movs	r3, #0
 800085a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800085c:	2300      	movs	r3, #0
 800085e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000860:	2300      	movs	r3, #0
 8000862:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000864:	1d3b      	adds	r3, r7, #4
 8000866:	2210      	movs	r2, #16
 8000868:	4619      	mov	r1, r3
 800086a:	4806      	ldr	r0, [pc, #24]	; (8000884 <MX_DAC1_Init+0x5c>)
 800086c:	f000 fdcf 	bl	800140e <HAL_DAC_ConfigChannel>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000876:	f000 f8e1 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800087a:	bf00      	nop
 800087c:	3728      	adds	r7, #40	; 0x28
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	20000098 	.word	0x20000098
 8000888:	40007400 	.word	0x40007400

0800088c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b084      	sub	sp, #16
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000892:	1d3b      	adds	r3, r7, #4
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	605a      	str	r2, [r3, #4]
 800089a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800089c:	4b15      	ldr	r3, [pc, #84]	; (80008f4 <MX_TIM6_Init+0x68>)
 800089e:	4a16      	ldr	r2, [pc, #88]	; (80008f8 <MX_TIM6_Init+0x6c>)
 80008a0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 15999;
 80008a2:	4b14      	ldr	r3, [pc, #80]	; (80008f4 <MX_TIM6_Init+0x68>)
 80008a4:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80008a8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008aa:	4b12      	ldr	r3, [pc, #72]	; (80008f4 <MX_TIM6_Init+0x68>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4999;
 80008b0:	4b10      	ldr	r3, [pc, #64]	; (80008f4 <MX_TIM6_Init+0x68>)
 80008b2:	f241 3287 	movw	r2, #4999	; 0x1387
 80008b6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008b8:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <MX_TIM6_Init+0x68>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80008be:	480d      	ldr	r0, [pc, #52]	; (80008f4 <MX_TIM6_Init+0x68>)
 80008c0:	f002 fdf2 	bl	80034a8 <HAL_TIM_Base_Init>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80008ca:	f000 f8b7 	bl	8000a3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80008ce:	2320      	movs	r3, #32
 80008d0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008d2:	2300      	movs	r3, #0
 80008d4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80008d6:	1d3b      	adds	r3, r7, #4
 80008d8:	4619      	mov	r1, r3
 80008da:	4806      	ldr	r0, [pc, #24]	; (80008f4 <MX_TIM6_Init+0x68>)
 80008dc:	f003 f88e 	bl	80039fc <HAL_TIMEx_MasterConfigSynchronization>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80008e6:	f000 f8a9 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80008ea:	bf00      	nop
 80008ec:	3710      	adds	r7, #16
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	200000f4 	.word	0x200000f4
 80008f8:	40001000 	.word	0x40001000

080008fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000900:	4b14      	ldr	r3, [pc, #80]	; (8000954 <MX_USART2_UART_Init+0x58>)
 8000902:	4a15      	ldr	r2, [pc, #84]	; (8000958 <MX_USART2_UART_Init+0x5c>)
 8000904:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000906:	4b13      	ldr	r3, [pc, #76]	; (8000954 <MX_USART2_UART_Init+0x58>)
 8000908:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800090c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800090e:	4b11      	ldr	r3, [pc, #68]	; (8000954 <MX_USART2_UART_Init+0x58>)
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000914:	4b0f      	ldr	r3, [pc, #60]	; (8000954 <MX_USART2_UART_Init+0x58>)
 8000916:	2200      	movs	r2, #0
 8000918:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800091a:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <MX_USART2_UART_Init+0x58>)
 800091c:	2200      	movs	r2, #0
 800091e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000920:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <MX_USART2_UART_Init+0x58>)
 8000922:	220c      	movs	r2, #12
 8000924:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000926:	4b0b      	ldr	r3, [pc, #44]	; (8000954 <MX_USART2_UART_Init+0x58>)
 8000928:	2200      	movs	r2, #0
 800092a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800092c:	4b09      	ldr	r3, [pc, #36]	; (8000954 <MX_USART2_UART_Init+0x58>)
 800092e:	2200      	movs	r2, #0
 8000930:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000932:	4b08      	ldr	r3, [pc, #32]	; (8000954 <MX_USART2_UART_Init+0x58>)
 8000934:	2200      	movs	r2, #0
 8000936:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000938:	4b06      	ldr	r3, [pc, #24]	; (8000954 <MX_USART2_UART_Init+0x58>)
 800093a:	2200      	movs	r2, #0
 800093c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800093e:	4805      	ldr	r0, [pc, #20]	; (8000954 <MX_USART2_UART_Init+0x58>)
 8000940:	f003 f902 	bl	8003b48 <HAL_UART_Init>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800094a:	f000 f877 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	20000140 	.word	0x20000140
 8000958:	40004400 	.word	0x40004400

0800095c <MX_DMA_Init>:
/**
 *
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000962:	4b0c      	ldr	r3, [pc, #48]	; (8000994 <MX_DMA_Init+0x38>)
 8000964:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000966:	4a0b      	ldr	r2, [pc, #44]	; (8000994 <MX_DMA_Init+0x38>)
 8000968:	f043 0301 	orr.w	r3, r3, #1
 800096c:	6493      	str	r3, [r2, #72]	; 0x48
 800096e:	4b09      	ldr	r3, [pc, #36]	; (8000994 <MX_DMA_Init+0x38>)
 8000970:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000972:	f003 0301 	and.w	r3, r3, #1
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800097a:	2200      	movs	r2, #0
 800097c:	2100      	movs	r1, #0
 800097e:	200e      	movs	r0, #14
 8000980:	f000 fb97 	bl	80010b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000984:	200e      	movs	r0, #14
 8000986:	f000 fbb0 	bl	80010ea <HAL_NVIC_EnableIRQ>

}
 800098a:	bf00      	nop
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40021000 	.word	0x40021000

08000998 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b08a      	sub	sp, #40	; 0x28
 800099c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099e:	f107 0314 	add.w	r3, r7, #20
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	605a      	str	r2, [r3, #4]
 80009a8:	609a      	str	r2, [r3, #8]
 80009aa:	60da      	str	r2, [r3, #12]
 80009ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ae:	4b20      	ldr	r3, [pc, #128]	; (8000a30 <MX_GPIO_Init+0x98>)
 80009b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b2:	4a1f      	ldr	r2, [pc, #124]	; (8000a30 <MX_GPIO_Init+0x98>)
 80009b4:	f043 0304 	orr.w	r3, r3, #4
 80009b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ba:	4b1d      	ldr	r3, [pc, #116]	; (8000a30 <MX_GPIO_Init+0x98>)
 80009bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009be:	f003 0304 	and.w	r3, r3, #4
 80009c2:	613b      	str	r3, [r7, #16]
 80009c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009c6:	4b1a      	ldr	r3, [pc, #104]	; (8000a30 <MX_GPIO_Init+0x98>)
 80009c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ca:	4a19      	ldr	r2, [pc, #100]	; (8000a30 <MX_GPIO_Init+0x98>)
 80009cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009d2:	4b17      	ldr	r3, [pc, #92]	; (8000a30 <MX_GPIO_Init+0x98>)
 80009d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009de:	4b14      	ldr	r3, [pc, #80]	; (8000a30 <MX_GPIO_Init+0x98>)
 80009e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e2:	4a13      	ldr	r2, [pc, #76]	; (8000a30 <MX_GPIO_Init+0x98>)
 80009e4:	f043 0301 	orr.w	r3, r3, #1
 80009e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ea:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <MX_GPIO_Init+0x98>)
 80009ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ee:	f003 0301 	and.w	r3, r3, #1
 80009f2:	60bb      	str	r3, [r7, #8]
 80009f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f6:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <MX_GPIO_Init+0x98>)
 80009f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009fa:	4a0d      	ldr	r2, [pc, #52]	; (8000a30 <MX_GPIO_Init+0x98>)
 80009fc:	f043 0302 	orr.w	r3, r3, #2
 8000a00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a02:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <MX_GPIO_Init+0x98>)
 8000a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a06:	f003 0302 	and.w	r3, r3, #2
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a14:	4b07      	ldr	r3, [pc, #28]	; (8000a34 <MX_GPIO_Init+0x9c>)
 8000a16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a1c:	f107 0314 	add.w	r3, r7, #20
 8000a20:	4619      	mov	r1, r3
 8000a22:	4805      	ldr	r0, [pc, #20]	; (8000a38 <MX_GPIO_Init+0xa0>)
 8000a24:	f001 f89a 	bl	8001b5c <HAL_GPIO_Init>

}
 8000a28:	bf00      	nop
 8000a2a:	3728      	adds	r7, #40	; 0x28
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	40021000 	.word	0x40021000
 8000a34:	10210000 	.word	0x10210000
 8000a38:	48000800 	.word	0x48000800

08000a3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
	...

08000a4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a52:	4b0f      	ldr	r3, [pc, #60]	; (8000a90 <HAL_MspInit+0x44>)
 8000a54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a56:	4a0e      	ldr	r2, [pc, #56]	; (8000a90 <HAL_MspInit+0x44>)
 8000a58:	f043 0301 	orr.w	r3, r3, #1
 8000a5c:	6613      	str	r3, [r2, #96]	; 0x60
 8000a5e:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <HAL_MspInit+0x44>)
 8000a60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a62:	f003 0301 	and.w	r3, r3, #1
 8000a66:	607b      	str	r3, [r7, #4]
 8000a68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a6a:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <HAL_MspInit+0x44>)
 8000a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a6e:	4a08      	ldr	r2, [pc, #32]	; (8000a90 <HAL_MspInit+0x44>)
 8000a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a74:	6593      	str	r3, [r2, #88]	; 0x58
 8000a76:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <HAL_MspInit+0x44>)
 8000a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a7e:	603b      	str	r3, [r7, #0]
 8000a80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a82:	bf00      	nop
 8000a84:	370c      	adds	r7, #12
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	40021000 	.word	0x40021000

08000a94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a98:	bf00      	nop
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr

08000aa2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aa6:	e7fe      	b.n	8000aa6 <HardFault_Handler+0x4>

08000aa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aac:	e7fe      	b.n	8000aac <MemManage_Handler+0x4>

08000aae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ab2:	e7fe      	b.n	8000ab2 <BusFault_Handler+0x4>

08000ab4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab8:	e7fe      	b.n	8000ab8 <UsageFault_Handler+0x4>

08000aba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aba:	b480      	push	{r7}
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr

08000ac8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000acc:	bf00      	nop
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr

08000ad6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ada:	bf00      	nop
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr

08000ae4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ae8:	f000 f9c6 	bl	8000e78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aec:	bf00      	nop
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch2);
 8000af4:	4802      	ldr	r0, [pc, #8]	; (8000b00 <DMA1_Channel4_IRQHandler+0x10>)
 8000af6:	f000 ff51 	bl	800199c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	200000ac 	.word	0x200000ac

08000b04 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b08:	4803      	ldr	r0, [pc, #12]	; (8000b18 <TIM6_DAC_IRQHandler+0x14>)
 8000b0a:	f002 fd95 	bl	8003638 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8000b0e:	4803      	ldr	r0, [pc, #12]	; (8000b1c <TIM6_DAC_IRQHandler+0x18>)
 8000b10:	f000 fbe6 	bl	80012e0 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b14:	bf00      	nop
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	200000f4 	.word	0x200000f4
 8000b1c:	20000098 	.word	0x20000098

08000b20 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b086      	sub	sp, #24
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	60f8      	str	r0, [r7, #12]
 8000b28:	60b9      	str	r1, [r7, #8]
 8000b2a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	617b      	str	r3, [r7, #20]
 8000b30:	e00a      	b.n	8000b48 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b32:	f3af 8000 	nop.w
 8000b36:	4601      	mov	r1, r0
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	1c5a      	adds	r2, r3, #1
 8000b3c:	60ba      	str	r2, [r7, #8]
 8000b3e:	b2ca      	uxtb	r2, r1
 8000b40:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	3301      	adds	r3, #1
 8000b46:	617b      	str	r3, [r7, #20]
 8000b48:	697a      	ldr	r2, [r7, #20]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	dbf0      	blt.n	8000b32 <_read+0x12>
	}

return len;
 8000b50:	687b      	ldr	r3, [r7, #4]
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3718      	adds	r7, #24
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <_close>:
	}
	return len;
}

int _close(int file)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	b083      	sub	sp, #12
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
	return -1;
 8000b62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	370c      	adds	r7, #12
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr

08000b72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b72:	b480      	push	{r7}
 8000b74:	b083      	sub	sp, #12
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	6078      	str	r0, [r7, #4]
 8000b7a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b82:	605a      	str	r2, [r3, #4]
	return 0;
 8000b84:	2300      	movs	r3, #0
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	370c      	adds	r7, #12
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr

08000b92 <_isatty>:

int _isatty(int file)
{
 8000b92:	b480      	push	{r7}
 8000b94:	b083      	sub	sp, #12
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	6078      	str	r0, [r7, #4]
	return 1;
 8000b9a:	2301      	movs	r3, #1
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	370c      	adds	r7, #12
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr

08000ba8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b085      	sub	sp, #20
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	60f8      	str	r0, [r7, #12]
 8000bb0:	60b9      	str	r1, [r7, #8]
 8000bb2:	607a      	str	r2, [r7, #4]
	return 0;
 8000bb4:	2300      	movs	r3, #0
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3714      	adds	r7, #20
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
	...

08000bc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b086      	sub	sp, #24
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bcc:	4a14      	ldr	r2, [pc, #80]	; (8000c20 <_sbrk+0x5c>)
 8000bce:	4b15      	ldr	r3, [pc, #84]	; (8000c24 <_sbrk+0x60>)
 8000bd0:	1ad3      	subs	r3, r2, r3
 8000bd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bd8:	4b13      	ldr	r3, [pc, #76]	; (8000c28 <_sbrk+0x64>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d102      	bne.n	8000be6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000be0:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <_sbrk+0x64>)
 8000be2:	4a12      	ldr	r2, [pc, #72]	; (8000c2c <_sbrk+0x68>)
 8000be4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000be6:	4b10      	ldr	r3, [pc, #64]	; (8000c28 <_sbrk+0x64>)
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4413      	add	r3, r2
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	d207      	bcs.n	8000c04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bf4:	f003 fc76 	bl	80044e4 <__errno>
 8000bf8:	4602      	mov	r2, r0
 8000bfa:	230c      	movs	r3, #12
 8000bfc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000c02:	e009      	b.n	8000c18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c04:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <_sbrk+0x64>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c0a:	4b07      	ldr	r3, [pc, #28]	; (8000c28 <_sbrk+0x64>)
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4413      	add	r3, r2
 8000c12:	4a05      	ldr	r2, [pc, #20]	; (8000c28 <_sbrk+0x64>)
 8000c14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c16:	68fb      	ldr	r3, [r7, #12]
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3718      	adds	r7, #24
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	20018000 	.word	0x20018000
 8000c24:	00000400 	.word	0x00000400
 8000c28:	2000008c 	.word	0x2000008c
 8000c2c:	200001d0 	.word	0x200001d0

08000c30 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c34:	4b17      	ldr	r3, [pc, #92]	; (8000c94 <SystemInit+0x64>)
 8000c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c3a:	4a16      	ldr	r2, [pc, #88]	; (8000c94 <SystemInit+0x64>)
 8000c3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000c44:	4b14      	ldr	r3, [pc, #80]	; (8000c98 <SystemInit+0x68>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a13      	ldr	r2, [pc, #76]	; (8000c98 <SystemInit+0x68>)
 8000c4a:	f043 0301 	orr.w	r3, r3, #1
 8000c4e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000c50:	4b11      	ldr	r3, [pc, #68]	; (8000c98 <SystemInit+0x68>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000c56:	4b10      	ldr	r3, [pc, #64]	; (8000c98 <SystemInit+0x68>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4a0f      	ldr	r2, [pc, #60]	; (8000c98 <SystemInit+0x68>)
 8000c5c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000c60:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000c64:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000c66:	4b0c      	ldr	r3, [pc, #48]	; (8000c98 <SystemInit+0x68>)
 8000c68:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c6c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c6e:	4b0a      	ldr	r3, [pc, #40]	; (8000c98 <SystemInit+0x68>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4a09      	ldr	r2, [pc, #36]	; (8000c98 <SystemInit+0x68>)
 8000c74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c78:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000c7a:	4b07      	ldr	r3, [pc, #28]	; (8000c98 <SystemInit+0x68>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c80:	4b04      	ldr	r3, [pc, #16]	; (8000c94 <SystemInit+0x64>)
 8000c82:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c86:	609a      	str	r2, [r3, #8]
#endif
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	e000ed00 	.word	0xe000ed00
 8000c98:	40021000 	.word	0x40021000

08000c9c <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b084      	sub	sp, #16
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a0d      	ldr	r2, [pc, #52]	; (8000ce0 <HAL_TIM_Base_MspInit+0x44>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d113      	bne.n	8000cd6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000cae:	4b0d      	ldr	r3, [pc, #52]	; (8000ce4 <HAL_TIM_Base_MspInit+0x48>)
 8000cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cb2:	4a0c      	ldr	r2, [pc, #48]	; (8000ce4 <HAL_TIM_Base_MspInit+0x48>)
 8000cb4:	f043 0310 	orr.w	r3, r3, #16
 8000cb8:	6593      	str	r3, [r2, #88]	; 0x58
 8000cba:	4b0a      	ldr	r3, [pc, #40]	; (8000ce4 <HAL_TIM_Base_MspInit+0x48>)
 8000cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cbe:	f003 0310 	and.w	r3, r3, #16
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	2100      	movs	r1, #0
 8000cca:	2036      	movs	r0, #54	; 0x36
 8000ccc:	f000 f9f1 	bl	80010b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cd0:	2036      	movs	r0, #54	; 0x36
 8000cd2:	f000 fa0a 	bl	80010ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8000cd6:	bf00      	nop
 8000cd8:	3710      	adds	r7, #16
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40001000 	.word	0x40001000
 8000ce4:	40021000 	.word	0x40021000

08000ce8 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b08a      	sub	sp, #40	; 0x28
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf0:	f107 0314 	add.w	r3, r7, #20
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
 8000cfc:	60da      	str	r2, [r3, #12]
 8000cfe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a17      	ldr	r2, [pc, #92]	; (8000d64 <HAL_UART_MspInit+0x7c>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d128      	bne.n	8000d5c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d0a:	4b17      	ldr	r3, [pc, #92]	; (8000d68 <HAL_UART_MspInit+0x80>)
 8000d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d0e:	4a16      	ldr	r2, [pc, #88]	; (8000d68 <HAL_UART_MspInit+0x80>)
 8000d10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d14:	6593      	str	r3, [r2, #88]	; 0x58
 8000d16:	4b14      	ldr	r3, [pc, #80]	; (8000d68 <HAL_UART_MspInit+0x80>)
 8000d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d1e:	613b      	str	r3, [r7, #16]
 8000d20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d22:	4b11      	ldr	r3, [pc, #68]	; (8000d68 <HAL_UART_MspInit+0x80>)
 8000d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d26:	4a10      	ldr	r2, [pc, #64]	; (8000d68 <HAL_UART_MspInit+0x80>)
 8000d28:	f043 0301 	orr.w	r3, r3, #1
 8000d2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d2e:	4b0e      	ldr	r3, [pc, #56]	; (8000d68 <HAL_UART_MspInit+0x80>)
 8000d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d32:	f003 0301 	and.w	r3, r3, #1
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d3a:	230c      	movs	r3, #12
 8000d3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3e:	2302      	movs	r3, #2
 8000d40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d46:	2303      	movs	r3, #3
 8000d48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d4a:	2307      	movs	r3, #7
 8000d4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4e:	f107 0314 	add.w	r3, r7, #20
 8000d52:	4619      	mov	r1, r3
 8000d54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d58:	f000 ff00 	bl	8001b5c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000d5c:	bf00      	nop
 8000d5e:	3728      	adds	r7, #40	; 0x28
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	40004400 	.word	0x40004400
 8000d68:	40021000 	.word	0x40021000

08000d6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000da4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d70:	f7ff ff5e 	bl	8000c30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000d74:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000d76:	e003      	b.n	8000d80 <LoopCopyDataInit>

08000d78 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000d78:	4b0b      	ldr	r3, [pc, #44]	; (8000da8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000d7a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000d7c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000d7e:	3104      	adds	r1, #4

08000d80 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000d80:	480a      	ldr	r0, [pc, #40]	; (8000dac <LoopForever+0xa>)
	ldr	r3, =_edata
 8000d82:	4b0b      	ldr	r3, [pc, #44]	; (8000db0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000d84:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000d86:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000d88:	d3f6      	bcc.n	8000d78 <CopyDataInit>
	ldr	r2, =_sbss
 8000d8a:	4a0a      	ldr	r2, [pc, #40]	; (8000db4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000d8c:	e002      	b.n	8000d94 <LoopFillZerobss>

08000d8e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000d8e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000d90:	f842 3b04 	str.w	r3, [r2], #4

08000d94 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000d94:	4b08      	ldr	r3, [pc, #32]	; (8000db8 <LoopForever+0x16>)
	cmp	r2, r3
 8000d96:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000d98:	d3f9      	bcc.n	8000d8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d9a:	f003 fba9 	bl	80044f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d9e:	f7ff fc85 	bl	80006ac <main>

08000da2 <LoopForever>:

LoopForever:
    b LoopForever
 8000da2:	e7fe      	b.n	8000da2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000da4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000da8:	08005434 	.word	0x08005434
	ldr	r0, =_sdata
 8000dac:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000db0:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8000db4:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8000db8:	200001cc 	.word	0x200001cc

08000dbc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000dbc:	e7fe      	b.n	8000dbc <ADC1_2_IRQHandler>
	...

08000dc0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dca:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <HAL_Init+0x3c>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a0b      	ldr	r2, [pc, #44]	; (8000dfc <HAL_Init+0x3c>)
 8000dd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dd4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dd6:	2003      	movs	r0, #3
 8000dd8:	f000 f960 	bl	800109c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ddc:	2000      	movs	r0, #0
 8000dde:	f000 f80f 	bl	8000e00 <HAL_InitTick>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d002      	beq.n	8000dee <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000de8:	2301      	movs	r3, #1
 8000dea:	71fb      	strb	r3, [r7, #7]
 8000dec:	e001      	b.n	8000df2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000dee:	f7ff fe2d 	bl	8000a4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000df2:	79fb      	ldrb	r3, [r7, #7]
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3708      	adds	r7, #8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	40022000 	.word	0x40022000

08000e00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e0c:	4b17      	ldr	r3, [pc, #92]	; (8000e6c <HAL_InitTick+0x6c>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d023      	beq.n	8000e5c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e14:	4b16      	ldr	r3, [pc, #88]	; (8000e70 <HAL_InitTick+0x70>)
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	4b14      	ldr	r3, [pc, #80]	; (8000e6c <HAL_InitTick+0x6c>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f000 f96b 	bl	8001106 <HAL_SYSTICK_Config>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d10f      	bne.n	8000e56 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2b0f      	cmp	r3, #15
 8000e3a:	d809      	bhi.n	8000e50 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	6879      	ldr	r1, [r7, #4]
 8000e40:	f04f 30ff 	mov.w	r0, #4294967295
 8000e44:	f000 f935 	bl	80010b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e48:	4a0a      	ldr	r2, [pc, #40]	; (8000e74 <HAL_InitTick+0x74>)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	6013      	str	r3, [r2, #0]
 8000e4e:	e007      	b.n	8000e60 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e50:	2301      	movs	r3, #1
 8000e52:	73fb      	strb	r3, [r7, #15]
 8000e54:	e004      	b.n	8000e60 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
 8000e58:	73fb      	strb	r3, [r7, #15]
 8000e5a:	e001      	b.n	8000e60 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3710      	adds	r7, #16
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	20000008 	.word	0x20000008
 8000e70:	20000000 	.word	0x20000000
 8000e74:	20000004 	.word	0x20000004

08000e78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e7c:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <HAL_IncTick+0x20>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	461a      	mov	r2, r3
 8000e82:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <HAL_IncTick+0x24>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4413      	add	r3, r2
 8000e88:	4a04      	ldr	r2, [pc, #16]	; (8000e9c <HAL_IncTick+0x24>)
 8000e8a:	6013      	str	r3, [r2, #0]
}
 8000e8c:	bf00      	nop
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	20000008 	.word	0x20000008
 8000e9c:	200001c4 	.word	0x200001c4

08000ea0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ea4:	4b03      	ldr	r3, [pc, #12]	; (8000eb4 <HAL_GetTick+0x14>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	200001c4 	.word	0x200001c4

08000eb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ec0:	f7ff ffee 	bl	8000ea0 <HAL_GetTick>
 8000ec4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ed0:	d005      	beq.n	8000ede <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000ed2:	4b09      	ldr	r3, [pc, #36]	; (8000ef8 <HAL_Delay+0x40>)
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	4413      	add	r3, r2
 8000edc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ede:	bf00      	nop
 8000ee0:	f7ff ffde 	bl	8000ea0 <HAL_GetTick>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	68fa      	ldr	r2, [r7, #12]
 8000eec:	429a      	cmp	r2, r3
 8000eee:	d8f7      	bhi.n	8000ee0 <HAL_Delay+0x28>
  {
  }
}
 8000ef0:	bf00      	nop
 8000ef2:	3710      	adds	r7, #16
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	20000008 	.word	0x20000008

08000efc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b085      	sub	sp, #20
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	f003 0307 	and.w	r3, r3, #7
 8000f0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f0c:	4b0c      	ldr	r3, [pc, #48]	; (8000f40 <__NVIC_SetPriorityGrouping+0x44>)
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f12:	68ba      	ldr	r2, [r7, #8]
 8000f14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f18:	4013      	ands	r3, r2
 8000f1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f2e:	4a04      	ldr	r2, [pc, #16]	; (8000f40 <__NVIC_SetPriorityGrouping+0x44>)
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	60d3      	str	r3, [r2, #12]
}
 8000f34:	bf00      	nop
 8000f36:	3714      	adds	r7, #20
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f48:	4b04      	ldr	r3, [pc, #16]	; (8000f5c <__NVIC_GetPriorityGrouping+0x18>)
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	0a1b      	lsrs	r3, r3, #8
 8000f4e:	f003 0307 	and.w	r3, r3, #7
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	e000ed00 	.word	0xe000ed00

08000f60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	db0b      	blt.n	8000f8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f72:	79fb      	ldrb	r3, [r7, #7]
 8000f74:	f003 021f 	and.w	r2, r3, #31
 8000f78:	4907      	ldr	r1, [pc, #28]	; (8000f98 <__NVIC_EnableIRQ+0x38>)
 8000f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7e:	095b      	lsrs	r3, r3, #5
 8000f80:	2001      	movs	r0, #1
 8000f82:	fa00 f202 	lsl.w	r2, r0, r2
 8000f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f8a:	bf00      	nop
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	e000e100 	.word	0xe000e100

08000f9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	6039      	str	r1, [r7, #0]
 8000fa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	db0a      	blt.n	8000fc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	b2da      	uxtb	r2, r3
 8000fb4:	490c      	ldr	r1, [pc, #48]	; (8000fe8 <__NVIC_SetPriority+0x4c>)
 8000fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fba:	0112      	lsls	r2, r2, #4
 8000fbc:	b2d2      	uxtb	r2, r2
 8000fbe:	440b      	add	r3, r1
 8000fc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fc4:	e00a      	b.n	8000fdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	b2da      	uxtb	r2, r3
 8000fca:	4908      	ldr	r1, [pc, #32]	; (8000fec <__NVIC_SetPriority+0x50>)
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	f003 030f 	and.w	r3, r3, #15
 8000fd2:	3b04      	subs	r3, #4
 8000fd4:	0112      	lsls	r2, r2, #4
 8000fd6:	b2d2      	uxtb	r2, r2
 8000fd8:	440b      	add	r3, r1
 8000fda:	761a      	strb	r2, [r3, #24]
}
 8000fdc:	bf00      	nop
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	e000e100 	.word	0xe000e100
 8000fec:	e000ed00 	.word	0xe000ed00

08000ff0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b089      	sub	sp, #36	; 0x24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	f003 0307 	and.w	r3, r3, #7
 8001002:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	f1c3 0307 	rsb	r3, r3, #7
 800100a:	2b04      	cmp	r3, #4
 800100c:	bf28      	it	cs
 800100e:	2304      	movcs	r3, #4
 8001010:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	3304      	adds	r3, #4
 8001016:	2b06      	cmp	r3, #6
 8001018:	d902      	bls.n	8001020 <NVIC_EncodePriority+0x30>
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	3b03      	subs	r3, #3
 800101e:	e000      	b.n	8001022 <NVIC_EncodePriority+0x32>
 8001020:	2300      	movs	r3, #0
 8001022:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001024:	f04f 32ff 	mov.w	r2, #4294967295
 8001028:	69bb      	ldr	r3, [r7, #24]
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	43da      	mvns	r2, r3
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	401a      	ands	r2, r3
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001038:	f04f 31ff 	mov.w	r1, #4294967295
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	fa01 f303 	lsl.w	r3, r1, r3
 8001042:	43d9      	mvns	r1, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001048:	4313      	orrs	r3, r2
         );
}
 800104a:	4618      	mov	r0, r3
 800104c:	3724      	adds	r7, #36	; 0x24
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
	...

08001058 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	3b01      	subs	r3, #1
 8001064:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001068:	d301      	bcc.n	800106e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800106a:	2301      	movs	r3, #1
 800106c:	e00f      	b.n	800108e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800106e:	4a0a      	ldr	r2, [pc, #40]	; (8001098 <SysTick_Config+0x40>)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	3b01      	subs	r3, #1
 8001074:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001076:	210f      	movs	r1, #15
 8001078:	f04f 30ff 	mov.w	r0, #4294967295
 800107c:	f7ff ff8e 	bl	8000f9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001080:	4b05      	ldr	r3, [pc, #20]	; (8001098 <SysTick_Config+0x40>)
 8001082:	2200      	movs	r2, #0
 8001084:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001086:	4b04      	ldr	r3, [pc, #16]	; (8001098 <SysTick_Config+0x40>)
 8001088:	2207      	movs	r2, #7
 800108a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800108c:	2300      	movs	r3, #0
}
 800108e:	4618      	mov	r0, r3
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	e000e010 	.word	0xe000e010

0800109c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f7ff ff29 	bl	8000efc <__NVIC_SetPriorityGrouping>
}
 80010aa:	bf00      	nop
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b086      	sub	sp, #24
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	4603      	mov	r3, r0
 80010ba:	60b9      	str	r1, [r7, #8]
 80010bc:	607a      	str	r2, [r7, #4]
 80010be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010c0:	2300      	movs	r3, #0
 80010c2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010c4:	f7ff ff3e 	bl	8000f44 <__NVIC_GetPriorityGrouping>
 80010c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ca:	687a      	ldr	r2, [r7, #4]
 80010cc:	68b9      	ldr	r1, [r7, #8]
 80010ce:	6978      	ldr	r0, [r7, #20]
 80010d0:	f7ff ff8e 	bl	8000ff0 <NVIC_EncodePriority>
 80010d4:	4602      	mov	r2, r0
 80010d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010da:	4611      	mov	r1, r2
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff5d 	bl	8000f9c <__NVIC_SetPriority>
}
 80010e2:	bf00      	nop
 80010e4:	3718      	adds	r7, #24
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	4603      	mov	r3, r0
 80010f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff31 	bl	8000f60 <__NVIC_EnableIRQ>
}
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	b082      	sub	sp, #8
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f7ff ffa2 	bl	8001058 <SysTick_Config>
 8001114:	4603      	mov	r3, r0
}
 8001116:	4618      	mov	r0, r3
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	b082      	sub	sp, #8
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d101      	bne.n	8001130 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800112c:	2301      	movs	r3, #1
 800112e:	e014      	b.n	800115a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	791b      	ldrb	r3, [r3, #4]
 8001134:	b2db      	uxtb	r3, r3
 8001136:	2b00      	cmp	r3, #0
 8001138:	d105      	bne.n	8001146 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2200      	movs	r2, #0
 800113e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f7ff fa15 	bl	8000570 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2202      	movs	r2, #2
 800114a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2200      	movs	r2, #0
 8001150:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2201      	movs	r2, #1
 8001156:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001158:	2300      	movs	r3, #0
}
 800115a:	4618      	mov	r0, r3
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
	...

08001164 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b086      	sub	sp, #24
 8001168:	af00      	add	r7, sp, #0
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	60b9      	str	r1, [r7, #8]
 800116e:	607a      	str	r2, [r7, #4]
 8001170:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8001172:	2300      	movs	r3, #0
 8001174:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	795b      	ldrb	r3, [r3, #5]
 800117a:	2b01      	cmp	r3, #1
 800117c:	d101      	bne.n	8001182 <HAL_DAC_Start_DMA+0x1e>
 800117e:	2302      	movs	r3, #2
 8001180:	e09e      	b.n	80012c0 <HAL_DAC_Start_DMA+0x15c>
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	2201      	movs	r2, #1
 8001186:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	2202      	movs	r2, #2
 800118c:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d12a      	bne.n	80011ea <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	4a4b      	ldr	r2, [pc, #300]	; (80012c8 <HAL_DAC_Start_DMA+0x164>)
 800119a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	4a4a      	ldr	r2, [pc, #296]	; (80012cc <HAL_DAC_Start_DMA+0x168>)
 80011a2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	4a49      	ldr	r2, [pc, #292]	; (80012d0 <HAL_DAC_Start_DMA+0x16c>)
 80011aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80011ba:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80011bc:	6a3b      	ldr	r3, [r7, #32]
 80011be:	2b04      	cmp	r3, #4
 80011c0:	d009      	beq.n	80011d6 <HAL_DAC_Start_DMA+0x72>
 80011c2:	2b08      	cmp	r3, #8
 80011c4:	d00c      	beq.n	80011e0 <HAL_DAC_Start_DMA+0x7c>
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d000      	beq.n	80011cc <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80011ca:	e039      	b.n	8001240 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	3308      	adds	r3, #8
 80011d2:	613b      	str	r3, [r7, #16]
        break;
 80011d4:	e034      	b.n	8001240 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	330c      	adds	r3, #12
 80011dc:	613b      	str	r3, [r7, #16]
        break;
 80011de:	e02f      	b.n	8001240 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	3310      	adds	r3, #16
 80011e6:	613b      	str	r3, [r7, #16]
        break;
 80011e8:	e02a      	b.n	8001240 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	68db      	ldr	r3, [r3, #12]
 80011ee:	4a39      	ldr	r2, [pc, #228]	; (80012d4 <HAL_DAC_Start_DMA+0x170>)
 80011f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	68db      	ldr	r3, [r3, #12]
 80011f6:	4a38      	ldr	r2, [pc, #224]	; (80012d8 <HAL_DAC_Start_DMA+0x174>)
 80011f8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	68db      	ldr	r3, [r3, #12]
 80011fe:	4a37      	ldr	r2, [pc, #220]	; (80012dc <HAL_DAC_Start_DMA+0x178>)
 8001200:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001210:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8001212:	6a3b      	ldr	r3, [r7, #32]
 8001214:	2b04      	cmp	r3, #4
 8001216:	d009      	beq.n	800122c <HAL_DAC_Start_DMA+0xc8>
 8001218:	2b08      	cmp	r3, #8
 800121a:	d00c      	beq.n	8001236 <HAL_DAC_Start_DMA+0xd2>
 800121c:	2b00      	cmp	r3, #0
 800121e:	d000      	beq.n	8001222 <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8001220:	e00e      	b.n	8001240 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	3314      	adds	r3, #20
 8001228:	613b      	str	r3, [r7, #16]
        break;
 800122a:	e009      	b.n	8001240 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	3318      	adds	r3, #24
 8001232:	613b      	str	r3, [r7, #16]
        break;
 8001234:	e004      	b.n	8001240 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	331c      	adds	r3, #28
 800123c:	613b      	str	r3, [r7, #16]
        break;
 800123e:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d111      	bne.n	800126a <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001254:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	6898      	ldr	r0, [r3, #8]
 800125a:	6879      	ldr	r1, [r7, #4]
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	f000 fb3c 	bl	80018dc <HAL_DMA_Start_IT>
 8001264:	4603      	mov	r3, r0
 8001266:	75fb      	strb	r3, [r7, #23]
 8001268:	e010      	b.n	800128c <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001278:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	68d8      	ldr	r0, [r3, #12]
 800127e:	6879      	ldr	r1, [r7, #4]
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	f000 fb2a 	bl	80018dc <HAL_DMA_Start_IT>
 8001288:	4603      	mov	r3, r0
 800128a:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	2200      	movs	r2, #0
 8001290:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8001292:	7dfb      	ldrb	r3, [r7, #23]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d10c      	bne.n	80012b2 <HAL_DAC_Start_DMA+0x14e>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	6819      	ldr	r1, [r3, #0]
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	f003 0310 	and.w	r3, r3, #16
 80012a4:	2201      	movs	r2, #1
 80012a6:	409a      	lsls	r2, r3
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	430a      	orrs	r2, r1
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	e005      	b.n	80012be <HAL_DAC_Start_DMA+0x15a>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	691b      	ldr	r3, [r3, #16]
 80012b6:	f043 0204 	orr.w	r2, r3, #4
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80012be:	7dfb      	ldrb	r3, [r7, #23]
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3718      	adds	r7, #24
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	08001643 	.word	0x08001643
 80012cc:	08001665 	.word	0x08001665
 80012d0:	08001681 	.word	0x08001681
 80012d4:	080016ff 	.word	0x080016ff
 80012d8:	08001721 	.word	0x08001721
 80012dc:	0800173d 	.word	0x0800173d

080012e0 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80012f6:	d120      	bne.n	800133a <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001302:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001306:	d118      	bne.n	800133a <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2204      	movs	r2, #4
 800130c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	691b      	ldr	r3, [r3, #16]
 8001312:	f043 0201 	orr.w	r2, r3, #1
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001322:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001332:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f000 f84b 	bl	80013d0 <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001344:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001348:	d120      	bne.n	800138c <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001350:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001354:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001358:	d118      	bne.n	800138c <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2204      	movs	r2, #4
 800135e:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	691b      	ldr	r3, [r3, #16]
 8001364:	f043 0202 	orr.w	r2, r3, #2
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001374:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001384:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f000 f9af 	bl	80016ea <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 800138c:	bf00      	nop
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}

08001394 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800139c:	bf00      	nop
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80013b0:	bf00      	nop
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80013c4:	bf00      	nop
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80013d8:	bf00      	nop
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr

080013e4 <HAL_DAC_GetValue>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval The selected DAC channel data output value.
  */
uint32_t HAL_DAC_GetValue(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	6039      	str	r1, [r7, #0]

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(Channel == DAC_CHANNEL_1)
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d103      	bne.n	80013fc <HAL_DAC_GetValue+0x18>
  {
    return hdac->Instance->DOR1;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013fa:	e002      	b.n	8001402 <HAL_DAC_GetValue+0x1e>
  }
  else
  {
    return hdac->Instance->DOR2;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 8001402:	4618      	mov	r0, r3
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr

0800140e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800140e:	b580      	push	{r7, lr}
 8001410:	b088      	sub	sp, #32
 8001412:	af00      	add	r7, sp, #0
 8001414:	60f8      	str	r0, [r7, #12]
 8001416:	60b9      	str	r1, [r7, #8]
 8001418:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 800141a:	2300      	movs	r3, #0
 800141c:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	795b      	ldrb	r3, [r3, #5]
 8001422:	2b01      	cmp	r3, #1
 8001424:	d101      	bne.n	800142a <HAL_DAC_ConfigChannel+0x1c>
 8001426:	2302      	movs	r3, #2
 8001428:	e107      	b.n	800163a <HAL_DAC_ConfigChannel+0x22c>
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	2201      	movs	r2, #1
 800142e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	2202      	movs	r2, #2
 8001434:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	2b04      	cmp	r3, #4
 800143c:	d174      	bne.n	8001528 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800143e:	f7ff fd2f 	bl	8000ea0 <HAL_GetTick>
 8001442:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d134      	bne.n	80014b4 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800144a:	e011      	b.n	8001470 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800144c:	f7ff fd28 	bl	8000ea0 <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	2b01      	cmp	r3, #1
 8001458:	d90a      	bls.n	8001470 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	691b      	ldr	r3, [r3, #16]
 800145e:	f043 0208 	orr.w	r2, r3, #8
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	2203      	movs	r2, #3
 800146a:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800146c:	2303      	movs	r3, #3
 800146e:	e0e4      	b.n	800163a <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001476:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d1e6      	bne.n	800144c <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 800147e:	2001      	movs	r0, #1
 8001480:	f7ff fd1a 	bl	8000eb8 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	68ba      	ldr	r2, [r7, #8]
 800148a:	6992      	ldr	r2, [r2, #24]
 800148c:	641a      	str	r2, [r3, #64]	; 0x40
 800148e:	e01e      	b.n	80014ce <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001490:	f7ff fd06 	bl	8000ea0 <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	2b01      	cmp	r3, #1
 800149c:	d90a      	bls.n	80014b4 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	691b      	ldr	r3, [r3, #16]
 80014a2:	f043 0208 	orr.w	r2, r3, #8
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	2203      	movs	r2, #3
 80014ae:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80014b0:	2303      	movs	r3, #3
 80014b2:	e0c2      	b.n	800163a <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	dbe8      	blt.n	8001490 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 80014be:	2001      	movs	r0, #1
 80014c0:	f7ff fcfa 	bl	8000eb8 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	68ba      	ldr	r2, [r7, #8]
 80014ca:	6992      	ldr	r2, [r2, #24]
 80014cc:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	f003 0310 	and.w	r3, r3, #16
 80014da:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80014de:	fa01 f303 	lsl.w	r3, r1, r3
 80014e2:	43db      	mvns	r3, r3
 80014e4:	ea02 0103 	and.w	r1, r2, r3
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	69da      	ldr	r2, [r3, #28]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f003 0310 	and.w	r3, r3, #16
 80014f2:	409a      	lsls	r2, r3
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	430a      	orrs	r2, r1
 80014fa:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f003 0310 	and.w	r3, r3, #16
 8001508:	21ff      	movs	r1, #255	; 0xff
 800150a:	fa01 f303 	lsl.w	r3, r1, r3
 800150e:	43db      	mvns	r3, r3
 8001510:	ea02 0103 	and.w	r1, r2, r3
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	6a1a      	ldr	r2, [r3, #32]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f003 0310 	and.w	r3, r3, #16
 800151e:	409a      	lsls	r2, r3
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	430a      	orrs	r2, r1
 8001526:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	691b      	ldr	r3, [r3, #16]
 800152c:	2b01      	cmp	r3, #1
 800152e:	d11d      	bne.n	800156c <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001536:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	f003 0310 	and.w	r3, r3, #16
 800153e:	221f      	movs	r2, #31
 8001540:	fa02 f303 	lsl.w	r3, r2, r3
 8001544:	43db      	mvns	r3, r3
 8001546:	69ba      	ldr	r2, [r7, #24]
 8001548:	4013      	ands	r3, r2
 800154a:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	695b      	ldr	r3, [r3, #20]
 8001550:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f003 0310 	and.w	r3, r3, #16
 8001558:	697a      	ldr	r2, [r7, #20]
 800155a:	fa02 f303 	lsl.w	r3, r2, r3
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	4313      	orrs	r3, r2
 8001562:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001572:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f003 0310 	and.w	r3, r3, #16
 800157a:	2207      	movs	r2, #7
 800157c:	fa02 f303 	lsl.w	r3, r2, r3
 8001580:	43db      	mvns	r3, r3
 8001582:	69ba      	ldr	r2, [r7, #24]
 8001584:	4013      	ands	r3, r2
 8001586:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	431a      	orrs	r2, r3
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	68db      	ldr	r3, [r3, #12]
 8001596:	4313      	orrs	r3, r2
 8001598:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f003 0310 	and.w	r3, r3, #16
 80015a0:	697a      	ldr	r2, [r7, #20]
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	6819      	ldr	r1, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f003 0310 	and.w	r3, r3, #16
 80015c0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015c4:	fa02 f303 	lsl.w	r3, r2, r3
 80015c8:	43da      	mvns	r2, r3
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	400a      	ands	r2, r1
 80015d0:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f003 0310 	and.w	r3, r3, #16
 80015e0:	f640 72fc 	movw	r2, #4092	; 0xffc
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	43db      	mvns	r3, r3
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	4013      	ands	r3, r2
 80015ee:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f003 0310 	and.w	r3, r3, #16
 80015fc:	697a      	ldr	r2, [r7, #20]
 80015fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001602:	69ba      	ldr	r2, [r7, #24]
 8001604:	4313      	orrs	r3, r2
 8001606:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	6819      	ldr	r1, [r3, #0]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	f003 0310 	and.w	r3, r3, #16
 800161c:	22c0      	movs	r2, #192	; 0xc0
 800161e:	fa02 f303 	lsl.w	r3, r2, r3
 8001622:	43da      	mvns	r2, r3
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	400a      	ands	r2, r1
 800162a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	2201      	movs	r2, #1
 8001630:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	2200      	movs	r2, #0
 8001636:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	3720      	adds	r7, #32
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}

08001642 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001642:	b580      	push	{r7, lr}
 8001644:	b084      	sub	sp, #16
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800164e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8001650:	68f8      	ldr	r0, [r7, #12]
 8001652:	f7ff fe9f 	bl	8001394 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	2201      	movs	r2, #1
 800165a:	711a      	strb	r2, [r3, #4]
}
 800165c:	bf00      	nop
 800165e:	3710      	adds	r7, #16
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}

08001664 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001670:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8001672:	68f8      	ldr	r0, [r7, #12]
 8001674:	f7ff fe98 	bl	80013a8 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001678:	bf00      	nop
 800167a:	3710      	adds	r7, #16
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}

08001680 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800168c:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	691b      	ldr	r3, [r3, #16]
 8001692:	f043 0204 	orr.w	r2, r3, #4
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800169a:	68f8      	ldr	r0, [r7, #12]
 800169c:	f7ff fe8e 	bl	80013bc <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	2201      	movs	r2, #1
 80016a4:	711a      	strb	r2, [r3, #4]
}
 80016a6:	bf00      	nop
 80016a8:	3710      	adds	r7, #16
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80016ae:	b480      	push	{r7}
 80016b0:	b083      	sub	sp, #12
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80016b6:	bf00      	nop
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr

080016c2 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80016c2:	b480      	push	{r7}
 80016c4:	b083      	sub	sp, #12
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80016ca:	bf00      	nop
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr

080016d6 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80016d6:	b480      	push	{r7}
 80016d8:	b083      	sub	sp, #12
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80016de:	bf00      	nop
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr

080016ea <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80016ea:	b480      	push	{r7}
 80016ec:	b083      	sub	sp, #12
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80016f2:	bf00      	nop
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr

080016fe <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80016fe:	b580      	push	{r7, lr}
 8001700:	b084      	sub	sp, #16
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800170a:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800170c:	68f8      	ldr	r0, [r7, #12]
 800170e:	f7ff ffce 	bl	80016ae <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	2201      	movs	r2, #1
 8001716:	711a      	strb	r2, [r3, #4]
}
 8001718:	bf00      	nop
 800171a:	3710      	adds	r7, #16
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800172c:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800172e:	68f8      	ldr	r0, [r7, #12]
 8001730:	f7ff ffc7 	bl	80016c2 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001734:	bf00      	nop
 8001736:	3710      	adds	r7, #16
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001748:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	691b      	ldr	r3, [r3, #16]
 800174e:	f043 0204 	orr.w	r2, r3, #4
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8001756:	68f8      	ldr	r0, [r7, #12]
 8001758:	f7ff ffbd 	bl	80016d6 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	2201      	movs	r2, #1
 8001760:	711a      	strb	r2, [r3, #4]
}
 8001762:	bf00      	nop
 8001764:	3710      	adds	r7, #16
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
	...

0800176c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d101      	bne.n	800177e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e098      	b.n	80018b0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	461a      	mov	r2, r3
 8001784:	4b4d      	ldr	r3, [pc, #308]	; (80018bc <HAL_DMA_Init+0x150>)
 8001786:	429a      	cmp	r2, r3
 8001788:	d80f      	bhi.n	80017aa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	461a      	mov	r2, r3
 8001790:	4b4b      	ldr	r3, [pc, #300]	; (80018c0 <HAL_DMA_Init+0x154>)
 8001792:	4413      	add	r3, r2
 8001794:	4a4b      	ldr	r2, [pc, #300]	; (80018c4 <HAL_DMA_Init+0x158>)
 8001796:	fba2 2303 	umull	r2, r3, r2, r3
 800179a:	091b      	lsrs	r3, r3, #4
 800179c:	009a      	lsls	r2, r3, #2
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a48      	ldr	r2, [pc, #288]	; (80018c8 <HAL_DMA_Init+0x15c>)
 80017a6:	641a      	str	r2, [r3, #64]	; 0x40
 80017a8:	e00e      	b.n	80017c8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	461a      	mov	r2, r3
 80017b0:	4b46      	ldr	r3, [pc, #280]	; (80018cc <HAL_DMA_Init+0x160>)
 80017b2:	4413      	add	r3, r2
 80017b4:	4a43      	ldr	r2, [pc, #268]	; (80018c4 <HAL_DMA_Init+0x158>)
 80017b6:	fba2 2303 	umull	r2, r3, r2, r3
 80017ba:	091b      	lsrs	r3, r3, #4
 80017bc:	009a      	lsls	r2, r3, #2
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a42      	ldr	r2, [pc, #264]	; (80018d0 <HAL_DMA_Init+0x164>)
 80017c6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2202      	movs	r2, #2
 80017cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80017de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017e2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80017ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	691b      	ldr	r3, [r3, #16]
 80017f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	699b      	ldr	r3, [r3, #24]
 80017fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001804:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6a1b      	ldr	r3, [r3, #32]
 800180a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800180c:	68fa      	ldr	r2, [r7, #12]
 800180e:	4313      	orrs	r3, r2
 8001810:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	68fa      	ldr	r2, [r7, #12]
 8001818:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001822:	d039      	beq.n	8001898 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001828:	4a27      	ldr	r2, [pc, #156]	; (80018c8 <HAL_DMA_Init+0x15c>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d11a      	bne.n	8001864 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800182e:	4b29      	ldr	r3, [pc, #164]	; (80018d4 <HAL_DMA_Init+0x168>)
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001836:	f003 031c 	and.w	r3, r3, #28
 800183a:	210f      	movs	r1, #15
 800183c:	fa01 f303 	lsl.w	r3, r1, r3
 8001840:	43db      	mvns	r3, r3
 8001842:	4924      	ldr	r1, [pc, #144]	; (80018d4 <HAL_DMA_Init+0x168>)
 8001844:	4013      	ands	r3, r2
 8001846:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001848:	4b22      	ldr	r3, [pc, #136]	; (80018d4 <HAL_DMA_Init+0x168>)
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6859      	ldr	r1, [r3, #4]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001854:	f003 031c 	and.w	r3, r3, #28
 8001858:	fa01 f303 	lsl.w	r3, r1, r3
 800185c:	491d      	ldr	r1, [pc, #116]	; (80018d4 <HAL_DMA_Init+0x168>)
 800185e:	4313      	orrs	r3, r2
 8001860:	600b      	str	r3, [r1, #0]
 8001862:	e019      	b.n	8001898 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001864:	4b1c      	ldr	r3, [pc, #112]	; (80018d8 <HAL_DMA_Init+0x16c>)
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186c:	f003 031c 	and.w	r3, r3, #28
 8001870:	210f      	movs	r1, #15
 8001872:	fa01 f303 	lsl.w	r3, r1, r3
 8001876:	43db      	mvns	r3, r3
 8001878:	4917      	ldr	r1, [pc, #92]	; (80018d8 <HAL_DMA_Init+0x16c>)
 800187a:	4013      	ands	r3, r2
 800187c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800187e:	4b16      	ldr	r3, [pc, #88]	; (80018d8 <HAL_DMA_Init+0x16c>)
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6859      	ldr	r1, [r3, #4]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800188a:	f003 031c 	and.w	r3, r3, #28
 800188e:	fa01 f303 	lsl.w	r3, r1, r3
 8001892:	4911      	ldr	r1, [pc, #68]	; (80018d8 <HAL_DMA_Init+0x16c>)
 8001894:	4313      	orrs	r3, r2
 8001896:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2200      	movs	r2, #0
 800189c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2201      	movs	r2, #1
 80018a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2200      	movs	r2, #0
 80018aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80018ae:	2300      	movs	r3, #0
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3714      	adds	r7, #20
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr
 80018bc:	40020407 	.word	0x40020407
 80018c0:	bffdfff8 	.word	0xbffdfff8
 80018c4:	cccccccd 	.word	0xcccccccd
 80018c8:	40020000 	.word	0x40020000
 80018cc:	bffdfbf8 	.word	0xbffdfbf8
 80018d0:	40020400 	.word	0x40020400
 80018d4:	400200a8 	.word	0x400200a8
 80018d8:	400204a8 	.word	0x400204a8

080018dc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b086      	sub	sp, #24
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
 80018e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80018ea:	2300      	movs	r3, #0
 80018ec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d101      	bne.n	80018fc <HAL_DMA_Start_IT+0x20>
 80018f8:	2302      	movs	r3, #2
 80018fa:	e04b      	b.n	8001994 <HAL_DMA_Start_IT+0xb8>
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2201      	movs	r2, #1
 8001900:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800190a:	b2db      	uxtb	r3, r3
 800190c:	2b01      	cmp	r3, #1
 800190e:	d13a      	bne.n	8001986 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	2202      	movs	r2, #2
 8001914:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	2200      	movs	r2, #0
 800191c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f022 0201 	bic.w	r2, r2, #1
 800192c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	68b9      	ldr	r1, [r7, #8]
 8001934:	68f8      	ldr	r0, [r7, #12]
 8001936:	f000 f8e0 	bl	8001afa <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	2b00      	cmp	r3, #0
 8001940:	d008      	beq.n	8001954 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f042 020e 	orr.w	r2, r2, #14
 8001950:	601a      	str	r2, [r3, #0]
 8001952:	e00f      	b.n	8001974 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f022 0204 	bic.w	r2, r2, #4
 8001962:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f042 020a 	orr.w	r2, r2, #10
 8001972:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f042 0201 	orr.w	r2, r2, #1
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	e005      	b.n	8001992 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	2200      	movs	r2, #0
 800198a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800198e:	2302      	movs	r3, #2
 8001990:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001992:	7dfb      	ldrb	r3, [r7, #23]
}
 8001994:	4618      	mov	r0, r3
 8001996:	3718      	adds	r7, #24
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b8:	f003 031c 	and.w	r3, r3, #28
 80019bc:	2204      	movs	r2, #4
 80019be:	409a      	lsls	r2, r3
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	4013      	ands	r3, r2
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d026      	beq.n	8001a16 <HAL_DMA_IRQHandler+0x7a>
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	f003 0304 	and.w	r3, r3, #4
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d021      	beq.n	8001a16 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0320 	and.w	r3, r3, #32
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d107      	bne.n	80019f0 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f022 0204 	bic.w	r2, r2, #4
 80019ee:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f4:	f003 021c 	and.w	r2, r3, #28
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fc:	2104      	movs	r1, #4
 80019fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001a02:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d071      	beq.n	8001af0 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001a14:	e06c      	b.n	8001af0 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1a:	f003 031c 	and.w	r3, r3, #28
 8001a1e:	2202      	movs	r2, #2
 8001a20:	409a      	lsls	r2, r3
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	4013      	ands	r3, r2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d02e      	beq.n	8001a88 <HAL_DMA_IRQHandler+0xec>
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	f003 0302 	and.w	r3, r3, #2
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d029      	beq.n	8001a88 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0320 	and.w	r3, r3, #32
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d10b      	bne.n	8001a5a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f022 020a 	bic.w	r2, r2, #10
 8001a50:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2201      	movs	r2, #1
 8001a56:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5e:	f003 021c 	and.w	r2, r3, #28
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a66:	2102      	movs	r1, #2
 8001a68:	fa01 f202 	lsl.w	r2, r1, r2
 8001a6c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2200      	movs	r2, #0
 8001a72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d038      	beq.n	8001af0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001a86:	e033      	b.n	8001af0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8c:	f003 031c 	and.w	r3, r3, #28
 8001a90:	2208      	movs	r2, #8
 8001a92:	409a      	lsls	r2, r3
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	4013      	ands	r3, r2
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d02a      	beq.n	8001af2 <HAL_DMA_IRQHandler+0x156>
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	f003 0308 	and.w	r3, r3, #8
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d025      	beq.n	8001af2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f022 020e 	bic.w	r2, r2, #14
 8001ab4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aba:	f003 021c 	and.w	r2, r3, #28
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	2101      	movs	r1, #1
 8001ac4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ac8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2201      	movs	r2, #1
 8001ace:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d004      	beq.n	8001af2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001af0:	bf00      	nop
 8001af2:	bf00      	nop
}
 8001af4:	3710      	adds	r7, #16
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}

08001afa <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001afa:	b480      	push	{r7}
 8001afc:	b085      	sub	sp, #20
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	60f8      	str	r0, [r7, #12]
 8001b02:	60b9      	str	r1, [r7, #8]
 8001b04:	607a      	str	r2, [r7, #4]
 8001b06:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b0c:	f003 021c 	and.w	r2, r3, #28
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b14:	2101      	movs	r1, #1
 8001b16:	fa01 f202 	lsl.w	r2, r1, r2
 8001b1a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	683a      	ldr	r2, [r7, #0]
 8001b22:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	2b10      	cmp	r3, #16
 8001b2a:	d108      	bne.n	8001b3e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	68ba      	ldr	r2, [r7, #8]
 8001b3a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001b3c:	e007      	b.n	8001b4e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	68ba      	ldr	r2, [r7, #8]
 8001b44:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	60da      	str	r2, [r3, #12]
}
 8001b4e:	bf00      	nop
 8001b50:	3714      	adds	r7, #20
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
	...

08001b5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b087      	sub	sp, #28
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b66:	2300      	movs	r3, #0
 8001b68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b6a:	e17f      	b.n	8001e6c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	2101      	movs	r1, #1
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	fa01 f303 	lsl.w	r3, r1, r3
 8001b78:	4013      	ands	r3, r2
 8001b7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	f000 8171 	beq.w	8001e66 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d00b      	beq.n	8001ba4 <HAL_GPIO_Init+0x48>
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d007      	beq.n	8001ba4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b98:	2b11      	cmp	r3, #17
 8001b9a:	d003      	beq.n	8001ba4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	2b12      	cmp	r3, #18
 8001ba2:	d130      	bne.n	8001c06 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	2203      	movs	r2, #3
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	43db      	mvns	r3, r3
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	68da      	ldr	r2, [r3, #12]
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	693a      	ldr	r2, [r7, #16]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	693a      	ldr	r2, [r7, #16]
 8001bd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bda:	2201      	movs	r2, #1
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	fa02 f303 	lsl.w	r3, r2, r3
 8001be2:	43db      	mvns	r3, r3
 8001be4:	693a      	ldr	r2, [r7, #16]
 8001be6:	4013      	ands	r3, r2
 8001be8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	091b      	lsrs	r3, r3, #4
 8001bf0:	f003 0201 	and.w	r2, r3, #1
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	693a      	ldr	r2, [r7, #16]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f003 0303 	and.w	r3, r3, #3
 8001c0e:	2b03      	cmp	r3, #3
 8001c10:	d118      	bne.n	8001c44 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001c18:	2201      	movs	r2, #1
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c20:	43db      	mvns	r3, r3
 8001c22:	693a      	ldr	r2, [r7, #16]
 8001c24:	4013      	ands	r3, r2
 8001c26:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	08db      	lsrs	r3, r3, #3
 8001c2e:	f003 0201 	and.w	r2, r3, #1
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	fa02 f303 	lsl.w	r3, r2, r3
 8001c38:	693a      	ldr	r2, [r7, #16]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	693a      	ldr	r2, [r7, #16]
 8001c42:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	2203      	movs	r2, #3
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	43db      	mvns	r3, r3
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	689a      	ldr	r2, [r3, #8]
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	693a      	ldr	r2, [r7, #16]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	693a      	ldr	r2, [r7, #16]
 8001c72:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d003      	beq.n	8001c84 <HAL_GPIO_Init+0x128>
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	2b12      	cmp	r3, #18
 8001c82:	d123      	bne.n	8001ccc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	08da      	lsrs	r2, r3, #3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	3208      	adds	r2, #8
 8001c8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c90:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	f003 0307 	and.w	r3, r3, #7
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	220f      	movs	r2, #15
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	691a      	ldr	r2, [r3, #16]
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	f003 0307 	and.w	r3, r3, #7
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	693a      	ldr	r2, [r7, #16]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	08da      	lsrs	r2, r3, #3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	3208      	adds	r2, #8
 8001cc6:	6939      	ldr	r1, [r7, #16]
 8001cc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	2203      	movs	r2, #3
 8001cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cdc:	43db      	mvns	r3, r3
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f003 0203 	and.w	r2, r3, #3
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	693a      	ldr	r2, [r7, #16]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	693a      	ldr	r2, [r7, #16]
 8001cfe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	f000 80ac 	beq.w	8001e66 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d0e:	4b5e      	ldr	r3, [pc, #376]	; (8001e88 <HAL_GPIO_Init+0x32c>)
 8001d10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d12:	4a5d      	ldr	r2, [pc, #372]	; (8001e88 <HAL_GPIO_Init+0x32c>)
 8001d14:	f043 0301 	orr.w	r3, r3, #1
 8001d18:	6613      	str	r3, [r2, #96]	; 0x60
 8001d1a:	4b5b      	ldr	r3, [pc, #364]	; (8001e88 <HAL_GPIO_Init+0x32c>)
 8001d1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	60bb      	str	r3, [r7, #8]
 8001d24:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d26:	4a59      	ldr	r2, [pc, #356]	; (8001e8c <HAL_GPIO_Init+0x330>)
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	089b      	lsrs	r3, r3, #2
 8001d2c:	3302      	adds	r3, #2
 8001d2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d32:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	f003 0303 	and.w	r3, r3, #3
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	220f      	movs	r2, #15
 8001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d42:	43db      	mvns	r3, r3
 8001d44:	693a      	ldr	r2, [r7, #16]
 8001d46:	4013      	ands	r3, r2
 8001d48:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d50:	d025      	beq.n	8001d9e <HAL_GPIO_Init+0x242>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a4e      	ldr	r2, [pc, #312]	; (8001e90 <HAL_GPIO_Init+0x334>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d01f      	beq.n	8001d9a <HAL_GPIO_Init+0x23e>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a4d      	ldr	r2, [pc, #308]	; (8001e94 <HAL_GPIO_Init+0x338>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d019      	beq.n	8001d96 <HAL_GPIO_Init+0x23a>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a4c      	ldr	r2, [pc, #304]	; (8001e98 <HAL_GPIO_Init+0x33c>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d013      	beq.n	8001d92 <HAL_GPIO_Init+0x236>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a4b      	ldr	r2, [pc, #300]	; (8001e9c <HAL_GPIO_Init+0x340>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d00d      	beq.n	8001d8e <HAL_GPIO_Init+0x232>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a4a      	ldr	r2, [pc, #296]	; (8001ea0 <HAL_GPIO_Init+0x344>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d007      	beq.n	8001d8a <HAL_GPIO_Init+0x22e>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a49      	ldr	r2, [pc, #292]	; (8001ea4 <HAL_GPIO_Init+0x348>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d101      	bne.n	8001d86 <HAL_GPIO_Init+0x22a>
 8001d82:	2306      	movs	r3, #6
 8001d84:	e00c      	b.n	8001da0 <HAL_GPIO_Init+0x244>
 8001d86:	2307      	movs	r3, #7
 8001d88:	e00a      	b.n	8001da0 <HAL_GPIO_Init+0x244>
 8001d8a:	2305      	movs	r3, #5
 8001d8c:	e008      	b.n	8001da0 <HAL_GPIO_Init+0x244>
 8001d8e:	2304      	movs	r3, #4
 8001d90:	e006      	b.n	8001da0 <HAL_GPIO_Init+0x244>
 8001d92:	2303      	movs	r3, #3
 8001d94:	e004      	b.n	8001da0 <HAL_GPIO_Init+0x244>
 8001d96:	2302      	movs	r3, #2
 8001d98:	e002      	b.n	8001da0 <HAL_GPIO_Init+0x244>
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e000      	b.n	8001da0 <HAL_GPIO_Init+0x244>
 8001d9e:	2300      	movs	r3, #0
 8001da0:	697a      	ldr	r2, [r7, #20]
 8001da2:	f002 0203 	and.w	r2, r2, #3
 8001da6:	0092      	lsls	r2, r2, #2
 8001da8:	4093      	lsls	r3, r2
 8001daa:	693a      	ldr	r2, [r7, #16]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001db0:	4936      	ldr	r1, [pc, #216]	; (8001e8c <HAL_GPIO_Init+0x330>)
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	089b      	lsrs	r3, r3, #2
 8001db6:	3302      	adds	r3, #2
 8001db8:	693a      	ldr	r2, [r7, #16]
 8001dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001dbe:	4b3a      	ldr	r3, [pc, #232]	; (8001ea8 <HAL_GPIO_Init+0x34c>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	43db      	mvns	r3, r3
 8001dc8:	693a      	ldr	r2, [r7, #16]
 8001dca:	4013      	ands	r3, r2
 8001dcc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d003      	beq.n	8001de2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001de2:	4a31      	ldr	r2, [pc, #196]	; (8001ea8 <HAL_GPIO_Init+0x34c>)
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001de8:	4b2f      	ldr	r3, [pc, #188]	; (8001ea8 <HAL_GPIO_Init+0x34c>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	43db      	mvns	r3, r3
 8001df2:	693a      	ldr	r2, [r7, #16]
 8001df4:	4013      	ands	r3, r2
 8001df6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d003      	beq.n	8001e0c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001e04:	693a      	ldr	r2, [r7, #16]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e0c:	4a26      	ldr	r2, [pc, #152]	; (8001ea8 <HAL_GPIO_Init+0x34c>)
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e12:	4b25      	ldr	r3, [pc, #148]	; (8001ea8 <HAL_GPIO_Init+0x34c>)
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	43db      	mvns	r3, r3
 8001e1c:	693a      	ldr	r2, [r7, #16]
 8001e1e:	4013      	ands	r3, r2
 8001e20:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d003      	beq.n	8001e36 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001e2e:	693a      	ldr	r2, [r7, #16]
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e36:	4a1c      	ldr	r2, [pc, #112]	; (8001ea8 <HAL_GPIO_Init+0x34c>)
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e3c:	4b1a      	ldr	r3, [pc, #104]	; (8001ea8 <HAL_GPIO_Init+0x34c>)
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	43db      	mvns	r3, r3
 8001e46:	693a      	ldr	r2, [r7, #16]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d003      	beq.n	8001e60 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001e58:	693a      	ldr	r2, [r7, #16]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e60:	4a11      	ldr	r2, [pc, #68]	; (8001ea8 <HAL_GPIO_Init+0x34c>)
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	3301      	adds	r3, #1
 8001e6a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	fa22 f303 	lsr.w	r3, r2, r3
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	f47f ae78 	bne.w	8001b6c <HAL_GPIO_Init+0x10>
  }
}
 8001e7c:	bf00      	nop
 8001e7e:	371c      	adds	r7, #28
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	40010000 	.word	0x40010000
 8001e90:	48000400 	.word	0x48000400
 8001e94:	48000800 	.word	0x48000800
 8001e98:	48000c00 	.word	0x48000c00
 8001e9c:	48001000 	.word	0x48001000
 8001ea0:	48001400 	.word	0x48001400
 8001ea4:	48001800 	.word	0x48001800
 8001ea8:	40010400 	.word	0x40010400

08001eac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001eb0:	4b04      	ldr	r3, [pc, #16]	; (8001ec4 <HAL_PWREx_GetVoltageRange+0x18>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	40007000 	.word	0x40007000

08001ec8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ed6:	d130      	bne.n	8001f3a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ed8:	4b23      	ldr	r3, [pc, #140]	; (8001f68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ee0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ee4:	d038      	beq.n	8001f58 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ee6:	4b20      	ldr	r3, [pc, #128]	; (8001f68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001eee:	4a1e      	ldr	r2, [pc, #120]	; (8001f68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ef0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ef4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ef6:	4b1d      	ldr	r3, [pc, #116]	; (8001f6c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	2232      	movs	r2, #50	; 0x32
 8001efc:	fb02 f303 	mul.w	r3, r2, r3
 8001f00:	4a1b      	ldr	r2, [pc, #108]	; (8001f70 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001f02:	fba2 2303 	umull	r2, r3, r2, r3
 8001f06:	0c9b      	lsrs	r3, r3, #18
 8001f08:	3301      	adds	r3, #1
 8001f0a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f0c:	e002      	b.n	8001f14 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	3b01      	subs	r3, #1
 8001f12:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f14:	4b14      	ldr	r3, [pc, #80]	; (8001f68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f16:	695b      	ldr	r3, [r3, #20]
 8001f18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f20:	d102      	bne.n	8001f28 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d1f2      	bne.n	8001f0e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f28:	4b0f      	ldr	r3, [pc, #60]	; (8001f68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f2a:	695b      	ldr	r3, [r3, #20]
 8001f2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f34:	d110      	bne.n	8001f58 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e00f      	b.n	8001f5a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f3a:	4b0b      	ldr	r3, [pc, #44]	; (8001f68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f46:	d007      	beq.n	8001f58 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f48:	4b07      	ldr	r3, [pc, #28]	; (8001f68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f50:	4a05      	ldr	r2, [pc, #20]	; (8001f68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f56:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3714      	adds	r7, #20
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	40007000 	.word	0x40007000
 8001f6c:	20000000 	.word	0x20000000
 8001f70:	431bde83 	.word	0x431bde83

08001f74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b088      	sub	sp, #32
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d101      	bne.n	8001f86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e3d4      	b.n	8002730 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f86:	4ba1      	ldr	r3, [pc, #644]	; (800220c <HAL_RCC_OscConfig+0x298>)
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	f003 030c 	and.w	r3, r3, #12
 8001f8e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f90:	4b9e      	ldr	r3, [pc, #632]	; (800220c <HAL_RCC_OscConfig+0x298>)
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	f003 0303 	and.w	r3, r3, #3
 8001f98:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0310 	and.w	r3, r3, #16
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	f000 80e4 	beq.w	8002170 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d007      	beq.n	8001fbe <HAL_RCC_OscConfig+0x4a>
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	2b0c      	cmp	r3, #12
 8001fb2:	f040 808b 	bne.w	80020cc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	f040 8087 	bne.w	80020cc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001fbe:	4b93      	ldr	r3, [pc, #588]	; (800220c <HAL_RCC_OscConfig+0x298>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d005      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x62>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	699b      	ldr	r3, [r3, #24]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d101      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e3ac      	b.n	8002730 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a1a      	ldr	r2, [r3, #32]
 8001fda:	4b8c      	ldr	r3, [pc, #560]	; (800220c <HAL_RCC_OscConfig+0x298>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0308 	and.w	r3, r3, #8
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d004      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x7c>
 8001fe6:	4b89      	ldr	r3, [pc, #548]	; (800220c <HAL_RCC_OscConfig+0x298>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fee:	e005      	b.n	8001ffc <HAL_RCC_OscConfig+0x88>
 8001ff0:	4b86      	ldr	r3, [pc, #536]	; (800220c <HAL_RCC_OscConfig+0x298>)
 8001ff2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ff6:	091b      	lsrs	r3, r3, #4
 8001ff8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d223      	bcs.n	8002048 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a1b      	ldr	r3, [r3, #32]
 8002004:	4618      	mov	r0, r3
 8002006:	f000 fd3f 	bl	8002a88 <RCC_SetFlashLatencyFromMSIRange>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e38d      	b.n	8002730 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002014:	4b7d      	ldr	r3, [pc, #500]	; (800220c <HAL_RCC_OscConfig+0x298>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a7c      	ldr	r2, [pc, #496]	; (800220c <HAL_RCC_OscConfig+0x298>)
 800201a:	f043 0308 	orr.w	r3, r3, #8
 800201e:	6013      	str	r3, [r2, #0]
 8002020:	4b7a      	ldr	r3, [pc, #488]	; (800220c <HAL_RCC_OscConfig+0x298>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a1b      	ldr	r3, [r3, #32]
 800202c:	4977      	ldr	r1, [pc, #476]	; (800220c <HAL_RCC_OscConfig+0x298>)
 800202e:	4313      	orrs	r3, r2
 8002030:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002032:	4b76      	ldr	r3, [pc, #472]	; (800220c <HAL_RCC_OscConfig+0x298>)
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	69db      	ldr	r3, [r3, #28]
 800203e:	021b      	lsls	r3, r3, #8
 8002040:	4972      	ldr	r1, [pc, #456]	; (800220c <HAL_RCC_OscConfig+0x298>)
 8002042:	4313      	orrs	r3, r2
 8002044:	604b      	str	r3, [r1, #4]
 8002046:	e025      	b.n	8002094 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002048:	4b70      	ldr	r3, [pc, #448]	; (800220c <HAL_RCC_OscConfig+0x298>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a6f      	ldr	r2, [pc, #444]	; (800220c <HAL_RCC_OscConfig+0x298>)
 800204e:	f043 0308 	orr.w	r3, r3, #8
 8002052:	6013      	str	r3, [r2, #0]
 8002054:	4b6d      	ldr	r3, [pc, #436]	; (800220c <HAL_RCC_OscConfig+0x298>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6a1b      	ldr	r3, [r3, #32]
 8002060:	496a      	ldr	r1, [pc, #424]	; (800220c <HAL_RCC_OscConfig+0x298>)
 8002062:	4313      	orrs	r3, r2
 8002064:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002066:	4b69      	ldr	r3, [pc, #420]	; (800220c <HAL_RCC_OscConfig+0x298>)
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	69db      	ldr	r3, [r3, #28]
 8002072:	021b      	lsls	r3, r3, #8
 8002074:	4965      	ldr	r1, [pc, #404]	; (800220c <HAL_RCC_OscConfig+0x298>)
 8002076:	4313      	orrs	r3, r2
 8002078:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800207a:	69bb      	ldr	r3, [r7, #24]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d109      	bne.n	8002094 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a1b      	ldr	r3, [r3, #32]
 8002084:	4618      	mov	r0, r3
 8002086:	f000 fcff 	bl	8002a88 <RCC_SetFlashLatencyFromMSIRange>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e34d      	b.n	8002730 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002094:	f000 fc36 	bl	8002904 <HAL_RCC_GetSysClockFreq>
 8002098:	4601      	mov	r1, r0
 800209a:	4b5c      	ldr	r3, [pc, #368]	; (800220c <HAL_RCC_OscConfig+0x298>)
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	091b      	lsrs	r3, r3, #4
 80020a0:	f003 030f 	and.w	r3, r3, #15
 80020a4:	4a5a      	ldr	r2, [pc, #360]	; (8002210 <HAL_RCC_OscConfig+0x29c>)
 80020a6:	5cd3      	ldrb	r3, [r2, r3]
 80020a8:	f003 031f 	and.w	r3, r3, #31
 80020ac:	fa21 f303 	lsr.w	r3, r1, r3
 80020b0:	4a58      	ldr	r2, [pc, #352]	; (8002214 <HAL_RCC_OscConfig+0x2a0>)
 80020b2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80020b4:	4b58      	ldr	r3, [pc, #352]	; (8002218 <HAL_RCC_OscConfig+0x2a4>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7fe fea1 	bl	8000e00 <HAL_InitTick>
 80020be:	4603      	mov	r3, r0
 80020c0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80020c2:	7bfb      	ldrb	r3, [r7, #15]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d052      	beq.n	800216e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80020c8:	7bfb      	ldrb	r3, [r7, #15]
 80020ca:	e331      	b.n	8002730 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	699b      	ldr	r3, [r3, #24]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d032      	beq.n	800213a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80020d4:	4b4d      	ldr	r3, [pc, #308]	; (800220c <HAL_RCC_OscConfig+0x298>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a4c      	ldr	r2, [pc, #304]	; (800220c <HAL_RCC_OscConfig+0x298>)
 80020da:	f043 0301 	orr.w	r3, r3, #1
 80020de:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80020e0:	f7fe fede 	bl	8000ea0 <HAL_GetTick>
 80020e4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020e6:	e008      	b.n	80020fa <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020e8:	f7fe feda 	bl	8000ea0 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e31a      	b.n	8002730 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020fa:	4b44      	ldr	r3, [pc, #272]	; (800220c <HAL_RCC_OscConfig+0x298>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0302 	and.w	r3, r3, #2
 8002102:	2b00      	cmp	r3, #0
 8002104:	d0f0      	beq.n	80020e8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002106:	4b41      	ldr	r3, [pc, #260]	; (800220c <HAL_RCC_OscConfig+0x298>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a40      	ldr	r2, [pc, #256]	; (800220c <HAL_RCC_OscConfig+0x298>)
 800210c:	f043 0308 	orr.w	r3, r3, #8
 8002110:	6013      	str	r3, [r2, #0]
 8002112:	4b3e      	ldr	r3, [pc, #248]	; (800220c <HAL_RCC_OscConfig+0x298>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a1b      	ldr	r3, [r3, #32]
 800211e:	493b      	ldr	r1, [pc, #236]	; (800220c <HAL_RCC_OscConfig+0x298>)
 8002120:	4313      	orrs	r3, r2
 8002122:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002124:	4b39      	ldr	r3, [pc, #228]	; (800220c <HAL_RCC_OscConfig+0x298>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	69db      	ldr	r3, [r3, #28]
 8002130:	021b      	lsls	r3, r3, #8
 8002132:	4936      	ldr	r1, [pc, #216]	; (800220c <HAL_RCC_OscConfig+0x298>)
 8002134:	4313      	orrs	r3, r2
 8002136:	604b      	str	r3, [r1, #4]
 8002138:	e01a      	b.n	8002170 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800213a:	4b34      	ldr	r3, [pc, #208]	; (800220c <HAL_RCC_OscConfig+0x298>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a33      	ldr	r2, [pc, #204]	; (800220c <HAL_RCC_OscConfig+0x298>)
 8002140:	f023 0301 	bic.w	r3, r3, #1
 8002144:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002146:	f7fe feab 	bl	8000ea0 <HAL_GetTick>
 800214a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800214c:	e008      	b.n	8002160 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800214e:	f7fe fea7 	bl	8000ea0 <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	2b02      	cmp	r3, #2
 800215a:	d901      	bls.n	8002160 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e2e7      	b.n	8002730 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002160:	4b2a      	ldr	r3, [pc, #168]	; (800220c <HAL_RCC_OscConfig+0x298>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0302 	and.w	r3, r3, #2
 8002168:	2b00      	cmp	r3, #0
 800216a:	d1f0      	bne.n	800214e <HAL_RCC_OscConfig+0x1da>
 800216c:	e000      	b.n	8002170 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800216e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0301 	and.w	r3, r3, #1
 8002178:	2b00      	cmp	r3, #0
 800217a:	d074      	beq.n	8002266 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	2b08      	cmp	r3, #8
 8002180:	d005      	beq.n	800218e <HAL_RCC_OscConfig+0x21a>
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	2b0c      	cmp	r3, #12
 8002186:	d10e      	bne.n	80021a6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	2b03      	cmp	r3, #3
 800218c:	d10b      	bne.n	80021a6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800218e:	4b1f      	ldr	r3, [pc, #124]	; (800220c <HAL_RCC_OscConfig+0x298>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d064      	beq.n	8002264 <HAL_RCC_OscConfig+0x2f0>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d160      	bne.n	8002264 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e2c4      	b.n	8002730 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021ae:	d106      	bne.n	80021be <HAL_RCC_OscConfig+0x24a>
 80021b0:	4b16      	ldr	r3, [pc, #88]	; (800220c <HAL_RCC_OscConfig+0x298>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a15      	ldr	r2, [pc, #84]	; (800220c <HAL_RCC_OscConfig+0x298>)
 80021b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021ba:	6013      	str	r3, [r2, #0]
 80021bc:	e01d      	b.n	80021fa <HAL_RCC_OscConfig+0x286>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021c6:	d10c      	bne.n	80021e2 <HAL_RCC_OscConfig+0x26e>
 80021c8:	4b10      	ldr	r3, [pc, #64]	; (800220c <HAL_RCC_OscConfig+0x298>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a0f      	ldr	r2, [pc, #60]	; (800220c <HAL_RCC_OscConfig+0x298>)
 80021ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021d2:	6013      	str	r3, [r2, #0]
 80021d4:	4b0d      	ldr	r3, [pc, #52]	; (800220c <HAL_RCC_OscConfig+0x298>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a0c      	ldr	r2, [pc, #48]	; (800220c <HAL_RCC_OscConfig+0x298>)
 80021da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021de:	6013      	str	r3, [r2, #0]
 80021e0:	e00b      	b.n	80021fa <HAL_RCC_OscConfig+0x286>
 80021e2:	4b0a      	ldr	r3, [pc, #40]	; (800220c <HAL_RCC_OscConfig+0x298>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a09      	ldr	r2, [pc, #36]	; (800220c <HAL_RCC_OscConfig+0x298>)
 80021e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021ec:	6013      	str	r3, [r2, #0]
 80021ee:	4b07      	ldr	r3, [pc, #28]	; (800220c <HAL_RCC_OscConfig+0x298>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a06      	ldr	r2, [pc, #24]	; (800220c <HAL_RCC_OscConfig+0x298>)
 80021f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021f8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d01c      	beq.n	800223c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002202:	f7fe fe4d 	bl	8000ea0 <HAL_GetTick>
 8002206:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002208:	e011      	b.n	800222e <HAL_RCC_OscConfig+0x2ba>
 800220a:	bf00      	nop
 800220c:	40021000 	.word	0x40021000
 8002210:	08005344 	.word	0x08005344
 8002214:	20000000 	.word	0x20000000
 8002218:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800221c:	f7fe fe40 	bl	8000ea0 <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	2b64      	cmp	r3, #100	; 0x64
 8002228:	d901      	bls.n	800222e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e280      	b.n	8002730 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800222e:	4baf      	ldr	r3, [pc, #700]	; (80024ec <HAL_RCC_OscConfig+0x578>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d0f0      	beq.n	800221c <HAL_RCC_OscConfig+0x2a8>
 800223a:	e014      	b.n	8002266 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800223c:	f7fe fe30 	bl	8000ea0 <HAL_GetTick>
 8002240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002242:	e008      	b.n	8002256 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002244:	f7fe fe2c 	bl	8000ea0 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	2b64      	cmp	r3, #100	; 0x64
 8002250:	d901      	bls.n	8002256 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e26c      	b.n	8002730 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002256:	4ba5      	ldr	r3, [pc, #660]	; (80024ec <HAL_RCC_OscConfig+0x578>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d1f0      	bne.n	8002244 <HAL_RCC_OscConfig+0x2d0>
 8002262:	e000      	b.n	8002266 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002264:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0302 	and.w	r3, r3, #2
 800226e:	2b00      	cmp	r3, #0
 8002270:	d060      	beq.n	8002334 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	2b04      	cmp	r3, #4
 8002276:	d005      	beq.n	8002284 <HAL_RCC_OscConfig+0x310>
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	2b0c      	cmp	r3, #12
 800227c:	d119      	bne.n	80022b2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	2b02      	cmp	r3, #2
 8002282:	d116      	bne.n	80022b2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002284:	4b99      	ldr	r3, [pc, #612]	; (80024ec <HAL_RCC_OscConfig+0x578>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800228c:	2b00      	cmp	r3, #0
 800228e:	d005      	beq.n	800229c <HAL_RCC_OscConfig+0x328>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d101      	bne.n	800229c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e249      	b.n	8002730 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800229c:	4b93      	ldr	r3, [pc, #588]	; (80024ec <HAL_RCC_OscConfig+0x578>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	691b      	ldr	r3, [r3, #16]
 80022a8:	061b      	lsls	r3, r3, #24
 80022aa:	4990      	ldr	r1, [pc, #576]	; (80024ec <HAL_RCC_OscConfig+0x578>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022b0:	e040      	b.n	8002334 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d023      	beq.n	8002302 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022ba:	4b8c      	ldr	r3, [pc, #560]	; (80024ec <HAL_RCC_OscConfig+0x578>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a8b      	ldr	r2, [pc, #556]	; (80024ec <HAL_RCC_OscConfig+0x578>)
 80022c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c6:	f7fe fdeb 	bl	8000ea0 <HAL_GetTick>
 80022ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022cc:	e008      	b.n	80022e0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022ce:	f7fe fde7 	bl	8000ea0 <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d901      	bls.n	80022e0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e227      	b.n	8002730 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022e0:	4b82      	ldr	r3, [pc, #520]	; (80024ec <HAL_RCC_OscConfig+0x578>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d0f0      	beq.n	80022ce <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ec:	4b7f      	ldr	r3, [pc, #508]	; (80024ec <HAL_RCC_OscConfig+0x578>)
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	691b      	ldr	r3, [r3, #16]
 80022f8:	061b      	lsls	r3, r3, #24
 80022fa:	497c      	ldr	r1, [pc, #496]	; (80024ec <HAL_RCC_OscConfig+0x578>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	604b      	str	r3, [r1, #4]
 8002300:	e018      	b.n	8002334 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002302:	4b7a      	ldr	r3, [pc, #488]	; (80024ec <HAL_RCC_OscConfig+0x578>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a79      	ldr	r2, [pc, #484]	; (80024ec <HAL_RCC_OscConfig+0x578>)
 8002308:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800230c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800230e:	f7fe fdc7 	bl	8000ea0 <HAL_GetTick>
 8002312:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002314:	e008      	b.n	8002328 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002316:	f7fe fdc3 	bl	8000ea0 <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	2b02      	cmp	r3, #2
 8002322:	d901      	bls.n	8002328 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e203      	b.n	8002730 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002328:	4b70      	ldr	r3, [pc, #448]	; (80024ec <HAL_RCC_OscConfig+0x578>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002330:	2b00      	cmp	r3, #0
 8002332:	d1f0      	bne.n	8002316 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0308 	and.w	r3, r3, #8
 800233c:	2b00      	cmp	r3, #0
 800233e:	d03c      	beq.n	80023ba <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	695b      	ldr	r3, [r3, #20]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d01c      	beq.n	8002382 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002348:	4b68      	ldr	r3, [pc, #416]	; (80024ec <HAL_RCC_OscConfig+0x578>)
 800234a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800234e:	4a67      	ldr	r2, [pc, #412]	; (80024ec <HAL_RCC_OscConfig+0x578>)
 8002350:	f043 0301 	orr.w	r3, r3, #1
 8002354:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002358:	f7fe fda2 	bl	8000ea0 <HAL_GetTick>
 800235c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800235e:	e008      	b.n	8002372 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002360:	f7fe fd9e 	bl	8000ea0 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	2b02      	cmp	r3, #2
 800236c:	d901      	bls.n	8002372 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e1de      	b.n	8002730 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002372:	4b5e      	ldr	r3, [pc, #376]	; (80024ec <HAL_RCC_OscConfig+0x578>)
 8002374:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002378:	f003 0302 	and.w	r3, r3, #2
 800237c:	2b00      	cmp	r3, #0
 800237e:	d0ef      	beq.n	8002360 <HAL_RCC_OscConfig+0x3ec>
 8002380:	e01b      	b.n	80023ba <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002382:	4b5a      	ldr	r3, [pc, #360]	; (80024ec <HAL_RCC_OscConfig+0x578>)
 8002384:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002388:	4a58      	ldr	r2, [pc, #352]	; (80024ec <HAL_RCC_OscConfig+0x578>)
 800238a:	f023 0301 	bic.w	r3, r3, #1
 800238e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002392:	f7fe fd85 	bl	8000ea0 <HAL_GetTick>
 8002396:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002398:	e008      	b.n	80023ac <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800239a:	f7fe fd81 	bl	8000ea0 <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d901      	bls.n	80023ac <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e1c1      	b.n	8002730 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023ac:	4b4f      	ldr	r3, [pc, #316]	; (80024ec <HAL_RCC_OscConfig+0x578>)
 80023ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d1ef      	bne.n	800239a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0304 	and.w	r3, r3, #4
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	f000 80a6 	beq.w	8002514 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023c8:	2300      	movs	r3, #0
 80023ca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80023cc:	4b47      	ldr	r3, [pc, #284]	; (80024ec <HAL_RCC_OscConfig+0x578>)
 80023ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d10d      	bne.n	80023f4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023d8:	4b44      	ldr	r3, [pc, #272]	; (80024ec <HAL_RCC_OscConfig+0x578>)
 80023da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023dc:	4a43      	ldr	r2, [pc, #268]	; (80024ec <HAL_RCC_OscConfig+0x578>)
 80023de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023e2:	6593      	str	r3, [r2, #88]	; 0x58
 80023e4:	4b41      	ldr	r3, [pc, #260]	; (80024ec <HAL_RCC_OscConfig+0x578>)
 80023e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ec:	60bb      	str	r3, [r7, #8]
 80023ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023f0:	2301      	movs	r3, #1
 80023f2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023f4:	4b3e      	ldr	r3, [pc, #248]	; (80024f0 <HAL_RCC_OscConfig+0x57c>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d118      	bne.n	8002432 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002400:	4b3b      	ldr	r3, [pc, #236]	; (80024f0 <HAL_RCC_OscConfig+0x57c>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a3a      	ldr	r2, [pc, #232]	; (80024f0 <HAL_RCC_OscConfig+0x57c>)
 8002406:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800240a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800240c:	f7fe fd48 	bl	8000ea0 <HAL_GetTick>
 8002410:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002412:	e008      	b.n	8002426 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002414:	f7fe fd44 	bl	8000ea0 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	2b02      	cmp	r3, #2
 8002420:	d901      	bls.n	8002426 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e184      	b.n	8002730 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002426:	4b32      	ldr	r3, [pc, #200]	; (80024f0 <HAL_RCC_OscConfig+0x57c>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800242e:	2b00      	cmp	r3, #0
 8002430:	d0f0      	beq.n	8002414 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	2b01      	cmp	r3, #1
 8002438:	d108      	bne.n	800244c <HAL_RCC_OscConfig+0x4d8>
 800243a:	4b2c      	ldr	r3, [pc, #176]	; (80024ec <HAL_RCC_OscConfig+0x578>)
 800243c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002440:	4a2a      	ldr	r2, [pc, #168]	; (80024ec <HAL_RCC_OscConfig+0x578>)
 8002442:	f043 0301 	orr.w	r3, r3, #1
 8002446:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800244a:	e024      	b.n	8002496 <HAL_RCC_OscConfig+0x522>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	2b05      	cmp	r3, #5
 8002452:	d110      	bne.n	8002476 <HAL_RCC_OscConfig+0x502>
 8002454:	4b25      	ldr	r3, [pc, #148]	; (80024ec <HAL_RCC_OscConfig+0x578>)
 8002456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800245a:	4a24      	ldr	r2, [pc, #144]	; (80024ec <HAL_RCC_OscConfig+0x578>)
 800245c:	f043 0304 	orr.w	r3, r3, #4
 8002460:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002464:	4b21      	ldr	r3, [pc, #132]	; (80024ec <HAL_RCC_OscConfig+0x578>)
 8002466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800246a:	4a20      	ldr	r2, [pc, #128]	; (80024ec <HAL_RCC_OscConfig+0x578>)
 800246c:	f043 0301 	orr.w	r3, r3, #1
 8002470:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002474:	e00f      	b.n	8002496 <HAL_RCC_OscConfig+0x522>
 8002476:	4b1d      	ldr	r3, [pc, #116]	; (80024ec <HAL_RCC_OscConfig+0x578>)
 8002478:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800247c:	4a1b      	ldr	r2, [pc, #108]	; (80024ec <HAL_RCC_OscConfig+0x578>)
 800247e:	f023 0301 	bic.w	r3, r3, #1
 8002482:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002486:	4b19      	ldr	r3, [pc, #100]	; (80024ec <HAL_RCC_OscConfig+0x578>)
 8002488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800248c:	4a17      	ldr	r2, [pc, #92]	; (80024ec <HAL_RCC_OscConfig+0x578>)
 800248e:	f023 0304 	bic.w	r3, r3, #4
 8002492:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d016      	beq.n	80024cc <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800249e:	f7fe fcff 	bl	8000ea0 <HAL_GetTick>
 80024a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024a4:	e00a      	b.n	80024bc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024a6:	f7fe fcfb 	bl	8000ea0 <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d901      	bls.n	80024bc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e139      	b.n	8002730 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024bc:	4b0b      	ldr	r3, [pc, #44]	; (80024ec <HAL_RCC_OscConfig+0x578>)
 80024be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d0ed      	beq.n	80024a6 <HAL_RCC_OscConfig+0x532>
 80024ca:	e01a      	b.n	8002502 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024cc:	f7fe fce8 	bl	8000ea0 <HAL_GetTick>
 80024d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024d2:	e00f      	b.n	80024f4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024d4:	f7fe fce4 	bl	8000ea0 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	f241 3288 	movw	r2, #5000	; 0x1388
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d906      	bls.n	80024f4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e122      	b.n	8002730 <HAL_RCC_OscConfig+0x7bc>
 80024ea:	bf00      	nop
 80024ec:	40021000 	.word	0x40021000
 80024f0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024f4:	4b90      	ldr	r3, [pc, #576]	; (8002738 <HAL_RCC_OscConfig+0x7c4>)
 80024f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1e8      	bne.n	80024d4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002502:	7ffb      	ldrb	r3, [r7, #31]
 8002504:	2b01      	cmp	r3, #1
 8002506:	d105      	bne.n	8002514 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002508:	4b8b      	ldr	r3, [pc, #556]	; (8002738 <HAL_RCC_OscConfig+0x7c4>)
 800250a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800250c:	4a8a      	ldr	r2, [pc, #552]	; (8002738 <HAL_RCC_OscConfig+0x7c4>)
 800250e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002512:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002518:	2b00      	cmp	r3, #0
 800251a:	f000 8108 	beq.w	800272e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002522:	2b02      	cmp	r3, #2
 8002524:	f040 80d0 	bne.w	80026c8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002528:	4b83      	ldr	r3, [pc, #524]	; (8002738 <HAL_RCC_OscConfig+0x7c4>)
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	f003 0203 	and.w	r2, r3, #3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002538:	429a      	cmp	r2, r3
 800253a:	d130      	bne.n	800259e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002546:	3b01      	subs	r3, #1
 8002548:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800254a:	429a      	cmp	r2, r3
 800254c:	d127      	bne.n	800259e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002558:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800255a:	429a      	cmp	r2, r3
 800255c:	d11f      	bne.n	800259e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002568:	2a07      	cmp	r2, #7
 800256a:	bf14      	ite	ne
 800256c:	2201      	movne	r2, #1
 800256e:	2200      	moveq	r2, #0
 8002570:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002572:	4293      	cmp	r3, r2
 8002574:	d113      	bne.n	800259e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002580:	085b      	lsrs	r3, r3, #1
 8002582:	3b01      	subs	r3, #1
 8002584:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002586:	429a      	cmp	r2, r3
 8002588:	d109      	bne.n	800259e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002594:	085b      	lsrs	r3, r3, #1
 8002596:	3b01      	subs	r3, #1
 8002598:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800259a:	429a      	cmp	r2, r3
 800259c:	d06e      	beq.n	800267c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	2b0c      	cmp	r3, #12
 80025a2:	d069      	beq.n	8002678 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80025a4:	4b64      	ldr	r3, [pc, #400]	; (8002738 <HAL_RCC_OscConfig+0x7c4>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d105      	bne.n	80025bc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80025b0:	4b61      	ldr	r3, [pc, #388]	; (8002738 <HAL_RCC_OscConfig+0x7c4>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d001      	beq.n	80025c0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e0b7      	b.n	8002730 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80025c0:	4b5d      	ldr	r3, [pc, #372]	; (8002738 <HAL_RCC_OscConfig+0x7c4>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a5c      	ldr	r2, [pc, #368]	; (8002738 <HAL_RCC_OscConfig+0x7c4>)
 80025c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025ca:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80025cc:	f7fe fc68 	bl	8000ea0 <HAL_GetTick>
 80025d0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025d2:	e008      	b.n	80025e6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025d4:	f7fe fc64 	bl	8000ea0 <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d901      	bls.n	80025e6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e0a4      	b.n	8002730 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025e6:	4b54      	ldr	r3, [pc, #336]	; (8002738 <HAL_RCC_OscConfig+0x7c4>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d1f0      	bne.n	80025d4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025f2:	4b51      	ldr	r3, [pc, #324]	; (8002738 <HAL_RCC_OscConfig+0x7c4>)
 80025f4:	68da      	ldr	r2, [r3, #12]
 80025f6:	4b51      	ldr	r3, [pc, #324]	; (800273c <HAL_RCC_OscConfig+0x7c8>)
 80025f8:	4013      	ands	r3, r2
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002602:	3a01      	subs	r2, #1
 8002604:	0112      	lsls	r2, r2, #4
 8002606:	4311      	orrs	r1, r2
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800260c:	0212      	lsls	r2, r2, #8
 800260e:	4311      	orrs	r1, r2
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002614:	0852      	lsrs	r2, r2, #1
 8002616:	3a01      	subs	r2, #1
 8002618:	0552      	lsls	r2, r2, #21
 800261a:	4311      	orrs	r1, r2
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002620:	0852      	lsrs	r2, r2, #1
 8002622:	3a01      	subs	r2, #1
 8002624:	0652      	lsls	r2, r2, #25
 8002626:	4311      	orrs	r1, r2
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800262c:	0912      	lsrs	r2, r2, #4
 800262e:	0452      	lsls	r2, r2, #17
 8002630:	430a      	orrs	r2, r1
 8002632:	4941      	ldr	r1, [pc, #260]	; (8002738 <HAL_RCC_OscConfig+0x7c4>)
 8002634:	4313      	orrs	r3, r2
 8002636:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002638:	4b3f      	ldr	r3, [pc, #252]	; (8002738 <HAL_RCC_OscConfig+0x7c4>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a3e      	ldr	r2, [pc, #248]	; (8002738 <HAL_RCC_OscConfig+0x7c4>)
 800263e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002642:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002644:	4b3c      	ldr	r3, [pc, #240]	; (8002738 <HAL_RCC_OscConfig+0x7c4>)
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	4a3b      	ldr	r2, [pc, #236]	; (8002738 <HAL_RCC_OscConfig+0x7c4>)
 800264a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800264e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002650:	f7fe fc26 	bl	8000ea0 <HAL_GetTick>
 8002654:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002656:	e008      	b.n	800266a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002658:	f7fe fc22 	bl	8000ea0 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	2b02      	cmp	r3, #2
 8002664:	d901      	bls.n	800266a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e062      	b.n	8002730 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800266a:	4b33      	ldr	r3, [pc, #204]	; (8002738 <HAL_RCC_OscConfig+0x7c4>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d0f0      	beq.n	8002658 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002676:	e05a      	b.n	800272e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e059      	b.n	8002730 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800267c:	4b2e      	ldr	r3, [pc, #184]	; (8002738 <HAL_RCC_OscConfig+0x7c4>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d152      	bne.n	800272e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002688:	4b2b      	ldr	r3, [pc, #172]	; (8002738 <HAL_RCC_OscConfig+0x7c4>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a2a      	ldr	r2, [pc, #168]	; (8002738 <HAL_RCC_OscConfig+0x7c4>)
 800268e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002692:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002694:	4b28      	ldr	r3, [pc, #160]	; (8002738 <HAL_RCC_OscConfig+0x7c4>)
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	4a27      	ldr	r2, [pc, #156]	; (8002738 <HAL_RCC_OscConfig+0x7c4>)
 800269a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800269e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80026a0:	f7fe fbfe 	bl	8000ea0 <HAL_GetTick>
 80026a4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026a6:	e008      	b.n	80026ba <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026a8:	f7fe fbfa 	bl	8000ea0 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e03a      	b.n	8002730 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026ba:	4b1f      	ldr	r3, [pc, #124]	; (8002738 <HAL_RCC_OscConfig+0x7c4>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d0f0      	beq.n	80026a8 <HAL_RCC_OscConfig+0x734>
 80026c6:	e032      	b.n	800272e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	2b0c      	cmp	r3, #12
 80026cc:	d02d      	beq.n	800272a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ce:	4b1a      	ldr	r3, [pc, #104]	; (8002738 <HAL_RCC_OscConfig+0x7c4>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a19      	ldr	r2, [pc, #100]	; (8002738 <HAL_RCC_OscConfig+0x7c4>)
 80026d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026d8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80026da:	4b17      	ldr	r3, [pc, #92]	; (8002738 <HAL_RCC_OscConfig+0x7c4>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d105      	bne.n	80026f2 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80026e6:	4b14      	ldr	r3, [pc, #80]	; (8002738 <HAL_RCC_OscConfig+0x7c4>)
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	4a13      	ldr	r2, [pc, #76]	; (8002738 <HAL_RCC_OscConfig+0x7c4>)
 80026ec:	f023 0303 	bic.w	r3, r3, #3
 80026f0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80026f2:	4b11      	ldr	r3, [pc, #68]	; (8002738 <HAL_RCC_OscConfig+0x7c4>)
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	4a10      	ldr	r2, [pc, #64]	; (8002738 <HAL_RCC_OscConfig+0x7c4>)
 80026f8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80026fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002700:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002702:	f7fe fbcd 	bl	8000ea0 <HAL_GetTick>
 8002706:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002708:	e008      	b.n	800271c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800270a:	f7fe fbc9 	bl	8000ea0 <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	2b02      	cmp	r3, #2
 8002716:	d901      	bls.n	800271c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	e009      	b.n	8002730 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800271c:	4b06      	ldr	r3, [pc, #24]	; (8002738 <HAL_RCC_OscConfig+0x7c4>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d1f0      	bne.n	800270a <HAL_RCC_OscConfig+0x796>
 8002728:	e001      	b.n	800272e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e000      	b.n	8002730 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800272e:	2300      	movs	r3, #0
}
 8002730:	4618      	mov	r0, r3
 8002732:	3720      	adds	r7, #32
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	40021000 	.word	0x40021000
 800273c:	f99d808c 	.word	0xf99d808c

08002740 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d101      	bne.n	8002754 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e0c8      	b.n	80028e6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002754:	4b66      	ldr	r3, [pc, #408]	; (80028f0 <HAL_RCC_ClockConfig+0x1b0>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0307 	and.w	r3, r3, #7
 800275c:	683a      	ldr	r2, [r7, #0]
 800275e:	429a      	cmp	r2, r3
 8002760:	d910      	bls.n	8002784 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002762:	4b63      	ldr	r3, [pc, #396]	; (80028f0 <HAL_RCC_ClockConfig+0x1b0>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f023 0207 	bic.w	r2, r3, #7
 800276a:	4961      	ldr	r1, [pc, #388]	; (80028f0 <HAL_RCC_ClockConfig+0x1b0>)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	4313      	orrs	r3, r2
 8002770:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002772:	4b5f      	ldr	r3, [pc, #380]	; (80028f0 <HAL_RCC_ClockConfig+0x1b0>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0307 	and.w	r3, r3, #7
 800277a:	683a      	ldr	r2, [r7, #0]
 800277c:	429a      	cmp	r2, r3
 800277e:	d001      	beq.n	8002784 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e0b0      	b.n	80028e6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0301 	and.w	r3, r3, #1
 800278c:	2b00      	cmp	r3, #0
 800278e:	d04c      	beq.n	800282a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	2b03      	cmp	r3, #3
 8002796:	d107      	bne.n	80027a8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002798:	4b56      	ldr	r3, [pc, #344]	; (80028f4 <HAL_RCC_ClockConfig+0x1b4>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d121      	bne.n	80027e8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e09e      	b.n	80028e6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d107      	bne.n	80027c0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027b0:	4b50      	ldr	r3, [pc, #320]	; (80028f4 <HAL_RCC_ClockConfig+0x1b4>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d115      	bne.n	80027e8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e092      	b.n	80028e6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d107      	bne.n	80027d8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027c8:	4b4a      	ldr	r3, [pc, #296]	; (80028f4 <HAL_RCC_ClockConfig+0x1b4>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0302 	and.w	r3, r3, #2
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d109      	bne.n	80027e8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e086      	b.n	80028e6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027d8:	4b46      	ldr	r3, [pc, #280]	; (80028f4 <HAL_RCC_ClockConfig+0x1b4>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d101      	bne.n	80027e8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e07e      	b.n	80028e6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80027e8:	4b42      	ldr	r3, [pc, #264]	; (80028f4 <HAL_RCC_ClockConfig+0x1b4>)
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	f023 0203 	bic.w	r2, r3, #3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	493f      	ldr	r1, [pc, #252]	; (80028f4 <HAL_RCC_ClockConfig+0x1b4>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027fa:	f7fe fb51 	bl	8000ea0 <HAL_GetTick>
 80027fe:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002800:	e00a      	b.n	8002818 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002802:	f7fe fb4d 	bl	8000ea0 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002810:	4293      	cmp	r3, r2
 8002812:	d901      	bls.n	8002818 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	e066      	b.n	80028e6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002818:	4b36      	ldr	r3, [pc, #216]	; (80028f4 <HAL_RCC_ClockConfig+0x1b4>)
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	f003 020c 	and.w	r2, r3, #12
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	429a      	cmp	r2, r3
 8002828:	d1eb      	bne.n	8002802 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0302 	and.w	r3, r3, #2
 8002832:	2b00      	cmp	r3, #0
 8002834:	d008      	beq.n	8002848 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002836:	4b2f      	ldr	r3, [pc, #188]	; (80028f4 <HAL_RCC_ClockConfig+0x1b4>)
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	492c      	ldr	r1, [pc, #176]	; (80028f4 <HAL_RCC_ClockConfig+0x1b4>)
 8002844:	4313      	orrs	r3, r2
 8002846:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002848:	4b29      	ldr	r3, [pc, #164]	; (80028f0 <HAL_RCC_ClockConfig+0x1b0>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0307 	and.w	r3, r3, #7
 8002850:	683a      	ldr	r2, [r7, #0]
 8002852:	429a      	cmp	r2, r3
 8002854:	d210      	bcs.n	8002878 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002856:	4b26      	ldr	r3, [pc, #152]	; (80028f0 <HAL_RCC_ClockConfig+0x1b0>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f023 0207 	bic.w	r2, r3, #7
 800285e:	4924      	ldr	r1, [pc, #144]	; (80028f0 <HAL_RCC_ClockConfig+0x1b0>)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	4313      	orrs	r3, r2
 8002864:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002866:	4b22      	ldr	r3, [pc, #136]	; (80028f0 <HAL_RCC_ClockConfig+0x1b0>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0307 	and.w	r3, r3, #7
 800286e:	683a      	ldr	r2, [r7, #0]
 8002870:	429a      	cmp	r2, r3
 8002872:	d001      	beq.n	8002878 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e036      	b.n	80028e6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0304 	and.w	r3, r3, #4
 8002880:	2b00      	cmp	r3, #0
 8002882:	d008      	beq.n	8002896 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002884:	4b1b      	ldr	r3, [pc, #108]	; (80028f4 <HAL_RCC_ClockConfig+0x1b4>)
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	4918      	ldr	r1, [pc, #96]	; (80028f4 <HAL_RCC_ClockConfig+0x1b4>)
 8002892:	4313      	orrs	r3, r2
 8002894:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0308 	and.w	r3, r3, #8
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d009      	beq.n	80028b6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028a2:	4b14      	ldr	r3, [pc, #80]	; (80028f4 <HAL_RCC_ClockConfig+0x1b4>)
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	00db      	lsls	r3, r3, #3
 80028b0:	4910      	ldr	r1, [pc, #64]	; (80028f4 <HAL_RCC_ClockConfig+0x1b4>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80028b6:	f000 f825 	bl	8002904 <HAL_RCC_GetSysClockFreq>
 80028ba:	4601      	mov	r1, r0
 80028bc:	4b0d      	ldr	r3, [pc, #52]	; (80028f4 <HAL_RCC_ClockConfig+0x1b4>)
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	091b      	lsrs	r3, r3, #4
 80028c2:	f003 030f 	and.w	r3, r3, #15
 80028c6:	4a0c      	ldr	r2, [pc, #48]	; (80028f8 <HAL_RCC_ClockConfig+0x1b8>)
 80028c8:	5cd3      	ldrb	r3, [r2, r3]
 80028ca:	f003 031f 	and.w	r3, r3, #31
 80028ce:	fa21 f303 	lsr.w	r3, r1, r3
 80028d2:	4a0a      	ldr	r2, [pc, #40]	; (80028fc <HAL_RCC_ClockConfig+0x1bc>)
 80028d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80028d6:	4b0a      	ldr	r3, [pc, #40]	; (8002900 <HAL_RCC_ClockConfig+0x1c0>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4618      	mov	r0, r3
 80028dc:	f7fe fa90 	bl	8000e00 <HAL_InitTick>
 80028e0:	4603      	mov	r3, r0
 80028e2:	72fb      	strb	r3, [r7, #11]

  return status;
 80028e4:	7afb      	ldrb	r3, [r7, #11]
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3710      	adds	r7, #16
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	40022000 	.word	0x40022000
 80028f4:	40021000 	.word	0x40021000
 80028f8:	08005344 	.word	0x08005344
 80028fc:	20000000 	.word	0x20000000
 8002900:	20000004 	.word	0x20000004

08002904 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002904:	b480      	push	{r7}
 8002906:	b089      	sub	sp, #36	; 0x24
 8002908:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800290a:	2300      	movs	r3, #0
 800290c:	61fb      	str	r3, [r7, #28]
 800290e:	2300      	movs	r3, #0
 8002910:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002912:	4b3d      	ldr	r3, [pc, #244]	; (8002a08 <HAL_RCC_GetSysClockFreq+0x104>)
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	f003 030c 	and.w	r3, r3, #12
 800291a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800291c:	4b3a      	ldr	r3, [pc, #232]	; (8002a08 <HAL_RCC_GetSysClockFreq+0x104>)
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	f003 0303 	and.w	r3, r3, #3
 8002924:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d005      	beq.n	8002938 <HAL_RCC_GetSysClockFreq+0x34>
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	2b0c      	cmp	r3, #12
 8002930:	d121      	bne.n	8002976 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2b01      	cmp	r3, #1
 8002936:	d11e      	bne.n	8002976 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002938:	4b33      	ldr	r3, [pc, #204]	; (8002a08 <HAL_RCC_GetSysClockFreq+0x104>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0308 	and.w	r3, r3, #8
 8002940:	2b00      	cmp	r3, #0
 8002942:	d107      	bne.n	8002954 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002944:	4b30      	ldr	r3, [pc, #192]	; (8002a08 <HAL_RCC_GetSysClockFreq+0x104>)
 8002946:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800294a:	0a1b      	lsrs	r3, r3, #8
 800294c:	f003 030f 	and.w	r3, r3, #15
 8002950:	61fb      	str	r3, [r7, #28]
 8002952:	e005      	b.n	8002960 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002954:	4b2c      	ldr	r3, [pc, #176]	; (8002a08 <HAL_RCC_GetSysClockFreq+0x104>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	091b      	lsrs	r3, r3, #4
 800295a:	f003 030f 	and.w	r3, r3, #15
 800295e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002960:	4a2a      	ldr	r2, [pc, #168]	; (8002a0c <HAL_RCC_GetSysClockFreq+0x108>)
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002968:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d10d      	bne.n	800298c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002974:	e00a      	b.n	800298c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	2b04      	cmp	r3, #4
 800297a:	d102      	bne.n	8002982 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800297c:	4b24      	ldr	r3, [pc, #144]	; (8002a10 <HAL_RCC_GetSysClockFreq+0x10c>)
 800297e:	61bb      	str	r3, [r7, #24]
 8002980:	e004      	b.n	800298c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	2b08      	cmp	r3, #8
 8002986:	d101      	bne.n	800298c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002988:	4b22      	ldr	r3, [pc, #136]	; (8002a14 <HAL_RCC_GetSysClockFreq+0x110>)
 800298a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	2b0c      	cmp	r3, #12
 8002990:	d133      	bne.n	80029fa <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002992:	4b1d      	ldr	r3, [pc, #116]	; (8002a08 <HAL_RCC_GetSysClockFreq+0x104>)
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	f003 0303 	and.w	r3, r3, #3
 800299a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d002      	beq.n	80029a8 <HAL_RCC_GetSysClockFreq+0xa4>
 80029a2:	2b03      	cmp	r3, #3
 80029a4:	d003      	beq.n	80029ae <HAL_RCC_GetSysClockFreq+0xaa>
 80029a6:	e005      	b.n	80029b4 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80029a8:	4b19      	ldr	r3, [pc, #100]	; (8002a10 <HAL_RCC_GetSysClockFreq+0x10c>)
 80029aa:	617b      	str	r3, [r7, #20]
      break;
 80029ac:	e005      	b.n	80029ba <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80029ae:	4b19      	ldr	r3, [pc, #100]	; (8002a14 <HAL_RCC_GetSysClockFreq+0x110>)
 80029b0:	617b      	str	r3, [r7, #20]
      break;
 80029b2:	e002      	b.n	80029ba <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	617b      	str	r3, [r7, #20]
      break;
 80029b8:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80029ba:	4b13      	ldr	r3, [pc, #76]	; (8002a08 <HAL_RCC_GetSysClockFreq+0x104>)
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	091b      	lsrs	r3, r3, #4
 80029c0:	f003 0307 	and.w	r3, r3, #7
 80029c4:	3301      	adds	r3, #1
 80029c6:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80029c8:	4b0f      	ldr	r3, [pc, #60]	; (8002a08 <HAL_RCC_GetSysClockFreq+0x104>)
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	0a1b      	lsrs	r3, r3, #8
 80029ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80029d2:	697a      	ldr	r2, [r7, #20]
 80029d4:	fb02 f203 	mul.w	r2, r2, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	fbb2 f3f3 	udiv	r3, r2, r3
 80029de:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80029e0:	4b09      	ldr	r3, [pc, #36]	; (8002a08 <HAL_RCC_GetSysClockFreq+0x104>)
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	0e5b      	lsrs	r3, r3, #25
 80029e6:	f003 0303 	and.w	r3, r3, #3
 80029ea:	3301      	adds	r3, #1
 80029ec:	005b      	lsls	r3, r3, #1
 80029ee:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80029f0:	697a      	ldr	r2, [r7, #20]
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029f8:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80029fa:	69bb      	ldr	r3, [r7, #24]
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3724      	adds	r7, #36	; 0x24
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr
 8002a08:	40021000 	.word	0x40021000
 8002a0c:	0800535c 	.word	0x0800535c
 8002a10:	00f42400 	.word	0x00f42400
 8002a14:	007a1200 	.word	0x007a1200

08002a18 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a1c:	4b03      	ldr	r3, [pc, #12]	; (8002a2c <HAL_RCC_GetHCLKFreq+0x14>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	20000000 	.word	0x20000000

08002a30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002a34:	f7ff fff0 	bl	8002a18 <HAL_RCC_GetHCLKFreq>
 8002a38:	4601      	mov	r1, r0
 8002a3a:	4b06      	ldr	r3, [pc, #24]	; (8002a54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	0a1b      	lsrs	r3, r3, #8
 8002a40:	f003 0307 	and.w	r3, r3, #7
 8002a44:	4a04      	ldr	r2, [pc, #16]	; (8002a58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a46:	5cd3      	ldrb	r3, [r2, r3]
 8002a48:	f003 031f 	and.w	r3, r3, #31
 8002a4c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	40021000 	.word	0x40021000
 8002a58:	08005354 	.word	0x08005354

08002a5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002a60:	f7ff ffda 	bl	8002a18 <HAL_RCC_GetHCLKFreq>
 8002a64:	4601      	mov	r1, r0
 8002a66:	4b06      	ldr	r3, [pc, #24]	; (8002a80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	0adb      	lsrs	r3, r3, #11
 8002a6c:	f003 0307 	and.w	r3, r3, #7
 8002a70:	4a04      	ldr	r2, [pc, #16]	; (8002a84 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002a72:	5cd3      	ldrb	r3, [r2, r3]
 8002a74:	f003 031f 	and.w	r3, r3, #31
 8002a78:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	40021000 	.word	0x40021000
 8002a84:	08005354 	.word	0x08005354

08002a88 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b086      	sub	sp, #24
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002a90:	2300      	movs	r3, #0
 8002a92:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002a94:	4b2a      	ldr	r3, [pc, #168]	; (8002b40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d003      	beq.n	8002aa8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002aa0:	f7ff fa04 	bl	8001eac <HAL_PWREx_GetVoltageRange>
 8002aa4:	6178      	str	r0, [r7, #20]
 8002aa6:	e014      	b.n	8002ad2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002aa8:	4b25      	ldr	r3, [pc, #148]	; (8002b40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aac:	4a24      	ldr	r2, [pc, #144]	; (8002b40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002aae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ab2:	6593      	str	r3, [r2, #88]	; 0x58
 8002ab4:	4b22      	ldr	r3, [pc, #136]	; (8002b40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ab8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002abc:	60fb      	str	r3, [r7, #12]
 8002abe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002ac0:	f7ff f9f4 	bl	8001eac <HAL_PWREx_GetVoltageRange>
 8002ac4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002ac6:	4b1e      	ldr	r3, [pc, #120]	; (8002b40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aca:	4a1d      	ldr	r2, [pc, #116]	; (8002b40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002acc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ad0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ad8:	d10b      	bne.n	8002af2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2b80      	cmp	r3, #128	; 0x80
 8002ade:	d919      	bls.n	8002b14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2ba0      	cmp	r3, #160	; 0xa0
 8002ae4:	d902      	bls.n	8002aec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ae6:	2302      	movs	r3, #2
 8002ae8:	613b      	str	r3, [r7, #16]
 8002aea:	e013      	b.n	8002b14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002aec:	2301      	movs	r3, #1
 8002aee:	613b      	str	r3, [r7, #16]
 8002af0:	e010      	b.n	8002b14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2b80      	cmp	r3, #128	; 0x80
 8002af6:	d902      	bls.n	8002afe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002af8:	2303      	movs	r3, #3
 8002afa:	613b      	str	r3, [r7, #16]
 8002afc:	e00a      	b.n	8002b14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2b80      	cmp	r3, #128	; 0x80
 8002b02:	d102      	bne.n	8002b0a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b04:	2302      	movs	r3, #2
 8002b06:	613b      	str	r3, [r7, #16]
 8002b08:	e004      	b.n	8002b14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2b70      	cmp	r3, #112	; 0x70
 8002b0e:	d101      	bne.n	8002b14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b10:	2301      	movs	r3, #1
 8002b12:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002b14:	4b0b      	ldr	r3, [pc, #44]	; (8002b44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f023 0207 	bic.w	r2, r3, #7
 8002b1c:	4909      	ldr	r1, [pc, #36]	; (8002b44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002b24:	4b07      	ldr	r3, [pc, #28]	; (8002b44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0307 	and.w	r3, r3, #7
 8002b2c:	693a      	ldr	r2, [r7, #16]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d001      	beq.n	8002b36 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e000      	b.n	8002b38 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002b36:	2300      	movs	r3, #0
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3718      	adds	r7, #24
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	40021000 	.word	0x40021000
 8002b44:	40022000 	.word	0x40022000

08002b48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b086      	sub	sp, #24
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002b50:	2300      	movs	r3, #0
 8002b52:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b54:	2300      	movs	r3, #0
 8002b56:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d03f      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b6c:	d01c      	beq.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8002b6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b72:	d802      	bhi.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d00e      	beq.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002b78:	e01f      	b.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002b7a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b7e:	d003      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002b80:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002b84:	d01c      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002b86:	e018      	b.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002b88:	4b85      	ldr	r3, [pc, #532]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	4a84      	ldr	r2, [pc, #528]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b92:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b94:	e015      	b.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	3304      	adds	r3, #4
 8002b9a:	2100      	movs	r1, #0
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f000 fab9 	bl	8003114 <RCCEx_PLLSAI1_Config>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ba6:	e00c      	b.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	3320      	adds	r3, #32
 8002bac:	2100      	movs	r1, #0
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f000 fba0 	bl	80032f4 <RCCEx_PLLSAI2_Config>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002bb8:	e003      	b.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	74fb      	strb	r3, [r7, #19]
      break;
 8002bbe:	e000      	b.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002bc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bc2:	7cfb      	ldrb	r3, [r7, #19]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d10b      	bne.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002bc8:	4b75      	ldr	r3, [pc, #468]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002bd6:	4972      	ldr	r1, [pc, #456]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002bde:	e001      	b.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002be0:	7cfb      	ldrb	r3, [r7, #19]
 8002be2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d03f      	beq.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bf4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bf8:	d01c      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002bfa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bfe:	d802      	bhi.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d00e      	beq.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002c04:	e01f      	b.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002c06:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c0a:	d003      	beq.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002c0c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002c10:	d01c      	beq.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x104>
 8002c12:	e018      	b.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002c14:	4b62      	ldr	r3, [pc, #392]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	4a61      	ldr	r2, [pc, #388]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002c1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c1e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002c20:	e015      	b.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	3304      	adds	r3, #4
 8002c26:	2100      	movs	r1, #0
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f000 fa73 	bl	8003114 <RCCEx_PLLSAI1_Config>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002c32:	e00c      	b.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	3320      	adds	r3, #32
 8002c38:	2100      	movs	r1, #0
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f000 fb5a 	bl	80032f4 <RCCEx_PLLSAI2_Config>
 8002c40:	4603      	mov	r3, r0
 8002c42:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002c44:	e003      	b.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	74fb      	strb	r3, [r7, #19]
      break;
 8002c4a:	e000      	b.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002c4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c4e:	7cfb      	ldrb	r3, [r7, #19]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d10b      	bne.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002c54:	4b52      	ldr	r3, [pc, #328]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c5a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c62:	494f      	ldr	r1, [pc, #316]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002c64:	4313      	orrs	r3, r2
 8002c66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002c6a:	e001      	b.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c6c:	7cfb      	ldrb	r3, [r7, #19]
 8002c6e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	f000 80a0 	beq.w	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002c82:	4b47      	ldr	r3, [pc, #284]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d101      	bne.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e000      	b.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002c92:	2300      	movs	r3, #0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d00d      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c98:	4b41      	ldr	r3, [pc, #260]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c9c:	4a40      	ldr	r2, [pc, #256]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002c9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ca2:	6593      	str	r3, [r2, #88]	; 0x58
 8002ca4:	4b3e      	ldr	r3, [pc, #248]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ca8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cac:	60bb      	str	r3, [r7, #8]
 8002cae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002cb4:	4b3b      	ldr	r3, [pc, #236]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a3a      	ldr	r2, [pc, #232]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002cba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cbe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002cc0:	f7fe f8ee 	bl	8000ea0 <HAL_GetTick>
 8002cc4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002cc6:	e009      	b.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cc8:	f7fe f8ea 	bl	8000ea0 <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d902      	bls.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	74fb      	strb	r3, [r7, #19]
        break;
 8002cda:	e005      	b.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002cdc:	4b31      	ldr	r3, [pc, #196]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d0ef      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8002ce8:	7cfb      	ldrb	r3, [r7, #19]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d15c      	bne.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002cee:	4b2c      	ldr	r3, [pc, #176]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cf4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cf8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d01f      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d06:	697a      	ldr	r2, [r7, #20]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d019      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d0c:	4b24      	ldr	r3, [pc, #144]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d16:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d18:	4b21      	ldr	r3, [pc, #132]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d1e:	4a20      	ldr	r2, [pc, #128]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d28:	4b1d      	ldr	r3, [pc, #116]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d2e:	4a1c      	ldr	r2, [pc, #112]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d38:	4a19      	ldr	r2, [pc, #100]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	f003 0301 	and.w	r3, r3, #1
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d016      	beq.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d4a:	f7fe f8a9 	bl	8000ea0 <HAL_GetTick>
 8002d4e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d50:	e00b      	b.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d52:	f7fe f8a5 	bl	8000ea0 <HAL_GetTick>
 8002d56:	4602      	mov	r2, r0
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d902      	bls.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	74fb      	strb	r3, [r7, #19]
            break;
 8002d68:	e006      	b.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d6a:	4b0d      	ldr	r3, [pc, #52]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d70:	f003 0302 	and.w	r3, r3, #2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d0ec      	beq.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8002d78:	7cfb      	ldrb	r3, [r7, #19]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d10c      	bne.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d7e:	4b08      	ldr	r3, [pc, #32]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d8e:	4904      	ldr	r1, [pc, #16]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002d96:	e009      	b.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d98:	7cfb      	ldrb	r3, [r7, #19]
 8002d9a:	74bb      	strb	r3, [r7, #18]
 8002d9c:	e006      	b.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x264>
 8002d9e:	bf00      	nop
 8002da0:	40021000 	.word	0x40021000
 8002da4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002da8:	7cfb      	ldrb	r3, [r7, #19]
 8002daa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002dac:	7c7b      	ldrb	r3, [r7, #17]
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d105      	bne.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002db2:	4b9e      	ldr	r3, [pc, #632]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002db6:	4a9d      	ldr	r2, [pc, #628]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002db8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dbc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0301 	and.w	r3, r3, #1
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d00a      	beq.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002dca:	4b98      	ldr	r3, [pc, #608]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dd0:	f023 0203 	bic.w	r2, r3, #3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd8:	4994      	ldr	r1, [pc, #592]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0302 	and.w	r3, r3, #2
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d00a      	beq.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002dec:	4b8f      	ldr	r3, [pc, #572]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df2:	f023 020c 	bic.w	r2, r3, #12
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dfa:	498c      	ldr	r1, [pc, #560]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0304 	and.w	r3, r3, #4
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d00a      	beq.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e0e:	4b87      	ldr	r3, [pc, #540]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e14:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1c:	4983      	ldr	r1, [pc, #524]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0308 	and.w	r3, r3, #8
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d00a      	beq.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e30:	4b7e      	ldr	r3, [pc, #504]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e36:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e3e:	497b      	ldr	r1, [pc, #492]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0310 	and.w	r3, r3, #16
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d00a      	beq.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e52:	4b76      	ldr	r3, [pc, #472]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e60:	4972      	ldr	r1, [pc, #456]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0320 	and.w	r3, r3, #32
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d00a      	beq.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e74:	4b6d      	ldr	r3, [pc, #436]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e7a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e82:	496a      	ldr	r1, [pc, #424]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00a      	beq.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e96:	4b65      	ldr	r3, [pc, #404]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e9c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ea4:	4961      	ldr	r1, [pc, #388]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d00a      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002eb8:	4b5c      	ldr	r3, [pc, #368]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ebe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ec6:	4959      	ldr	r1, [pc, #356]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d00a      	beq.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002eda:	4b54      	ldr	r3, [pc, #336]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ee0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ee8:	4950      	ldr	r1, [pc, #320]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d00a      	beq.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002efc:	4b4b      	ldr	r3, [pc, #300]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f02:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f0a:	4948      	ldr	r1, [pc, #288]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d00a      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f1e:	4b43      	ldr	r3, [pc, #268]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f24:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f2c:	493f      	ldr	r1, [pc, #252]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d028      	beq.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f40:	4b3a      	ldr	r3, [pc, #232]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f46:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f4e:	4937      	ldr	r1, [pc, #220]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f5e:	d106      	bne.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f60:	4b32      	ldr	r3, [pc, #200]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	4a31      	ldr	r2, [pc, #196]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f6a:	60d3      	str	r3, [r2, #12]
 8002f6c:	e011      	b.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f72:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f76:	d10c      	bne.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	3304      	adds	r3, #4
 8002f7c:	2101      	movs	r1, #1
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f000 f8c8 	bl	8003114 <RCCEx_PLLSAI1_Config>
 8002f84:	4603      	mov	r3, r0
 8002f86:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002f88:	7cfb      	ldrb	r3, [r7, #19]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8002f8e:	7cfb      	ldrb	r3, [r7, #19]
 8002f90:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d028      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002f9e:	4b23      	ldr	r3, [pc, #140]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fa4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fac:	491f      	ldr	r1, [pc, #124]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fbc:	d106      	bne.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fbe:	4b1b      	ldr	r3, [pc, #108]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	4a1a      	ldr	r2, [pc, #104]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002fc4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002fc8:	60d3      	str	r3, [r2, #12]
 8002fca:	e011      	b.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002fd4:	d10c      	bne.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	3304      	adds	r3, #4
 8002fda:	2101      	movs	r1, #1
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f000 f899 	bl	8003114 <RCCEx_PLLSAI1_Config>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002fe6:	7cfb      	ldrb	r3, [r7, #19]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d001      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8002fec:	7cfb      	ldrb	r3, [r7, #19]
 8002fee:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d02b      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ffc:	4b0b      	ldr	r3, [pc, #44]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003002:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800300a:	4908      	ldr	r1, [pc, #32]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800300c:	4313      	orrs	r3, r2
 800300e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003016:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800301a:	d109      	bne.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800301c:	4b03      	ldr	r3, [pc, #12]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	4a02      	ldr	r2, [pc, #8]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003022:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003026:	60d3      	str	r3, [r2, #12]
 8003028:	e014      	b.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800302a:	bf00      	nop
 800302c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003034:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003038:	d10c      	bne.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	3304      	adds	r3, #4
 800303e:	2101      	movs	r1, #1
 8003040:	4618      	mov	r0, r3
 8003042:	f000 f867 	bl	8003114 <RCCEx_PLLSAI1_Config>
 8003046:	4603      	mov	r3, r0
 8003048:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800304a:	7cfb      	ldrb	r3, [r7, #19]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d001      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8003050:	7cfb      	ldrb	r3, [r7, #19]
 8003052:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d02f      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003060:	4b2b      	ldr	r3, [pc, #172]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003066:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800306e:	4928      	ldr	r1, [pc, #160]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003070:	4313      	orrs	r3, r2
 8003072:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800307a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800307e:	d10d      	bne.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	3304      	adds	r3, #4
 8003084:	2102      	movs	r1, #2
 8003086:	4618      	mov	r0, r3
 8003088:	f000 f844 	bl	8003114 <RCCEx_PLLSAI1_Config>
 800308c:	4603      	mov	r3, r0
 800308e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003090:	7cfb      	ldrb	r3, [r7, #19]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d014      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003096:	7cfb      	ldrb	r3, [r7, #19]
 8003098:	74bb      	strb	r3, [r7, #18]
 800309a:	e011      	b.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030a4:	d10c      	bne.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	3320      	adds	r3, #32
 80030aa:	2102      	movs	r1, #2
 80030ac:	4618      	mov	r0, r3
 80030ae:	f000 f921 	bl	80032f4 <RCCEx_PLLSAI2_Config>
 80030b2:	4603      	mov	r3, r0
 80030b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030b6:	7cfb      	ldrb	r3, [r7, #19]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d001      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80030bc:	7cfb      	ldrb	r3, [r7, #19]
 80030be:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d00a      	beq.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80030cc:	4b10      	ldr	r3, [pc, #64]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80030ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030d2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030da:	490d      	ldr	r1, [pc, #52]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80030dc:	4313      	orrs	r3, r2
 80030de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d00b      	beq.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80030ee:	4b08      	ldr	r3, [pc, #32]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80030f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030f4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030fe:	4904      	ldr	r1, [pc, #16]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003100:	4313      	orrs	r3, r2
 8003102:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003106:	7cbb      	ldrb	r3, [r7, #18]
}
 8003108:	4618      	mov	r0, r3
 800310a:	3718      	adds	r7, #24
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	40021000 	.word	0x40021000

08003114 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800311e:	2300      	movs	r3, #0
 8003120:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003122:	4b73      	ldr	r3, [pc, #460]	; (80032f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	f003 0303 	and.w	r3, r3, #3
 800312a:	2b00      	cmp	r3, #0
 800312c:	d018      	beq.n	8003160 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800312e:	4b70      	ldr	r3, [pc, #448]	; (80032f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	f003 0203 	and.w	r2, r3, #3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	429a      	cmp	r2, r3
 800313c:	d10d      	bne.n	800315a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
       ||
 8003142:	2b00      	cmp	r3, #0
 8003144:	d009      	beq.n	800315a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003146:	4b6a      	ldr	r3, [pc, #424]	; (80032f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	091b      	lsrs	r3, r3, #4
 800314c:	f003 0307 	and.w	r3, r3, #7
 8003150:	1c5a      	adds	r2, r3, #1
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
       ||
 8003156:	429a      	cmp	r2, r3
 8003158:	d044      	beq.n	80031e4 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	73fb      	strb	r3, [r7, #15]
 800315e:	e041      	b.n	80031e4 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2b02      	cmp	r3, #2
 8003166:	d00c      	beq.n	8003182 <RCCEx_PLLSAI1_Config+0x6e>
 8003168:	2b03      	cmp	r3, #3
 800316a:	d013      	beq.n	8003194 <RCCEx_PLLSAI1_Config+0x80>
 800316c:	2b01      	cmp	r3, #1
 800316e:	d120      	bne.n	80031b2 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003170:	4b5f      	ldr	r3, [pc, #380]	; (80032f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0302 	and.w	r3, r3, #2
 8003178:	2b00      	cmp	r3, #0
 800317a:	d11d      	bne.n	80031b8 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003180:	e01a      	b.n	80031b8 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003182:	4b5b      	ldr	r3, [pc, #364]	; (80032f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800318a:	2b00      	cmp	r3, #0
 800318c:	d116      	bne.n	80031bc <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003192:	e013      	b.n	80031bc <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003194:	4b56      	ldr	r3, [pc, #344]	; (80032f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d10f      	bne.n	80031c0 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80031a0:	4b53      	ldr	r3, [pc, #332]	; (80032f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d109      	bne.n	80031c0 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80031b0:	e006      	b.n	80031c0 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	73fb      	strb	r3, [r7, #15]
      break;
 80031b6:	e004      	b.n	80031c2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80031b8:	bf00      	nop
 80031ba:	e002      	b.n	80031c2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80031bc:	bf00      	nop
 80031be:	e000      	b.n	80031c2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80031c0:	bf00      	nop
    }

    if(status == HAL_OK)
 80031c2:	7bfb      	ldrb	r3, [r7, #15]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d10d      	bne.n	80031e4 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80031c8:	4b49      	ldr	r3, [pc, #292]	; (80032f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6819      	ldr	r1, [r3, #0]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	3b01      	subs	r3, #1
 80031da:	011b      	lsls	r3, r3, #4
 80031dc:	430b      	orrs	r3, r1
 80031de:	4944      	ldr	r1, [pc, #272]	; (80032f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80031e0:	4313      	orrs	r3, r2
 80031e2:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80031e4:	7bfb      	ldrb	r3, [r7, #15]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d17d      	bne.n	80032e6 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80031ea:	4b41      	ldr	r3, [pc, #260]	; (80032f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a40      	ldr	r2, [pc, #256]	; (80032f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80031f0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80031f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031f6:	f7fd fe53 	bl	8000ea0 <HAL_GetTick>
 80031fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80031fc:	e009      	b.n	8003212 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80031fe:	f7fd fe4f 	bl	8000ea0 <HAL_GetTick>
 8003202:	4602      	mov	r2, r0
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	2b02      	cmp	r3, #2
 800320a:	d902      	bls.n	8003212 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	73fb      	strb	r3, [r7, #15]
        break;
 8003210:	e005      	b.n	800321e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003212:	4b37      	ldr	r3, [pc, #220]	; (80032f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d1ef      	bne.n	80031fe <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800321e:	7bfb      	ldrb	r3, [r7, #15]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d160      	bne.n	80032e6 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d111      	bne.n	800324e <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800322a:	4b31      	ldr	r3, [pc, #196]	; (80032f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003232:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	6892      	ldr	r2, [r2, #8]
 800323a:	0211      	lsls	r1, r2, #8
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	68d2      	ldr	r2, [r2, #12]
 8003240:	0912      	lsrs	r2, r2, #4
 8003242:	0452      	lsls	r2, r2, #17
 8003244:	430a      	orrs	r2, r1
 8003246:	492a      	ldr	r1, [pc, #168]	; (80032f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003248:	4313      	orrs	r3, r2
 800324a:	610b      	str	r3, [r1, #16]
 800324c:	e027      	b.n	800329e <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	2b01      	cmp	r3, #1
 8003252:	d112      	bne.n	800327a <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003254:	4b26      	ldr	r3, [pc, #152]	; (80032f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003256:	691b      	ldr	r3, [r3, #16]
 8003258:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800325c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	6892      	ldr	r2, [r2, #8]
 8003264:	0211      	lsls	r1, r2, #8
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	6912      	ldr	r2, [r2, #16]
 800326a:	0852      	lsrs	r2, r2, #1
 800326c:	3a01      	subs	r2, #1
 800326e:	0552      	lsls	r2, r2, #21
 8003270:	430a      	orrs	r2, r1
 8003272:	491f      	ldr	r1, [pc, #124]	; (80032f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003274:	4313      	orrs	r3, r2
 8003276:	610b      	str	r3, [r1, #16]
 8003278:	e011      	b.n	800329e <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800327a:	4b1d      	ldr	r3, [pc, #116]	; (80032f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003282:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	6892      	ldr	r2, [r2, #8]
 800328a:	0211      	lsls	r1, r2, #8
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	6952      	ldr	r2, [r2, #20]
 8003290:	0852      	lsrs	r2, r2, #1
 8003292:	3a01      	subs	r2, #1
 8003294:	0652      	lsls	r2, r2, #25
 8003296:	430a      	orrs	r2, r1
 8003298:	4915      	ldr	r1, [pc, #84]	; (80032f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800329a:	4313      	orrs	r3, r2
 800329c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800329e:	4b14      	ldr	r3, [pc, #80]	; (80032f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a13      	ldr	r2, [pc, #76]	; (80032f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80032a4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80032a8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032aa:	f7fd fdf9 	bl	8000ea0 <HAL_GetTick>
 80032ae:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80032b0:	e009      	b.n	80032c6 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80032b2:	f7fd fdf5 	bl	8000ea0 <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d902      	bls.n	80032c6 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	73fb      	strb	r3, [r7, #15]
          break;
 80032c4:	e005      	b.n	80032d2 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80032c6:	4b0a      	ldr	r3, [pc, #40]	; (80032f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d0ef      	beq.n	80032b2 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80032d2:	7bfb      	ldrb	r3, [r7, #15]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d106      	bne.n	80032e6 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80032d8:	4b05      	ldr	r3, [pc, #20]	; (80032f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80032da:	691a      	ldr	r2, [r3, #16]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	699b      	ldr	r3, [r3, #24]
 80032e0:	4903      	ldr	r1, [pc, #12]	; (80032f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80032e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3710      	adds	r7, #16
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	40021000 	.word	0x40021000

080032f4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80032fe:	2300      	movs	r3, #0
 8003300:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003302:	4b68      	ldr	r3, [pc, #416]	; (80034a4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	f003 0303 	and.w	r3, r3, #3
 800330a:	2b00      	cmp	r3, #0
 800330c:	d018      	beq.n	8003340 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800330e:	4b65      	ldr	r3, [pc, #404]	; (80034a4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	f003 0203 	and.w	r2, r3, #3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	429a      	cmp	r2, r3
 800331c:	d10d      	bne.n	800333a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
       ||
 8003322:	2b00      	cmp	r3, #0
 8003324:	d009      	beq.n	800333a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003326:	4b5f      	ldr	r3, [pc, #380]	; (80034a4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	091b      	lsrs	r3, r3, #4
 800332c:	f003 0307 	and.w	r3, r3, #7
 8003330:	1c5a      	adds	r2, r3, #1
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
       ||
 8003336:	429a      	cmp	r2, r3
 8003338:	d044      	beq.n	80033c4 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	73fb      	strb	r3, [r7, #15]
 800333e:	e041      	b.n	80033c4 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2b02      	cmp	r3, #2
 8003346:	d00c      	beq.n	8003362 <RCCEx_PLLSAI2_Config+0x6e>
 8003348:	2b03      	cmp	r3, #3
 800334a:	d013      	beq.n	8003374 <RCCEx_PLLSAI2_Config+0x80>
 800334c:	2b01      	cmp	r3, #1
 800334e:	d120      	bne.n	8003392 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003350:	4b54      	ldr	r3, [pc, #336]	; (80034a4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0302 	and.w	r3, r3, #2
 8003358:	2b00      	cmp	r3, #0
 800335a:	d11d      	bne.n	8003398 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003360:	e01a      	b.n	8003398 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003362:	4b50      	ldr	r3, [pc, #320]	; (80034a4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800336a:	2b00      	cmp	r3, #0
 800336c:	d116      	bne.n	800339c <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003372:	e013      	b.n	800339c <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003374:	4b4b      	ldr	r3, [pc, #300]	; (80034a4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d10f      	bne.n	80033a0 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003380:	4b48      	ldr	r3, [pc, #288]	; (80034a4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d109      	bne.n	80033a0 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003390:	e006      	b.n	80033a0 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	73fb      	strb	r3, [r7, #15]
      break;
 8003396:	e004      	b.n	80033a2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003398:	bf00      	nop
 800339a:	e002      	b.n	80033a2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 800339c:	bf00      	nop
 800339e:	e000      	b.n	80033a2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80033a0:	bf00      	nop
    }

    if(status == HAL_OK)
 80033a2:	7bfb      	ldrb	r3, [r7, #15]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d10d      	bne.n	80033c4 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80033a8:	4b3e      	ldr	r3, [pc, #248]	; (80034a4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6819      	ldr	r1, [r3, #0]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	3b01      	subs	r3, #1
 80033ba:	011b      	lsls	r3, r3, #4
 80033bc:	430b      	orrs	r3, r1
 80033be:	4939      	ldr	r1, [pc, #228]	; (80034a4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80033c4:	7bfb      	ldrb	r3, [r7, #15]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d167      	bne.n	800349a <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80033ca:	4b36      	ldr	r3, [pc, #216]	; (80034a4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a35      	ldr	r2, [pc, #212]	; (80034a4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80033d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033d6:	f7fd fd63 	bl	8000ea0 <HAL_GetTick>
 80033da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80033dc:	e009      	b.n	80033f2 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80033de:	f7fd fd5f 	bl	8000ea0 <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d902      	bls.n	80033f2 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80033ec:	2303      	movs	r3, #3
 80033ee:	73fb      	strb	r3, [r7, #15]
        break;
 80033f0:	e005      	b.n	80033fe <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80033f2:	4b2c      	ldr	r3, [pc, #176]	; (80034a4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d1ef      	bne.n	80033de <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80033fe:	7bfb      	ldrb	r3, [r7, #15]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d14a      	bne.n	800349a <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d111      	bne.n	800342e <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800340a:	4b26      	ldr	r3, [pc, #152]	; (80034a4 <RCCEx_PLLSAI2_Config+0x1b0>)
 800340c:	695b      	ldr	r3, [r3, #20]
 800340e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003412:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	6892      	ldr	r2, [r2, #8]
 800341a:	0211      	lsls	r1, r2, #8
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	68d2      	ldr	r2, [r2, #12]
 8003420:	0912      	lsrs	r2, r2, #4
 8003422:	0452      	lsls	r2, r2, #17
 8003424:	430a      	orrs	r2, r1
 8003426:	491f      	ldr	r1, [pc, #124]	; (80034a4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003428:	4313      	orrs	r3, r2
 800342a:	614b      	str	r3, [r1, #20]
 800342c:	e011      	b.n	8003452 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800342e:	4b1d      	ldr	r3, [pc, #116]	; (80034a4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003430:	695b      	ldr	r3, [r3, #20]
 8003432:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003436:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	6892      	ldr	r2, [r2, #8]
 800343e:	0211      	lsls	r1, r2, #8
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	6912      	ldr	r2, [r2, #16]
 8003444:	0852      	lsrs	r2, r2, #1
 8003446:	3a01      	subs	r2, #1
 8003448:	0652      	lsls	r2, r2, #25
 800344a:	430a      	orrs	r2, r1
 800344c:	4915      	ldr	r1, [pc, #84]	; (80034a4 <RCCEx_PLLSAI2_Config+0x1b0>)
 800344e:	4313      	orrs	r3, r2
 8003450:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003452:	4b14      	ldr	r3, [pc, #80]	; (80034a4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a13      	ldr	r2, [pc, #76]	; (80034a4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800345c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800345e:	f7fd fd1f 	bl	8000ea0 <HAL_GetTick>
 8003462:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003464:	e009      	b.n	800347a <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003466:	f7fd fd1b 	bl	8000ea0 <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	2b02      	cmp	r3, #2
 8003472:	d902      	bls.n	800347a <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	73fb      	strb	r3, [r7, #15]
          break;
 8003478:	e005      	b.n	8003486 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800347a:	4b0a      	ldr	r3, [pc, #40]	; (80034a4 <RCCEx_PLLSAI2_Config+0x1b0>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d0ef      	beq.n	8003466 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8003486:	7bfb      	ldrb	r3, [r7, #15]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d106      	bne.n	800349a <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800348c:	4b05      	ldr	r3, [pc, #20]	; (80034a4 <RCCEx_PLLSAI2_Config+0x1b0>)
 800348e:	695a      	ldr	r2, [r3, #20]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	695b      	ldr	r3, [r3, #20]
 8003494:	4903      	ldr	r1, [pc, #12]	; (80034a4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003496:	4313      	orrs	r3, r2
 8003498:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800349a:	7bfb      	ldrb	r3, [r7, #15]
}
 800349c:	4618      	mov	r0, r3
 800349e:	3710      	adds	r7, #16
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	40021000 	.word	0x40021000

080034a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d101      	bne.n	80034ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e049      	b.n	800354e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d106      	bne.n	80034d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f7fd fbe4 	bl	8000c9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2202      	movs	r2, #2
 80034d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	3304      	adds	r3, #4
 80034e4:	4619      	mov	r1, r3
 80034e6:	4610      	mov	r0, r2
 80034e8:	f000 f9ee 	bl	80038c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	3708      	adds	r7, #8
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
	...

08003558 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003558:	b480      	push	{r7}
 800355a:	b085      	sub	sp, #20
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003566:	b2db      	uxtb	r3, r3
 8003568:	2b01      	cmp	r3, #1
 800356a:	d001      	beq.n	8003570 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e04f      	b.n	8003610 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2202      	movs	r2, #2
 8003574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	68da      	ldr	r2, [r3, #12]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f042 0201 	orr.w	r2, r2, #1
 8003586:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a23      	ldr	r2, [pc, #140]	; (800361c <HAL_TIM_Base_Start_IT+0xc4>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d01d      	beq.n	80035ce <HAL_TIM_Base_Start_IT+0x76>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800359a:	d018      	beq.n	80035ce <HAL_TIM_Base_Start_IT+0x76>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a1f      	ldr	r2, [pc, #124]	; (8003620 <HAL_TIM_Base_Start_IT+0xc8>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d013      	beq.n	80035ce <HAL_TIM_Base_Start_IT+0x76>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a1e      	ldr	r2, [pc, #120]	; (8003624 <HAL_TIM_Base_Start_IT+0xcc>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d00e      	beq.n	80035ce <HAL_TIM_Base_Start_IT+0x76>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a1c      	ldr	r2, [pc, #112]	; (8003628 <HAL_TIM_Base_Start_IT+0xd0>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d009      	beq.n	80035ce <HAL_TIM_Base_Start_IT+0x76>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a1b      	ldr	r2, [pc, #108]	; (800362c <HAL_TIM_Base_Start_IT+0xd4>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d004      	beq.n	80035ce <HAL_TIM_Base_Start_IT+0x76>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a19      	ldr	r2, [pc, #100]	; (8003630 <HAL_TIM_Base_Start_IT+0xd8>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d115      	bne.n	80035fa <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	689a      	ldr	r2, [r3, #8]
 80035d4:	4b17      	ldr	r3, [pc, #92]	; (8003634 <HAL_TIM_Base_Start_IT+0xdc>)
 80035d6:	4013      	ands	r3, r2
 80035d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2b06      	cmp	r3, #6
 80035de:	d015      	beq.n	800360c <HAL_TIM_Base_Start_IT+0xb4>
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035e6:	d011      	beq.n	800360c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f042 0201 	orr.w	r2, r2, #1
 80035f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035f8:	e008      	b.n	800360c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f042 0201 	orr.w	r2, r2, #1
 8003608:	601a      	str	r2, [r3, #0]
 800360a:	e000      	b.n	800360e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800360c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800360e:	2300      	movs	r3, #0
}
 8003610:	4618      	mov	r0, r3
 8003612:	3714      	adds	r7, #20
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr
 800361c:	40012c00 	.word	0x40012c00
 8003620:	40000400 	.word	0x40000400
 8003624:	40000800 	.word	0x40000800
 8003628:	40000c00 	.word	0x40000c00
 800362c:	40013400 	.word	0x40013400
 8003630:	40014000 	.word	0x40014000
 8003634:	00010007 	.word	0x00010007

08003638 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	2b02      	cmp	r3, #2
 800364c:	d122      	bne.n	8003694 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	f003 0302 	and.w	r3, r3, #2
 8003658:	2b02      	cmp	r3, #2
 800365a:	d11b      	bne.n	8003694 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f06f 0202 	mvn.w	r2, #2
 8003664:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2201      	movs	r2, #1
 800366a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	f003 0303 	and.w	r3, r3, #3
 8003676:	2b00      	cmp	r3, #0
 8003678:	d003      	beq.n	8003682 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 f905 	bl	800388a <HAL_TIM_IC_CaptureCallback>
 8003680:	e005      	b.n	800368e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 f8f7 	bl	8003876 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f000 f908 	bl	800389e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	691b      	ldr	r3, [r3, #16]
 800369a:	f003 0304 	and.w	r3, r3, #4
 800369e:	2b04      	cmp	r3, #4
 80036a0:	d122      	bne.n	80036e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	f003 0304 	and.w	r3, r3, #4
 80036ac:	2b04      	cmp	r3, #4
 80036ae:	d11b      	bne.n	80036e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f06f 0204 	mvn.w	r2, #4
 80036b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2202      	movs	r2, #2
 80036be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d003      	beq.n	80036d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 f8db 	bl	800388a <HAL_TIM_IC_CaptureCallback>
 80036d4:	e005      	b.n	80036e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f000 f8cd 	bl	8003876 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f000 f8de 	bl	800389e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	f003 0308 	and.w	r3, r3, #8
 80036f2:	2b08      	cmp	r3, #8
 80036f4:	d122      	bne.n	800373c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	f003 0308 	and.w	r3, r3, #8
 8003700:	2b08      	cmp	r3, #8
 8003702:	d11b      	bne.n	800373c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f06f 0208 	mvn.w	r2, #8
 800370c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2204      	movs	r2, #4
 8003712:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	69db      	ldr	r3, [r3, #28]
 800371a:	f003 0303 	and.w	r3, r3, #3
 800371e:	2b00      	cmp	r3, #0
 8003720:	d003      	beq.n	800372a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f000 f8b1 	bl	800388a <HAL_TIM_IC_CaptureCallback>
 8003728:	e005      	b.n	8003736 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f000 f8a3 	bl	8003876 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f000 f8b4 	bl	800389e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	691b      	ldr	r3, [r3, #16]
 8003742:	f003 0310 	and.w	r3, r3, #16
 8003746:	2b10      	cmp	r3, #16
 8003748:	d122      	bne.n	8003790 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	f003 0310 	and.w	r3, r3, #16
 8003754:	2b10      	cmp	r3, #16
 8003756:	d11b      	bne.n	8003790 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f06f 0210 	mvn.w	r2, #16
 8003760:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2208      	movs	r2, #8
 8003766:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	69db      	ldr	r3, [r3, #28]
 800376e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003772:	2b00      	cmp	r3, #0
 8003774:	d003      	beq.n	800377e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f000 f887 	bl	800388a <HAL_TIM_IC_CaptureCallback>
 800377c:	e005      	b.n	800378a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 f879 	bl	8003876 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f000 f88a 	bl	800389e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	f003 0301 	and.w	r3, r3, #1
 800379a:	2b01      	cmp	r3, #1
 800379c:	d10e      	bne.n	80037bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	f003 0301 	and.w	r3, r3, #1
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d107      	bne.n	80037bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f06f 0201 	mvn.w	r2, #1
 80037b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f7fc ff62 	bl	8000680 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	691b      	ldr	r3, [r3, #16]
 80037c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037c6:	2b80      	cmp	r3, #128	; 0x80
 80037c8:	d10e      	bne.n	80037e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037d4:	2b80      	cmp	r3, #128	; 0x80
 80037d6:	d107      	bne.n	80037e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80037e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f000 f99c 	bl	8003b20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037f6:	d10e      	bne.n	8003816 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003802:	2b80      	cmp	r3, #128	; 0x80
 8003804:	d107      	bne.n	8003816 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800380e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f000 f98f 	bl	8003b34 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	691b      	ldr	r3, [r3, #16]
 800381c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003820:	2b40      	cmp	r3, #64	; 0x40
 8003822:	d10e      	bne.n	8003842 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800382e:	2b40      	cmp	r3, #64	; 0x40
 8003830:	d107      	bne.n	8003842 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800383a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f000 f838 	bl	80038b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	691b      	ldr	r3, [r3, #16]
 8003848:	f003 0320 	and.w	r3, r3, #32
 800384c:	2b20      	cmp	r3, #32
 800384e:	d10e      	bne.n	800386e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	f003 0320 	and.w	r3, r3, #32
 800385a:	2b20      	cmp	r3, #32
 800385c:	d107      	bne.n	800386e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f06f 0220 	mvn.w	r2, #32
 8003866:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f000 f94f 	bl	8003b0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800386e:	bf00      	nop
 8003870:	3708      	adds	r7, #8
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}

08003876 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003876:	b480      	push	{r7}
 8003878:	b083      	sub	sp, #12
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800387e:	bf00      	nop
 8003880:	370c      	adds	r7, #12
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr

0800388a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800388a:	b480      	push	{r7}
 800388c:	b083      	sub	sp, #12
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003892:	bf00      	nop
 8003894:	370c      	adds	r7, #12
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr

0800389e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800389e:	b480      	push	{r7}
 80038a0:	b083      	sub	sp, #12
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038a6:	bf00      	nop
 80038a8:	370c      	adds	r7, #12
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr

080038b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038b2:	b480      	push	{r7}
 80038b4:	b083      	sub	sp, #12
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038ba:	bf00      	nop
 80038bc:	370c      	adds	r7, #12
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
	...

080038c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b085      	sub	sp, #20
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	4a40      	ldr	r2, [pc, #256]	; (80039dc <TIM_Base_SetConfig+0x114>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d013      	beq.n	8003908 <TIM_Base_SetConfig+0x40>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038e6:	d00f      	beq.n	8003908 <TIM_Base_SetConfig+0x40>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	4a3d      	ldr	r2, [pc, #244]	; (80039e0 <TIM_Base_SetConfig+0x118>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d00b      	beq.n	8003908 <TIM_Base_SetConfig+0x40>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	4a3c      	ldr	r2, [pc, #240]	; (80039e4 <TIM_Base_SetConfig+0x11c>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d007      	beq.n	8003908 <TIM_Base_SetConfig+0x40>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	4a3b      	ldr	r2, [pc, #236]	; (80039e8 <TIM_Base_SetConfig+0x120>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d003      	beq.n	8003908 <TIM_Base_SetConfig+0x40>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4a3a      	ldr	r2, [pc, #232]	; (80039ec <TIM_Base_SetConfig+0x124>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d108      	bne.n	800391a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800390e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	68fa      	ldr	r2, [r7, #12]
 8003916:	4313      	orrs	r3, r2
 8003918:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a2f      	ldr	r2, [pc, #188]	; (80039dc <TIM_Base_SetConfig+0x114>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d01f      	beq.n	8003962 <TIM_Base_SetConfig+0x9a>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003928:	d01b      	beq.n	8003962 <TIM_Base_SetConfig+0x9a>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a2c      	ldr	r2, [pc, #176]	; (80039e0 <TIM_Base_SetConfig+0x118>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d017      	beq.n	8003962 <TIM_Base_SetConfig+0x9a>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a2b      	ldr	r2, [pc, #172]	; (80039e4 <TIM_Base_SetConfig+0x11c>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d013      	beq.n	8003962 <TIM_Base_SetConfig+0x9a>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a2a      	ldr	r2, [pc, #168]	; (80039e8 <TIM_Base_SetConfig+0x120>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d00f      	beq.n	8003962 <TIM_Base_SetConfig+0x9a>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a29      	ldr	r2, [pc, #164]	; (80039ec <TIM_Base_SetConfig+0x124>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d00b      	beq.n	8003962 <TIM_Base_SetConfig+0x9a>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a28      	ldr	r2, [pc, #160]	; (80039f0 <TIM_Base_SetConfig+0x128>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d007      	beq.n	8003962 <TIM_Base_SetConfig+0x9a>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a27      	ldr	r2, [pc, #156]	; (80039f4 <TIM_Base_SetConfig+0x12c>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d003      	beq.n	8003962 <TIM_Base_SetConfig+0x9a>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a26      	ldr	r2, [pc, #152]	; (80039f8 <TIM_Base_SetConfig+0x130>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d108      	bne.n	8003974 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003968:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	68fa      	ldr	r2, [r7, #12]
 8003970:	4313      	orrs	r3, r2
 8003972:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	695b      	ldr	r3, [r3, #20]
 800397e:	4313      	orrs	r3, r2
 8003980:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	68fa      	ldr	r2, [r7, #12]
 8003986:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	689a      	ldr	r2, [r3, #8]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a10      	ldr	r2, [pc, #64]	; (80039dc <TIM_Base_SetConfig+0x114>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d00f      	beq.n	80039c0 <TIM_Base_SetConfig+0xf8>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4a12      	ldr	r2, [pc, #72]	; (80039ec <TIM_Base_SetConfig+0x124>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d00b      	beq.n	80039c0 <TIM_Base_SetConfig+0xf8>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	4a11      	ldr	r2, [pc, #68]	; (80039f0 <TIM_Base_SetConfig+0x128>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d007      	beq.n	80039c0 <TIM_Base_SetConfig+0xf8>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4a10      	ldr	r2, [pc, #64]	; (80039f4 <TIM_Base_SetConfig+0x12c>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d003      	beq.n	80039c0 <TIM_Base_SetConfig+0xf8>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	4a0f      	ldr	r2, [pc, #60]	; (80039f8 <TIM_Base_SetConfig+0x130>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d103      	bne.n	80039c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	691a      	ldr	r2, [r3, #16]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	615a      	str	r2, [r3, #20]
}
 80039ce:	bf00      	nop
 80039d0:	3714      	adds	r7, #20
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr
 80039da:	bf00      	nop
 80039dc:	40012c00 	.word	0x40012c00
 80039e0:	40000400 	.word	0x40000400
 80039e4:	40000800 	.word	0x40000800
 80039e8:	40000c00 	.word	0x40000c00
 80039ec:	40013400 	.word	0x40013400
 80039f0:	40014000 	.word	0x40014000
 80039f4:	40014400 	.word	0x40014400
 80039f8:	40014800 	.word	0x40014800

080039fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b085      	sub	sp, #20
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d101      	bne.n	8003a14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a10:	2302      	movs	r3, #2
 8003a12:	e068      	b.n	8003ae6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2202      	movs	r2, #2
 8003a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a2e      	ldr	r2, [pc, #184]	; (8003af4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d004      	beq.n	8003a48 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a2d      	ldr	r2, [pc, #180]	; (8003af8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d108      	bne.n	8003a5a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003a4e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	68fa      	ldr	r2, [r7, #12]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a60:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	68fa      	ldr	r2, [r7, #12]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68fa      	ldr	r2, [r7, #12]
 8003a72:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a1e      	ldr	r2, [pc, #120]	; (8003af4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d01d      	beq.n	8003aba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a86:	d018      	beq.n	8003aba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a1b      	ldr	r2, [pc, #108]	; (8003afc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d013      	beq.n	8003aba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a1a      	ldr	r2, [pc, #104]	; (8003b00 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d00e      	beq.n	8003aba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a18      	ldr	r2, [pc, #96]	; (8003b04 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d009      	beq.n	8003aba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a13      	ldr	r2, [pc, #76]	; (8003af8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d004      	beq.n	8003aba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a14      	ldr	r2, [pc, #80]	; (8003b08 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d10c      	bne.n	8003ad4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ac0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	68ba      	ldr	r2, [r7, #8]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68ba      	ldr	r2, [r7, #8]
 8003ad2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3714      	adds	r7, #20
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop
 8003af4:	40012c00 	.word	0x40012c00
 8003af8:	40013400 	.word	0x40013400
 8003afc:	40000400 	.word	0x40000400
 8003b00:	40000800 	.word	0x40000800
 8003b04:	40000c00 	.word	0x40000c00
 8003b08:	40014000 	.word	0x40014000

08003b0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b14:	bf00      	nop
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b28:	bf00      	nop
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003b3c:	bf00      	nop
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d101      	bne.n	8003b5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e040      	b.n	8003bdc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d106      	bne.n	8003b70 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f7fd f8bc 	bl	8000ce8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2224      	movs	r2, #36	; 0x24
 8003b74:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f022 0201 	bic.w	r2, r2, #1
 8003b84:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f000 f8c0 	bl	8003d0c <UART_SetConfig>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d101      	bne.n	8003b96 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e022      	b.n	8003bdc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d002      	beq.n	8003ba4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f000 fb3e 	bl	8004220 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	685a      	ldr	r2, [r3, #4]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003bb2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	689a      	ldr	r2, [r3, #8]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003bc2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f042 0201 	orr.w	r2, r2, #1
 8003bd2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f000 fbc5 	bl	8004364 <UART_CheckIdleState>
 8003bda:	4603      	mov	r3, r0
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3708      	adds	r7, #8
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b08a      	sub	sp, #40	; 0x28
 8003be8:	af02      	add	r7, sp, #8
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	603b      	str	r3, [r7, #0]
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bf8:	2b20      	cmp	r3, #32
 8003bfa:	f040 8081 	bne.w	8003d00 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d002      	beq.n	8003c0a <HAL_UART_Transmit+0x26>
 8003c04:	88fb      	ldrh	r3, [r7, #6]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d101      	bne.n	8003c0e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e079      	b.n	8003d02 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d101      	bne.n	8003c1c <HAL_UART_Transmit+0x38>
 8003c18:	2302      	movs	r3, #2
 8003c1a:	e072      	b.n	8003d02 <HAL_UART_Transmit+0x11e>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2200      	movs	r2, #0
 8003c28:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2221      	movs	r2, #33	; 0x21
 8003c2e:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003c30:	f7fd f936 	bl	8000ea0 <HAL_GetTick>
 8003c34:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	88fa      	ldrh	r2, [r7, #6]
 8003c3a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	88fa      	ldrh	r2, [r7, #6]
 8003c42:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c4e:	d108      	bne.n	8003c62 <HAL_UART_Transmit+0x7e>
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	691b      	ldr	r3, [r3, #16]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d104      	bne.n	8003c62 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	61bb      	str	r3, [r7, #24]
 8003c60:	e003      	b.n	8003c6a <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c66:	2300      	movs	r3, #0
 8003c68:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8003c72:	e02d      	b.n	8003cd0 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	9300      	str	r3, [sp, #0]
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	2180      	movs	r1, #128	; 0x80
 8003c7e:	68f8      	ldr	r0, [r7, #12]
 8003c80:	f000 fbb5 	bl	80043ee <UART_WaitOnFlagUntilTimeout>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d001      	beq.n	8003c8e <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e039      	b.n	8003d02 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d10b      	bne.n	8003cac <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	881a      	ldrh	r2, [r3, #0]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ca0:	b292      	uxth	r2, r2
 8003ca2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	3302      	adds	r3, #2
 8003ca8:	61bb      	str	r3, [r7, #24]
 8003caa:	e008      	b.n	8003cbe <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	781a      	ldrb	r2, [r3, #0]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	b292      	uxth	r2, r2
 8003cb6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003cb8:	69fb      	ldr	r3, [r7, #28]
 8003cba:	3301      	adds	r3, #1
 8003cbc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	3b01      	subs	r3, #1
 8003cc8:	b29a      	uxth	r2, r3
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d1cb      	bne.n	8003c74 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	9300      	str	r3, [sp, #0]
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	2140      	movs	r1, #64	; 0x40
 8003ce6:	68f8      	ldr	r0, [r7, #12]
 8003ce8:	f000 fb81 	bl	80043ee <UART_WaitOnFlagUntilTimeout>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d001      	beq.n	8003cf6 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e005      	b.n	8003d02 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2220      	movs	r2, #32
 8003cfa:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	e000      	b.n	8003d02 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003d00:	2302      	movs	r3, #2
  }
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3720      	adds	r7, #32
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
	...

08003d0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d0c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003d10:	b088      	sub	sp, #32
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d16:	2300      	movs	r3, #0
 8003d18:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	689a      	ldr	r2, [r3, #8]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	431a      	orrs	r2, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	695b      	ldr	r3, [r3, #20]
 8003d28:	431a      	orrs	r2, r3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	69db      	ldr	r3, [r3, #28]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	4bac      	ldr	r3, [pc, #688]	; (8003fec <UART_SetConfig+0x2e0>)
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	6812      	ldr	r2, [r2, #0]
 8003d40:	69f9      	ldr	r1, [r7, #28]
 8003d42:	430b      	orrs	r3, r1
 8003d44:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	68da      	ldr	r2, [r3, #12]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	430a      	orrs	r2, r1
 8003d5a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	699b      	ldr	r3, [r3, #24]
 8003d60:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4aa2      	ldr	r2, [pc, #648]	; (8003ff0 <UART_SetConfig+0x2e4>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d004      	beq.n	8003d76 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6a1b      	ldr	r3, [r3, #32]
 8003d70:	69fa      	ldr	r2, [r7, #28]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	69fa      	ldr	r2, [r7, #28]
 8003d86:	430a      	orrs	r2, r1
 8003d88:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a99      	ldr	r2, [pc, #612]	; (8003ff4 <UART_SetConfig+0x2e8>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d121      	bne.n	8003dd8 <UART_SetConfig+0xcc>
 8003d94:	4b98      	ldr	r3, [pc, #608]	; (8003ff8 <UART_SetConfig+0x2ec>)
 8003d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d9a:	f003 0303 	and.w	r3, r3, #3
 8003d9e:	2b03      	cmp	r3, #3
 8003da0:	d816      	bhi.n	8003dd0 <UART_SetConfig+0xc4>
 8003da2:	a201      	add	r2, pc, #4	; (adr r2, 8003da8 <UART_SetConfig+0x9c>)
 8003da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003da8:	08003db9 	.word	0x08003db9
 8003dac:	08003dc5 	.word	0x08003dc5
 8003db0:	08003dbf 	.word	0x08003dbf
 8003db4:	08003dcb 	.word	0x08003dcb
 8003db8:	2301      	movs	r3, #1
 8003dba:	76fb      	strb	r3, [r7, #27]
 8003dbc:	e0e8      	b.n	8003f90 <UART_SetConfig+0x284>
 8003dbe:	2302      	movs	r3, #2
 8003dc0:	76fb      	strb	r3, [r7, #27]
 8003dc2:	e0e5      	b.n	8003f90 <UART_SetConfig+0x284>
 8003dc4:	2304      	movs	r3, #4
 8003dc6:	76fb      	strb	r3, [r7, #27]
 8003dc8:	e0e2      	b.n	8003f90 <UART_SetConfig+0x284>
 8003dca:	2308      	movs	r3, #8
 8003dcc:	76fb      	strb	r3, [r7, #27]
 8003dce:	e0df      	b.n	8003f90 <UART_SetConfig+0x284>
 8003dd0:	2310      	movs	r3, #16
 8003dd2:	76fb      	strb	r3, [r7, #27]
 8003dd4:	bf00      	nop
 8003dd6:	e0db      	b.n	8003f90 <UART_SetConfig+0x284>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a87      	ldr	r2, [pc, #540]	; (8003ffc <UART_SetConfig+0x2f0>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d134      	bne.n	8003e4c <UART_SetConfig+0x140>
 8003de2:	4b85      	ldr	r3, [pc, #532]	; (8003ff8 <UART_SetConfig+0x2ec>)
 8003de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003de8:	f003 030c 	and.w	r3, r3, #12
 8003dec:	2b0c      	cmp	r3, #12
 8003dee:	d829      	bhi.n	8003e44 <UART_SetConfig+0x138>
 8003df0:	a201      	add	r2, pc, #4	; (adr r2, 8003df8 <UART_SetConfig+0xec>)
 8003df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df6:	bf00      	nop
 8003df8:	08003e2d 	.word	0x08003e2d
 8003dfc:	08003e45 	.word	0x08003e45
 8003e00:	08003e45 	.word	0x08003e45
 8003e04:	08003e45 	.word	0x08003e45
 8003e08:	08003e39 	.word	0x08003e39
 8003e0c:	08003e45 	.word	0x08003e45
 8003e10:	08003e45 	.word	0x08003e45
 8003e14:	08003e45 	.word	0x08003e45
 8003e18:	08003e33 	.word	0x08003e33
 8003e1c:	08003e45 	.word	0x08003e45
 8003e20:	08003e45 	.word	0x08003e45
 8003e24:	08003e45 	.word	0x08003e45
 8003e28:	08003e3f 	.word	0x08003e3f
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	76fb      	strb	r3, [r7, #27]
 8003e30:	e0ae      	b.n	8003f90 <UART_SetConfig+0x284>
 8003e32:	2302      	movs	r3, #2
 8003e34:	76fb      	strb	r3, [r7, #27]
 8003e36:	e0ab      	b.n	8003f90 <UART_SetConfig+0x284>
 8003e38:	2304      	movs	r3, #4
 8003e3a:	76fb      	strb	r3, [r7, #27]
 8003e3c:	e0a8      	b.n	8003f90 <UART_SetConfig+0x284>
 8003e3e:	2308      	movs	r3, #8
 8003e40:	76fb      	strb	r3, [r7, #27]
 8003e42:	e0a5      	b.n	8003f90 <UART_SetConfig+0x284>
 8003e44:	2310      	movs	r3, #16
 8003e46:	76fb      	strb	r3, [r7, #27]
 8003e48:	bf00      	nop
 8003e4a:	e0a1      	b.n	8003f90 <UART_SetConfig+0x284>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a6b      	ldr	r2, [pc, #428]	; (8004000 <UART_SetConfig+0x2f4>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d120      	bne.n	8003e98 <UART_SetConfig+0x18c>
 8003e56:	4b68      	ldr	r3, [pc, #416]	; (8003ff8 <UART_SetConfig+0x2ec>)
 8003e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e5c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003e60:	2b10      	cmp	r3, #16
 8003e62:	d00f      	beq.n	8003e84 <UART_SetConfig+0x178>
 8003e64:	2b10      	cmp	r3, #16
 8003e66:	d802      	bhi.n	8003e6e <UART_SetConfig+0x162>
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d005      	beq.n	8003e78 <UART_SetConfig+0x16c>
 8003e6c:	e010      	b.n	8003e90 <UART_SetConfig+0x184>
 8003e6e:	2b20      	cmp	r3, #32
 8003e70:	d005      	beq.n	8003e7e <UART_SetConfig+0x172>
 8003e72:	2b30      	cmp	r3, #48	; 0x30
 8003e74:	d009      	beq.n	8003e8a <UART_SetConfig+0x17e>
 8003e76:	e00b      	b.n	8003e90 <UART_SetConfig+0x184>
 8003e78:	2300      	movs	r3, #0
 8003e7a:	76fb      	strb	r3, [r7, #27]
 8003e7c:	e088      	b.n	8003f90 <UART_SetConfig+0x284>
 8003e7e:	2302      	movs	r3, #2
 8003e80:	76fb      	strb	r3, [r7, #27]
 8003e82:	e085      	b.n	8003f90 <UART_SetConfig+0x284>
 8003e84:	2304      	movs	r3, #4
 8003e86:	76fb      	strb	r3, [r7, #27]
 8003e88:	e082      	b.n	8003f90 <UART_SetConfig+0x284>
 8003e8a:	2308      	movs	r3, #8
 8003e8c:	76fb      	strb	r3, [r7, #27]
 8003e8e:	e07f      	b.n	8003f90 <UART_SetConfig+0x284>
 8003e90:	2310      	movs	r3, #16
 8003e92:	76fb      	strb	r3, [r7, #27]
 8003e94:	bf00      	nop
 8003e96:	e07b      	b.n	8003f90 <UART_SetConfig+0x284>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a59      	ldr	r2, [pc, #356]	; (8004004 <UART_SetConfig+0x2f8>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d120      	bne.n	8003ee4 <UART_SetConfig+0x1d8>
 8003ea2:	4b55      	ldr	r3, [pc, #340]	; (8003ff8 <UART_SetConfig+0x2ec>)
 8003ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ea8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003eac:	2b40      	cmp	r3, #64	; 0x40
 8003eae:	d00f      	beq.n	8003ed0 <UART_SetConfig+0x1c4>
 8003eb0:	2b40      	cmp	r3, #64	; 0x40
 8003eb2:	d802      	bhi.n	8003eba <UART_SetConfig+0x1ae>
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d005      	beq.n	8003ec4 <UART_SetConfig+0x1b8>
 8003eb8:	e010      	b.n	8003edc <UART_SetConfig+0x1d0>
 8003eba:	2b80      	cmp	r3, #128	; 0x80
 8003ebc:	d005      	beq.n	8003eca <UART_SetConfig+0x1be>
 8003ebe:	2bc0      	cmp	r3, #192	; 0xc0
 8003ec0:	d009      	beq.n	8003ed6 <UART_SetConfig+0x1ca>
 8003ec2:	e00b      	b.n	8003edc <UART_SetConfig+0x1d0>
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	76fb      	strb	r3, [r7, #27]
 8003ec8:	e062      	b.n	8003f90 <UART_SetConfig+0x284>
 8003eca:	2302      	movs	r3, #2
 8003ecc:	76fb      	strb	r3, [r7, #27]
 8003ece:	e05f      	b.n	8003f90 <UART_SetConfig+0x284>
 8003ed0:	2304      	movs	r3, #4
 8003ed2:	76fb      	strb	r3, [r7, #27]
 8003ed4:	e05c      	b.n	8003f90 <UART_SetConfig+0x284>
 8003ed6:	2308      	movs	r3, #8
 8003ed8:	76fb      	strb	r3, [r7, #27]
 8003eda:	e059      	b.n	8003f90 <UART_SetConfig+0x284>
 8003edc:	2310      	movs	r3, #16
 8003ede:	76fb      	strb	r3, [r7, #27]
 8003ee0:	bf00      	nop
 8003ee2:	e055      	b.n	8003f90 <UART_SetConfig+0x284>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a47      	ldr	r2, [pc, #284]	; (8004008 <UART_SetConfig+0x2fc>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d124      	bne.n	8003f38 <UART_SetConfig+0x22c>
 8003eee:	4b42      	ldr	r3, [pc, #264]	; (8003ff8 <UART_SetConfig+0x2ec>)
 8003ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ef4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ef8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003efc:	d012      	beq.n	8003f24 <UART_SetConfig+0x218>
 8003efe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f02:	d802      	bhi.n	8003f0a <UART_SetConfig+0x1fe>
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d007      	beq.n	8003f18 <UART_SetConfig+0x20c>
 8003f08:	e012      	b.n	8003f30 <UART_SetConfig+0x224>
 8003f0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f0e:	d006      	beq.n	8003f1e <UART_SetConfig+0x212>
 8003f10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f14:	d009      	beq.n	8003f2a <UART_SetConfig+0x21e>
 8003f16:	e00b      	b.n	8003f30 <UART_SetConfig+0x224>
 8003f18:	2300      	movs	r3, #0
 8003f1a:	76fb      	strb	r3, [r7, #27]
 8003f1c:	e038      	b.n	8003f90 <UART_SetConfig+0x284>
 8003f1e:	2302      	movs	r3, #2
 8003f20:	76fb      	strb	r3, [r7, #27]
 8003f22:	e035      	b.n	8003f90 <UART_SetConfig+0x284>
 8003f24:	2304      	movs	r3, #4
 8003f26:	76fb      	strb	r3, [r7, #27]
 8003f28:	e032      	b.n	8003f90 <UART_SetConfig+0x284>
 8003f2a:	2308      	movs	r3, #8
 8003f2c:	76fb      	strb	r3, [r7, #27]
 8003f2e:	e02f      	b.n	8003f90 <UART_SetConfig+0x284>
 8003f30:	2310      	movs	r3, #16
 8003f32:	76fb      	strb	r3, [r7, #27]
 8003f34:	bf00      	nop
 8003f36:	e02b      	b.n	8003f90 <UART_SetConfig+0x284>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a2c      	ldr	r2, [pc, #176]	; (8003ff0 <UART_SetConfig+0x2e4>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d124      	bne.n	8003f8c <UART_SetConfig+0x280>
 8003f42:	4b2d      	ldr	r3, [pc, #180]	; (8003ff8 <UART_SetConfig+0x2ec>)
 8003f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f48:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003f4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f50:	d012      	beq.n	8003f78 <UART_SetConfig+0x26c>
 8003f52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f56:	d802      	bhi.n	8003f5e <UART_SetConfig+0x252>
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d007      	beq.n	8003f6c <UART_SetConfig+0x260>
 8003f5c:	e012      	b.n	8003f84 <UART_SetConfig+0x278>
 8003f5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f62:	d006      	beq.n	8003f72 <UART_SetConfig+0x266>
 8003f64:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f68:	d009      	beq.n	8003f7e <UART_SetConfig+0x272>
 8003f6a:	e00b      	b.n	8003f84 <UART_SetConfig+0x278>
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	76fb      	strb	r3, [r7, #27]
 8003f70:	e00e      	b.n	8003f90 <UART_SetConfig+0x284>
 8003f72:	2302      	movs	r3, #2
 8003f74:	76fb      	strb	r3, [r7, #27]
 8003f76:	e00b      	b.n	8003f90 <UART_SetConfig+0x284>
 8003f78:	2304      	movs	r3, #4
 8003f7a:	76fb      	strb	r3, [r7, #27]
 8003f7c:	e008      	b.n	8003f90 <UART_SetConfig+0x284>
 8003f7e:	2308      	movs	r3, #8
 8003f80:	76fb      	strb	r3, [r7, #27]
 8003f82:	e005      	b.n	8003f90 <UART_SetConfig+0x284>
 8003f84:	2310      	movs	r3, #16
 8003f86:	76fb      	strb	r3, [r7, #27]
 8003f88:	bf00      	nop
 8003f8a:	e001      	b.n	8003f90 <UART_SetConfig+0x284>
 8003f8c:	2310      	movs	r3, #16
 8003f8e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a16      	ldr	r2, [pc, #88]	; (8003ff0 <UART_SetConfig+0x2e4>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	f040 8087 	bne.w	80040aa <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003f9c:	7efb      	ldrb	r3, [r7, #27]
 8003f9e:	2b08      	cmp	r3, #8
 8003fa0:	d836      	bhi.n	8004010 <UART_SetConfig+0x304>
 8003fa2:	a201      	add	r2, pc, #4	; (adr r2, 8003fa8 <UART_SetConfig+0x29c>)
 8003fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fa8:	08003fcd 	.word	0x08003fcd
 8003fac:	08004011 	.word	0x08004011
 8003fb0:	08003fd5 	.word	0x08003fd5
 8003fb4:	08004011 	.word	0x08004011
 8003fb8:	08003fdb 	.word	0x08003fdb
 8003fbc:	08004011 	.word	0x08004011
 8003fc0:	08004011 	.word	0x08004011
 8003fc4:	08004011 	.word	0x08004011
 8003fc8:	08003fe3 	.word	0x08003fe3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fcc:	f7fe fd30 	bl	8002a30 <HAL_RCC_GetPCLK1Freq>
 8003fd0:	6178      	str	r0, [r7, #20]
        break;
 8003fd2:	e022      	b.n	800401a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fd4:	4b0d      	ldr	r3, [pc, #52]	; (800400c <UART_SetConfig+0x300>)
 8003fd6:	617b      	str	r3, [r7, #20]
        break;
 8003fd8:	e01f      	b.n	800401a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fda:	f7fe fc93 	bl	8002904 <HAL_RCC_GetSysClockFreq>
 8003fde:	6178      	str	r0, [r7, #20]
        break;
 8003fe0:	e01b      	b.n	800401a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fe2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fe6:	617b      	str	r3, [r7, #20]
        break;
 8003fe8:	e017      	b.n	800401a <UART_SetConfig+0x30e>
 8003fea:	bf00      	nop
 8003fec:	efff69f3 	.word	0xefff69f3
 8003ff0:	40008000 	.word	0x40008000
 8003ff4:	40013800 	.word	0x40013800
 8003ff8:	40021000 	.word	0x40021000
 8003ffc:	40004400 	.word	0x40004400
 8004000:	40004800 	.word	0x40004800
 8004004:	40004c00 	.word	0x40004c00
 8004008:	40005000 	.word	0x40005000
 800400c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004010:	2300      	movs	r3, #0
 8004012:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	76bb      	strb	r3, [r7, #26]
        break;
 8004018:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	2b00      	cmp	r3, #0
 800401e:	f000 80f1 	beq.w	8004204 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	685a      	ldr	r2, [r3, #4]
 8004026:	4613      	mov	r3, r2
 8004028:	005b      	lsls	r3, r3, #1
 800402a:	4413      	add	r3, r2
 800402c:	697a      	ldr	r2, [r7, #20]
 800402e:	429a      	cmp	r2, r3
 8004030:	d305      	bcc.n	800403e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004038:	697a      	ldr	r2, [r7, #20]
 800403a:	429a      	cmp	r2, r3
 800403c:	d902      	bls.n	8004044 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	76bb      	strb	r3, [r7, #26]
 8004042:	e0df      	b.n	8004204 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	4619      	mov	r1, r3
 8004048:	f04f 0200 	mov.w	r2, #0
 800404c:	f04f 0300 	mov.w	r3, #0
 8004050:	f04f 0400 	mov.w	r4, #0
 8004054:	0214      	lsls	r4, r2, #8
 8004056:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800405a:	020b      	lsls	r3, r1, #8
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	6852      	ldr	r2, [r2, #4]
 8004060:	0852      	lsrs	r2, r2, #1
 8004062:	4611      	mov	r1, r2
 8004064:	f04f 0200 	mov.w	r2, #0
 8004068:	eb13 0b01 	adds.w	fp, r3, r1
 800406c:	eb44 0c02 	adc.w	ip, r4, r2
 8004070:	4658      	mov	r0, fp
 8004072:	4661      	mov	r1, ip
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f04f 0400 	mov.w	r4, #0
 800407c:	461a      	mov	r2, r3
 800407e:	4623      	mov	r3, r4
 8004080:	f7fc f8f6 	bl	8000270 <__aeabi_uldivmod>
 8004084:	4603      	mov	r3, r0
 8004086:	460c      	mov	r4, r1
 8004088:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004090:	d308      	bcc.n	80040a4 <UART_SetConfig+0x398>
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004098:	d204      	bcs.n	80040a4 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	693a      	ldr	r2, [r7, #16]
 80040a0:	60da      	str	r2, [r3, #12]
 80040a2:	e0af      	b.n	8004204 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	76bb      	strb	r3, [r7, #26]
 80040a8:	e0ac      	b.n	8004204 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	69db      	ldr	r3, [r3, #28]
 80040ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040b2:	d15b      	bne.n	800416c <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80040b4:	7efb      	ldrb	r3, [r7, #27]
 80040b6:	2b08      	cmp	r3, #8
 80040b8:	d827      	bhi.n	800410a <UART_SetConfig+0x3fe>
 80040ba:	a201      	add	r2, pc, #4	; (adr r2, 80040c0 <UART_SetConfig+0x3b4>)
 80040bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040c0:	080040e5 	.word	0x080040e5
 80040c4:	080040ed 	.word	0x080040ed
 80040c8:	080040f5 	.word	0x080040f5
 80040cc:	0800410b 	.word	0x0800410b
 80040d0:	080040fb 	.word	0x080040fb
 80040d4:	0800410b 	.word	0x0800410b
 80040d8:	0800410b 	.word	0x0800410b
 80040dc:	0800410b 	.word	0x0800410b
 80040e0:	08004103 	.word	0x08004103
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040e4:	f7fe fca4 	bl	8002a30 <HAL_RCC_GetPCLK1Freq>
 80040e8:	6178      	str	r0, [r7, #20]
        break;
 80040ea:	e013      	b.n	8004114 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040ec:	f7fe fcb6 	bl	8002a5c <HAL_RCC_GetPCLK2Freq>
 80040f0:	6178      	str	r0, [r7, #20]
        break;
 80040f2:	e00f      	b.n	8004114 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040f4:	4b49      	ldr	r3, [pc, #292]	; (800421c <UART_SetConfig+0x510>)
 80040f6:	617b      	str	r3, [r7, #20]
        break;
 80040f8:	e00c      	b.n	8004114 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040fa:	f7fe fc03 	bl	8002904 <HAL_RCC_GetSysClockFreq>
 80040fe:	6178      	str	r0, [r7, #20]
        break;
 8004100:	e008      	b.n	8004114 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004102:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004106:	617b      	str	r3, [r7, #20]
        break;
 8004108:	e004      	b.n	8004114 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800410a:	2300      	movs	r3, #0
 800410c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	76bb      	strb	r3, [r7, #26]
        break;
 8004112:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d074      	beq.n	8004204 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	005a      	lsls	r2, r3, #1
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	085b      	lsrs	r3, r3, #1
 8004124:	441a      	add	r2, r3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	fbb2 f3f3 	udiv	r3, r2, r3
 800412e:	b29b      	uxth	r3, r3
 8004130:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	2b0f      	cmp	r3, #15
 8004136:	d916      	bls.n	8004166 <UART_SetConfig+0x45a>
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800413e:	d212      	bcs.n	8004166 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	b29b      	uxth	r3, r3
 8004144:	f023 030f 	bic.w	r3, r3, #15
 8004148:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	085b      	lsrs	r3, r3, #1
 800414e:	b29b      	uxth	r3, r3
 8004150:	f003 0307 	and.w	r3, r3, #7
 8004154:	b29a      	uxth	r2, r3
 8004156:	89fb      	ldrh	r3, [r7, #14]
 8004158:	4313      	orrs	r3, r2
 800415a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	89fa      	ldrh	r2, [r7, #14]
 8004162:	60da      	str	r2, [r3, #12]
 8004164:	e04e      	b.n	8004204 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	76bb      	strb	r3, [r7, #26]
 800416a:	e04b      	b.n	8004204 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800416c:	7efb      	ldrb	r3, [r7, #27]
 800416e:	2b08      	cmp	r3, #8
 8004170:	d827      	bhi.n	80041c2 <UART_SetConfig+0x4b6>
 8004172:	a201      	add	r2, pc, #4	; (adr r2, 8004178 <UART_SetConfig+0x46c>)
 8004174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004178:	0800419d 	.word	0x0800419d
 800417c:	080041a5 	.word	0x080041a5
 8004180:	080041ad 	.word	0x080041ad
 8004184:	080041c3 	.word	0x080041c3
 8004188:	080041b3 	.word	0x080041b3
 800418c:	080041c3 	.word	0x080041c3
 8004190:	080041c3 	.word	0x080041c3
 8004194:	080041c3 	.word	0x080041c3
 8004198:	080041bb 	.word	0x080041bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800419c:	f7fe fc48 	bl	8002a30 <HAL_RCC_GetPCLK1Freq>
 80041a0:	6178      	str	r0, [r7, #20]
        break;
 80041a2:	e013      	b.n	80041cc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041a4:	f7fe fc5a 	bl	8002a5c <HAL_RCC_GetPCLK2Freq>
 80041a8:	6178      	str	r0, [r7, #20]
        break;
 80041aa:	e00f      	b.n	80041cc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041ac:	4b1b      	ldr	r3, [pc, #108]	; (800421c <UART_SetConfig+0x510>)
 80041ae:	617b      	str	r3, [r7, #20]
        break;
 80041b0:	e00c      	b.n	80041cc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041b2:	f7fe fba7 	bl	8002904 <HAL_RCC_GetSysClockFreq>
 80041b6:	6178      	str	r0, [r7, #20]
        break;
 80041b8:	e008      	b.n	80041cc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041be:	617b      	str	r3, [r7, #20]
        break;
 80041c0:	e004      	b.n	80041cc <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80041c2:	2300      	movs	r3, #0
 80041c4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	76bb      	strb	r3, [r7, #26]
        break;
 80041ca:	bf00      	nop
    }

    if (pclk != 0U)
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d018      	beq.n	8004204 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	085a      	lsrs	r2, r3, #1
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	441a      	add	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	2b0f      	cmp	r3, #15
 80041ec:	d908      	bls.n	8004200 <UART_SetConfig+0x4f4>
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041f4:	d204      	bcs.n	8004200 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	693a      	ldr	r2, [r7, #16]
 80041fc:	60da      	str	r2, [r3, #12]
 80041fe:	e001      	b.n	8004204 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004210:	7ebb      	ldrb	r3, [r7, #26]
}
 8004212:	4618      	mov	r0, r3
 8004214:	3720      	adds	r7, #32
 8004216:	46bd      	mov	sp, r7
 8004218:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800421c:	00f42400 	.word	0x00f42400

08004220 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422c:	f003 0301 	and.w	r3, r3, #1
 8004230:	2b00      	cmp	r3, #0
 8004232:	d00a      	beq.n	800424a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	430a      	orrs	r2, r1
 8004248:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424e:	f003 0302 	and.w	r3, r3, #2
 8004252:	2b00      	cmp	r3, #0
 8004254:	d00a      	beq.n	800426c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	430a      	orrs	r2, r1
 800426a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004270:	f003 0304 	and.w	r3, r3, #4
 8004274:	2b00      	cmp	r3, #0
 8004276:	d00a      	beq.n	800428e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	430a      	orrs	r2, r1
 800428c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004292:	f003 0308 	and.w	r3, r3, #8
 8004296:	2b00      	cmp	r3, #0
 8004298:	d00a      	beq.n	80042b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	430a      	orrs	r2, r1
 80042ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b4:	f003 0310 	and.w	r3, r3, #16
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d00a      	beq.n	80042d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	430a      	orrs	r2, r1
 80042d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d6:	f003 0320 	and.w	r3, r3, #32
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d00a      	beq.n	80042f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	430a      	orrs	r2, r1
 80042f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d01a      	beq.n	8004336 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	430a      	orrs	r2, r1
 8004314:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800431e:	d10a      	bne.n	8004336 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	430a      	orrs	r2, r1
 8004334:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800433e:	2b00      	cmp	r3, #0
 8004340:	d00a      	beq.n	8004358 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	430a      	orrs	r2, r1
 8004356:	605a      	str	r2, [r3, #4]
  }
}
 8004358:	bf00      	nop
 800435a:	370c      	adds	r7, #12
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b086      	sub	sp, #24
 8004368:	af02      	add	r7, sp, #8
 800436a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004372:	f7fc fd95 	bl	8000ea0 <HAL_GetTick>
 8004376:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0308 	and.w	r3, r3, #8
 8004382:	2b08      	cmp	r3, #8
 8004384:	d10e      	bne.n	80043a4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004386:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800438a:	9300      	str	r3, [sp, #0]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2200      	movs	r2, #0
 8004390:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f000 f82a 	bl	80043ee <UART_WaitOnFlagUntilTimeout>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d001      	beq.n	80043a4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043a0:	2303      	movs	r3, #3
 80043a2:	e020      	b.n	80043e6 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0304 	and.w	r3, r3, #4
 80043ae:	2b04      	cmp	r3, #4
 80043b0:	d10e      	bne.n	80043d0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043b2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80043b6:	9300      	str	r3, [sp, #0]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f000 f814 	bl	80043ee <UART_WaitOnFlagUntilTimeout>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d001      	beq.n	80043d0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e00a      	b.n	80043e6 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2220      	movs	r2, #32
 80043d4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2220      	movs	r2, #32
 80043da:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3710      	adds	r7, #16
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}

080043ee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80043ee:	b580      	push	{r7, lr}
 80043f0:	b084      	sub	sp, #16
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	60f8      	str	r0, [r7, #12]
 80043f6:	60b9      	str	r1, [r7, #8]
 80043f8:	603b      	str	r3, [r7, #0]
 80043fa:	4613      	mov	r3, r2
 80043fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043fe:	e05d      	b.n	80044bc <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004400:	69bb      	ldr	r3, [r7, #24]
 8004402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004406:	d059      	beq.n	80044bc <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004408:	f7fc fd4a 	bl	8000ea0 <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	69ba      	ldr	r2, [r7, #24]
 8004414:	429a      	cmp	r2, r3
 8004416:	d302      	bcc.n	800441e <UART_WaitOnFlagUntilTimeout+0x30>
 8004418:	69bb      	ldr	r3, [r7, #24]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d11b      	bne.n	8004456 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800442c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	689a      	ldr	r2, [r3, #8]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f022 0201 	bic.w	r2, r2, #1
 800443c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2220      	movs	r2, #32
 8004442:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2220      	movs	r2, #32
 8004448:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e042      	b.n	80044dc <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0304 	and.w	r3, r3, #4
 8004460:	2b00      	cmp	r3, #0
 8004462:	d02b      	beq.n	80044bc <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	69db      	ldr	r3, [r3, #28]
 800446a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800446e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004472:	d123      	bne.n	80044bc <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800447c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800448c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	689a      	ldr	r2, [r3, #8]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f022 0201 	bic.w	r2, r2, #1
 800449c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2220      	movs	r2, #32
 80044a2:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2220      	movs	r2, #32
 80044a8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2220      	movs	r2, #32
 80044ae:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 80044b8:	2303      	movs	r3, #3
 80044ba:	e00f      	b.n	80044dc <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	69da      	ldr	r2, [r3, #28]
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	4013      	ands	r3, r2
 80044c6:	68ba      	ldr	r2, [r7, #8]
 80044c8:	429a      	cmp	r2, r3
 80044ca:	bf0c      	ite	eq
 80044cc:	2301      	moveq	r3, #1
 80044ce:	2300      	movne	r3, #0
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	461a      	mov	r2, r3
 80044d4:	79fb      	ldrb	r3, [r7, #7]
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d092      	beq.n	8004400 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044da:	2300      	movs	r3, #0
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3710      	adds	r7, #16
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <__errno>:
 80044e4:	4b01      	ldr	r3, [pc, #4]	; (80044ec <__errno+0x8>)
 80044e6:	6818      	ldr	r0, [r3, #0]
 80044e8:	4770      	bx	lr
 80044ea:	bf00      	nop
 80044ec:	2000000c 	.word	0x2000000c

080044f0 <__libc_init_array>:
 80044f0:	b570      	push	{r4, r5, r6, lr}
 80044f2:	4e0d      	ldr	r6, [pc, #52]	; (8004528 <__libc_init_array+0x38>)
 80044f4:	4c0d      	ldr	r4, [pc, #52]	; (800452c <__libc_init_array+0x3c>)
 80044f6:	1ba4      	subs	r4, r4, r6
 80044f8:	10a4      	asrs	r4, r4, #2
 80044fa:	2500      	movs	r5, #0
 80044fc:	42a5      	cmp	r5, r4
 80044fe:	d109      	bne.n	8004514 <__libc_init_array+0x24>
 8004500:	4e0b      	ldr	r6, [pc, #44]	; (8004530 <__libc_init_array+0x40>)
 8004502:	4c0c      	ldr	r4, [pc, #48]	; (8004534 <__libc_init_array+0x44>)
 8004504:	f000 ff04 	bl	8005310 <_init>
 8004508:	1ba4      	subs	r4, r4, r6
 800450a:	10a4      	asrs	r4, r4, #2
 800450c:	2500      	movs	r5, #0
 800450e:	42a5      	cmp	r5, r4
 8004510:	d105      	bne.n	800451e <__libc_init_array+0x2e>
 8004512:	bd70      	pop	{r4, r5, r6, pc}
 8004514:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004518:	4798      	blx	r3
 800451a:	3501      	adds	r5, #1
 800451c:	e7ee      	b.n	80044fc <__libc_init_array+0xc>
 800451e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004522:	4798      	blx	r3
 8004524:	3501      	adds	r5, #1
 8004526:	e7f2      	b.n	800450e <__libc_init_array+0x1e>
 8004528:	0800542c 	.word	0x0800542c
 800452c:	0800542c 	.word	0x0800542c
 8004530:	0800542c 	.word	0x0800542c
 8004534:	08005430 	.word	0x08005430

08004538 <memset>:
 8004538:	4402      	add	r2, r0
 800453a:	4603      	mov	r3, r0
 800453c:	4293      	cmp	r3, r2
 800453e:	d100      	bne.n	8004542 <memset+0xa>
 8004540:	4770      	bx	lr
 8004542:	f803 1b01 	strb.w	r1, [r3], #1
 8004546:	e7f9      	b.n	800453c <memset+0x4>

08004548 <iprintf>:
 8004548:	b40f      	push	{r0, r1, r2, r3}
 800454a:	4b0a      	ldr	r3, [pc, #40]	; (8004574 <iprintf+0x2c>)
 800454c:	b513      	push	{r0, r1, r4, lr}
 800454e:	681c      	ldr	r4, [r3, #0]
 8004550:	b124      	cbz	r4, 800455c <iprintf+0x14>
 8004552:	69a3      	ldr	r3, [r4, #24]
 8004554:	b913      	cbnz	r3, 800455c <iprintf+0x14>
 8004556:	4620      	mov	r0, r4
 8004558:	f000 f84e 	bl	80045f8 <__sinit>
 800455c:	ab05      	add	r3, sp, #20
 800455e:	9a04      	ldr	r2, [sp, #16]
 8004560:	68a1      	ldr	r1, [r4, #8]
 8004562:	9301      	str	r3, [sp, #4]
 8004564:	4620      	mov	r0, r4
 8004566:	f000 f955 	bl	8004814 <_vfiprintf_r>
 800456a:	b002      	add	sp, #8
 800456c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004570:	b004      	add	sp, #16
 8004572:	4770      	bx	lr
 8004574:	2000000c 	.word	0x2000000c

08004578 <std>:
 8004578:	2300      	movs	r3, #0
 800457a:	b510      	push	{r4, lr}
 800457c:	4604      	mov	r4, r0
 800457e:	e9c0 3300 	strd	r3, r3, [r0]
 8004582:	6083      	str	r3, [r0, #8]
 8004584:	8181      	strh	r1, [r0, #12]
 8004586:	6643      	str	r3, [r0, #100]	; 0x64
 8004588:	81c2      	strh	r2, [r0, #14]
 800458a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800458e:	6183      	str	r3, [r0, #24]
 8004590:	4619      	mov	r1, r3
 8004592:	2208      	movs	r2, #8
 8004594:	305c      	adds	r0, #92	; 0x5c
 8004596:	f7ff ffcf 	bl	8004538 <memset>
 800459a:	4b05      	ldr	r3, [pc, #20]	; (80045b0 <std+0x38>)
 800459c:	6263      	str	r3, [r4, #36]	; 0x24
 800459e:	4b05      	ldr	r3, [pc, #20]	; (80045b4 <std+0x3c>)
 80045a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80045a2:	4b05      	ldr	r3, [pc, #20]	; (80045b8 <std+0x40>)
 80045a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80045a6:	4b05      	ldr	r3, [pc, #20]	; (80045bc <std+0x44>)
 80045a8:	6224      	str	r4, [r4, #32]
 80045aa:	6323      	str	r3, [r4, #48]	; 0x30
 80045ac:	bd10      	pop	{r4, pc}
 80045ae:	bf00      	nop
 80045b0:	08004d71 	.word	0x08004d71
 80045b4:	08004d93 	.word	0x08004d93
 80045b8:	08004dcb 	.word	0x08004dcb
 80045bc:	08004def 	.word	0x08004def

080045c0 <_cleanup_r>:
 80045c0:	4901      	ldr	r1, [pc, #4]	; (80045c8 <_cleanup_r+0x8>)
 80045c2:	f000 b885 	b.w	80046d0 <_fwalk_reent>
 80045c6:	bf00      	nop
 80045c8:	080050c9 	.word	0x080050c9

080045cc <__sfmoreglue>:
 80045cc:	b570      	push	{r4, r5, r6, lr}
 80045ce:	1e4a      	subs	r2, r1, #1
 80045d0:	2568      	movs	r5, #104	; 0x68
 80045d2:	4355      	muls	r5, r2
 80045d4:	460e      	mov	r6, r1
 80045d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80045da:	f000 f897 	bl	800470c <_malloc_r>
 80045de:	4604      	mov	r4, r0
 80045e0:	b140      	cbz	r0, 80045f4 <__sfmoreglue+0x28>
 80045e2:	2100      	movs	r1, #0
 80045e4:	e9c0 1600 	strd	r1, r6, [r0]
 80045e8:	300c      	adds	r0, #12
 80045ea:	60a0      	str	r0, [r4, #8]
 80045ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80045f0:	f7ff ffa2 	bl	8004538 <memset>
 80045f4:	4620      	mov	r0, r4
 80045f6:	bd70      	pop	{r4, r5, r6, pc}

080045f8 <__sinit>:
 80045f8:	6983      	ldr	r3, [r0, #24]
 80045fa:	b510      	push	{r4, lr}
 80045fc:	4604      	mov	r4, r0
 80045fe:	bb33      	cbnz	r3, 800464e <__sinit+0x56>
 8004600:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004604:	6503      	str	r3, [r0, #80]	; 0x50
 8004606:	4b12      	ldr	r3, [pc, #72]	; (8004650 <__sinit+0x58>)
 8004608:	4a12      	ldr	r2, [pc, #72]	; (8004654 <__sinit+0x5c>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	6282      	str	r2, [r0, #40]	; 0x28
 800460e:	4298      	cmp	r0, r3
 8004610:	bf04      	itt	eq
 8004612:	2301      	moveq	r3, #1
 8004614:	6183      	streq	r3, [r0, #24]
 8004616:	f000 f81f 	bl	8004658 <__sfp>
 800461a:	6060      	str	r0, [r4, #4]
 800461c:	4620      	mov	r0, r4
 800461e:	f000 f81b 	bl	8004658 <__sfp>
 8004622:	60a0      	str	r0, [r4, #8]
 8004624:	4620      	mov	r0, r4
 8004626:	f000 f817 	bl	8004658 <__sfp>
 800462a:	2200      	movs	r2, #0
 800462c:	60e0      	str	r0, [r4, #12]
 800462e:	2104      	movs	r1, #4
 8004630:	6860      	ldr	r0, [r4, #4]
 8004632:	f7ff ffa1 	bl	8004578 <std>
 8004636:	2201      	movs	r2, #1
 8004638:	2109      	movs	r1, #9
 800463a:	68a0      	ldr	r0, [r4, #8]
 800463c:	f7ff ff9c 	bl	8004578 <std>
 8004640:	2202      	movs	r2, #2
 8004642:	2112      	movs	r1, #18
 8004644:	68e0      	ldr	r0, [r4, #12]
 8004646:	f7ff ff97 	bl	8004578 <std>
 800464a:	2301      	movs	r3, #1
 800464c:	61a3      	str	r3, [r4, #24]
 800464e:	bd10      	pop	{r4, pc}
 8004650:	0800538c 	.word	0x0800538c
 8004654:	080045c1 	.word	0x080045c1

08004658 <__sfp>:
 8004658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800465a:	4b1b      	ldr	r3, [pc, #108]	; (80046c8 <__sfp+0x70>)
 800465c:	681e      	ldr	r6, [r3, #0]
 800465e:	69b3      	ldr	r3, [r6, #24]
 8004660:	4607      	mov	r7, r0
 8004662:	b913      	cbnz	r3, 800466a <__sfp+0x12>
 8004664:	4630      	mov	r0, r6
 8004666:	f7ff ffc7 	bl	80045f8 <__sinit>
 800466a:	3648      	adds	r6, #72	; 0x48
 800466c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004670:	3b01      	subs	r3, #1
 8004672:	d503      	bpl.n	800467c <__sfp+0x24>
 8004674:	6833      	ldr	r3, [r6, #0]
 8004676:	b133      	cbz	r3, 8004686 <__sfp+0x2e>
 8004678:	6836      	ldr	r6, [r6, #0]
 800467a:	e7f7      	b.n	800466c <__sfp+0x14>
 800467c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004680:	b16d      	cbz	r5, 800469e <__sfp+0x46>
 8004682:	3468      	adds	r4, #104	; 0x68
 8004684:	e7f4      	b.n	8004670 <__sfp+0x18>
 8004686:	2104      	movs	r1, #4
 8004688:	4638      	mov	r0, r7
 800468a:	f7ff ff9f 	bl	80045cc <__sfmoreglue>
 800468e:	6030      	str	r0, [r6, #0]
 8004690:	2800      	cmp	r0, #0
 8004692:	d1f1      	bne.n	8004678 <__sfp+0x20>
 8004694:	230c      	movs	r3, #12
 8004696:	603b      	str	r3, [r7, #0]
 8004698:	4604      	mov	r4, r0
 800469a:	4620      	mov	r0, r4
 800469c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800469e:	4b0b      	ldr	r3, [pc, #44]	; (80046cc <__sfp+0x74>)
 80046a0:	6665      	str	r5, [r4, #100]	; 0x64
 80046a2:	e9c4 5500 	strd	r5, r5, [r4]
 80046a6:	60a5      	str	r5, [r4, #8]
 80046a8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80046ac:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80046b0:	2208      	movs	r2, #8
 80046b2:	4629      	mov	r1, r5
 80046b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80046b8:	f7ff ff3e 	bl	8004538 <memset>
 80046bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80046c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80046c4:	e7e9      	b.n	800469a <__sfp+0x42>
 80046c6:	bf00      	nop
 80046c8:	0800538c 	.word	0x0800538c
 80046cc:	ffff0001 	.word	0xffff0001

080046d0 <_fwalk_reent>:
 80046d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046d4:	4680      	mov	r8, r0
 80046d6:	4689      	mov	r9, r1
 80046d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80046dc:	2600      	movs	r6, #0
 80046de:	b914      	cbnz	r4, 80046e6 <_fwalk_reent+0x16>
 80046e0:	4630      	mov	r0, r6
 80046e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046e6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80046ea:	3f01      	subs	r7, #1
 80046ec:	d501      	bpl.n	80046f2 <_fwalk_reent+0x22>
 80046ee:	6824      	ldr	r4, [r4, #0]
 80046f0:	e7f5      	b.n	80046de <_fwalk_reent+0xe>
 80046f2:	89ab      	ldrh	r3, [r5, #12]
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d907      	bls.n	8004708 <_fwalk_reent+0x38>
 80046f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80046fc:	3301      	adds	r3, #1
 80046fe:	d003      	beq.n	8004708 <_fwalk_reent+0x38>
 8004700:	4629      	mov	r1, r5
 8004702:	4640      	mov	r0, r8
 8004704:	47c8      	blx	r9
 8004706:	4306      	orrs	r6, r0
 8004708:	3568      	adds	r5, #104	; 0x68
 800470a:	e7ee      	b.n	80046ea <_fwalk_reent+0x1a>

0800470c <_malloc_r>:
 800470c:	b570      	push	{r4, r5, r6, lr}
 800470e:	1ccd      	adds	r5, r1, #3
 8004710:	f025 0503 	bic.w	r5, r5, #3
 8004714:	3508      	adds	r5, #8
 8004716:	2d0c      	cmp	r5, #12
 8004718:	bf38      	it	cc
 800471a:	250c      	movcc	r5, #12
 800471c:	2d00      	cmp	r5, #0
 800471e:	4606      	mov	r6, r0
 8004720:	db01      	blt.n	8004726 <_malloc_r+0x1a>
 8004722:	42a9      	cmp	r1, r5
 8004724:	d903      	bls.n	800472e <_malloc_r+0x22>
 8004726:	230c      	movs	r3, #12
 8004728:	6033      	str	r3, [r6, #0]
 800472a:	2000      	movs	r0, #0
 800472c:	bd70      	pop	{r4, r5, r6, pc}
 800472e:	f000 fd6b 	bl	8005208 <__malloc_lock>
 8004732:	4a21      	ldr	r2, [pc, #132]	; (80047b8 <_malloc_r+0xac>)
 8004734:	6814      	ldr	r4, [r2, #0]
 8004736:	4621      	mov	r1, r4
 8004738:	b991      	cbnz	r1, 8004760 <_malloc_r+0x54>
 800473a:	4c20      	ldr	r4, [pc, #128]	; (80047bc <_malloc_r+0xb0>)
 800473c:	6823      	ldr	r3, [r4, #0]
 800473e:	b91b      	cbnz	r3, 8004748 <_malloc_r+0x3c>
 8004740:	4630      	mov	r0, r6
 8004742:	f000 fb05 	bl	8004d50 <_sbrk_r>
 8004746:	6020      	str	r0, [r4, #0]
 8004748:	4629      	mov	r1, r5
 800474a:	4630      	mov	r0, r6
 800474c:	f000 fb00 	bl	8004d50 <_sbrk_r>
 8004750:	1c43      	adds	r3, r0, #1
 8004752:	d124      	bne.n	800479e <_malloc_r+0x92>
 8004754:	230c      	movs	r3, #12
 8004756:	6033      	str	r3, [r6, #0]
 8004758:	4630      	mov	r0, r6
 800475a:	f000 fd56 	bl	800520a <__malloc_unlock>
 800475e:	e7e4      	b.n	800472a <_malloc_r+0x1e>
 8004760:	680b      	ldr	r3, [r1, #0]
 8004762:	1b5b      	subs	r3, r3, r5
 8004764:	d418      	bmi.n	8004798 <_malloc_r+0x8c>
 8004766:	2b0b      	cmp	r3, #11
 8004768:	d90f      	bls.n	800478a <_malloc_r+0x7e>
 800476a:	600b      	str	r3, [r1, #0]
 800476c:	50cd      	str	r5, [r1, r3]
 800476e:	18cc      	adds	r4, r1, r3
 8004770:	4630      	mov	r0, r6
 8004772:	f000 fd4a 	bl	800520a <__malloc_unlock>
 8004776:	f104 000b 	add.w	r0, r4, #11
 800477a:	1d23      	adds	r3, r4, #4
 800477c:	f020 0007 	bic.w	r0, r0, #7
 8004780:	1ac3      	subs	r3, r0, r3
 8004782:	d0d3      	beq.n	800472c <_malloc_r+0x20>
 8004784:	425a      	negs	r2, r3
 8004786:	50e2      	str	r2, [r4, r3]
 8004788:	e7d0      	b.n	800472c <_malloc_r+0x20>
 800478a:	428c      	cmp	r4, r1
 800478c:	684b      	ldr	r3, [r1, #4]
 800478e:	bf16      	itet	ne
 8004790:	6063      	strne	r3, [r4, #4]
 8004792:	6013      	streq	r3, [r2, #0]
 8004794:	460c      	movne	r4, r1
 8004796:	e7eb      	b.n	8004770 <_malloc_r+0x64>
 8004798:	460c      	mov	r4, r1
 800479a:	6849      	ldr	r1, [r1, #4]
 800479c:	e7cc      	b.n	8004738 <_malloc_r+0x2c>
 800479e:	1cc4      	adds	r4, r0, #3
 80047a0:	f024 0403 	bic.w	r4, r4, #3
 80047a4:	42a0      	cmp	r0, r4
 80047a6:	d005      	beq.n	80047b4 <_malloc_r+0xa8>
 80047a8:	1a21      	subs	r1, r4, r0
 80047aa:	4630      	mov	r0, r6
 80047ac:	f000 fad0 	bl	8004d50 <_sbrk_r>
 80047b0:	3001      	adds	r0, #1
 80047b2:	d0cf      	beq.n	8004754 <_malloc_r+0x48>
 80047b4:	6025      	str	r5, [r4, #0]
 80047b6:	e7db      	b.n	8004770 <_malloc_r+0x64>
 80047b8:	20000090 	.word	0x20000090
 80047bc:	20000094 	.word	0x20000094

080047c0 <__sfputc_r>:
 80047c0:	6893      	ldr	r3, [r2, #8]
 80047c2:	3b01      	subs	r3, #1
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	b410      	push	{r4}
 80047c8:	6093      	str	r3, [r2, #8]
 80047ca:	da08      	bge.n	80047de <__sfputc_r+0x1e>
 80047cc:	6994      	ldr	r4, [r2, #24]
 80047ce:	42a3      	cmp	r3, r4
 80047d0:	db01      	blt.n	80047d6 <__sfputc_r+0x16>
 80047d2:	290a      	cmp	r1, #10
 80047d4:	d103      	bne.n	80047de <__sfputc_r+0x1e>
 80047d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80047da:	f000 bb0d 	b.w	8004df8 <__swbuf_r>
 80047de:	6813      	ldr	r3, [r2, #0]
 80047e0:	1c58      	adds	r0, r3, #1
 80047e2:	6010      	str	r0, [r2, #0]
 80047e4:	7019      	strb	r1, [r3, #0]
 80047e6:	4608      	mov	r0, r1
 80047e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80047ec:	4770      	bx	lr

080047ee <__sfputs_r>:
 80047ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047f0:	4606      	mov	r6, r0
 80047f2:	460f      	mov	r7, r1
 80047f4:	4614      	mov	r4, r2
 80047f6:	18d5      	adds	r5, r2, r3
 80047f8:	42ac      	cmp	r4, r5
 80047fa:	d101      	bne.n	8004800 <__sfputs_r+0x12>
 80047fc:	2000      	movs	r0, #0
 80047fe:	e007      	b.n	8004810 <__sfputs_r+0x22>
 8004800:	463a      	mov	r2, r7
 8004802:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004806:	4630      	mov	r0, r6
 8004808:	f7ff ffda 	bl	80047c0 <__sfputc_r>
 800480c:	1c43      	adds	r3, r0, #1
 800480e:	d1f3      	bne.n	80047f8 <__sfputs_r+0xa>
 8004810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004814 <_vfiprintf_r>:
 8004814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004818:	460c      	mov	r4, r1
 800481a:	b09d      	sub	sp, #116	; 0x74
 800481c:	4617      	mov	r7, r2
 800481e:	461d      	mov	r5, r3
 8004820:	4606      	mov	r6, r0
 8004822:	b118      	cbz	r0, 800482c <_vfiprintf_r+0x18>
 8004824:	6983      	ldr	r3, [r0, #24]
 8004826:	b90b      	cbnz	r3, 800482c <_vfiprintf_r+0x18>
 8004828:	f7ff fee6 	bl	80045f8 <__sinit>
 800482c:	4b7c      	ldr	r3, [pc, #496]	; (8004a20 <_vfiprintf_r+0x20c>)
 800482e:	429c      	cmp	r4, r3
 8004830:	d158      	bne.n	80048e4 <_vfiprintf_r+0xd0>
 8004832:	6874      	ldr	r4, [r6, #4]
 8004834:	89a3      	ldrh	r3, [r4, #12]
 8004836:	0718      	lsls	r0, r3, #28
 8004838:	d55e      	bpl.n	80048f8 <_vfiprintf_r+0xe4>
 800483a:	6923      	ldr	r3, [r4, #16]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d05b      	beq.n	80048f8 <_vfiprintf_r+0xe4>
 8004840:	2300      	movs	r3, #0
 8004842:	9309      	str	r3, [sp, #36]	; 0x24
 8004844:	2320      	movs	r3, #32
 8004846:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800484a:	2330      	movs	r3, #48	; 0x30
 800484c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004850:	9503      	str	r5, [sp, #12]
 8004852:	f04f 0b01 	mov.w	fp, #1
 8004856:	46b8      	mov	r8, r7
 8004858:	4645      	mov	r5, r8
 800485a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800485e:	b10b      	cbz	r3, 8004864 <_vfiprintf_r+0x50>
 8004860:	2b25      	cmp	r3, #37	; 0x25
 8004862:	d154      	bne.n	800490e <_vfiprintf_r+0xfa>
 8004864:	ebb8 0a07 	subs.w	sl, r8, r7
 8004868:	d00b      	beq.n	8004882 <_vfiprintf_r+0x6e>
 800486a:	4653      	mov	r3, sl
 800486c:	463a      	mov	r2, r7
 800486e:	4621      	mov	r1, r4
 8004870:	4630      	mov	r0, r6
 8004872:	f7ff ffbc 	bl	80047ee <__sfputs_r>
 8004876:	3001      	adds	r0, #1
 8004878:	f000 80c2 	beq.w	8004a00 <_vfiprintf_r+0x1ec>
 800487c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800487e:	4453      	add	r3, sl
 8004880:	9309      	str	r3, [sp, #36]	; 0x24
 8004882:	f898 3000 	ldrb.w	r3, [r8]
 8004886:	2b00      	cmp	r3, #0
 8004888:	f000 80ba 	beq.w	8004a00 <_vfiprintf_r+0x1ec>
 800488c:	2300      	movs	r3, #0
 800488e:	f04f 32ff 	mov.w	r2, #4294967295
 8004892:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004896:	9304      	str	r3, [sp, #16]
 8004898:	9307      	str	r3, [sp, #28]
 800489a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800489e:	931a      	str	r3, [sp, #104]	; 0x68
 80048a0:	46a8      	mov	r8, r5
 80048a2:	2205      	movs	r2, #5
 80048a4:	f818 1b01 	ldrb.w	r1, [r8], #1
 80048a8:	485e      	ldr	r0, [pc, #376]	; (8004a24 <_vfiprintf_r+0x210>)
 80048aa:	f7fb fc91 	bl	80001d0 <memchr>
 80048ae:	9b04      	ldr	r3, [sp, #16]
 80048b0:	bb78      	cbnz	r0, 8004912 <_vfiprintf_r+0xfe>
 80048b2:	06d9      	lsls	r1, r3, #27
 80048b4:	bf44      	itt	mi
 80048b6:	2220      	movmi	r2, #32
 80048b8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80048bc:	071a      	lsls	r2, r3, #28
 80048be:	bf44      	itt	mi
 80048c0:	222b      	movmi	r2, #43	; 0x2b
 80048c2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80048c6:	782a      	ldrb	r2, [r5, #0]
 80048c8:	2a2a      	cmp	r2, #42	; 0x2a
 80048ca:	d02a      	beq.n	8004922 <_vfiprintf_r+0x10e>
 80048cc:	9a07      	ldr	r2, [sp, #28]
 80048ce:	46a8      	mov	r8, r5
 80048d0:	2000      	movs	r0, #0
 80048d2:	250a      	movs	r5, #10
 80048d4:	4641      	mov	r1, r8
 80048d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80048da:	3b30      	subs	r3, #48	; 0x30
 80048dc:	2b09      	cmp	r3, #9
 80048de:	d969      	bls.n	80049b4 <_vfiprintf_r+0x1a0>
 80048e0:	b360      	cbz	r0, 800493c <_vfiprintf_r+0x128>
 80048e2:	e024      	b.n	800492e <_vfiprintf_r+0x11a>
 80048e4:	4b50      	ldr	r3, [pc, #320]	; (8004a28 <_vfiprintf_r+0x214>)
 80048e6:	429c      	cmp	r4, r3
 80048e8:	d101      	bne.n	80048ee <_vfiprintf_r+0xda>
 80048ea:	68b4      	ldr	r4, [r6, #8]
 80048ec:	e7a2      	b.n	8004834 <_vfiprintf_r+0x20>
 80048ee:	4b4f      	ldr	r3, [pc, #316]	; (8004a2c <_vfiprintf_r+0x218>)
 80048f0:	429c      	cmp	r4, r3
 80048f2:	bf08      	it	eq
 80048f4:	68f4      	ldreq	r4, [r6, #12]
 80048f6:	e79d      	b.n	8004834 <_vfiprintf_r+0x20>
 80048f8:	4621      	mov	r1, r4
 80048fa:	4630      	mov	r0, r6
 80048fc:	f000 fae0 	bl	8004ec0 <__swsetup_r>
 8004900:	2800      	cmp	r0, #0
 8004902:	d09d      	beq.n	8004840 <_vfiprintf_r+0x2c>
 8004904:	f04f 30ff 	mov.w	r0, #4294967295
 8004908:	b01d      	add	sp, #116	; 0x74
 800490a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800490e:	46a8      	mov	r8, r5
 8004910:	e7a2      	b.n	8004858 <_vfiprintf_r+0x44>
 8004912:	4a44      	ldr	r2, [pc, #272]	; (8004a24 <_vfiprintf_r+0x210>)
 8004914:	1a80      	subs	r0, r0, r2
 8004916:	fa0b f000 	lsl.w	r0, fp, r0
 800491a:	4318      	orrs	r0, r3
 800491c:	9004      	str	r0, [sp, #16]
 800491e:	4645      	mov	r5, r8
 8004920:	e7be      	b.n	80048a0 <_vfiprintf_r+0x8c>
 8004922:	9a03      	ldr	r2, [sp, #12]
 8004924:	1d11      	adds	r1, r2, #4
 8004926:	6812      	ldr	r2, [r2, #0]
 8004928:	9103      	str	r1, [sp, #12]
 800492a:	2a00      	cmp	r2, #0
 800492c:	db01      	blt.n	8004932 <_vfiprintf_r+0x11e>
 800492e:	9207      	str	r2, [sp, #28]
 8004930:	e004      	b.n	800493c <_vfiprintf_r+0x128>
 8004932:	4252      	negs	r2, r2
 8004934:	f043 0302 	orr.w	r3, r3, #2
 8004938:	9207      	str	r2, [sp, #28]
 800493a:	9304      	str	r3, [sp, #16]
 800493c:	f898 3000 	ldrb.w	r3, [r8]
 8004940:	2b2e      	cmp	r3, #46	; 0x2e
 8004942:	d10e      	bne.n	8004962 <_vfiprintf_r+0x14e>
 8004944:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004948:	2b2a      	cmp	r3, #42	; 0x2a
 800494a:	d138      	bne.n	80049be <_vfiprintf_r+0x1aa>
 800494c:	9b03      	ldr	r3, [sp, #12]
 800494e:	1d1a      	adds	r2, r3, #4
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	9203      	str	r2, [sp, #12]
 8004954:	2b00      	cmp	r3, #0
 8004956:	bfb8      	it	lt
 8004958:	f04f 33ff 	movlt.w	r3, #4294967295
 800495c:	f108 0802 	add.w	r8, r8, #2
 8004960:	9305      	str	r3, [sp, #20]
 8004962:	4d33      	ldr	r5, [pc, #204]	; (8004a30 <_vfiprintf_r+0x21c>)
 8004964:	f898 1000 	ldrb.w	r1, [r8]
 8004968:	2203      	movs	r2, #3
 800496a:	4628      	mov	r0, r5
 800496c:	f7fb fc30 	bl	80001d0 <memchr>
 8004970:	b140      	cbz	r0, 8004984 <_vfiprintf_r+0x170>
 8004972:	2340      	movs	r3, #64	; 0x40
 8004974:	1b40      	subs	r0, r0, r5
 8004976:	fa03 f000 	lsl.w	r0, r3, r0
 800497a:	9b04      	ldr	r3, [sp, #16]
 800497c:	4303      	orrs	r3, r0
 800497e:	f108 0801 	add.w	r8, r8, #1
 8004982:	9304      	str	r3, [sp, #16]
 8004984:	f898 1000 	ldrb.w	r1, [r8]
 8004988:	482a      	ldr	r0, [pc, #168]	; (8004a34 <_vfiprintf_r+0x220>)
 800498a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800498e:	2206      	movs	r2, #6
 8004990:	f108 0701 	add.w	r7, r8, #1
 8004994:	f7fb fc1c 	bl	80001d0 <memchr>
 8004998:	2800      	cmp	r0, #0
 800499a:	d037      	beq.n	8004a0c <_vfiprintf_r+0x1f8>
 800499c:	4b26      	ldr	r3, [pc, #152]	; (8004a38 <_vfiprintf_r+0x224>)
 800499e:	bb1b      	cbnz	r3, 80049e8 <_vfiprintf_r+0x1d4>
 80049a0:	9b03      	ldr	r3, [sp, #12]
 80049a2:	3307      	adds	r3, #7
 80049a4:	f023 0307 	bic.w	r3, r3, #7
 80049a8:	3308      	adds	r3, #8
 80049aa:	9303      	str	r3, [sp, #12]
 80049ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049ae:	444b      	add	r3, r9
 80049b0:	9309      	str	r3, [sp, #36]	; 0x24
 80049b2:	e750      	b.n	8004856 <_vfiprintf_r+0x42>
 80049b4:	fb05 3202 	mla	r2, r5, r2, r3
 80049b8:	2001      	movs	r0, #1
 80049ba:	4688      	mov	r8, r1
 80049bc:	e78a      	b.n	80048d4 <_vfiprintf_r+0xc0>
 80049be:	2300      	movs	r3, #0
 80049c0:	f108 0801 	add.w	r8, r8, #1
 80049c4:	9305      	str	r3, [sp, #20]
 80049c6:	4619      	mov	r1, r3
 80049c8:	250a      	movs	r5, #10
 80049ca:	4640      	mov	r0, r8
 80049cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80049d0:	3a30      	subs	r2, #48	; 0x30
 80049d2:	2a09      	cmp	r2, #9
 80049d4:	d903      	bls.n	80049de <_vfiprintf_r+0x1ca>
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d0c3      	beq.n	8004962 <_vfiprintf_r+0x14e>
 80049da:	9105      	str	r1, [sp, #20]
 80049dc:	e7c1      	b.n	8004962 <_vfiprintf_r+0x14e>
 80049de:	fb05 2101 	mla	r1, r5, r1, r2
 80049e2:	2301      	movs	r3, #1
 80049e4:	4680      	mov	r8, r0
 80049e6:	e7f0      	b.n	80049ca <_vfiprintf_r+0x1b6>
 80049e8:	ab03      	add	r3, sp, #12
 80049ea:	9300      	str	r3, [sp, #0]
 80049ec:	4622      	mov	r2, r4
 80049ee:	4b13      	ldr	r3, [pc, #76]	; (8004a3c <_vfiprintf_r+0x228>)
 80049f0:	a904      	add	r1, sp, #16
 80049f2:	4630      	mov	r0, r6
 80049f4:	f3af 8000 	nop.w
 80049f8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80049fc:	4681      	mov	r9, r0
 80049fe:	d1d5      	bne.n	80049ac <_vfiprintf_r+0x198>
 8004a00:	89a3      	ldrh	r3, [r4, #12]
 8004a02:	065b      	lsls	r3, r3, #25
 8004a04:	f53f af7e 	bmi.w	8004904 <_vfiprintf_r+0xf0>
 8004a08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a0a:	e77d      	b.n	8004908 <_vfiprintf_r+0xf4>
 8004a0c:	ab03      	add	r3, sp, #12
 8004a0e:	9300      	str	r3, [sp, #0]
 8004a10:	4622      	mov	r2, r4
 8004a12:	4b0a      	ldr	r3, [pc, #40]	; (8004a3c <_vfiprintf_r+0x228>)
 8004a14:	a904      	add	r1, sp, #16
 8004a16:	4630      	mov	r0, r6
 8004a18:	f000 f888 	bl	8004b2c <_printf_i>
 8004a1c:	e7ec      	b.n	80049f8 <_vfiprintf_r+0x1e4>
 8004a1e:	bf00      	nop
 8004a20:	080053b0 	.word	0x080053b0
 8004a24:	080053f0 	.word	0x080053f0
 8004a28:	080053d0 	.word	0x080053d0
 8004a2c:	08005390 	.word	0x08005390
 8004a30:	080053f6 	.word	0x080053f6
 8004a34:	080053fa 	.word	0x080053fa
 8004a38:	00000000 	.word	0x00000000
 8004a3c:	080047ef 	.word	0x080047ef

08004a40 <_printf_common>:
 8004a40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a44:	4691      	mov	r9, r2
 8004a46:	461f      	mov	r7, r3
 8004a48:	688a      	ldr	r2, [r1, #8]
 8004a4a:	690b      	ldr	r3, [r1, #16]
 8004a4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a50:	4293      	cmp	r3, r2
 8004a52:	bfb8      	it	lt
 8004a54:	4613      	movlt	r3, r2
 8004a56:	f8c9 3000 	str.w	r3, [r9]
 8004a5a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a5e:	4606      	mov	r6, r0
 8004a60:	460c      	mov	r4, r1
 8004a62:	b112      	cbz	r2, 8004a6a <_printf_common+0x2a>
 8004a64:	3301      	adds	r3, #1
 8004a66:	f8c9 3000 	str.w	r3, [r9]
 8004a6a:	6823      	ldr	r3, [r4, #0]
 8004a6c:	0699      	lsls	r1, r3, #26
 8004a6e:	bf42      	ittt	mi
 8004a70:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004a74:	3302      	addmi	r3, #2
 8004a76:	f8c9 3000 	strmi.w	r3, [r9]
 8004a7a:	6825      	ldr	r5, [r4, #0]
 8004a7c:	f015 0506 	ands.w	r5, r5, #6
 8004a80:	d107      	bne.n	8004a92 <_printf_common+0x52>
 8004a82:	f104 0a19 	add.w	sl, r4, #25
 8004a86:	68e3      	ldr	r3, [r4, #12]
 8004a88:	f8d9 2000 	ldr.w	r2, [r9]
 8004a8c:	1a9b      	subs	r3, r3, r2
 8004a8e:	42ab      	cmp	r3, r5
 8004a90:	dc28      	bgt.n	8004ae4 <_printf_common+0xa4>
 8004a92:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004a96:	6822      	ldr	r2, [r4, #0]
 8004a98:	3300      	adds	r3, #0
 8004a9a:	bf18      	it	ne
 8004a9c:	2301      	movne	r3, #1
 8004a9e:	0692      	lsls	r2, r2, #26
 8004aa0:	d42d      	bmi.n	8004afe <_printf_common+0xbe>
 8004aa2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004aa6:	4639      	mov	r1, r7
 8004aa8:	4630      	mov	r0, r6
 8004aaa:	47c0      	blx	r8
 8004aac:	3001      	adds	r0, #1
 8004aae:	d020      	beq.n	8004af2 <_printf_common+0xb2>
 8004ab0:	6823      	ldr	r3, [r4, #0]
 8004ab2:	68e5      	ldr	r5, [r4, #12]
 8004ab4:	f8d9 2000 	ldr.w	r2, [r9]
 8004ab8:	f003 0306 	and.w	r3, r3, #6
 8004abc:	2b04      	cmp	r3, #4
 8004abe:	bf08      	it	eq
 8004ac0:	1aad      	subeq	r5, r5, r2
 8004ac2:	68a3      	ldr	r3, [r4, #8]
 8004ac4:	6922      	ldr	r2, [r4, #16]
 8004ac6:	bf0c      	ite	eq
 8004ac8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004acc:	2500      	movne	r5, #0
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	bfc4      	itt	gt
 8004ad2:	1a9b      	subgt	r3, r3, r2
 8004ad4:	18ed      	addgt	r5, r5, r3
 8004ad6:	f04f 0900 	mov.w	r9, #0
 8004ada:	341a      	adds	r4, #26
 8004adc:	454d      	cmp	r5, r9
 8004ade:	d11a      	bne.n	8004b16 <_printf_common+0xd6>
 8004ae0:	2000      	movs	r0, #0
 8004ae2:	e008      	b.n	8004af6 <_printf_common+0xb6>
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	4652      	mov	r2, sl
 8004ae8:	4639      	mov	r1, r7
 8004aea:	4630      	mov	r0, r6
 8004aec:	47c0      	blx	r8
 8004aee:	3001      	adds	r0, #1
 8004af0:	d103      	bne.n	8004afa <_printf_common+0xba>
 8004af2:	f04f 30ff 	mov.w	r0, #4294967295
 8004af6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004afa:	3501      	adds	r5, #1
 8004afc:	e7c3      	b.n	8004a86 <_printf_common+0x46>
 8004afe:	18e1      	adds	r1, r4, r3
 8004b00:	1c5a      	adds	r2, r3, #1
 8004b02:	2030      	movs	r0, #48	; 0x30
 8004b04:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b08:	4422      	add	r2, r4
 8004b0a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b0e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b12:	3302      	adds	r3, #2
 8004b14:	e7c5      	b.n	8004aa2 <_printf_common+0x62>
 8004b16:	2301      	movs	r3, #1
 8004b18:	4622      	mov	r2, r4
 8004b1a:	4639      	mov	r1, r7
 8004b1c:	4630      	mov	r0, r6
 8004b1e:	47c0      	blx	r8
 8004b20:	3001      	adds	r0, #1
 8004b22:	d0e6      	beq.n	8004af2 <_printf_common+0xb2>
 8004b24:	f109 0901 	add.w	r9, r9, #1
 8004b28:	e7d8      	b.n	8004adc <_printf_common+0x9c>
	...

08004b2c <_printf_i>:
 8004b2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004b30:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004b34:	460c      	mov	r4, r1
 8004b36:	7e09      	ldrb	r1, [r1, #24]
 8004b38:	b085      	sub	sp, #20
 8004b3a:	296e      	cmp	r1, #110	; 0x6e
 8004b3c:	4617      	mov	r7, r2
 8004b3e:	4606      	mov	r6, r0
 8004b40:	4698      	mov	r8, r3
 8004b42:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004b44:	f000 80b3 	beq.w	8004cae <_printf_i+0x182>
 8004b48:	d822      	bhi.n	8004b90 <_printf_i+0x64>
 8004b4a:	2963      	cmp	r1, #99	; 0x63
 8004b4c:	d036      	beq.n	8004bbc <_printf_i+0x90>
 8004b4e:	d80a      	bhi.n	8004b66 <_printf_i+0x3a>
 8004b50:	2900      	cmp	r1, #0
 8004b52:	f000 80b9 	beq.w	8004cc8 <_printf_i+0x19c>
 8004b56:	2958      	cmp	r1, #88	; 0x58
 8004b58:	f000 8083 	beq.w	8004c62 <_printf_i+0x136>
 8004b5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b60:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004b64:	e032      	b.n	8004bcc <_printf_i+0xa0>
 8004b66:	2964      	cmp	r1, #100	; 0x64
 8004b68:	d001      	beq.n	8004b6e <_printf_i+0x42>
 8004b6a:	2969      	cmp	r1, #105	; 0x69
 8004b6c:	d1f6      	bne.n	8004b5c <_printf_i+0x30>
 8004b6e:	6820      	ldr	r0, [r4, #0]
 8004b70:	6813      	ldr	r3, [r2, #0]
 8004b72:	0605      	lsls	r5, r0, #24
 8004b74:	f103 0104 	add.w	r1, r3, #4
 8004b78:	d52a      	bpl.n	8004bd0 <_printf_i+0xa4>
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	6011      	str	r1, [r2, #0]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	da03      	bge.n	8004b8a <_printf_i+0x5e>
 8004b82:	222d      	movs	r2, #45	; 0x2d
 8004b84:	425b      	negs	r3, r3
 8004b86:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004b8a:	486f      	ldr	r0, [pc, #444]	; (8004d48 <_printf_i+0x21c>)
 8004b8c:	220a      	movs	r2, #10
 8004b8e:	e039      	b.n	8004c04 <_printf_i+0xd8>
 8004b90:	2973      	cmp	r1, #115	; 0x73
 8004b92:	f000 809d 	beq.w	8004cd0 <_printf_i+0x1a4>
 8004b96:	d808      	bhi.n	8004baa <_printf_i+0x7e>
 8004b98:	296f      	cmp	r1, #111	; 0x6f
 8004b9a:	d020      	beq.n	8004bde <_printf_i+0xb2>
 8004b9c:	2970      	cmp	r1, #112	; 0x70
 8004b9e:	d1dd      	bne.n	8004b5c <_printf_i+0x30>
 8004ba0:	6823      	ldr	r3, [r4, #0]
 8004ba2:	f043 0320 	orr.w	r3, r3, #32
 8004ba6:	6023      	str	r3, [r4, #0]
 8004ba8:	e003      	b.n	8004bb2 <_printf_i+0x86>
 8004baa:	2975      	cmp	r1, #117	; 0x75
 8004bac:	d017      	beq.n	8004bde <_printf_i+0xb2>
 8004bae:	2978      	cmp	r1, #120	; 0x78
 8004bb0:	d1d4      	bne.n	8004b5c <_printf_i+0x30>
 8004bb2:	2378      	movs	r3, #120	; 0x78
 8004bb4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004bb8:	4864      	ldr	r0, [pc, #400]	; (8004d4c <_printf_i+0x220>)
 8004bba:	e055      	b.n	8004c68 <_printf_i+0x13c>
 8004bbc:	6813      	ldr	r3, [r2, #0]
 8004bbe:	1d19      	adds	r1, r3, #4
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	6011      	str	r1, [r2, #0]
 8004bc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004bc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e08c      	b.n	8004cea <_printf_i+0x1be>
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	6011      	str	r1, [r2, #0]
 8004bd4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004bd8:	bf18      	it	ne
 8004bda:	b21b      	sxthne	r3, r3
 8004bdc:	e7cf      	b.n	8004b7e <_printf_i+0x52>
 8004bde:	6813      	ldr	r3, [r2, #0]
 8004be0:	6825      	ldr	r5, [r4, #0]
 8004be2:	1d18      	adds	r0, r3, #4
 8004be4:	6010      	str	r0, [r2, #0]
 8004be6:	0628      	lsls	r0, r5, #24
 8004be8:	d501      	bpl.n	8004bee <_printf_i+0xc2>
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	e002      	b.n	8004bf4 <_printf_i+0xc8>
 8004bee:	0668      	lsls	r0, r5, #25
 8004bf0:	d5fb      	bpl.n	8004bea <_printf_i+0xbe>
 8004bf2:	881b      	ldrh	r3, [r3, #0]
 8004bf4:	4854      	ldr	r0, [pc, #336]	; (8004d48 <_printf_i+0x21c>)
 8004bf6:	296f      	cmp	r1, #111	; 0x6f
 8004bf8:	bf14      	ite	ne
 8004bfa:	220a      	movne	r2, #10
 8004bfc:	2208      	moveq	r2, #8
 8004bfe:	2100      	movs	r1, #0
 8004c00:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c04:	6865      	ldr	r5, [r4, #4]
 8004c06:	60a5      	str	r5, [r4, #8]
 8004c08:	2d00      	cmp	r5, #0
 8004c0a:	f2c0 8095 	blt.w	8004d38 <_printf_i+0x20c>
 8004c0e:	6821      	ldr	r1, [r4, #0]
 8004c10:	f021 0104 	bic.w	r1, r1, #4
 8004c14:	6021      	str	r1, [r4, #0]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d13d      	bne.n	8004c96 <_printf_i+0x16a>
 8004c1a:	2d00      	cmp	r5, #0
 8004c1c:	f040 808e 	bne.w	8004d3c <_printf_i+0x210>
 8004c20:	4665      	mov	r5, ip
 8004c22:	2a08      	cmp	r2, #8
 8004c24:	d10b      	bne.n	8004c3e <_printf_i+0x112>
 8004c26:	6823      	ldr	r3, [r4, #0]
 8004c28:	07db      	lsls	r3, r3, #31
 8004c2a:	d508      	bpl.n	8004c3e <_printf_i+0x112>
 8004c2c:	6923      	ldr	r3, [r4, #16]
 8004c2e:	6862      	ldr	r2, [r4, #4]
 8004c30:	429a      	cmp	r2, r3
 8004c32:	bfde      	ittt	le
 8004c34:	2330      	movle	r3, #48	; 0x30
 8004c36:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004c3a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004c3e:	ebac 0305 	sub.w	r3, ip, r5
 8004c42:	6123      	str	r3, [r4, #16]
 8004c44:	f8cd 8000 	str.w	r8, [sp]
 8004c48:	463b      	mov	r3, r7
 8004c4a:	aa03      	add	r2, sp, #12
 8004c4c:	4621      	mov	r1, r4
 8004c4e:	4630      	mov	r0, r6
 8004c50:	f7ff fef6 	bl	8004a40 <_printf_common>
 8004c54:	3001      	adds	r0, #1
 8004c56:	d14d      	bne.n	8004cf4 <_printf_i+0x1c8>
 8004c58:	f04f 30ff 	mov.w	r0, #4294967295
 8004c5c:	b005      	add	sp, #20
 8004c5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004c62:	4839      	ldr	r0, [pc, #228]	; (8004d48 <_printf_i+0x21c>)
 8004c64:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004c68:	6813      	ldr	r3, [r2, #0]
 8004c6a:	6821      	ldr	r1, [r4, #0]
 8004c6c:	1d1d      	adds	r5, r3, #4
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	6015      	str	r5, [r2, #0]
 8004c72:	060a      	lsls	r2, r1, #24
 8004c74:	d50b      	bpl.n	8004c8e <_printf_i+0x162>
 8004c76:	07ca      	lsls	r2, r1, #31
 8004c78:	bf44      	itt	mi
 8004c7a:	f041 0120 	orrmi.w	r1, r1, #32
 8004c7e:	6021      	strmi	r1, [r4, #0]
 8004c80:	b91b      	cbnz	r3, 8004c8a <_printf_i+0x15e>
 8004c82:	6822      	ldr	r2, [r4, #0]
 8004c84:	f022 0220 	bic.w	r2, r2, #32
 8004c88:	6022      	str	r2, [r4, #0]
 8004c8a:	2210      	movs	r2, #16
 8004c8c:	e7b7      	b.n	8004bfe <_printf_i+0xd2>
 8004c8e:	064d      	lsls	r5, r1, #25
 8004c90:	bf48      	it	mi
 8004c92:	b29b      	uxthmi	r3, r3
 8004c94:	e7ef      	b.n	8004c76 <_printf_i+0x14a>
 8004c96:	4665      	mov	r5, ip
 8004c98:	fbb3 f1f2 	udiv	r1, r3, r2
 8004c9c:	fb02 3311 	mls	r3, r2, r1, r3
 8004ca0:	5cc3      	ldrb	r3, [r0, r3]
 8004ca2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004ca6:	460b      	mov	r3, r1
 8004ca8:	2900      	cmp	r1, #0
 8004caa:	d1f5      	bne.n	8004c98 <_printf_i+0x16c>
 8004cac:	e7b9      	b.n	8004c22 <_printf_i+0xf6>
 8004cae:	6813      	ldr	r3, [r2, #0]
 8004cb0:	6825      	ldr	r5, [r4, #0]
 8004cb2:	6961      	ldr	r1, [r4, #20]
 8004cb4:	1d18      	adds	r0, r3, #4
 8004cb6:	6010      	str	r0, [r2, #0]
 8004cb8:	0628      	lsls	r0, r5, #24
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	d501      	bpl.n	8004cc2 <_printf_i+0x196>
 8004cbe:	6019      	str	r1, [r3, #0]
 8004cc0:	e002      	b.n	8004cc8 <_printf_i+0x19c>
 8004cc2:	066a      	lsls	r2, r5, #25
 8004cc4:	d5fb      	bpl.n	8004cbe <_printf_i+0x192>
 8004cc6:	8019      	strh	r1, [r3, #0]
 8004cc8:	2300      	movs	r3, #0
 8004cca:	6123      	str	r3, [r4, #16]
 8004ccc:	4665      	mov	r5, ip
 8004cce:	e7b9      	b.n	8004c44 <_printf_i+0x118>
 8004cd0:	6813      	ldr	r3, [r2, #0]
 8004cd2:	1d19      	adds	r1, r3, #4
 8004cd4:	6011      	str	r1, [r2, #0]
 8004cd6:	681d      	ldr	r5, [r3, #0]
 8004cd8:	6862      	ldr	r2, [r4, #4]
 8004cda:	2100      	movs	r1, #0
 8004cdc:	4628      	mov	r0, r5
 8004cde:	f7fb fa77 	bl	80001d0 <memchr>
 8004ce2:	b108      	cbz	r0, 8004ce8 <_printf_i+0x1bc>
 8004ce4:	1b40      	subs	r0, r0, r5
 8004ce6:	6060      	str	r0, [r4, #4]
 8004ce8:	6863      	ldr	r3, [r4, #4]
 8004cea:	6123      	str	r3, [r4, #16]
 8004cec:	2300      	movs	r3, #0
 8004cee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cf2:	e7a7      	b.n	8004c44 <_printf_i+0x118>
 8004cf4:	6923      	ldr	r3, [r4, #16]
 8004cf6:	462a      	mov	r2, r5
 8004cf8:	4639      	mov	r1, r7
 8004cfa:	4630      	mov	r0, r6
 8004cfc:	47c0      	blx	r8
 8004cfe:	3001      	adds	r0, #1
 8004d00:	d0aa      	beq.n	8004c58 <_printf_i+0x12c>
 8004d02:	6823      	ldr	r3, [r4, #0]
 8004d04:	079b      	lsls	r3, r3, #30
 8004d06:	d413      	bmi.n	8004d30 <_printf_i+0x204>
 8004d08:	68e0      	ldr	r0, [r4, #12]
 8004d0a:	9b03      	ldr	r3, [sp, #12]
 8004d0c:	4298      	cmp	r0, r3
 8004d0e:	bfb8      	it	lt
 8004d10:	4618      	movlt	r0, r3
 8004d12:	e7a3      	b.n	8004c5c <_printf_i+0x130>
 8004d14:	2301      	movs	r3, #1
 8004d16:	464a      	mov	r2, r9
 8004d18:	4639      	mov	r1, r7
 8004d1a:	4630      	mov	r0, r6
 8004d1c:	47c0      	blx	r8
 8004d1e:	3001      	adds	r0, #1
 8004d20:	d09a      	beq.n	8004c58 <_printf_i+0x12c>
 8004d22:	3501      	adds	r5, #1
 8004d24:	68e3      	ldr	r3, [r4, #12]
 8004d26:	9a03      	ldr	r2, [sp, #12]
 8004d28:	1a9b      	subs	r3, r3, r2
 8004d2a:	42ab      	cmp	r3, r5
 8004d2c:	dcf2      	bgt.n	8004d14 <_printf_i+0x1e8>
 8004d2e:	e7eb      	b.n	8004d08 <_printf_i+0x1dc>
 8004d30:	2500      	movs	r5, #0
 8004d32:	f104 0919 	add.w	r9, r4, #25
 8004d36:	e7f5      	b.n	8004d24 <_printf_i+0x1f8>
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d1ac      	bne.n	8004c96 <_printf_i+0x16a>
 8004d3c:	7803      	ldrb	r3, [r0, #0]
 8004d3e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d42:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d46:	e76c      	b.n	8004c22 <_printf_i+0xf6>
 8004d48:	08005401 	.word	0x08005401
 8004d4c:	08005412 	.word	0x08005412

08004d50 <_sbrk_r>:
 8004d50:	b538      	push	{r3, r4, r5, lr}
 8004d52:	4c06      	ldr	r4, [pc, #24]	; (8004d6c <_sbrk_r+0x1c>)
 8004d54:	2300      	movs	r3, #0
 8004d56:	4605      	mov	r5, r0
 8004d58:	4608      	mov	r0, r1
 8004d5a:	6023      	str	r3, [r4, #0]
 8004d5c:	f7fb ff32 	bl	8000bc4 <_sbrk>
 8004d60:	1c43      	adds	r3, r0, #1
 8004d62:	d102      	bne.n	8004d6a <_sbrk_r+0x1a>
 8004d64:	6823      	ldr	r3, [r4, #0]
 8004d66:	b103      	cbz	r3, 8004d6a <_sbrk_r+0x1a>
 8004d68:	602b      	str	r3, [r5, #0]
 8004d6a:	bd38      	pop	{r3, r4, r5, pc}
 8004d6c:	200001c8 	.word	0x200001c8

08004d70 <__sread>:
 8004d70:	b510      	push	{r4, lr}
 8004d72:	460c      	mov	r4, r1
 8004d74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d78:	f000 fa96 	bl	80052a8 <_read_r>
 8004d7c:	2800      	cmp	r0, #0
 8004d7e:	bfab      	itete	ge
 8004d80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004d82:	89a3      	ldrhlt	r3, [r4, #12]
 8004d84:	181b      	addge	r3, r3, r0
 8004d86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004d8a:	bfac      	ite	ge
 8004d8c:	6563      	strge	r3, [r4, #84]	; 0x54
 8004d8e:	81a3      	strhlt	r3, [r4, #12]
 8004d90:	bd10      	pop	{r4, pc}

08004d92 <__swrite>:
 8004d92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d96:	461f      	mov	r7, r3
 8004d98:	898b      	ldrh	r3, [r1, #12]
 8004d9a:	05db      	lsls	r3, r3, #23
 8004d9c:	4605      	mov	r5, r0
 8004d9e:	460c      	mov	r4, r1
 8004da0:	4616      	mov	r6, r2
 8004da2:	d505      	bpl.n	8004db0 <__swrite+0x1e>
 8004da4:	2302      	movs	r3, #2
 8004da6:	2200      	movs	r2, #0
 8004da8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dac:	f000 f9b6 	bl	800511c <_lseek_r>
 8004db0:	89a3      	ldrh	r3, [r4, #12]
 8004db2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004db6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004dba:	81a3      	strh	r3, [r4, #12]
 8004dbc:	4632      	mov	r2, r6
 8004dbe:	463b      	mov	r3, r7
 8004dc0:	4628      	mov	r0, r5
 8004dc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004dc6:	f000 b869 	b.w	8004e9c <_write_r>

08004dca <__sseek>:
 8004dca:	b510      	push	{r4, lr}
 8004dcc:	460c      	mov	r4, r1
 8004dce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dd2:	f000 f9a3 	bl	800511c <_lseek_r>
 8004dd6:	1c43      	adds	r3, r0, #1
 8004dd8:	89a3      	ldrh	r3, [r4, #12]
 8004dda:	bf15      	itete	ne
 8004ddc:	6560      	strne	r0, [r4, #84]	; 0x54
 8004dde:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004de2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004de6:	81a3      	strheq	r3, [r4, #12]
 8004de8:	bf18      	it	ne
 8004dea:	81a3      	strhne	r3, [r4, #12]
 8004dec:	bd10      	pop	{r4, pc}

08004dee <__sclose>:
 8004dee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004df2:	f000 b8d3 	b.w	8004f9c <_close_r>
	...

08004df8 <__swbuf_r>:
 8004df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dfa:	460e      	mov	r6, r1
 8004dfc:	4614      	mov	r4, r2
 8004dfe:	4605      	mov	r5, r0
 8004e00:	b118      	cbz	r0, 8004e0a <__swbuf_r+0x12>
 8004e02:	6983      	ldr	r3, [r0, #24]
 8004e04:	b90b      	cbnz	r3, 8004e0a <__swbuf_r+0x12>
 8004e06:	f7ff fbf7 	bl	80045f8 <__sinit>
 8004e0a:	4b21      	ldr	r3, [pc, #132]	; (8004e90 <__swbuf_r+0x98>)
 8004e0c:	429c      	cmp	r4, r3
 8004e0e:	d12a      	bne.n	8004e66 <__swbuf_r+0x6e>
 8004e10:	686c      	ldr	r4, [r5, #4]
 8004e12:	69a3      	ldr	r3, [r4, #24]
 8004e14:	60a3      	str	r3, [r4, #8]
 8004e16:	89a3      	ldrh	r3, [r4, #12]
 8004e18:	071a      	lsls	r2, r3, #28
 8004e1a:	d52e      	bpl.n	8004e7a <__swbuf_r+0x82>
 8004e1c:	6923      	ldr	r3, [r4, #16]
 8004e1e:	b363      	cbz	r3, 8004e7a <__swbuf_r+0x82>
 8004e20:	6923      	ldr	r3, [r4, #16]
 8004e22:	6820      	ldr	r0, [r4, #0]
 8004e24:	1ac0      	subs	r0, r0, r3
 8004e26:	6963      	ldr	r3, [r4, #20]
 8004e28:	b2f6      	uxtb	r6, r6
 8004e2a:	4283      	cmp	r3, r0
 8004e2c:	4637      	mov	r7, r6
 8004e2e:	dc04      	bgt.n	8004e3a <__swbuf_r+0x42>
 8004e30:	4621      	mov	r1, r4
 8004e32:	4628      	mov	r0, r5
 8004e34:	f000 f948 	bl	80050c8 <_fflush_r>
 8004e38:	bb28      	cbnz	r0, 8004e86 <__swbuf_r+0x8e>
 8004e3a:	68a3      	ldr	r3, [r4, #8]
 8004e3c:	3b01      	subs	r3, #1
 8004e3e:	60a3      	str	r3, [r4, #8]
 8004e40:	6823      	ldr	r3, [r4, #0]
 8004e42:	1c5a      	adds	r2, r3, #1
 8004e44:	6022      	str	r2, [r4, #0]
 8004e46:	701e      	strb	r6, [r3, #0]
 8004e48:	6963      	ldr	r3, [r4, #20]
 8004e4a:	3001      	adds	r0, #1
 8004e4c:	4283      	cmp	r3, r0
 8004e4e:	d004      	beq.n	8004e5a <__swbuf_r+0x62>
 8004e50:	89a3      	ldrh	r3, [r4, #12]
 8004e52:	07db      	lsls	r3, r3, #31
 8004e54:	d519      	bpl.n	8004e8a <__swbuf_r+0x92>
 8004e56:	2e0a      	cmp	r6, #10
 8004e58:	d117      	bne.n	8004e8a <__swbuf_r+0x92>
 8004e5a:	4621      	mov	r1, r4
 8004e5c:	4628      	mov	r0, r5
 8004e5e:	f000 f933 	bl	80050c8 <_fflush_r>
 8004e62:	b190      	cbz	r0, 8004e8a <__swbuf_r+0x92>
 8004e64:	e00f      	b.n	8004e86 <__swbuf_r+0x8e>
 8004e66:	4b0b      	ldr	r3, [pc, #44]	; (8004e94 <__swbuf_r+0x9c>)
 8004e68:	429c      	cmp	r4, r3
 8004e6a:	d101      	bne.n	8004e70 <__swbuf_r+0x78>
 8004e6c:	68ac      	ldr	r4, [r5, #8]
 8004e6e:	e7d0      	b.n	8004e12 <__swbuf_r+0x1a>
 8004e70:	4b09      	ldr	r3, [pc, #36]	; (8004e98 <__swbuf_r+0xa0>)
 8004e72:	429c      	cmp	r4, r3
 8004e74:	bf08      	it	eq
 8004e76:	68ec      	ldreq	r4, [r5, #12]
 8004e78:	e7cb      	b.n	8004e12 <__swbuf_r+0x1a>
 8004e7a:	4621      	mov	r1, r4
 8004e7c:	4628      	mov	r0, r5
 8004e7e:	f000 f81f 	bl	8004ec0 <__swsetup_r>
 8004e82:	2800      	cmp	r0, #0
 8004e84:	d0cc      	beq.n	8004e20 <__swbuf_r+0x28>
 8004e86:	f04f 37ff 	mov.w	r7, #4294967295
 8004e8a:	4638      	mov	r0, r7
 8004e8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e8e:	bf00      	nop
 8004e90:	080053b0 	.word	0x080053b0
 8004e94:	080053d0 	.word	0x080053d0
 8004e98:	08005390 	.word	0x08005390

08004e9c <_write_r>:
 8004e9c:	b538      	push	{r3, r4, r5, lr}
 8004e9e:	4c07      	ldr	r4, [pc, #28]	; (8004ebc <_write_r+0x20>)
 8004ea0:	4605      	mov	r5, r0
 8004ea2:	4608      	mov	r0, r1
 8004ea4:	4611      	mov	r1, r2
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	6022      	str	r2, [r4, #0]
 8004eaa:	461a      	mov	r2, r3
 8004eac:	f7fb fbd4 	bl	8000658 <_write>
 8004eb0:	1c43      	adds	r3, r0, #1
 8004eb2:	d102      	bne.n	8004eba <_write_r+0x1e>
 8004eb4:	6823      	ldr	r3, [r4, #0]
 8004eb6:	b103      	cbz	r3, 8004eba <_write_r+0x1e>
 8004eb8:	602b      	str	r3, [r5, #0]
 8004eba:	bd38      	pop	{r3, r4, r5, pc}
 8004ebc:	200001c8 	.word	0x200001c8

08004ec0 <__swsetup_r>:
 8004ec0:	4b32      	ldr	r3, [pc, #200]	; (8004f8c <__swsetup_r+0xcc>)
 8004ec2:	b570      	push	{r4, r5, r6, lr}
 8004ec4:	681d      	ldr	r5, [r3, #0]
 8004ec6:	4606      	mov	r6, r0
 8004ec8:	460c      	mov	r4, r1
 8004eca:	b125      	cbz	r5, 8004ed6 <__swsetup_r+0x16>
 8004ecc:	69ab      	ldr	r3, [r5, #24]
 8004ece:	b913      	cbnz	r3, 8004ed6 <__swsetup_r+0x16>
 8004ed0:	4628      	mov	r0, r5
 8004ed2:	f7ff fb91 	bl	80045f8 <__sinit>
 8004ed6:	4b2e      	ldr	r3, [pc, #184]	; (8004f90 <__swsetup_r+0xd0>)
 8004ed8:	429c      	cmp	r4, r3
 8004eda:	d10f      	bne.n	8004efc <__swsetup_r+0x3c>
 8004edc:	686c      	ldr	r4, [r5, #4]
 8004ede:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ee2:	b29a      	uxth	r2, r3
 8004ee4:	0715      	lsls	r5, r2, #28
 8004ee6:	d42c      	bmi.n	8004f42 <__swsetup_r+0x82>
 8004ee8:	06d0      	lsls	r0, r2, #27
 8004eea:	d411      	bmi.n	8004f10 <__swsetup_r+0x50>
 8004eec:	2209      	movs	r2, #9
 8004eee:	6032      	str	r2, [r6, #0]
 8004ef0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ef4:	81a3      	strh	r3, [r4, #12]
 8004ef6:	f04f 30ff 	mov.w	r0, #4294967295
 8004efa:	e03e      	b.n	8004f7a <__swsetup_r+0xba>
 8004efc:	4b25      	ldr	r3, [pc, #148]	; (8004f94 <__swsetup_r+0xd4>)
 8004efe:	429c      	cmp	r4, r3
 8004f00:	d101      	bne.n	8004f06 <__swsetup_r+0x46>
 8004f02:	68ac      	ldr	r4, [r5, #8]
 8004f04:	e7eb      	b.n	8004ede <__swsetup_r+0x1e>
 8004f06:	4b24      	ldr	r3, [pc, #144]	; (8004f98 <__swsetup_r+0xd8>)
 8004f08:	429c      	cmp	r4, r3
 8004f0a:	bf08      	it	eq
 8004f0c:	68ec      	ldreq	r4, [r5, #12]
 8004f0e:	e7e6      	b.n	8004ede <__swsetup_r+0x1e>
 8004f10:	0751      	lsls	r1, r2, #29
 8004f12:	d512      	bpl.n	8004f3a <__swsetup_r+0x7a>
 8004f14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f16:	b141      	cbz	r1, 8004f2a <__swsetup_r+0x6a>
 8004f18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004f1c:	4299      	cmp	r1, r3
 8004f1e:	d002      	beq.n	8004f26 <__swsetup_r+0x66>
 8004f20:	4630      	mov	r0, r6
 8004f22:	f000 f973 	bl	800520c <_free_r>
 8004f26:	2300      	movs	r3, #0
 8004f28:	6363      	str	r3, [r4, #52]	; 0x34
 8004f2a:	89a3      	ldrh	r3, [r4, #12]
 8004f2c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004f30:	81a3      	strh	r3, [r4, #12]
 8004f32:	2300      	movs	r3, #0
 8004f34:	6063      	str	r3, [r4, #4]
 8004f36:	6923      	ldr	r3, [r4, #16]
 8004f38:	6023      	str	r3, [r4, #0]
 8004f3a:	89a3      	ldrh	r3, [r4, #12]
 8004f3c:	f043 0308 	orr.w	r3, r3, #8
 8004f40:	81a3      	strh	r3, [r4, #12]
 8004f42:	6923      	ldr	r3, [r4, #16]
 8004f44:	b94b      	cbnz	r3, 8004f5a <__swsetup_r+0x9a>
 8004f46:	89a3      	ldrh	r3, [r4, #12]
 8004f48:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004f4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f50:	d003      	beq.n	8004f5a <__swsetup_r+0x9a>
 8004f52:	4621      	mov	r1, r4
 8004f54:	4630      	mov	r0, r6
 8004f56:	f000 f917 	bl	8005188 <__smakebuf_r>
 8004f5a:	89a2      	ldrh	r2, [r4, #12]
 8004f5c:	f012 0301 	ands.w	r3, r2, #1
 8004f60:	d00c      	beq.n	8004f7c <__swsetup_r+0xbc>
 8004f62:	2300      	movs	r3, #0
 8004f64:	60a3      	str	r3, [r4, #8]
 8004f66:	6963      	ldr	r3, [r4, #20]
 8004f68:	425b      	negs	r3, r3
 8004f6a:	61a3      	str	r3, [r4, #24]
 8004f6c:	6923      	ldr	r3, [r4, #16]
 8004f6e:	b953      	cbnz	r3, 8004f86 <__swsetup_r+0xc6>
 8004f70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f74:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004f78:	d1ba      	bne.n	8004ef0 <__swsetup_r+0x30>
 8004f7a:	bd70      	pop	{r4, r5, r6, pc}
 8004f7c:	0792      	lsls	r2, r2, #30
 8004f7e:	bf58      	it	pl
 8004f80:	6963      	ldrpl	r3, [r4, #20]
 8004f82:	60a3      	str	r3, [r4, #8]
 8004f84:	e7f2      	b.n	8004f6c <__swsetup_r+0xac>
 8004f86:	2000      	movs	r0, #0
 8004f88:	e7f7      	b.n	8004f7a <__swsetup_r+0xba>
 8004f8a:	bf00      	nop
 8004f8c:	2000000c 	.word	0x2000000c
 8004f90:	080053b0 	.word	0x080053b0
 8004f94:	080053d0 	.word	0x080053d0
 8004f98:	08005390 	.word	0x08005390

08004f9c <_close_r>:
 8004f9c:	b538      	push	{r3, r4, r5, lr}
 8004f9e:	4c06      	ldr	r4, [pc, #24]	; (8004fb8 <_close_r+0x1c>)
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	4605      	mov	r5, r0
 8004fa4:	4608      	mov	r0, r1
 8004fa6:	6023      	str	r3, [r4, #0]
 8004fa8:	f7fb fdd7 	bl	8000b5a <_close>
 8004fac:	1c43      	adds	r3, r0, #1
 8004fae:	d102      	bne.n	8004fb6 <_close_r+0x1a>
 8004fb0:	6823      	ldr	r3, [r4, #0]
 8004fb2:	b103      	cbz	r3, 8004fb6 <_close_r+0x1a>
 8004fb4:	602b      	str	r3, [r5, #0]
 8004fb6:	bd38      	pop	{r3, r4, r5, pc}
 8004fb8:	200001c8 	.word	0x200001c8

08004fbc <__sflush_r>:
 8004fbc:	898a      	ldrh	r2, [r1, #12]
 8004fbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fc2:	4605      	mov	r5, r0
 8004fc4:	0710      	lsls	r0, r2, #28
 8004fc6:	460c      	mov	r4, r1
 8004fc8:	d458      	bmi.n	800507c <__sflush_r+0xc0>
 8004fca:	684b      	ldr	r3, [r1, #4]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	dc05      	bgt.n	8004fdc <__sflush_r+0x20>
 8004fd0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	dc02      	bgt.n	8004fdc <__sflush_r+0x20>
 8004fd6:	2000      	movs	r0, #0
 8004fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fdc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004fde:	2e00      	cmp	r6, #0
 8004fe0:	d0f9      	beq.n	8004fd6 <__sflush_r+0x1a>
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004fe8:	682f      	ldr	r7, [r5, #0]
 8004fea:	6a21      	ldr	r1, [r4, #32]
 8004fec:	602b      	str	r3, [r5, #0]
 8004fee:	d032      	beq.n	8005056 <__sflush_r+0x9a>
 8004ff0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004ff2:	89a3      	ldrh	r3, [r4, #12]
 8004ff4:	075a      	lsls	r2, r3, #29
 8004ff6:	d505      	bpl.n	8005004 <__sflush_r+0x48>
 8004ff8:	6863      	ldr	r3, [r4, #4]
 8004ffa:	1ac0      	subs	r0, r0, r3
 8004ffc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004ffe:	b10b      	cbz	r3, 8005004 <__sflush_r+0x48>
 8005000:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005002:	1ac0      	subs	r0, r0, r3
 8005004:	2300      	movs	r3, #0
 8005006:	4602      	mov	r2, r0
 8005008:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800500a:	6a21      	ldr	r1, [r4, #32]
 800500c:	4628      	mov	r0, r5
 800500e:	47b0      	blx	r6
 8005010:	1c43      	adds	r3, r0, #1
 8005012:	89a3      	ldrh	r3, [r4, #12]
 8005014:	d106      	bne.n	8005024 <__sflush_r+0x68>
 8005016:	6829      	ldr	r1, [r5, #0]
 8005018:	291d      	cmp	r1, #29
 800501a:	d848      	bhi.n	80050ae <__sflush_r+0xf2>
 800501c:	4a29      	ldr	r2, [pc, #164]	; (80050c4 <__sflush_r+0x108>)
 800501e:	40ca      	lsrs	r2, r1
 8005020:	07d6      	lsls	r6, r2, #31
 8005022:	d544      	bpl.n	80050ae <__sflush_r+0xf2>
 8005024:	2200      	movs	r2, #0
 8005026:	6062      	str	r2, [r4, #4]
 8005028:	04d9      	lsls	r1, r3, #19
 800502a:	6922      	ldr	r2, [r4, #16]
 800502c:	6022      	str	r2, [r4, #0]
 800502e:	d504      	bpl.n	800503a <__sflush_r+0x7e>
 8005030:	1c42      	adds	r2, r0, #1
 8005032:	d101      	bne.n	8005038 <__sflush_r+0x7c>
 8005034:	682b      	ldr	r3, [r5, #0]
 8005036:	b903      	cbnz	r3, 800503a <__sflush_r+0x7e>
 8005038:	6560      	str	r0, [r4, #84]	; 0x54
 800503a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800503c:	602f      	str	r7, [r5, #0]
 800503e:	2900      	cmp	r1, #0
 8005040:	d0c9      	beq.n	8004fd6 <__sflush_r+0x1a>
 8005042:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005046:	4299      	cmp	r1, r3
 8005048:	d002      	beq.n	8005050 <__sflush_r+0x94>
 800504a:	4628      	mov	r0, r5
 800504c:	f000 f8de 	bl	800520c <_free_r>
 8005050:	2000      	movs	r0, #0
 8005052:	6360      	str	r0, [r4, #52]	; 0x34
 8005054:	e7c0      	b.n	8004fd8 <__sflush_r+0x1c>
 8005056:	2301      	movs	r3, #1
 8005058:	4628      	mov	r0, r5
 800505a:	47b0      	blx	r6
 800505c:	1c41      	adds	r1, r0, #1
 800505e:	d1c8      	bne.n	8004ff2 <__sflush_r+0x36>
 8005060:	682b      	ldr	r3, [r5, #0]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d0c5      	beq.n	8004ff2 <__sflush_r+0x36>
 8005066:	2b1d      	cmp	r3, #29
 8005068:	d001      	beq.n	800506e <__sflush_r+0xb2>
 800506a:	2b16      	cmp	r3, #22
 800506c:	d101      	bne.n	8005072 <__sflush_r+0xb6>
 800506e:	602f      	str	r7, [r5, #0]
 8005070:	e7b1      	b.n	8004fd6 <__sflush_r+0x1a>
 8005072:	89a3      	ldrh	r3, [r4, #12]
 8005074:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005078:	81a3      	strh	r3, [r4, #12]
 800507a:	e7ad      	b.n	8004fd8 <__sflush_r+0x1c>
 800507c:	690f      	ldr	r7, [r1, #16]
 800507e:	2f00      	cmp	r7, #0
 8005080:	d0a9      	beq.n	8004fd6 <__sflush_r+0x1a>
 8005082:	0793      	lsls	r3, r2, #30
 8005084:	680e      	ldr	r6, [r1, #0]
 8005086:	bf08      	it	eq
 8005088:	694b      	ldreq	r3, [r1, #20]
 800508a:	600f      	str	r7, [r1, #0]
 800508c:	bf18      	it	ne
 800508e:	2300      	movne	r3, #0
 8005090:	eba6 0807 	sub.w	r8, r6, r7
 8005094:	608b      	str	r3, [r1, #8]
 8005096:	f1b8 0f00 	cmp.w	r8, #0
 800509a:	dd9c      	ble.n	8004fd6 <__sflush_r+0x1a>
 800509c:	4643      	mov	r3, r8
 800509e:	463a      	mov	r2, r7
 80050a0:	6a21      	ldr	r1, [r4, #32]
 80050a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80050a4:	4628      	mov	r0, r5
 80050a6:	47b0      	blx	r6
 80050a8:	2800      	cmp	r0, #0
 80050aa:	dc06      	bgt.n	80050ba <__sflush_r+0xfe>
 80050ac:	89a3      	ldrh	r3, [r4, #12]
 80050ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050b2:	81a3      	strh	r3, [r4, #12]
 80050b4:	f04f 30ff 	mov.w	r0, #4294967295
 80050b8:	e78e      	b.n	8004fd8 <__sflush_r+0x1c>
 80050ba:	4407      	add	r7, r0
 80050bc:	eba8 0800 	sub.w	r8, r8, r0
 80050c0:	e7e9      	b.n	8005096 <__sflush_r+0xda>
 80050c2:	bf00      	nop
 80050c4:	20400001 	.word	0x20400001

080050c8 <_fflush_r>:
 80050c8:	b538      	push	{r3, r4, r5, lr}
 80050ca:	690b      	ldr	r3, [r1, #16]
 80050cc:	4605      	mov	r5, r0
 80050ce:	460c      	mov	r4, r1
 80050d0:	b1db      	cbz	r3, 800510a <_fflush_r+0x42>
 80050d2:	b118      	cbz	r0, 80050dc <_fflush_r+0x14>
 80050d4:	6983      	ldr	r3, [r0, #24]
 80050d6:	b90b      	cbnz	r3, 80050dc <_fflush_r+0x14>
 80050d8:	f7ff fa8e 	bl	80045f8 <__sinit>
 80050dc:	4b0c      	ldr	r3, [pc, #48]	; (8005110 <_fflush_r+0x48>)
 80050de:	429c      	cmp	r4, r3
 80050e0:	d109      	bne.n	80050f6 <_fflush_r+0x2e>
 80050e2:	686c      	ldr	r4, [r5, #4]
 80050e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050e8:	b17b      	cbz	r3, 800510a <_fflush_r+0x42>
 80050ea:	4621      	mov	r1, r4
 80050ec:	4628      	mov	r0, r5
 80050ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80050f2:	f7ff bf63 	b.w	8004fbc <__sflush_r>
 80050f6:	4b07      	ldr	r3, [pc, #28]	; (8005114 <_fflush_r+0x4c>)
 80050f8:	429c      	cmp	r4, r3
 80050fa:	d101      	bne.n	8005100 <_fflush_r+0x38>
 80050fc:	68ac      	ldr	r4, [r5, #8]
 80050fe:	e7f1      	b.n	80050e4 <_fflush_r+0x1c>
 8005100:	4b05      	ldr	r3, [pc, #20]	; (8005118 <_fflush_r+0x50>)
 8005102:	429c      	cmp	r4, r3
 8005104:	bf08      	it	eq
 8005106:	68ec      	ldreq	r4, [r5, #12]
 8005108:	e7ec      	b.n	80050e4 <_fflush_r+0x1c>
 800510a:	2000      	movs	r0, #0
 800510c:	bd38      	pop	{r3, r4, r5, pc}
 800510e:	bf00      	nop
 8005110:	080053b0 	.word	0x080053b0
 8005114:	080053d0 	.word	0x080053d0
 8005118:	08005390 	.word	0x08005390

0800511c <_lseek_r>:
 800511c:	b538      	push	{r3, r4, r5, lr}
 800511e:	4c07      	ldr	r4, [pc, #28]	; (800513c <_lseek_r+0x20>)
 8005120:	4605      	mov	r5, r0
 8005122:	4608      	mov	r0, r1
 8005124:	4611      	mov	r1, r2
 8005126:	2200      	movs	r2, #0
 8005128:	6022      	str	r2, [r4, #0]
 800512a:	461a      	mov	r2, r3
 800512c:	f7fb fd3c 	bl	8000ba8 <_lseek>
 8005130:	1c43      	adds	r3, r0, #1
 8005132:	d102      	bne.n	800513a <_lseek_r+0x1e>
 8005134:	6823      	ldr	r3, [r4, #0]
 8005136:	b103      	cbz	r3, 800513a <_lseek_r+0x1e>
 8005138:	602b      	str	r3, [r5, #0]
 800513a:	bd38      	pop	{r3, r4, r5, pc}
 800513c:	200001c8 	.word	0x200001c8

08005140 <__swhatbuf_r>:
 8005140:	b570      	push	{r4, r5, r6, lr}
 8005142:	460e      	mov	r6, r1
 8005144:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005148:	2900      	cmp	r1, #0
 800514a:	b096      	sub	sp, #88	; 0x58
 800514c:	4614      	mov	r4, r2
 800514e:	461d      	mov	r5, r3
 8005150:	da07      	bge.n	8005162 <__swhatbuf_r+0x22>
 8005152:	2300      	movs	r3, #0
 8005154:	602b      	str	r3, [r5, #0]
 8005156:	89b3      	ldrh	r3, [r6, #12]
 8005158:	061a      	lsls	r2, r3, #24
 800515a:	d410      	bmi.n	800517e <__swhatbuf_r+0x3e>
 800515c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005160:	e00e      	b.n	8005180 <__swhatbuf_r+0x40>
 8005162:	466a      	mov	r2, sp
 8005164:	f000 f8b2 	bl	80052cc <_fstat_r>
 8005168:	2800      	cmp	r0, #0
 800516a:	dbf2      	blt.n	8005152 <__swhatbuf_r+0x12>
 800516c:	9a01      	ldr	r2, [sp, #4]
 800516e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005172:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005176:	425a      	negs	r2, r3
 8005178:	415a      	adcs	r2, r3
 800517a:	602a      	str	r2, [r5, #0]
 800517c:	e7ee      	b.n	800515c <__swhatbuf_r+0x1c>
 800517e:	2340      	movs	r3, #64	; 0x40
 8005180:	2000      	movs	r0, #0
 8005182:	6023      	str	r3, [r4, #0]
 8005184:	b016      	add	sp, #88	; 0x58
 8005186:	bd70      	pop	{r4, r5, r6, pc}

08005188 <__smakebuf_r>:
 8005188:	898b      	ldrh	r3, [r1, #12]
 800518a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800518c:	079d      	lsls	r5, r3, #30
 800518e:	4606      	mov	r6, r0
 8005190:	460c      	mov	r4, r1
 8005192:	d507      	bpl.n	80051a4 <__smakebuf_r+0x1c>
 8005194:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005198:	6023      	str	r3, [r4, #0]
 800519a:	6123      	str	r3, [r4, #16]
 800519c:	2301      	movs	r3, #1
 800519e:	6163      	str	r3, [r4, #20]
 80051a0:	b002      	add	sp, #8
 80051a2:	bd70      	pop	{r4, r5, r6, pc}
 80051a4:	ab01      	add	r3, sp, #4
 80051a6:	466a      	mov	r2, sp
 80051a8:	f7ff ffca 	bl	8005140 <__swhatbuf_r>
 80051ac:	9900      	ldr	r1, [sp, #0]
 80051ae:	4605      	mov	r5, r0
 80051b0:	4630      	mov	r0, r6
 80051b2:	f7ff faab 	bl	800470c <_malloc_r>
 80051b6:	b948      	cbnz	r0, 80051cc <__smakebuf_r+0x44>
 80051b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051bc:	059a      	lsls	r2, r3, #22
 80051be:	d4ef      	bmi.n	80051a0 <__smakebuf_r+0x18>
 80051c0:	f023 0303 	bic.w	r3, r3, #3
 80051c4:	f043 0302 	orr.w	r3, r3, #2
 80051c8:	81a3      	strh	r3, [r4, #12]
 80051ca:	e7e3      	b.n	8005194 <__smakebuf_r+0xc>
 80051cc:	4b0d      	ldr	r3, [pc, #52]	; (8005204 <__smakebuf_r+0x7c>)
 80051ce:	62b3      	str	r3, [r6, #40]	; 0x28
 80051d0:	89a3      	ldrh	r3, [r4, #12]
 80051d2:	6020      	str	r0, [r4, #0]
 80051d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051d8:	81a3      	strh	r3, [r4, #12]
 80051da:	9b00      	ldr	r3, [sp, #0]
 80051dc:	6163      	str	r3, [r4, #20]
 80051de:	9b01      	ldr	r3, [sp, #4]
 80051e0:	6120      	str	r0, [r4, #16]
 80051e2:	b15b      	cbz	r3, 80051fc <__smakebuf_r+0x74>
 80051e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80051e8:	4630      	mov	r0, r6
 80051ea:	f000 f881 	bl	80052f0 <_isatty_r>
 80051ee:	b128      	cbz	r0, 80051fc <__smakebuf_r+0x74>
 80051f0:	89a3      	ldrh	r3, [r4, #12]
 80051f2:	f023 0303 	bic.w	r3, r3, #3
 80051f6:	f043 0301 	orr.w	r3, r3, #1
 80051fa:	81a3      	strh	r3, [r4, #12]
 80051fc:	89a3      	ldrh	r3, [r4, #12]
 80051fe:	431d      	orrs	r5, r3
 8005200:	81a5      	strh	r5, [r4, #12]
 8005202:	e7cd      	b.n	80051a0 <__smakebuf_r+0x18>
 8005204:	080045c1 	.word	0x080045c1

08005208 <__malloc_lock>:
 8005208:	4770      	bx	lr

0800520a <__malloc_unlock>:
 800520a:	4770      	bx	lr

0800520c <_free_r>:
 800520c:	b538      	push	{r3, r4, r5, lr}
 800520e:	4605      	mov	r5, r0
 8005210:	2900      	cmp	r1, #0
 8005212:	d045      	beq.n	80052a0 <_free_r+0x94>
 8005214:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005218:	1f0c      	subs	r4, r1, #4
 800521a:	2b00      	cmp	r3, #0
 800521c:	bfb8      	it	lt
 800521e:	18e4      	addlt	r4, r4, r3
 8005220:	f7ff fff2 	bl	8005208 <__malloc_lock>
 8005224:	4a1f      	ldr	r2, [pc, #124]	; (80052a4 <_free_r+0x98>)
 8005226:	6813      	ldr	r3, [r2, #0]
 8005228:	4610      	mov	r0, r2
 800522a:	b933      	cbnz	r3, 800523a <_free_r+0x2e>
 800522c:	6063      	str	r3, [r4, #4]
 800522e:	6014      	str	r4, [r2, #0]
 8005230:	4628      	mov	r0, r5
 8005232:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005236:	f7ff bfe8 	b.w	800520a <__malloc_unlock>
 800523a:	42a3      	cmp	r3, r4
 800523c:	d90c      	bls.n	8005258 <_free_r+0x4c>
 800523e:	6821      	ldr	r1, [r4, #0]
 8005240:	1862      	adds	r2, r4, r1
 8005242:	4293      	cmp	r3, r2
 8005244:	bf04      	itt	eq
 8005246:	681a      	ldreq	r2, [r3, #0]
 8005248:	685b      	ldreq	r3, [r3, #4]
 800524a:	6063      	str	r3, [r4, #4]
 800524c:	bf04      	itt	eq
 800524e:	1852      	addeq	r2, r2, r1
 8005250:	6022      	streq	r2, [r4, #0]
 8005252:	6004      	str	r4, [r0, #0]
 8005254:	e7ec      	b.n	8005230 <_free_r+0x24>
 8005256:	4613      	mov	r3, r2
 8005258:	685a      	ldr	r2, [r3, #4]
 800525a:	b10a      	cbz	r2, 8005260 <_free_r+0x54>
 800525c:	42a2      	cmp	r2, r4
 800525e:	d9fa      	bls.n	8005256 <_free_r+0x4a>
 8005260:	6819      	ldr	r1, [r3, #0]
 8005262:	1858      	adds	r0, r3, r1
 8005264:	42a0      	cmp	r0, r4
 8005266:	d10b      	bne.n	8005280 <_free_r+0x74>
 8005268:	6820      	ldr	r0, [r4, #0]
 800526a:	4401      	add	r1, r0
 800526c:	1858      	adds	r0, r3, r1
 800526e:	4282      	cmp	r2, r0
 8005270:	6019      	str	r1, [r3, #0]
 8005272:	d1dd      	bne.n	8005230 <_free_r+0x24>
 8005274:	6810      	ldr	r0, [r2, #0]
 8005276:	6852      	ldr	r2, [r2, #4]
 8005278:	605a      	str	r2, [r3, #4]
 800527a:	4401      	add	r1, r0
 800527c:	6019      	str	r1, [r3, #0]
 800527e:	e7d7      	b.n	8005230 <_free_r+0x24>
 8005280:	d902      	bls.n	8005288 <_free_r+0x7c>
 8005282:	230c      	movs	r3, #12
 8005284:	602b      	str	r3, [r5, #0]
 8005286:	e7d3      	b.n	8005230 <_free_r+0x24>
 8005288:	6820      	ldr	r0, [r4, #0]
 800528a:	1821      	adds	r1, r4, r0
 800528c:	428a      	cmp	r2, r1
 800528e:	bf04      	itt	eq
 8005290:	6811      	ldreq	r1, [r2, #0]
 8005292:	6852      	ldreq	r2, [r2, #4]
 8005294:	6062      	str	r2, [r4, #4]
 8005296:	bf04      	itt	eq
 8005298:	1809      	addeq	r1, r1, r0
 800529a:	6021      	streq	r1, [r4, #0]
 800529c:	605c      	str	r4, [r3, #4]
 800529e:	e7c7      	b.n	8005230 <_free_r+0x24>
 80052a0:	bd38      	pop	{r3, r4, r5, pc}
 80052a2:	bf00      	nop
 80052a4:	20000090 	.word	0x20000090

080052a8 <_read_r>:
 80052a8:	b538      	push	{r3, r4, r5, lr}
 80052aa:	4c07      	ldr	r4, [pc, #28]	; (80052c8 <_read_r+0x20>)
 80052ac:	4605      	mov	r5, r0
 80052ae:	4608      	mov	r0, r1
 80052b0:	4611      	mov	r1, r2
 80052b2:	2200      	movs	r2, #0
 80052b4:	6022      	str	r2, [r4, #0]
 80052b6:	461a      	mov	r2, r3
 80052b8:	f7fb fc32 	bl	8000b20 <_read>
 80052bc:	1c43      	adds	r3, r0, #1
 80052be:	d102      	bne.n	80052c6 <_read_r+0x1e>
 80052c0:	6823      	ldr	r3, [r4, #0]
 80052c2:	b103      	cbz	r3, 80052c6 <_read_r+0x1e>
 80052c4:	602b      	str	r3, [r5, #0]
 80052c6:	bd38      	pop	{r3, r4, r5, pc}
 80052c8:	200001c8 	.word	0x200001c8

080052cc <_fstat_r>:
 80052cc:	b538      	push	{r3, r4, r5, lr}
 80052ce:	4c07      	ldr	r4, [pc, #28]	; (80052ec <_fstat_r+0x20>)
 80052d0:	2300      	movs	r3, #0
 80052d2:	4605      	mov	r5, r0
 80052d4:	4608      	mov	r0, r1
 80052d6:	4611      	mov	r1, r2
 80052d8:	6023      	str	r3, [r4, #0]
 80052da:	f7fb fc4a 	bl	8000b72 <_fstat>
 80052de:	1c43      	adds	r3, r0, #1
 80052e0:	d102      	bne.n	80052e8 <_fstat_r+0x1c>
 80052e2:	6823      	ldr	r3, [r4, #0]
 80052e4:	b103      	cbz	r3, 80052e8 <_fstat_r+0x1c>
 80052e6:	602b      	str	r3, [r5, #0]
 80052e8:	bd38      	pop	{r3, r4, r5, pc}
 80052ea:	bf00      	nop
 80052ec:	200001c8 	.word	0x200001c8

080052f0 <_isatty_r>:
 80052f0:	b538      	push	{r3, r4, r5, lr}
 80052f2:	4c06      	ldr	r4, [pc, #24]	; (800530c <_isatty_r+0x1c>)
 80052f4:	2300      	movs	r3, #0
 80052f6:	4605      	mov	r5, r0
 80052f8:	4608      	mov	r0, r1
 80052fa:	6023      	str	r3, [r4, #0]
 80052fc:	f7fb fc49 	bl	8000b92 <_isatty>
 8005300:	1c43      	adds	r3, r0, #1
 8005302:	d102      	bne.n	800530a <_isatty_r+0x1a>
 8005304:	6823      	ldr	r3, [r4, #0]
 8005306:	b103      	cbz	r3, 800530a <_isatty_r+0x1a>
 8005308:	602b      	str	r3, [r5, #0]
 800530a:	bd38      	pop	{r3, r4, r5, pc}
 800530c:	200001c8 	.word	0x200001c8

08005310 <_init>:
 8005310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005312:	bf00      	nop
 8005314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005316:	bc08      	pop	{r3}
 8005318:	469e      	mov	lr, r3
 800531a:	4770      	bx	lr

0800531c <_fini>:
 800531c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800531e:	bf00      	nop
 8005320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005322:	bc08      	pop	{r3}
 8005324:	469e      	mov	lr, r3
 8005326:	4770      	bx	lr
