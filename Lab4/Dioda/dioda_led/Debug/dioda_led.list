
dioda_led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004208  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08004398  08004398  00014398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044a0  080044a0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080044a0  080044a0  000144a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080044a8  080044a8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044a8  080044a8  000144a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080044ac  080044ac  000144ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080044b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  20000070  08004520  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  08004520  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cccc  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001eb4  00000000  00000000  0002cd6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a58  00000000  00000000  0002ec20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000940  00000000  00000000  0002f678  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027570  00000000  00000000  0002ffb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009a59  00000000  00000000  00057528  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ebd09  00000000  00000000  00060f81  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014cc8a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f2c  00000000  00000000  0014cd08  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004380 	.word	0x08004380

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004380 	.word	0x08004380

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b08a      	sub	sp, #40	; 0x28
 8000574:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8000576:	1d3b      	adds	r3, r7, #4
 8000578:	2224      	movs	r2, #36	; 0x24
 800057a:	2100      	movs	r1, #0
 800057c:	4618      	mov	r0, r3
 800057e:	f003 f813 	bl	80035a8 <memset>

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000582:	4b12      	ldr	r3, [pc, #72]	; (80005cc <MX_DAC1_Init+0x5c>)
 8000584:	4a12      	ldr	r2, [pc, #72]	; (80005d0 <MX_DAC1_Init+0x60>)
 8000586:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000588:	4810      	ldr	r0, [pc, #64]	; (80005cc <MX_DAC1_Init+0x5c>)
 800058a:	f000 fcc0 	bl	8000f0e <HAL_DAC_Init>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000594:	f000 f984 	bl	80008a0 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000598:	2300      	movs	r3, #0
 800059a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800059c:	2300      	movs	r3, #0
 800059e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80005a0:	2300      	movs	r3, #0
 80005a2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80005a4:	2300      	movs	r3, #0
 80005a6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80005a8:	2300      	movs	r3, #0
 80005aa:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80005ac:	1d3b      	adds	r3, r7, #4
 80005ae:	2210      	movs	r2, #16
 80005b0:	4619      	mov	r1, r3
 80005b2:	4806      	ldr	r0, [pc, #24]	; (80005cc <MX_DAC1_Init+0x5c>)
 80005b4:	f000 fd3f 	bl	8001036 <HAL_DAC_ConfigChannel>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80005be:	f000 f96f 	bl	80008a0 <Error_Handler>
  }

}
 80005c2:	bf00      	nop
 80005c4:	3728      	adds	r7, #40	; 0x28
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	20000098 	.word	0x20000098
 80005d0:	40007400 	.word	0x40007400

080005d4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b08a      	sub	sp, #40	; 0x28
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005dc:	f107 0314 	add.w	r3, r7, #20
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	609a      	str	r2, [r3, #8]
 80005e8:	60da      	str	r2, [r3, #12]
 80005ea:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a15      	ldr	r2, [pc, #84]	; (8000648 <HAL_DAC_MspInit+0x74>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d124      	bne.n	8000640 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80005f6:	4b15      	ldr	r3, [pc, #84]	; (800064c <HAL_DAC_MspInit+0x78>)
 80005f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005fa:	4a14      	ldr	r2, [pc, #80]	; (800064c <HAL_DAC_MspInit+0x78>)
 80005fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000600:	6593      	str	r3, [r2, #88]	; 0x58
 8000602:	4b12      	ldr	r3, [pc, #72]	; (800064c <HAL_DAC_MspInit+0x78>)
 8000604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000606:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800060a:	613b      	str	r3, [r7, #16]
 800060c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800060e:	4b0f      	ldr	r3, [pc, #60]	; (800064c <HAL_DAC_MspInit+0x78>)
 8000610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000612:	4a0e      	ldr	r2, [pc, #56]	; (800064c <HAL_DAC_MspInit+0x78>)
 8000614:	f043 0301 	orr.w	r3, r3, #1
 8000618:	64d3      	str	r3, [r2, #76]	; 0x4c
 800061a:	4b0c      	ldr	r3, [pc, #48]	; (800064c <HAL_DAC_MspInit+0x78>)
 800061c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800061e:	f003 0301 	and.w	r3, r3, #1
 8000622:	60fb      	str	r3, [r7, #12]
 8000624:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000626:	2320      	movs	r3, #32
 8000628:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800062a:	2303      	movs	r3, #3
 800062c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062e:	2300      	movs	r3, #0
 8000630:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000632:	f107 0314 	add.w	r3, r7, #20
 8000636:	4619      	mov	r1, r3
 8000638:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800063c:	f000 fe16 	bl	800126c <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000640:	bf00      	nop
 8000642:	3728      	adds	r7, #40	; 0x28
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	40007400 	.word	0x40007400
 800064c:	40021000 	.word	0x40021000

08000650 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b08a      	sub	sp, #40	; 0x28
 8000654:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000656:	f107 0314 	add.w	r3, r7, #20
 800065a:	2200      	movs	r2, #0
 800065c:	601a      	str	r2, [r3, #0]
 800065e:	605a      	str	r2, [r3, #4]
 8000660:	609a      	str	r2, [r3, #8]
 8000662:	60da      	str	r2, [r3, #12]
 8000664:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000666:	4b20      	ldr	r3, [pc, #128]	; (80006e8 <MX_GPIO_Init+0x98>)
 8000668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800066a:	4a1f      	ldr	r2, [pc, #124]	; (80006e8 <MX_GPIO_Init+0x98>)
 800066c:	f043 0304 	orr.w	r3, r3, #4
 8000670:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000672:	4b1d      	ldr	r3, [pc, #116]	; (80006e8 <MX_GPIO_Init+0x98>)
 8000674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000676:	f003 0304 	and.w	r3, r3, #4
 800067a:	613b      	str	r3, [r7, #16]
 800067c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800067e:	4b1a      	ldr	r3, [pc, #104]	; (80006e8 <MX_GPIO_Init+0x98>)
 8000680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000682:	4a19      	ldr	r2, [pc, #100]	; (80006e8 <MX_GPIO_Init+0x98>)
 8000684:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000688:	64d3      	str	r3, [r2, #76]	; 0x4c
 800068a:	4b17      	ldr	r3, [pc, #92]	; (80006e8 <MX_GPIO_Init+0x98>)
 800068c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800068e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000692:	60fb      	str	r3, [r7, #12]
 8000694:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000696:	4b14      	ldr	r3, [pc, #80]	; (80006e8 <MX_GPIO_Init+0x98>)
 8000698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069a:	4a13      	ldr	r2, [pc, #76]	; (80006e8 <MX_GPIO_Init+0x98>)
 800069c:	f043 0301 	orr.w	r3, r3, #1
 80006a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006a2:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <MX_GPIO_Init+0x98>)
 80006a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006a6:	f003 0301 	and.w	r3, r3, #1
 80006aa:	60bb      	str	r3, [r7, #8]
 80006ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ae:	4b0e      	ldr	r3, [pc, #56]	; (80006e8 <MX_GPIO_Init+0x98>)
 80006b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006b2:	4a0d      	ldr	r2, [pc, #52]	; (80006e8 <MX_GPIO_Init+0x98>)
 80006b4:	f043 0302 	orr.w	r3, r3, #2
 80006b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ba:	4b0b      	ldr	r3, [pc, #44]	; (80006e8 <MX_GPIO_Init+0x98>)
 80006bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006be:	f003 0302 	and.w	r3, r3, #2
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006cc:	4b07      	ldr	r3, [pc, #28]	; (80006ec <MX_GPIO_Init+0x9c>)
 80006ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d0:	2300      	movs	r3, #0
 80006d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006d4:	f107 0314 	add.w	r3, r7, #20
 80006d8:	4619      	mov	r1, r3
 80006da:	4805      	ldr	r0, [pc, #20]	; (80006f0 <MX_GPIO_Init+0xa0>)
 80006dc:	f000 fdc6 	bl	800126c <HAL_GPIO_Init>

}
 80006e0:	bf00      	nop
 80006e2:	3728      	adds	r7, #40	; 0x28
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	40021000 	.word	0x40021000
 80006ec:	10210000 	.word	0x10210000
 80006f0:	48000800 	.word	0x48000800

080006f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f4:	b590      	push	{r4, r7, lr}
 80006f6:	b087      	sub	sp, #28
 80006f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint16_t dac_value;
	uint8_t i = 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	75fb      	strb	r3, [r7, #23]

	// 3.3V -> 255
	// 0.5V -> 39
	// 0.0, 	0.5,	1.0,	1.5, 	2.0, 	2.5, 	3.0, 	3.3
	// 0, 	39, 	78, 	117, 	156, 	195, 	234, 	255
	uint16_t tab[] = {0,39,77,116,155,193,232,255};
 80006fe:	4b1f      	ldr	r3, [pc, #124]	; (800077c <main+0x88>)
 8000700:	1d3c      	adds	r4, r7, #4
 8000702:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000704:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000708:	f000 fa7e 	bl	8000c08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800070c:	f000 f83e 	bl	800078c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000710:	f7ff ff9e 	bl	8000650 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000714:	f000 f9dc 	bl	8000ad0 <MX_USART2_UART_Init>
  MX_DAC1_Init();
 8000718:	f7ff ff2a 	bl	8000570 <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 800071c:	2110      	movs	r1, #16
 800071e:	4818      	ldr	r0, [pc, #96]	; (8000780 <main+0x8c>)
 8000720:	f000 fc17 	bl	8000f52 <HAL_DAC_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  dac_value = tab[i];
 8000724:	7dfb      	ldrb	r3, [r7, #23]
 8000726:	005b      	lsls	r3, r3, #1
 8000728:	f107 0218 	add.w	r2, r7, #24
 800072c:	4413      	add	r3, r2
 800072e:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8000732:	82bb      	strh	r3, [r7, #20]
	  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_8B_R, dac_value);
 8000734:	8abb      	ldrh	r3, [r7, #20]
 8000736:	2208      	movs	r2, #8
 8000738:	2110      	movs	r1, #16
 800073a:	4811      	ldr	r0, [pc, #68]	; (8000780 <main+0x8c>)
 800073c:	f000 fc56 	bl	8000fec <HAL_DAC_SetValue>
	  printf("DAC_val %3d -> %3d mV\r\n", dac_value, ((dac_value)*3300)/255);
 8000740:	8ab9      	ldrh	r1, [r7, #20]
 8000742:	8abb      	ldrh	r3, [r7, #20]
 8000744:	f640 42e4 	movw	r2, #3300	; 0xce4
 8000748:	fb02 f303 	mul.w	r3, r2, r3
 800074c:	4a0d      	ldr	r2, [pc, #52]	; (8000784 <main+0x90>)
 800074e:	fb82 0203 	smull	r0, r2, r2, r3
 8000752:	441a      	add	r2, r3
 8000754:	11d2      	asrs	r2, r2, #7
 8000756:	17db      	asrs	r3, r3, #31
 8000758:	1ad3      	subs	r3, r2, r3
 800075a:	461a      	mov	r2, r3
 800075c:	480a      	ldr	r0, [pc, #40]	; (8000788 <main+0x94>)
 800075e:	f002 ff2b 	bl	80035b8 <iprintf>

	  HAL_Delay(2000);
 8000762:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000766:	f000 facb 	bl	8000d00 <HAL_Delay>
	  i++;
 800076a:	7dfb      	ldrb	r3, [r7, #23]
 800076c:	3301      	adds	r3, #1
 800076e:	75fb      	strb	r3, [r7, #23]
	  if(i >= 8){
 8000770:	7dfb      	ldrb	r3, [r7, #23]
 8000772:	2b07      	cmp	r3, #7
 8000774:	d9d6      	bls.n	8000724 <main+0x30>
		  i = 0;
 8000776:	2300      	movs	r3, #0
 8000778:	75fb      	strb	r3, [r7, #23]
	  dac_value = tab[i];
 800077a:	e7d3      	b.n	8000724 <main+0x30>
 800077c:	080043b0 	.word	0x080043b0
 8000780:	20000098 	.word	0x20000098
 8000784:	80808081 	.word	0x80808081
 8000788:	08004398 	.word	0x08004398

0800078c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b0b8      	sub	sp, #224	; 0xe0
 8000790:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000792:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000796:	2244      	movs	r2, #68	; 0x44
 8000798:	2100      	movs	r1, #0
 800079a:	4618      	mov	r0, r3
 800079c:	f002 ff04 	bl	80035a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]
 80007ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007b0:	463b      	mov	r3, r7
 80007b2:	2288      	movs	r2, #136	; 0x88
 80007b4:	2100      	movs	r1, #0
 80007b6:	4618      	mov	r0, r3
 80007b8:	f002 fef6 	bl	80035a8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007bc:	2302      	movs	r3, #2
 80007be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007ca:	2310      	movs	r3, #16
 80007cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007d0:	2302      	movs	r3, #2
 80007d2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007d6:	2302      	movs	r3, #2
 80007d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007dc:	2301      	movs	r3, #1
 80007de:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 80007e2:	230a      	movs	r3, #10
 80007e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80007e8:	2307      	movs	r3, #7
 80007ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007ee:	2302      	movs	r3, #2
 80007f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007f4:	2302      	movs	r3, #2
 80007f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007fa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80007fe:	4618      	mov	r0, r3
 8000800:	f000 ff40 	bl	8001684 <HAL_RCC_OscConfig>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800080a:	f000 f849 	bl	80008a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800080e:	230f      	movs	r3, #15
 8000810:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000814:	2303      	movs	r3, #3
 8000816:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800081a:	2300      	movs	r3, #0
 800081c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000820:	2300      	movs	r3, #0
 8000822:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000826:	2300      	movs	r3, #0
 8000828:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800082c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000830:	2104      	movs	r1, #4
 8000832:	4618      	mov	r0, r3
 8000834:	f001 fb0c 	bl	8001e50 <HAL_RCC_ClockConfig>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800083e:	f000 f82f 	bl	80008a0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000842:	2302      	movs	r3, #2
 8000844:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000846:	2300      	movs	r3, #0
 8000848:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800084a:	463b      	mov	r3, r7
 800084c:	4618      	mov	r0, r3
 800084e:	f001 fd03 	bl	8002258 <HAL_RCCEx_PeriphCLKConfig>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000858:	f000 f822 	bl	80008a0 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800085c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000860:	f000 feba 	bl	80015d8 <HAL_PWREx_ControlVoltageScaling>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <SystemClock_Config+0xe2>
  {
    Error_Handler();
 800086a:	f000 f819 	bl	80008a0 <Error_Handler>
  }
}
 800086e:	bf00      	nop
 8000870:	37e0      	adds	r7, #224	; 0xe0
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
	...

08000878 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 8000878:	b580      	push	{r7, lr}
 800087a:	b084      	sub	sp, #16
 800087c:	af00      	add	r7, sp, #0
 800087e:	60f8      	str	r0, [r7, #12]
 8000880:	60b9      	str	r1, [r7, #8]
 8000882:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, 50);
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	b29a      	uxth	r2, r3
 8000888:	2332      	movs	r3, #50	; 0x32
 800088a:	68b9      	ldr	r1, [r7, #8]
 800088c:	4803      	ldr	r0, [pc, #12]	; (800089c <_write+0x24>)
 800088e:	f002 f9e1 	bl	8002c54 <HAL_UART_Transmit>
	return len;
 8000892:	687b      	ldr	r3, [r7, #4]
}
 8000894:	4618      	mov	r0, r3
 8000896:	3710      	adds	r7, #16
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	200000ac 	.word	0x200000ac

080008a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80008a4:	bf00      	nop
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr
	...

080008b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008b6:	4b0f      	ldr	r3, [pc, #60]	; (80008f4 <HAL_MspInit+0x44>)
 80008b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008ba:	4a0e      	ldr	r2, [pc, #56]	; (80008f4 <HAL_MspInit+0x44>)
 80008bc:	f043 0301 	orr.w	r3, r3, #1
 80008c0:	6613      	str	r3, [r2, #96]	; 0x60
 80008c2:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <HAL_MspInit+0x44>)
 80008c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008c6:	f003 0301 	and.w	r3, r3, #1
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ce:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <HAL_MspInit+0x44>)
 80008d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008d2:	4a08      	ldr	r2, [pc, #32]	; (80008f4 <HAL_MspInit+0x44>)
 80008d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008d8:	6593      	str	r3, [r2, #88]	; 0x58
 80008da:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <HAL_MspInit+0x44>)
 80008dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008e2:	603b      	str	r3, [r7, #0]
 80008e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008e6:	bf00      	nop
 80008e8:	370c      	adds	r7, #12
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	40021000 	.word	0x40021000

080008f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80008fc:	bf00      	nop
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr

08000906 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000906:	b480      	push	{r7}
 8000908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800090a:	e7fe      	b.n	800090a <HardFault_Handler+0x4>

0800090c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000910:	e7fe      	b.n	8000910 <MemManage_Handler+0x4>

08000912 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000912:	b480      	push	{r7}
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000916:	e7fe      	b.n	8000916 <BusFault_Handler+0x4>

08000918 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800091c:	e7fe      	b.n	800091c <UsageFault_Handler+0x4>

0800091e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800091e:	b480      	push	{r7}
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000922:	bf00      	nop
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr

0800092c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000930:	bf00      	nop
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr

0800093a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800093a:	b480      	push	{r7}
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800093e:	bf00      	nop
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr

08000948 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800094c:	f000 f9b8 	bl	8000cc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}

08000954 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b086      	sub	sp, #24
 8000958:	af00      	add	r7, sp, #0
 800095a:	60f8      	str	r0, [r7, #12]
 800095c:	60b9      	str	r1, [r7, #8]
 800095e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000960:	2300      	movs	r3, #0
 8000962:	617b      	str	r3, [r7, #20]
 8000964:	e00a      	b.n	800097c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000966:	f3af 8000 	nop.w
 800096a:	4601      	mov	r1, r0
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	1c5a      	adds	r2, r3, #1
 8000970:	60ba      	str	r2, [r7, #8]
 8000972:	b2ca      	uxtb	r2, r1
 8000974:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000976:	697b      	ldr	r3, [r7, #20]
 8000978:	3301      	adds	r3, #1
 800097a:	617b      	str	r3, [r7, #20]
 800097c:	697a      	ldr	r2, [r7, #20]
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	429a      	cmp	r2, r3
 8000982:	dbf0      	blt.n	8000966 <_read+0x12>
	}

return len;
 8000984:	687b      	ldr	r3, [r7, #4]
}
 8000986:	4618      	mov	r0, r3
 8000988:	3718      	adds	r7, #24
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}

0800098e <_close>:
	}
	return len;
}

int _close(int file)
{
 800098e:	b480      	push	{r7}
 8000990:	b083      	sub	sp, #12
 8000992:	af00      	add	r7, sp, #0
 8000994:	6078      	str	r0, [r7, #4]
	return -1;
 8000996:	f04f 33ff 	mov.w	r3, #4294967295
}
 800099a:	4618      	mov	r0, r3
 800099c:	370c      	adds	r7, #12
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr

080009a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009a6:	b480      	push	{r7}
 80009a8:	b083      	sub	sp, #12
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	6078      	str	r0, [r7, #4]
 80009ae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009b6:	605a      	str	r2, [r3, #4]
	return 0;
 80009b8:	2300      	movs	r3, #0
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	370c      	adds	r7, #12
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr

080009c6 <_isatty>:

int _isatty(int file)
{
 80009c6:	b480      	push	{r7}
 80009c8:	b083      	sub	sp, #12
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	6078      	str	r0, [r7, #4]
	return 1;
 80009ce:	2301      	movs	r3, #1
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009dc:	b480      	push	{r7}
 80009de:	b085      	sub	sp, #20
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	60f8      	str	r0, [r7, #12]
 80009e4:	60b9      	str	r1, [r7, #8]
 80009e6:	607a      	str	r2, [r7, #4]
	return 0;
 80009e8:	2300      	movs	r3, #0
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	3714      	adds	r7, #20
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
	...

080009f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b086      	sub	sp, #24
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a00:	4a14      	ldr	r2, [pc, #80]	; (8000a54 <_sbrk+0x5c>)
 8000a02:	4b15      	ldr	r3, [pc, #84]	; (8000a58 <_sbrk+0x60>)
 8000a04:	1ad3      	subs	r3, r2, r3
 8000a06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a0c:	4b13      	ldr	r3, [pc, #76]	; (8000a5c <_sbrk+0x64>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d102      	bne.n	8000a1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a14:	4b11      	ldr	r3, [pc, #68]	; (8000a5c <_sbrk+0x64>)
 8000a16:	4a12      	ldr	r2, [pc, #72]	; (8000a60 <_sbrk+0x68>)
 8000a18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a1a:	4b10      	ldr	r3, [pc, #64]	; (8000a5c <_sbrk+0x64>)
 8000a1c:	681a      	ldr	r2, [r3, #0]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4413      	add	r3, r2
 8000a22:	693a      	ldr	r2, [r7, #16]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	d207      	bcs.n	8000a38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a28:	f002 fd94 	bl	8003554 <__errno>
 8000a2c:	4602      	mov	r2, r0
 8000a2e:	230c      	movs	r3, #12
 8000a30:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000a32:	f04f 33ff 	mov.w	r3, #4294967295
 8000a36:	e009      	b.n	8000a4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a38:	4b08      	ldr	r3, [pc, #32]	; (8000a5c <_sbrk+0x64>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a3e:	4b07      	ldr	r3, [pc, #28]	; (8000a5c <_sbrk+0x64>)
 8000a40:	681a      	ldr	r2, [r3, #0]
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	4413      	add	r3, r2
 8000a46:	4a05      	ldr	r2, [pc, #20]	; (8000a5c <_sbrk+0x64>)
 8000a48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a4a:	68fb      	ldr	r3, [r7, #12]
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	3718      	adds	r7, #24
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	20018000 	.word	0x20018000
 8000a58:	00000400 	.word	0x00000400
 8000a5c:	2000008c 	.word	0x2000008c
 8000a60:	20000138 	.word	0x20000138

08000a64 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a68:	4b17      	ldr	r3, [pc, #92]	; (8000ac8 <SystemInit+0x64>)
 8000a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a6e:	4a16      	ldr	r2, [pc, #88]	; (8000ac8 <SystemInit+0x64>)
 8000a70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000a78:	4b14      	ldr	r3, [pc, #80]	; (8000acc <SystemInit+0x68>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a13      	ldr	r2, [pc, #76]	; (8000acc <SystemInit+0x68>)
 8000a7e:	f043 0301 	orr.w	r3, r3, #1
 8000a82:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000a84:	4b11      	ldr	r3, [pc, #68]	; (8000acc <SystemInit+0x68>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000a8a:	4b10      	ldr	r3, [pc, #64]	; (8000acc <SystemInit+0x68>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4a0f      	ldr	r2, [pc, #60]	; (8000acc <SystemInit+0x68>)
 8000a90:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000a94:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000a98:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000a9a:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <SystemInit+0x68>)
 8000a9c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000aa0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000aa2:	4b0a      	ldr	r3, [pc, #40]	; (8000acc <SystemInit+0x68>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4a09      	ldr	r2, [pc, #36]	; (8000acc <SystemInit+0x68>)
 8000aa8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000aac:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000aae:	4b07      	ldr	r3, [pc, #28]	; (8000acc <SystemInit+0x68>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ab4:	4b04      	ldr	r3, [pc, #16]	; (8000ac8 <SystemInit+0x64>)
 8000ab6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000aba:	609a      	str	r2, [r3, #8]
#endif
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	e000ed00 	.word	0xe000ed00
 8000acc:	40021000 	.word	0x40021000

08000ad0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000ad4:	4b14      	ldr	r3, [pc, #80]	; (8000b28 <MX_USART2_UART_Init+0x58>)
 8000ad6:	4a15      	ldr	r2, [pc, #84]	; (8000b2c <MX_USART2_UART_Init+0x5c>)
 8000ad8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ada:	4b13      	ldr	r3, [pc, #76]	; (8000b28 <MX_USART2_UART_Init+0x58>)
 8000adc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ae0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ae2:	4b11      	ldr	r3, [pc, #68]	; (8000b28 <MX_USART2_UART_Init+0x58>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ae8:	4b0f      	ldr	r3, [pc, #60]	; (8000b28 <MX_USART2_UART_Init+0x58>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000aee:	4b0e      	ldr	r3, [pc, #56]	; (8000b28 <MX_USART2_UART_Init+0x58>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000af4:	4b0c      	ldr	r3, [pc, #48]	; (8000b28 <MX_USART2_UART_Init+0x58>)
 8000af6:	220c      	movs	r2, #12
 8000af8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000afa:	4b0b      	ldr	r3, [pc, #44]	; (8000b28 <MX_USART2_UART_Init+0x58>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b00:	4b09      	ldr	r3, [pc, #36]	; (8000b28 <MX_USART2_UART_Init+0x58>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b06:	4b08      	ldr	r3, [pc, #32]	; (8000b28 <MX_USART2_UART_Init+0x58>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b0c:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <MX_USART2_UART_Init+0x58>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b12:	4805      	ldr	r0, [pc, #20]	; (8000b28 <MX_USART2_UART_Init+0x58>)
 8000b14:	f002 f850 	bl	8002bb8 <HAL_UART_Init>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000b1e:	f7ff febf 	bl	80008a0 <Error_Handler>
  }

}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	200000ac 	.word	0x200000ac
 8000b2c:	40004400 	.word	0x40004400

08000b30 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b08a      	sub	sp, #40	; 0x28
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	609a      	str	r2, [r3, #8]
 8000b44:	60da      	str	r2, [r3, #12]
 8000b46:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a17      	ldr	r2, [pc, #92]	; (8000bac <HAL_UART_MspInit+0x7c>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d128      	bne.n	8000ba4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b52:	4b17      	ldr	r3, [pc, #92]	; (8000bb0 <HAL_UART_MspInit+0x80>)
 8000b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b56:	4a16      	ldr	r2, [pc, #88]	; (8000bb0 <HAL_UART_MspInit+0x80>)
 8000b58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b5c:	6593      	str	r3, [r2, #88]	; 0x58
 8000b5e:	4b14      	ldr	r3, [pc, #80]	; (8000bb0 <HAL_UART_MspInit+0x80>)
 8000b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b66:	613b      	str	r3, [r7, #16]
 8000b68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6a:	4b11      	ldr	r3, [pc, #68]	; (8000bb0 <HAL_UART_MspInit+0x80>)
 8000b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b6e:	4a10      	ldr	r2, [pc, #64]	; (8000bb0 <HAL_UART_MspInit+0x80>)
 8000b70:	f043 0301 	orr.w	r3, r3, #1
 8000b74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b76:	4b0e      	ldr	r3, [pc, #56]	; (8000bb0 <HAL_UART_MspInit+0x80>)
 8000b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b7a:	f003 0301 	and.w	r3, r3, #1
 8000b7e:	60fb      	str	r3, [r7, #12]
 8000b80:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b82:	230c      	movs	r3, #12
 8000b84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b86:	2302      	movs	r3, #2
 8000b88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8e:	2303      	movs	r3, #3
 8000b90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b92:	2307      	movs	r3, #7
 8000b94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b96:	f107 0314 	add.w	r3, r7, #20
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ba0:	f000 fb64 	bl	800126c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000ba4:	bf00      	nop
 8000ba6:	3728      	adds	r7, #40	; 0x28
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	40004400 	.word	0x40004400
 8000bb0:	40021000 	.word	0x40021000

08000bb4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000bb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bb8:	f7ff ff54 	bl	8000a64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000bbc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000bbe:	e003      	b.n	8000bc8 <LoopCopyDataInit>

08000bc0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000bc0:	4b0b      	ldr	r3, [pc, #44]	; (8000bf0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000bc2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000bc4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000bc6:	3104      	adds	r1, #4

08000bc8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000bc8:	480a      	ldr	r0, [pc, #40]	; (8000bf4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000bca:	4b0b      	ldr	r3, [pc, #44]	; (8000bf8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000bcc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000bce:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000bd0:	d3f6      	bcc.n	8000bc0 <CopyDataInit>
	ldr	r2, =_sbss
 8000bd2:	4a0a      	ldr	r2, [pc, #40]	; (8000bfc <LoopForever+0x12>)
	b	LoopFillZerobss
 8000bd4:	e002      	b.n	8000bdc <LoopFillZerobss>

08000bd6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000bd6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000bd8:	f842 3b04 	str.w	r3, [r2], #4

08000bdc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000bdc:	4b08      	ldr	r3, [pc, #32]	; (8000c00 <LoopForever+0x16>)
	cmp	r2, r3
 8000bde:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000be0:	d3f9      	bcc.n	8000bd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000be2:	f002 fcbd 	bl	8003560 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000be6:	f7ff fd85 	bl	80006f4 <main>

08000bea <LoopForever>:

LoopForever:
    b LoopForever
 8000bea:	e7fe      	b.n	8000bea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000bec:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000bf0:	080044b0 	.word	0x080044b0
	ldr	r0, =_sdata
 8000bf4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000bf8:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8000bfc:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8000c00:	20000134 	.word	0x20000134

08000c04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c04:	e7fe      	b.n	8000c04 <ADC1_2_IRQHandler>
	...

08000c08 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c12:	4b0c      	ldr	r3, [pc, #48]	; (8000c44 <HAL_Init+0x3c>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4a0b      	ldr	r2, [pc, #44]	; (8000c44 <HAL_Init+0x3c>)
 8000c18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c1c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c1e:	2003      	movs	r0, #3
 8000c20:	f000 f942 	bl	8000ea8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c24:	2000      	movs	r0, #0
 8000c26:	f000 f80f 	bl	8000c48 <HAL_InitTick>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d002      	beq.n	8000c36 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000c30:	2301      	movs	r3, #1
 8000c32:	71fb      	strb	r3, [r7, #7]
 8000c34:	e001      	b.n	8000c3a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c36:	f7ff fe3b 	bl	80008b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c3a:	79fb      	ldrb	r3, [r7, #7]
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	3708      	adds	r7, #8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	40022000 	.word	0x40022000

08000c48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c50:	2300      	movs	r3, #0
 8000c52:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c54:	4b17      	ldr	r3, [pc, #92]	; (8000cb4 <HAL_InitTick+0x6c>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d023      	beq.n	8000ca4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c5c:	4b16      	ldr	r3, [pc, #88]	; (8000cb8 <HAL_InitTick+0x70>)
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	4b14      	ldr	r3, [pc, #80]	; (8000cb4 <HAL_InitTick+0x6c>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	4619      	mov	r1, r3
 8000c66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c72:	4618      	mov	r0, r3
 8000c74:	f000 f93f 	bl	8000ef6 <HAL_SYSTICK_Config>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d10f      	bne.n	8000c9e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2b0f      	cmp	r3, #15
 8000c82:	d809      	bhi.n	8000c98 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c84:	2200      	movs	r2, #0
 8000c86:	6879      	ldr	r1, [r7, #4]
 8000c88:	f04f 30ff 	mov.w	r0, #4294967295
 8000c8c:	f000 f917 	bl	8000ebe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c90:	4a0a      	ldr	r2, [pc, #40]	; (8000cbc <HAL_InitTick+0x74>)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6013      	str	r3, [r2, #0]
 8000c96:	e007      	b.n	8000ca8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	73fb      	strb	r3, [r7, #15]
 8000c9c:	e004      	b.n	8000ca8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	73fb      	strb	r3, [r7, #15]
 8000ca2:	e001      	b.n	8000ca8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3710      	adds	r7, #16
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	20000008 	.word	0x20000008
 8000cb8:	20000000 	.word	0x20000000
 8000cbc:	20000004 	.word	0x20000004

08000cc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cc4:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <HAL_IncTick+0x20>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	461a      	mov	r2, r3
 8000cca:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <HAL_IncTick+0x24>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4413      	add	r3, r2
 8000cd0:	4a04      	ldr	r2, [pc, #16]	; (8000ce4 <HAL_IncTick+0x24>)
 8000cd2:	6013      	str	r3, [r2, #0]
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	20000008 	.word	0x20000008
 8000ce4:	2000012c 	.word	0x2000012c

08000ce8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  return uwTick;
 8000cec:	4b03      	ldr	r3, [pc, #12]	; (8000cfc <HAL_GetTick+0x14>)
 8000cee:	681b      	ldr	r3, [r3, #0]
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	2000012c 	.word	0x2000012c

08000d00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d08:	f7ff ffee 	bl	8000ce8 <HAL_GetTick>
 8000d0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d18:	d005      	beq.n	8000d26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000d1a:	4b09      	ldr	r3, [pc, #36]	; (8000d40 <HAL_Delay+0x40>)
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	461a      	mov	r2, r3
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	4413      	add	r3, r2
 8000d24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d26:	bf00      	nop
 8000d28:	f7ff ffde 	bl	8000ce8 <HAL_GetTick>
 8000d2c:	4602      	mov	r2, r0
 8000d2e:	68bb      	ldr	r3, [r7, #8]
 8000d30:	1ad3      	subs	r3, r2, r3
 8000d32:	68fa      	ldr	r2, [r7, #12]
 8000d34:	429a      	cmp	r2, r3
 8000d36:	d8f7      	bhi.n	8000d28 <HAL_Delay+0x28>
  {
  }
}
 8000d38:	bf00      	nop
 8000d3a:	3710      	adds	r7, #16
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	20000008 	.word	0x20000008

08000d44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b085      	sub	sp, #20
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	f003 0307 	and.w	r3, r3, #7
 8000d52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d54:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <__NVIC_SetPriorityGrouping+0x44>)
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d5a:	68ba      	ldr	r2, [r7, #8]
 8000d5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d60:	4013      	ands	r3, r2
 8000d62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d76:	4a04      	ldr	r2, [pc, #16]	; (8000d88 <__NVIC_SetPriorityGrouping+0x44>)
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	60d3      	str	r3, [r2, #12]
}
 8000d7c:	bf00      	nop
 8000d7e:	3714      	adds	r7, #20
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d90:	4b04      	ldr	r3, [pc, #16]	; (8000da4 <__NVIC_GetPriorityGrouping+0x18>)
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	0a1b      	lsrs	r3, r3, #8
 8000d96:	f003 0307 	and.w	r3, r3, #7
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	6039      	str	r1, [r7, #0]
 8000db2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	db0a      	blt.n	8000dd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	b2da      	uxtb	r2, r3
 8000dc0:	490c      	ldr	r1, [pc, #48]	; (8000df4 <__NVIC_SetPriority+0x4c>)
 8000dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc6:	0112      	lsls	r2, r2, #4
 8000dc8:	b2d2      	uxtb	r2, r2
 8000dca:	440b      	add	r3, r1
 8000dcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dd0:	e00a      	b.n	8000de8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	b2da      	uxtb	r2, r3
 8000dd6:	4908      	ldr	r1, [pc, #32]	; (8000df8 <__NVIC_SetPriority+0x50>)
 8000dd8:	79fb      	ldrb	r3, [r7, #7]
 8000dda:	f003 030f 	and.w	r3, r3, #15
 8000dde:	3b04      	subs	r3, #4
 8000de0:	0112      	lsls	r2, r2, #4
 8000de2:	b2d2      	uxtb	r2, r2
 8000de4:	440b      	add	r3, r1
 8000de6:	761a      	strb	r2, [r3, #24]
}
 8000de8:	bf00      	nop
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	e000e100 	.word	0xe000e100
 8000df8:	e000ed00 	.word	0xe000ed00

08000dfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b089      	sub	sp, #36	; 0x24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	60f8      	str	r0, [r7, #12]
 8000e04:	60b9      	str	r1, [r7, #8]
 8000e06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	f003 0307 	and.w	r3, r3, #7
 8000e0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	f1c3 0307 	rsb	r3, r3, #7
 8000e16:	2b04      	cmp	r3, #4
 8000e18:	bf28      	it	cs
 8000e1a:	2304      	movcs	r3, #4
 8000e1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	3304      	adds	r3, #4
 8000e22:	2b06      	cmp	r3, #6
 8000e24:	d902      	bls.n	8000e2c <NVIC_EncodePriority+0x30>
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	3b03      	subs	r3, #3
 8000e2a:	e000      	b.n	8000e2e <NVIC_EncodePriority+0x32>
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e30:	f04f 32ff 	mov.w	r2, #4294967295
 8000e34:	69bb      	ldr	r3, [r7, #24]
 8000e36:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3a:	43da      	mvns	r2, r3
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	401a      	ands	r2, r3
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e44:	f04f 31ff 	mov.w	r1, #4294967295
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4e:	43d9      	mvns	r1, r3
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e54:	4313      	orrs	r3, r2
         );
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3724      	adds	r7, #36	; 0x24
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
	...

08000e64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	3b01      	subs	r3, #1
 8000e70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e74:	d301      	bcc.n	8000e7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e76:	2301      	movs	r3, #1
 8000e78:	e00f      	b.n	8000e9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e7a:	4a0a      	ldr	r2, [pc, #40]	; (8000ea4 <SysTick_Config+0x40>)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	3b01      	subs	r3, #1
 8000e80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e82:	210f      	movs	r1, #15
 8000e84:	f04f 30ff 	mov.w	r0, #4294967295
 8000e88:	f7ff ff8e 	bl	8000da8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e8c:	4b05      	ldr	r3, [pc, #20]	; (8000ea4 <SysTick_Config+0x40>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e92:	4b04      	ldr	r3, [pc, #16]	; (8000ea4 <SysTick_Config+0x40>)
 8000e94:	2207      	movs	r2, #7
 8000e96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e98:	2300      	movs	r3, #0
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	e000e010 	.word	0xe000e010

08000ea8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	f7ff ff47 	bl	8000d44 <__NVIC_SetPriorityGrouping>
}
 8000eb6:	bf00      	nop
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b086      	sub	sp, #24
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	60b9      	str	r1, [r7, #8]
 8000ec8:	607a      	str	r2, [r7, #4]
 8000eca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ed0:	f7ff ff5c 	bl	8000d8c <__NVIC_GetPriorityGrouping>
 8000ed4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ed6:	687a      	ldr	r2, [r7, #4]
 8000ed8:	68b9      	ldr	r1, [r7, #8]
 8000eda:	6978      	ldr	r0, [r7, #20]
 8000edc:	f7ff ff8e 	bl	8000dfc <NVIC_EncodePriority>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ee6:	4611      	mov	r1, r2
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff ff5d 	bl	8000da8 <__NVIC_SetPriority>
}
 8000eee:	bf00      	nop
 8000ef0:	3718      	adds	r7, #24
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b082      	sub	sp, #8
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f7ff ffb0 	bl	8000e64 <SysTick_Config>
 8000f04:	4603      	mov	r3, r0
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b082      	sub	sp, #8
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d101      	bne.n	8000f20 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	e014      	b.n	8000f4a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	791b      	ldrb	r3, [r3, #4]
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d105      	bne.n	8000f36 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f7ff fb4f 	bl	80005d4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2202      	movs	r2, #2
 8000f3a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2200      	movs	r2, #0
 8000f40:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2201      	movs	r2, #1
 8000f46:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8000f48:	2300      	movs	r3, #0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8000f52:	b480      	push	{r7}
 8000f54:	b083      	sub	sp, #12
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
 8000f5a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	795b      	ldrb	r3, [r3, #5]
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d101      	bne.n	8000f68 <HAL_DAC_Start+0x16>
 8000f64:	2302      	movs	r3, #2
 8000f66:	e03b      	b.n	8000fe0 <HAL_DAC_Start+0x8e>
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2202      	movs	r2, #2
 8000f72:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	6819      	ldr	r1, [r3, #0]
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	f003 0310 	and.w	r3, r3, #16
 8000f80:	2201      	movs	r2, #1
 8000f82:	409a      	lsls	r2, r3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	430a      	orrs	r2, r1
 8000f8a:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d10f      	bne.n	8000fb2 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8000f9c:	2b04      	cmp	r3, #4
 8000f9e:	d118      	bne.n	8000fd2 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	685a      	ldr	r2, [r3, #4]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f042 0201 	orr.w	r2, r2, #1
 8000fae:	605a      	str	r2, [r3, #4]
 8000fb0:	e00f      	b.n	8000fd2 <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000fbc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000fc0:	d107      	bne.n	8000fd2 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	685a      	ldr	r2, [r3, #4]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f042 0202 	orr.w	r2, r2, #2
 8000fd0:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000fde:	2300      	movs	r3, #0
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b087      	sub	sp, #28
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
 8000ff8:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d105      	bne.n	8001016 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800100a:	697a      	ldr	r2, [r7, #20]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	4413      	add	r3, r2
 8001010:	3308      	adds	r3, #8
 8001012:	617b      	str	r3, [r7, #20]
 8001014:	e004      	b.n	8001020 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001016:	697a      	ldr	r2, [r7, #20]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	4413      	add	r3, r2
 800101c:	3314      	adds	r3, #20
 800101e:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	461a      	mov	r2, r3
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001028:	2300      	movs	r3, #0
}
 800102a:	4618      	mov	r0, r3
 800102c:	371c      	adds	r7, #28
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr

08001036 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001036:	b580      	push	{r7, lr}
 8001038:	b088      	sub	sp, #32
 800103a:	af00      	add	r7, sp, #0
 800103c:	60f8      	str	r0, [r7, #12]
 800103e:	60b9      	str	r1, [r7, #8]
 8001040:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8001042:	2300      	movs	r3, #0
 8001044:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	795b      	ldrb	r3, [r3, #5]
 800104a:	2b01      	cmp	r3, #1
 800104c:	d101      	bne.n	8001052 <HAL_DAC_ConfigChannel+0x1c>
 800104e:	2302      	movs	r3, #2
 8001050:	e107      	b.n	8001262 <HAL_DAC_ConfigChannel+0x22c>
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	2201      	movs	r2, #1
 8001056:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	2202      	movs	r2, #2
 800105c:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	2b04      	cmp	r3, #4
 8001064:	d174      	bne.n	8001150 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001066:	f7ff fe3f 	bl	8000ce8 <HAL_GetTick>
 800106a:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d134      	bne.n	80010dc <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001072:	e011      	b.n	8001098 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001074:	f7ff fe38 	bl	8000ce8 <HAL_GetTick>
 8001078:	4602      	mov	r2, r0
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	2b01      	cmp	r3, #1
 8001080:	d90a      	bls.n	8001098 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	691b      	ldr	r3, [r3, #16]
 8001086:	f043 0208 	orr.w	r2, r3, #8
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	2203      	movs	r2, #3
 8001092:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001094:	2303      	movs	r3, #3
 8001096:	e0e4      	b.n	8001262 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800109e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d1e6      	bne.n	8001074 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 80010a6:	2001      	movs	r0, #1
 80010a8:	f7ff fe2a 	bl	8000d00 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	68ba      	ldr	r2, [r7, #8]
 80010b2:	6992      	ldr	r2, [r2, #24]
 80010b4:	641a      	str	r2, [r3, #64]	; 0x40
 80010b6:	e01e      	b.n	80010f6 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80010b8:	f7ff fe16 	bl	8000ce8 <HAL_GetTick>
 80010bc:	4602      	mov	r2, r0
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d90a      	bls.n	80010dc <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	691b      	ldr	r3, [r3, #16]
 80010ca:	f043 0208 	orr.w	r2, r3, #8
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	2203      	movs	r2, #3
 80010d6:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80010d8:	2303      	movs	r3, #3
 80010da:	e0c2      	b.n	8001262 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	dbe8      	blt.n	80010b8 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 80010e6:	2001      	movs	r0, #1
 80010e8:	f7ff fe0a 	bl	8000d00 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	68ba      	ldr	r2, [r7, #8]
 80010f2:	6992      	ldr	r2, [r2, #24]
 80010f4:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f003 0310 	and.w	r3, r3, #16
 8001102:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8001106:	fa01 f303 	lsl.w	r3, r1, r3
 800110a:	43db      	mvns	r3, r3
 800110c:	ea02 0103 	and.w	r1, r2, r3
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	69da      	ldr	r2, [r3, #28]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	f003 0310 	and.w	r3, r3, #16
 800111a:	409a      	lsls	r2, r3
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	430a      	orrs	r2, r1
 8001122:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f003 0310 	and.w	r3, r3, #16
 8001130:	21ff      	movs	r1, #255	; 0xff
 8001132:	fa01 f303 	lsl.w	r3, r1, r3
 8001136:	43db      	mvns	r3, r3
 8001138:	ea02 0103 	and.w	r1, r2, r3
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	6a1a      	ldr	r2, [r3, #32]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f003 0310 	and.w	r3, r3, #16
 8001146:	409a      	lsls	r2, r3
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	430a      	orrs	r2, r1
 800114e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	691b      	ldr	r3, [r3, #16]
 8001154:	2b01      	cmp	r3, #1
 8001156:	d11d      	bne.n	8001194 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800115e:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f003 0310 	and.w	r3, r3, #16
 8001166:	221f      	movs	r2, #31
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	43db      	mvns	r3, r3
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	4013      	ands	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	695b      	ldr	r3, [r3, #20]
 8001178:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	f003 0310 	and.w	r3, r3, #16
 8001180:	697a      	ldr	r2, [r7, #20]
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	4313      	orrs	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800119a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f003 0310 	and.w	r3, r3, #16
 80011a2:	2207      	movs	r2, #7
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	43db      	mvns	r3, r3
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	4013      	ands	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	431a      	orrs	r2, r3
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	68db      	ldr	r3, [r3, #12]
 80011be:	4313      	orrs	r3, r2
 80011c0:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	f003 0310 	and.w	r3, r3, #16
 80011c8:	697a      	ldr	r2, [r7, #20]
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	6819      	ldr	r1, [r3, #0]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	f003 0310 	and.w	r3, r3, #16
 80011e8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	43da      	mvns	r2, r3
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	400a      	ands	r2, r1
 80011f8:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	f003 0310 	and.w	r3, r3, #16
 8001208:	f640 72fc 	movw	r2, #4092	; 0xffc
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	43db      	mvns	r3, r3
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4013      	ands	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	f003 0310 	and.w	r3, r3, #16
 8001224:	697a      	ldr	r2, [r7, #20]
 8001226:	fa02 f303 	lsl.w	r3, r2, r3
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	4313      	orrs	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	6819      	ldr	r1, [r3, #0]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f003 0310 	and.w	r3, r3, #16
 8001244:	22c0      	movs	r2, #192	; 0xc0
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	43da      	mvns	r2, r3
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	400a      	ands	r2, r1
 8001252:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	2201      	movs	r2, #1
 8001258:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	2200      	movs	r2, #0
 800125e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001260:	2300      	movs	r3, #0
}
 8001262:	4618      	mov	r0, r3
 8001264:	3720      	adds	r7, #32
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
	...

0800126c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800126c:	b480      	push	{r7}
 800126e:	b087      	sub	sp, #28
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001276:	2300      	movs	r3, #0
 8001278:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800127a:	e17f      	b.n	800157c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	2101      	movs	r1, #1
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	fa01 f303 	lsl.w	r3, r1, r3
 8001288:	4013      	ands	r3, r2
 800128a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	2b00      	cmp	r3, #0
 8001290:	f000 8171 	beq.w	8001576 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	2b01      	cmp	r3, #1
 800129a:	d00b      	beq.n	80012b4 <HAL_GPIO_Init+0x48>
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	d007      	beq.n	80012b4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012a8:	2b11      	cmp	r3, #17
 80012aa:	d003      	beq.n	80012b4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	2b12      	cmp	r3, #18
 80012b2:	d130      	bne.n	8001316 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	2203      	movs	r2, #3
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	43db      	mvns	r3, r3
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	4013      	ands	r3, r2
 80012ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	68da      	ldr	r2, [r3, #12]
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	693a      	ldr	r2, [r7, #16]
 80012da:	4313      	orrs	r3, r2
 80012dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012ea:	2201      	movs	r2, #1
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	43db      	mvns	r3, r3
 80012f4:	693a      	ldr	r2, [r7, #16]
 80012f6:	4013      	ands	r3, r2
 80012f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	091b      	lsrs	r3, r3, #4
 8001300:	f003 0201 	and.w	r2, r3, #1
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	4313      	orrs	r3, r2
 800130e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f003 0303 	and.w	r3, r3, #3
 800131e:	2b03      	cmp	r3, #3
 8001320:	d118      	bne.n	8001354 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001326:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001328:	2201      	movs	r2, #1
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	43db      	mvns	r3, r3
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	4013      	ands	r3, r2
 8001336:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	08db      	lsrs	r3, r3, #3
 800133e:	f003 0201 	and.w	r2, r3, #1
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	4313      	orrs	r3, r2
 800134c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	693a      	ldr	r2, [r7, #16]
 8001352:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	2203      	movs	r2, #3
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	43db      	mvns	r3, r3
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	4013      	ands	r3, r2
 800136a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	689a      	ldr	r2, [r3, #8]
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	693a      	ldr	r2, [r7, #16]
 800137a:	4313      	orrs	r3, r2
 800137c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	693a      	ldr	r2, [r7, #16]
 8001382:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	2b02      	cmp	r3, #2
 800138a:	d003      	beq.n	8001394 <HAL_GPIO_Init+0x128>
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	2b12      	cmp	r3, #18
 8001392:	d123      	bne.n	80013dc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	08da      	lsrs	r2, r3, #3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	3208      	adds	r2, #8
 800139c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	f003 0307 	and.w	r3, r3, #7
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	220f      	movs	r2, #15
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	43db      	mvns	r3, r3
 80013b2:	693a      	ldr	r2, [r7, #16]
 80013b4:	4013      	ands	r3, r2
 80013b6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	691a      	ldr	r2, [r3, #16]
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	f003 0307 	and.w	r3, r3, #7
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	08da      	lsrs	r2, r3, #3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	3208      	adds	r2, #8
 80013d6:	6939      	ldr	r1, [r7, #16]
 80013d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	2203      	movs	r2, #3
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	43db      	mvns	r3, r3
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	4013      	ands	r3, r2
 80013f2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f003 0203 	and.w	r2, r3, #3
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	693a      	ldr	r2, [r7, #16]
 8001406:	4313      	orrs	r3, r2
 8001408:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	693a      	ldr	r2, [r7, #16]
 800140e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001418:	2b00      	cmp	r3, #0
 800141a:	f000 80ac 	beq.w	8001576 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800141e:	4b5e      	ldr	r3, [pc, #376]	; (8001598 <HAL_GPIO_Init+0x32c>)
 8001420:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001422:	4a5d      	ldr	r2, [pc, #372]	; (8001598 <HAL_GPIO_Init+0x32c>)
 8001424:	f043 0301 	orr.w	r3, r3, #1
 8001428:	6613      	str	r3, [r2, #96]	; 0x60
 800142a:	4b5b      	ldr	r3, [pc, #364]	; (8001598 <HAL_GPIO_Init+0x32c>)
 800142c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800142e:	f003 0301 	and.w	r3, r3, #1
 8001432:	60bb      	str	r3, [r7, #8]
 8001434:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001436:	4a59      	ldr	r2, [pc, #356]	; (800159c <HAL_GPIO_Init+0x330>)
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	089b      	lsrs	r3, r3, #2
 800143c:	3302      	adds	r3, #2
 800143e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001442:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	f003 0303 	and.w	r3, r3, #3
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	220f      	movs	r2, #15
 800144e:	fa02 f303 	lsl.w	r3, r2, r3
 8001452:	43db      	mvns	r3, r3
 8001454:	693a      	ldr	r2, [r7, #16]
 8001456:	4013      	ands	r3, r2
 8001458:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001460:	d025      	beq.n	80014ae <HAL_GPIO_Init+0x242>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a4e      	ldr	r2, [pc, #312]	; (80015a0 <HAL_GPIO_Init+0x334>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d01f      	beq.n	80014aa <HAL_GPIO_Init+0x23e>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a4d      	ldr	r2, [pc, #308]	; (80015a4 <HAL_GPIO_Init+0x338>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d019      	beq.n	80014a6 <HAL_GPIO_Init+0x23a>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a4c      	ldr	r2, [pc, #304]	; (80015a8 <HAL_GPIO_Init+0x33c>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d013      	beq.n	80014a2 <HAL_GPIO_Init+0x236>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a4b      	ldr	r2, [pc, #300]	; (80015ac <HAL_GPIO_Init+0x340>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d00d      	beq.n	800149e <HAL_GPIO_Init+0x232>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a4a      	ldr	r2, [pc, #296]	; (80015b0 <HAL_GPIO_Init+0x344>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d007      	beq.n	800149a <HAL_GPIO_Init+0x22e>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a49      	ldr	r2, [pc, #292]	; (80015b4 <HAL_GPIO_Init+0x348>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d101      	bne.n	8001496 <HAL_GPIO_Init+0x22a>
 8001492:	2306      	movs	r3, #6
 8001494:	e00c      	b.n	80014b0 <HAL_GPIO_Init+0x244>
 8001496:	2307      	movs	r3, #7
 8001498:	e00a      	b.n	80014b0 <HAL_GPIO_Init+0x244>
 800149a:	2305      	movs	r3, #5
 800149c:	e008      	b.n	80014b0 <HAL_GPIO_Init+0x244>
 800149e:	2304      	movs	r3, #4
 80014a0:	e006      	b.n	80014b0 <HAL_GPIO_Init+0x244>
 80014a2:	2303      	movs	r3, #3
 80014a4:	e004      	b.n	80014b0 <HAL_GPIO_Init+0x244>
 80014a6:	2302      	movs	r3, #2
 80014a8:	e002      	b.n	80014b0 <HAL_GPIO_Init+0x244>
 80014aa:	2301      	movs	r3, #1
 80014ac:	e000      	b.n	80014b0 <HAL_GPIO_Init+0x244>
 80014ae:	2300      	movs	r3, #0
 80014b0:	697a      	ldr	r2, [r7, #20]
 80014b2:	f002 0203 	and.w	r2, r2, #3
 80014b6:	0092      	lsls	r2, r2, #2
 80014b8:	4093      	lsls	r3, r2
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	4313      	orrs	r3, r2
 80014be:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014c0:	4936      	ldr	r1, [pc, #216]	; (800159c <HAL_GPIO_Init+0x330>)
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	089b      	lsrs	r3, r3, #2
 80014c6:	3302      	adds	r3, #2
 80014c8:	693a      	ldr	r2, [r7, #16]
 80014ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80014ce:	4b3a      	ldr	r3, [pc, #232]	; (80015b8 <HAL_GPIO_Init+0x34c>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	43db      	mvns	r3, r3
 80014d8:	693a      	ldr	r2, [r7, #16]
 80014da:	4013      	ands	r3, r2
 80014dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d003      	beq.n	80014f2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	4313      	orrs	r3, r2
 80014f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014f2:	4a31      	ldr	r2, [pc, #196]	; (80015b8 <HAL_GPIO_Init+0x34c>)
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80014f8:	4b2f      	ldr	r3, [pc, #188]	; (80015b8 <HAL_GPIO_Init+0x34c>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	43db      	mvns	r3, r3
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	4013      	ands	r3, r2
 8001506:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001510:	2b00      	cmp	r3, #0
 8001512:	d003      	beq.n	800151c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001514:	693a      	ldr	r2, [r7, #16]
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	4313      	orrs	r3, r2
 800151a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800151c:	4a26      	ldr	r2, [pc, #152]	; (80015b8 <HAL_GPIO_Init+0x34c>)
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001522:	4b25      	ldr	r3, [pc, #148]	; (80015b8 <HAL_GPIO_Init+0x34c>)
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	43db      	mvns	r3, r3
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	4013      	ands	r3, r2
 8001530:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d003      	beq.n	8001546 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	4313      	orrs	r3, r2
 8001544:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001546:	4a1c      	ldr	r2, [pc, #112]	; (80015b8 <HAL_GPIO_Init+0x34c>)
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800154c:	4b1a      	ldr	r3, [pc, #104]	; (80015b8 <HAL_GPIO_Init+0x34c>)
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	43db      	mvns	r3, r3
 8001556:	693a      	ldr	r2, [r7, #16]
 8001558:	4013      	ands	r3, r2
 800155a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d003      	beq.n	8001570 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001568:	693a      	ldr	r2, [r7, #16]
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	4313      	orrs	r3, r2
 800156e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001570:	4a11      	ldr	r2, [pc, #68]	; (80015b8 <HAL_GPIO_Init+0x34c>)
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	3301      	adds	r3, #1
 800157a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	fa22 f303 	lsr.w	r3, r2, r3
 8001586:	2b00      	cmp	r3, #0
 8001588:	f47f ae78 	bne.w	800127c <HAL_GPIO_Init+0x10>
  }
}
 800158c:	bf00      	nop
 800158e:	371c      	adds	r7, #28
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	40021000 	.word	0x40021000
 800159c:	40010000 	.word	0x40010000
 80015a0:	48000400 	.word	0x48000400
 80015a4:	48000800 	.word	0x48000800
 80015a8:	48000c00 	.word	0x48000c00
 80015ac:	48001000 	.word	0x48001000
 80015b0:	48001400 	.word	0x48001400
 80015b4:	48001800 	.word	0x48001800
 80015b8:	40010400 	.word	0x40010400

080015bc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80015c0:	4b04      	ldr	r3, [pc, #16]	; (80015d4 <HAL_PWREx_GetVoltageRange+0x18>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	40007000 	.word	0x40007000

080015d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80015d8:	b480      	push	{r7}
 80015da:	b085      	sub	sp, #20
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015e6:	d130      	bne.n	800164a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80015e8:	4b23      	ldr	r3, [pc, #140]	; (8001678 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015f4:	d038      	beq.n	8001668 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80015f6:	4b20      	ldr	r3, [pc, #128]	; (8001678 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015fe:	4a1e      	ldr	r2, [pc, #120]	; (8001678 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001600:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001604:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001606:	4b1d      	ldr	r3, [pc, #116]	; (800167c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	2232      	movs	r2, #50	; 0x32
 800160c:	fb02 f303 	mul.w	r3, r2, r3
 8001610:	4a1b      	ldr	r2, [pc, #108]	; (8001680 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001612:	fba2 2303 	umull	r2, r3, r2, r3
 8001616:	0c9b      	lsrs	r3, r3, #18
 8001618:	3301      	adds	r3, #1
 800161a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800161c:	e002      	b.n	8001624 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	3b01      	subs	r3, #1
 8001622:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001624:	4b14      	ldr	r3, [pc, #80]	; (8001678 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001626:	695b      	ldr	r3, [r3, #20]
 8001628:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800162c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001630:	d102      	bne.n	8001638 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d1f2      	bne.n	800161e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001638:	4b0f      	ldr	r3, [pc, #60]	; (8001678 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800163a:	695b      	ldr	r3, [r3, #20]
 800163c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001640:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001644:	d110      	bne.n	8001668 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e00f      	b.n	800166a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800164a:	4b0b      	ldr	r3, [pc, #44]	; (8001678 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001652:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001656:	d007      	beq.n	8001668 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001658:	4b07      	ldr	r3, [pc, #28]	; (8001678 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001660:	4a05      	ldr	r2, [pc, #20]	; (8001678 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001662:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001666:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	3714      	adds	r7, #20
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	40007000 	.word	0x40007000
 800167c:	20000000 	.word	0x20000000
 8001680:	431bde83 	.word	0x431bde83

08001684 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b088      	sub	sp, #32
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d101      	bne.n	8001696 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e3d4      	b.n	8001e40 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001696:	4ba1      	ldr	r3, [pc, #644]	; (800191c <HAL_RCC_OscConfig+0x298>)
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	f003 030c 	and.w	r3, r3, #12
 800169e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016a0:	4b9e      	ldr	r3, [pc, #632]	; (800191c <HAL_RCC_OscConfig+0x298>)
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	f003 0303 	and.w	r3, r3, #3
 80016a8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0310 	and.w	r3, r3, #16
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	f000 80e4 	beq.w	8001880 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d007      	beq.n	80016ce <HAL_RCC_OscConfig+0x4a>
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	2b0c      	cmp	r3, #12
 80016c2:	f040 808b 	bne.w	80017dc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	f040 8087 	bne.w	80017dc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016ce:	4b93      	ldr	r3, [pc, #588]	; (800191c <HAL_RCC_OscConfig+0x298>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d005      	beq.n	80016e6 <HAL_RCC_OscConfig+0x62>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	699b      	ldr	r3, [r3, #24]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d101      	bne.n	80016e6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e3ac      	b.n	8001e40 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6a1a      	ldr	r2, [r3, #32]
 80016ea:	4b8c      	ldr	r3, [pc, #560]	; (800191c <HAL_RCC_OscConfig+0x298>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0308 	and.w	r3, r3, #8
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d004      	beq.n	8001700 <HAL_RCC_OscConfig+0x7c>
 80016f6:	4b89      	ldr	r3, [pc, #548]	; (800191c <HAL_RCC_OscConfig+0x298>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016fe:	e005      	b.n	800170c <HAL_RCC_OscConfig+0x88>
 8001700:	4b86      	ldr	r3, [pc, #536]	; (800191c <HAL_RCC_OscConfig+0x298>)
 8001702:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001706:	091b      	lsrs	r3, r3, #4
 8001708:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800170c:	4293      	cmp	r3, r2
 800170e:	d223      	bcs.n	8001758 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6a1b      	ldr	r3, [r3, #32]
 8001714:	4618      	mov	r0, r3
 8001716:	f000 fd3f 	bl	8002198 <RCC_SetFlashLatencyFromMSIRange>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e38d      	b.n	8001e40 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001724:	4b7d      	ldr	r3, [pc, #500]	; (800191c <HAL_RCC_OscConfig+0x298>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a7c      	ldr	r2, [pc, #496]	; (800191c <HAL_RCC_OscConfig+0x298>)
 800172a:	f043 0308 	orr.w	r3, r3, #8
 800172e:	6013      	str	r3, [r2, #0]
 8001730:	4b7a      	ldr	r3, [pc, #488]	; (800191c <HAL_RCC_OscConfig+0x298>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6a1b      	ldr	r3, [r3, #32]
 800173c:	4977      	ldr	r1, [pc, #476]	; (800191c <HAL_RCC_OscConfig+0x298>)
 800173e:	4313      	orrs	r3, r2
 8001740:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001742:	4b76      	ldr	r3, [pc, #472]	; (800191c <HAL_RCC_OscConfig+0x298>)
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	69db      	ldr	r3, [r3, #28]
 800174e:	021b      	lsls	r3, r3, #8
 8001750:	4972      	ldr	r1, [pc, #456]	; (800191c <HAL_RCC_OscConfig+0x298>)
 8001752:	4313      	orrs	r3, r2
 8001754:	604b      	str	r3, [r1, #4]
 8001756:	e025      	b.n	80017a4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001758:	4b70      	ldr	r3, [pc, #448]	; (800191c <HAL_RCC_OscConfig+0x298>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a6f      	ldr	r2, [pc, #444]	; (800191c <HAL_RCC_OscConfig+0x298>)
 800175e:	f043 0308 	orr.w	r3, r3, #8
 8001762:	6013      	str	r3, [r2, #0]
 8001764:	4b6d      	ldr	r3, [pc, #436]	; (800191c <HAL_RCC_OscConfig+0x298>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6a1b      	ldr	r3, [r3, #32]
 8001770:	496a      	ldr	r1, [pc, #424]	; (800191c <HAL_RCC_OscConfig+0x298>)
 8001772:	4313      	orrs	r3, r2
 8001774:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001776:	4b69      	ldr	r3, [pc, #420]	; (800191c <HAL_RCC_OscConfig+0x298>)
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	69db      	ldr	r3, [r3, #28]
 8001782:	021b      	lsls	r3, r3, #8
 8001784:	4965      	ldr	r1, [pc, #404]	; (800191c <HAL_RCC_OscConfig+0x298>)
 8001786:	4313      	orrs	r3, r2
 8001788:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d109      	bne.n	80017a4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6a1b      	ldr	r3, [r3, #32]
 8001794:	4618      	mov	r0, r3
 8001796:	f000 fcff 	bl	8002198 <RCC_SetFlashLatencyFromMSIRange>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e34d      	b.n	8001e40 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80017a4:	f000 fc36 	bl	8002014 <HAL_RCC_GetSysClockFreq>
 80017a8:	4601      	mov	r1, r0
 80017aa:	4b5c      	ldr	r3, [pc, #368]	; (800191c <HAL_RCC_OscConfig+0x298>)
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	091b      	lsrs	r3, r3, #4
 80017b0:	f003 030f 	and.w	r3, r3, #15
 80017b4:	4a5a      	ldr	r2, [pc, #360]	; (8001920 <HAL_RCC_OscConfig+0x29c>)
 80017b6:	5cd3      	ldrb	r3, [r2, r3]
 80017b8:	f003 031f 	and.w	r3, r3, #31
 80017bc:	fa21 f303 	lsr.w	r3, r1, r3
 80017c0:	4a58      	ldr	r2, [pc, #352]	; (8001924 <HAL_RCC_OscConfig+0x2a0>)
 80017c2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80017c4:	4b58      	ldr	r3, [pc, #352]	; (8001928 <HAL_RCC_OscConfig+0x2a4>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff fa3d 	bl	8000c48 <HAL_InitTick>
 80017ce:	4603      	mov	r3, r0
 80017d0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80017d2:	7bfb      	ldrb	r3, [r7, #15]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d052      	beq.n	800187e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80017d8:	7bfb      	ldrb	r3, [r7, #15]
 80017da:	e331      	b.n	8001e40 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	699b      	ldr	r3, [r3, #24]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d032      	beq.n	800184a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80017e4:	4b4d      	ldr	r3, [pc, #308]	; (800191c <HAL_RCC_OscConfig+0x298>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a4c      	ldr	r2, [pc, #304]	; (800191c <HAL_RCC_OscConfig+0x298>)
 80017ea:	f043 0301 	orr.w	r3, r3, #1
 80017ee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017f0:	f7ff fa7a 	bl	8000ce8 <HAL_GetTick>
 80017f4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017f6:	e008      	b.n	800180a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017f8:	f7ff fa76 	bl	8000ce8 <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b02      	cmp	r3, #2
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e31a      	b.n	8001e40 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800180a:	4b44      	ldr	r3, [pc, #272]	; (800191c <HAL_RCC_OscConfig+0x298>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	2b00      	cmp	r3, #0
 8001814:	d0f0      	beq.n	80017f8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001816:	4b41      	ldr	r3, [pc, #260]	; (800191c <HAL_RCC_OscConfig+0x298>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a40      	ldr	r2, [pc, #256]	; (800191c <HAL_RCC_OscConfig+0x298>)
 800181c:	f043 0308 	orr.w	r3, r3, #8
 8001820:	6013      	str	r3, [r2, #0]
 8001822:	4b3e      	ldr	r3, [pc, #248]	; (800191c <HAL_RCC_OscConfig+0x298>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6a1b      	ldr	r3, [r3, #32]
 800182e:	493b      	ldr	r1, [pc, #236]	; (800191c <HAL_RCC_OscConfig+0x298>)
 8001830:	4313      	orrs	r3, r2
 8001832:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001834:	4b39      	ldr	r3, [pc, #228]	; (800191c <HAL_RCC_OscConfig+0x298>)
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	69db      	ldr	r3, [r3, #28]
 8001840:	021b      	lsls	r3, r3, #8
 8001842:	4936      	ldr	r1, [pc, #216]	; (800191c <HAL_RCC_OscConfig+0x298>)
 8001844:	4313      	orrs	r3, r2
 8001846:	604b      	str	r3, [r1, #4]
 8001848:	e01a      	b.n	8001880 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800184a:	4b34      	ldr	r3, [pc, #208]	; (800191c <HAL_RCC_OscConfig+0x298>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a33      	ldr	r2, [pc, #204]	; (800191c <HAL_RCC_OscConfig+0x298>)
 8001850:	f023 0301 	bic.w	r3, r3, #1
 8001854:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001856:	f7ff fa47 	bl	8000ce8 <HAL_GetTick>
 800185a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800185c:	e008      	b.n	8001870 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800185e:	f7ff fa43 	bl	8000ce8 <HAL_GetTick>
 8001862:	4602      	mov	r2, r0
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	2b02      	cmp	r3, #2
 800186a:	d901      	bls.n	8001870 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800186c:	2303      	movs	r3, #3
 800186e:	e2e7      	b.n	8001e40 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001870:	4b2a      	ldr	r3, [pc, #168]	; (800191c <HAL_RCC_OscConfig+0x298>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0302 	and.w	r3, r3, #2
 8001878:	2b00      	cmp	r3, #0
 800187a:	d1f0      	bne.n	800185e <HAL_RCC_OscConfig+0x1da>
 800187c:	e000      	b.n	8001880 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800187e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0301 	and.w	r3, r3, #1
 8001888:	2b00      	cmp	r3, #0
 800188a:	d074      	beq.n	8001976 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	2b08      	cmp	r3, #8
 8001890:	d005      	beq.n	800189e <HAL_RCC_OscConfig+0x21a>
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	2b0c      	cmp	r3, #12
 8001896:	d10e      	bne.n	80018b6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	2b03      	cmp	r3, #3
 800189c:	d10b      	bne.n	80018b6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800189e:	4b1f      	ldr	r3, [pc, #124]	; (800191c <HAL_RCC_OscConfig+0x298>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d064      	beq.n	8001974 <HAL_RCC_OscConfig+0x2f0>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d160      	bne.n	8001974 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e2c4      	b.n	8001e40 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018be:	d106      	bne.n	80018ce <HAL_RCC_OscConfig+0x24a>
 80018c0:	4b16      	ldr	r3, [pc, #88]	; (800191c <HAL_RCC_OscConfig+0x298>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a15      	ldr	r2, [pc, #84]	; (800191c <HAL_RCC_OscConfig+0x298>)
 80018c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018ca:	6013      	str	r3, [r2, #0]
 80018cc:	e01d      	b.n	800190a <HAL_RCC_OscConfig+0x286>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018d6:	d10c      	bne.n	80018f2 <HAL_RCC_OscConfig+0x26e>
 80018d8:	4b10      	ldr	r3, [pc, #64]	; (800191c <HAL_RCC_OscConfig+0x298>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a0f      	ldr	r2, [pc, #60]	; (800191c <HAL_RCC_OscConfig+0x298>)
 80018de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018e2:	6013      	str	r3, [r2, #0]
 80018e4:	4b0d      	ldr	r3, [pc, #52]	; (800191c <HAL_RCC_OscConfig+0x298>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a0c      	ldr	r2, [pc, #48]	; (800191c <HAL_RCC_OscConfig+0x298>)
 80018ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018ee:	6013      	str	r3, [r2, #0]
 80018f0:	e00b      	b.n	800190a <HAL_RCC_OscConfig+0x286>
 80018f2:	4b0a      	ldr	r3, [pc, #40]	; (800191c <HAL_RCC_OscConfig+0x298>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a09      	ldr	r2, [pc, #36]	; (800191c <HAL_RCC_OscConfig+0x298>)
 80018f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018fc:	6013      	str	r3, [r2, #0]
 80018fe:	4b07      	ldr	r3, [pc, #28]	; (800191c <HAL_RCC_OscConfig+0x298>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a06      	ldr	r2, [pc, #24]	; (800191c <HAL_RCC_OscConfig+0x298>)
 8001904:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001908:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d01c      	beq.n	800194c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001912:	f7ff f9e9 	bl	8000ce8 <HAL_GetTick>
 8001916:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001918:	e011      	b.n	800193e <HAL_RCC_OscConfig+0x2ba>
 800191a:	bf00      	nop
 800191c:	40021000 	.word	0x40021000
 8001920:	080043c0 	.word	0x080043c0
 8001924:	20000000 	.word	0x20000000
 8001928:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800192c:	f7ff f9dc 	bl	8000ce8 <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b64      	cmp	r3, #100	; 0x64
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e280      	b.n	8001e40 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800193e:	4baf      	ldr	r3, [pc, #700]	; (8001bfc <HAL_RCC_OscConfig+0x578>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d0f0      	beq.n	800192c <HAL_RCC_OscConfig+0x2a8>
 800194a:	e014      	b.n	8001976 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800194c:	f7ff f9cc 	bl	8000ce8 <HAL_GetTick>
 8001950:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001952:	e008      	b.n	8001966 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001954:	f7ff f9c8 	bl	8000ce8 <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	2b64      	cmp	r3, #100	; 0x64
 8001960:	d901      	bls.n	8001966 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e26c      	b.n	8001e40 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001966:	4ba5      	ldr	r3, [pc, #660]	; (8001bfc <HAL_RCC_OscConfig+0x578>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d1f0      	bne.n	8001954 <HAL_RCC_OscConfig+0x2d0>
 8001972:	e000      	b.n	8001976 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001974:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0302 	and.w	r3, r3, #2
 800197e:	2b00      	cmp	r3, #0
 8001980:	d060      	beq.n	8001a44 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	2b04      	cmp	r3, #4
 8001986:	d005      	beq.n	8001994 <HAL_RCC_OscConfig+0x310>
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	2b0c      	cmp	r3, #12
 800198c:	d119      	bne.n	80019c2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	2b02      	cmp	r3, #2
 8001992:	d116      	bne.n	80019c2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001994:	4b99      	ldr	r3, [pc, #612]	; (8001bfc <HAL_RCC_OscConfig+0x578>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800199c:	2b00      	cmp	r3, #0
 800199e:	d005      	beq.n	80019ac <HAL_RCC_OscConfig+0x328>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d101      	bne.n	80019ac <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e249      	b.n	8001e40 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ac:	4b93      	ldr	r3, [pc, #588]	; (8001bfc <HAL_RCC_OscConfig+0x578>)
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	691b      	ldr	r3, [r3, #16]
 80019b8:	061b      	lsls	r3, r3, #24
 80019ba:	4990      	ldr	r1, [pc, #576]	; (8001bfc <HAL_RCC_OscConfig+0x578>)
 80019bc:	4313      	orrs	r3, r2
 80019be:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019c0:	e040      	b.n	8001a44 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d023      	beq.n	8001a12 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019ca:	4b8c      	ldr	r3, [pc, #560]	; (8001bfc <HAL_RCC_OscConfig+0x578>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a8b      	ldr	r2, [pc, #556]	; (8001bfc <HAL_RCC_OscConfig+0x578>)
 80019d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d6:	f7ff f987 	bl	8000ce8 <HAL_GetTick>
 80019da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019dc:	e008      	b.n	80019f0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019de:	f7ff f983 	bl	8000ce8 <HAL_GetTick>
 80019e2:	4602      	mov	r2, r0
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d901      	bls.n	80019f0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80019ec:	2303      	movs	r3, #3
 80019ee:	e227      	b.n	8001e40 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019f0:	4b82      	ldr	r3, [pc, #520]	; (8001bfc <HAL_RCC_OscConfig+0x578>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d0f0      	beq.n	80019de <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019fc:	4b7f      	ldr	r3, [pc, #508]	; (8001bfc <HAL_RCC_OscConfig+0x578>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	691b      	ldr	r3, [r3, #16]
 8001a08:	061b      	lsls	r3, r3, #24
 8001a0a:	497c      	ldr	r1, [pc, #496]	; (8001bfc <HAL_RCC_OscConfig+0x578>)
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	604b      	str	r3, [r1, #4]
 8001a10:	e018      	b.n	8001a44 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a12:	4b7a      	ldr	r3, [pc, #488]	; (8001bfc <HAL_RCC_OscConfig+0x578>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a79      	ldr	r2, [pc, #484]	; (8001bfc <HAL_RCC_OscConfig+0x578>)
 8001a18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a1e:	f7ff f963 	bl	8000ce8 <HAL_GetTick>
 8001a22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a24:	e008      	b.n	8001a38 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a26:	f7ff f95f 	bl	8000ce8 <HAL_GetTick>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d901      	bls.n	8001a38 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001a34:	2303      	movs	r3, #3
 8001a36:	e203      	b.n	8001e40 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a38:	4b70      	ldr	r3, [pc, #448]	; (8001bfc <HAL_RCC_OscConfig+0x578>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d1f0      	bne.n	8001a26 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0308 	and.w	r3, r3, #8
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d03c      	beq.n	8001aca <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	695b      	ldr	r3, [r3, #20]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d01c      	beq.n	8001a92 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a58:	4b68      	ldr	r3, [pc, #416]	; (8001bfc <HAL_RCC_OscConfig+0x578>)
 8001a5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a5e:	4a67      	ldr	r2, [pc, #412]	; (8001bfc <HAL_RCC_OscConfig+0x578>)
 8001a60:	f043 0301 	orr.w	r3, r3, #1
 8001a64:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a68:	f7ff f93e 	bl	8000ce8 <HAL_GetTick>
 8001a6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a6e:	e008      	b.n	8001a82 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a70:	f7ff f93a 	bl	8000ce8 <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e1de      	b.n	8001e40 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a82:	4b5e      	ldr	r3, [pc, #376]	; (8001bfc <HAL_RCC_OscConfig+0x578>)
 8001a84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a88:	f003 0302 	and.w	r3, r3, #2
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d0ef      	beq.n	8001a70 <HAL_RCC_OscConfig+0x3ec>
 8001a90:	e01b      	b.n	8001aca <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a92:	4b5a      	ldr	r3, [pc, #360]	; (8001bfc <HAL_RCC_OscConfig+0x578>)
 8001a94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a98:	4a58      	ldr	r2, [pc, #352]	; (8001bfc <HAL_RCC_OscConfig+0x578>)
 8001a9a:	f023 0301 	bic.w	r3, r3, #1
 8001a9e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aa2:	f7ff f921 	bl	8000ce8 <HAL_GetTick>
 8001aa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001aa8:	e008      	b.n	8001abc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aaa:	f7ff f91d 	bl	8000ce8 <HAL_GetTick>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d901      	bls.n	8001abc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	e1c1      	b.n	8001e40 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001abc:	4b4f      	ldr	r3, [pc, #316]	; (8001bfc <HAL_RCC_OscConfig+0x578>)
 8001abe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d1ef      	bne.n	8001aaa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0304 	and.w	r3, r3, #4
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	f000 80a6 	beq.w	8001c24 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001adc:	4b47      	ldr	r3, [pc, #284]	; (8001bfc <HAL_RCC_OscConfig+0x578>)
 8001ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d10d      	bne.n	8001b04 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ae8:	4b44      	ldr	r3, [pc, #272]	; (8001bfc <HAL_RCC_OscConfig+0x578>)
 8001aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aec:	4a43      	ldr	r2, [pc, #268]	; (8001bfc <HAL_RCC_OscConfig+0x578>)
 8001aee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001af2:	6593      	str	r3, [r2, #88]	; 0x58
 8001af4:	4b41      	ldr	r3, [pc, #260]	; (8001bfc <HAL_RCC_OscConfig+0x578>)
 8001af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001afc:	60bb      	str	r3, [r7, #8]
 8001afe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b00:	2301      	movs	r3, #1
 8001b02:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b04:	4b3e      	ldr	r3, [pc, #248]	; (8001c00 <HAL_RCC_OscConfig+0x57c>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d118      	bne.n	8001b42 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b10:	4b3b      	ldr	r3, [pc, #236]	; (8001c00 <HAL_RCC_OscConfig+0x57c>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a3a      	ldr	r2, [pc, #232]	; (8001c00 <HAL_RCC_OscConfig+0x57c>)
 8001b16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b1a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b1c:	f7ff f8e4 	bl	8000ce8 <HAL_GetTick>
 8001b20:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b22:	e008      	b.n	8001b36 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b24:	f7ff f8e0 	bl	8000ce8 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e184      	b.n	8001e40 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b36:	4b32      	ldr	r3, [pc, #200]	; (8001c00 <HAL_RCC_OscConfig+0x57c>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d0f0      	beq.n	8001b24 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d108      	bne.n	8001b5c <HAL_RCC_OscConfig+0x4d8>
 8001b4a:	4b2c      	ldr	r3, [pc, #176]	; (8001bfc <HAL_RCC_OscConfig+0x578>)
 8001b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b50:	4a2a      	ldr	r2, [pc, #168]	; (8001bfc <HAL_RCC_OscConfig+0x578>)
 8001b52:	f043 0301 	orr.w	r3, r3, #1
 8001b56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b5a:	e024      	b.n	8001ba6 <HAL_RCC_OscConfig+0x522>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	2b05      	cmp	r3, #5
 8001b62:	d110      	bne.n	8001b86 <HAL_RCC_OscConfig+0x502>
 8001b64:	4b25      	ldr	r3, [pc, #148]	; (8001bfc <HAL_RCC_OscConfig+0x578>)
 8001b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b6a:	4a24      	ldr	r2, [pc, #144]	; (8001bfc <HAL_RCC_OscConfig+0x578>)
 8001b6c:	f043 0304 	orr.w	r3, r3, #4
 8001b70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b74:	4b21      	ldr	r3, [pc, #132]	; (8001bfc <HAL_RCC_OscConfig+0x578>)
 8001b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b7a:	4a20      	ldr	r2, [pc, #128]	; (8001bfc <HAL_RCC_OscConfig+0x578>)
 8001b7c:	f043 0301 	orr.w	r3, r3, #1
 8001b80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b84:	e00f      	b.n	8001ba6 <HAL_RCC_OscConfig+0x522>
 8001b86:	4b1d      	ldr	r3, [pc, #116]	; (8001bfc <HAL_RCC_OscConfig+0x578>)
 8001b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b8c:	4a1b      	ldr	r2, [pc, #108]	; (8001bfc <HAL_RCC_OscConfig+0x578>)
 8001b8e:	f023 0301 	bic.w	r3, r3, #1
 8001b92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b96:	4b19      	ldr	r3, [pc, #100]	; (8001bfc <HAL_RCC_OscConfig+0x578>)
 8001b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b9c:	4a17      	ldr	r2, [pc, #92]	; (8001bfc <HAL_RCC_OscConfig+0x578>)
 8001b9e:	f023 0304 	bic.w	r3, r3, #4
 8001ba2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d016      	beq.n	8001bdc <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bae:	f7ff f89b 	bl	8000ce8 <HAL_GetTick>
 8001bb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bb4:	e00a      	b.n	8001bcc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bb6:	f7ff f897 	bl	8000ce8 <HAL_GetTick>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d901      	bls.n	8001bcc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	e139      	b.n	8001e40 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bcc:	4b0b      	ldr	r3, [pc, #44]	; (8001bfc <HAL_RCC_OscConfig+0x578>)
 8001bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d0ed      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x532>
 8001bda:	e01a      	b.n	8001c12 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bdc:	f7ff f884 	bl	8000ce8 <HAL_GetTick>
 8001be0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001be2:	e00f      	b.n	8001c04 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001be4:	f7ff f880 	bl	8000ce8 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d906      	bls.n	8001c04 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e122      	b.n	8001e40 <HAL_RCC_OscConfig+0x7bc>
 8001bfa:	bf00      	nop
 8001bfc:	40021000 	.word	0x40021000
 8001c00:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c04:	4b90      	ldr	r3, [pc, #576]	; (8001e48 <HAL_RCC_OscConfig+0x7c4>)
 8001c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c0a:	f003 0302 	and.w	r3, r3, #2
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d1e8      	bne.n	8001be4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c12:	7ffb      	ldrb	r3, [r7, #31]
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d105      	bne.n	8001c24 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c18:	4b8b      	ldr	r3, [pc, #556]	; (8001e48 <HAL_RCC_OscConfig+0x7c4>)
 8001c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c1c:	4a8a      	ldr	r2, [pc, #552]	; (8001e48 <HAL_RCC_OscConfig+0x7c4>)
 8001c1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c22:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	f000 8108 	beq.w	8001e3e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	f040 80d0 	bne.w	8001dd8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001c38:	4b83      	ldr	r3, [pc, #524]	; (8001e48 <HAL_RCC_OscConfig+0x7c4>)
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	f003 0203 	and.w	r2, r3, #3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d130      	bne.n	8001cae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	3b01      	subs	r3, #1
 8001c58:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d127      	bne.n	8001cae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c68:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d11f      	bne.n	8001cae <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c78:	2a07      	cmp	r2, #7
 8001c7a:	bf14      	ite	ne
 8001c7c:	2201      	movne	r2, #1
 8001c7e:	2200      	moveq	r2, #0
 8001c80:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d113      	bne.n	8001cae <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c90:	085b      	lsrs	r3, r3, #1
 8001c92:	3b01      	subs	r3, #1
 8001c94:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d109      	bne.n	8001cae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca4:	085b      	lsrs	r3, r3, #1
 8001ca6:	3b01      	subs	r3, #1
 8001ca8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d06e      	beq.n	8001d8c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	2b0c      	cmp	r3, #12
 8001cb2:	d069      	beq.n	8001d88 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001cb4:	4b64      	ldr	r3, [pc, #400]	; (8001e48 <HAL_RCC_OscConfig+0x7c4>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d105      	bne.n	8001ccc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001cc0:	4b61      	ldr	r3, [pc, #388]	; (8001e48 <HAL_RCC_OscConfig+0x7c4>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e0b7      	b.n	8001e40 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001cd0:	4b5d      	ldr	r3, [pc, #372]	; (8001e48 <HAL_RCC_OscConfig+0x7c4>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a5c      	ldr	r2, [pc, #368]	; (8001e48 <HAL_RCC_OscConfig+0x7c4>)
 8001cd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cda:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001cdc:	f7ff f804 	bl	8000ce8 <HAL_GetTick>
 8001ce0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ce2:	e008      	b.n	8001cf6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ce4:	f7ff f800 	bl	8000ce8 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e0a4      	b.n	8001e40 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cf6:	4b54      	ldr	r3, [pc, #336]	; (8001e48 <HAL_RCC_OscConfig+0x7c4>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d1f0      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d02:	4b51      	ldr	r3, [pc, #324]	; (8001e48 <HAL_RCC_OscConfig+0x7c4>)
 8001d04:	68da      	ldr	r2, [r3, #12]
 8001d06:	4b51      	ldr	r3, [pc, #324]	; (8001e4c <HAL_RCC_OscConfig+0x7c8>)
 8001d08:	4013      	ands	r3, r2
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001d12:	3a01      	subs	r2, #1
 8001d14:	0112      	lsls	r2, r2, #4
 8001d16:	4311      	orrs	r1, r2
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d1c:	0212      	lsls	r2, r2, #8
 8001d1e:	4311      	orrs	r1, r2
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001d24:	0852      	lsrs	r2, r2, #1
 8001d26:	3a01      	subs	r2, #1
 8001d28:	0552      	lsls	r2, r2, #21
 8001d2a:	4311      	orrs	r1, r2
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d30:	0852      	lsrs	r2, r2, #1
 8001d32:	3a01      	subs	r2, #1
 8001d34:	0652      	lsls	r2, r2, #25
 8001d36:	4311      	orrs	r1, r2
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d3c:	0912      	lsrs	r2, r2, #4
 8001d3e:	0452      	lsls	r2, r2, #17
 8001d40:	430a      	orrs	r2, r1
 8001d42:	4941      	ldr	r1, [pc, #260]	; (8001e48 <HAL_RCC_OscConfig+0x7c4>)
 8001d44:	4313      	orrs	r3, r2
 8001d46:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001d48:	4b3f      	ldr	r3, [pc, #252]	; (8001e48 <HAL_RCC_OscConfig+0x7c4>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a3e      	ldr	r2, [pc, #248]	; (8001e48 <HAL_RCC_OscConfig+0x7c4>)
 8001d4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d52:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d54:	4b3c      	ldr	r3, [pc, #240]	; (8001e48 <HAL_RCC_OscConfig+0x7c4>)
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	4a3b      	ldr	r2, [pc, #236]	; (8001e48 <HAL_RCC_OscConfig+0x7c4>)
 8001d5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d5e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d60:	f7fe ffc2 	bl	8000ce8 <HAL_GetTick>
 8001d64:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d66:	e008      	b.n	8001d7a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d68:	f7fe ffbe 	bl	8000ce8 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e062      	b.n	8001e40 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d7a:	4b33      	ldr	r3, [pc, #204]	; (8001e48 <HAL_RCC_OscConfig+0x7c4>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d0f0      	beq.n	8001d68 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d86:	e05a      	b.n	8001e3e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e059      	b.n	8001e40 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d8c:	4b2e      	ldr	r3, [pc, #184]	; (8001e48 <HAL_RCC_OscConfig+0x7c4>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d152      	bne.n	8001e3e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001d98:	4b2b      	ldr	r3, [pc, #172]	; (8001e48 <HAL_RCC_OscConfig+0x7c4>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a2a      	ldr	r2, [pc, #168]	; (8001e48 <HAL_RCC_OscConfig+0x7c4>)
 8001d9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001da2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001da4:	4b28      	ldr	r3, [pc, #160]	; (8001e48 <HAL_RCC_OscConfig+0x7c4>)
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	4a27      	ldr	r2, [pc, #156]	; (8001e48 <HAL_RCC_OscConfig+0x7c4>)
 8001daa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001db0:	f7fe ff9a 	bl	8000ce8 <HAL_GetTick>
 8001db4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001db6:	e008      	b.n	8001dca <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001db8:	f7fe ff96 	bl	8000ce8 <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e03a      	b.n	8001e40 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dca:	4b1f      	ldr	r3, [pc, #124]	; (8001e48 <HAL_RCC_OscConfig+0x7c4>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d0f0      	beq.n	8001db8 <HAL_RCC_OscConfig+0x734>
 8001dd6:	e032      	b.n	8001e3e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	2b0c      	cmp	r3, #12
 8001ddc:	d02d      	beq.n	8001e3a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dde:	4b1a      	ldr	r3, [pc, #104]	; (8001e48 <HAL_RCC_OscConfig+0x7c4>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a19      	ldr	r2, [pc, #100]	; (8001e48 <HAL_RCC_OscConfig+0x7c4>)
 8001de4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001de8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001dea:	4b17      	ldr	r3, [pc, #92]	; (8001e48 <HAL_RCC_OscConfig+0x7c4>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d105      	bne.n	8001e02 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001df6:	4b14      	ldr	r3, [pc, #80]	; (8001e48 <HAL_RCC_OscConfig+0x7c4>)
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	4a13      	ldr	r2, [pc, #76]	; (8001e48 <HAL_RCC_OscConfig+0x7c4>)
 8001dfc:	f023 0303 	bic.w	r3, r3, #3
 8001e00:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001e02:	4b11      	ldr	r3, [pc, #68]	; (8001e48 <HAL_RCC_OscConfig+0x7c4>)
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	4a10      	ldr	r2, [pc, #64]	; (8001e48 <HAL_RCC_OscConfig+0x7c4>)
 8001e08:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001e0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e10:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e12:	f7fe ff69 	bl	8000ce8 <HAL_GetTick>
 8001e16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e18:	e008      	b.n	8001e2c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e1a:	f7fe ff65 	bl	8000ce8 <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d901      	bls.n	8001e2c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e009      	b.n	8001e40 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e2c:	4b06      	ldr	r3, [pc, #24]	; (8001e48 <HAL_RCC_OscConfig+0x7c4>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d1f0      	bne.n	8001e1a <HAL_RCC_OscConfig+0x796>
 8001e38:	e001      	b.n	8001e3e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e000      	b.n	8001e40 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001e3e:	2300      	movs	r3, #0
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3720      	adds	r7, #32
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	40021000 	.word	0x40021000
 8001e4c:	f99d808c 	.word	0xf99d808c

08001e50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d101      	bne.n	8001e64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e0c8      	b.n	8001ff6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e64:	4b66      	ldr	r3, [pc, #408]	; (8002000 <HAL_RCC_ClockConfig+0x1b0>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0307 	and.w	r3, r3, #7
 8001e6c:	683a      	ldr	r2, [r7, #0]
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d910      	bls.n	8001e94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e72:	4b63      	ldr	r3, [pc, #396]	; (8002000 <HAL_RCC_ClockConfig+0x1b0>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f023 0207 	bic.w	r2, r3, #7
 8001e7a:	4961      	ldr	r1, [pc, #388]	; (8002000 <HAL_RCC_ClockConfig+0x1b0>)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e82:	4b5f      	ldr	r3, [pc, #380]	; (8002000 <HAL_RCC_ClockConfig+0x1b0>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0307 	and.w	r3, r3, #7
 8001e8a:	683a      	ldr	r2, [r7, #0]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d001      	beq.n	8001e94 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e0b0      	b.n	8001ff6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0301 	and.w	r3, r3, #1
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d04c      	beq.n	8001f3a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	2b03      	cmp	r3, #3
 8001ea6:	d107      	bne.n	8001eb8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ea8:	4b56      	ldr	r3, [pc, #344]	; (8002004 <HAL_RCC_ClockConfig+0x1b4>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d121      	bne.n	8001ef8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e09e      	b.n	8001ff6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d107      	bne.n	8001ed0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ec0:	4b50      	ldr	r3, [pc, #320]	; (8002004 <HAL_RCC_ClockConfig+0x1b4>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d115      	bne.n	8001ef8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e092      	b.n	8001ff6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d107      	bne.n	8001ee8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ed8:	4b4a      	ldr	r3, [pc, #296]	; (8002004 <HAL_RCC_ClockConfig+0x1b4>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0302 	and.w	r3, r3, #2
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d109      	bne.n	8001ef8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e086      	b.n	8001ff6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ee8:	4b46      	ldr	r3, [pc, #280]	; (8002004 <HAL_RCC_ClockConfig+0x1b4>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d101      	bne.n	8001ef8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e07e      	b.n	8001ff6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ef8:	4b42      	ldr	r3, [pc, #264]	; (8002004 <HAL_RCC_ClockConfig+0x1b4>)
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f023 0203 	bic.w	r2, r3, #3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	493f      	ldr	r1, [pc, #252]	; (8002004 <HAL_RCC_ClockConfig+0x1b4>)
 8001f06:	4313      	orrs	r3, r2
 8001f08:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f0a:	f7fe feed 	bl	8000ce8 <HAL_GetTick>
 8001f0e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f10:	e00a      	b.n	8001f28 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f12:	f7fe fee9 	bl	8000ce8 <HAL_GetTick>
 8001f16:	4602      	mov	r2, r0
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d901      	bls.n	8001f28 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e066      	b.n	8001ff6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f28:	4b36      	ldr	r3, [pc, #216]	; (8002004 <HAL_RCC_ClockConfig+0x1b4>)
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	f003 020c 	and.w	r2, r3, #12
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d1eb      	bne.n	8001f12 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d008      	beq.n	8001f58 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f46:	4b2f      	ldr	r3, [pc, #188]	; (8002004 <HAL_RCC_ClockConfig+0x1b4>)
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	492c      	ldr	r1, [pc, #176]	; (8002004 <HAL_RCC_ClockConfig+0x1b4>)
 8001f54:	4313      	orrs	r3, r2
 8001f56:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f58:	4b29      	ldr	r3, [pc, #164]	; (8002000 <HAL_RCC_ClockConfig+0x1b0>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0307 	and.w	r3, r3, #7
 8001f60:	683a      	ldr	r2, [r7, #0]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d210      	bcs.n	8001f88 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f66:	4b26      	ldr	r3, [pc, #152]	; (8002000 <HAL_RCC_ClockConfig+0x1b0>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f023 0207 	bic.w	r2, r3, #7
 8001f6e:	4924      	ldr	r1, [pc, #144]	; (8002000 <HAL_RCC_ClockConfig+0x1b0>)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f76:	4b22      	ldr	r3, [pc, #136]	; (8002000 <HAL_RCC_ClockConfig+0x1b0>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0307 	and.w	r3, r3, #7
 8001f7e:	683a      	ldr	r2, [r7, #0]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d001      	beq.n	8001f88 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e036      	b.n	8001ff6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0304 	and.w	r3, r3, #4
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d008      	beq.n	8001fa6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f94:	4b1b      	ldr	r3, [pc, #108]	; (8002004 <HAL_RCC_ClockConfig+0x1b4>)
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	4918      	ldr	r1, [pc, #96]	; (8002004 <HAL_RCC_ClockConfig+0x1b4>)
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0308 	and.w	r3, r3, #8
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d009      	beq.n	8001fc6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fb2:	4b14      	ldr	r3, [pc, #80]	; (8002004 <HAL_RCC_ClockConfig+0x1b4>)
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	00db      	lsls	r3, r3, #3
 8001fc0:	4910      	ldr	r1, [pc, #64]	; (8002004 <HAL_RCC_ClockConfig+0x1b4>)
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001fc6:	f000 f825 	bl	8002014 <HAL_RCC_GetSysClockFreq>
 8001fca:	4601      	mov	r1, r0
 8001fcc:	4b0d      	ldr	r3, [pc, #52]	; (8002004 <HAL_RCC_ClockConfig+0x1b4>)
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	091b      	lsrs	r3, r3, #4
 8001fd2:	f003 030f 	and.w	r3, r3, #15
 8001fd6:	4a0c      	ldr	r2, [pc, #48]	; (8002008 <HAL_RCC_ClockConfig+0x1b8>)
 8001fd8:	5cd3      	ldrb	r3, [r2, r3]
 8001fda:	f003 031f 	and.w	r3, r3, #31
 8001fde:	fa21 f303 	lsr.w	r3, r1, r3
 8001fe2:	4a0a      	ldr	r2, [pc, #40]	; (800200c <HAL_RCC_ClockConfig+0x1bc>)
 8001fe4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001fe6:	4b0a      	ldr	r3, [pc, #40]	; (8002010 <HAL_RCC_ClockConfig+0x1c0>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7fe fe2c 	bl	8000c48 <HAL_InitTick>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	72fb      	strb	r3, [r7, #11]

  return status;
 8001ff4:	7afb      	ldrb	r3, [r7, #11]
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3710      	adds	r7, #16
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	40022000 	.word	0x40022000
 8002004:	40021000 	.word	0x40021000
 8002008:	080043c0 	.word	0x080043c0
 800200c:	20000000 	.word	0x20000000
 8002010:	20000004 	.word	0x20000004

08002014 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002014:	b480      	push	{r7}
 8002016:	b089      	sub	sp, #36	; 0x24
 8002018:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800201a:	2300      	movs	r3, #0
 800201c:	61fb      	str	r3, [r7, #28]
 800201e:	2300      	movs	r3, #0
 8002020:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002022:	4b3d      	ldr	r3, [pc, #244]	; (8002118 <HAL_RCC_GetSysClockFreq+0x104>)
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f003 030c 	and.w	r3, r3, #12
 800202a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800202c:	4b3a      	ldr	r3, [pc, #232]	; (8002118 <HAL_RCC_GetSysClockFreq+0x104>)
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	f003 0303 	and.w	r3, r3, #3
 8002034:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d005      	beq.n	8002048 <HAL_RCC_GetSysClockFreq+0x34>
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	2b0c      	cmp	r3, #12
 8002040:	d121      	bne.n	8002086 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2b01      	cmp	r3, #1
 8002046:	d11e      	bne.n	8002086 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002048:	4b33      	ldr	r3, [pc, #204]	; (8002118 <HAL_RCC_GetSysClockFreq+0x104>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0308 	and.w	r3, r3, #8
 8002050:	2b00      	cmp	r3, #0
 8002052:	d107      	bne.n	8002064 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002054:	4b30      	ldr	r3, [pc, #192]	; (8002118 <HAL_RCC_GetSysClockFreq+0x104>)
 8002056:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800205a:	0a1b      	lsrs	r3, r3, #8
 800205c:	f003 030f 	and.w	r3, r3, #15
 8002060:	61fb      	str	r3, [r7, #28]
 8002062:	e005      	b.n	8002070 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002064:	4b2c      	ldr	r3, [pc, #176]	; (8002118 <HAL_RCC_GetSysClockFreq+0x104>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	091b      	lsrs	r3, r3, #4
 800206a:	f003 030f 	and.w	r3, r3, #15
 800206e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002070:	4a2a      	ldr	r2, [pc, #168]	; (800211c <HAL_RCC_GetSysClockFreq+0x108>)
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002078:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d10d      	bne.n	800209c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002084:	e00a      	b.n	800209c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	2b04      	cmp	r3, #4
 800208a:	d102      	bne.n	8002092 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800208c:	4b24      	ldr	r3, [pc, #144]	; (8002120 <HAL_RCC_GetSysClockFreq+0x10c>)
 800208e:	61bb      	str	r3, [r7, #24]
 8002090:	e004      	b.n	800209c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	2b08      	cmp	r3, #8
 8002096:	d101      	bne.n	800209c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002098:	4b22      	ldr	r3, [pc, #136]	; (8002124 <HAL_RCC_GetSysClockFreq+0x110>)
 800209a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	2b0c      	cmp	r3, #12
 80020a0:	d133      	bne.n	800210a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80020a2:	4b1d      	ldr	r3, [pc, #116]	; (8002118 <HAL_RCC_GetSysClockFreq+0x104>)
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	f003 0303 	and.w	r3, r3, #3
 80020aa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d002      	beq.n	80020b8 <HAL_RCC_GetSysClockFreq+0xa4>
 80020b2:	2b03      	cmp	r3, #3
 80020b4:	d003      	beq.n	80020be <HAL_RCC_GetSysClockFreq+0xaa>
 80020b6:	e005      	b.n	80020c4 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80020b8:	4b19      	ldr	r3, [pc, #100]	; (8002120 <HAL_RCC_GetSysClockFreq+0x10c>)
 80020ba:	617b      	str	r3, [r7, #20]
      break;
 80020bc:	e005      	b.n	80020ca <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80020be:	4b19      	ldr	r3, [pc, #100]	; (8002124 <HAL_RCC_GetSysClockFreq+0x110>)
 80020c0:	617b      	str	r3, [r7, #20]
      break;
 80020c2:	e002      	b.n	80020ca <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	617b      	str	r3, [r7, #20]
      break;
 80020c8:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020ca:	4b13      	ldr	r3, [pc, #76]	; (8002118 <HAL_RCC_GetSysClockFreq+0x104>)
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	091b      	lsrs	r3, r3, #4
 80020d0:	f003 0307 	and.w	r3, r3, #7
 80020d4:	3301      	adds	r3, #1
 80020d6:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80020d8:	4b0f      	ldr	r3, [pc, #60]	; (8002118 <HAL_RCC_GetSysClockFreq+0x104>)
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	0a1b      	lsrs	r3, r3, #8
 80020de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80020e2:	697a      	ldr	r2, [r7, #20]
 80020e4:	fb02 f203 	mul.w	r2, r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ee:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020f0:	4b09      	ldr	r3, [pc, #36]	; (8002118 <HAL_RCC_GetSysClockFreq+0x104>)
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	0e5b      	lsrs	r3, r3, #25
 80020f6:	f003 0303 	and.w	r3, r3, #3
 80020fa:	3301      	adds	r3, #1
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002100:	697a      	ldr	r2, [r7, #20]
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	fbb2 f3f3 	udiv	r3, r2, r3
 8002108:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800210a:	69bb      	ldr	r3, [r7, #24]
}
 800210c:	4618      	mov	r0, r3
 800210e:	3724      	adds	r7, #36	; 0x24
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr
 8002118:	40021000 	.word	0x40021000
 800211c:	080043d8 	.word	0x080043d8
 8002120:	00f42400 	.word	0x00f42400
 8002124:	007a1200 	.word	0x007a1200

08002128 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800212c:	4b03      	ldr	r3, [pc, #12]	; (800213c <HAL_RCC_GetHCLKFreq+0x14>)
 800212e:	681b      	ldr	r3, [r3, #0]
}
 8002130:	4618      	mov	r0, r3
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	20000000 	.word	0x20000000

08002140 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002144:	f7ff fff0 	bl	8002128 <HAL_RCC_GetHCLKFreq>
 8002148:	4601      	mov	r1, r0
 800214a:	4b06      	ldr	r3, [pc, #24]	; (8002164 <HAL_RCC_GetPCLK1Freq+0x24>)
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	0a1b      	lsrs	r3, r3, #8
 8002150:	f003 0307 	and.w	r3, r3, #7
 8002154:	4a04      	ldr	r2, [pc, #16]	; (8002168 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002156:	5cd3      	ldrb	r3, [r2, r3]
 8002158:	f003 031f 	and.w	r3, r3, #31
 800215c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002160:	4618      	mov	r0, r3
 8002162:	bd80      	pop	{r7, pc}
 8002164:	40021000 	.word	0x40021000
 8002168:	080043d0 	.word	0x080043d0

0800216c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002170:	f7ff ffda 	bl	8002128 <HAL_RCC_GetHCLKFreq>
 8002174:	4601      	mov	r1, r0
 8002176:	4b06      	ldr	r3, [pc, #24]	; (8002190 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	0adb      	lsrs	r3, r3, #11
 800217c:	f003 0307 	and.w	r3, r3, #7
 8002180:	4a04      	ldr	r2, [pc, #16]	; (8002194 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002182:	5cd3      	ldrb	r3, [r2, r3]
 8002184:	f003 031f 	and.w	r3, r3, #31
 8002188:	fa21 f303 	lsr.w	r3, r1, r3
}
 800218c:	4618      	mov	r0, r3
 800218e:	bd80      	pop	{r7, pc}
 8002190:	40021000 	.word	0x40021000
 8002194:	080043d0 	.word	0x080043d0

08002198 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80021a0:	2300      	movs	r3, #0
 80021a2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80021a4:	4b2a      	ldr	r3, [pc, #168]	; (8002250 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d003      	beq.n	80021b8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80021b0:	f7ff fa04 	bl	80015bc <HAL_PWREx_GetVoltageRange>
 80021b4:	6178      	str	r0, [r7, #20]
 80021b6:	e014      	b.n	80021e2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80021b8:	4b25      	ldr	r3, [pc, #148]	; (8002250 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021bc:	4a24      	ldr	r2, [pc, #144]	; (8002250 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021c2:	6593      	str	r3, [r2, #88]	; 0x58
 80021c4:	4b22      	ldr	r3, [pc, #136]	; (8002250 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021cc:	60fb      	str	r3, [r7, #12]
 80021ce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80021d0:	f7ff f9f4 	bl	80015bc <HAL_PWREx_GetVoltageRange>
 80021d4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80021d6:	4b1e      	ldr	r3, [pc, #120]	; (8002250 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021da:	4a1d      	ldr	r2, [pc, #116]	; (8002250 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021e0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021e8:	d10b      	bne.n	8002202 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2b80      	cmp	r3, #128	; 0x80
 80021ee:	d919      	bls.n	8002224 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2ba0      	cmp	r3, #160	; 0xa0
 80021f4:	d902      	bls.n	80021fc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80021f6:	2302      	movs	r3, #2
 80021f8:	613b      	str	r3, [r7, #16]
 80021fa:	e013      	b.n	8002224 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80021fc:	2301      	movs	r3, #1
 80021fe:	613b      	str	r3, [r7, #16]
 8002200:	e010      	b.n	8002224 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2b80      	cmp	r3, #128	; 0x80
 8002206:	d902      	bls.n	800220e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002208:	2303      	movs	r3, #3
 800220a:	613b      	str	r3, [r7, #16]
 800220c:	e00a      	b.n	8002224 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2b80      	cmp	r3, #128	; 0x80
 8002212:	d102      	bne.n	800221a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002214:	2302      	movs	r3, #2
 8002216:	613b      	str	r3, [r7, #16]
 8002218:	e004      	b.n	8002224 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2b70      	cmp	r3, #112	; 0x70
 800221e:	d101      	bne.n	8002224 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002220:	2301      	movs	r3, #1
 8002222:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002224:	4b0b      	ldr	r3, [pc, #44]	; (8002254 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f023 0207 	bic.w	r2, r3, #7
 800222c:	4909      	ldr	r1, [pc, #36]	; (8002254 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	4313      	orrs	r3, r2
 8002232:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002234:	4b07      	ldr	r3, [pc, #28]	; (8002254 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0307 	and.w	r3, r3, #7
 800223c:	693a      	ldr	r2, [r7, #16]
 800223e:	429a      	cmp	r2, r3
 8002240:	d001      	beq.n	8002246 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e000      	b.n	8002248 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002246:	2300      	movs	r3, #0
}
 8002248:	4618      	mov	r0, r3
 800224a:	3718      	adds	r7, #24
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	40021000 	.word	0x40021000
 8002254:	40022000 	.word	0x40022000

08002258 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b086      	sub	sp, #24
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002260:	2300      	movs	r3, #0
 8002262:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002264:	2300      	movs	r3, #0
 8002266:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002270:	2b00      	cmp	r3, #0
 8002272:	d03f      	beq.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002278:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800227c:	d01c      	beq.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800227e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002282:	d802      	bhi.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002284:	2b00      	cmp	r3, #0
 8002286:	d00e      	beq.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002288:	e01f      	b.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x72>
 800228a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800228e:	d003      	beq.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002290:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002294:	d01c      	beq.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002296:	e018      	b.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002298:	4b85      	ldr	r3, [pc, #532]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	4a84      	ldr	r2, [pc, #528]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800229e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022a2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022a4:	e015      	b.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	3304      	adds	r3, #4
 80022aa:	2100      	movs	r1, #0
 80022ac:	4618      	mov	r0, r3
 80022ae:	f000 fab9 	bl	8002824 <RCCEx_PLLSAI1_Config>
 80022b2:	4603      	mov	r3, r0
 80022b4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022b6:	e00c      	b.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	3320      	adds	r3, #32
 80022bc:	2100      	movs	r1, #0
 80022be:	4618      	mov	r0, r3
 80022c0:	f000 fba0 	bl	8002a04 <RCCEx_PLLSAI2_Config>
 80022c4:	4603      	mov	r3, r0
 80022c6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022c8:	e003      	b.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	74fb      	strb	r3, [r7, #19]
      break;
 80022ce:	e000      	b.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80022d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80022d2:	7cfb      	ldrb	r3, [r7, #19]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d10b      	bne.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80022d8:	4b75      	ldr	r3, [pc, #468]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80022da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022de:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022e6:	4972      	ldr	r1, [pc, #456]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80022e8:	4313      	orrs	r3, r2
 80022ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80022ee:	e001      	b.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022f0:	7cfb      	ldrb	r3, [r7, #19]
 80022f2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d03f      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002304:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002308:	d01c      	beq.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800230a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800230e:	d802      	bhi.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8002310:	2b00      	cmp	r3, #0
 8002312:	d00e      	beq.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002314:	e01f      	b.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002316:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800231a:	d003      	beq.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 800231c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002320:	d01c      	beq.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x104>
 8002322:	e018      	b.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002324:	4b62      	ldr	r3, [pc, #392]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	4a61      	ldr	r2, [pc, #388]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800232a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800232e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002330:	e015      	b.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	3304      	adds	r3, #4
 8002336:	2100      	movs	r1, #0
 8002338:	4618      	mov	r0, r3
 800233a:	f000 fa73 	bl	8002824 <RCCEx_PLLSAI1_Config>
 800233e:	4603      	mov	r3, r0
 8002340:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002342:	e00c      	b.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	3320      	adds	r3, #32
 8002348:	2100      	movs	r1, #0
 800234a:	4618      	mov	r0, r3
 800234c:	f000 fb5a 	bl	8002a04 <RCCEx_PLLSAI2_Config>
 8002350:	4603      	mov	r3, r0
 8002352:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002354:	e003      	b.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	74fb      	strb	r3, [r7, #19]
      break;
 800235a:	e000      	b.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800235c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800235e:	7cfb      	ldrb	r3, [r7, #19]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d10b      	bne.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002364:	4b52      	ldr	r3, [pc, #328]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800236a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002372:	494f      	ldr	r1, [pc, #316]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002374:	4313      	orrs	r3, r2
 8002376:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800237a:	e001      	b.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800237c:	7cfb      	ldrb	r3, [r7, #19]
 800237e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002388:	2b00      	cmp	r3, #0
 800238a:	f000 80a0 	beq.w	80024ce <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800238e:	2300      	movs	r3, #0
 8002390:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002392:	4b47      	ldr	r3, [pc, #284]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d101      	bne.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800239e:	2301      	movs	r3, #1
 80023a0:	e000      	b.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80023a2:	2300      	movs	r3, #0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d00d      	beq.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023a8:	4b41      	ldr	r3, [pc, #260]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ac:	4a40      	ldr	r2, [pc, #256]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023b2:	6593      	str	r3, [r2, #88]	; 0x58
 80023b4:	4b3e      	ldr	r3, [pc, #248]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023bc:	60bb      	str	r3, [r7, #8]
 80023be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023c0:	2301      	movs	r3, #1
 80023c2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023c4:	4b3b      	ldr	r3, [pc, #236]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a3a      	ldr	r2, [pc, #232]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80023ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80023d0:	f7fe fc8a 	bl	8000ce8 <HAL_GetTick>
 80023d4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80023d6:	e009      	b.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023d8:	f7fe fc86 	bl	8000ce8 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d902      	bls.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	74fb      	strb	r3, [r7, #19]
        break;
 80023ea:	e005      	b.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80023ec:	4b31      	ldr	r3, [pc, #196]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d0ef      	beq.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 80023f8:	7cfb      	ldrb	r3, [r7, #19]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d15c      	bne.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80023fe:	4b2c      	ldr	r3, [pc, #176]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002404:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002408:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d01f      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002416:	697a      	ldr	r2, [r7, #20]
 8002418:	429a      	cmp	r2, r3
 800241a:	d019      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800241c:	4b24      	ldr	r3, [pc, #144]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800241e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002422:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002426:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002428:	4b21      	ldr	r3, [pc, #132]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800242a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800242e:	4a20      	ldr	r2, [pc, #128]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002430:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002434:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002438:	4b1d      	ldr	r3, [pc, #116]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800243a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800243e:	4a1c      	ldr	r2, [pc, #112]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002440:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002444:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002448:	4a19      	ldr	r2, [pc, #100]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	2b00      	cmp	r3, #0
 8002458:	d016      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800245a:	f7fe fc45 	bl	8000ce8 <HAL_GetTick>
 800245e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002460:	e00b      	b.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002462:	f7fe fc41 	bl	8000ce8 <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002470:	4293      	cmp	r3, r2
 8002472:	d902      	bls.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	74fb      	strb	r3, [r7, #19]
            break;
 8002478:	e006      	b.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800247a:	4b0d      	ldr	r3, [pc, #52]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800247c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002480:	f003 0302 	and.w	r3, r3, #2
 8002484:	2b00      	cmp	r3, #0
 8002486:	d0ec      	beq.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8002488:	7cfb      	ldrb	r3, [r7, #19]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d10c      	bne.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800248e:	4b08      	ldr	r3, [pc, #32]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002494:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800249e:	4904      	ldr	r1, [pc, #16]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80024a6:	e009      	b.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80024a8:	7cfb      	ldrb	r3, [r7, #19]
 80024aa:	74bb      	strb	r3, [r7, #18]
 80024ac:	e006      	b.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x264>
 80024ae:	bf00      	nop
 80024b0:	40021000 	.word	0x40021000
 80024b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024b8:	7cfb      	ldrb	r3, [r7, #19]
 80024ba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024bc:	7c7b      	ldrb	r3, [r7, #17]
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d105      	bne.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024c2:	4b9e      	ldr	r3, [pc, #632]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80024c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c6:	4a9d      	ldr	r2, [pc, #628]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80024c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024cc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d00a      	beq.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024da:	4b98      	ldr	r3, [pc, #608]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80024dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024e0:	f023 0203 	bic.w	r2, r3, #3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024e8:	4994      	ldr	r1, [pc, #592]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0302 	and.w	r3, r3, #2
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d00a      	beq.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80024fc:	4b8f      	ldr	r3, [pc, #572]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80024fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002502:	f023 020c 	bic.w	r2, r3, #12
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800250a:	498c      	ldr	r1, [pc, #560]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800250c:	4313      	orrs	r3, r2
 800250e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0304 	and.w	r3, r3, #4
 800251a:	2b00      	cmp	r3, #0
 800251c:	d00a      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800251e:	4b87      	ldr	r3, [pc, #540]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002520:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002524:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252c:	4983      	ldr	r1, [pc, #524]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800252e:	4313      	orrs	r3, r2
 8002530:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0308 	and.w	r3, r3, #8
 800253c:	2b00      	cmp	r3, #0
 800253e:	d00a      	beq.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002540:	4b7e      	ldr	r3, [pc, #504]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002546:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800254e:	497b      	ldr	r1, [pc, #492]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002550:	4313      	orrs	r3, r2
 8002552:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0310 	and.w	r3, r3, #16
 800255e:	2b00      	cmp	r3, #0
 8002560:	d00a      	beq.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002562:	4b76      	ldr	r3, [pc, #472]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002564:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002568:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002570:	4972      	ldr	r1, [pc, #456]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002572:	4313      	orrs	r3, r2
 8002574:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0320 	and.w	r3, r3, #32
 8002580:	2b00      	cmp	r3, #0
 8002582:	d00a      	beq.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002584:	4b6d      	ldr	r3, [pc, #436]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800258a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002592:	496a      	ldr	r1, [pc, #424]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002594:	4313      	orrs	r3, r2
 8002596:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d00a      	beq.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80025a6:	4b65      	ldr	r3, [pc, #404]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025b4:	4961      	ldr	r1, [pc, #388]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d00a      	beq.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80025c8:	4b5c      	ldr	r3, [pc, #368]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025d6:	4959      	ldr	r1, [pc, #356]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d00a      	beq.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025ea:	4b54      	ldr	r3, [pc, #336]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025f0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025f8:	4950      	ldr	r1, [pc, #320]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002608:	2b00      	cmp	r3, #0
 800260a:	d00a      	beq.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800260c:	4b4b      	ldr	r3, [pc, #300]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800260e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002612:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800261a:	4948      	ldr	r1, [pc, #288]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800261c:	4313      	orrs	r3, r2
 800261e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800262a:	2b00      	cmp	r3, #0
 800262c:	d00a      	beq.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800262e:	4b43      	ldr	r3, [pc, #268]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002630:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002634:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800263c:	493f      	ldr	r1, [pc, #252]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800263e:	4313      	orrs	r3, r2
 8002640:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d028      	beq.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002650:	4b3a      	ldr	r3, [pc, #232]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002656:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800265e:	4937      	ldr	r1, [pc, #220]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002660:	4313      	orrs	r3, r2
 8002662:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800266a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800266e:	d106      	bne.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002670:	4b32      	ldr	r3, [pc, #200]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	4a31      	ldr	r2, [pc, #196]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002676:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800267a:	60d3      	str	r3, [r2, #12]
 800267c:	e011      	b.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002682:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002686:	d10c      	bne.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	3304      	adds	r3, #4
 800268c:	2101      	movs	r1, #1
 800268e:	4618      	mov	r0, r3
 8002690:	f000 f8c8 	bl	8002824 <RCCEx_PLLSAI1_Config>
 8002694:	4603      	mov	r3, r0
 8002696:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002698:	7cfb      	ldrb	r3, [r7, #19]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 800269e:	7cfb      	ldrb	r3, [r7, #19]
 80026a0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d028      	beq.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80026ae:	4b23      	ldr	r3, [pc, #140]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026b4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026bc:	491f      	ldr	r1, [pc, #124]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026cc:	d106      	bne.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026ce:	4b1b      	ldr	r3, [pc, #108]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	4a1a      	ldr	r2, [pc, #104]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026d8:	60d3      	str	r3, [r2, #12]
 80026da:	e011      	b.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026e4:	d10c      	bne.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	3304      	adds	r3, #4
 80026ea:	2101      	movs	r1, #1
 80026ec:	4618      	mov	r0, r3
 80026ee:	f000 f899 	bl	8002824 <RCCEx_PLLSAI1_Config>
 80026f2:	4603      	mov	r3, r0
 80026f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026f6:	7cfb      	ldrb	r3, [r7, #19]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d001      	beq.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 80026fc:	7cfb      	ldrb	r3, [r7, #19]
 80026fe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d02b      	beq.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800270c:	4b0b      	ldr	r3, [pc, #44]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800270e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002712:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800271a:	4908      	ldr	r1, [pc, #32]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800271c:	4313      	orrs	r3, r2
 800271e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002726:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800272a:	d109      	bne.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800272c:	4b03      	ldr	r3, [pc, #12]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	4a02      	ldr	r2, [pc, #8]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002732:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002736:	60d3      	str	r3, [r2, #12]
 8002738:	e014      	b.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800273a:	bf00      	nop
 800273c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002744:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002748:	d10c      	bne.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	3304      	adds	r3, #4
 800274e:	2101      	movs	r1, #1
 8002750:	4618      	mov	r0, r3
 8002752:	f000 f867 	bl	8002824 <RCCEx_PLLSAI1_Config>
 8002756:	4603      	mov	r3, r0
 8002758:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800275a:	7cfb      	ldrb	r3, [r7, #19]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d001      	beq.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8002760:	7cfb      	ldrb	r3, [r7, #19]
 8002762:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d02f      	beq.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002770:	4b2b      	ldr	r3, [pc, #172]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002776:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800277e:	4928      	ldr	r1, [pc, #160]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002780:	4313      	orrs	r3, r2
 8002782:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800278a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800278e:	d10d      	bne.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	3304      	adds	r3, #4
 8002794:	2102      	movs	r1, #2
 8002796:	4618      	mov	r0, r3
 8002798:	f000 f844 	bl	8002824 <RCCEx_PLLSAI1_Config>
 800279c:	4603      	mov	r3, r0
 800279e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027a0:	7cfb      	ldrb	r3, [r7, #19]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d014      	beq.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80027a6:	7cfb      	ldrb	r3, [r7, #19]
 80027a8:	74bb      	strb	r3, [r7, #18]
 80027aa:	e011      	b.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027b4:	d10c      	bne.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	3320      	adds	r3, #32
 80027ba:	2102      	movs	r1, #2
 80027bc:	4618      	mov	r0, r3
 80027be:	f000 f921 	bl	8002a04 <RCCEx_PLLSAI2_Config>
 80027c2:	4603      	mov	r3, r0
 80027c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027c6:	7cfb      	ldrb	r3, [r7, #19]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d001      	beq.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80027cc:	7cfb      	ldrb	r3, [r7, #19]
 80027ce:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d00a      	beq.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80027dc:	4b10      	ldr	r3, [pc, #64]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80027de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027ea:	490d      	ldr	r1, [pc, #52]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d00b      	beq.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80027fe:	4b08      	ldr	r3, [pc, #32]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002800:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002804:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800280e:	4904      	ldr	r1, [pc, #16]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002810:	4313      	orrs	r3, r2
 8002812:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002816:	7cbb      	ldrb	r3, [r7, #18]
}
 8002818:	4618      	mov	r0, r3
 800281a:	3718      	adds	r7, #24
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	40021000 	.word	0x40021000

08002824 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800282e:	2300      	movs	r3, #0
 8002830:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002832:	4b73      	ldr	r3, [pc, #460]	; (8002a00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	f003 0303 	and.w	r3, r3, #3
 800283a:	2b00      	cmp	r3, #0
 800283c:	d018      	beq.n	8002870 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800283e:	4b70      	ldr	r3, [pc, #448]	; (8002a00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	f003 0203 	and.w	r2, r3, #3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	429a      	cmp	r2, r3
 800284c:	d10d      	bne.n	800286a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
       ||
 8002852:	2b00      	cmp	r3, #0
 8002854:	d009      	beq.n	800286a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002856:	4b6a      	ldr	r3, [pc, #424]	; (8002a00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	091b      	lsrs	r3, r3, #4
 800285c:	f003 0307 	and.w	r3, r3, #7
 8002860:	1c5a      	adds	r2, r3, #1
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
       ||
 8002866:	429a      	cmp	r2, r3
 8002868:	d044      	beq.n	80028f4 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	73fb      	strb	r3, [r7, #15]
 800286e:	e041      	b.n	80028f4 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2b02      	cmp	r3, #2
 8002876:	d00c      	beq.n	8002892 <RCCEx_PLLSAI1_Config+0x6e>
 8002878:	2b03      	cmp	r3, #3
 800287a:	d013      	beq.n	80028a4 <RCCEx_PLLSAI1_Config+0x80>
 800287c:	2b01      	cmp	r3, #1
 800287e:	d120      	bne.n	80028c2 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002880:	4b5f      	ldr	r3, [pc, #380]	; (8002a00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0302 	and.w	r3, r3, #2
 8002888:	2b00      	cmp	r3, #0
 800288a:	d11d      	bne.n	80028c8 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002890:	e01a      	b.n	80028c8 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002892:	4b5b      	ldr	r3, [pc, #364]	; (8002a00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800289a:	2b00      	cmp	r3, #0
 800289c:	d116      	bne.n	80028cc <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028a2:	e013      	b.n	80028cc <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80028a4:	4b56      	ldr	r3, [pc, #344]	; (8002a00 <RCCEx_PLLSAI1_Config+0x1dc>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d10f      	bne.n	80028d0 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80028b0:	4b53      	ldr	r3, [pc, #332]	; (8002a00 <RCCEx_PLLSAI1_Config+0x1dc>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d109      	bne.n	80028d0 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80028c0:	e006      	b.n	80028d0 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	73fb      	strb	r3, [r7, #15]
      break;
 80028c6:	e004      	b.n	80028d2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80028c8:	bf00      	nop
 80028ca:	e002      	b.n	80028d2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80028cc:	bf00      	nop
 80028ce:	e000      	b.n	80028d2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80028d0:	bf00      	nop
    }

    if(status == HAL_OK)
 80028d2:	7bfb      	ldrb	r3, [r7, #15]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d10d      	bne.n	80028f4 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80028d8:	4b49      	ldr	r3, [pc, #292]	; (8002a00 <RCCEx_PLLSAI1_Config+0x1dc>)
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6819      	ldr	r1, [r3, #0]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	3b01      	subs	r3, #1
 80028ea:	011b      	lsls	r3, r3, #4
 80028ec:	430b      	orrs	r3, r1
 80028ee:	4944      	ldr	r1, [pc, #272]	; (8002a00 <RCCEx_PLLSAI1_Config+0x1dc>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80028f4:	7bfb      	ldrb	r3, [r7, #15]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d17d      	bne.n	80029f6 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80028fa:	4b41      	ldr	r3, [pc, #260]	; (8002a00 <RCCEx_PLLSAI1_Config+0x1dc>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a40      	ldr	r2, [pc, #256]	; (8002a00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002900:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002904:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002906:	f7fe f9ef 	bl	8000ce8 <HAL_GetTick>
 800290a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800290c:	e009      	b.n	8002922 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800290e:	f7fe f9eb 	bl	8000ce8 <HAL_GetTick>
 8002912:	4602      	mov	r2, r0
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	2b02      	cmp	r3, #2
 800291a:	d902      	bls.n	8002922 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	73fb      	strb	r3, [r7, #15]
        break;
 8002920:	e005      	b.n	800292e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002922:	4b37      	ldr	r3, [pc, #220]	; (8002a00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d1ef      	bne.n	800290e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800292e:	7bfb      	ldrb	r3, [r7, #15]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d160      	bne.n	80029f6 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d111      	bne.n	800295e <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800293a:	4b31      	ldr	r3, [pc, #196]	; (8002a00 <RCCEx_PLLSAI1_Config+0x1dc>)
 800293c:	691b      	ldr	r3, [r3, #16]
 800293e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002942:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	6892      	ldr	r2, [r2, #8]
 800294a:	0211      	lsls	r1, r2, #8
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	68d2      	ldr	r2, [r2, #12]
 8002950:	0912      	lsrs	r2, r2, #4
 8002952:	0452      	lsls	r2, r2, #17
 8002954:	430a      	orrs	r2, r1
 8002956:	492a      	ldr	r1, [pc, #168]	; (8002a00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002958:	4313      	orrs	r3, r2
 800295a:	610b      	str	r3, [r1, #16]
 800295c:	e027      	b.n	80029ae <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	2b01      	cmp	r3, #1
 8002962:	d112      	bne.n	800298a <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002964:	4b26      	ldr	r3, [pc, #152]	; (8002a00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002966:	691b      	ldr	r3, [r3, #16]
 8002968:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800296c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	6892      	ldr	r2, [r2, #8]
 8002974:	0211      	lsls	r1, r2, #8
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	6912      	ldr	r2, [r2, #16]
 800297a:	0852      	lsrs	r2, r2, #1
 800297c:	3a01      	subs	r2, #1
 800297e:	0552      	lsls	r2, r2, #21
 8002980:	430a      	orrs	r2, r1
 8002982:	491f      	ldr	r1, [pc, #124]	; (8002a00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002984:	4313      	orrs	r3, r2
 8002986:	610b      	str	r3, [r1, #16]
 8002988:	e011      	b.n	80029ae <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800298a:	4b1d      	ldr	r3, [pc, #116]	; (8002a00 <RCCEx_PLLSAI1_Config+0x1dc>)
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002992:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	6892      	ldr	r2, [r2, #8]
 800299a:	0211      	lsls	r1, r2, #8
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	6952      	ldr	r2, [r2, #20]
 80029a0:	0852      	lsrs	r2, r2, #1
 80029a2:	3a01      	subs	r2, #1
 80029a4:	0652      	lsls	r2, r2, #25
 80029a6:	430a      	orrs	r2, r1
 80029a8:	4915      	ldr	r1, [pc, #84]	; (8002a00 <RCCEx_PLLSAI1_Config+0x1dc>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80029ae:	4b14      	ldr	r3, [pc, #80]	; (8002a00 <RCCEx_PLLSAI1_Config+0x1dc>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a13      	ldr	r2, [pc, #76]	; (8002a00 <RCCEx_PLLSAI1_Config+0x1dc>)
 80029b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80029b8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ba:	f7fe f995 	bl	8000ce8 <HAL_GetTick>
 80029be:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80029c0:	e009      	b.n	80029d6 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80029c2:	f7fe f991 	bl	8000ce8 <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d902      	bls.n	80029d6 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	73fb      	strb	r3, [r7, #15]
          break;
 80029d4:	e005      	b.n	80029e2 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80029d6:	4b0a      	ldr	r3, [pc, #40]	; (8002a00 <RCCEx_PLLSAI1_Config+0x1dc>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d0ef      	beq.n	80029c2 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80029e2:	7bfb      	ldrb	r3, [r7, #15]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d106      	bne.n	80029f6 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80029e8:	4b05      	ldr	r3, [pc, #20]	; (8002a00 <RCCEx_PLLSAI1_Config+0x1dc>)
 80029ea:	691a      	ldr	r2, [r3, #16]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	699b      	ldr	r3, [r3, #24]
 80029f0:	4903      	ldr	r1, [pc, #12]	; (8002a00 <RCCEx_PLLSAI1_Config+0x1dc>)
 80029f2:	4313      	orrs	r3, r2
 80029f4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80029f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3710      	adds	r7, #16
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	40021000 	.word	0x40021000

08002a04 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a12:	4b68      	ldr	r3, [pc, #416]	; (8002bb4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	f003 0303 	and.w	r3, r3, #3
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d018      	beq.n	8002a50 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002a1e:	4b65      	ldr	r3, [pc, #404]	; (8002bb4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	f003 0203 	and.w	r2, r3, #3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d10d      	bne.n	8002a4a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
       ||
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d009      	beq.n	8002a4a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002a36:	4b5f      	ldr	r3, [pc, #380]	; (8002bb4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	091b      	lsrs	r3, r3, #4
 8002a3c:	f003 0307 	and.w	r3, r3, #7
 8002a40:	1c5a      	adds	r2, r3, #1
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
       ||
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d044      	beq.n	8002ad4 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	73fb      	strb	r3, [r7, #15]
 8002a4e:	e041      	b.n	8002ad4 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d00c      	beq.n	8002a72 <RCCEx_PLLSAI2_Config+0x6e>
 8002a58:	2b03      	cmp	r3, #3
 8002a5a:	d013      	beq.n	8002a84 <RCCEx_PLLSAI2_Config+0x80>
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d120      	bne.n	8002aa2 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a60:	4b54      	ldr	r3, [pc, #336]	; (8002bb4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0302 	and.w	r3, r3, #2
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d11d      	bne.n	8002aa8 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a70:	e01a      	b.n	8002aa8 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002a72:	4b50      	ldr	r3, [pc, #320]	; (8002bb4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d116      	bne.n	8002aac <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a82:	e013      	b.n	8002aac <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a84:	4b4b      	ldr	r3, [pc, #300]	; (8002bb4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d10f      	bne.n	8002ab0 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a90:	4b48      	ldr	r3, [pc, #288]	; (8002bb4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d109      	bne.n	8002ab0 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002aa0:	e006      	b.n	8002ab0 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	73fb      	strb	r3, [r7, #15]
      break;
 8002aa6:	e004      	b.n	8002ab2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002aa8:	bf00      	nop
 8002aaa:	e002      	b.n	8002ab2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002aac:	bf00      	nop
 8002aae:	e000      	b.n	8002ab2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002ab0:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ab2:	7bfb      	ldrb	r3, [r7, #15]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d10d      	bne.n	8002ad4 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002ab8:	4b3e      	ldr	r3, [pc, #248]	; (8002bb4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6819      	ldr	r1, [r3, #0]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	3b01      	subs	r3, #1
 8002aca:	011b      	lsls	r3, r3, #4
 8002acc:	430b      	orrs	r3, r1
 8002ace:	4939      	ldr	r1, [pc, #228]	; (8002bb4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002ad4:	7bfb      	ldrb	r3, [r7, #15]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d167      	bne.n	8002baa <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002ada:	4b36      	ldr	r3, [pc, #216]	; (8002bb4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a35      	ldr	r2, [pc, #212]	; (8002bb4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ae0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ae4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ae6:	f7fe f8ff 	bl	8000ce8 <HAL_GetTick>
 8002aea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002aec:	e009      	b.n	8002b02 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002aee:	f7fe f8fb 	bl	8000ce8 <HAL_GetTick>
 8002af2:	4602      	mov	r2, r0
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d902      	bls.n	8002b02 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002afc:	2303      	movs	r3, #3
 8002afe:	73fb      	strb	r3, [r7, #15]
        break;
 8002b00:	e005      	b.n	8002b0e <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b02:	4b2c      	ldr	r3, [pc, #176]	; (8002bb4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d1ef      	bne.n	8002aee <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002b0e:	7bfb      	ldrb	r3, [r7, #15]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d14a      	bne.n	8002baa <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d111      	bne.n	8002b3e <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b1a:	4b26      	ldr	r3, [pc, #152]	; (8002bb4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b1c:	695b      	ldr	r3, [r3, #20]
 8002b1e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002b22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	6892      	ldr	r2, [r2, #8]
 8002b2a:	0211      	lsls	r1, r2, #8
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	68d2      	ldr	r2, [r2, #12]
 8002b30:	0912      	lsrs	r2, r2, #4
 8002b32:	0452      	lsls	r2, r2, #17
 8002b34:	430a      	orrs	r2, r1
 8002b36:	491f      	ldr	r1, [pc, #124]	; (8002bb4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	614b      	str	r3, [r1, #20]
 8002b3c:	e011      	b.n	8002b62 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b3e:	4b1d      	ldr	r3, [pc, #116]	; (8002bb4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b40:	695b      	ldr	r3, [r3, #20]
 8002b42:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002b46:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	6892      	ldr	r2, [r2, #8]
 8002b4e:	0211      	lsls	r1, r2, #8
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	6912      	ldr	r2, [r2, #16]
 8002b54:	0852      	lsrs	r2, r2, #1
 8002b56:	3a01      	subs	r2, #1
 8002b58:	0652      	lsls	r2, r2, #25
 8002b5a:	430a      	orrs	r2, r1
 8002b5c:	4915      	ldr	r1, [pc, #84]	; (8002bb4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002b62:	4b14      	ldr	r3, [pc, #80]	; (8002bb4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a13      	ldr	r2, [pc, #76]	; (8002bb4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b6c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b6e:	f7fe f8bb 	bl	8000ce8 <HAL_GetTick>
 8002b72:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002b74:	e009      	b.n	8002b8a <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b76:	f7fe f8b7 	bl	8000ce8 <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d902      	bls.n	8002b8a <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	73fb      	strb	r3, [r7, #15]
          break;
 8002b88:	e005      	b.n	8002b96 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002b8a:	4b0a      	ldr	r3, [pc, #40]	; (8002bb4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d0ef      	beq.n	8002b76 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8002b96:	7bfb      	ldrb	r3, [r7, #15]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d106      	bne.n	8002baa <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002b9c:	4b05      	ldr	r3, [pc, #20]	; (8002bb4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b9e:	695a      	ldr	r2, [r3, #20]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	695b      	ldr	r3, [r3, #20]
 8002ba4:	4903      	ldr	r1, [pc, #12]	; (8002bb4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3710      	adds	r7, #16
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	40021000 	.word	0x40021000

08002bb8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e040      	b.n	8002c4c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d106      	bne.n	8002be0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f7fd ffa8 	bl	8000b30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2224      	movs	r2, #36	; 0x24
 8002be4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f022 0201 	bic.w	r2, r2, #1
 8002bf4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f000 f8c0 	bl	8002d7c <UART_SetConfig>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d101      	bne.n	8002c06 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e022      	b.n	8002c4c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d002      	beq.n	8002c14 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f000 fb3e 	bl	8003290 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	685a      	ldr	r2, [r3, #4]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c22:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	689a      	ldr	r2, [r3, #8]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c32:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f042 0201 	orr.w	r2, r2, #1
 8002c42:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f000 fbc5 	bl	80033d4 <UART_CheckIdleState>
 8002c4a:	4603      	mov	r3, r0
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3708      	adds	r7, #8
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b08a      	sub	sp, #40	; 0x28
 8002c58:	af02      	add	r7, sp, #8
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	603b      	str	r3, [r7, #0]
 8002c60:	4613      	mov	r3, r2
 8002c62:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c68:	2b20      	cmp	r3, #32
 8002c6a:	f040 8081 	bne.w	8002d70 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d002      	beq.n	8002c7a <HAL_UART_Transmit+0x26>
 8002c74:	88fb      	ldrh	r3, [r7, #6]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d101      	bne.n	8002c7e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e079      	b.n	8002d72 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d101      	bne.n	8002c8c <HAL_UART_Transmit+0x38>
 8002c88:	2302      	movs	r3, #2
 8002c8a:	e072      	b.n	8002d72 <HAL_UART_Transmit+0x11e>
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2200      	movs	r2, #0
 8002c98:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2221      	movs	r2, #33	; 0x21
 8002c9e:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002ca0:	f7fe f822 	bl	8000ce8 <HAL_GetTick>
 8002ca4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	88fa      	ldrh	r2, [r7, #6]
 8002caa:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	88fa      	ldrh	r2, [r7, #6]
 8002cb2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cbe:	d108      	bne.n	8002cd2 <HAL_UART_Transmit+0x7e>
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d104      	bne.n	8002cd2 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	61bb      	str	r3, [r7, #24]
 8002cd0:	e003      	b.n	8002cda <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8002ce2:	e02d      	b.n	8002d40 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	9300      	str	r3, [sp, #0]
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	2200      	movs	r2, #0
 8002cec:	2180      	movs	r1, #128	; 0x80
 8002cee:	68f8      	ldr	r0, [r7, #12]
 8002cf0:	f000 fbb5 	bl	800345e <UART_WaitOnFlagUntilTimeout>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e039      	b.n	8002d72 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d10b      	bne.n	8002d1c <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	881a      	ldrh	r2, [r3, #0]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d10:	b292      	uxth	r2, r2
 8002d12:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	3302      	adds	r3, #2
 8002d18:	61bb      	str	r3, [r7, #24]
 8002d1a:	e008      	b.n	8002d2e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	781a      	ldrb	r2, [r3, #0]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	b292      	uxth	r2, r2
 8002d26:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	3b01      	subs	r3, #1
 8002d38:	b29a      	uxth	r2, r3
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d1cb      	bne.n	8002ce4 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	9300      	str	r3, [sp, #0]
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	2200      	movs	r2, #0
 8002d54:	2140      	movs	r1, #64	; 0x40
 8002d56:	68f8      	ldr	r0, [r7, #12]
 8002d58:	f000 fb81 	bl	800345e <UART_WaitOnFlagUntilTimeout>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d001      	beq.n	8002d66 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e005      	b.n	8002d72 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2220      	movs	r2, #32
 8002d6a:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	e000      	b.n	8002d72 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8002d70:	2302      	movs	r3, #2
  }
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3720      	adds	r7, #32
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
	...

08002d7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d7c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8002d80:	b088      	sub	sp, #32
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d86:	2300      	movs	r3, #0
 8002d88:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	689a      	ldr	r2, [r3, #8]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	691b      	ldr	r3, [r3, #16]
 8002d92:	431a      	orrs	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	695b      	ldr	r3, [r3, #20]
 8002d98:	431a      	orrs	r2, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	69db      	ldr	r3, [r3, #28]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	4bac      	ldr	r3, [pc, #688]	; (800305c <UART_SetConfig+0x2e0>)
 8002daa:	4013      	ands	r3, r2
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	6812      	ldr	r2, [r2, #0]
 8002db0:	69f9      	ldr	r1, [r7, #28]
 8002db2:	430b      	orrs	r3, r1
 8002db4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	68da      	ldr	r2, [r3, #12]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	430a      	orrs	r2, r1
 8002dca:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	699b      	ldr	r3, [r3, #24]
 8002dd0:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4aa2      	ldr	r2, [pc, #648]	; (8003060 <UART_SetConfig+0x2e4>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d004      	beq.n	8002de6 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a1b      	ldr	r3, [r3, #32]
 8002de0:	69fa      	ldr	r2, [r7, #28]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	69fa      	ldr	r2, [r7, #28]
 8002df6:	430a      	orrs	r2, r1
 8002df8:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a99      	ldr	r2, [pc, #612]	; (8003064 <UART_SetConfig+0x2e8>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d121      	bne.n	8002e48 <UART_SetConfig+0xcc>
 8002e04:	4b98      	ldr	r3, [pc, #608]	; (8003068 <UART_SetConfig+0x2ec>)
 8002e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e0a:	f003 0303 	and.w	r3, r3, #3
 8002e0e:	2b03      	cmp	r3, #3
 8002e10:	d816      	bhi.n	8002e40 <UART_SetConfig+0xc4>
 8002e12:	a201      	add	r2, pc, #4	; (adr r2, 8002e18 <UART_SetConfig+0x9c>)
 8002e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e18:	08002e29 	.word	0x08002e29
 8002e1c:	08002e35 	.word	0x08002e35
 8002e20:	08002e2f 	.word	0x08002e2f
 8002e24:	08002e3b 	.word	0x08002e3b
 8002e28:	2301      	movs	r3, #1
 8002e2a:	76fb      	strb	r3, [r7, #27]
 8002e2c:	e0e8      	b.n	8003000 <UART_SetConfig+0x284>
 8002e2e:	2302      	movs	r3, #2
 8002e30:	76fb      	strb	r3, [r7, #27]
 8002e32:	e0e5      	b.n	8003000 <UART_SetConfig+0x284>
 8002e34:	2304      	movs	r3, #4
 8002e36:	76fb      	strb	r3, [r7, #27]
 8002e38:	e0e2      	b.n	8003000 <UART_SetConfig+0x284>
 8002e3a:	2308      	movs	r3, #8
 8002e3c:	76fb      	strb	r3, [r7, #27]
 8002e3e:	e0df      	b.n	8003000 <UART_SetConfig+0x284>
 8002e40:	2310      	movs	r3, #16
 8002e42:	76fb      	strb	r3, [r7, #27]
 8002e44:	bf00      	nop
 8002e46:	e0db      	b.n	8003000 <UART_SetConfig+0x284>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a87      	ldr	r2, [pc, #540]	; (800306c <UART_SetConfig+0x2f0>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d134      	bne.n	8002ebc <UART_SetConfig+0x140>
 8002e52:	4b85      	ldr	r3, [pc, #532]	; (8003068 <UART_SetConfig+0x2ec>)
 8002e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e58:	f003 030c 	and.w	r3, r3, #12
 8002e5c:	2b0c      	cmp	r3, #12
 8002e5e:	d829      	bhi.n	8002eb4 <UART_SetConfig+0x138>
 8002e60:	a201      	add	r2, pc, #4	; (adr r2, 8002e68 <UART_SetConfig+0xec>)
 8002e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e66:	bf00      	nop
 8002e68:	08002e9d 	.word	0x08002e9d
 8002e6c:	08002eb5 	.word	0x08002eb5
 8002e70:	08002eb5 	.word	0x08002eb5
 8002e74:	08002eb5 	.word	0x08002eb5
 8002e78:	08002ea9 	.word	0x08002ea9
 8002e7c:	08002eb5 	.word	0x08002eb5
 8002e80:	08002eb5 	.word	0x08002eb5
 8002e84:	08002eb5 	.word	0x08002eb5
 8002e88:	08002ea3 	.word	0x08002ea3
 8002e8c:	08002eb5 	.word	0x08002eb5
 8002e90:	08002eb5 	.word	0x08002eb5
 8002e94:	08002eb5 	.word	0x08002eb5
 8002e98:	08002eaf 	.word	0x08002eaf
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	76fb      	strb	r3, [r7, #27]
 8002ea0:	e0ae      	b.n	8003000 <UART_SetConfig+0x284>
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	76fb      	strb	r3, [r7, #27]
 8002ea6:	e0ab      	b.n	8003000 <UART_SetConfig+0x284>
 8002ea8:	2304      	movs	r3, #4
 8002eaa:	76fb      	strb	r3, [r7, #27]
 8002eac:	e0a8      	b.n	8003000 <UART_SetConfig+0x284>
 8002eae:	2308      	movs	r3, #8
 8002eb0:	76fb      	strb	r3, [r7, #27]
 8002eb2:	e0a5      	b.n	8003000 <UART_SetConfig+0x284>
 8002eb4:	2310      	movs	r3, #16
 8002eb6:	76fb      	strb	r3, [r7, #27]
 8002eb8:	bf00      	nop
 8002eba:	e0a1      	b.n	8003000 <UART_SetConfig+0x284>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a6b      	ldr	r2, [pc, #428]	; (8003070 <UART_SetConfig+0x2f4>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d120      	bne.n	8002f08 <UART_SetConfig+0x18c>
 8002ec6:	4b68      	ldr	r3, [pc, #416]	; (8003068 <UART_SetConfig+0x2ec>)
 8002ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ecc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002ed0:	2b10      	cmp	r3, #16
 8002ed2:	d00f      	beq.n	8002ef4 <UART_SetConfig+0x178>
 8002ed4:	2b10      	cmp	r3, #16
 8002ed6:	d802      	bhi.n	8002ede <UART_SetConfig+0x162>
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d005      	beq.n	8002ee8 <UART_SetConfig+0x16c>
 8002edc:	e010      	b.n	8002f00 <UART_SetConfig+0x184>
 8002ede:	2b20      	cmp	r3, #32
 8002ee0:	d005      	beq.n	8002eee <UART_SetConfig+0x172>
 8002ee2:	2b30      	cmp	r3, #48	; 0x30
 8002ee4:	d009      	beq.n	8002efa <UART_SetConfig+0x17e>
 8002ee6:	e00b      	b.n	8002f00 <UART_SetConfig+0x184>
 8002ee8:	2300      	movs	r3, #0
 8002eea:	76fb      	strb	r3, [r7, #27]
 8002eec:	e088      	b.n	8003000 <UART_SetConfig+0x284>
 8002eee:	2302      	movs	r3, #2
 8002ef0:	76fb      	strb	r3, [r7, #27]
 8002ef2:	e085      	b.n	8003000 <UART_SetConfig+0x284>
 8002ef4:	2304      	movs	r3, #4
 8002ef6:	76fb      	strb	r3, [r7, #27]
 8002ef8:	e082      	b.n	8003000 <UART_SetConfig+0x284>
 8002efa:	2308      	movs	r3, #8
 8002efc:	76fb      	strb	r3, [r7, #27]
 8002efe:	e07f      	b.n	8003000 <UART_SetConfig+0x284>
 8002f00:	2310      	movs	r3, #16
 8002f02:	76fb      	strb	r3, [r7, #27]
 8002f04:	bf00      	nop
 8002f06:	e07b      	b.n	8003000 <UART_SetConfig+0x284>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a59      	ldr	r2, [pc, #356]	; (8003074 <UART_SetConfig+0x2f8>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d120      	bne.n	8002f54 <UART_SetConfig+0x1d8>
 8002f12:	4b55      	ldr	r3, [pc, #340]	; (8003068 <UART_SetConfig+0x2ec>)
 8002f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f18:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002f1c:	2b40      	cmp	r3, #64	; 0x40
 8002f1e:	d00f      	beq.n	8002f40 <UART_SetConfig+0x1c4>
 8002f20:	2b40      	cmp	r3, #64	; 0x40
 8002f22:	d802      	bhi.n	8002f2a <UART_SetConfig+0x1ae>
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d005      	beq.n	8002f34 <UART_SetConfig+0x1b8>
 8002f28:	e010      	b.n	8002f4c <UART_SetConfig+0x1d0>
 8002f2a:	2b80      	cmp	r3, #128	; 0x80
 8002f2c:	d005      	beq.n	8002f3a <UART_SetConfig+0x1be>
 8002f2e:	2bc0      	cmp	r3, #192	; 0xc0
 8002f30:	d009      	beq.n	8002f46 <UART_SetConfig+0x1ca>
 8002f32:	e00b      	b.n	8002f4c <UART_SetConfig+0x1d0>
 8002f34:	2300      	movs	r3, #0
 8002f36:	76fb      	strb	r3, [r7, #27]
 8002f38:	e062      	b.n	8003000 <UART_SetConfig+0x284>
 8002f3a:	2302      	movs	r3, #2
 8002f3c:	76fb      	strb	r3, [r7, #27]
 8002f3e:	e05f      	b.n	8003000 <UART_SetConfig+0x284>
 8002f40:	2304      	movs	r3, #4
 8002f42:	76fb      	strb	r3, [r7, #27]
 8002f44:	e05c      	b.n	8003000 <UART_SetConfig+0x284>
 8002f46:	2308      	movs	r3, #8
 8002f48:	76fb      	strb	r3, [r7, #27]
 8002f4a:	e059      	b.n	8003000 <UART_SetConfig+0x284>
 8002f4c:	2310      	movs	r3, #16
 8002f4e:	76fb      	strb	r3, [r7, #27]
 8002f50:	bf00      	nop
 8002f52:	e055      	b.n	8003000 <UART_SetConfig+0x284>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a47      	ldr	r2, [pc, #284]	; (8003078 <UART_SetConfig+0x2fc>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d124      	bne.n	8002fa8 <UART_SetConfig+0x22c>
 8002f5e:	4b42      	ldr	r3, [pc, #264]	; (8003068 <UART_SetConfig+0x2ec>)
 8002f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f6c:	d012      	beq.n	8002f94 <UART_SetConfig+0x218>
 8002f6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f72:	d802      	bhi.n	8002f7a <UART_SetConfig+0x1fe>
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d007      	beq.n	8002f88 <UART_SetConfig+0x20c>
 8002f78:	e012      	b.n	8002fa0 <UART_SetConfig+0x224>
 8002f7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f7e:	d006      	beq.n	8002f8e <UART_SetConfig+0x212>
 8002f80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f84:	d009      	beq.n	8002f9a <UART_SetConfig+0x21e>
 8002f86:	e00b      	b.n	8002fa0 <UART_SetConfig+0x224>
 8002f88:	2300      	movs	r3, #0
 8002f8a:	76fb      	strb	r3, [r7, #27]
 8002f8c:	e038      	b.n	8003000 <UART_SetConfig+0x284>
 8002f8e:	2302      	movs	r3, #2
 8002f90:	76fb      	strb	r3, [r7, #27]
 8002f92:	e035      	b.n	8003000 <UART_SetConfig+0x284>
 8002f94:	2304      	movs	r3, #4
 8002f96:	76fb      	strb	r3, [r7, #27]
 8002f98:	e032      	b.n	8003000 <UART_SetConfig+0x284>
 8002f9a:	2308      	movs	r3, #8
 8002f9c:	76fb      	strb	r3, [r7, #27]
 8002f9e:	e02f      	b.n	8003000 <UART_SetConfig+0x284>
 8002fa0:	2310      	movs	r3, #16
 8002fa2:	76fb      	strb	r3, [r7, #27]
 8002fa4:	bf00      	nop
 8002fa6:	e02b      	b.n	8003000 <UART_SetConfig+0x284>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a2c      	ldr	r2, [pc, #176]	; (8003060 <UART_SetConfig+0x2e4>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d124      	bne.n	8002ffc <UART_SetConfig+0x280>
 8002fb2:	4b2d      	ldr	r3, [pc, #180]	; (8003068 <UART_SetConfig+0x2ec>)
 8002fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fb8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002fbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fc0:	d012      	beq.n	8002fe8 <UART_SetConfig+0x26c>
 8002fc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fc6:	d802      	bhi.n	8002fce <UART_SetConfig+0x252>
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d007      	beq.n	8002fdc <UART_SetConfig+0x260>
 8002fcc:	e012      	b.n	8002ff4 <UART_SetConfig+0x278>
 8002fce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fd2:	d006      	beq.n	8002fe2 <UART_SetConfig+0x266>
 8002fd4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002fd8:	d009      	beq.n	8002fee <UART_SetConfig+0x272>
 8002fda:	e00b      	b.n	8002ff4 <UART_SetConfig+0x278>
 8002fdc:	2300      	movs	r3, #0
 8002fde:	76fb      	strb	r3, [r7, #27]
 8002fe0:	e00e      	b.n	8003000 <UART_SetConfig+0x284>
 8002fe2:	2302      	movs	r3, #2
 8002fe4:	76fb      	strb	r3, [r7, #27]
 8002fe6:	e00b      	b.n	8003000 <UART_SetConfig+0x284>
 8002fe8:	2304      	movs	r3, #4
 8002fea:	76fb      	strb	r3, [r7, #27]
 8002fec:	e008      	b.n	8003000 <UART_SetConfig+0x284>
 8002fee:	2308      	movs	r3, #8
 8002ff0:	76fb      	strb	r3, [r7, #27]
 8002ff2:	e005      	b.n	8003000 <UART_SetConfig+0x284>
 8002ff4:	2310      	movs	r3, #16
 8002ff6:	76fb      	strb	r3, [r7, #27]
 8002ff8:	bf00      	nop
 8002ffa:	e001      	b.n	8003000 <UART_SetConfig+0x284>
 8002ffc:	2310      	movs	r3, #16
 8002ffe:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a16      	ldr	r2, [pc, #88]	; (8003060 <UART_SetConfig+0x2e4>)
 8003006:	4293      	cmp	r3, r2
 8003008:	f040 8087 	bne.w	800311a <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800300c:	7efb      	ldrb	r3, [r7, #27]
 800300e:	2b08      	cmp	r3, #8
 8003010:	d836      	bhi.n	8003080 <UART_SetConfig+0x304>
 8003012:	a201      	add	r2, pc, #4	; (adr r2, 8003018 <UART_SetConfig+0x29c>)
 8003014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003018:	0800303d 	.word	0x0800303d
 800301c:	08003081 	.word	0x08003081
 8003020:	08003045 	.word	0x08003045
 8003024:	08003081 	.word	0x08003081
 8003028:	0800304b 	.word	0x0800304b
 800302c:	08003081 	.word	0x08003081
 8003030:	08003081 	.word	0x08003081
 8003034:	08003081 	.word	0x08003081
 8003038:	08003053 	.word	0x08003053
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800303c:	f7ff f880 	bl	8002140 <HAL_RCC_GetPCLK1Freq>
 8003040:	6178      	str	r0, [r7, #20]
        break;
 8003042:	e022      	b.n	800308a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003044:	4b0d      	ldr	r3, [pc, #52]	; (800307c <UART_SetConfig+0x300>)
 8003046:	617b      	str	r3, [r7, #20]
        break;
 8003048:	e01f      	b.n	800308a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800304a:	f7fe ffe3 	bl	8002014 <HAL_RCC_GetSysClockFreq>
 800304e:	6178      	str	r0, [r7, #20]
        break;
 8003050:	e01b      	b.n	800308a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003052:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003056:	617b      	str	r3, [r7, #20]
        break;
 8003058:	e017      	b.n	800308a <UART_SetConfig+0x30e>
 800305a:	bf00      	nop
 800305c:	efff69f3 	.word	0xefff69f3
 8003060:	40008000 	.word	0x40008000
 8003064:	40013800 	.word	0x40013800
 8003068:	40021000 	.word	0x40021000
 800306c:	40004400 	.word	0x40004400
 8003070:	40004800 	.word	0x40004800
 8003074:	40004c00 	.word	0x40004c00
 8003078:	40005000 	.word	0x40005000
 800307c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003080:	2300      	movs	r3, #0
 8003082:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	76bb      	strb	r3, [r7, #26]
        break;
 8003088:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	2b00      	cmp	r3, #0
 800308e:	f000 80f1 	beq.w	8003274 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685a      	ldr	r2, [r3, #4]
 8003096:	4613      	mov	r3, r2
 8003098:	005b      	lsls	r3, r3, #1
 800309a:	4413      	add	r3, r2
 800309c:	697a      	ldr	r2, [r7, #20]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d305      	bcc.n	80030ae <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80030a8:	697a      	ldr	r2, [r7, #20]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d902      	bls.n	80030b4 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	76bb      	strb	r3, [r7, #26]
 80030b2:	e0df      	b.n	8003274 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	4619      	mov	r1, r3
 80030b8:	f04f 0200 	mov.w	r2, #0
 80030bc:	f04f 0300 	mov.w	r3, #0
 80030c0:	f04f 0400 	mov.w	r4, #0
 80030c4:	0214      	lsls	r4, r2, #8
 80030c6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80030ca:	020b      	lsls	r3, r1, #8
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	6852      	ldr	r2, [r2, #4]
 80030d0:	0852      	lsrs	r2, r2, #1
 80030d2:	4611      	mov	r1, r2
 80030d4:	f04f 0200 	mov.w	r2, #0
 80030d8:	eb13 0b01 	adds.w	fp, r3, r1
 80030dc:	eb44 0c02 	adc.w	ip, r4, r2
 80030e0:	4658      	mov	r0, fp
 80030e2:	4661      	mov	r1, ip
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f04f 0400 	mov.w	r4, #0
 80030ec:	461a      	mov	r2, r3
 80030ee:	4623      	mov	r3, r4
 80030f0:	f7fd f8be 	bl	8000270 <__aeabi_uldivmod>
 80030f4:	4603      	mov	r3, r0
 80030f6:	460c      	mov	r4, r1
 80030f8:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003100:	d308      	bcc.n	8003114 <UART_SetConfig+0x398>
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003108:	d204      	bcs.n	8003114 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	693a      	ldr	r2, [r7, #16]
 8003110:	60da      	str	r2, [r3, #12]
 8003112:	e0af      	b.n	8003274 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	76bb      	strb	r3, [r7, #26]
 8003118:	e0ac      	b.n	8003274 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	69db      	ldr	r3, [r3, #28]
 800311e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003122:	d15b      	bne.n	80031dc <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8003124:	7efb      	ldrb	r3, [r7, #27]
 8003126:	2b08      	cmp	r3, #8
 8003128:	d827      	bhi.n	800317a <UART_SetConfig+0x3fe>
 800312a:	a201      	add	r2, pc, #4	; (adr r2, 8003130 <UART_SetConfig+0x3b4>)
 800312c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003130:	08003155 	.word	0x08003155
 8003134:	0800315d 	.word	0x0800315d
 8003138:	08003165 	.word	0x08003165
 800313c:	0800317b 	.word	0x0800317b
 8003140:	0800316b 	.word	0x0800316b
 8003144:	0800317b 	.word	0x0800317b
 8003148:	0800317b 	.word	0x0800317b
 800314c:	0800317b 	.word	0x0800317b
 8003150:	08003173 	.word	0x08003173
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003154:	f7fe fff4 	bl	8002140 <HAL_RCC_GetPCLK1Freq>
 8003158:	6178      	str	r0, [r7, #20]
        break;
 800315a:	e013      	b.n	8003184 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800315c:	f7ff f806 	bl	800216c <HAL_RCC_GetPCLK2Freq>
 8003160:	6178      	str	r0, [r7, #20]
        break;
 8003162:	e00f      	b.n	8003184 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003164:	4b49      	ldr	r3, [pc, #292]	; (800328c <UART_SetConfig+0x510>)
 8003166:	617b      	str	r3, [r7, #20]
        break;
 8003168:	e00c      	b.n	8003184 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800316a:	f7fe ff53 	bl	8002014 <HAL_RCC_GetSysClockFreq>
 800316e:	6178      	str	r0, [r7, #20]
        break;
 8003170:	e008      	b.n	8003184 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003172:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003176:	617b      	str	r3, [r7, #20]
        break;
 8003178:	e004      	b.n	8003184 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800317a:	2300      	movs	r3, #0
 800317c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	76bb      	strb	r3, [r7, #26]
        break;
 8003182:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d074      	beq.n	8003274 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	005a      	lsls	r2, r3, #1
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	085b      	lsrs	r3, r3, #1
 8003194:	441a      	add	r2, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	fbb2 f3f3 	udiv	r3, r2, r3
 800319e:	b29b      	uxth	r3, r3
 80031a0:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	2b0f      	cmp	r3, #15
 80031a6:	d916      	bls.n	80031d6 <UART_SetConfig+0x45a>
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031ae:	d212      	bcs.n	80031d6 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	f023 030f 	bic.w	r3, r3, #15
 80031b8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	085b      	lsrs	r3, r3, #1
 80031be:	b29b      	uxth	r3, r3
 80031c0:	f003 0307 	and.w	r3, r3, #7
 80031c4:	b29a      	uxth	r2, r3
 80031c6:	89fb      	ldrh	r3, [r7, #14]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	89fa      	ldrh	r2, [r7, #14]
 80031d2:	60da      	str	r2, [r3, #12]
 80031d4:	e04e      	b.n	8003274 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	76bb      	strb	r3, [r7, #26]
 80031da:	e04b      	b.n	8003274 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80031dc:	7efb      	ldrb	r3, [r7, #27]
 80031de:	2b08      	cmp	r3, #8
 80031e0:	d827      	bhi.n	8003232 <UART_SetConfig+0x4b6>
 80031e2:	a201      	add	r2, pc, #4	; (adr r2, 80031e8 <UART_SetConfig+0x46c>)
 80031e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031e8:	0800320d 	.word	0x0800320d
 80031ec:	08003215 	.word	0x08003215
 80031f0:	0800321d 	.word	0x0800321d
 80031f4:	08003233 	.word	0x08003233
 80031f8:	08003223 	.word	0x08003223
 80031fc:	08003233 	.word	0x08003233
 8003200:	08003233 	.word	0x08003233
 8003204:	08003233 	.word	0x08003233
 8003208:	0800322b 	.word	0x0800322b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800320c:	f7fe ff98 	bl	8002140 <HAL_RCC_GetPCLK1Freq>
 8003210:	6178      	str	r0, [r7, #20]
        break;
 8003212:	e013      	b.n	800323c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003214:	f7fe ffaa 	bl	800216c <HAL_RCC_GetPCLK2Freq>
 8003218:	6178      	str	r0, [r7, #20]
        break;
 800321a:	e00f      	b.n	800323c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800321c:	4b1b      	ldr	r3, [pc, #108]	; (800328c <UART_SetConfig+0x510>)
 800321e:	617b      	str	r3, [r7, #20]
        break;
 8003220:	e00c      	b.n	800323c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003222:	f7fe fef7 	bl	8002014 <HAL_RCC_GetSysClockFreq>
 8003226:	6178      	str	r0, [r7, #20]
        break;
 8003228:	e008      	b.n	800323c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800322a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800322e:	617b      	str	r3, [r7, #20]
        break;
 8003230:	e004      	b.n	800323c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003232:	2300      	movs	r3, #0
 8003234:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	76bb      	strb	r3, [r7, #26]
        break;
 800323a:	bf00      	nop
    }

    if (pclk != 0U)
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d018      	beq.n	8003274 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	085a      	lsrs	r2, r3, #1
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	441a      	add	r2, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	fbb2 f3f3 	udiv	r3, r2, r3
 8003254:	b29b      	uxth	r3, r3
 8003256:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	2b0f      	cmp	r3, #15
 800325c:	d908      	bls.n	8003270 <UART_SetConfig+0x4f4>
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003264:	d204      	bcs.n	8003270 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	60da      	str	r2, [r3, #12]
 800326e:	e001      	b.n	8003274 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003280:	7ebb      	ldrb	r3, [r7, #26]
}
 8003282:	4618      	mov	r0, r3
 8003284:	3720      	adds	r7, #32
 8003286:	46bd      	mov	sp, r7
 8003288:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800328c:	00f42400 	.word	0x00f42400

08003290 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329c:	f003 0301 	and.w	r3, r3, #1
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d00a      	beq.n	80032ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	430a      	orrs	r2, r1
 80032b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032be:	f003 0302 	and.w	r3, r3, #2
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d00a      	beq.n	80032dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	430a      	orrs	r2, r1
 80032da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e0:	f003 0304 	and.w	r3, r3, #4
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d00a      	beq.n	80032fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	430a      	orrs	r2, r1
 80032fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003302:	f003 0308 	and.w	r3, r3, #8
 8003306:	2b00      	cmp	r3, #0
 8003308:	d00a      	beq.n	8003320 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	430a      	orrs	r2, r1
 800331e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003324:	f003 0310 	and.w	r3, r3, #16
 8003328:	2b00      	cmp	r3, #0
 800332a:	d00a      	beq.n	8003342 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	430a      	orrs	r2, r1
 8003340:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003346:	f003 0320 	and.w	r3, r3, #32
 800334a:	2b00      	cmp	r3, #0
 800334c:	d00a      	beq.n	8003364 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	430a      	orrs	r2, r1
 8003362:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003368:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800336c:	2b00      	cmp	r3, #0
 800336e:	d01a      	beq.n	80033a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	430a      	orrs	r2, r1
 8003384:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800338e:	d10a      	bne.n	80033a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	430a      	orrs	r2, r1
 80033a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d00a      	beq.n	80033c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	430a      	orrs	r2, r1
 80033c6:	605a      	str	r2, [r3, #4]
  }
}
 80033c8:	bf00      	nop
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b086      	sub	sp, #24
 80033d8:	af02      	add	r7, sp, #8
 80033da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80033e2:	f7fd fc81 	bl	8000ce8 <HAL_GetTick>
 80033e6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0308 	and.w	r3, r3, #8
 80033f2:	2b08      	cmp	r3, #8
 80033f4:	d10e      	bne.n	8003414 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033f6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80033fa:	9300      	str	r3, [sp, #0]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2200      	movs	r2, #0
 8003400:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f000 f82a 	bl	800345e <UART_WaitOnFlagUntilTimeout>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d001      	beq.n	8003414 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e020      	b.n	8003456 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0304 	and.w	r3, r3, #4
 800341e:	2b04      	cmp	r3, #4
 8003420:	d10e      	bne.n	8003440 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003422:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003426:	9300      	str	r3, [sp, #0]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2200      	movs	r2, #0
 800342c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f000 f814 	bl	800345e <UART_WaitOnFlagUntilTimeout>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d001      	beq.n	8003440 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	e00a      	b.n	8003456 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2220      	movs	r2, #32
 8003444:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2220      	movs	r2, #32
 800344a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	3710      	adds	r7, #16
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800345e:	b580      	push	{r7, lr}
 8003460:	b084      	sub	sp, #16
 8003462:	af00      	add	r7, sp, #0
 8003464:	60f8      	str	r0, [r7, #12]
 8003466:	60b9      	str	r1, [r7, #8]
 8003468:	603b      	str	r3, [r7, #0]
 800346a:	4613      	mov	r3, r2
 800346c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800346e:	e05d      	b.n	800352c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003476:	d059      	beq.n	800352c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003478:	f7fd fc36 	bl	8000ce8 <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	69ba      	ldr	r2, [r7, #24]
 8003484:	429a      	cmp	r2, r3
 8003486:	d302      	bcc.n	800348e <UART_WaitOnFlagUntilTimeout+0x30>
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d11b      	bne.n	80034c6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800349c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	689a      	ldr	r2, [r3, #8]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f022 0201 	bic.w	r2, r2, #1
 80034ac:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2220      	movs	r2, #32
 80034b2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2220      	movs	r2, #32
 80034b8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e042      	b.n	800354c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0304 	and.w	r3, r3, #4
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d02b      	beq.n	800352c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	69db      	ldr	r3, [r3, #28]
 80034da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034e2:	d123      	bne.n	800352c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80034ec:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80034fc:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	689a      	ldr	r2, [r3, #8]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f022 0201 	bic.w	r2, r2, #1
 800350c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2220      	movs	r2, #32
 8003512:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2220      	movs	r2, #32
 8003518:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2220      	movs	r2, #32
 800351e:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	e00f      	b.n	800354c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	69da      	ldr	r2, [r3, #28]
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	4013      	ands	r3, r2
 8003536:	68ba      	ldr	r2, [r7, #8]
 8003538:	429a      	cmp	r2, r3
 800353a:	bf0c      	ite	eq
 800353c:	2301      	moveq	r3, #1
 800353e:	2300      	movne	r3, #0
 8003540:	b2db      	uxtb	r3, r3
 8003542:	461a      	mov	r2, r3
 8003544:	79fb      	ldrb	r3, [r7, #7]
 8003546:	429a      	cmp	r2, r3
 8003548:	d092      	beq.n	8003470 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800354a:	2300      	movs	r3, #0
}
 800354c:	4618      	mov	r0, r3
 800354e:	3710      	adds	r7, #16
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <__errno>:
 8003554:	4b01      	ldr	r3, [pc, #4]	; (800355c <__errno+0x8>)
 8003556:	6818      	ldr	r0, [r3, #0]
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	2000000c 	.word	0x2000000c

08003560 <__libc_init_array>:
 8003560:	b570      	push	{r4, r5, r6, lr}
 8003562:	4e0d      	ldr	r6, [pc, #52]	; (8003598 <__libc_init_array+0x38>)
 8003564:	4c0d      	ldr	r4, [pc, #52]	; (800359c <__libc_init_array+0x3c>)
 8003566:	1ba4      	subs	r4, r4, r6
 8003568:	10a4      	asrs	r4, r4, #2
 800356a:	2500      	movs	r5, #0
 800356c:	42a5      	cmp	r5, r4
 800356e:	d109      	bne.n	8003584 <__libc_init_array+0x24>
 8003570:	4e0b      	ldr	r6, [pc, #44]	; (80035a0 <__libc_init_array+0x40>)
 8003572:	4c0c      	ldr	r4, [pc, #48]	; (80035a4 <__libc_init_array+0x44>)
 8003574:	f000 ff04 	bl	8004380 <_init>
 8003578:	1ba4      	subs	r4, r4, r6
 800357a:	10a4      	asrs	r4, r4, #2
 800357c:	2500      	movs	r5, #0
 800357e:	42a5      	cmp	r5, r4
 8003580:	d105      	bne.n	800358e <__libc_init_array+0x2e>
 8003582:	bd70      	pop	{r4, r5, r6, pc}
 8003584:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003588:	4798      	blx	r3
 800358a:	3501      	adds	r5, #1
 800358c:	e7ee      	b.n	800356c <__libc_init_array+0xc>
 800358e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003592:	4798      	blx	r3
 8003594:	3501      	adds	r5, #1
 8003596:	e7f2      	b.n	800357e <__libc_init_array+0x1e>
 8003598:	080044a8 	.word	0x080044a8
 800359c:	080044a8 	.word	0x080044a8
 80035a0:	080044a8 	.word	0x080044a8
 80035a4:	080044ac 	.word	0x080044ac

080035a8 <memset>:
 80035a8:	4402      	add	r2, r0
 80035aa:	4603      	mov	r3, r0
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d100      	bne.n	80035b2 <memset+0xa>
 80035b0:	4770      	bx	lr
 80035b2:	f803 1b01 	strb.w	r1, [r3], #1
 80035b6:	e7f9      	b.n	80035ac <memset+0x4>

080035b8 <iprintf>:
 80035b8:	b40f      	push	{r0, r1, r2, r3}
 80035ba:	4b0a      	ldr	r3, [pc, #40]	; (80035e4 <iprintf+0x2c>)
 80035bc:	b513      	push	{r0, r1, r4, lr}
 80035be:	681c      	ldr	r4, [r3, #0]
 80035c0:	b124      	cbz	r4, 80035cc <iprintf+0x14>
 80035c2:	69a3      	ldr	r3, [r4, #24]
 80035c4:	b913      	cbnz	r3, 80035cc <iprintf+0x14>
 80035c6:	4620      	mov	r0, r4
 80035c8:	f000 f84e 	bl	8003668 <__sinit>
 80035cc:	ab05      	add	r3, sp, #20
 80035ce:	9a04      	ldr	r2, [sp, #16]
 80035d0:	68a1      	ldr	r1, [r4, #8]
 80035d2:	9301      	str	r3, [sp, #4]
 80035d4:	4620      	mov	r0, r4
 80035d6:	f000 f955 	bl	8003884 <_vfiprintf_r>
 80035da:	b002      	add	sp, #8
 80035dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035e0:	b004      	add	sp, #16
 80035e2:	4770      	bx	lr
 80035e4:	2000000c 	.word	0x2000000c

080035e8 <std>:
 80035e8:	2300      	movs	r3, #0
 80035ea:	b510      	push	{r4, lr}
 80035ec:	4604      	mov	r4, r0
 80035ee:	e9c0 3300 	strd	r3, r3, [r0]
 80035f2:	6083      	str	r3, [r0, #8]
 80035f4:	8181      	strh	r1, [r0, #12]
 80035f6:	6643      	str	r3, [r0, #100]	; 0x64
 80035f8:	81c2      	strh	r2, [r0, #14]
 80035fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80035fe:	6183      	str	r3, [r0, #24]
 8003600:	4619      	mov	r1, r3
 8003602:	2208      	movs	r2, #8
 8003604:	305c      	adds	r0, #92	; 0x5c
 8003606:	f7ff ffcf 	bl	80035a8 <memset>
 800360a:	4b05      	ldr	r3, [pc, #20]	; (8003620 <std+0x38>)
 800360c:	6263      	str	r3, [r4, #36]	; 0x24
 800360e:	4b05      	ldr	r3, [pc, #20]	; (8003624 <std+0x3c>)
 8003610:	62a3      	str	r3, [r4, #40]	; 0x28
 8003612:	4b05      	ldr	r3, [pc, #20]	; (8003628 <std+0x40>)
 8003614:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003616:	4b05      	ldr	r3, [pc, #20]	; (800362c <std+0x44>)
 8003618:	6224      	str	r4, [r4, #32]
 800361a:	6323      	str	r3, [r4, #48]	; 0x30
 800361c:	bd10      	pop	{r4, pc}
 800361e:	bf00      	nop
 8003620:	08003de1 	.word	0x08003de1
 8003624:	08003e03 	.word	0x08003e03
 8003628:	08003e3b 	.word	0x08003e3b
 800362c:	08003e5f 	.word	0x08003e5f

08003630 <_cleanup_r>:
 8003630:	4901      	ldr	r1, [pc, #4]	; (8003638 <_cleanup_r+0x8>)
 8003632:	f000 b885 	b.w	8003740 <_fwalk_reent>
 8003636:	bf00      	nop
 8003638:	08004139 	.word	0x08004139

0800363c <__sfmoreglue>:
 800363c:	b570      	push	{r4, r5, r6, lr}
 800363e:	1e4a      	subs	r2, r1, #1
 8003640:	2568      	movs	r5, #104	; 0x68
 8003642:	4355      	muls	r5, r2
 8003644:	460e      	mov	r6, r1
 8003646:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800364a:	f000 f897 	bl	800377c <_malloc_r>
 800364e:	4604      	mov	r4, r0
 8003650:	b140      	cbz	r0, 8003664 <__sfmoreglue+0x28>
 8003652:	2100      	movs	r1, #0
 8003654:	e9c0 1600 	strd	r1, r6, [r0]
 8003658:	300c      	adds	r0, #12
 800365a:	60a0      	str	r0, [r4, #8]
 800365c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003660:	f7ff ffa2 	bl	80035a8 <memset>
 8003664:	4620      	mov	r0, r4
 8003666:	bd70      	pop	{r4, r5, r6, pc}

08003668 <__sinit>:
 8003668:	6983      	ldr	r3, [r0, #24]
 800366a:	b510      	push	{r4, lr}
 800366c:	4604      	mov	r4, r0
 800366e:	bb33      	cbnz	r3, 80036be <__sinit+0x56>
 8003670:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003674:	6503      	str	r3, [r0, #80]	; 0x50
 8003676:	4b12      	ldr	r3, [pc, #72]	; (80036c0 <__sinit+0x58>)
 8003678:	4a12      	ldr	r2, [pc, #72]	; (80036c4 <__sinit+0x5c>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	6282      	str	r2, [r0, #40]	; 0x28
 800367e:	4298      	cmp	r0, r3
 8003680:	bf04      	itt	eq
 8003682:	2301      	moveq	r3, #1
 8003684:	6183      	streq	r3, [r0, #24]
 8003686:	f000 f81f 	bl	80036c8 <__sfp>
 800368a:	6060      	str	r0, [r4, #4]
 800368c:	4620      	mov	r0, r4
 800368e:	f000 f81b 	bl	80036c8 <__sfp>
 8003692:	60a0      	str	r0, [r4, #8]
 8003694:	4620      	mov	r0, r4
 8003696:	f000 f817 	bl	80036c8 <__sfp>
 800369a:	2200      	movs	r2, #0
 800369c:	60e0      	str	r0, [r4, #12]
 800369e:	2104      	movs	r1, #4
 80036a0:	6860      	ldr	r0, [r4, #4]
 80036a2:	f7ff ffa1 	bl	80035e8 <std>
 80036a6:	2201      	movs	r2, #1
 80036a8:	2109      	movs	r1, #9
 80036aa:	68a0      	ldr	r0, [r4, #8]
 80036ac:	f7ff ff9c 	bl	80035e8 <std>
 80036b0:	2202      	movs	r2, #2
 80036b2:	2112      	movs	r1, #18
 80036b4:	68e0      	ldr	r0, [r4, #12]
 80036b6:	f7ff ff97 	bl	80035e8 <std>
 80036ba:	2301      	movs	r3, #1
 80036bc:	61a3      	str	r3, [r4, #24]
 80036be:	bd10      	pop	{r4, pc}
 80036c0:	08004408 	.word	0x08004408
 80036c4:	08003631 	.word	0x08003631

080036c8 <__sfp>:
 80036c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036ca:	4b1b      	ldr	r3, [pc, #108]	; (8003738 <__sfp+0x70>)
 80036cc:	681e      	ldr	r6, [r3, #0]
 80036ce:	69b3      	ldr	r3, [r6, #24]
 80036d0:	4607      	mov	r7, r0
 80036d2:	b913      	cbnz	r3, 80036da <__sfp+0x12>
 80036d4:	4630      	mov	r0, r6
 80036d6:	f7ff ffc7 	bl	8003668 <__sinit>
 80036da:	3648      	adds	r6, #72	; 0x48
 80036dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80036e0:	3b01      	subs	r3, #1
 80036e2:	d503      	bpl.n	80036ec <__sfp+0x24>
 80036e4:	6833      	ldr	r3, [r6, #0]
 80036e6:	b133      	cbz	r3, 80036f6 <__sfp+0x2e>
 80036e8:	6836      	ldr	r6, [r6, #0]
 80036ea:	e7f7      	b.n	80036dc <__sfp+0x14>
 80036ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80036f0:	b16d      	cbz	r5, 800370e <__sfp+0x46>
 80036f2:	3468      	adds	r4, #104	; 0x68
 80036f4:	e7f4      	b.n	80036e0 <__sfp+0x18>
 80036f6:	2104      	movs	r1, #4
 80036f8:	4638      	mov	r0, r7
 80036fa:	f7ff ff9f 	bl	800363c <__sfmoreglue>
 80036fe:	6030      	str	r0, [r6, #0]
 8003700:	2800      	cmp	r0, #0
 8003702:	d1f1      	bne.n	80036e8 <__sfp+0x20>
 8003704:	230c      	movs	r3, #12
 8003706:	603b      	str	r3, [r7, #0]
 8003708:	4604      	mov	r4, r0
 800370a:	4620      	mov	r0, r4
 800370c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800370e:	4b0b      	ldr	r3, [pc, #44]	; (800373c <__sfp+0x74>)
 8003710:	6665      	str	r5, [r4, #100]	; 0x64
 8003712:	e9c4 5500 	strd	r5, r5, [r4]
 8003716:	60a5      	str	r5, [r4, #8]
 8003718:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800371c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003720:	2208      	movs	r2, #8
 8003722:	4629      	mov	r1, r5
 8003724:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003728:	f7ff ff3e 	bl	80035a8 <memset>
 800372c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003730:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003734:	e7e9      	b.n	800370a <__sfp+0x42>
 8003736:	bf00      	nop
 8003738:	08004408 	.word	0x08004408
 800373c:	ffff0001 	.word	0xffff0001

08003740 <_fwalk_reent>:
 8003740:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003744:	4680      	mov	r8, r0
 8003746:	4689      	mov	r9, r1
 8003748:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800374c:	2600      	movs	r6, #0
 800374e:	b914      	cbnz	r4, 8003756 <_fwalk_reent+0x16>
 8003750:	4630      	mov	r0, r6
 8003752:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003756:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800375a:	3f01      	subs	r7, #1
 800375c:	d501      	bpl.n	8003762 <_fwalk_reent+0x22>
 800375e:	6824      	ldr	r4, [r4, #0]
 8003760:	e7f5      	b.n	800374e <_fwalk_reent+0xe>
 8003762:	89ab      	ldrh	r3, [r5, #12]
 8003764:	2b01      	cmp	r3, #1
 8003766:	d907      	bls.n	8003778 <_fwalk_reent+0x38>
 8003768:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800376c:	3301      	adds	r3, #1
 800376e:	d003      	beq.n	8003778 <_fwalk_reent+0x38>
 8003770:	4629      	mov	r1, r5
 8003772:	4640      	mov	r0, r8
 8003774:	47c8      	blx	r9
 8003776:	4306      	orrs	r6, r0
 8003778:	3568      	adds	r5, #104	; 0x68
 800377a:	e7ee      	b.n	800375a <_fwalk_reent+0x1a>

0800377c <_malloc_r>:
 800377c:	b570      	push	{r4, r5, r6, lr}
 800377e:	1ccd      	adds	r5, r1, #3
 8003780:	f025 0503 	bic.w	r5, r5, #3
 8003784:	3508      	adds	r5, #8
 8003786:	2d0c      	cmp	r5, #12
 8003788:	bf38      	it	cc
 800378a:	250c      	movcc	r5, #12
 800378c:	2d00      	cmp	r5, #0
 800378e:	4606      	mov	r6, r0
 8003790:	db01      	blt.n	8003796 <_malloc_r+0x1a>
 8003792:	42a9      	cmp	r1, r5
 8003794:	d903      	bls.n	800379e <_malloc_r+0x22>
 8003796:	230c      	movs	r3, #12
 8003798:	6033      	str	r3, [r6, #0]
 800379a:	2000      	movs	r0, #0
 800379c:	bd70      	pop	{r4, r5, r6, pc}
 800379e:	f000 fd6b 	bl	8004278 <__malloc_lock>
 80037a2:	4a21      	ldr	r2, [pc, #132]	; (8003828 <_malloc_r+0xac>)
 80037a4:	6814      	ldr	r4, [r2, #0]
 80037a6:	4621      	mov	r1, r4
 80037a8:	b991      	cbnz	r1, 80037d0 <_malloc_r+0x54>
 80037aa:	4c20      	ldr	r4, [pc, #128]	; (800382c <_malloc_r+0xb0>)
 80037ac:	6823      	ldr	r3, [r4, #0]
 80037ae:	b91b      	cbnz	r3, 80037b8 <_malloc_r+0x3c>
 80037b0:	4630      	mov	r0, r6
 80037b2:	f000 fb05 	bl	8003dc0 <_sbrk_r>
 80037b6:	6020      	str	r0, [r4, #0]
 80037b8:	4629      	mov	r1, r5
 80037ba:	4630      	mov	r0, r6
 80037bc:	f000 fb00 	bl	8003dc0 <_sbrk_r>
 80037c0:	1c43      	adds	r3, r0, #1
 80037c2:	d124      	bne.n	800380e <_malloc_r+0x92>
 80037c4:	230c      	movs	r3, #12
 80037c6:	6033      	str	r3, [r6, #0]
 80037c8:	4630      	mov	r0, r6
 80037ca:	f000 fd56 	bl	800427a <__malloc_unlock>
 80037ce:	e7e4      	b.n	800379a <_malloc_r+0x1e>
 80037d0:	680b      	ldr	r3, [r1, #0]
 80037d2:	1b5b      	subs	r3, r3, r5
 80037d4:	d418      	bmi.n	8003808 <_malloc_r+0x8c>
 80037d6:	2b0b      	cmp	r3, #11
 80037d8:	d90f      	bls.n	80037fa <_malloc_r+0x7e>
 80037da:	600b      	str	r3, [r1, #0]
 80037dc:	50cd      	str	r5, [r1, r3]
 80037de:	18cc      	adds	r4, r1, r3
 80037e0:	4630      	mov	r0, r6
 80037e2:	f000 fd4a 	bl	800427a <__malloc_unlock>
 80037e6:	f104 000b 	add.w	r0, r4, #11
 80037ea:	1d23      	adds	r3, r4, #4
 80037ec:	f020 0007 	bic.w	r0, r0, #7
 80037f0:	1ac3      	subs	r3, r0, r3
 80037f2:	d0d3      	beq.n	800379c <_malloc_r+0x20>
 80037f4:	425a      	negs	r2, r3
 80037f6:	50e2      	str	r2, [r4, r3]
 80037f8:	e7d0      	b.n	800379c <_malloc_r+0x20>
 80037fa:	428c      	cmp	r4, r1
 80037fc:	684b      	ldr	r3, [r1, #4]
 80037fe:	bf16      	itet	ne
 8003800:	6063      	strne	r3, [r4, #4]
 8003802:	6013      	streq	r3, [r2, #0]
 8003804:	460c      	movne	r4, r1
 8003806:	e7eb      	b.n	80037e0 <_malloc_r+0x64>
 8003808:	460c      	mov	r4, r1
 800380a:	6849      	ldr	r1, [r1, #4]
 800380c:	e7cc      	b.n	80037a8 <_malloc_r+0x2c>
 800380e:	1cc4      	adds	r4, r0, #3
 8003810:	f024 0403 	bic.w	r4, r4, #3
 8003814:	42a0      	cmp	r0, r4
 8003816:	d005      	beq.n	8003824 <_malloc_r+0xa8>
 8003818:	1a21      	subs	r1, r4, r0
 800381a:	4630      	mov	r0, r6
 800381c:	f000 fad0 	bl	8003dc0 <_sbrk_r>
 8003820:	3001      	adds	r0, #1
 8003822:	d0cf      	beq.n	80037c4 <_malloc_r+0x48>
 8003824:	6025      	str	r5, [r4, #0]
 8003826:	e7db      	b.n	80037e0 <_malloc_r+0x64>
 8003828:	20000090 	.word	0x20000090
 800382c:	20000094 	.word	0x20000094

08003830 <__sfputc_r>:
 8003830:	6893      	ldr	r3, [r2, #8]
 8003832:	3b01      	subs	r3, #1
 8003834:	2b00      	cmp	r3, #0
 8003836:	b410      	push	{r4}
 8003838:	6093      	str	r3, [r2, #8]
 800383a:	da08      	bge.n	800384e <__sfputc_r+0x1e>
 800383c:	6994      	ldr	r4, [r2, #24]
 800383e:	42a3      	cmp	r3, r4
 8003840:	db01      	blt.n	8003846 <__sfputc_r+0x16>
 8003842:	290a      	cmp	r1, #10
 8003844:	d103      	bne.n	800384e <__sfputc_r+0x1e>
 8003846:	f85d 4b04 	ldr.w	r4, [sp], #4
 800384a:	f000 bb0d 	b.w	8003e68 <__swbuf_r>
 800384e:	6813      	ldr	r3, [r2, #0]
 8003850:	1c58      	adds	r0, r3, #1
 8003852:	6010      	str	r0, [r2, #0]
 8003854:	7019      	strb	r1, [r3, #0]
 8003856:	4608      	mov	r0, r1
 8003858:	f85d 4b04 	ldr.w	r4, [sp], #4
 800385c:	4770      	bx	lr

0800385e <__sfputs_r>:
 800385e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003860:	4606      	mov	r6, r0
 8003862:	460f      	mov	r7, r1
 8003864:	4614      	mov	r4, r2
 8003866:	18d5      	adds	r5, r2, r3
 8003868:	42ac      	cmp	r4, r5
 800386a:	d101      	bne.n	8003870 <__sfputs_r+0x12>
 800386c:	2000      	movs	r0, #0
 800386e:	e007      	b.n	8003880 <__sfputs_r+0x22>
 8003870:	463a      	mov	r2, r7
 8003872:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003876:	4630      	mov	r0, r6
 8003878:	f7ff ffda 	bl	8003830 <__sfputc_r>
 800387c:	1c43      	adds	r3, r0, #1
 800387e:	d1f3      	bne.n	8003868 <__sfputs_r+0xa>
 8003880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003884 <_vfiprintf_r>:
 8003884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003888:	460c      	mov	r4, r1
 800388a:	b09d      	sub	sp, #116	; 0x74
 800388c:	4617      	mov	r7, r2
 800388e:	461d      	mov	r5, r3
 8003890:	4606      	mov	r6, r0
 8003892:	b118      	cbz	r0, 800389c <_vfiprintf_r+0x18>
 8003894:	6983      	ldr	r3, [r0, #24]
 8003896:	b90b      	cbnz	r3, 800389c <_vfiprintf_r+0x18>
 8003898:	f7ff fee6 	bl	8003668 <__sinit>
 800389c:	4b7c      	ldr	r3, [pc, #496]	; (8003a90 <_vfiprintf_r+0x20c>)
 800389e:	429c      	cmp	r4, r3
 80038a0:	d158      	bne.n	8003954 <_vfiprintf_r+0xd0>
 80038a2:	6874      	ldr	r4, [r6, #4]
 80038a4:	89a3      	ldrh	r3, [r4, #12]
 80038a6:	0718      	lsls	r0, r3, #28
 80038a8:	d55e      	bpl.n	8003968 <_vfiprintf_r+0xe4>
 80038aa:	6923      	ldr	r3, [r4, #16]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d05b      	beq.n	8003968 <_vfiprintf_r+0xe4>
 80038b0:	2300      	movs	r3, #0
 80038b2:	9309      	str	r3, [sp, #36]	; 0x24
 80038b4:	2320      	movs	r3, #32
 80038b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80038ba:	2330      	movs	r3, #48	; 0x30
 80038bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80038c0:	9503      	str	r5, [sp, #12]
 80038c2:	f04f 0b01 	mov.w	fp, #1
 80038c6:	46b8      	mov	r8, r7
 80038c8:	4645      	mov	r5, r8
 80038ca:	f815 3b01 	ldrb.w	r3, [r5], #1
 80038ce:	b10b      	cbz	r3, 80038d4 <_vfiprintf_r+0x50>
 80038d0:	2b25      	cmp	r3, #37	; 0x25
 80038d2:	d154      	bne.n	800397e <_vfiprintf_r+0xfa>
 80038d4:	ebb8 0a07 	subs.w	sl, r8, r7
 80038d8:	d00b      	beq.n	80038f2 <_vfiprintf_r+0x6e>
 80038da:	4653      	mov	r3, sl
 80038dc:	463a      	mov	r2, r7
 80038de:	4621      	mov	r1, r4
 80038e0:	4630      	mov	r0, r6
 80038e2:	f7ff ffbc 	bl	800385e <__sfputs_r>
 80038e6:	3001      	adds	r0, #1
 80038e8:	f000 80c2 	beq.w	8003a70 <_vfiprintf_r+0x1ec>
 80038ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038ee:	4453      	add	r3, sl
 80038f0:	9309      	str	r3, [sp, #36]	; 0x24
 80038f2:	f898 3000 	ldrb.w	r3, [r8]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	f000 80ba 	beq.w	8003a70 <_vfiprintf_r+0x1ec>
 80038fc:	2300      	movs	r3, #0
 80038fe:	f04f 32ff 	mov.w	r2, #4294967295
 8003902:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003906:	9304      	str	r3, [sp, #16]
 8003908:	9307      	str	r3, [sp, #28]
 800390a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800390e:	931a      	str	r3, [sp, #104]	; 0x68
 8003910:	46a8      	mov	r8, r5
 8003912:	2205      	movs	r2, #5
 8003914:	f818 1b01 	ldrb.w	r1, [r8], #1
 8003918:	485e      	ldr	r0, [pc, #376]	; (8003a94 <_vfiprintf_r+0x210>)
 800391a:	f7fc fc59 	bl	80001d0 <memchr>
 800391e:	9b04      	ldr	r3, [sp, #16]
 8003920:	bb78      	cbnz	r0, 8003982 <_vfiprintf_r+0xfe>
 8003922:	06d9      	lsls	r1, r3, #27
 8003924:	bf44      	itt	mi
 8003926:	2220      	movmi	r2, #32
 8003928:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800392c:	071a      	lsls	r2, r3, #28
 800392e:	bf44      	itt	mi
 8003930:	222b      	movmi	r2, #43	; 0x2b
 8003932:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003936:	782a      	ldrb	r2, [r5, #0]
 8003938:	2a2a      	cmp	r2, #42	; 0x2a
 800393a:	d02a      	beq.n	8003992 <_vfiprintf_r+0x10e>
 800393c:	9a07      	ldr	r2, [sp, #28]
 800393e:	46a8      	mov	r8, r5
 8003940:	2000      	movs	r0, #0
 8003942:	250a      	movs	r5, #10
 8003944:	4641      	mov	r1, r8
 8003946:	f811 3b01 	ldrb.w	r3, [r1], #1
 800394a:	3b30      	subs	r3, #48	; 0x30
 800394c:	2b09      	cmp	r3, #9
 800394e:	d969      	bls.n	8003a24 <_vfiprintf_r+0x1a0>
 8003950:	b360      	cbz	r0, 80039ac <_vfiprintf_r+0x128>
 8003952:	e024      	b.n	800399e <_vfiprintf_r+0x11a>
 8003954:	4b50      	ldr	r3, [pc, #320]	; (8003a98 <_vfiprintf_r+0x214>)
 8003956:	429c      	cmp	r4, r3
 8003958:	d101      	bne.n	800395e <_vfiprintf_r+0xda>
 800395a:	68b4      	ldr	r4, [r6, #8]
 800395c:	e7a2      	b.n	80038a4 <_vfiprintf_r+0x20>
 800395e:	4b4f      	ldr	r3, [pc, #316]	; (8003a9c <_vfiprintf_r+0x218>)
 8003960:	429c      	cmp	r4, r3
 8003962:	bf08      	it	eq
 8003964:	68f4      	ldreq	r4, [r6, #12]
 8003966:	e79d      	b.n	80038a4 <_vfiprintf_r+0x20>
 8003968:	4621      	mov	r1, r4
 800396a:	4630      	mov	r0, r6
 800396c:	f000 fae0 	bl	8003f30 <__swsetup_r>
 8003970:	2800      	cmp	r0, #0
 8003972:	d09d      	beq.n	80038b0 <_vfiprintf_r+0x2c>
 8003974:	f04f 30ff 	mov.w	r0, #4294967295
 8003978:	b01d      	add	sp, #116	; 0x74
 800397a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800397e:	46a8      	mov	r8, r5
 8003980:	e7a2      	b.n	80038c8 <_vfiprintf_r+0x44>
 8003982:	4a44      	ldr	r2, [pc, #272]	; (8003a94 <_vfiprintf_r+0x210>)
 8003984:	1a80      	subs	r0, r0, r2
 8003986:	fa0b f000 	lsl.w	r0, fp, r0
 800398a:	4318      	orrs	r0, r3
 800398c:	9004      	str	r0, [sp, #16]
 800398e:	4645      	mov	r5, r8
 8003990:	e7be      	b.n	8003910 <_vfiprintf_r+0x8c>
 8003992:	9a03      	ldr	r2, [sp, #12]
 8003994:	1d11      	adds	r1, r2, #4
 8003996:	6812      	ldr	r2, [r2, #0]
 8003998:	9103      	str	r1, [sp, #12]
 800399a:	2a00      	cmp	r2, #0
 800399c:	db01      	blt.n	80039a2 <_vfiprintf_r+0x11e>
 800399e:	9207      	str	r2, [sp, #28]
 80039a0:	e004      	b.n	80039ac <_vfiprintf_r+0x128>
 80039a2:	4252      	negs	r2, r2
 80039a4:	f043 0302 	orr.w	r3, r3, #2
 80039a8:	9207      	str	r2, [sp, #28]
 80039aa:	9304      	str	r3, [sp, #16]
 80039ac:	f898 3000 	ldrb.w	r3, [r8]
 80039b0:	2b2e      	cmp	r3, #46	; 0x2e
 80039b2:	d10e      	bne.n	80039d2 <_vfiprintf_r+0x14e>
 80039b4:	f898 3001 	ldrb.w	r3, [r8, #1]
 80039b8:	2b2a      	cmp	r3, #42	; 0x2a
 80039ba:	d138      	bne.n	8003a2e <_vfiprintf_r+0x1aa>
 80039bc:	9b03      	ldr	r3, [sp, #12]
 80039be:	1d1a      	adds	r2, r3, #4
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	9203      	str	r2, [sp, #12]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	bfb8      	it	lt
 80039c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80039cc:	f108 0802 	add.w	r8, r8, #2
 80039d0:	9305      	str	r3, [sp, #20]
 80039d2:	4d33      	ldr	r5, [pc, #204]	; (8003aa0 <_vfiprintf_r+0x21c>)
 80039d4:	f898 1000 	ldrb.w	r1, [r8]
 80039d8:	2203      	movs	r2, #3
 80039da:	4628      	mov	r0, r5
 80039dc:	f7fc fbf8 	bl	80001d0 <memchr>
 80039e0:	b140      	cbz	r0, 80039f4 <_vfiprintf_r+0x170>
 80039e2:	2340      	movs	r3, #64	; 0x40
 80039e4:	1b40      	subs	r0, r0, r5
 80039e6:	fa03 f000 	lsl.w	r0, r3, r0
 80039ea:	9b04      	ldr	r3, [sp, #16]
 80039ec:	4303      	orrs	r3, r0
 80039ee:	f108 0801 	add.w	r8, r8, #1
 80039f2:	9304      	str	r3, [sp, #16]
 80039f4:	f898 1000 	ldrb.w	r1, [r8]
 80039f8:	482a      	ldr	r0, [pc, #168]	; (8003aa4 <_vfiprintf_r+0x220>)
 80039fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80039fe:	2206      	movs	r2, #6
 8003a00:	f108 0701 	add.w	r7, r8, #1
 8003a04:	f7fc fbe4 	bl	80001d0 <memchr>
 8003a08:	2800      	cmp	r0, #0
 8003a0a:	d037      	beq.n	8003a7c <_vfiprintf_r+0x1f8>
 8003a0c:	4b26      	ldr	r3, [pc, #152]	; (8003aa8 <_vfiprintf_r+0x224>)
 8003a0e:	bb1b      	cbnz	r3, 8003a58 <_vfiprintf_r+0x1d4>
 8003a10:	9b03      	ldr	r3, [sp, #12]
 8003a12:	3307      	adds	r3, #7
 8003a14:	f023 0307 	bic.w	r3, r3, #7
 8003a18:	3308      	adds	r3, #8
 8003a1a:	9303      	str	r3, [sp, #12]
 8003a1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a1e:	444b      	add	r3, r9
 8003a20:	9309      	str	r3, [sp, #36]	; 0x24
 8003a22:	e750      	b.n	80038c6 <_vfiprintf_r+0x42>
 8003a24:	fb05 3202 	mla	r2, r5, r2, r3
 8003a28:	2001      	movs	r0, #1
 8003a2a:	4688      	mov	r8, r1
 8003a2c:	e78a      	b.n	8003944 <_vfiprintf_r+0xc0>
 8003a2e:	2300      	movs	r3, #0
 8003a30:	f108 0801 	add.w	r8, r8, #1
 8003a34:	9305      	str	r3, [sp, #20]
 8003a36:	4619      	mov	r1, r3
 8003a38:	250a      	movs	r5, #10
 8003a3a:	4640      	mov	r0, r8
 8003a3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a40:	3a30      	subs	r2, #48	; 0x30
 8003a42:	2a09      	cmp	r2, #9
 8003a44:	d903      	bls.n	8003a4e <_vfiprintf_r+0x1ca>
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d0c3      	beq.n	80039d2 <_vfiprintf_r+0x14e>
 8003a4a:	9105      	str	r1, [sp, #20]
 8003a4c:	e7c1      	b.n	80039d2 <_vfiprintf_r+0x14e>
 8003a4e:	fb05 2101 	mla	r1, r5, r1, r2
 8003a52:	2301      	movs	r3, #1
 8003a54:	4680      	mov	r8, r0
 8003a56:	e7f0      	b.n	8003a3a <_vfiprintf_r+0x1b6>
 8003a58:	ab03      	add	r3, sp, #12
 8003a5a:	9300      	str	r3, [sp, #0]
 8003a5c:	4622      	mov	r2, r4
 8003a5e:	4b13      	ldr	r3, [pc, #76]	; (8003aac <_vfiprintf_r+0x228>)
 8003a60:	a904      	add	r1, sp, #16
 8003a62:	4630      	mov	r0, r6
 8003a64:	f3af 8000 	nop.w
 8003a68:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003a6c:	4681      	mov	r9, r0
 8003a6e:	d1d5      	bne.n	8003a1c <_vfiprintf_r+0x198>
 8003a70:	89a3      	ldrh	r3, [r4, #12]
 8003a72:	065b      	lsls	r3, r3, #25
 8003a74:	f53f af7e 	bmi.w	8003974 <_vfiprintf_r+0xf0>
 8003a78:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003a7a:	e77d      	b.n	8003978 <_vfiprintf_r+0xf4>
 8003a7c:	ab03      	add	r3, sp, #12
 8003a7e:	9300      	str	r3, [sp, #0]
 8003a80:	4622      	mov	r2, r4
 8003a82:	4b0a      	ldr	r3, [pc, #40]	; (8003aac <_vfiprintf_r+0x228>)
 8003a84:	a904      	add	r1, sp, #16
 8003a86:	4630      	mov	r0, r6
 8003a88:	f000 f888 	bl	8003b9c <_printf_i>
 8003a8c:	e7ec      	b.n	8003a68 <_vfiprintf_r+0x1e4>
 8003a8e:	bf00      	nop
 8003a90:	0800442c 	.word	0x0800442c
 8003a94:	0800446c 	.word	0x0800446c
 8003a98:	0800444c 	.word	0x0800444c
 8003a9c:	0800440c 	.word	0x0800440c
 8003aa0:	08004472 	.word	0x08004472
 8003aa4:	08004476 	.word	0x08004476
 8003aa8:	00000000 	.word	0x00000000
 8003aac:	0800385f 	.word	0x0800385f

08003ab0 <_printf_common>:
 8003ab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ab4:	4691      	mov	r9, r2
 8003ab6:	461f      	mov	r7, r3
 8003ab8:	688a      	ldr	r2, [r1, #8]
 8003aba:	690b      	ldr	r3, [r1, #16]
 8003abc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	bfb8      	it	lt
 8003ac4:	4613      	movlt	r3, r2
 8003ac6:	f8c9 3000 	str.w	r3, [r9]
 8003aca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ace:	4606      	mov	r6, r0
 8003ad0:	460c      	mov	r4, r1
 8003ad2:	b112      	cbz	r2, 8003ada <_printf_common+0x2a>
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	f8c9 3000 	str.w	r3, [r9]
 8003ada:	6823      	ldr	r3, [r4, #0]
 8003adc:	0699      	lsls	r1, r3, #26
 8003ade:	bf42      	ittt	mi
 8003ae0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003ae4:	3302      	addmi	r3, #2
 8003ae6:	f8c9 3000 	strmi.w	r3, [r9]
 8003aea:	6825      	ldr	r5, [r4, #0]
 8003aec:	f015 0506 	ands.w	r5, r5, #6
 8003af0:	d107      	bne.n	8003b02 <_printf_common+0x52>
 8003af2:	f104 0a19 	add.w	sl, r4, #25
 8003af6:	68e3      	ldr	r3, [r4, #12]
 8003af8:	f8d9 2000 	ldr.w	r2, [r9]
 8003afc:	1a9b      	subs	r3, r3, r2
 8003afe:	42ab      	cmp	r3, r5
 8003b00:	dc28      	bgt.n	8003b54 <_printf_common+0xa4>
 8003b02:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003b06:	6822      	ldr	r2, [r4, #0]
 8003b08:	3300      	adds	r3, #0
 8003b0a:	bf18      	it	ne
 8003b0c:	2301      	movne	r3, #1
 8003b0e:	0692      	lsls	r2, r2, #26
 8003b10:	d42d      	bmi.n	8003b6e <_printf_common+0xbe>
 8003b12:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b16:	4639      	mov	r1, r7
 8003b18:	4630      	mov	r0, r6
 8003b1a:	47c0      	blx	r8
 8003b1c:	3001      	adds	r0, #1
 8003b1e:	d020      	beq.n	8003b62 <_printf_common+0xb2>
 8003b20:	6823      	ldr	r3, [r4, #0]
 8003b22:	68e5      	ldr	r5, [r4, #12]
 8003b24:	f8d9 2000 	ldr.w	r2, [r9]
 8003b28:	f003 0306 	and.w	r3, r3, #6
 8003b2c:	2b04      	cmp	r3, #4
 8003b2e:	bf08      	it	eq
 8003b30:	1aad      	subeq	r5, r5, r2
 8003b32:	68a3      	ldr	r3, [r4, #8]
 8003b34:	6922      	ldr	r2, [r4, #16]
 8003b36:	bf0c      	ite	eq
 8003b38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b3c:	2500      	movne	r5, #0
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	bfc4      	itt	gt
 8003b42:	1a9b      	subgt	r3, r3, r2
 8003b44:	18ed      	addgt	r5, r5, r3
 8003b46:	f04f 0900 	mov.w	r9, #0
 8003b4a:	341a      	adds	r4, #26
 8003b4c:	454d      	cmp	r5, r9
 8003b4e:	d11a      	bne.n	8003b86 <_printf_common+0xd6>
 8003b50:	2000      	movs	r0, #0
 8003b52:	e008      	b.n	8003b66 <_printf_common+0xb6>
 8003b54:	2301      	movs	r3, #1
 8003b56:	4652      	mov	r2, sl
 8003b58:	4639      	mov	r1, r7
 8003b5a:	4630      	mov	r0, r6
 8003b5c:	47c0      	blx	r8
 8003b5e:	3001      	adds	r0, #1
 8003b60:	d103      	bne.n	8003b6a <_printf_common+0xba>
 8003b62:	f04f 30ff 	mov.w	r0, #4294967295
 8003b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b6a:	3501      	adds	r5, #1
 8003b6c:	e7c3      	b.n	8003af6 <_printf_common+0x46>
 8003b6e:	18e1      	adds	r1, r4, r3
 8003b70:	1c5a      	adds	r2, r3, #1
 8003b72:	2030      	movs	r0, #48	; 0x30
 8003b74:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003b78:	4422      	add	r2, r4
 8003b7a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003b7e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003b82:	3302      	adds	r3, #2
 8003b84:	e7c5      	b.n	8003b12 <_printf_common+0x62>
 8003b86:	2301      	movs	r3, #1
 8003b88:	4622      	mov	r2, r4
 8003b8a:	4639      	mov	r1, r7
 8003b8c:	4630      	mov	r0, r6
 8003b8e:	47c0      	blx	r8
 8003b90:	3001      	adds	r0, #1
 8003b92:	d0e6      	beq.n	8003b62 <_printf_common+0xb2>
 8003b94:	f109 0901 	add.w	r9, r9, #1
 8003b98:	e7d8      	b.n	8003b4c <_printf_common+0x9c>
	...

08003b9c <_printf_i>:
 8003b9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003ba0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003ba4:	460c      	mov	r4, r1
 8003ba6:	7e09      	ldrb	r1, [r1, #24]
 8003ba8:	b085      	sub	sp, #20
 8003baa:	296e      	cmp	r1, #110	; 0x6e
 8003bac:	4617      	mov	r7, r2
 8003bae:	4606      	mov	r6, r0
 8003bb0:	4698      	mov	r8, r3
 8003bb2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003bb4:	f000 80b3 	beq.w	8003d1e <_printf_i+0x182>
 8003bb8:	d822      	bhi.n	8003c00 <_printf_i+0x64>
 8003bba:	2963      	cmp	r1, #99	; 0x63
 8003bbc:	d036      	beq.n	8003c2c <_printf_i+0x90>
 8003bbe:	d80a      	bhi.n	8003bd6 <_printf_i+0x3a>
 8003bc0:	2900      	cmp	r1, #0
 8003bc2:	f000 80b9 	beq.w	8003d38 <_printf_i+0x19c>
 8003bc6:	2958      	cmp	r1, #88	; 0x58
 8003bc8:	f000 8083 	beq.w	8003cd2 <_printf_i+0x136>
 8003bcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003bd0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003bd4:	e032      	b.n	8003c3c <_printf_i+0xa0>
 8003bd6:	2964      	cmp	r1, #100	; 0x64
 8003bd8:	d001      	beq.n	8003bde <_printf_i+0x42>
 8003bda:	2969      	cmp	r1, #105	; 0x69
 8003bdc:	d1f6      	bne.n	8003bcc <_printf_i+0x30>
 8003bde:	6820      	ldr	r0, [r4, #0]
 8003be0:	6813      	ldr	r3, [r2, #0]
 8003be2:	0605      	lsls	r5, r0, #24
 8003be4:	f103 0104 	add.w	r1, r3, #4
 8003be8:	d52a      	bpl.n	8003c40 <_printf_i+0xa4>
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	6011      	str	r1, [r2, #0]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	da03      	bge.n	8003bfa <_printf_i+0x5e>
 8003bf2:	222d      	movs	r2, #45	; 0x2d
 8003bf4:	425b      	negs	r3, r3
 8003bf6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003bfa:	486f      	ldr	r0, [pc, #444]	; (8003db8 <_printf_i+0x21c>)
 8003bfc:	220a      	movs	r2, #10
 8003bfe:	e039      	b.n	8003c74 <_printf_i+0xd8>
 8003c00:	2973      	cmp	r1, #115	; 0x73
 8003c02:	f000 809d 	beq.w	8003d40 <_printf_i+0x1a4>
 8003c06:	d808      	bhi.n	8003c1a <_printf_i+0x7e>
 8003c08:	296f      	cmp	r1, #111	; 0x6f
 8003c0a:	d020      	beq.n	8003c4e <_printf_i+0xb2>
 8003c0c:	2970      	cmp	r1, #112	; 0x70
 8003c0e:	d1dd      	bne.n	8003bcc <_printf_i+0x30>
 8003c10:	6823      	ldr	r3, [r4, #0]
 8003c12:	f043 0320 	orr.w	r3, r3, #32
 8003c16:	6023      	str	r3, [r4, #0]
 8003c18:	e003      	b.n	8003c22 <_printf_i+0x86>
 8003c1a:	2975      	cmp	r1, #117	; 0x75
 8003c1c:	d017      	beq.n	8003c4e <_printf_i+0xb2>
 8003c1e:	2978      	cmp	r1, #120	; 0x78
 8003c20:	d1d4      	bne.n	8003bcc <_printf_i+0x30>
 8003c22:	2378      	movs	r3, #120	; 0x78
 8003c24:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003c28:	4864      	ldr	r0, [pc, #400]	; (8003dbc <_printf_i+0x220>)
 8003c2a:	e055      	b.n	8003cd8 <_printf_i+0x13c>
 8003c2c:	6813      	ldr	r3, [r2, #0]
 8003c2e:	1d19      	adds	r1, r3, #4
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	6011      	str	r1, [r2, #0]
 8003c34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e08c      	b.n	8003d5a <_printf_i+0x1be>
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	6011      	str	r1, [r2, #0]
 8003c44:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003c48:	bf18      	it	ne
 8003c4a:	b21b      	sxthne	r3, r3
 8003c4c:	e7cf      	b.n	8003bee <_printf_i+0x52>
 8003c4e:	6813      	ldr	r3, [r2, #0]
 8003c50:	6825      	ldr	r5, [r4, #0]
 8003c52:	1d18      	adds	r0, r3, #4
 8003c54:	6010      	str	r0, [r2, #0]
 8003c56:	0628      	lsls	r0, r5, #24
 8003c58:	d501      	bpl.n	8003c5e <_printf_i+0xc2>
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	e002      	b.n	8003c64 <_printf_i+0xc8>
 8003c5e:	0668      	lsls	r0, r5, #25
 8003c60:	d5fb      	bpl.n	8003c5a <_printf_i+0xbe>
 8003c62:	881b      	ldrh	r3, [r3, #0]
 8003c64:	4854      	ldr	r0, [pc, #336]	; (8003db8 <_printf_i+0x21c>)
 8003c66:	296f      	cmp	r1, #111	; 0x6f
 8003c68:	bf14      	ite	ne
 8003c6a:	220a      	movne	r2, #10
 8003c6c:	2208      	moveq	r2, #8
 8003c6e:	2100      	movs	r1, #0
 8003c70:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003c74:	6865      	ldr	r5, [r4, #4]
 8003c76:	60a5      	str	r5, [r4, #8]
 8003c78:	2d00      	cmp	r5, #0
 8003c7a:	f2c0 8095 	blt.w	8003da8 <_printf_i+0x20c>
 8003c7e:	6821      	ldr	r1, [r4, #0]
 8003c80:	f021 0104 	bic.w	r1, r1, #4
 8003c84:	6021      	str	r1, [r4, #0]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d13d      	bne.n	8003d06 <_printf_i+0x16a>
 8003c8a:	2d00      	cmp	r5, #0
 8003c8c:	f040 808e 	bne.w	8003dac <_printf_i+0x210>
 8003c90:	4665      	mov	r5, ip
 8003c92:	2a08      	cmp	r2, #8
 8003c94:	d10b      	bne.n	8003cae <_printf_i+0x112>
 8003c96:	6823      	ldr	r3, [r4, #0]
 8003c98:	07db      	lsls	r3, r3, #31
 8003c9a:	d508      	bpl.n	8003cae <_printf_i+0x112>
 8003c9c:	6923      	ldr	r3, [r4, #16]
 8003c9e:	6862      	ldr	r2, [r4, #4]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	bfde      	ittt	le
 8003ca4:	2330      	movle	r3, #48	; 0x30
 8003ca6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003caa:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003cae:	ebac 0305 	sub.w	r3, ip, r5
 8003cb2:	6123      	str	r3, [r4, #16]
 8003cb4:	f8cd 8000 	str.w	r8, [sp]
 8003cb8:	463b      	mov	r3, r7
 8003cba:	aa03      	add	r2, sp, #12
 8003cbc:	4621      	mov	r1, r4
 8003cbe:	4630      	mov	r0, r6
 8003cc0:	f7ff fef6 	bl	8003ab0 <_printf_common>
 8003cc4:	3001      	adds	r0, #1
 8003cc6:	d14d      	bne.n	8003d64 <_printf_i+0x1c8>
 8003cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8003ccc:	b005      	add	sp, #20
 8003cce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003cd2:	4839      	ldr	r0, [pc, #228]	; (8003db8 <_printf_i+0x21c>)
 8003cd4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003cd8:	6813      	ldr	r3, [r2, #0]
 8003cda:	6821      	ldr	r1, [r4, #0]
 8003cdc:	1d1d      	adds	r5, r3, #4
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	6015      	str	r5, [r2, #0]
 8003ce2:	060a      	lsls	r2, r1, #24
 8003ce4:	d50b      	bpl.n	8003cfe <_printf_i+0x162>
 8003ce6:	07ca      	lsls	r2, r1, #31
 8003ce8:	bf44      	itt	mi
 8003cea:	f041 0120 	orrmi.w	r1, r1, #32
 8003cee:	6021      	strmi	r1, [r4, #0]
 8003cf0:	b91b      	cbnz	r3, 8003cfa <_printf_i+0x15e>
 8003cf2:	6822      	ldr	r2, [r4, #0]
 8003cf4:	f022 0220 	bic.w	r2, r2, #32
 8003cf8:	6022      	str	r2, [r4, #0]
 8003cfa:	2210      	movs	r2, #16
 8003cfc:	e7b7      	b.n	8003c6e <_printf_i+0xd2>
 8003cfe:	064d      	lsls	r5, r1, #25
 8003d00:	bf48      	it	mi
 8003d02:	b29b      	uxthmi	r3, r3
 8003d04:	e7ef      	b.n	8003ce6 <_printf_i+0x14a>
 8003d06:	4665      	mov	r5, ip
 8003d08:	fbb3 f1f2 	udiv	r1, r3, r2
 8003d0c:	fb02 3311 	mls	r3, r2, r1, r3
 8003d10:	5cc3      	ldrb	r3, [r0, r3]
 8003d12:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003d16:	460b      	mov	r3, r1
 8003d18:	2900      	cmp	r1, #0
 8003d1a:	d1f5      	bne.n	8003d08 <_printf_i+0x16c>
 8003d1c:	e7b9      	b.n	8003c92 <_printf_i+0xf6>
 8003d1e:	6813      	ldr	r3, [r2, #0]
 8003d20:	6825      	ldr	r5, [r4, #0]
 8003d22:	6961      	ldr	r1, [r4, #20]
 8003d24:	1d18      	adds	r0, r3, #4
 8003d26:	6010      	str	r0, [r2, #0]
 8003d28:	0628      	lsls	r0, r5, #24
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	d501      	bpl.n	8003d32 <_printf_i+0x196>
 8003d2e:	6019      	str	r1, [r3, #0]
 8003d30:	e002      	b.n	8003d38 <_printf_i+0x19c>
 8003d32:	066a      	lsls	r2, r5, #25
 8003d34:	d5fb      	bpl.n	8003d2e <_printf_i+0x192>
 8003d36:	8019      	strh	r1, [r3, #0]
 8003d38:	2300      	movs	r3, #0
 8003d3a:	6123      	str	r3, [r4, #16]
 8003d3c:	4665      	mov	r5, ip
 8003d3e:	e7b9      	b.n	8003cb4 <_printf_i+0x118>
 8003d40:	6813      	ldr	r3, [r2, #0]
 8003d42:	1d19      	adds	r1, r3, #4
 8003d44:	6011      	str	r1, [r2, #0]
 8003d46:	681d      	ldr	r5, [r3, #0]
 8003d48:	6862      	ldr	r2, [r4, #4]
 8003d4a:	2100      	movs	r1, #0
 8003d4c:	4628      	mov	r0, r5
 8003d4e:	f7fc fa3f 	bl	80001d0 <memchr>
 8003d52:	b108      	cbz	r0, 8003d58 <_printf_i+0x1bc>
 8003d54:	1b40      	subs	r0, r0, r5
 8003d56:	6060      	str	r0, [r4, #4]
 8003d58:	6863      	ldr	r3, [r4, #4]
 8003d5a:	6123      	str	r3, [r4, #16]
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d62:	e7a7      	b.n	8003cb4 <_printf_i+0x118>
 8003d64:	6923      	ldr	r3, [r4, #16]
 8003d66:	462a      	mov	r2, r5
 8003d68:	4639      	mov	r1, r7
 8003d6a:	4630      	mov	r0, r6
 8003d6c:	47c0      	blx	r8
 8003d6e:	3001      	adds	r0, #1
 8003d70:	d0aa      	beq.n	8003cc8 <_printf_i+0x12c>
 8003d72:	6823      	ldr	r3, [r4, #0]
 8003d74:	079b      	lsls	r3, r3, #30
 8003d76:	d413      	bmi.n	8003da0 <_printf_i+0x204>
 8003d78:	68e0      	ldr	r0, [r4, #12]
 8003d7a:	9b03      	ldr	r3, [sp, #12]
 8003d7c:	4298      	cmp	r0, r3
 8003d7e:	bfb8      	it	lt
 8003d80:	4618      	movlt	r0, r3
 8003d82:	e7a3      	b.n	8003ccc <_printf_i+0x130>
 8003d84:	2301      	movs	r3, #1
 8003d86:	464a      	mov	r2, r9
 8003d88:	4639      	mov	r1, r7
 8003d8a:	4630      	mov	r0, r6
 8003d8c:	47c0      	blx	r8
 8003d8e:	3001      	adds	r0, #1
 8003d90:	d09a      	beq.n	8003cc8 <_printf_i+0x12c>
 8003d92:	3501      	adds	r5, #1
 8003d94:	68e3      	ldr	r3, [r4, #12]
 8003d96:	9a03      	ldr	r2, [sp, #12]
 8003d98:	1a9b      	subs	r3, r3, r2
 8003d9a:	42ab      	cmp	r3, r5
 8003d9c:	dcf2      	bgt.n	8003d84 <_printf_i+0x1e8>
 8003d9e:	e7eb      	b.n	8003d78 <_printf_i+0x1dc>
 8003da0:	2500      	movs	r5, #0
 8003da2:	f104 0919 	add.w	r9, r4, #25
 8003da6:	e7f5      	b.n	8003d94 <_printf_i+0x1f8>
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d1ac      	bne.n	8003d06 <_printf_i+0x16a>
 8003dac:	7803      	ldrb	r3, [r0, #0]
 8003dae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003db2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003db6:	e76c      	b.n	8003c92 <_printf_i+0xf6>
 8003db8:	0800447d 	.word	0x0800447d
 8003dbc:	0800448e 	.word	0x0800448e

08003dc0 <_sbrk_r>:
 8003dc0:	b538      	push	{r3, r4, r5, lr}
 8003dc2:	4c06      	ldr	r4, [pc, #24]	; (8003ddc <_sbrk_r+0x1c>)
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	4605      	mov	r5, r0
 8003dc8:	4608      	mov	r0, r1
 8003dca:	6023      	str	r3, [r4, #0]
 8003dcc:	f7fc fe14 	bl	80009f8 <_sbrk>
 8003dd0:	1c43      	adds	r3, r0, #1
 8003dd2:	d102      	bne.n	8003dda <_sbrk_r+0x1a>
 8003dd4:	6823      	ldr	r3, [r4, #0]
 8003dd6:	b103      	cbz	r3, 8003dda <_sbrk_r+0x1a>
 8003dd8:	602b      	str	r3, [r5, #0]
 8003dda:	bd38      	pop	{r3, r4, r5, pc}
 8003ddc:	20000130 	.word	0x20000130

08003de0 <__sread>:
 8003de0:	b510      	push	{r4, lr}
 8003de2:	460c      	mov	r4, r1
 8003de4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003de8:	f000 fa96 	bl	8004318 <_read_r>
 8003dec:	2800      	cmp	r0, #0
 8003dee:	bfab      	itete	ge
 8003df0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003df2:	89a3      	ldrhlt	r3, [r4, #12]
 8003df4:	181b      	addge	r3, r3, r0
 8003df6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003dfa:	bfac      	ite	ge
 8003dfc:	6563      	strge	r3, [r4, #84]	; 0x54
 8003dfe:	81a3      	strhlt	r3, [r4, #12]
 8003e00:	bd10      	pop	{r4, pc}

08003e02 <__swrite>:
 8003e02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e06:	461f      	mov	r7, r3
 8003e08:	898b      	ldrh	r3, [r1, #12]
 8003e0a:	05db      	lsls	r3, r3, #23
 8003e0c:	4605      	mov	r5, r0
 8003e0e:	460c      	mov	r4, r1
 8003e10:	4616      	mov	r6, r2
 8003e12:	d505      	bpl.n	8003e20 <__swrite+0x1e>
 8003e14:	2302      	movs	r3, #2
 8003e16:	2200      	movs	r2, #0
 8003e18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e1c:	f000 f9b6 	bl	800418c <_lseek_r>
 8003e20:	89a3      	ldrh	r3, [r4, #12]
 8003e22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e2a:	81a3      	strh	r3, [r4, #12]
 8003e2c:	4632      	mov	r2, r6
 8003e2e:	463b      	mov	r3, r7
 8003e30:	4628      	mov	r0, r5
 8003e32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e36:	f000 b869 	b.w	8003f0c <_write_r>

08003e3a <__sseek>:
 8003e3a:	b510      	push	{r4, lr}
 8003e3c:	460c      	mov	r4, r1
 8003e3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e42:	f000 f9a3 	bl	800418c <_lseek_r>
 8003e46:	1c43      	adds	r3, r0, #1
 8003e48:	89a3      	ldrh	r3, [r4, #12]
 8003e4a:	bf15      	itete	ne
 8003e4c:	6560      	strne	r0, [r4, #84]	; 0x54
 8003e4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003e52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003e56:	81a3      	strheq	r3, [r4, #12]
 8003e58:	bf18      	it	ne
 8003e5a:	81a3      	strhne	r3, [r4, #12]
 8003e5c:	bd10      	pop	{r4, pc}

08003e5e <__sclose>:
 8003e5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e62:	f000 b8d3 	b.w	800400c <_close_r>
	...

08003e68 <__swbuf_r>:
 8003e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e6a:	460e      	mov	r6, r1
 8003e6c:	4614      	mov	r4, r2
 8003e6e:	4605      	mov	r5, r0
 8003e70:	b118      	cbz	r0, 8003e7a <__swbuf_r+0x12>
 8003e72:	6983      	ldr	r3, [r0, #24]
 8003e74:	b90b      	cbnz	r3, 8003e7a <__swbuf_r+0x12>
 8003e76:	f7ff fbf7 	bl	8003668 <__sinit>
 8003e7a:	4b21      	ldr	r3, [pc, #132]	; (8003f00 <__swbuf_r+0x98>)
 8003e7c:	429c      	cmp	r4, r3
 8003e7e:	d12a      	bne.n	8003ed6 <__swbuf_r+0x6e>
 8003e80:	686c      	ldr	r4, [r5, #4]
 8003e82:	69a3      	ldr	r3, [r4, #24]
 8003e84:	60a3      	str	r3, [r4, #8]
 8003e86:	89a3      	ldrh	r3, [r4, #12]
 8003e88:	071a      	lsls	r2, r3, #28
 8003e8a:	d52e      	bpl.n	8003eea <__swbuf_r+0x82>
 8003e8c:	6923      	ldr	r3, [r4, #16]
 8003e8e:	b363      	cbz	r3, 8003eea <__swbuf_r+0x82>
 8003e90:	6923      	ldr	r3, [r4, #16]
 8003e92:	6820      	ldr	r0, [r4, #0]
 8003e94:	1ac0      	subs	r0, r0, r3
 8003e96:	6963      	ldr	r3, [r4, #20]
 8003e98:	b2f6      	uxtb	r6, r6
 8003e9a:	4283      	cmp	r3, r0
 8003e9c:	4637      	mov	r7, r6
 8003e9e:	dc04      	bgt.n	8003eaa <__swbuf_r+0x42>
 8003ea0:	4621      	mov	r1, r4
 8003ea2:	4628      	mov	r0, r5
 8003ea4:	f000 f948 	bl	8004138 <_fflush_r>
 8003ea8:	bb28      	cbnz	r0, 8003ef6 <__swbuf_r+0x8e>
 8003eaa:	68a3      	ldr	r3, [r4, #8]
 8003eac:	3b01      	subs	r3, #1
 8003eae:	60a3      	str	r3, [r4, #8]
 8003eb0:	6823      	ldr	r3, [r4, #0]
 8003eb2:	1c5a      	adds	r2, r3, #1
 8003eb4:	6022      	str	r2, [r4, #0]
 8003eb6:	701e      	strb	r6, [r3, #0]
 8003eb8:	6963      	ldr	r3, [r4, #20]
 8003eba:	3001      	adds	r0, #1
 8003ebc:	4283      	cmp	r3, r0
 8003ebe:	d004      	beq.n	8003eca <__swbuf_r+0x62>
 8003ec0:	89a3      	ldrh	r3, [r4, #12]
 8003ec2:	07db      	lsls	r3, r3, #31
 8003ec4:	d519      	bpl.n	8003efa <__swbuf_r+0x92>
 8003ec6:	2e0a      	cmp	r6, #10
 8003ec8:	d117      	bne.n	8003efa <__swbuf_r+0x92>
 8003eca:	4621      	mov	r1, r4
 8003ecc:	4628      	mov	r0, r5
 8003ece:	f000 f933 	bl	8004138 <_fflush_r>
 8003ed2:	b190      	cbz	r0, 8003efa <__swbuf_r+0x92>
 8003ed4:	e00f      	b.n	8003ef6 <__swbuf_r+0x8e>
 8003ed6:	4b0b      	ldr	r3, [pc, #44]	; (8003f04 <__swbuf_r+0x9c>)
 8003ed8:	429c      	cmp	r4, r3
 8003eda:	d101      	bne.n	8003ee0 <__swbuf_r+0x78>
 8003edc:	68ac      	ldr	r4, [r5, #8]
 8003ede:	e7d0      	b.n	8003e82 <__swbuf_r+0x1a>
 8003ee0:	4b09      	ldr	r3, [pc, #36]	; (8003f08 <__swbuf_r+0xa0>)
 8003ee2:	429c      	cmp	r4, r3
 8003ee4:	bf08      	it	eq
 8003ee6:	68ec      	ldreq	r4, [r5, #12]
 8003ee8:	e7cb      	b.n	8003e82 <__swbuf_r+0x1a>
 8003eea:	4621      	mov	r1, r4
 8003eec:	4628      	mov	r0, r5
 8003eee:	f000 f81f 	bl	8003f30 <__swsetup_r>
 8003ef2:	2800      	cmp	r0, #0
 8003ef4:	d0cc      	beq.n	8003e90 <__swbuf_r+0x28>
 8003ef6:	f04f 37ff 	mov.w	r7, #4294967295
 8003efa:	4638      	mov	r0, r7
 8003efc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003efe:	bf00      	nop
 8003f00:	0800442c 	.word	0x0800442c
 8003f04:	0800444c 	.word	0x0800444c
 8003f08:	0800440c 	.word	0x0800440c

08003f0c <_write_r>:
 8003f0c:	b538      	push	{r3, r4, r5, lr}
 8003f0e:	4c07      	ldr	r4, [pc, #28]	; (8003f2c <_write_r+0x20>)
 8003f10:	4605      	mov	r5, r0
 8003f12:	4608      	mov	r0, r1
 8003f14:	4611      	mov	r1, r2
 8003f16:	2200      	movs	r2, #0
 8003f18:	6022      	str	r2, [r4, #0]
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	f7fc fcac 	bl	8000878 <_write>
 8003f20:	1c43      	adds	r3, r0, #1
 8003f22:	d102      	bne.n	8003f2a <_write_r+0x1e>
 8003f24:	6823      	ldr	r3, [r4, #0]
 8003f26:	b103      	cbz	r3, 8003f2a <_write_r+0x1e>
 8003f28:	602b      	str	r3, [r5, #0]
 8003f2a:	bd38      	pop	{r3, r4, r5, pc}
 8003f2c:	20000130 	.word	0x20000130

08003f30 <__swsetup_r>:
 8003f30:	4b32      	ldr	r3, [pc, #200]	; (8003ffc <__swsetup_r+0xcc>)
 8003f32:	b570      	push	{r4, r5, r6, lr}
 8003f34:	681d      	ldr	r5, [r3, #0]
 8003f36:	4606      	mov	r6, r0
 8003f38:	460c      	mov	r4, r1
 8003f3a:	b125      	cbz	r5, 8003f46 <__swsetup_r+0x16>
 8003f3c:	69ab      	ldr	r3, [r5, #24]
 8003f3e:	b913      	cbnz	r3, 8003f46 <__swsetup_r+0x16>
 8003f40:	4628      	mov	r0, r5
 8003f42:	f7ff fb91 	bl	8003668 <__sinit>
 8003f46:	4b2e      	ldr	r3, [pc, #184]	; (8004000 <__swsetup_r+0xd0>)
 8003f48:	429c      	cmp	r4, r3
 8003f4a:	d10f      	bne.n	8003f6c <__swsetup_r+0x3c>
 8003f4c:	686c      	ldr	r4, [r5, #4]
 8003f4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f52:	b29a      	uxth	r2, r3
 8003f54:	0715      	lsls	r5, r2, #28
 8003f56:	d42c      	bmi.n	8003fb2 <__swsetup_r+0x82>
 8003f58:	06d0      	lsls	r0, r2, #27
 8003f5a:	d411      	bmi.n	8003f80 <__swsetup_r+0x50>
 8003f5c:	2209      	movs	r2, #9
 8003f5e:	6032      	str	r2, [r6, #0]
 8003f60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f64:	81a3      	strh	r3, [r4, #12]
 8003f66:	f04f 30ff 	mov.w	r0, #4294967295
 8003f6a:	e03e      	b.n	8003fea <__swsetup_r+0xba>
 8003f6c:	4b25      	ldr	r3, [pc, #148]	; (8004004 <__swsetup_r+0xd4>)
 8003f6e:	429c      	cmp	r4, r3
 8003f70:	d101      	bne.n	8003f76 <__swsetup_r+0x46>
 8003f72:	68ac      	ldr	r4, [r5, #8]
 8003f74:	e7eb      	b.n	8003f4e <__swsetup_r+0x1e>
 8003f76:	4b24      	ldr	r3, [pc, #144]	; (8004008 <__swsetup_r+0xd8>)
 8003f78:	429c      	cmp	r4, r3
 8003f7a:	bf08      	it	eq
 8003f7c:	68ec      	ldreq	r4, [r5, #12]
 8003f7e:	e7e6      	b.n	8003f4e <__swsetup_r+0x1e>
 8003f80:	0751      	lsls	r1, r2, #29
 8003f82:	d512      	bpl.n	8003faa <__swsetup_r+0x7a>
 8003f84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f86:	b141      	cbz	r1, 8003f9a <__swsetup_r+0x6a>
 8003f88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003f8c:	4299      	cmp	r1, r3
 8003f8e:	d002      	beq.n	8003f96 <__swsetup_r+0x66>
 8003f90:	4630      	mov	r0, r6
 8003f92:	f000 f973 	bl	800427c <_free_r>
 8003f96:	2300      	movs	r3, #0
 8003f98:	6363      	str	r3, [r4, #52]	; 0x34
 8003f9a:	89a3      	ldrh	r3, [r4, #12]
 8003f9c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003fa0:	81a3      	strh	r3, [r4, #12]
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	6063      	str	r3, [r4, #4]
 8003fa6:	6923      	ldr	r3, [r4, #16]
 8003fa8:	6023      	str	r3, [r4, #0]
 8003faa:	89a3      	ldrh	r3, [r4, #12]
 8003fac:	f043 0308 	orr.w	r3, r3, #8
 8003fb0:	81a3      	strh	r3, [r4, #12]
 8003fb2:	6923      	ldr	r3, [r4, #16]
 8003fb4:	b94b      	cbnz	r3, 8003fca <__swsetup_r+0x9a>
 8003fb6:	89a3      	ldrh	r3, [r4, #12]
 8003fb8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003fbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fc0:	d003      	beq.n	8003fca <__swsetup_r+0x9a>
 8003fc2:	4621      	mov	r1, r4
 8003fc4:	4630      	mov	r0, r6
 8003fc6:	f000 f917 	bl	80041f8 <__smakebuf_r>
 8003fca:	89a2      	ldrh	r2, [r4, #12]
 8003fcc:	f012 0301 	ands.w	r3, r2, #1
 8003fd0:	d00c      	beq.n	8003fec <__swsetup_r+0xbc>
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	60a3      	str	r3, [r4, #8]
 8003fd6:	6963      	ldr	r3, [r4, #20]
 8003fd8:	425b      	negs	r3, r3
 8003fda:	61a3      	str	r3, [r4, #24]
 8003fdc:	6923      	ldr	r3, [r4, #16]
 8003fde:	b953      	cbnz	r3, 8003ff6 <__swsetup_r+0xc6>
 8003fe0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003fe4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003fe8:	d1ba      	bne.n	8003f60 <__swsetup_r+0x30>
 8003fea:	bd70      	pop	{r4, r5, r6, pc}
 8003fec:	0792      	lsls	r2, r2, #30
 8003fee:	bf58      	it	pl
 8003ff0:	6963      	ldrpl	r3, [r4, #20]
 8003ff2:	60a3      	str	r3, [r4, #8]
 8003ff4:	e7f2      	b.n	8003fdc <__swsetup_r+0xac>
 8003ff6:	2000      	movs	r0, #0
 8003ff8:	e7f7      	b.n	8003fea <__swsetup_r+0xba>
 8003ffa:	bf00      	nop
 8003ffc:	2000000c 	.word	0x2000000c
 8004000:	0800442c 	.word	0x0800442c
 8004004:	0800444c 	.word	0x0800444c
 8004008:	0800440c 	.word	0x0800440c

0800400c <_close_r>:
 800400c:	b538      	push	{r3, r4, r5, lr}
 800400e:	4c06      	ldr	r4, [pc, #24]	; (8004028 <_close_r+0x1c>)
 8004010:	2300      	movs	r3, #0
 8004012:	4605      	mov	r5, r0
 8004014:	4608      	mov	r0, r1
 8004016:	6023      	str	r3, [r4, #0]
 8004018:	f7fc fcb9 	bl	800098e <_close>
 800401c:	1c43      	adds	r3, r0, #1
 800401e:	d102      	bne.n	8004026 <_close_r+0x1a>
 8004020:	6823      	ldr	r3, [r4, #0]
 8004022:	b103      	cbz	r3, 8004026 <_close_r+0x1a>
 8004024:	602b      	str	r3, [r5, #0]
 8004026:	bd38      	pop	{r3, r4, r5, pc}
 8004028:	20000130 	.word	0x20000130

0800402c <__sflush_r>:
 800402c:	898a      	ldrh	r2, [r1, #12]
 800402e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004032:	4605      	mov	r5, r0
 8004034:	0710      	lsls	r0, r2, #28
 8004036:	460c      	mov	r4, r1
 8004038:	d458      	bmi.n	80040ec <__sflush_r+0xc0>
 800403a:	684b      	ldr	r3, [r1, #4]
 800403c:	2b00      	cmp	r3, #0
 800403e:	dc05      	bgt.n	800404c <__sflush_r+0x20>
 8004040:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004042:	2b00      	cmp	r3, #0
 8004044:	dc02      	bgt.n	800404c <__sflush_r+0x20>
 8004046:	2000      	movs	r0, #0
 8004048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800404c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800404e:	2e00      	cmp	r6, #0
 8004050:	d0f9      	beq.n	8004046 <__sflush_r+0x1a>
 8004052:	2300      	movs	r3, #0
 8004054:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004058:	682f      	ldr	r7, [r5, #0]
 800405a:	6a21      	ldr	r1, [r4, #32]
 800405c:	602b      	str	r3, [r5, #0]
 800405e:	d032      	beq.n	80040c6 <__sflush_r+0x9a>
 8004060:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004062:	89a3      	ldrh	r3, [r4, #12]
 8004064:	075a      	lsls	r2, r3, #29
 8004066:	d505      	bpl.n	8004074 <__sflush_r+0x48>
 8004068:	6863      	ldr	r3, [r4, #4]
 800406a:	1ac0      	subs	r0, r0, r3
 800406c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800406e:	b10b      	cbz	r3, 8004074 <__sflush_r+0x48>
 8004070:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004072:	1ac0      	subs	r0, r0, r3
 8004074:	2300      	movs	r3, #0
 8004076:	4602      	mov	r2, r0
 8004078:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800407a:	6a21      	ldr	r1, [r4, #32]
 800407c:	4628      	mov	r0, r5
 800407e:	47b0      	blx	r6
 8004080:	1c43      	adds	r3, r0, #1
 8004082:	89a3      	ldrh	r3, [r4, #12]
 8004084:	d106      	bne.n	8004094 <__sflush_r+0x68>
 8004086:	6829      	ldr	r1, [r5, #0]
 8004088:	291d      	cmp	r1, #29
 800408a:	d848      	bhi.n	800411e <__sflush_r+0xf2>
 800408c:	4a29      	ldr	r2, [pc, #164]	; (8004134 <__sflush_r+0x108>)
 800408e:	40ca      	lsrs	r2, r1
 8004090:	07d6      	lsls	r6, r2, #31
 8004092:	d544      	bpl.n	800411e <__sflush_r+0xf2>
 8004094:	2200      	movs	r2, #0
 8004096:	6062      	str	r2, [r4, #4]
 8004098:	04d9      	lsls	r1, r3, #19
 800409a:	6922      	ldr	r2, [r4, #16]
 800409c:	6022      	str	r2, [r4, #0]
 800409e:	d504      	bpl.n	80040aa <__sflush_r+0x7e>
 80040a0:	1c42      	adds	r2, r0, #1
 80040a2:	d101      	bne.n	80040a8 <__sflush_r+0x7c>
 80040a4:	682b      	ldr	r3, [r5, #0]
 80040a6:	b903      	cbnz	r3, 80040aa <__sflush_r+0x7e>
 80040a8:	6560      	str	r0, [r4, #84]	; 0x54
 80040aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80040ac:	602f      	str	r7, [r5, #0]
 80040ae:	2900      	cmp	r1, #0
 80040b0:	d0c9      	beq.n	8004046 <__sflush_r+0x1a>
 80040b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80040b6:	4299      	cmp	r1, r3
 80040b8:	d002      	beq.n	80040c0 <__sflush_r+0x94>
 80040ba:	4628      	mov	r0, r5
 80040bc:	f000 f8de 	bl	800427c <_free_r>
 80040c0:	2000      	movs	r0, #0
 80040c2:	6360      	str	r0, [r4, #52]	; 0x34
 80040c4:	e7c0      	b.n	8004048 <__sflush_r+0x1c>
 80040c6:	2301      	movs	r3, #1
 80040c8:	4628      	mov	r0, r5
 80040ca:	47b0      	blx	r6
 80040cc:	1c41      	adds	r1, r0, #1
 80040ce:	d1c8      	bne.n	8004062 <__sflush_r+0x36>
 80040d0:	682b      	ldr	r3, [r5, #0]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d0c5      	beq.n	8004062 <__sflush_r+0x36>
 80040d6:	2b1d      	cmp	r3, #29
 80040d8:	d001      	beq.n	80040de <__sflush_r+0xb2>
 80040da:	2b16      	cmp	r3, #22
 80040dc:	d101      	bne.n	80040e2 <__sflush_r+0xb6>
 80040de:	602f      	str	r7, [r5, #0]
 80040e0:	e7b1      	b.n	8004046 <__sflush_r+0x1a>
 80040e2:	89a3      	ldrh	r3, [r4, #12]
 80040e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040e8:	81a3      	strh	r3, [r4, #12]
 80040ea:	e7ad      	b.n	8004048 <__sflush_r+0x1c>
 80040ec:	690f      	ldr	r7, [r1, #16]
 80040ee:	2f00      	cmp	r7, #0
 80040f0:	d0a9      	beq.n	8004046 <__sflush_r+0x1a>
 80040f2:	0793      	lsls	r3, r2, #30
 80040f4:	680e      	ldr	r6, [r1, #0]
 80040f6:	bf08      	it	eq
 80040f8:	694b      	ldreq	r3, [r1, #20]
 80040fa:	600f      	str	r7, [r1, #0]
 80040fc:	bf18      	it	ne
 80040fe:	2300      	movne	r3, #0
 8004100:	eba6 0807 	sub.w	r8, r6, r7
 8004104:	608b      	str	r3, [r1, #8]
 8004106:	f1b8 0f00 	cmp.w	r8, #0
 800410a:	dd9c      	ble.n	8004046 <__sflush_r+0x1a>
 800410c:	4643      	mov	r3, r8
 800410e:	463a      	mov	r2, r7
 8004110:	6a21      	ldr	r1, [r4, #32]
 8004112:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004114:	4628      	mov	r0, r5
 8004116:	47b0      	blx	r6
 8004118:	2800      	cmp	r0, #0
 800411a:	dc06      	bgt.n	800412a <__sflush_r+0xfe>
 800411c:	89a3      	ldrh	r3, [r4, #12]
 800411e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004122:	81a3      	strh	r3, [r4, #12]
 8004124:	f04f 30ff 	mov.w	r0, #4294967295
 8004128:	e78e      	b.n	8004048 <__sflush_r+0x1c>
 800412a:	4407      	add	r7, r0
 800412c:	eba8 0800 	sub.w	r8, r8, r0
 8004130:	e7e9      	b.n	8004106 <__sflush_r+0xda>
 8004132:	bf00      	nop
 8004134:	20400001 	.word	0x20400001

08004138 <_fflush_r>:
 8004138:	b538      	push	{r3, r4, r5, lr}
 800413a:	690b      	ldr	r3, [r1, #16]
 800413c:	4605      	mov	r5, r0
 800413e:	460c      	mov	r4, r1
 8004140:	b1db      	cbz	r3, 800417a <_fflush_r+0x42>
 8004142:	b118      	cbz	r0, 800414c <_fflush_r+0x14>
 8004144:	6983      	ldr	r3, [r0, #24]
 8004146:	b90b      	cbnz	r3, 800414c <_fflush_r+0x14>
 8004148:	f7ff fa8e 	bl	8003668 <__sinit>
 800414c:	4b0c      	ldr	r3, [pc, #48]	; (8004180 <_fflush_r+0x48>)
 800414e:	429c      	cmp	r4, r3
 8004150:	d109      	bne.n	8004166 <_fflush_r+0x2e>
 8004152:	686c      	ldr	r4, [r5, #4]
 8004154:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004158:	b17b      	cbz	r3, 800417a <_fflush_r+0x42>
 800415a:	4621      	mov	r1, r4
 800415c:	4628      	mov	r0, r5
 800415e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004162:	f7ff bf63 	b.w	800402c <__sflush_r>
 8004166:	4b07      	ldr	r3, [pc, #28]	; (8004184 <_fflush_r+0x4c>)
 8004168:	429c      	cmp	r4, r3
 800416a:	d101      	bne.n	8004170 <_fflush_r+0x38>
 800416c:	68ac      	ldr	r4, [r5, #8]
 800416e:	e7f1      	b.n	8004154 <_fflush_r+0x1c>
 8004170:	4b05      	ldr	r3, [pc, #20]	; (8004188 <_fflush_r+0x50>)
 8004172:	429c      	cmp	r4, r3
 8004174:	bf08      	it	eq
 8004176:	68ec      	ldreq	r4, [r5, #12]
 8004178:	e7ec      	b.n	8004154 <_fflush_r+0x1c>
 800417a:	2000      	movs	r0, #0
 800417c:	bd38      	pop	{r3, r4, r5, pc}
 800417e:	bf00      	nop
 8004180:	0800442c 	.word	0x0800442c
 8004184:	0800444c 	.word	0x0800444c
 8004188:	0800440c 	.word	0x0800440c

0800418c <_lseek_r>:
 800418c:	b538      	push	{r3, r4, r5, lr}
 800418e:	4c07      	ldr	r4, [pc, #28]	; (80041ac <_lseek_r+0x20>)
 8004190:	4605      	mov	r5, r0
 8004192:	4608      	mov	r0, r1
 8004194:	4611      	mov	r1, r2
 8004196:	2200      	movs	r2, #0
 8004198:	6022      	str	r2, [r4, #0]
 800419a:	461a      	mov	r2, r3
 800419c:	f7fc fc1e 	bl	80009dc <_lseek>
 80041a0:	1c43      	adds	r3, r0, #1
 80041a2:	d102      	bne.n	80041aa <_lseek_r+0x1e>
 80041a4:	6823      	ldr	r3, [r4, #0]
 80041a6:	b103      	cbz	r3, 80041aa <_lseek_r+0x1e>
 80041a8:	602b      	str	r3, [r5, #0]
 80041aa:	bd38      	pop	{r3, r4, r5, pc}
 80041ac:	20000130 	.word	0x20000130

080041b0 <__swhatbuf_r>:
 80041b0:	b570      	push	{r4, r5, r6, lr}
 80041b2:	460e      	mov	r6, r1
 80041b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041b8:	2900      	cmp	r1, #0
 80041ba:	b096      	sub	sp, #88	; 0x58
 80041bc:	4614      	mov	r4, r2
 80041be:	461d      	mov	r5, r3
 80041c0:	da07      	bge.n	80041d2 <__swhatbuf_r+0x22>
 80041c2:	2300      	movs	r3, #0
 80041c4:	602b      	str	r3, [r5, #0]
 80041c6:	89b3      	ldrh	r3, [r6, #12]
 80041c8:	061a      	lsls	r2, r3, #24
 80041ca:	d410      	bmi.n	80041ee <__swhatbuf_r+0x3e>
 80041cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041d0:	e00e      	b.n	80041f0 <__swhatbuf_r+0x40>
 80041d2:	466a      	mov	r2, sp
 80041d4:	f000 f8b2 	bl	800433c <_fstat_r>
 80041d8:	2800      	cmp	r0, #0
 80041da:	dbf2      	blt.n	80041c2 <__swhatbuf_r+0x12>
 80041dc:	9a01      	ldr	r2, [sp, #4]
 80041de:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80041e2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80041e6:	425a      	negs	r2, r3
 80041e8:	415a      	adcs	r2, r3
 80041ea:	602a      	str	r2, [r5, #0]
 80041ec:	e7ee      	b.n	80041cc <__swhatbuf_r+0x1c>
 80041ee:	2340      	movs	r3, #64	; 0x40
 80041f0:	2000      	movs	r0, #0
 80041f2:	6023      	str	r3, [r4, #0]
 80041f4:	b016      	add	sp, #88	; 0x58
 80041f6:	bd70      	pop	{r4, r5, r6, pc}

080041f8 <__smakebuf_r>:
 80041f8:	898b      	ldrh	r3, [r1, #12]
 80041fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80041fc:	079d      	lsls	r5, r3, #30
 80041fe:	4606      	mov	r6, r0
 8004200:	460c      	mov	r4, r1
 8004202:	d507      	bpl.n	8004214 <__smakebuf_r+0x1c>
 8004204:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004208:	6023      	str	r3, [r4, #0]
 800420a:	6123      	str	r3, [r4, #16]
 800420c:	2301      	movs	r3, #1
 800420e:	6163      	str	r3, [r4, #20]
 8004210:	b002      	add	sp, #8
 8004212:	bd70      	pop	{r4, r5, r6, pc}
 8004214:	ab01      	add	r3, sp, #4
 8004216:	466a      	mov	r2, sp
 8004218:	f7ff ffca 	bl	80041b0 <__swhatbuf_r>
 800421c:	9900      	ldr	r1, [sp, #0]
 800421e:	4605      	mov	r5, r0
 8004220:	4630      	mov	r0, r6
 8004222:	f7ff faab 	bl	800377c <_malloc_r>
 8004226:	b948      	cbnz	r0, 800423c <__smakebuf_r+0x44>
 8004228:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800422c:	059a      	lsls	r2, r3, #22
 800422e:	d4ef      	bmi.n	8004210 <__smakebuf_r+0x18>
 8004230:	f023 0303 	bic.w	r3, r3, #3
 8004234:	f043 0302 	orr.w	r3, r3, #2
 8004238:	81a3      	strh	r3, [r4, #12]
 800423a:	e7e3      	b.n	8004204 <__smakebuf_r+0xc>
 800423c:	4b0d      	ldr	r3, [pc, #52]	; (8004274 <__smakebuf_r+0x7c>)
 800423e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004240:	89a3      	ldrh	r3, [r4, #12]
 8004242:	6020      	str	r0, [r4, #0]
 8004244:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004248:	81a3      	strh	r3, [r4, #12]
 800424a:	9b00      	ldr	r3, [sp, #0]
 800424c:	6163      	str	r3, [r4, #20]
 800424e:	9b01      	ldr	r3, [sp, #4]
 8004250:	6120      	str	r0, [r4, #16]
 8004252:	b15b      	cbz	r3, 800426c <__smakebuf_r+0x74>
 8004254:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004258:	4630      	mov	r0, r6
 800425a:	f000 f881 	bl	8004360 <_isatty_r>
 800425e:	b128      	cbz	r0, 800426c <__smakebuf_r+0x74>
 8004260:	89a3      	ldrh	r3, [r4, #12]
 8004262:	f023 0303 	bic.w	r3, r3, #3
 8004266:	f043 0301 	orr.w	r3, r3, #1
 800426a:	81a3      	strh	r3, [r4, #12]
 800426c:	89a3      	ldrh	r3, [r4, #12]
 800426e:	431d      	orrs	r5, r3
 8004270:	81a5      	strh	r5, [r4, #12]
 8004272:	e7cd      	b.n	8004210 <__smakebuf_r+0x18>
 8004274:	08003631 	.word	0x08003631

08004278 <__malloc_lock>:
 8004278:	4770      	bx	lr

0800427a <__malloc_unlock>:
 800427a:	4770      	bx	lr

0800427c <_free_r>:
 800427c:	b538      	push	{r3, r4, r5, lr}
 800427e:	4605      	mov	r5, r0
 8004280:	2900      	cmp	r1, #0
 8004282:	d045      	beq.n	8004310 <_free_r+0x94>
 8004284:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004288:	1f0c      	subs	r4, r1, #4
 800428a:	2b00      	cmp	r3, #0
 800428c:	bfb8      	it	lt
 800428e:	18e4      	addlt	r4, r4, r3
 8004290:	f7ff fff2 	bl	8004278 <__malloc_lock>
 8004294:	4a1f      	ldr	r2, [pc, #124]	; (8004314 <_free_r+0x98>)
 8004296:	6813      	ldr	r3, [r2, #0]
 8004298:	4610      	mov	r0, r2
 800429a:	b933      	cbnz	r3, 80042aa <_free_r+0x2e>
 800429c:	6063      	str	r3, [r4, #4]
 800429e:	6014      	str	r4, [r2, #0]
 80042a0:	4628      	mov	r0, r5
 80042a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80042a6:	f7ff bfe8 	b.w	800427a <__malloc_unlock>
 80042aa:	42a3      	cmp	r3, r4
 80042ac:	d90c      	bls.n	80042c8 <_free_r+0x4c>
 80042ae:	6821      	ldr	r1, [r4, #0]
 80042b0:	1862      	adds	r2, r4, r1
 80042b2:	4293      	cmp	r3, r2
 80042b4:	bf04      	itt	eq
 80042b6:	681a      	ldreq	r2, [r3, #0]
 80042b8:	685b      	ldreq	r3, [r3, #4]
 80042ba:	6063      	str	r3, [r4, #4]
 80042bc:	bf04      	itt	eq
 80042be:	1852      	addeq	r2, r2, r1
 80042c0:	6022      	streq	r2, [r4, #0]
 80042c2:	6004      	str	r4, [r0, #0]
 80042c4:	e7ec      	b.n	80042a0 <_free_r+0x24>
 80042c6:	4613      	mov	r3, r2
 80042c8:	685a      	ldr	r2, [r3, #4]
 80042ca:	b10a      	cbz	r2, 80042d0 <_free_r+0x54>
 80042cc:	42a2      	cmp	r2, r4
 80042ce:	d9fa      	bls.n	80042c6 <_free_r+0x4a>
 80042d0:	6819      	ldr	r1, [r3, #0]
 80042d2:	1858      	adds	r0, r3, r1
 80042d4:	42a0      	cmp	r0, r4
 80042d6:	d10b      	bne.n	80042f0 <_free_r+0x74>
 80042d8:	6820      	ldr	r0, [r4, #0]
 80042da:	4401      	add	r1, r0
 80042dc:	1858      	adds	r0, r3, r1
 80042de:	4282      	cmp	r2, r0
 80042e0:	6019      	str	r1, [r3, #0]
 80042e2:	d1dd      	bne.n	80042a0 <_free_r+0x24>
 80042e4:	6810      	ldr	r0, [r2, #0]
 80042e6:	6852      	ldr	r2, [r2, #4]
 80042e8:	605a      	str	r2, [r3, #4]
 80042ea:	4401      	add	r1, r0
 80042ec:	6019      	str	r1, [r3, #0]
 80042ee:	e7d7      	b.n	80042a0 <_free_r+0x24>
 80042f0:	d902      	bls.n	80042f8 <_free_r+0x7c>
 80042f2:	230c      	movs	r3, #12
 80042f4:	602b      	str	r3, [r5, #0]
 80042f6:	e7d3      	b.n	80042a0 <_free_r+0x24>
 80042f8:	6820      	ldr	r0, [r4, #0]
 80042fa:	1821      	adds	r1, r4, r0
 80042fc:	428a      	cmp	r2, r1
 80042fe:	bf04      	itt	eq
 8004300:	6811      	ldreq	r1, [r2, #0]
 8004302:	6852      	ldreq	r2, [r2, #4]
 8004304:	6062      	str	r2, [r4, #4]
 8004306:	bf04      	itt	eq
 8004308:	1809      	addeq	r1, r1, r0
 800430a:	6021      	streq	r1, [r4, #0]
 800430c:	605c      	str	r4, [r3, #4]
 800430e:	e7c7      	b.n	80042a0 <_free_r+0x24>
 8004310:	bd38      	pop	{r3, r4, r5, pc}
 8004312:	bf00      	nop
 8004314:	20000090 	.word	0x20000090

08004318 <_read_r>:
 8004318:	b538      	push	{r3, r4, r5, lr}
 800431a:	4c07      	ldr	r4, [pc, #28]	; (8004338 <_read_r+0x20>)
 800431c:	4605      	mov	r5, r0
 800431e:	4608      	mov	r0, r1
 8004320:	4611      	mov	r1, r2
 8004322:	2200      	movs	r2, #0
 8004324:	6022      	str	r2, [r4, #0]
 8004326:	461a      	mov	r2, r3
 8004328:	f7fc fb14 	bl	8000954 <_read>
 800432c:	1c43      	adds	r3, r0, #1
 800432e:	d102      	bne.n	8004336 <_read_r+0x1e>
 8004330:	6823      	ldr	r3, [r4, #0]
 8004332:	b103      	cbz	r3, 8004336 <_read_r+0x1e>
 8004334:	602b      	str	r3, [r5, #0]
 8004336:	bd38      	pop	{r3, r4, r5, pc}
 8004338:	20000130 	.word	0x20000130

0800433c <_fstat_r>:
 800433c:	b538      	push	{r3, r4, r5, lr}
 800433e:	4c07      	ldr	r4, [pc, #28]	; (800435c <_fstat_r+0x20>)
 8004340:	2300      	movs	r3, #0
 8004342:	4605      	mov	r5, r0
 8004344:	4608      	mov	r0, r1
 8004346:	4611      	mov	r1, r2
 8004348:	6023      	str	r3, [r4, #0]
 800434a:	f7fc fb2c 	bl	80009a6 <_fstat>
 800434e:	1c43      	adds	r3, r0, #1
 8004350:	d102      	bne.n	8004358 <_fstat_r+0x1c>
 8004352:	6823      	ldr	r3, [r4, #0]
 8004354:	b103      	cbz	r3, 8004358 <_fstat_r+0x1c>
 8004356:	602b      	str	r3, [r5, #0]
 8004358:	bd38      	pop	{r3, r4, r5, pc}
 800435a:	bf00      	nop
 800435c:	20000130 	.word	0x20000130

08004360 <_isatty_r>:
 8004360:	b538      	push	{r3, r4, r5, lr}
 8004362:	4c06      	ldr	r4, [pc, #24]	; (800437c <_isatty_r+0x1c>)
 8004364:	2300      	movs	r3, #0
 8004366:	4605      	mov	r5, r0
 8004368:	4608      	mov	r0, r1
 800436a:	6023      	str	r3, [r4, #0]
 800436c:	f7fc fb2b 	bl	80009c6 <_isatty>
 8004370:	1c43      	adds	r3, r0, #1
 8004372:	d102      	bne.n	800437a <_isatty_r+0x1a>
 8004374:	6823      	ldr	r3, [r4, #0]
 8004376:	b103      	cbz	r3, 800437a <_isatty_r+0x1a>
 8004378:	602b      	str	r3, [r5, #0]
 800437a:	bd38      	pop	{r3, r4, r5, pc}
 800437c:	20000130 	.word	0x20000130

08004380 <_init>:
 8004380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004382:	bf00      	nop
 8004384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004386:	bc08      	pop	{r3}
 8004388:	469e      	mov	lr, r3
 800438a:	4770      	bx	lr

0800438c <_fini>:
 800438c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800438e:	bf00      	nop
 8004390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004392:	bc08      	pop	{r3}
 8004394:	469e      	mov	lr, r3
 8004396:	4770      	bx	lr
